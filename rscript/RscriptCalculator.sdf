module RscriptCalculator

imports Rscript
%% imports Relations[Elem]

exports
   sorts RVALUE RSTORE

   context-free syntax

%% The values that a variable in the RSTORE may have

        Elem                          		-> RVALUE
        "*empty*"                     		-> RVALUE
        RVAR # REXP                    		-> RVALUE
        RVAR # RVAR # REXP              	-> RVALUE
        RVAR # RVAR # RVAR # REXP		-> RVALUE

        "if" Boolean "then" RVALUE "else" RVALUE "fi"       
                                      -> RVALUE

%% The RSTORE itself, maps RVARs to RVALUEs
        
        "[" { RVAR # RVALUE ","}* "]"         -> RSTORE
        assign(RVAR, RVALUE, RSTORE)          -> RSTORE
        value(RVAR, RSTORE)                   -> RVALUE

        rval2rel(RVALUE)	 	      -> Rel[[Elem]]
        rval2bag(RVALUE)		      -> Bag[[Elem]]

	add-tuple(RVAR, Elem # Elem, RSTORE)  -> RSTORE

	extend-rel(RVAR, Rel[[Elem]], RSTORE) -> RSTORE

%% Main evaluation functions for Rscripts

        eval-rscript(RSCRIPT)                 -> RSTORE

        eval-rscript-value(RSCRIPT, RSTORE)   -> RVALUE  %% not yet defined!
        eval-rscript(RSCRIPT, RVAR, RSTORE)   -> RVALUE

        eval-rscript(RSTAT, RSTORE)           -> RSTORE
        eval-rscript(RSTAT*, RSTORE)          -> RSTORE

        eval-rexp(REXP, RSTORE)		      -> RVALUE

%% should be hidden

   sorts INFIXOP PREFIXOP POSTFIXOP

   context-free syntax

	 "{" {FROM ","}+ "::" REXP ("," REXP)? "}"	-> REXP
 
        evalp(REXP, RSTORE)            		-> Boolean
        evale(REXP, RSTORE)            		-> Elem
        evalb(REXP, RSTORE)            		-> Bag[[Elem]]
        evalr(REXP, RSTORE)            		-> Rel[[Elem]]

        evalx(REXP, RSTORE)            		-> RVALUE
        apply "(" RVALUE INFIXOP RVALUE ")"   	-> RVALUE
        apply "(" PREFIXOP RVALUE ")"         	-> RVALUE
        apply "(" RVALUE POSTFIXOP ")"         	-> RVALUE

%% Binary operatorsn

	"and"					-> INFIXOP
	"or"					-> INFIXOP

        "in"			       		-> INFIXOP
        "notin"			       		-> INFIXOP

        "=="                           		-> INFIXOP
        "!="                           		-> INFIXOP
        "<="                           		-> INFIXOP
        "<"                            		-> INFIXOP
        ">="                           		-> INFIXOP
        ">"                            		-> INFIXOP

        "union"                        		-> INFIXOP
        "inter"                        		-> INFIXOP
        "\\"                           		-> INFIXOP
        "o"                            		-> INFIXOP
        "x"                            		-> INFIXOP
        "."                            		-> INFIXOP

%% Prefix Operators

	"not"					-> PREFIXOP
        "#"                            		-> PREFIXOP

%% Postfix Operators

	"+"					-> POSTFIXOP
	"*"					-> POSTFIXOP


        equal(Elem, Elem)              -> Boolean
	equal(RVALUE, RVALUE)		-> Boolean

        eval-iter(RVAR, Bag[[Elem]], RVALUE, REXP, RSTORE)		-> RVALUE
        eval-citer(RVAR, Bag[[Elem]], RVALUE, REXP, REXP, RSTORE)	-> RVALUE

        eval-iter2(RVAR, RVAR, Rel[[Elem]], RVALUE, REXP, RSTORE)	-> RVALUE
        eval-citer2(RVAR, RVAR, Rel[[Elem]], RVALUE, REXP, REXP, RSTORE)-> RVALUE
	append(RVALUE, RVALUE)						-> RVALUE
	existsb(RVAR, Bag[[Elem]], REXP, RSTORE)			-> Boolean
	existsr(RVAR, RVAR, Rel[[Elem]], REXP, RSTORE)			-> Boolean
	forallb(RVAR, Bag[[Elem]], REXP, RSTORE)			-> Boolean
	forallr(RVAR, Rel[[Elem]], REXP, RSTORE)			-> Boolean

	solve1(Integer, RVAR, REXP, RSTORE)				-> RSTORE
	solve2(Integer, RVAR, REXP, RVAR, REXP, RSTORE)			-> RSTORE

hiddens
%%  imports asf/syntax/Comments

   variables
        "$Store" [0-9\']*              -> RSTORE
        "$Val" [0-9\']*                -> RVALUE
        "$VPair*" [0-9\']*             -> { RVAR # RVALUE ","}*

        "$Var" [0-9\']*                -> RVAR
        "$Exp"  [0-9\']*               -> REXP
        "$Test"  [0-9\']*               -> REXP
        "$Exp*"  [0-9\']*              -> { REXP ","}*
        "$Exp+"  [0-9\']*              -> { REXP ","}+

        "$Rel" [0-9\']*                -> Rel[[Elem]]
        "$Bag" [0-9\']*                -> Bag[[Elem]]
        "$Elem"   [0-9\']*             -> Elem
        "$Elem*"  [0-9\']*             -> {Elem ","}*
        "$Elem+"  [0-9\']*             -> {Elem ","}+

        "$Tuple" [0-9\']*              -> Elem # Elem
        "$Tuple*" [0-9\']*             -> { Elem # Elem ","}*
        "$Tuple+" [0-9\']*             -> { Elem # Elem ","}+

        "$From" [0-9\']*               -> FROM
        "$From*" [0-9\']*              -> {FROM ","}*
        "$From+" [0-9\']*              -> {FROM ","}+

        "$Script" [0-9\']*             -> RSCRIPT

        "$Stat" [0-9\']*               -> RSTAT
        "$Stat*" [0-9\']*              -> RSTAT*

        "$Bool" [0-9\']*               -> Boolean
        "$Integer" [0-9\']*            -> Integer
        "$String" [0-9\']*           	-> String
	"$Etype" [0-9\']*              -> REXPTYPE

	"$Iop"				-> INFIXOP
	"$Preop"			-> PREFIXOP
	"$Postop"			-> POSTFIXOP


     


