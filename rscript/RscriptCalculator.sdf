module RscriptCalculator

imports Rstore

exports
   sorts TESTREPORT { DCLRVAR ","}+

   context-free syntax
	is-rel(RVALUE)					-> Boolean

	increment(RVAR, RSTORE)				-> RSTORE
 
%% Main evaluation functions for Rscripts

        eval-rscript(RSCRIPT)                 		-> RSTORE
        eval-rscript-value(RSCRIPT, RSTORE)   		-> Elem  %% not yet defined!
        eval-rscript(RSCRIPT, RVAR, RSTORE)   		-> Elem

%% Test suite support

	"All" Integer "tests" "passed"			-> TESTREPORT
	Integer "of" Integer "tests" "failed:" RVALUE 	-> TESTREPORT

	testsuite-report(Integer, Integer, RVALUE) 	-> TESTREPORT

	eval-rscript-testsuite(RSCRIPT)			-> TESTREPORT

%% should be hidden

   sorts INFIXOP PREFIXOP POSTFIXOP

   context-free syntax

        eval-rstat(RSTAT, RSTORE)           			-> RSTORE
        eval-rstats(RSTAT*, RSTORE)          			-> RSTORE

	 "{" {FROM ","}+ "::" REXP  "}"				-> REXP
	FROM "::" REXP						-> REXP
 
        evalp(REXP, RSTORE)            				-> Boolean
        evale(REXP, RSTORE)            				-> Elem
        evalt(REXP, RSTORE)            				-> Tuple
        evalb(REXP, RSTORE)            				-> Bag[[Elem]]
        evalr(REXP, RSTORE)            				-> Bag[[Elem]]
        evalx(REXP, RSTORE)            				-> Elem

	add-element(Elem, Bag[[Elem]])				-> Bag[[Elem]]
	power(Bag[[Elem]])					-> Bag[[Elem]]

	extract-rvars( {DCLRVAR ","}+ )				-> {RVAR  ","}+
	bind-formals({RVAR ","}+, {REXP ","}+, RSTORE)		-> RSTORE

        equal-elem(Elem, Elem)              			-> Boolean
	equal-rval(RVALUE, RVALUE)				-> Boolean

	eval-itern({RVAR ","}+,  RVALUE, RVALUE, REXP, RSTORE)	-> Elem
	store-var({RVAR ","}+, RVALUE, RSTORE)			-> RSTORE

	append(RVALUE, RVALUE)					-> Elem
	existsb(RVAR, Bag[[Elem]], REXP, RSTORE)		-> Boolean
	existsr(RVAR, RVAR, Bag[[Elem]], REXP, RSTORE)		-> Boolean
	forallb(RVAR, Bag[[Elem]], REXP, RSTORE)		-> Boolean
	forallr(RVAR, Bag[[Elem]], REXP, RSTORE)		-> Boolean

	solve1(Integer, RVAR, REXP, RSTORE)			-> RSTORE
	solve2(Integer, RVAR, REXP, RVAR, REXP, RSTORE)		-> RSTORE

        apply(RVALUE, INFIXOP, RVALUE)    			-> Elem
        apply(PREFIXOP, RVALUE)         			-> Elem
        apply(RVALUE, POSTFIXOP)        			-> Elem

%% Binary operators

	"and"					-> INFIXOP
	"or"					-> INFIXOP
	"implies"				-> INFIXOP

        "in"			       		-> INFIXOP
        "notin"			       		-> INFIXOP

        "=="                           		-> INFIXOP
        "!="                           		-> INFIXOP
        "<="                           		-> INFIXOP
        "<"                            		-> INFIXOP
        ">="                           		-> INFIXOP
        ">"                            		-> INFIXOP

        "union"                        		-> INFIXOP
        "inter"                        		-> INFIXOP
        "\\"                           		-> INFIXOP
        "o"                            		-> INFIXOP
        "x"                            		-> INFIXOP
        "."                            		-> INFIXOP

%% Prefix Operators

	"not"					-> PREFIXOP
        "#"                            		-> PREFIXOP

%% Postfix Operators

	"+"					-> POSTFIXOP
	"*"					-> POSTFIXOP


hiddens
%%  imports asf/syntax/Comments

   variables
        "$Rstore" [0-9\']*             -> RSTORE
        "$Val" [0-9\']*                -> RVALUE
        "$VPair*" [0-9\']*             -> { RVAR # RVALUE ","}*

        "$Var" [0-9\']*                -> RVAR
        "$Var*" [0-9\']*               -> {RVAR ","}*
        "$Var+" [0-9\']*               -> {RVAR ","}+

        "$Exp"  [0-9\']*               -> REXP
        "$Test"  [0-9\']*              -> REXP
        "$Exp*"  [0-9\']*              -> { REXP ","}*
        "$Exp+"  [0-9\']*              -> { REXP ","}+
        "$Exps"  [0-9\']*              -> { REXP ","}+

        "$Rel" [0-9\']*                -> Bag[[Elem]] 
        "$Bag" [0-9\']*                -> Bag[[Elem]]

        "$Elem"   [0-9\']*             -> Elem
        "$Elem*"  [0-9\']*             -> {Elem ","}*
        "$Elem+"  [0-9\']*             -> {Elem ","}+

        "$Tuple" [0-9\']*              -> Tuple
        "$Tuple*" [0-9\']*             -> { Tuple ","}*
        "$Tuple+" [0-9\']*             -> { Tuple ","}+

        "$From" [0-9\']*               -> FROM
        "$From*" [0-9\']*              -> {FROM ","}*
        "$From+" [0-9\']*              -> {FROM ","}+

        "$Rscript" [0-9\']*            -> RSCRIPT

        "$Stat" [0-9\']*               -> RSTAT
        "$Stat*" [0-9\']*              -> RSTAT*
        "$Stat+" [0-9\']*              -> RSTAT+

        "$Bool" [0-9\']*               -> Boolean
        "$Integer" [0-9\']*            -> Integer
        "$String" [0-9\']*             -> String

	"$Etype" [0-9\']*              -> REXPTYPE
	"$Etype*" [0-9\']*             -> {REXPTYPE ","}*
	"$Etype+" [0-9\']*             -> {REXPTYPE ","}+

	"$Iop"				-> INFIXOP
	"$Preop"			-> PREFIXOP
	"$Postop"			-> POSTFIXOP

	"$Target"  [0-9\']*  		-> TARGET

	"$DclRvar+" [0-9\']*		-> { DCLRVAR ","}+


     


