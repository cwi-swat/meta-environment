equations

%%-----------------------------------------------------------------------------------

[xxx] fun [] to $Etype = $Etype

%% --- Simplify n-ary tuple types

[st1]	$Etype+ = $Etype'
	=============================================================
	<$Etype1, $Etype2, $Etype+> = <$Etype1, <$Etype2, $Etype'>>

[st2]	$Etype+1 = $Etype', $Etype+2
	=============================================================
	<$Etype1, $Etype2, $Etype+1> = <$Etype1, <$Etype2, $Etype', $Etype+2>>

%% --- Simpleify n-ary relation type

[sr1]	<$Etype1, $Etype2, $Etype+1> = <$Etype1', $Etype2'>
	============================================================= 
	rel[$Etype1, $Etype2, $Etype+1] = rel[$Etype1', $Etype2']

%% -- Simplify n-ary tuple expressions

[st1]	$Exps = $Exp'
	=============================================================
	<$Exp1, $Exp2, $Exps> = <$Exp1, <$Exp2, $Exp'>>

[st2]	$Exps1 = $Exp', $Exps2
	=============================================================
	<$Exp1, $Exp2, $Exps1> = <$Exp1, <$Exp2, $Exp', $Exps2>>


%% --- Type of element

[to1]	type-of($Integer) = int 
[to2]	type-of($Boolean) = bool
[to3]	type-of($String)  = str
[to4]	type-of($Area)    = area

%% --- Equality on types: ==

[eqt1]	$Etype == $Etype = true

[eqt2]	rel[$Etype1,$Etype2] == bag[<$Etype1, $Etype2>] = true

[eqt3]	bag[<$Etype1,$Etype2>] == rel[$Etype1, $Etype2] = true

[default-eqt]
	$Etype1 == $Etype2 = false

%% --- Is tuple

[it1]	is-tuple(<$Elem1, $Elem2>) = true
[default-it]
	is-tuple($Elem) = false

%% --- If-then-else on type environments

[ite1]	if true then $Tenv1 else $Tenv2 fi = $Tenv1

[ite2]	if false then $Tenv1 else $Tenv2 fi = $Tenv2

%% --- If-then-else on <Type, TypeEnv>

[ite3]	if true then <$Etype1, $Tenv1> else <$Etype2, $Tenv2> fi = <$Etype1, $Tenv1>

[ite4]	if false then <$Etype1, $Tenv1> else <$Etype2, $Tenv2> fi = <$Etype2, $Tenv2>

%% --- Add error message

[te1] <$Table, errors[$Error*]> + $Error = <$Table, errors[$Error*;
$Error]>

%% --- Errors to ItemList

[i2s] rvar2str(rvar(Char*)) = strcon(""" Char* """)

[cve-1] convert-errors(errors[$Error+]) = convert-errors1(errors[$Error+])
[cve-1] convert-errors(errors[]) =  [listitem("Rscript is type correct!", area("",0,0,0,0))]


[cve-1] convert-errors1(errors[$Error*]) = [$ListItem*]
      	================================================
        convert-errors1(errors[$Error; $Error*])= [e2i($Error), $ListItem*]

[cve-2] convert-errors1(errors[]) = []

[e2i-1] e2i($Exp cannot be typed)	= listitem("Expression cannot be typed", get-area($Exp))
[e2i-2] e2i($Stat cannot be typed)	= listitem("Statement cannot be typed", get-area($Stat))
[e2i-3] e2i($Gen cannot be typed) 	= listitem("Generator cannot be typed", get-area($Gen))
[e2i-4] e2i($Bag cannot be typed) 	= listitem("Bag cannot be typed", get-area($Bag))
[e2i-5] e2i($Rel cannot be typed) 	= listitem("Relation cannot be typed", get-area($Rel))
[e2i-6] e2i(Undeclared $Var) 		= listitem("Undeclared: " || rvar2str($Var), get-area($Var))
[e2i-7] e2i($Var redeclared) 		= listitem("Redeclared: " || rvar2str($Var), get-area($Var))
[e2i-8] e2i(Incompatible argument types $Etype in $Exp) = 
		listitem("Incompatible arguments of type " || t2s($Etype), get-area($Exp))
[e2i-9] e2i($Exp should have type $Etype)= 
	listitem("Expression should have type " || t2s($Etype), get-area($Exp))
[e2i-10] e2i($Exp should be of type bag) = listitem("Expression should be of type bag", get-area($Exp))
[e2i-11] e2i($Exp should be of type rel) = listitem("Expression should be of type relation", get-area($Exp))
[e2i-12] e2i(No definition for $Var with argument $Etype) = 
        listitem("No definition for " || rvar2str($Var) || " with argument " || t2s($Etype), get-area($Var))

[t2s-1]	t2s(int) 			= "int"
[t2s-2] t2s(bool) 			= "bool"
[t2s-3] t2s(str) 			= "str"
[t2s-4] t2s(area) 			= "area"
[t2s-5] t2s(undefined) 			= "undefined"
[t2s-6] t2s(< $Etype1, $Etype2 >)	= "<" || t2s($Etype1) || "," || t2s($Etype2) || ">"
[t2s-7] t2s(bag[$Etype])		= "bag[" || t2s($Etype) || "]"
[t2s-8] t2s(rel[$Etype1, $Etype2]) 	= "rel[" || t2s($Etype1) || "," || t2s($Etype1) || "]"

[t2s-8] t2s([$Etype*]) 			= "[" || tl2sl($Etype*) || "]"
[t2s-9] t2s($Var) 			= rvar2str($Var)

[tl2sl-1]
	tl2sl($Etype, $Etype*)	= t2s($Etype) || " " || tl2sl($Etype*)
[tl2sl-2]
	tl2sl()			= ""


%% --- Lookup/store/delete

[te2] lookup(<$Table, $Errors>, $Var) = lookup($Table, $Var)
[te3] store(<$Table, $Errors>, $Var, $Etype) = <store($Table, $Var, $Etype), $Errors>
[te4] delete(<$Table, $Errors>, $Var)  = <delete($Table, $Var), $Errors>

%%-----------------------------------------------------------------------------------

[check-const-tuple1] 
      	check-const($Elem1, $Tenv) = <$Etype1, $Tenv'>, 
      	check-const($Elem2, $Tenv') = <$Etype2, $Tenv''>
    	============================================
     	check-const-tuple(<$Elem1, $Elem2>, $Tenv) = <<$Etype1, $Etype2>, $Tenv''>

%% --- Check Elementary values

[check-const-bool] 
      check-const($Boolean, $Tenv) = <type-of($Boolean), $Tenv>

[check-const-int] 
      check-const($Integer, $Tenv) = <type-of($Integer), $Tenv>

[check-const-str]
      check-const($String, $Tenv) = <type-of($String), $Tenv>

[check-const-area]
      check-const($Area, $Tenv) = <type-of($Area), $Tenv>

[check-const-tuple1] 
      	check-const($Elem1, $Tenv) = <$Etype1, $Tenv'>, 
      	check-const($Elem2, $Tenv') = <$Etype2, $Tenv''>
    	============================================
     	check-const(<$Elem1, $Elem2>, $Tenv) = <<$Etype1, $Etype2>, $Tenv''>

[check-const-bag1]
      check-const($Bag, $Tenv) = check-const-bag-or-rel($Bag, $Tenv)

[check-const-br1]
      	is-tuple($Elem) = false,
       	check-const($Elem, $Tenv) = <$Etype, $Tenv'>,
       	$Etype' = bag[$Etype],
       	check-const-bag-or-rel({ $Elem+ }, $Tenv') = <$Etype', $Tenv''>
       	==========================================
       	check-const-bag-or-rel({ $Elem, $Elem+ }, $Tenv) = <$Etype', $Tenv''>

[check-const-br2] 
	is-tuple($Elem) = false,
       	check-const($Elem, $Tenv) = <$Etype, $Tenv'>,
       	$Etype' =  bag[$Etype]
       	==========================================
       	check-const-bag-or-rel({ $Elem }, $Tenv) = <$Etype', $Tenv'>

[check-const-br31]
	is-tuple($Elem) = true,   
	check-const-tuple($Elem, $Tenv) = <<$Etype1, $Etype2>, $Tenv'>, 
	$Etype = rel[$Etype1,$Etype2],
      	check-const-bag-or-rel({ $Elem+ }, $Tenv') = <$Etype, $Tenv''>
      	==========================================
      	check-const-bag-or-rel({ $Elem, $Elem+ }, $Tenv) = <$Etype, $Tenv''>

[check-const-br4]
	is-tuple($Elem) = true, 
	check-const-tuple($Elem, $Tenv) = <<$Etype1, $Etype2>, $Tenv'>, 
	$Etype = rel[$Etype1,$Etype2]
       ==========================================
       check-const-bag-or-rel({ $Elem }, $Tenv) = <$Etype, $Tenv'>

%%-----------------------------------------------------------------------------------

%% Check arbitrary expressions

[check-const1]
      check($Elem, $Tenv) = check-const($Elem, $Tenv)

[check-var] 
      lookup($Tenv, $Var) = $Etype
      ============================================
      check($Var, $Tenv) = if $Etype == not-in-table then <undefined, $Tenv + Undeclared $Var> else <$Etype, $Tenv> fi

[check-tuple-const]
 	check($Tuple, $Tenv) = check-const-tuple($Tuple, $Tenv)	

[check-tuple-exp1] 
      	check($Exp1, $Tenv) = <$Etype1, $Tenv'>, 
      	check($Exp2, $Tenv') = <$Etype2, $Tenv''>
      	============================================
      	check(<$Exp1, $Exp2>, $Tenv) = <<$Etype1, $Etype2>, $Tenv''>


[ct1]	container-type(<$Etype1, $Etype2>) = rel[$Etype1,$Etype2]
[default-ct2] 
	container-type($Etype) = bag[$Etype]

%% --- Check bag/relation  expressions

[check-bag-rel1] 
       check($Exp, $Tenv) = <$Etype, $Tenv'>,
       $Etype' =  container-type($Etype),
       check({ $Exp+ }, $Tenv') = <$Etype', $Tenv''>
       ==========================================
       check({ $Exp, $Exp+ }, $Tenv) = <$Etype', $Tenv''>

[check-bag-rel2] 
       check($Exp, $Tenv) = <$Etype, $Tenv'>,
       $Etype' =  container-type($Etype)
       ==========================================
       check({ $Exp }, $Tenv) = <$Etype', $Tenv'>

[check-bag-rel3]
	check( {}, $Tenv) =  <undefined, $Tenv + {} cannot be typed>

[default-bag-rel]
	check({ $Exp* }, $Tenv) = <undefined, $Tenv + {$Exp*} cannot be typed>


[rt2]	require-type($Exp1, $Etype1, $Tenv) = $Tenv',
	require-type($Exp2, $Etype2, $Tenv') = $Tenv''
	==============================================================	
	require-type2($Exp1, $Etype1, $Exp2, $Etype2, $Tenv) = $Tenv''

%% --- Check Operators


%% --- Boolean operators

[check-and]
      	require-type2($Exp1, bool, $Exp2, bool, $Tenv) = $Tenv'
      	================================================================
      	check($Exp1 and $Exp2, $Tenv) = <bool, $Tenv'>

[check-or]
      	require-type2($Exp1, bool, $Exp2, bool, $Tenv) = $Tenv'
      	================================================================
      	check($Exp1 or $Exp2, $Tenv) = <bool, $Tenv'>

[check-implies]
      	require-type2($Exp1, bool, $Exp2, bool, $Tenv) = $Tenv'
      	================================================================
      	check($Exp1 implies $Exp2, $Tenv) = <bool, $Tenv'>

[check-not] 
      	require-type($Exp, bool, $Tenv) = $Tenv'
      	===========================================
      	check(not $Exp, $Tenv) = <bool, $Tenv'>

[check-in]
	check($Exp1, $Tenv) = <$Etype1, $Tenv'>,
	require-type($Exp2, bag[$Etype1], $Tenv') = $Tenv''
	===================================================
	check($Exp1 in $Exp2, $Tenv) = <bool, $Tenv''>

[check-notin]
	check($Exp1, $Tenv) = <$Etype1, $Tenv'>,
	require-type($Exp2, bag[$Etype1], $Tenv') = $Tenv''
	===================================================
	check($Exp1 notin $Exp2, $Tenv) = <bool, $Tenv''>

%% --- Comparison operators

[check-eq] 
      	check($Exp1, $Tenv) = <$Etype1, $Tenv'>, 
	require-type($Exp2, $Etype1, $Tenv') = $Tenv''
      	===========================================
      	check($Exp1 == $Exp2, $Tenv) = <bool, $Tenv''>

[check-ne] 
      	check($Exp1, $Tenv) = <$Etype1, $Tenv'>, 
	require-type($Exp2, $Etype1, $Tenv') = $Tenv''
      	===========================================
      	check($Exp1 != $Exp2, $Tenv) = <bool, $Tenv''>

[compat-cmp1]
	compat-cmp($Exp, bag[$Etype], bag[$Etype], $Tenv) = $Tenv
[compat-cmp2]
	compat-cmp($Exp, int, int, $Tenv) = $Tenv
[compat-cmp3]
	compat-cmp($Exp, $Etype1, $Etype2, $Tenv) = 
	$Tenv + Incompatible argument types [$Etype1, $Etype2] in $Exp

[check-cmp1]
	check($Exp1, $Tenv) = <$Etype1, $Tenv'>, 
      	check($Exp2, $Tenv') = <$Etype2, $Tenv''>,
	compat-cmp($Exp, $Etype1, $Etype2, $Tenv'') = $Tenv'''
	===============================================
	check-cmp($Exp, $Exp1, $Exp2, $Tenv) = <bool, $Tenv'''>

[check-le] 
      $Exp = $Exp1 <= $Exp2
      ===========================================
      check($Exp, $Tenv) = check-cmp($Exp, $Exp1, $Exp2, $Tenv)

[check-lt] 
      $Exp = $Exp1 < $Exp2
      ===========================================
      check($Exp, $Tenv) = check-cmp($Exp, $Exp1, $Exp2, $Tenv)

[check-ge] 
      $Exp = $Exp1 >= $Exp2
      ===========================================
      check($Exp, $Tenv) = check-cmp($Exp, $Exp1, $Exp2, $Tenv)

[check-gt] 
      $Exp = $Exp1 > $Exp2
      ===========================================
      check($Exp, $Tenv) = check-cmp($Exp, $Exp1, $Exp2, $Tenv)

%% --- Union-like operators

[compat-un1] 
	compat-un($Exp, bag[$Etype], 		bag[$Etype], $Tenv) 		= <bag[$Etype], $Tenv>
[compat-un2] 
	compat-un($Exp, rel[$Etype1,$Etype2],	rel[$Etype1,$Etype2], $Tenv) 	= <rel[$Etype1,$Etype2], $Tenv>
[compat-un3]
	compat-un($Exp, rel[$Etype1,$Etype2],	bag[<$Etype1,$Etype2>], $Tenv)	= <rel[$Etype1,$Etype2], $Tenv>
[compat-un4] 
	compat-un($Exp, bag[<$Etype1,$Etype2>],	rel[$Etype1,$Etype2], $Tenv)    = <rel[$Etype1,$Etype2], $Tenv>
[default-compat-un]
	compat-un($Exp, $Etype1, $Etype2, $Tenv) = 
	<undefined, $Tenv + Incompatible argument types [$Etype1, $Etype2] in $Exp>  

[check-un1]
	check($Exp1, $Tenv) = <$Etype1, $Tenv'>, 
      	check($Exp2, $Tenv') = <$Etype2, $Tenv''>,
	compat-un($Exp, $Etype1, $Etype2, $Tenv'') = <$Etype, $Tenv'''>
	===============================================
	check-un($Exp, $Exp1, $Exp2, $Tenv) = <$Etype, $Tenv'''>
	
[check-union]
      $Exp = $Exp1 union $Exp2
      ===========================================
      check($Exp, $Tenv) = check-un($Exp, $Exp1, $Exp2, $Tenv)

[check-inter]
      $Exp = $Exp1 inter $Exp2
      ===========================================
      check($Exp, $Tenv) = check-un($Exp, $Exp1, $Exp2, $Tenv)

[check-diff]
      $Exp = $Exp1 \ $Exp2
      ===========================================
      check($Exp, $Tenv) = check-un($Exp, $Exp1, $Exp2, $Tenv)

%% --- Composition

[compat-comp1] 
	compat-comp($Exp, rel[$Etype1,$Etype2], rel[$Etype2,$Etype3], $Tenv) = <rel[$Etype1,$Etype3], $Tenv>
[compat-comp2] 
	compat-comp($Exp, rel[$Etype1,$Etype2], bag[<$Etype2,$Etype3>], $Tenv) = <rel[$Etype1,$Etype3], $Tenv>
[compat-comp2] 
	compat-comp($Exp, bag[<$Etype1,$Etype2>], rel[$Etype2,$Etype3], $Tenv) = <rel[$Etype1,$Etype3], $Tenv>
[default-compat-comp]
	compat-comp($Exp, $Etype1, $Etype2, $Tenv) = 
	<undefined, $Tenv + Incompatible argument types [$Etype1, $Etype2] in $Exp>  

[c03] $Exp = $Exp1 o $Exp2,
      check($Exp1, $Tenv) = <$Etype1, $Tenv'>, 
      check($Exp2, $Tenv') = <$Etype2, $Tenv''>,
      compat-comp($Exp, $Etype1, $Etype2, $Tenv'') = <$Etype3, $Tenv'''>
      ===================================================================
      check($Exp, $Tenv) = <$Etype3, $Tenv'''>

%% -- Product

[compat-prod1] 
	compat-prod($Exp, bag[$Etype1], bag[$Etype2], $Tenv) = <rel[$Etype1,$Etype2], $Tenv>
[default-compat-prod]
	compat-prod($Exp, $Etype1, $Etype2, $Tenv) = 
	<undefined, $Tenv + Incompatible argument types [$Etype1, $Etype2] in $Exp>  

[check-product] 
	$Exp = $Exp1 x $Exp2,
      	check($Exp1, $Tenv) = <$Etype1, $Tenv'>, 
      	check($Exp2, $Tenv') = <$Etype2, $Tenv''>,
      	compat-prod($Exp, $Etype1, $Etype2, $Tenv'') = <$Etype3, $Tenv'''>
      ===========================================
      	check($Exp, $Tenv) = <$Etype3, $Tenv'''>

%% -- Image

[xxx] compat-im($Exp, rel[$Etype1,$Etype2],	$Etype2, $Tenv)              = <bag[$Etype1], $Tenv>
[xxx] compat-im($Exp, bag[<$Etype1,$Etype2>],	$Etype2, $Tenv)            = <bag[$Etype1], $Tenv>
[xxx] compat-im($Exp, rel[$Etype1,$Etype2],	bag[$Etype2], $Tenv)         = <bag[$Etype1], $Tenv>
[xxx] compat-im($Exp, bag[<$Etype1,$Etype2>],	bag[$Etype2], $Tenv)       = <bag[$Etype1], $Tenv>
[xxx] compat-im($Exp, $Etype1,			rel[$Etype1,$Etype2], $Tenv) = <bag[$Etype2], $Tenv>
[xxx] compat-im($Exp, $Etype1,			bag[<$Etype1,$Etype2>], $Tenv) = <bag[$Etype2], $Tenv>
[xxx] compat-im($Exp, bag[$Etype1],		rel[$Etype1,$Etype2], $Tenv) = <bag[$Etype2], $Tenv>
[xxx] compat-im($Exp, bag[$Etype1],		bag[<$Etype1,$Etype2>], $Tenv) = <bag[$Etype2], $Tenv>
[default-compat-im]
	compat-im($Exp, $Etype1, $Etype2, $Tenv) = 
	<undefined, $Tenv + Incompatible argument types [$Etype1, $Etype2] in $Exp>  

[check-im1] 	
	$Exp = $Exp1 . $Exp2,
      	check($Exp1, $Tenv) = <$Etype1, $Tenv'>, 
      	check($Exp2, $Tenv') = <$Etype2, $Tenv''>,
      	compat-im($Exp, $Etype1, $Etype2, $Tenv'') = <$Etype3, $Tenv'''>
      	===========================================
      	check($Exp, $Tenv) = <$Etype3, $Tenv'''>

[check-im2]
	$Exp = $Exp1 [ $Exp2 ],
      	check($Exp1, $Tenv) = <$Etype1, $Tenv'>, 
      	check($Exp2, $Tenv') = <$Etype2, $Tenv''>,
      	compat-im($Exp, $Etype2, $Etype1, $Tenv'') = <$Etype3, $Tenv'''>
      	===========================================
	check($Exp, $Tenv) = <$Etype3, $Tenv'''>

%% --- Transitive closure

[compat-trans1] 
	compat-trans($Exp, rel[$Etype,$Etype], $Tenv) =   <rel[$Etype, $Etype], $Tenv>
[compat-trans2] 
	compat-trans($Exp, bag[<$Etype,$Etype>], $Tenv) = <rel[$Etype, $Etype], $Tenv>
[default-compat-trans]
	compat-trans($Exp, $Etype, $Tenv) = 
	<undefined, $Tenv + Incompatible argument types $Etype in $Exp>  
 
[check-closure] 
	$Exp = $Exp1 +,
      	check($Exp1, $Tenv) = <$Etype, $Tenv'>,
      	compat-trans($Exp, $Etype, $Tenv') = <$Etype1, $Tenv''>
      	===========================================
      	check($Exp, $Tenv) = <$Etype1, $Tenv''>

[check-rclosure]
	 $Exp = $Exp1 *,
      	check($Exp1, $Tenv) = <$Etype, $Tenv'>,
      	compat-trans($Exp, $Etype, $Tenv') = <$Etype1, $Tenv''>
      	===========================================
      	check($Exp, $Tenv) = <$Etype1, $Tenv''>

%% --- size

[compat-size1]
	compat-size($Exp, bag[$Etype], $Tenv) = <int, $Tenv>
[compat-size2]
	compat-size($Exp, rel[$Etype1,$Etype2], $Tenv) = <int, $Tenv>
[default-compat-size]
	compat-size($Exp, $Etype, $Tenv) = 
	<undefined, $Tenv + Incompatible argument types $Etype in $Exp>  
 
[check-size]
	 $Exp = #  $Exp1,
      	check($Exp1, $Tenv) = <$Etype, $Tenv'>,
      	compat-size($Exp, $Etype, $Tenv') = <$Etype1, $Tenv''>
      	===========================================
      	check($Exp, $Tenv) = <$Etype1, $Tenv''>

%% --- end of checking operators

%% --- Check comprehensions

[rt1] 	check($Exp, $Tenv) = <$Etype', $Tenv'>
      	=========================================
      	require-type($Exp, $Etype, $Tenv) = 
      	if $Etype == $Etype' then $Tenv' else $Tenv' + $Exp should have type $Etype fi

[rbt1]	store($Tenv, $Var, $Etype) = $Tenv'
      	==========================================
      	require-and-store-bag-type($Exp, $Var, bag[$Etype], $Tenv) = $Tenv'

[default-rbt]
      	store($Tenv, $Var, undefined) = $Tenv'
      	==========================================
      	require-and-store-bag-type($Exp, $Var, $Etype, $Tenv) = $Tenv' + $Exp should be of type bag

[rbt1]  store($Tenv, $Var1, $Etype1) = $Tenv',
      	store($Tenv', $Var2, $Etype2) = $Tenv''
      	==========================================
     	require-and-store-rel-type($Exp, $Var1, $Var2, rel[$Etype1, $Etype2], $Tenv) = $Tenv''

[rbt1]	store($Tenv, $Var1, $Etype1) = $Tenv',
      	store($Tenv', $Var2, $Etype2) = $Tenv''
      	==========================================
      	require-and-store-rel-type($Exp, $Var1, $Var2, bag[<$Etype1, $Etype2>], $Tenv) = $Tenv''

[default-rbt]
      	store($Tenv, $Var1, undefined) = $Tenv',
      	store($Tenv', $Var2, undefined) = $Tenv''
      	==========================================
      	require-and-store-rel-type($Exp, $Var1, $Var2, $Etype, $Tenv) = $Tenv'' + $Exp should be of type rel

[rnt1]	require-and-store-nrel-type($Exp, $Var1, $Var2, $Etype, $Tenv) = require-and-store-rel-type($Exp, $Var1, $Var2, $Etype, $Tenv)

[rnt1]	store($Tenv, $Var1, $Etype1) = $Tenv'
	=======================================
	require-and-store-nrel-type($Exp, $Var1, $Var2, $Var+, rel[$Etype1, $Etype2], $Tenv) = 
	require-and-store-nrel-type($Exp, $Var2, $Var+, bag[$Etype2], $Tenv')

[rnt1]	store($Tenv, $Var1, $Etype1) = $Tenv'
	=======================================
	require-and-store-nrel-type($Exp, $Var1, $Var2, $Var+, bag[<$Etype1, $Etype2>], $Tenv) = 
	require-and-store-nrel-type($Exp, $Var2, $Var+, bag[$Etype2], $Tenv')

[default-nre]
	require-and-store-nrel-type($Exp, $Var+, $Etype, $Tenv) = $Tenv + $Exp should be of type rel
	

%% Check from clauses and add introduced variables to type environment

[af1] 	check($Exp, $Tenv) = <$Etype, $Tenv'>,
      	require-and-store-bag-type($Exp, $Var, $Etype, $Tenv') = $Tenv''
      	==========================================
      	add-generators($Var : $Exp, $Gen*, $Tenv) = add-generators($Gen*, $Tenv'')

[af2] 	check($Exp, $Tenv) = <$Etype, $Tenv'>, 
      	require-and-store-rel-type($Exp, $Var1, $Var2, $Etype, $Tenv') = $Tenv''
      	==========================================
      	add-generators(<$Var1, $Var2> : $Exp, $Gen*, $Tenv) = add-generators($Gen*, $Tenv'')

[af3] 	check($Exp, $Tenv) = <$Etype, $Tenv'>, 
      	require-and-store-nrel-type($Exp, $Var1, $Var2, $Var+, $Etype, $Tenv') = $Tenv''	
      	==========================================
      	add-generators(<$Var1, $Var2, $Var+> : $Exp, $Gen*, $Tenv) = add-generators($Gen*, $Tenv'')

[af2] 	require-type($Exp, bool, $Tenv) = $Tenv'
      	==========================================
      	add-generators($Exp, $Gen*, $Tenv) = add-generators($Gen*, $Tenv')

[af1] 	check($Exp, $Tenv) = <$Etype, $Tenv'>, 
	store($Tenv', $Var, $Etype) = $Tenv''
      	==========================================
      	add-generators($Var <- $Exp, $Gen*, $Tenv) = add-generators($Gen*, $Tenv'')

[af1] 	check($Exp, $Tenv) = <<$Etype1, $Etype2>, $Tenv'>, 
	store-nvar($Var1, $Var2, <$Etype1, $Etype2>, $Tenv') = $Tenv''
      	==========================================
      	add-generators(<$Var1, $Var2> <- $Exp, $Gen*, $Tenv) = add-generators($Gen*, $Tenv'')

[af1] 	check($Exp, $Tenv) = <<$Etype1, $Etype2>, $Tenv'>, 
	store-nvar($Var1, $Var2, $Var+,<$Etype1, $Etype2>, $Tenv') = $Tenv''
      	==========================================
      	add-generators(<$Var1, $Var2, $Var+> <- $Exp, $Gen*, $Tenv) = add-generators($Gen*, $Tenv'')

[af3] 	add-generators( , $Tenv) = $Tenv

[default-af]
      	add-generators($Gen, $Gen*, $Tenv) = $Tenv + $Gen cannot be typed

%% -- Assign to list of variables

[sv1]	store($Tenv, $Var, $Etype1) = $Tenv'
	=====================================================
	store-nvar($Var, $Var+, <$Etype1, $Etype2>, $Tenv) =
	store-nvar($Var+, $Etype2, $Tenv')

[sv2]	store($Tenv, $Var, $Etype) = $Tenv'
	=====================================================
	store-nvar($Var, $Etype, $Tenv) = $Tenv'

%% ---  Delete a list of variables from the type environment

[dnv1]	delete($Tenv, $Var) = $Tenv'
	=========================================
	delete-nvar($Var, $Var+, $Tenv) = delete-nvar($Var+, $Tenv')

[dnv2]	delete-nvar($Var, $Tenv) = delete($Tenv, $Var)

%% Delete the variables introduced in from clauses from the type environment

[df1] 	delete-nvar($Var, $Tenv) = $Tenv'
      	==========================================
      	del-generators($Var : $Exp, $Gen*, $Tenv) = del-generators($Gen*, $Tenv')

[df2] 	delete-nvar($Var1, $Var2, $Tenv) = $Tenv'
      	==========================================
      	del-generators(<$Var1, $Var2> : $Exp, $Gen*, $Tenv) = del-generators($Gen*, $Tenv')

[df3]	delete-nvar($Var1, $Var2, $Var+, $Tenv) = $Tenv'
      	==========================================
      	del-generators(<$Var1, $Var2, $Var+> : $Exp, $Gen*, $Tenv) = del-generators($Gen*, $Tenv')

[df4]	del-generators($Exp, $Gen*, $Tenv) = del-generators($Gen*, $Tenv)

[df5]	delete($Tenv, $Var) = $Tenv'
	=================================================================
	del-generators($Var <- $Exp, $Gen*, $Tenv) = del-generators($Gen*, $Tenv')

[df6]	delete-nvar($Var1, $Var2, $Tenv) = $Tenv'
	=================================================================
	del-generators(<$Var1, $Var2> <- $Exp, $Gen*, $Tenv) = del-generators($Gen*, $Tenv')

[df7]	delete-nvar($Var1, $Var2, $Var+, $Tenv) = $Tenv'
	=================================================================
	del-generators(<$Var1, $Var2, $Var+> <- $Exp, $Gen*, $Tenv) = del-generators($Gen*, $Tenv')

[df8] 	del-generators( , $Tenv) = $Tenv

[cit1] 	container-iter-type(<$Etype1,$Etype2>) = rel[$Etype1, $Etype2]
[cit2] 	container-iter-type(rel[$Etype1,$Etype2]) = rel[$Etype1, $Etype2]
[cit3] 	container-iter-type(bag[$Etype]) = bag[$Etype]

[default-cit]
      	container-iter-type($Etype) = bag[$Etype]

[check-valueformer3] 
      	add-generators($Gen+, $Tenv) = $Tenv',
      	check($Exp, $Tenv') = <$Etype, $Tenv''>,
      	container-iter-type($Etype) = $Etype',
      	del-generators($Gen+, $Tenv'') = $Tenv'''
      	======================================
      	check({ $Exp | $Gen+ }, $Tenv) = <$Etype', $Tenv'''>

%% --- Check Exists

[check-exists1]
	add-generators($SimpleGen, $Tenv) = $Tenv',
	require-type($Test, bool, $Tenv') = $Tenv'',
	del-generators($SimpleGen, $Tenv'') = $Tenv'''
	=====================================
	check(exists($SimpleGen | $Test), $Tenv) = <bool, $Tenv'''>

%% --- Check Forall

[check-forall1]
	add-generators($SimpleGen, $Tenv) = $Tenv',
	require-type($Test, bool, $Tenv') = $Tenv'',
	del-generators($SimpleGen, $Tenv'') = $Tenv'''
	=====================================
	check(forall($SimpleGen | $Test), $Tenv) = <bool, $Tenv'''>

%% --- Check function application

[ca1] check($Exp, $Tenv) = <$Etype, $Tenv'>,
      collect-actuals($Exp*, $Tenv') = < [$Etype*], $Tenv''>
      ===========================================
      collect-actuals($Exp, $Exp*, $Tenv) = <[$Etype, $Etype*], $Tenv''>

[ca2] collect-actuals( , $Tenv) = <[], $Tenv>

[check-appl] 
      collect-actuals($Exp*, $Tenv) = <$Etype, $Tenv'>
      ============================================
      check($Var ( $Exp* ), $Tenv) = find-result-type($Var, $Etype, $Tenv')

%% --- Check that variable is not yet defined

[cnd] check-not-defined($Var, $Tenv) = 
      if lookup($Tenv, $Var) == not-in-table then $Tenv else  $Tenv + $Var redeclared fi

%% add-formals

[af1] store($Tenv, $Var, $Etype) = $Tenv',
      add-formals([$DclVar*], $Tenv') = $Tenv''
      ===========================================
      add-formals([$Etype $Var, $DclVar*], $Tenv) = $Tenv''

[af2] add-formals([], $Tenv) = $Tenv

%% del-formals

[df1] delete($Tenv, $Var) = $Tenv',
      del-formals([$DclVar*], $Tenv') = $Tenv''
      ===========================================
      del-formals([$Etype $Var, $DclVar*], $Tenv) = $Tenv''

[df2] del-formals([], $Tenv) = $Tenv

%% Extract the types from a list of formal parameters

[et1]  extract-types([$DclVar*]) = [$Etype*]
       ===========================================
      extract-types([$Etype $Var, $DclVar*]) = [$Etype, $Etype*]

[et2] extract-types([]) = []

%% --- Check variable declarations

[check-vardef1]
      check-stat($Etype $Var, $Tenv) = store($Tenv, $Var, $Etype)

[check-vardef2] 
      check-stat($Etype $Var = $Exp, $Tenv) =  check-stat($Etype $Var() = $Exp, $Tenv)

[check-vardef3]
      check-stat(bag[$Etype] $Var = {}, $Tenv) = store($Tenv, $Var, bag[$Etype])

[check-vardef4]
      check-stat(rel[$Etype1,$Etype2] $Var = {}, $Tenv) = store($Tenv, $Var, rel[$Etype1,$Etype2])

%% --- Check function declarations

[check-fundef] 
      check-not-defined($Var, $Tenv) = $Tenv1,
      add-formals([$DclVar*], $Tenv1) = $Tenv2,
      require-type($Exp, $Etype, $Tenv2) = $Tenv3,      
      del-formals([$DclVar*], $Tenv3) = $Tenv4, 
      store($Tenv4, $Var, fun extract-types([$DclVar*]) to $Etype) = $Tenv5 
      ===========================================
      check-stat($Etype $Var ($DclVar*) = $Exp, $Tenv) = $Tenv5

%% --- Check assert statement

[check-assert]
	check-stat(assert $String : $Exp, $Tenv) = require-type($Exp, bool, $Tenv)

%% --- Check yield statement

[check-yield]
	check($Var, $Tenv) = <$Etype, $Tenv'>
	===============================================
	check-stat(yield $Var, $Tenv) =  $Tenv'

%% --- Check set of equations

[CEQ1]	check-stat(equations (limit $Integer) initial $InitVar+ satisfy  $Eq+ end equations, $Tenv) = 
	check-eqs($InitVar+, $Eq+, $Tenv)

[CEQ2]	check-stat(equations initial $InitVar+ satisfy  $Eq+ end equations, $Tenv) = 
	check-eqs($InitVar+, $Eq+, $Tenv)

[CEQS1]	check-stat($Etype $Var = $Exp, $Tenv) = $Tenv1
	===============================================	
	check-eqs($Etype $Var init $Exp $InitVar*, $Eq+, $Tenv) =
	check-eqs($InitVar*, $Eq+, $Tenv1)

[CEQS2]	check($Var, $Tenv) = <$Etype, $Tenv1>,
        require-type($Exp, $Etype, $Tenv1) = $Tenv2
        =========================================
	check-eqs( , $Var = $Exp $Eq*, $Tenv) = check-eqs( , $Eq*, $Tenv2)

[CEQS2]	check-eqs( , , $Tenv) = $Tenv

%% ---- Default case for chack-stat

[default-check-stat]
	 check-stat($Stat, $Tenv) = $Tenv +  $Stat cannot be typed

%% -- Default case for check

[default-check]
      check($Exp, $Tenv) = <undefined, $Tenv +  $Exp cannot be typed>

%% --- Default case for compat

%%[xxx]  compat($Exp, undefined $Op $Etype2, $Tenv) = <undefined, $Tenv>
%%[xxx]  compat($Exp, $Etype1 $Op undefined, $Tenv) = <undefined, $Tenv>
%%[default-xxx]
 %%    compat($Exp, $Etype1 $Op $Etype2, $Tenv) = <undefined, $Tenv + Incompatible argument types [$Etype1, $Etype2] in $Exp>

%%[xxx]  compat($Exp, undefined $Op, $Tenv) = <undefined, $Tenv>
%%[default-xxx]
%%      compat($Exp, $Etype $Op, $Tenv) = <undefined, $Tenv + Incompatible argument types [$Etype] in $Exp>

%%[xxx]  compat($Exp, $Op undefined, $Tenv) = <undefined, $Tenv>
%%[default-xxx]
%%      compat($Exp, $Op $Etype, $Tenv) = <undefined, $Tenv + Incompatible argument types [$Etype] in $Exp>

%% --- Check script

[xxx] $Rscript = $Stat*,
       check-rscript($Stat*,  <built-ins, errors[]>) = <$Table, $Errors>
      ===============================================
      check-rscript($Rscript) = convert-errors($Errors)

%% [xxx] check-rscript($Stat*) = check-rscript($Stat*, <built-ins, []>)
[xxx] check-rscript($Stat $Stat*, $Tenv) = check-rscript($Stat*, check-stat($Stat, $Tenv))
[xxx] check-rscript( , $Tenv) = $Tenv

%% Find result type of a function, given list of argument types

[xxx] lookup($Tenv, $Var) = not-in-table
      ==================================
      find-result-type($Var, [$Etype*], $Tenv) = <undefined, $Tenv + Undeclared $Var>

[xxx] lookup($Tenv, $Var) = fun [$Etype*2] to $Etype,
      match-types([$Etype*2],  [$Etype*1], new-table) = <true, $Table>
     ===========================================
      find-result-type($Var, [$Etype*1], $Tenv) = substitute($Etype, $Table, $Tenv)

[default-xxx]
      find-result-type($Var, [$Etype*1], $Tenv) = <undefined, $Tenv + No definition for $Var with argument [$Etype*1]>

%% is-var 

[iv1]  is-var($Var) = true
[default-iv] 
       is-var($Etype) = false

%% --- match types

[mt1]  is-var($Etype) = false
       ================================================
       match-types($Etype, $Etype, $Table) = <true, $Table>

[mt2]  lookup($Table, $Var) = not-in-table
      ==================================
       match-types($Var, $Etype, $Table) = <true, store($Table, $Var, $Etype)>

[mt3]  lookup($Table, $Var) = $Etype
      ==================================
       match-types($Var, $Etype, $Table) = <true, $Table>

[mt4]  match-types($Etype1, $Etype2, $Table) = <true, $Table'>
       ===================================================
       match-types(bag[$Etype1], bag[$Etype2], $Table) =  <true, $Table'>

[mt5]  match-types($Etype1, $Etype3, $Table) = <true, $Table'>,
       match-types($Etype2, $Etype4, $Table') = <true, $Table''>
       ===================================================
       match-types(rel[$Etype1, $Etype2], rel[$Etype3, $Etype4], $Table) =  <true, $Table''>

[mt6]  match-types($Etype1, $Etype3, $Table) = <true, $Table'>,
       match-types($Etype2, $Etype4, $Table') = <true, $Table''>
       ===================================================
       match-types(rel[$Etype1, $Etype2], bag[<$Etype3, $Etype4>], $Table) =  <true, $Table''>

[mt7]  match-types($Etype1, $Etype3, $Table) = <true, $Table'>,
       match-types($Etype2, $Etype4, $Table') = <true, $Table''>
       ===================================================
       match-types(bag[<$Etype1, $Etype2>], rel[$Etype3, $Etype4], $Table) =  <true, $Table''>

[mt8]  match-types($Etype1, $Etype3, $Table) = <true, $Table'>,
       match-types($Etype2, $Etype4, $Table') = <true, $Table''>
       ===================================================
       match-types(<$Etype1, $Etype2>, <$Etype3, $Etype4>, $Table) =  <true, $Table''>

[mt9]  match-types($Etype1, $Etype2, $Table) = <true, $Table'>,
       match-types([$Etype*1], [$Etype*2], $Table') = <true, $Table''>
       ===================================================
       match-types([$Etype1, $Etype*1], [$Etype2, $Etype*2], $Table) = <true, $Table''>

[mt10]  match-types([], [], $Table) = <true, $Table>

[default-mt]
	match-types($Etype1, $Etype2, $Table) = <false, $Table>

%% --- Substitute type

[sb1]  $Etype = lookup($Table, $Var)
       ======================================================
       substitute($Var, $Table, $Tenv) = if $Etype == not-in-table then <undefined, $Tenv + Undeclared $Var>
                                       else <$Etype, $Tenv> fi

[sb2]  substitute($Etype, $Table, $Tenv) = <$Etype', $Tenv'>
       ======================================================
       substitute(bag[$Etype], $Table, $Tenv) = <bag[$Etype'], $Tenv>

[sb3]  substitute($Etype1, $Table, $Tenv) = <$Etype1', $Tenv'>,
       substitute($Etype2, $Table, $Tenv) = <$Etype2', $Tenv''>
       =======================================================
       substitute(rel[$Etype1,$Etype2], $Table, $Tenv) = <rel[$Etype1', $Etype2'], $Tenv''>

[sb4]  substitute($Etype1, $Table, $Tenv) = <$Etype1', $Tenv'>,
       substitute($Etype2, $Table, $Tenv) = <$Etype2', $Tenv''>
       =======================================================
       substitute(<$Etype1,$Etype2>, $Table, $Tenv) = <<$Etype1', $Etype2'>, $Tenv''>

[default-sb]
       substitute($Etype, $Table, $Tenv) = <$Etype, $Tenv>

%% -- The types of the built-in functions

[bi-1]  built-ins = [
		<id,      	fun [ bag[T] ] 				to rel[T,T]>,
      		<domain,  	fun [ rel[T1,T2] ] 			to bag[T1]>,
     		<range,   	fun [ rel[T1,T2] ] 			to bag[T2]>,
       		<carrier, 	fun [ rel[T,T] ] 			to bag[T]>,
		<top,     	fun [ rel[T,T] ] 			to bag[T]>,
		<bottom,  	fun [ rel[T,T] ] 			to bag[T]>,
       		<inv,     	fun [ rel[T1,T2] ] 			to rel[T2,T1]>,
		<compl,   	fun [ rel[T1, T2] ] 			to rel[T1,T2]>,

       		<domainR, 	fun [ rel[T1,T2], bag[T1] ]		to rel[T1,T2]>,
       		<rangeR,    	fun [ rel[T1,T2], bag[T2] ] 		to rel[T1,T2]>,
       		<carrierR,    	fun [ rel[T,T], bag[T] ] 		to rel[T,T]>,

       		<domainX,    	fun [ rel[T1,T2], bag[T1] ] 		to rel[T1,T2]>,
       		<rangeX,    	fun [ rel[T1,T2], bag[T2] ] 		to rel[T1,T2]>,
       		<carrierX,    	fun [	rel[T,T], bag[T] ] 		to rel[T,T]>,
                <first,     	fun [ <T1,T2>] 				to T1>,
                <second,     	fun [ <T1,T2> ] 			to T2>,

		<power0,	fun[ bag[T] ]				to bag[bag[T]]>,
		<power1,	fun[ bag[T] ]				to bag[bag[T]]>,

                <reachX,  	fun [ bag[T], bag[T], rel[T,T] ] 	to rel[T,T] >,
                <reachR,  	fun [ bag[T], bag[T], rel[T,T] ] 	to rel[T,T] >,

		<filename,	fun [ area ]				to str >,
		<beginline,	fun [ area ]				to int >,
		<begincol,	fun [ area ]				to int >,

		<endline,	fun [ area ]				to int >,
		<endcol,	fun [ area ]				to int >,

		<sum,		fun [ bag[int] ]			to int >,
		<max,		fun [ bag[int] ]			to int >,
		<min,		fun [ bag[int] ]			to int >

        ]

%% --- Where expressions

[WH1]	$Tenv = <$Table, $Errors>,
	check-rscript($Stat+, $Tenv) = $Tenv',
	check($Exp, $Tenv') = <$Etype, <$Table', $Errors'>>
	===================================================
	check($Exp where $Stat+ endwhere, $Tenv) = <$Etype, <$Table, $Errors'>>


