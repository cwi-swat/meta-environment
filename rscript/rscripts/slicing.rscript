
%% A relational definiton of program slicing
%%
%% Based on the definitions given in 
%%	Jackson & Rollins: A new model of program dependences for 
%%	reverse engineering.

%% Compute the reaching definitions for each statement.

type stat = int
type var  = str
type def  = <stat theStat, var theVar>
type use  = <stat theStat, var theVar>

set[stat] predecessor(rel[stat,stat] P, stat S) = P[-,S]

set[stat] successor(rel[stat,stat] P, stat S) = P[S,-]

rel[stat, def] reaching-definitions(rel[stat,var] DEFS, rel[stat,stat] PRED) = 
   IN
where
	set[stat] STATEMENT = carrier(PRED)

	rel[stat,def] DEF  = {<S,<S,V>> | <stat S, var V> : DEFS}

	rel[stat,def] KILL = 
 	   {<S1, <S2, V>> | <stat S1, var V> : DEFS, <stat S2, V> : DEFS, S1 != S2}

	%% The set of mutually recursive dataflow equations that has to be solved:

	equations 
	   initial
		rel[stat,def] IN init {}

		rel[stat,def] OUT init DEF
	   satisfy
       		IN =  {<S, D> | int S : STATEMENT, stat P : predecessor(PRED,S), def D : OUT[P]}
        	OUT = {<S, D> |  int S : STATEMENT, def D : DEF[S] union (IN[S] \ KILL[S])}
	end equations
end where

%% Find all the statements that are dominated by each statement

rel[stat,stat] dominators(rel[stat,stat] PRED) = 
   DOMINATES
where
	set[stat] STATEMENT = carrier(PRED)

	set[stat] ROOT = top(PRED)

  	rel[stat,stat] DOMINATES =
  	{ <S, S1> | stat S : STATEMENT , 
                    stat S1 : STATEMENT \ (ROOT union {S}) \ reachX(ROOT, {S}, PRED) 
        }
endwhere

set[use] BackwardSlice(
	set[stat] CONTROL-STATEMENT, 
	rel[stat,stat] PRED,
	rel[stat,var] USES,
	rel[stat,var] DEFS,	
	use Criterion) 
= USE-USE[Criterion]

where
	rel[stat, def] REACH = reaching-definitions(DEFS, PRED)

	%% Compute the relation between each use and corresponding definitions: ud

	rel[use,def] use-def = 
 	 {<<S1,V>, <S2,V>> | <stat S1, var V> : USES, <stat S2, V> : REACH[S1]}

	%% Internal dependencies per statement

	rel[def,use] def-use-per-stat  = 
     		{<<S,V1>, <S,V2>> | <stat S, var V1> : DEFS, <S, var V2> : USES}
    		 union
    		 {<<S,V>, <S,"EXEC">> | <stat S, var V> : DEFS}
    		 union
    		 {<<S,"TEST">,<S,V>> | stat S : CONTROL-STATEMENT, 
			    	 	  <S, var V> : domainR(USES, {S})}

	%% Control dependence: control-dependence

	rel[stat, stat] CONTROL-DOMINATOR = domainR(dominators(PRED), CONTROL-STATEMENT)

	rel[def,use] control-dependence  =
	   { <<S2, "EXEC">,<S1,"TEST">> | <stat S1, stat S2> : CONTROL-DOMINATOR}

	%% Control and data dependence: use-control-def

	rel[use,def] use-control-def = use-def union control-dependence
	rel[use,use] USE-USE = (use-control-def o def-use-per-stat)*
%%	rel[def,def] DD = (du o ucd)*
%%	rel[use,def] UD = ucd o (du o ucd)*
%%	rel[def,use] DU = du o (ucd o du)*
endwhere

%% Example from Frank Tip's slicing survey

%%       1: read(n)
%%	 2: i := 1
%%	 3: sum := 0
%%	 4: product := 1
%%	 5: while i<= n do
%%	    begin
%%	 6:	sum := sum + i
%%	 7:	product := product * i;
%%	 8:	i := i + 1
%%	    end
%%       9: write(sum)
%%	 10: write(product)

rel[stat,stat] PRED	= {<1,2>, <2,3>, <3,4>, <4,5>, <5,6>, <5,9>, <6,7>,
			    <7,8>,<8,5>, <8,9>, <9,10>}

rel[stat,var] DEFS	= {<1, "n">, <2, "i">, <3, "sum">, <4,"product">,
			  <6, "sum">, <7, "product">, <8, "i">}

rel[stat,var] USES	= {<5, "i">, <5, "n">, <6, "sum">, <6,"i">,
			   <7, "product">, <7, "i">, <8, "i">, <9, "sum">, 
			   <10, "product">}

set[int] CONTROL-STATEMENT = { 5 }

set[use] Example1 = 
	BackwardSlice(CONTROL-STATEMENT, PRED, USES, DEFS, <9, "sum">)

set[use] Example2 =
	BackwardSlice(CONTROL-STATEMENT, PRED, USES, DEFS,<10, "product">)


assert "Example 1": Example1 == 
	     { <1, "EXEC">, <2, "EXEC">,  <3, "EXEC">, <5, "i">, <5, "n">,  
	        <6, "sum">, <6, "i">, <6, "EXEC">, <8, "i">, <8, "EXEC">, 
	       <9, "sum"> }

assert "Example2": Example2 == 
            { <1, "EXEC">,  <2, "EXEC">, <4, "EXEC">, <5, "i">, <5, "n">, 
	      <7, "i">, <7, "product">, <7, "EXEC">, 
	       <8, "i">, <8, "EXEC">, <10,  "product">  }

comment ---------------------------------------------------------------

DOMINATES == {<1, 2>, <1, 3>, <1, 4>, <1, 5>, <1, 6>, 
 <1, 9>, <1, 7>, <1, 8>, <1, 10>, <2, 3>, <2, 4>, <2, 5>, <2, 6>, <2, 9>,
 <2, 7>, <2, 8>, <2, 10>, <3, 4>, <3, 5>, <3, 6>, <3, 9>, <3, 7>,
 <3, 8>, <3, 10>, <4, 5>, <4, 6>, <4, 9>, <4, 7>, <4, 8>, <4, 10>, <5, 6>,
 <5, 9>, <5, 7>, <5, 8>, <5, 10>, <6, 7>, <6, 8>, <9, 10>, <7, 8>}

POST-DOMINATOR == {<5, 6>, <5, 9>, <5, 7>, <5, 8>,
 <5, 10>}

-------------------------------------------------------------------------

endcomment
