eval-rscript(

%%
%% Test all built-in functions
%%

rel[int,int] Rel1 = {<1,10>}
rel[int,int] Rel2 = {<1,10>, <2,20>, <3,30>}

bag[int] EMPTYBAG = []
rel[int,int] EMPTYREL = {}

%% --- id

assert "id-1": id(EMPTYBAG) == EMPTYREL
assert "id-2": id([1,2,3]) == {<1, 1>, <2, 2>, <3, 3>}

%% --- domain

assert "domain-1" : domain(EMPTYREL) == EMPTYBAG
assert "domain-2" : domain(Rel1) == [1]
assert "domain-3" : domain(Rel2) == [1, 2, 3]

%% --- range

assert "range-1" : range(EMPTYREL) == EMPTYBAG
assert "range-2" : range(Rel1) == [10]
assert "range-3" : range (Rel2) == [10,20,30]

%% --- carrier

assert "carrier-1": carrier(EMPTYREL) == EMPTYBAG
assert "carrier-1": carrier(Rel2) == [1,2,3,10,20,30]

%% --- top

rel[int,int] G = {<1,2>, <1,3>, <2,4>, <3,4>}

assert "top-1": top(EMPTYREL) == EMPTYBAG
assert "top-2": top(G) == [1]

%% --- bottom

assert "bottom-1": bottom(EMPTYREL) == EMPTYBAG
assert "bottom-2": bottom(G) == [4]

%% --- inv

assert "inv-1": inv(EMPTYREL) == EMPTYREL
assert "inv-2": inv(Rel2) == {<10,1>,<20,2>,<30,3>}

%% --- compl

assert "compl-1": compl(EMPTYREL) == EMPTYREL
assert "compl-2": compl(Rel1) ==  {<1, 1>, <10, 1>, <10, 10>}

%% --- domainR

assert "domainR-1": domainR(EMPTYREL, EMPTYBAG) == EMPTYREL
assert "domainR-2": domainR(EMPTYREL, [1]) == EMPTYREL
assert "domainR-3": domainR(Rel2, EMPTYBAG) == EMPTYREL
assert "domainR-4": domainR(Rel2, [1]) == {<1,10>}
assert "domainR-5": domainR(Rel2, [3, 1]) == {<1,10>,<3,30>}
assert "domainR-6": domainR(Rel2, [7, 17]) == EMPTYREL

%% --- rangeR

assert "rangeR-1": rangeR(EMPTYREL, EMPTYBAG) == EMPTYREL
assert "rangeR-2": rangeR(EMPTYREL, [10]) == EMPTYREL
assert "rangeR-3": rangeR(Rel2, EMPTYBAG) == EMPTYREL
assert "rangeR-4": rangeR(Rel2, [10]) == {<1,10>}
assert "rangeR-5": rangeR(Rel2, [30, 10]) == {<1,10>,<3,30>}
assert "rangeR-6": rangeR(Rel2, [7, 17]) == EMPTYREL

%% --- carrierR

assert "carrierR-1": carrierR(EMPTYREL, EMPTYBAG) == EMPTYREL
assert "carrierR-2": carrierR(EMPTYREL, [10]) == EMPTYREL
assert "carrierR-3": carrierR(Rel2, EMPTYBAG) == EMPTYREL
assert "carrierR-4": carrierR(Rel2, [10, 1, 20]) == {<1,10>}
assert "carrierR-5": carrierR(Rel2, [30, 1, 3, 10]) == {<1,10>,<3,30>}
assert "carrierR-6": carrierR(Rel2, [7, 17]) == EMPTYREL

%% --- domainX

assert "domainX-1": domainX(EMPTYREL, EMPTYBAG) == EMPTYREL
assert "domainX-2": domainX(EMPTYREL, [1]) == EMPTYREL
assert "domainX-3": domainX(Rel2, EMPTYBAG) == Rel2
assert "domainX-4": domainX(Rel2, [1]) == {<2,20>,<3,30>}
assert "domainX-5": domainX(Rel2, [3, 1]) == {<2,20>}
assert "domainX-6": domainX(Rel2, [7, 17]) == Rel2

%% --- rangeX

assert "rangeX-1": rangeX(EMPTYREL, EMPTYBAG) == EMPTYREL
assert "rangeX-2": rangeX(EMPTYREL, [10]) == EMPTYREL
assert "rangeX-3": rangeX(Rel2, EMPTYBAG) == Rel2
assert "rangeX-4": rangeX(Rel2, [10]) ==  {<2,20>,<3,30>}
assert "rangeX-5": rangeX(Rel2, [30, 10]) == {<2,20>}
assert "rangeX-6": rangeX(Rel2, [7, 17]) == Rel2

%% --- carrierX

assert "carrierX-1": carrierX(EMPTYREL, EMPTYBAG) == EMPTYREL
assert "carrierX-2": carrierX(EMPTYREL, [10]) == EMPTYREL
assert "carrierX-3": carrierX(Rel2, EMPTYBAG) == Rel2
assert "carrierX-4": carrierX(Rel2, [10, 1, 20]) == {<3,30>}
assert "carrierX-5": carrierX(Rel2, [30, 1, 3, 10]) == {<2,20>}
assert "carrierX-6": carrierX(Rel2, [7, 17]) == Rel2

%% --- first

assert "first-1": first(<1,2>) == 1

%% --- second

assert "second-2": second(<1,2>) == 2

%% --- reachX

assert "reachX-1":  reachX(EMPTYBAG, EMPTYBAG, EMPTYREL) == EMPTYREL
assert "reachX-2":  reachX([1], EMPTYBAG, G) ==  {<1,2>, <1,3>, <1, 4>}
assert "reachX-3":  reachX([1], [2], G) ==  {<1,3>, <1, 4>}
assert "reachX-4":  reachX([1], [2,3], G) ==  EMPTYREL
assert "reachX-5":  reachX([1], [4], G) ==  {<1,2>,<1,3>}

%% --- reachR

assert "reachR-1":  reachR(EMPTYBAG, EMPTYBAG, EMPTYREL) == EMPTYREL
assert "reachR-2":  reachR([1], EMPTYBAG, G) ==  EMPTYREL
assert "reachR-3":  reachR([1], [1,2], G) ==  {<1,2>}
assert "reachR-4":  reachR([1], [1,2,3], G) ==  {<1,2>, <1,3>}
assert "reachR-5":  reachR([1], [1,2,4], G) ==  {<1,2>,<1,4>}
)

