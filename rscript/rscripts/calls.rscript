type proc = str

rel[proc, proc] Calls = {<"a", "b">, <"b", "c">, <"b", "d">, <"d", "c">, <"d",
"e">, <"f", "e">, <"f", "g">, <"g", "e">}

int nCalls = # Calls

assert "nCalls":nCalls == 8

set[proc] procs = carrier(Calls)

assert "procs": procs == {"a", "b", "c", "d", "e", "f", "g"}

int nprocs = # carrier(Calls)

assert "nProcs": nprocs == 7

set[str] dCalls = domain(Calls)
set[str] rCalls = range(Calls)

set[proc] entryPoints = top(Calls)

assert "a1": entryPoints == {"a", "f"}

set[proc] bottomCalls = bottom(Calls)

assert "a2": bottomCalls == {"c", "e"}

rel[proc,proc] closureCalls = Calls+

assert "a3": closureCalls == 
		{<"a", "b">, <"b", "c">, <"b", "d">, <"d", "c">, 
		<"d","e">, <"f", "e">, <"f", "g">, <"g", "e">, 
		<"a", "c">, <"a", "d">, <"b", "e">, <"a", "e">}

set[proc] calledFromA = closureCalls["a"]

assert "a4": calledFromA == {"b", "c", "d", "e"}

set[proc] calledFromF = closureCalls["f"]

assert "a5": calledFromF == {"e", "g"}

set[proc] commonProcs = calledFromA inter calledFromF

assert "a6": commonProcs == {"e"}

type comp = str

rel[proc,proc] Calls2 = {<"main", "a">, <"main", "b">, <"a", "b">, <"a", "c">,
<"a", "d">, <"b", "d">}

set[comp] Components = {"Appl", "DB", "Lib"}

rel[proc, comp] PartOf = {<"main", "Appl">, <"a", "Appl">, <"b", "DB">, <"c", "Lib">, <"d", "Lib">}

%%	rel[comp,comp] lift(rel[proc,proc] aCalls, rel[proc,comp] aPartOf) =
%%		     { <C1, C2> | <proc P1, proc P2> : aCalls, <comp C1, comp C2> : aPartOf[P1] x aPartOf[P2]}

%%	rel[comp,comp] ComponentCalls = lift(Calls2, PartOf)

