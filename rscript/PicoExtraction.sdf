module PicoExtraction

imports Pico-syntax
imports basic/Integers
imports MyPosInfo[STATEMENT]
imports MyPosInfo[PICO-ID]

imports ListItems

exports
  sorts NodeId Item ItemType

  context-free syntax
     Area		-> NodeId
     PICO-ID | NodeId   -> Item
     "id"               -> ItemType {prefer}
     "node"             -> ItemType {prefer}

imports RelationCalculator[Item ItemType]
imports RelationChecker[Item ItemType]

exports
  context-free syntax

      get-first({STATEMENT ";"}*)                  -> NodeId
      get-last({STATEMENT ";"}*)                   -> Bag[[Item]]

      add-pred(Rel[[Item]], RSTORE)                -> RSTORE
      add-last({STATEMENT ";"}*, NodeId, RSTORE)   -> RSTORE

      extract(PROGRAM, RSTORE)                     -> RSTORE {traversal(accu, bottom-up, continue)}
      extract({ STATEMENT ";"}*, RSTORE)           -> RSTORE {traversal(accu, bottom-up, continue)}

      extract-used-vars(STATEMENT, RSTORE, NodeId) -> RSTORE  {traversal(accu,top-down,break)}
      extract-used-vars(EXP, RSTORE, NodeId)       -> RSTORE  {traversal(accu,top-down,break)}

      extractRelations(PROGRAM)                    -> RSTORE

      convertl(Rel[[Item]])                        -> List
      convert(Area # PICO-ID)                      -> ListItem
      id2str(PICO-ID)		 	           -> String
      rootNode					   -> Area


 hiddens
  imports asf/syntax/Comments

  variables
      "Int" [0-9\']*     -> Integer
      "Rstore" [0-9\']*  -> RSTORE
      "Prg"              -> PROGRAM
      
      "Rel" [0-9\']*     -> Rel[[Item]]
      "Bag" [0-9\']*     -> Bag[[Item]]
      "NodeId" [0-9\']*	 -> NodeId
      "Area" [0-9\']*    -> Area
      "Tuple" [0-9\']*   -> Item # Item
      "Tuple*" [0-9\']*  -> {Item # Item ","}*

      "ListItem*" [0-9\']* -> {ListItem ","}*
     "Chars" [0-9]*    	  -> CHAR*