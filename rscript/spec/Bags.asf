equations

[empty]	empty-bag = {}

%% --- insert($Elem, $Bag)

[ins1]	insert($Elem, {$Elem*}) = {$Elem, $Elem*}

%%[ins1]	elem-greater($Elem', $Elem) = true
%%	============================================
%%	insert($Elem, {$Elem*1, $Elem', $Elem*2}) = {$Elem*1, $Elem, $Elem', $Elem*2}

[default-ins]
	insert($Elem, {$Elem*}) = {$Elem*, $Elem}

%%%%% --- equality 

%%%[eq1]	elem-equal($Elem,$Elem) = true

%%%[default-eq2]	
%%%	elem-equal($Elem1,$Elem2) = false

%% --- delete($Elem, $Bag)

[del1]	delete($Elem, {$Elem*1, $Elem, $Elem*2}) = {$Elem*1, $Elem*2}	%% sb elem-equal

[default-del]
	delete($Elem, $Bag) = $Bag

%% ----	sort

[sort1]	sort({}) = {}

[sort2]	sort({$Elem}) = {$Elem}

[default-sort] 
	 <{$Elem*1}, {$Elem*2}> := divide(true, {$Elem+})
	 ================================
	sort({$Elem+}) = merge(sort({$Elem*1}), sort({$Elem*2}))

[mrg1]	merge({}, $Bag) = $Bag

[mrg2]	merge($Bag, {}) = $Bag

[mrg3]	elem-greater($Elem1, $Elem2) == true,
	{$Elem*} := merge({$Elem1, $Elem*1}, {$Elem*2})
	==================================
	merge({$Elem1, $Elem*1}, {$Elem2, $Elem*2}) = {$Elem2, $Elem*}

[default-mrg]	
	{$Elem*} := merge({$Elem*1}, {$Elem2, $Elem*2})
	==================================
	merge({$Elem1, $Elem*1}, {$Elem2, $Elem*2}) = {$Elem1, $Elem*}

%% ---- divide

[div1]  <{$Elem*1}, {$Elem*2}> := divide(false, {$Elem*})
	=================================
	divide(true, {$Elem, $Elem*}) = <{$Elem, $Elem*1}, {$Elem*2}>

[div1]  <{$Elem*1}, {$Elem*2}> := divide(false, {$Elem*})
	=================================
	divide(false, {$Elem, $Elem*}) = <{$Elem*1}, {$Elem, $Elem*2}>

[div3]	divide($Bool, {}) = < {}, {} >

	
%% ---- mk-iterator

[mki]	mk-iterator($Bag) = $Bag

%% ---- is-empty-iter

[is-ei1]
	is-empty-iter({}) = true
[default-is-ei]
	is-empty-iter($Bag) = false

%% ---- head

[head1]	head({$Elem, $Elem*}) = $Elem

%% ---- tail

[tail1]	tail ({$Elem, $Elem*}) = {$Elem*}

[tail2]	tail({}) = {}

%% --- equal(Rel1, Rel2)

%%[eq-1] equal($Bag, $Bag) = true
%%[default-eq]	   
%%       equal($Bag1, $Bag2) = false

[eq-1]       equal({$Elem, $Elem*}, {$Elem*1, $Elem, $Elem*2}) = equal({$Elem*}, {$Elem*1, $Elem*2})

[eq-2]       equal({$Elem+}, {})               = false
[eq-3]       equal({}, {$Elem+})               = false
[eq-4]       equal({}, {})                 = true
[default-eq] 
             equal({$Elem+1}, {$Elem+2})           = false

%% --- subset(Rel1, Rel2)

[sub-1]      subset({$Elem, $Elem*}, {$Elem*1, $Elem, $Elem*2})  = subset({$Elem*}, {$Elem*1, $Elem*2})
[sub-2]      subset({$Elem+}, {})                = false
[sub-3]      subset({}, {$Elem+})                = true
[sub-4]      subset({}, {})                  = true
[default-sub]
             subset({$Elem+1},{$Elem+2})             = false

%% --- ssubset(Rel1, Rel2)

[ssub-1] strict-subset($Bag1, $Bag2) = subset($Bag1, $Bag2) & not(equal($Bag1, $Bag2))

%% --- superset(Rel1, Rel2)

[sup-1] superset($Bag1, $Bag2) = subset($Bag2, $Bag1)

%% --- strict-superset(Rel1, Rel2)

[ssup-1] strict-superset($Bag1, $Bag2) = strict-subset($Bag2, $Bag1)

%% --- union1($Elem, Rel)

[un1-1]	in($Elem, {$Elem*}) == true	
	=============================	
	union1($Elem, {$Elem*}) = {$Elem*}

[default-un1-2]
	union1($Elem, {$Elem*}) = insert($Elem, {$Elem*})

%% --- union2($Bag, $Elem)

[un2-1]	in($Elem, {$Elem*}) == true
	=============================
	union2({$Elem*}, $Elem) = {$Elem*}

[default-un2-2]
	union2({$Elem*}, $Elem) = insert($Elem, {$Elem*})

%% --- union($Bag1, $Bag2)

[un-1] 	union({}, {$Elem*}) = {$Elem*}
[un-2] 	union({$Elem*}, {}) = {$Elem*}

[un-3] {$Elem*4} := union({$Elem*1}, {$Elem*2, $Elem*3})
       ==============================
       union({$Elem, $Elem*1}, {$Elem*2, $Elem, $Elem*3}) = insert($Elem, {$Elem*4})

[default-un]
       {$Elem*3} := union({$Elem*1}, {$Elem*2})
       ==============================
       union({$Elem, $Elem*1}, {$Elem*2}) = insert($Elem, {$Elem*3})

%% --- diff($Bag1, $Bag2)

[df-1] diff({$Elem*1, $Elem, $Elem*2}, {$Elem*3, $Elem, $Elem*4}) = diff({$Elem*1, $Elem*2}, {$Elem*3, $Elem*4})

[default-df-2] diff({$Elem*1}, {$Elem*2}) = {$Elem*1}

%% --- $Bag1 inter $Bag2

[in-1] {$Elem*'} := inter({$Elem*1, $Elem*2}, {$Elem*3, $Elem*4})
       ==================================
       inter({$Elem*1, $Elem, $Elem*2}, {$Elem*3, $Elem, $Elem*4}) = insert($Elem, {$Elem*'})

[default-in2] 
       inter({$Elem*1}, {$Elem*2}) = {}

%% --- size($Bag)

[sz-1] size({}) = 0
[sz-2] size({$Elem, $Elem*}) = 1 + size({$Elem*})

%% --- in($Elem, $Bag)

[in-1]  %%elem-equal($Elem1, $Elem2) = true		%% Should be elem-equal, but this
	$Elem1 == $Elem2					%% is much too expensive
	============================================
	in($Elem1, {$Elem*1, $Elem2, $Elem*2}) = true

%%[in-1]	elem-greater-equal($Elem', $Elem) = true
%%	============================================
%%	in($Elem, {$Elem*1, $Elem', $Elem*2}) = elem-equal($Elem, $Elem')

[default-in-2]
	in($Elem, {$Elem*}) = false

%% if

[if-1] if true then $Bag1 else $Bag2 fi = $Bag1
[if-2] if false then $Bag1 else $Bag2 fi = $Bag2



