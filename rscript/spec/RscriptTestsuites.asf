equations

%% ---- Evaluate test suite

[ETS1]	$Rstore := eval-rstats($Stat*, rstore(<NPASSED,int,0>,<NFAILED,int,0>,<FAILED,bag[str],empty-set>)),
	$NatCon1 := value(NPASSED, $Rstore),
	$NatCon2 := value(NFAILED, $Rstore),
	$Val := value(FAILED, $Rstore)
	==========================================================
	eval-rscript-testsuite($Stat*) = testsuite-report($NatCon1, $NatCon2, $Val)

%% ---- Evaluate test suite with given Rstore

[ETS1]	$Rstore' := assign(NPASSED, int, 0, $Rstore),
	$Rstore'' := assign(NFAILED, int, 0, $Rstore'),
	$Rstore''' := assign(FAILED, bag[str], empty-set, $Rstore''),
	$Rstore'''' := eval-rstats($Stat*, $Rstore'''),
	$NatCon1 := value(NPASSED, $Rstore''''),
	$NatCon2 := value(NFAILED, $Rstore''''),
	$Val := value(FAILED, $Rstore'''')
	==========================================================
	eval-rscript-testsuite-with-rstore($Stat*, $Rstore) = testsuite-report($NatCon1, $NatCon2, $Val)

[TSR1] testsuite-report($NatCon, 0, $Val) = All $NatCon tests passed

[TSR2] 	$NatCon2 != 0
	===========================================================
	testsuite-report($NatCon1, $NatCon2, $Val) = 
	$NatCon2 of $NatCon1 + $NatCon2 tests failed: $Val

%% ---- Increment a variable

[INC1]	$NatCon := value($Var, $Rstore),
	$Integer :=  $NatCon + 1,
	$NatCon' := $Integer
	==================================================
	increment($Var, $Rstore) = assign($Var, $NatCon', $Rstore)

%% ---- Evaluate assert

[S10]	evale($Exp,$Rstore) == true
	===================================================
	eval-rstat(assert $String : $Exp, $Rstore)= increment(NPASSED, $Rstore)

[S11]	evale($Exp,$Rstore) == false, $Rstore' := add-elem(FAILED, $String, $Rstore)
	===================================================
	eval-rstat(assert $String : $Exp, $Rstore)= increment(NFAILED, $Rstore')
