tests

[equal-true]
	equal(<1, 2>, <1, 2>) == true

[equal-false-1]
	equal(<1, 2>, <1, 3>) == false

[equal-false-2]
	equal(<1, 2>, <3, 2>) == false

[equal-false-3]
	equal(<1, 2>, <3, 4>) == false

tests

[first-1]
	first(<1, 2>) == 1

tests

[second-2]
	second(<1, 2>) == 2



tests

[insert-empty]
	insert(1, {}) == {1}

[insert-many]
	insert(1, {2,3,4}) == {2,3,4,1}

[insert-duplicate]
	insert(1, {1,2,3}) == {1,2,3}

tests

[delete-from-empty]
	delete(1, {}) == {}

[delete-from-single-containing]
	delete(1, {1}) == {}

[delete-from-single-non-containing]
	delete(1, {2}) == {2}

[delete-from-many-containing]
	delete(1, {2, 3, 1}) == {2, 3}

[delete-from-many-non-containing]
	delete(1, {2, 3, 4}) == {2, 3, 4}

tests

[element-of-empty]
	element-of(1, {}) == false

[element-of-non-empty-false]
	element-of(1, {2,3,4}) == false

[element-of-singleton]
	element-of(1, {1}) == true

[element-of-many]
	element-of(1, {3,2,1}) == true

tests

[union-empty-empty]
	union({}, {}) == {}

[union-empty-non-empty]
	equal(union({}, {1,2,3}), {1,2,3}) == true

[union-non-empty-empty]
	equal(union({1,2,3}, {}), {1,2,3}) == true

[union-overlap]
	equal(union({1,2,3}, {2,3,4}), {1,2,3,4}) == true

tests

[difference-empty-empty]
	difference({}, {}) == {}

[difference-empty-some]
	difference({}, {1,2,3}) == {}

[difference-some-empty]
	equal(difference({1,2,3}, {}), {1,2,3}) == true

[difference-overlapping]
	equal(difference({1,2,3}, {3,4,5}), {1,2}) == true

[difference-disjoint]
	equal(difference({1,2,3}, {4,5,6}), {1,2,3}) == true

[diffrenece-same]
	difference({1,2,3}, {3,2,1}) == {}

tests

[intersection-empty-empty]
	intersection({}, {}) == {}

[intersection-some-empty]
	intersection({1,2,3}, {}) == {}

[intersection-empty-some]
	intersection({}, {1,2,3}) == {}

[intersection-overlap]
	intersection({1,2,3}, {3,4,5}) == {3}

[intersection-same]
	equal(intersection({1,2,3}, {3,2,1}), {1,2,3}) == true


tests

[unique-empty]
	unique({}) == {}

[unique-duplicates-single]
	equal(unique({1,2,3,3}), {1,2,3}) == true

[unique-duplicates-many]
	equal(unique({2,1,2,2,1,3,3}), {1,2,3}) == true




tests

[product-empty-empty]
	product({}, {}) == {}

[product-empty-non-empty]
	product({}, {1,2,3}) == {}

[product-square]
	equal(product({1,2}, {2,1}), {<1,2>,<2,1>,<1,1>,<2,2>}) == true

[product-singleton-some]
	equal(product({1}, {1,2,3}), {<1,1>,<1,2>,<1,3>}) == true

tests

[domain-single]
	domain({<1,2>}) == {1}

[domain-many-unique]
	equal(domain({<1,2>, <3,4>}), {1,3}) == true

[domain-many-duplicates]
	equal(domain({<3,2>, <3,4>}), {3}) == true


tests

[range-single]
	range({<1,2>}) == {2}

[range-many-unique]
	equal(range({<1,2>, <3,4>}), {2,4}) == true

[range-many-duplicates]
	equal(range({<1,4>, <3,4>}), {4}) == true


tests

[image-empty-empty]
	image({}, {}) == {}

[image-empty-many]
	image({}, {1,2,3}) == {}

[image-many-empty]
	image({<1,2>,<3,4>}, {}) == {}

[image-many-single-unique]
	image({<1,2>,<3,4>}, {1}) == {2}

[imange-many-many-unique]
	equal(image({<1,2>,<3,4>}, {1,3}), {2,4}) == true


tests

[inverse-empty]
	inverse({}) == {}

[inverse-singleton]
	inverse({<1, true>}) == {<true, 1>}

[inverse-many]
	equal(inverse({<1, true>, <3, false>}), {<true, 1>, <false, 3>}) == true

tests

[left-image-empty-empty]
	left-image({}, {}) == {}

[left-image-some-empty]
	left-image({<1, true>, <2, false>}, {}) == {}

[left-image-some-single]
	left-image({<1, true>, <2, false>}, {true}) == {1}

[left-image-some-some]
	equal(left-image({<1, true>, <2, false>, <3, false>}, {true, false}), {2, 1, 3}) == true

[left-image-some-some-duplicates]
	left-image({<1, true>, <1, true>, <2, false>}, {true}) == {1}

tests

[compose-empty-empty]
	compose({}, {}) == {}

[compose-empty-non-empty]
	compose({}, {<1,2>}) == {}

[compose-non-empty-non-empty-disjoint]
	compose({<1,2>}, {<4,5>}) == {}

[compose-singletons]
	compose({<1,2>}, {<2,3>}) == {<1,3>}


tests

[identity-empty]
	identity({}) == {}

[identity-single]
	identity({1}) == {<1,1>}

[identity-many]
	equal(identity({1, 2}), {<1,1>, <2,2>}) == true


tests

[total-empty]
	total({}) == {}

[total-single]
	total({1}) == {<1, 1>}

[total-many]
	equal(total({1, 2}), {<1, 2>, <1, 1>, <2, 2>, <2, 1>}) == true


tests

[complement-empty]
	complement({}) == {}

[complement-single]
	equal(complement({<1, 2>}), {<2, 1>, <1, 1>, <2, 2>}) == true

[complement-many]
	equal(complement({<1, 2>, <2, 3>}), {<1, 1>, <2, 1>, <3, 2>, <2, 2>, <3, 1>, <1, 3>, <3, 3>}) == true


tests

[reflexive-closure-empty]
	reflexive-closure({}) == {}

[reflexive-closure-single]
	equal(reflexive-closure({<1, 2>}), {<1, 2>, <1, 1>, <2, 2>}) == true

[reflexive-closure-many]
	equal(reflexive-closure({<1, 2>, <3, 4>}), {<1, 2>, <3, 4>, <1, 1>, <2, 2>, <3, 3>, <4, 4>}) == true

tests

[symmetric-closure-empty]
	symmetric-closure({}) == {}

[symmetric-closure-single]
	equal(symmetric-closure({<1, 2>}), {<1, 2>, <2, 1>}) == true

[symmetric-closure-many]
	equal(symmetric-closure({<1, 2>, <2, 3>}), {<1, 2>, <2, 1>, <2, 3>, <3, 2>}) == true

[symmetric-closure-duplicates]
	equal(symmetric-closure({<1, 2>, <2, 1>}), {<1, 2>, <2, 1>}) == true


tests

[transitive-closure-empty]
	transitive-closure({}) == {}

[transitive-closure-single]
	transitive-closure({<1, 2>}) == {<1, 2>}

[transitive-closure-many-disconnected]
	equal(transitive-closure({<1, 2>, <3, 4>}), {<1, 2>, <3, 4>}) == true

[transitive-closure-many-connected]
	equal(transitive-closure({<1, 2>, <2, 3>}), {<1, 2>, <2, 3>, <1, 3>}) == true

[transitive-closure-bigger]
	equal(transitive-closure({<1, 2>, <2, 3>, <3, 4>}), {<1, 2>, <2, 3>, <3, 4>, <1, 3>, <1, 4>, <2, 4>}) == true

[transitive-closure-cyclic]
	equal(transitive-closure({<1, 2>, <2, 1>, <2, 3>}), {<2, 2>, <1, 3>, <1, 1>, <2, 3>, <2, 1>, <1, 2>}) == true

tests

[transitive-reflexive-closure-empty]
	transitive-reflexive-closure({}) == {}

[transitive-reflexive-closure-single]
	equal(transitive-reflexive-closure({<1, 2>}), {<1, 2>, <1, 1>, <2, 2>}) == true

[transitive-reflexive-closure-many-disconnected]
	equal(transitive-reflexive-closure({<1, 2>, <3, 4>}), {<1, 2>, <3, 4>, <1, 1>, <2, 2>, <3, 3>, <4, 4>}) == true

[transitive-reflexive-closure-many-connected]
	equal(transitive-reflexive-closure({<1, 2>, <2, 3>}), {<1, 2>, <2, 3>, <1, 3>, <1, 1>, <2, 2>, <3, 3>}) == true

[transitive-reflexive-closure-bigger]
	equal(transitive-reflexive-closure({<1, 2>, <2, 3>, <3, 4>}), {<1, 2>, <2, 3>, <3, 4>, <1, 3>, <1, 4>, <2, 4>, <1, 1>, <2, 2>, <3, 3>, <4, 4>}) == true

[transitive-reflexive-closure-cyclic]
	equal(transitive-reflexive-closure({<1, 2>, <2, 1>, <2, 3>}), {<2, 2>, <1, 3>, <1, 1>, <2, 3>, <2, 1>, <1, 2>, <3, 3>}) == true


tests

[top-empty]
	top({}) == {}

[top-single]
	top({<1, 2>}) == {1}

[top-many-single]
	top({<1, 2>, <2, 3>}) == {1}

[top-many-many]
	equal(top({<1, 2>, <2, 3>, <4, 3>}), {1, 4}) == true

[top-cyclic]
	top({<1, 2>, <2, 3>, <3, 1>}) == {}


tests

[bottom-empty]
	bottom({}) == {}

[bottom-single]
	bottom({<1, 2>}) == {2}

[bottom-many-single]
	bottom({<1, 2>, <2, 3>}) == {3}

[bottom-many-many]
	equal(bottom({<1, 2>, <2, 3>, <2, 4>}), {3, 4}) == true

[bottom-cyclic]
	bottom({<1, 2>, <2, 3>, <3, 1>}) == {}


tests

[carrier-empty]
	carrier({}) == {}

[carrier-single-different]
	equal(carrier({<1, 2>}), {1, 2}) == true

[carrier-single-equal]
	carrier({<1, 1>}) == {1}

[carrier-many]
	equal(carrier({<1, 2>, <3, 4>}), {1, 2, 3, 4}) == true

[carrier-many-overlap]
	equal(carrier({<1, 2>, <2, 3>}), {1, 2, 3}) == true


tests

[power-empty]
	power({}) == {{}}

[power-singleton]
	equal(power({1}), {{}, {1}}) == true

[power-two-elements]
	equal(power({1, 2}), {{}, {1}, {2}, {1,2}}) == true

[power-three-elements]
	equal(power({1, 2, 3}), {{}, {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, {1, 2, 3}}) == true

