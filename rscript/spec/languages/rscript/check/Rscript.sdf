module languages/rscript/check/Rscript

imports
	languages/rscript/syntax/Rscript
	languages/rscript/check/Rscript-TypeEnvironment
         utilities/PosInfo[RSCRIPT]

hiddens
    context-free start-symbols Summary Boolean TENV

exports    
context-free syntax
	check-rscript(RSCRIPT) -> Summary
	is-type-correct(Summary) -> Boolean
         check-rscript(RSCRIPT, TENV) -> TENV

%% TODO:	check-rscript-with-rstore(RSCRIPT, RSTORE)		-> Summary

    context-free syntax
	type-of(REXP)                  				-> ElemType
	element-type(REXPTYPE, TENV)				-> REXPTYPE
	field(Integer)						-> REXPTYPE
	cover-empty(REXPTYPE)					-> REXPTYPE
	first(REXPTYPE, TENV)					-> REXPTYPE
	second(REXPTYPE, TENV)					-> REXPTYPE

	is-tuple(REXP)						-> Boolean
	is-rel-type(REXPTYPE)					-> Boolean
	is-set-type(REXPTYPE)					-> Boolean

	norm(REXPTYPE, TENV)					-> REXPTYPE
	equal-type(REXPTYPE, REXPTYPE, TENV)			-> Boolean
	get-tuple-type(REXPTYPE)				-> REXPTYPE

         match-types(REXPTYPE, REXPTYPE, TypeStore, TENV)	-> <Boolean, TypeStore>
         substitute(REXPTYPE,  TypeStore, TENV) 	-> <REXPTYPE, TENV>


exports
    context-free syntax
	match-targets({TARGET ","}*, REXPTYPE, TENV)		-> TENV
	delete-targets({TARGET ","}*, TENV)			-> TENV

%%	check-rstore(RSTAT*, RSTORE, TENV)			-> TENV
	check(REXP, TENV) 					-> <REXPTYPE, TENV>

	check-const(REXP, TENV) 				-> <REXPTYPE, TENV>
	check-const-tuple(REXP, TENV)				-> <REXPTYPE, TENV>
	check-const-set-or-rel(REXP, TENV) 	-> <REXPTYPE, TENV>
	check-stat(RSTAT, TENV) 				-> TENV

         check-not-defined(IdCon, TENV)            		-> TENV

         require-type(REXP, REXPTYPE, TENV) 			-> TENV
         require-type2(REXP, REXPTYPE, REXP, REXPTYPE, TENV) 	-> TENV

	check-eqs(INITVAR*, EQU*, TENV)				-> TENV

	check-duplicate-fields({REXPTYPE ","}*, Integer, TENV)	-> TENV
	get-field-type(REXPTYPE, IdCon, TENV)			-> <REXPTYPE, TENV>

%%	get-field-index(IdCon, List[[REXPTYPE]])			-> Integer
%%	get-field-index1(IdCon, {Formal ","}*, Integer)		-> Integer
	
	type-having-field(IdCon, TENV) -> REXPTYPE
	type-has-field(IdCon, REXPTYPE) -> Boolean
	get-field-index(IdCon, REXPTYPE) -> Integer
	get-field-index(IdCon, TENV) -> Integer

	compat-cmp(REXP, REXPTYPE, REXPTYPE, TENV)		-> TENV
	check-cmp(REXP, REXP, REXP, TENV)			-> <REXPTYPE, TENV>

	check-int(REXP, REXP, REXP, TENV)			-> <REXPTYPE, TENV>

	compat-un(REXP, REXPTYPE, REXPTYPE, TENV)		-> <REXPTYPE, TENV>
	check-un(REXP, REXP, REXP, TENV)			-> <REXPTYPE, TENV>

	compat-comp(REXP, REXPTYPE, REXPTYPE, TENV)		-> <REXPTYPE, TENV>
	compat-prod(REXP, REXPTYPE, REXPTYPE, TENV)		-> <REXPTYPE, TENV>
	compat-lim(REXP, REXPTYPE, REXPTYPE, TENV)		-> <REXPTYPE, TENV>
	compat-rim(REXP, REXPTYPE, REXPTYPE, TENV)		-> <REXPTYPE, TENV>
	compat-trans(REXP, REXPTYPE, TENV)			-> <REXPTYPE, TENV>
	compat-size(REXP, REXPTYPE, TENV)			-> <REXPTYPE, TENV>

         container-type(REXPTYPE)				-> REXPTYPE
        
	add-generators({GENERATOR ","}*, TENV)            	-> TENV
	del-generators({GENERATOR ","}*, TENV)         		-> TENV

         add-formals({REXPTYPE ","}*, TENV)             		-> TENV
         del-formals({REXPTYPE ","}*, TENV)				-> TENV

 	extract-types({REXPTYPE ","}*)                     		-> REXPTYPE
         collect-actuals({REXP ","}*, TENV)        		-> <REXPTYPE, TENV>

         find-result-type(IdCon, REXPTYPE, TENV)   		-> <REXPTYPE, TENV>

hiddens
    imports basic/Comments
    variables
     "$Table" [0-9\']* 		-> TypeStore
     "$TypeStore" [0-9\']* 		-> TypeStore
     "$Tenv"[0-9\']* 		-> TENV
     "$Error" [0-9\']* 		-> ERROR
     "$Error*" [0-9\']* 	-> {ERROR ";"}*
     "$Error+" [0-9\']* 	-> {ERROR ";"}+
     "$Errors" [0-9\']*		-> ERRORS

     "$Summary"  [0-9\']*	-> Summary
     
     "$Exp" [0-9\']*    	-> REXP
     "$Test" [0-9\']*    	-> REXP
     "$Exp*" [0-9\']*    	-> {REXP ","}*
     "$Exp+" [0-9\']*    	-> {REXP ","}+
     "$Exps" [0-9\']*    	-> {REXP ","}+

     "$Etype" [0-9\']*    	-> REXPTYPE
     "$Etype*" [0-9\']*    	-> {REXPTYPE ","}*
     "$Etype+" [0-9\']*    	-> {REXPTYPE ","}+

     "$BoolCon" [0-9\']*    	-> BoolCon
     "$Boolean" [0-9\']*    	-> Boolean
     "$NatCon" [0-9\']*    	-> NatCon
     "$Integer" [0-9\']*    	-> Integer
     "$Loc" [0-9\']*    	-> Location
     "$String" [0-9\']*    	-> String
     "$StrCon" [0-9\']*    	-> StrCon

     "$Var" [0-9\']*       	-> IdCon
     "$Var*" [0-9\']*       	-> {IdCon ","}*
     "$Var+" [0-9\']*       	-> {IdCon ","}+

     "$Target" [0-9\']*		-> TARGET
     "$Target*" [0-9\']*	-> {TARGET ","}*
     "$Target+" [0-9\']*	-> {TARGET ","}+

     "$Rscript" [0-9\']*        -> RSCRIPT

     "$Stat" [0-9\']*            -> RSTAT
     "$Stat*" [0-9\']*           -> RSTAT*
     "$Stat+" [0-9\']*           -> RSTAT+

     "$SimpleGen" [0-9\']*   	-> SIMPLE-GENERATOR

     "$Gen" [0-9\']*   		-> GENERATOR
     "$Gen*" [0-9\']*   	-> {GENERATOR ","}*
     "$Gen+" [0-9\']*   	-> {GENERATOR ","}+

      "$Feedback*" [0-9\']*	-> {Error ","}*

      "$InitVar" [0-9\']*	-> INITVAR
      "$InitVar*" [0-9\']*	-> INITVAR*
      "$InitVar+" [0-9\']*	-> INITVAR+

      "$Eq" [0-9\']*		-> EQU
      "$Eq*" [0-9\']*		-> EQU*
      "$Eq+" [0-9\']*		-> EQU+

      "$ListOfTypes" [0-9\']*	-> List[[REXPTYPE]]
	
      "$Yield"                  -> YIELD

	"$Pair"[0-9\']* -> <IdCon, REXPTYPE>
	"$Pair*"[0-9\']* -> {<IdCon, REXPTYPE> ","}*
	"$Pair+"[0-9\']* -> {<IdCon, REXPTYPE> ","}+
	"$Formal"[0-9\']* -> Formal
	"$Formal*"[0-9\']* -> {Formal ","}*
	"$Formal+"[0-9\']* -> {Formal ","}+


lexical variables
	"$IdConChar*"[0-9\']*    -> [A-Za-z0-9\_\-]*
