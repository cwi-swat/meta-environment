module languages/rscript/check/Rscript-TypeEnvironment

imports languages/rscript/check/Rscript-TypeStore
        languages/rscript/check/Rscript-TypeErrors

exports
sorts TENV

context-free syntax
  initial-type-environment()                                      -> TENV                     
  <TypeStore,ERRORS>                                              -> TENV            {prefer} 
  well-formed-type(REXPTYPE, TENV)                                -> TENV                     
  TENV "+" ERROR                                                  -> TENV                     
  "if" Boolean "then" TENV "else" TENV "fi"                       -> TENV                     
  "if" Boolean "then" <REXPTYPE,TENV> "else" <REXPTYPE,TENV> "fi" -> <REXPTYPE,TENV>          
  lookup(TENV, IdCon)                                             -> REXPTYPE                 
  store(TENV, IdCon, REXPTYPE)                                    -> TENV                     
  delete(TENV, IdCon)                                             -> TENV                     
  "built-ins"                                                     -> TypeStore                

hiddens
imports basic/Comments

variables
  "$Table" [0-9\']*       -> TypeStore                
  "$TypeStore" [0-9\']*   -> TypeStore                
  "$Tenv" [0-9\']*        -> TENV                     
  "$Error" [0-9\']*       -> ERROR                    
  "$Error*" [0-9\']*      -> {ERROR ";"}*             
  "$Error+" [0-9\']*      -> {ERROR ";"}+             
  "$Errors" [0-9\']*      -> ERRORS                   
  "$Summary" [0-9\']*     -> Summary                  
  "$Exp" [0-9\']*         -> REXP                     
  "$Test" [0-9\']*        -> REXP                     
  "$Exp*" [0-9\']*        -> {REXP ","}*              
  "$Exp+" [0-9\']*        -> {REXP ","}+              
  "$Exps" [0-9\']*        -> {REXP ","}+              
  "$Etype" [0-9\']*       -> REXPTYPE                 
  "$Etype*" [0-9\']*      -> {REXPTYPE ","}*          
  "$Etype+" [0-9\']*      -> {REXPTYPE ","}+          
  "$BoolCon" [0-9\']*     -> BoolCon                  
  "$Boolean" [0-9\']*     -> Boolean                  
  "$NatCon" [0-9\']*      -> NatCon                   
  "$Integer" [0-9\']*     -> Integer                  
  "$Loc" [0-9\']*         -> Location                 
  "$String" [0-9\']*      -> String                   
  "$StrCon" [0-9\']*      -> StrCon                   
  "$Var" [0-9\']*         -> IdCon                    
  "$Var*" [0-9\']*        -> {IdCon ","}*             
  "$Var+" [0-9\']*        -> {IdCon ","}+             
  "$Target" [0-9\']*      -> TARGET                   
  "$Target*" [0-9\']*     -> {TARGET ","}*            
  "$Target+" [0-9\']*     -> {TARGET ","}+            
  "$Rscript" [0-9\']*     -> RSCRIPT                  
  "$Stat" [0-9\']*        -> RSTAT                    
  "$Stat*" [0-9\']*       -> RSTAT*                   
  "$Stat+" [0-9\']*       -> RSTAT+                   
  "$SimpleGen" [0-9\']*   -> SIMPLE-GENERATOR         
  "$Gen" [0-9\']*         -> GENERATOR                
  "$Gen*" [0-9\']*        -> {GENERATOR ","}*         
  "$Gen+" [0-9\']*        -> {GENERATOR ","}+         
  "$Feedback*" [0-9\']*   -> {Error ","}*             
  "$InitVar" [0-9\']*     -> INITVAR                  
  "$InitVar*" [0-9\']*    -> INITVAR*                 
  "$InitVar+" [0-9\']*    -> INITVAR+                 
  "$Eq" [0-9\']*          -> EQU                      
  "$Eq*" [0-9\']*         -> EQU*                     
  "$Eq+" [0-9\']*         -> EQU+                     
  "$ListOfTypes" [0-9\']* -> List[[REXPTYPE]]         
  "$Yield"                -> YIELD                    
  "$Pair" [0-9\']*        -> <IdCon,REXPTYPE>         
  "$Pair*" [0-9\']*       -> {<IdCon,REXPTYPE> ","}*  
  "$Pair+" [0-9\']*       -> {<IdCon,REXPTYPE> ","}+  
  "$Formal+"[0-9\']* -> {Formal ","}+
