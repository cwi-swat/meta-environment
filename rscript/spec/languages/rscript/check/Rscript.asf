equations

[main] start(RSCRIPT, $Rscript) = start(Summary, check-rscript($Rscript))

%% ---- transition from bag to set

[xxx]   bag[$Etype] = set[$Etype]

%% ---- Simplify constant type

[xxx]	fun [] to $Etype = $Etype

%% ---- Type of element

[to1]	type-of($NatCon) = int 
[to2]	type-of($BoolCon) = bool
[to3]	type-of($StrCon)  = str
[to4]	type-of($Loc)     = loc

%% ---- Element type

[et1]	element-type(set[$Etype], $Tenv)  = $Etype
[et2]	element-type(rel[$Etype+], $Tenv) = <$Etype+>
[et3]	element-type(<$Etype+>, $Tenv)    = <$Etype+>
[et3]	element-type(<$Formal+>, $Tenv)    = <$Formal+>
[et4]	element-type($Var, $Tenv)         = element-type(lookup($Tenv, $Var), $Tenv)
[default-et]
	element-type($Etype, $Tenv)       = undefined-type

%% ---- Is rel type?

[irt1] is-rel-type(rel[$Etype+]) = true

[default-irt]
	is-rel-type($Etype) = false

%% ---- is set type?

[ibt1] is-set-type(set[$Etype]) = true

[default-ibt]
	is-set-type($Etype) = false

%% ---- First of type

[ft1]	first(<$Etype1, $Etype*>, $Tenv) = $Etype1

[ft2]	first(<$Etype1 $Var, $Formal*>, $Tenv) = $Etype1

[ft3]	first($Var, $Tenv) = first(lookup($Tenv, $Var), $Tenv)

[default-ft]
	first($Etype, $Tenv) = $Etype

%% ---- Second of type

[st1]	second(<$Etype1, $Etype+>, $Tenv) = <$Etype+>
[st1]	second(<$Etype1 $Var, $Formal+>, $Tenv) = <$Formal+>
[st3]	second($Var, $Tenv) = second(lookup($Tenv, $Var), $Tenv)
[default-st]
	second($Etype, $Tenv) = undefined-type

%% ---- Normalize type

[nm1]	norm(set[$Etype], $Tenv) = set[norm($Etype, $Tenv)]

[nm2]	norm(rel[$Etype+], $Tenv) = set[norm(<$Etype+>, $Tenv)]

[nm3]	$Etype1' := norm($Etype1, $Tenv),
	<$Etype+'> := norm(<$Etype2, $Etype+>, $Tenv)
	===
	norm(<$Etype1, $Etype2, $Etype+>, $Tenv) = <$Etype1', $Etype+'>

[nm4]	$Etype1' := norm($Etype1, $Tenv),
	$Etype2' := norm($Etype2, $Tenv)
	===
	norm(<$Etype1, $Etype2>, $Tenv) = <$Etype1', $Etype2'>

[nm6]	norm($Var, $Tenv) = norm(lookup($Tenv, $Var), $Tenv)

[nm6]	norm(<$Etype>, $Tenv) = <norm($Etype, $Tenv)>


[nm6]	norm(<$Etype $Var>, $Tenv) = norm(<$Etype>, $Tenv)

[nm6]	$Etype' := norm($Etype, $Tenv),
	<$Etype+> := norm(<$Formal+>, $Tenv)
	===
	norm(<$Etype $Var, $Formal+>, $Tenv) = <$Etype', $Etype+>


[default-nm]
	norm($Etype, $Tenv) = $Etype

%% ---- Equality on types: ==

[eqt1]	norm($Etype1, $Tenv) == norm($Etype2, $Tenv)
	===
	equal-type($Etype1, $Etype2, $Tenv) = true

[eqt2]	set[$Etype1'] := norm($Etype1, $Tenv),
	set[$Etype2'] := norm($Etype2, $Tenv)
	===
	equal-type($Etype1, $Etype2, $Tenv) = equal-type($Etype1', $Etype2', $Tenv)

[eqt3]  	empty-set-type == norm($Etype1, $Tenv),
 	set[$Etype2']:= norm($Etype2, $Tenv)
	===
	equal-type($Etype1, $Etype2, $Tenv) = true

[eqt4]	set[$Etype1'] := norm($Etype1, $Tenv),
	empty-set-type == norm($Etype2, $Tenv)
	===
	equal-type($Etype1, $Etype2, $Tenv) = true

[eqt5]	<$Etype1', $Etype1'', $Etype+1> := norm($Etype1, $Tenv),
	<$Etype2', $Etype2'', $Etype+2> := norm($Etype2, $Tenv),
	equal-type($Etype1', $Etype2', $Tenv) == true,
	equal-type(<$Etype1'', $Etype+1>, <$Etype2'', $Etype+2>, $Tenv) == true
	===
	equal-type($Etype1, $Etype2, $Tenv) = true

[eqt6]	<$Etype1', $Etype1''> := norm($Etype1, $Tenv),
	<$Etype2', $Etype2''> := norm($Etype2, $Tenv),
	equal-type($Etype1', $Etype2', $Tenv) == true,
	equal-type($Etype1'', $Etype2'', $Tenv) == true
	===
	equal-type($Etype1, $Etype2, $Tenv) = true

[default-eqt]
	equal-type($Etype1, $Etype2, $Tenv) = false

%% ---- get-tuple-type

[gtt1]	get-tuple-type(<$Etype1 $Var1, $Etype2 $Var2>) = 
		<get-tuple-type($Etype1), get-tuple-type($Etype2)>

[gtt2]	<$Etype2, $Etype+'> := get-tuple-type(<$Etype2 $Var2, $Formal+>)
	===
	get-tuple-type(<$Etype1 $Var1, $Etype2 $Var2, $Formal+>) = 
		<get-tuple-type($Etype1), $Etype2, $Etype+'>

[default-get-tuple-type]
	get-tuple-type($Etype) = $Etype

tests

[gtt-1]	get-tuple-type(<str theStr, int theInt>) == <str, int>

equations

%% ---- Is tuple

[it1]	is-tuple(<$Exp1, $Exp2>) = true

[default-it]
	is-tuple($Exp) = false


%% --- is-type-correct

[itc-1] is-type-correct(summary("RscriptChecker", "Rscript", [])) = true

[default-itc]
	is-type-correct($Summary) = false



%% ---- Check that variable is not yet defined

[cnd]	check-not-defined($Var, $Tenv) = 
		if equal-type(lookup($Tenv, $Var), undefined-type, $Tenv) then 
			$Tenv 
		else  
			$Tenv + $Var redeclared 
		fi

[type-has-field-1]
	type-has-field($Var, <$Formal*1',$Etype $Var, $Formal*2'>) = true

[default-type-has-field-2]
	type-has-field($Var, $Etype) = false

[type-having-field-1]
	[$Pair*1, <$Var', $Etype>, $Pair*2] := $TypeStore,
	type-has-field($Var, $Etype) == true
	===
	type-having-field($Var, <$TypeStore, $Errors>) = $Etype

[default-type-having-field-2]
	type-having-field($Var, $Tenv) = undefined-type

equations

[get-field-index-top]
	$Etype := type-having-field($Var, $Tenv),
	$Etype != undefined-type 
	===
	get-field-index($Var, $Tenv) = get-field-index($Var, $Etype)

[default-get-field-index-otherwise]
	get-field-index($Var, $Tenv) = 0

equations

[get-field-index-1]
	get-field-index($Var, <$Etype $Var, $Formal*>) = 1

[get-field-index-2]
	$Var != $Var'
	===
	get-field-index($Var, <$Etype $Var', $Formal+>) =
		1 + get-field-index($Var, <$Formal+>)

[get-field-index-3]
	$Etype' $Var' !:= $Formal
	===
	get-field-index($Var, <$Formal, $Formal+>) =
		get-field-index($Var, <$Formal+>)



[cdf1-1]	get-field-index($Var, $Tenv) == 0
	===
	check-duplicate-fields(<$Etype $Var>, $Integer, $Tenv) = $Tenv

[cdf1-1]	get-field-index($Var, $Tenv) == 0
	===
	check-duplicate-fields(<$Etype $Var, $Formal+>, $Integer, $Tenv) =
		check-duplicate-fields(<$Formal+>, $Integer + 1, $Tenv)

[cdf1-2]	get-field-index($Var, $Tenv) == $Integer
	===
	check-duplicate-fields(<$Etype $Var>, $Integer, $Tenv) = $Tenv

[cdf1-2]	get-field-index($Var, $Tenv) == $Integer
	===
	check-duplicate-fields(<$Etype $Var, $Formal+>, $Integer, $Tenv) =
		check-duplicate-fields(<$Formal+>, $Integer + 1, $Tenv)


[cdf1]	$Integer' := get-field-index($Var, $Tenv),
	$Integer' != 0,
	$Integer' != $Integer,
	$Tenv' := $Tenv + Field name $Var used at different record positions
	===
	check-duplicate-fields(<$Etype $Var>, $Integer, $Tenv) = $Tenv'

[cdf1]	$Integer' := get-field-index($Var, $Tenv),
	$Integer' != 0,
	$Integer' != $Integer,
	$Tenv' := $Tenv + Field name $Var used at different record positions
	===
	check-duplicate-fields(<$Etype $Var, $Formal+>, $Integer, $Tenv) =
		check-duplicate-fields(<$Formal+>, $Integer + 1, $Tenv')

[cdf2]	
	check-duplicate-fields(, $Integer, $Tenv) = $Tenv

[default-cdf3]	
	check-duplicate-fields($Etype, $Etype*, $Integer, $Tenv) = $Tenv


%% Skip non-labeled positions
[cdf]	check-duplicate-fields(<$Etype, $Etype*>, $Integer, $Tenv) = $Tenv
		

equations
%% ---- get-field-type

[gft0]	$Etype := lookup($Tenv, $Var1)
	===
	get-field-type($Var1, $Var2, $Tenv) = get-field-type($Etype, $Var2, $Tenv)

[gft1]	get-field-type(<$Etype $Var>, $Var, $Tenv) = <$Etype, $Tenv>

[gft1]	get-field-type(<$Etype $Var, $Formal+>, $Var, $Tenv) = <$Etype, $Tenv>

[gft2]	$Var1 != $Var2
	===
	get-field-type(<$Etype $Var1>, $Var2, $Tenv) = <undefined-type, $Tenv + No definition for field $Var2>

[gft2]	$Var1 != $Var2
	===
	get-field-type(<$Etype $Var1, $Formal+>, $Var2, $Tenv) = 
	get-field-type(<$Formal+>, $Var2, $Tenv)




[rt1] 	<$Etype', $Tenv'> := check($Exp, $Tenv)
      	===
      	require-type($Exp, $Etype, $Tenv) = 
      	if equal-type($Etype, $Etype', $Tenv') then $Tenv' else $Tenv' + $Exp
      	should have type $Etype fi

equations

[rt2]	$Tenv' := require-type($Exp1, $Etype1, $Tenv),
	$Tenv'' := require-type($Exp2, $Etype2, $Tenv')
	===	
	require-type2($Exp1, $Etype1, $Exp2, $Etype2, $Tenv) = $Tenv''


equations

[check-const-tuple-0]
	<$Etype1, $Tenv'> := check($Exp1, $Tenv),
	<$Etype2, $Tenv''> := check($Exp2, $Tenv')
	===
	check(<$Exp1, $Exp2>, $Tenv) = <<$Etype1, $Etype2>, $Tenv''>


[check-const-tuple2] 
      	<$Etype, $Tenv'> := check($Exp1, $Tenv), 
     	<<$Etype+>, $Tenv''> := check(<$Exp2, $Exp+>, $Tenv')
  	===
     	check(<$Exp1, $Exp2, $Exp+>, $Tenv) = <<$Etype, $Etype+>, $Tenv''>

%% ---- Check Elementary values

[check-const-bool] 
	check($BoolCon, $Tenv) = <type-of($BoolCon), $Tenv>

[check-const-int] 
	check($NatCon, $Tenv) = <type-of($NatCon), $Tenv>

[check-const-str]
	check($StrCon, $Tenv) = <type-of($StrCon), $Tenv>

[check-const-loc]
	check($Loc, $Tenv) = <type-of($Loc), $Tenv>


[check-const-br1]
	is-tuple($Exp) == false,
	<$Etype, $Tenv'> := check($Exp, $Tenv),
	$Etype' := set[$Etype],
	<$Etype'', $Tenv''> := check({$Exp+}, $Tenv'),
	equal-type($Etype', $Etype'', $Tenv'') == true
	===
	check({$Exp, $Exp+}, $Tenv) = <$Etype', $Tenv''>

[check-const-br2] 
	is-tuple($Exp) == false,
	<$Etype, $Tenv'> := check($Exp, $Tenv),
	$Etype' :=  set[$Etype]
	===
	check({$Exp}, $Tenv) = <$Etype', $Tenv'>

[check-const-br31]
	is-tuple($Exp) == true,   
	<<$Etype+>, $Tenv'> := check($Exp, $Tenv), 
	$Etype := rel[$Etype+],
	<$Etype', $Tenv''> := check({$Exp+}, $Tenv'),
	equal-type($Etype, $Etype', $Tenv'') == true
	===
	check({$Exp, $Exp+}, $Tenv) = <$Etype, $Tenv''>

[check-const-br4]
	is-tuple($Exp) == true, 
	<<$Etype+>, $Tenv'> := check($Exp, $Tenv), 
	$Etype := rel[$Etype+]
         ===
         check({$Exp}, $Tenv) = <$Etype, $Tenv'>

[check-const-br5]
	check({}, $Tenv) = <empty-set-type, $Tenv>

equations
%%-----------------------------------------------------------------------------------
%% ---- Check arbitrary expressions

%% ---- Default case for check
[default-check]
	check($Exp, $Tenv) = <undefined-type, $Tenv +  $Exp cannot be typed>

%% ---- Parentheses

%%[check-par]
%%	check(( $Exp ), $Tenv) = check($Exp, $Tenv)

[check-var] 
	$Etype := lookup($Tenv, $Var)
	===
	check($Var, $Tenv) = 
	if equal-type($Etype, not-in-table, $Tenv) then <undefined-type, $Tenv + Undeclared $Var> else <$Etype, $Tenv> fi

%% ---- Check Operators

%% ---- Boolean operators

[check-and]
      	$Tenv' := require-type2($Exp1, bool, $Exp2, bool, $Tenv)
      	===
      	check($Exp1 and $Exp2, $Tenv) = <bool, $Tenv'>

[check-or]
      	$Tenv' := require-type2($Exp1, bool, $Exp2, bool, $Tenv)
      	===
      	check($Exp1 or $Exp2, $Tenv) = <bool, $Tenv'>

[check-implies]
      	$Tenv' := require-type2($Exp1, bool, $Exp2, bool, $Tenv)
      	===
      	check($Exp1 implies $Exp2, $Tenv) = <bool, $Tenv'>

[check-not] 
      	$Tenv' := require-type($Exp, bool, $Tenv)
      	===
      	check(not $Exp, $Tenv) = <bool, $Tenv'>

[check-in]
	<$Etype1, $Tenv'> := check($Exp1, $Tenv),
	$Tenv'' := require-type($Exp2, set[$Etype1], $Tenv')
	===
	check($Exp1 in $Exp2, $Tenv) = <bool, $Tenv''>

[check-notin]
	<$Etype1, $Tenv'> := check($Exp1, $Tenv),
	$Tenv'' := require-type($Exp2, set[$Etype1], $Tenv')
	===
	check($Exp1 notin $Exp2, $Tenv) = <bool, $Tenv''>

%% ---- Comparison operators

%% ---- equal and notequal

[check-eq] 
      	<$Etype1, $Tenv'> := check($Exp1, $Tenv), 
	$Tenv'' := require-type($Exp2, $Etype1, $Tenv')
      	===
      	check($Exp1 == $Exp2, $Tenv) = <bool, $Tenv''>
[check-ne] 
      	<$Etype1, $Tenv'> := check($Exp1, $Tenv), 
	$Tenv'' := require-type($Exp2, $Etype1, $Tenv')
      	===
      	check($Exp1 != $Exp2, $Tenv) = <bool, $Tenv''>


equations

[ct1]	container-type(<$Etype+>) = rel[$Etype+]

[default-ct2] 
	container-type($Etype) = set[$Etype]


equations
%% ---- compatibility for other comparison operators

[compat-cmp1]
	compat-cmp($Exp, set[$Etype], set[$Etype], $Tenv) = $Tenv
[compat-cmp2]
	compat-cmp($Exp, set[$Etype], empty-set-type, $Tenv) = $Tenv
[compat-cmp3]
	compat-cmp($Exp, empty-set-type, set[$Etype], $Tenv) = $Tenv
[compat-cmp4]
	compat-cmp($Exp, empty-set-type, empty-set-type, $Tenv) = $Tenv
[compat-cmp5]
	compat-cmp($Exp, int, int, $Tenv) = $Tenv
[compat-cmp6]
	compat-cmp($Exp, str, str, $Tenv) = $Tenv
[compat-cmp7]
	compat-cmp($Exp, loc, loc, $Tenv) = $Tenv
[compat-cmp8]
	compat-cmp($Exp, $Etype1, $Etype2, $Tenv) = 
	$Tenv + Incompatible argument types [$Etype1, $Etype2] in $Exp

[check-cmp1]
	<$Etype1, $Tenv'> := check($Exp1, $Tenv), 
      	<$Etype2, $Tenv''> := check($Exp2, $Tenv'),
	$Tenv''' := compat-cmp($Exp, norm($Etype1,$Tenv), norm($Etype2, $Tenv), $Tenv'')
	===
	check-cmp($Exp, $Exp1, $Exp2, $Tenv) = <bool, $Tenv'''>

[check-le] 
      $Exp1 <= $Exp2 := $Exp
      ===
      check($Exp, $Tenv) = check-cmp($Exp, $Exp1, $Exp2, $Tenv)

[check-lt] 
      $Exp1 < $Exp2 := $Exp
      ===
      check($Exp, $Tenv) = check-cmp($Exp, $Exp1, $Exp2, $Tenv)

[check-ge] 
      $Exp1 >= $Exp2 := $Exp
      ===
      check($Exp, $Tenv) = check-cmp($Exp, $Exp1, $Exp2, $Tenv)

[check-gt] 
      $Exp1 > $Exp2 := $Exp
      ===
      check($Exp, $Tenv) = check-cmp($Exp, $Exp1, $Exp2, $Tenv)

%% ---- Integers operators

[check-int1]
	$Tenv' := require-type($Exp1, int, $Tenv),
	$Tenv'' := require-type($Exp2, int, $Tenv')
	===
	check-int($Exp, $Exp1, $Exp2, $Tenv) = <int, $Tenv''>

[check-unary-minus]
	- $Exp' := $Exp
	=== 
	check($Exp, $Tenv) = <int, require-type($Exp', int, $Tenv)>

[check-add1]
 	$Exp1 + $Exp2 := $Exp
      	===
      	check($Exp, $Tenv) = check-int($Exp, $Exp1, $Exp2, $Tenv)

[check-sub1]
 	$Exp1 - $Exp2 := $Exp
      	===
      	check($Exp, $Tenv) = check-int($Exp, $Exp1, $Exp2, $Tenv)
	
[check-mul1]
 	$Exp1 * $Exp2 := $Exp
      	===
      	check($Exp, $Tenv) = check-int($Exp, $Exp1, $Exp2, $Tenv)

[check-div1]
 	$Exp1 / $Exp2 := $Exp
      	===
      	check($Exp, $Tenv) = check-int($Exp, $Exp1, $Exp2, $Tenv)

%% --- Union-like operators

[compat-un1] 
	compat-un($Exp, set[$Etype], set[$Etype], $Tenv) = <set[$Etype], $Tenv>

[compat-un2] 
	compat-un($Exp, set[$Etype], empty-set-type, $Tenv) = <set[$Etype], $Tenv>

[compat-un3] 
	compat-un($Exp, empty-set-type, set[$Etype], $Tenv) = <set[$Etype], $Tenv>

[compat-un4] 
	compat-un($Exp, empty-set-type, empty-set-type, $Tenv) = <empty-set-type, $Tenv>

[default-compat-un]
	compat-un($Exp, $Etype1, $Etype2, $Tenv) = 
	<undefined-type, $Tenv + Incompatible argument types [$Etype1, $Etype2] in $Exp>  

[check-un1]
	<$Etype1, $Tenv'> := check($Exp1, $Tenv), 
      	<$Etype2, $Tenv''> := check($Exp2, $Tenv'),
	<$Etype, $Tenv'''> := compat-un($Exp, norm($Etype1,$Tenv), norm($Etype2,$Tenv), $Tenv'')
	===
	check-un($Exp, $Exp1, $Exp2, $Tenv) = <$Etype, $Tenv'''>
	
[check-union]
	$Exp1 union $Exp2 := $Exp
	===
	check($Exp, $Tenv) = check-un($Exp, $Exp1, $Exp2, $Tenv)

[check-inter]
	$Exp1 inter $Exp2 := $Exp
	===
	check($Exp, $Tenv) = check-un($Exp, $Exp1, $Exp2, $Tenv)

[check-diff]
	$Exp1 \ $Exp2 := $Exp
	===
	check($Exp, $Tenv) = check-un($Exp, $Exp1, $Exp2, $Tenv)

%% --- Composition

[compat-comp1] 
	compat-comp($Exp, set[<$Etype1,$Etype2>], set[<$Etype2,$Etype3>], $Tenv) = <rel[$Etype1,$Etype3], $Tenv>
[compat-comp2] 
	compat-comp($Exp, set[<$Etype1,$Etype2>], empty-set-type, $Tenv) = <empty-set-type, $Tenv>
[compat-comp3] 
	compat-comp($Exp, empty-set-type, set[<$Etype2,$Etype3>], $Tenv) = <empty-set-type, $Tenv>
[compat-comp4] 
	compat-comp($Exp, empty-set-type, empty-set-type, $Tenv) = <empty-set-type, $Tenv>

[default-compat-comp]
	compat-comp($Exp, $Etype1, $Etype2, $Tenv) = 
	<undefined-type, $Tenv + Incompatible argument types [$Etype1, $Etype2] in $Exp>  

[c03] $Exp1 o $Exp2 := $Exp,
      <$Etype1, $Tenv'> := check($Exp1, $Tenv), 
      <$Etype2, $Tenv''> := check($Exp2, $Tenv'),
      <$Etype3, $Tenv'''> := compat-comp($Exp, norm($Etype1,$Tenv), norm($Etype2,$Tenv), $Tenv'')
      ===
      check($Exp, $Tenv) = <$Etype3, $Tenv'''>

%% -- Product

[compat-prod1] 
	compat-prod($Exp, set[$Etype1], set[$Etype2], $Tenv) = <rel[$Etype1,$Etype2], $Tenv>
[compat-prod2] 
	compat-prod($Exp, set[$Etype1], empty-set-type, $Tenv) = <empty-set-type, $Tenv>
[compat-prod3] 
	compat-prod($Exp, empty-set-type, set[$Etype2], $Tenv) = <empty-set-type, $Tenv>
[compat-prod4] 
	compat-prod($Exp, empty-set-type, empty-set-type, $Tenv) = <empty-set-type, $Tenv>

[default-compat-prod]
	compat-prod($Exp, $Etype1, $Etype2, $Tenv) = 
	<undefined-type, $Tenv + Incompatible argument types [$Etype1, $Etype2] in $Exp>  

[check-product] 
	$Exp1 x $Exp2 := $Exp,
      	<$Etype1, $Tenv'> := check($Exp1, $Tenv), 
      	<$Etype2, $Tenv''> := check($Exp2, $Tenv'),
      	<$Etype3, $Tenv'''> := compat-prod($Exp, norm($Etype1,$Tenv), norm($Etype2,$Tenv), $Tenv'')
      ===
      	check($Exp, $Tenv) = <$Etype3, $Tenv'''>

%% ---- Image

[clm1]	compat-lim($Exp, set[<$Etype1,$Etype2>], $Etype2, $Tenv) = <set[$Etype1], $Tenv>
[clm2]  compat-lim($Exp, set[<$Etype1,$Etype2>], set[$Etype2], $Tenv) = <set[$Etype1], $Tenv>
[clm3]  compat-lim($Exp, set[<$Etype1,$Etype2>], empty-set-type, $Tenv) = <set[$Etype1], $Tenv>
[clm4]  compat-lim($Exp, empty-set-type, $Etype, $Tenv) = <empty-set-type, $Tenv>

[default-clm]
	compat-lim($Exp, $Etype1, $Etype2, $Tenv) = 
	<undefined-type, $Tenv + Incompatible argument types [$Etype1, $Etype2] in $Exp>  

[crm1]	compat-rim($Exp, set[<$Etype1,$Etype2>], $Etype1, $Tenv) = <set[$Etype2], $Tenv>
[crm2]	compat-rim($Exp, set[<$Etype1,$Etype2>], set[$Etype1], $Tenv) = <set[$Etype2], $Tenv>
[crm2]	compat-rim($Exp, set[<$Etype1,$Etype2>], empty-set-type, $Tenv) = <set[$Etype2], $Tenv>
[crm2]	compat-rim($Exp, empty-set-type, $Etype, $Tenv) = <empty-set-type, $Tenv>

[default-compat-rim]
	compat-rim($Exp, $Etype1, $Etype2, $Tenv) = 
	<undefined-type, $Tenv + Incompatible argument types [$Etype1, $Etype2] in $Exp>  

[check-im1] 	
	$Exp0 [ -, $Exp1] := $Exp,
      	<$Etype0, $Tenv'> := check($Exp0, $Tenv), 
      	<$Etype1, $Tenv''> := check($Exp1, $Tenv'),
      	<$Etype2, $Tenv'''> := compat-lim($Exp, norm($Etype0, $Tenv), norm($Etype1, $Tenv), $Tenv'')
      	===
      	check($Exp, $Tenv) = <$Etype2, $Tenv'''>

[check-im2]
	$Exp0 [ $Exp1, - ] := $Exp,
      	<$Etype0, $Tenv'> := check($Exp0, $Tenv), 
      	<$Etype1, $Tenv''> := check($Exp1, $Tenv'),
      	<$Etype2, $Tenv'''> := compat-rim($Exp, norm($Etype0,$Tenv), norm($Etype1,$Tenv), $Tenv'')
      	===
	check($Exp, $Tenv) = <$Etype2, $Tenv'''>

[check-im3]
	$Exp0 [ $Exp1 ] := $Exp,
      	<$Etype0, $Tenv'> := check($Exp0, $Tenv), 
      	<$Etype1, $Tenv''> := check($Exp1, $Tenv'),
      	<$Etype2, $Tenv'''> := compat-rim($Exp, norm($Etype0,$Tenv), norm($Etype1,$Tenv), $Tenv'')
      	===
	check($Exp, $Tenv) = <$Etype2, $Tenv'''>

%% ---- field selection

[check-sel]
	$Exp1 . $Var := $Exp,
	<$Etype1, $Tenv'> := check($Exp1, $Tenv),
	<$Etype2, $Tenv''> := get-field-type($Etype1, $Var, $Tenv')
	===
	check($Exp, $Tenv) = <$Etype2, $Tenv''>

%% --- Transitive closure

[compat-trans1]
	compat-trans($Exp, set[<$Etype,$Etype>], $Tenv) = <rel[$Etype, $Etype], $Tenv>
[compat-trans2]
	compat-trans($Exp, empty-set-type, $Tenv) = <empty-set-type, $Tenv>

[default-compat-trans]
	compat-trans($Exp, $Etype, $Tenv) = 
	<undefined-type, $Tenv + Incompatible argument types $Etype in $Exp>  
 
[check-closure] 
	$Exp1 + := $Exp,
      	<$Etype, $Tenv'> := check($Exp1, $Tenv),
      	<$Etype1, $Tenv''> := compat-trans($Exp, norm($Etype,$Tenv), $Tenv')
      	===
      	check($Exp, $Tenv) = <$Etype1, $Tenv''>

[check-rclosure]
	$Exp1 * := $Exp,
      	<$Etype, $Tenv'> := check($Exp1, $Tenv),
      	<$Etype1, $Tenv''> := compat-trans($Exp, norm($Etype,$Tenv), $Tenv')
      	===
      	check($Exp, $Tenv) = <$Etype1, $Tenv''>

%% --- size

[compat-size1]
	compat-size($Exp, set[$Etype], $Tenv) = <int, $Tenv>
[compat-size1]
	compat-size($Exp, empty-set-type, $Tenv) = <int, $Tenv>
[default-compat-size]
	compat-size($Exp, $Etype, $Tenv) = 
	<undefined-type, $Tenv + Incompatible argument types $Etype in $Exp>  
 
[check-size]
	#  $Exp1 := $Exp,
      	<$Etype, $Tenv'> := check($Exp1, $Tenv),
      	<$Etype1, $Tenv''> := compat-size($Exp, norm($Etype,$Tenv), $Tenv')
      	===
      	check($Exp, $Tenv) = <$Etype1, $Tenv''>

%% --- end of checking operators

%% --- Check comprehensions
	
%% ---- Check generators and add introduced variables to type environment

[ag1] 	$Tenv' := require-type($Exp, set[$Etype], $Tenv),
      	$Tenv'' := store($Tenv', $Var, $Etype)
      	===
      	add-generators($Etype $Var : $Exp, $Gen*, $Tenv) = add-generators($Gen*, $Tenv'')

[ag2] 	<$Etype, $Tenv'> := check($Exp, $Tenv), 
      	$Tenv'' := match-targets($Target+, element-type($Etype, $Tenv), $Tenv')	
      	===
      	add-generators(<$Target+> : $Exp, $Gen*, $Tenv) = add-generators($Gen*, $Tenv'')

[ag3] 	$Tenv' := require-type($Exp, bool, $Tenv)
      	===
      	add-generators($Exp, $Gen*, $Tenv) = add-generators($Gen*, $Tenv')


[ag4] 	$Tenv' := require-type($Exp, $Etype, $Tenv),
      	$Tenv'' := store($Tenv', $Var, $Etype)
      	===
      	add-generators($Etype $Var <- $Exp, $Gen*, $Tenv) = add-generators($Gen*, $Tenv'')

[ag5] 	<$Etype, $Tenv'> := check($Exp, $Tenv), 
	$Tenv'' := match-targets($Target+, $Etype, $Tenv')
      	===
      	add-generators(<$Target+> <- $Exp, $Gen*, $Tenv) = add-generators($Gen*, $Tenv'')

[ag6] 	add-generators( , $Tenv) = $Tenv

[default-af]
      	add-generators($Gen, $Gen*, $Tenv) = $Tenv + $Gen cannot be typed

%% ---- Match a list of targets

[mt1]	equal-type($Etype1, first($Etype2, $Tenv), $Tenv) == true,
	$Tenv' := store($Tenv, $Var, $Etype1)
	===
	match-targets($Etype1 $Var, $Target*, $Etype2, $Tenv) =
	match-targets($Target*, second($Etype2,$Tenv), $Tenv')

[mt2]	equal-type($Etype1, first($Etype2, $Tenv), $Tenv) == false,
	first($Etype2, $Tenv) != undefined-type	
	===
	match-targets($Etype1 $Var, $Target*, $Etype2, $Tenv) =
	match-targets($Target*, second($Etype2, $Tenv), $Tenv + $Var should have type
	first($Etype2, $Tenv))

[mt3]	equal-type($Etype1, first($Etype2, $Tenv), $Tenv) == false,
	first($Etype2, $Tenv) == undefined-type	
	===
	match-targets($Etype1 $Var, $Target*, $Etype2, $Tenv) =
	match-targets($Target*, second($Etype2, $Tenv), $Tenv + $Var exceeds number of targets of generator)

[mt4]	$Tenv' := require-type($Exp, first($Etype, $Tenv), $Tenv)
	===
	match-targets($Exp, $Target*, $Etype, $Tenv) =
	match-targets($Target*, second($Etype, $Tenv), $Tenv')

[mt5]	match-targets( , $Etype, $Tenv) = $Tenv

%% ---  Delete a list of targets from the type environment

[dt1]	$Tenv' := delete($Tenv, $Var)
	===
	delete-targets($Etype $Var, $Target*, $Tenv) = delete-targets($Target*, $Tenv')

[dt2]	delete-targets($Exp, $Target*, $Tenv) = delete-targets($Target*, $Tenv)

[dt3]	delete-targets( , $Tenv) = $Tenv

%% Delete the variables introduced in from clauses from the type environment

[dg1] 	$Tenv' := delete-targets($Target, $Tenv)
      	===
      	del-generators($Target : $Exp, $Gen*, $Tenv) = del-generators($Gen*, $Tenv')

[dg2] 	$Tenv' := delete-targets($Target1, $Target+, $Tenv)
      	===
      	del-generators(<$Target1, $Target+> : $Exp, $Gen*, $Tenv) = del-generators($Gen*, $Tenv')

[dg3]	del-generators($Exp, $Gen*, $Tenv) = del-generators($Gen*, $Tenv)

[df4]	$Tenv' := delete-targets($Target, $Tenv)
	===
	del-generators($Target <- $Exp, $Gen*, $Tenv) = del-generators($Gen*, $Tenv')

[df5]	$Tenv' := delete-targets($Target1, $Target+, $Tenv)
	===
	del-generators(<$Target1, $Target+> <- $Exp, $Gen*, $Tenv) = del-generators($Gen*, $Tenv')

[df6] 	del-generators( , $Tenv) = $Tenv

%% ---- Check comprehensions

[check-comprehension1] 
      	$Tenv' := add-generators($Gen+, $Tenv),
      	<$Etype, $Tenv''> := check({$Exp+}, $Tenv'),
      	$Tenv''' := del-generators($Gen+, $Tenv'')
      	===
      	check({ $Exp+ | $Gen+ }, $Tenv) = <$Etype, $Tenv'''>

%% ---- Special case: when combined with RscriptCalculator, all comprehensions
%% ---- will be simplified to the form below.
%% ---- The typechecker could be simplified by also using this approach

%%[check-comprehension2]
%%      	$Tenv' := add-generators($Gen, $Tenv),
%%      	<$Etype, $Tenv''> := check({$Exp}, $Tenv'),
%%      	$Tenv''' := del-generators($Gen, $Tenv'')
%%	===
%%	check({ $Gen :: $Exp }, $Tenv)  = <$Etype, $Tenv'''>

%% --- Check Exists

[check-exists1]
	$Tenv' := add-generators($SimpleGen, $Tenv),
	$Tenv'' := require-type($Test, bool, $Tenv'),
	$Tenv''' := del-generators($SimpleGen, $Tenv'')
	===
	check(exists($SimpleGen | $Test), $Tenv) = <bool, $Tenv'''>

%% --- Check Forall

[check-forall1]
	$Tenv' := add-generators($SimpleGen, $Tenv),
	$Tenv'' := require-type($Test, bool, $Tenv'),
	$Tenv''' := del-generators($SimpleGen, $Tenv'')
	===
	check(forall($SimpleGen | $Test), $Tenv) = <bool, $Tenv'''>

%% ---- Function applications

%% ---- collect-actuals

[ca1]	<$Etype, $Tenv'> := check($Exp, $Tenv),
	< [$Etype*], $Tenv''> := collect-actuals($Exp*, $Tenv')
	===
	collect-actuals($Exp, $Exp*, $Tenv) = <[$Etype, $Etype*], $Tenv''>

[ca2]	collect-actuals( , $Tenv) = <[], $Tenv>

%% ---- Check function application

[check-appl] 
	<$Etype, $Tenv'> := collect-actuals($Exp*, $Tenv)
	===
	check($Var ( $Exp* ), $Tenv) = find-result-type($Var, $Etype, $Tenv')

equations
%% ---- add-formals

[af1]	$Tenv' := check-not-defined($Var, $Tenv),
	$Tenv'' := store($Tenv', $Var, $Etype),
	$Tenv''' := add-formals(<$Formal+>, $Tenv'')
	===
	add-formals(<$Etype $Var, $Formal+>, $Tenv) = $Tenv'''

[af2] 	$Tenv' := check-not-defined($Var, $Tenv),
	$Tenv'' := store($Tenv', $Var, $Etype)
	===
	add-formals(<$Etype $Var>, $Tenv) = $Tenv''

equations
%% ---- del-formals

[df1]	$Tenv' := delete($Tenv, $Var),
	$Tenv'' := del-formals(<$Formal+>, $Tenv')
	===
	del-formals(<$Etype $Var, $Formal+>, $Tenv) = $Tenv''

[df2]	$Tenv' := delete($Tenv, $Var)
	===
	del-formals(<$Etype $Var>, $Tenv) = $Tenv'

equations
%% Extract the types from a list of formal parameters

[et1]	[$Etype*'] := extract-types(<$Formal+>)
	===
	extract-types(<$Etype $Var, $Formal+>) = [$Etype, $Etype*']

[et1]	extract-types(<$Etype $Var>) = [$Etype]

[et2] extract-types([]) = []

equations
%% ---- Check variable declarations

[check-vardef1]
	check-stat($Yield $Etype $Var, $Tenv) = store($Tenv, $Var, $Etype)

[check-vardef2] 
	check-stat($Yield $Etype $Var = $Exp, $Tenv) =  check-stat($Etype $Var() =
	$Exp, $Tenv)

[check-vardef3]
	$Tenv1 := require-type($Var, $Etype, $Tenv),	
	$Tenv2 := require-type($Exp, $Etype, $Tenv1)
	===
	check-stat($Yield $Etype $Var += $Exp, $Tenv) =
	if is-rel-type($Etype) | is-set-type($Etype) then $Tenv2 
        else $Tenv2 + $Etype should be set or rel type
        fi

%% ---- Check function declarations

[check-fundef] 
	$Tenv1 := check-not-defined($Var, $Tenv),
	$Tenv2 := add-formals(<$Formal+>, $Tenv1),
	$Tenv3 := require-type($Exp, $Etype, $Tenv2),      
	$Tenv4 := del-formals(<$Formal+>, $Tenv3), 
	$Tenv5 := store($Tenv4, $Var, fun extract-types(<$Formal+>) to $Etype) 
	===
	check-stat($Etype $Var ($Formal+) = $Exp, $Tenv) = $Tenv5

[check-fundef-2]
	$Tenv1 := check-not-defined($Var, $Tenv),
	$Tenv2 := require-type($Exp, $Etype, $Tenv1),
	$Tenv3 := store($Tenv2, $Var, fun [] to $Etype) 
	===
	check-stat($Etype $Var () = $Exp, $Tenv) = $Tenv3

%% ---- Check type declarations

[check-typedef1]
	$Tenv' := check-not-defined($Var, $Tenv),
	$Tenv'' :=  check-duplicate-fields($Etype+, 1, $Tenv')
	===
	check-stat(type $Var = < $Etype+ >, $Tenv) = store($Tenv'', $Var, <$Etype+ >)

[check-typedef1]
	$Tenv' := check-not-defined($Var, $Tenv)
	===
	check-stat(type $Var = $Etype, $Tenv) = store($Tenv', $Var, $Etype)

%% ---- Check assert statement

[check-assert]
	check-stat(assert $StrCon : $Exp, $Tenv) = require-type($Exp, bool, $Tenv)

%% ---- Check yield statement

[check-yield]
	<$Etype, $Tenv'> := check($Var, $Tenv)
	===
	check-stat(yield $Var, $Tenv) =  $Tenv'

%% ---- Check set of equations

[CEQ1]	check-stat(equations (limit $NatCon) initial $InitVar+ satisfy  $Eq+ end equations, $Tenv) = 
	check-eqs($InitVar+, $Eq+, $Tenv)

[CEQ2]	check-stat(equations initial $InitVar+ satisfy  $Eq+ end equations, $Tenv) = 
	check-eqs($InitVar+, $Eq+, $Tenv)

[CEQS1]	$Tenv1 := check-stat($Etype $Var = $Exp, $Tenv)
	===	
	check-eqs($Etype $Var init $Exp $InitVar*, $Eq+, $Tenv) =
	check-eqs($InitVar*, $Eq+, $Tenv1)

[CEQS2]	<$Etype, $Tenv1> := check($Var, $Tenv),
        $Tenv2 := require-type($Exp, $Etype, $Tenv1)
        ===
	check-eqs( , $Var = $Exp $Eq*, $Tenv) = check-eqs( , $Eq*, $Tenv2)

[CEQS2]	check-eqs( , , $Tenv) = $Tenv

%% ---- Default case for check-stat

[default-check-stat]
	check-stat($Stat, $Tenv) = $Tenv +  $Stat cannot be typed



%% ---- Find result type of a function, given list of argument types

[frt1]	lookup($Tenv, $Var) == not-in-table
	===
	find-result-type($Var, [$Etype*], $Tenv) = <undefined-type, $Tenv + Undeclared $Var>

[frt2]	fun [$Etype*2] to $Etype := lookup($Tenv, $Var),
	<true, $Table> := match-types([$Etype*2],  [$Etype*1], new-table, $Tenv)
	===
	find-result-type($Var, [$Etype*1], $Tenv) = substitute($Etype, $Table, $Tenv)

[default-frt]
	find-result-type($Var, [$Etype*1], $Tenv) = <undefined-type, $Tenv + No definition for $Var with argument [$Etype*1]>

%% ---- match types

[mt1]	equal-type($Etype, $Etype', $Tenv) == true
	===
	match-types($Etype, $Etype', $Table, $Tenv) = <true, $Table>

[mt2]	$Etype' := lookup($Tenv, $Var)
	===
	match-types($Var, $Etype, $Table, $Tenv) = match-types($Etype', $Etype, $Table, $Tenv)

[mt3]	$Etype' := lookup($Tenv, $Var)
	===
	match-types($Etype, $Var, $Table, $Tenv) = match-types($Etype, $Etype', $Table, $Tenv)

[mt4]	lookup($Table, $Var) == not-in-table
	===
	match-types(& $Var, $Etype, $Table, $Tenv) = <true, store($Table, $Var, $Etype)>

[mt5]	equal-type(lookup($Table, $Var), $Etype, $Tenv) == true
	===
	match-types(& $Var, $Etype, $Table, $Tenv) = <true, $Table>

[mt6]	<true, $Table'> := match-types($Etype1, $Etype2, $Table, $Tenv)
	===
	match-types(set[$Etype1], set[$Etype2], $Table, $Tenv) =  <true, $Table'>

[mt6a]	match-types(set[$Etype1], empty-set-type, $Table, $Tenv) =  <true, $Table>

[mt7]	match-types(rel[$Etype+], $Etype, $Table, $Tenv) = match-types(set[<$Etype+>], $Etype, $Table, $Tenv)

[mt8]	match-types($Etype, rel[$Etype+], $Table, $Tenv) = match-types($Etype, set[<$Etype+>], $Table, $Tenv)

[mt9]	<true, $Table'> := match-types(<$Etype+>, <$Etype+'>, $Table, $Tenv)
	===
	match-types(set[<$Etype+>], set[<$Etype+'>], $Table, $Tenv) =  <true, $Table'>

[mt9a]	match-types(set[<$Etype+>], empty-set-type, $Table, $Tenv) =  <true, $Table>

%%[mt10]	<true, $Table'> := match-types($Etype1, $Etype1', $Table, $Tenv),
%%	<true, $Table''> := match-types(<$Etype2, $Etype+>, <$Etype2', $Etype+'>, $Table', $Tenv)
%%	===
%%	match-types(<$Etype1, $Etype2, $Etype+>, <$Etype1', $Etype2', $Etype+'>, $Table, $Tenv) = <true, $Table''>

%%[mt11]	<true, $Table'> := match-types($Etype1, $Etype1', $Table, $Tenv),
%%	<true, $Table''> := match-types($Etype2, $Etype2', $Table', $Tenv)
%%	===
%%	match-types(<$Etype1, $Etype2>, <$Etype1', $Etype2'>, $Table, $Tenv) =  <true, $Table''>

[mt12]	<true, $Table'> := match-types(<$Etype>, <$Etype'>, $Table, $Tenv),
	<true, $Table''> := match-types(<$Etype+>, <$Etype+'>, $Table', $Tenv)
	===
	match-types(<$Etype, $Etype+>, <$Etype', $Etype+'>, $Table, $Tenv) = <true, $Table''>

[mt12]	match-types(<$Etype>, <$Etype'>, $Table, $Tenv) = match-types($Etype, $Etype', $Table, $Tenv)

[mt12]	match-types(<$Etype $Var>, <$Etype'>, $Table, $Tenv) = match-types($Etype, $Etype', $Table, $Tenv)

[mt12]	match-types(<$Etype $Var>, <$Etype' $Var'>, $Table, $Tenv) = match-types($Etype, $Etype', $Table, $Tenv)

[mt12]	match-types(<$Etype>, <$Etype' $Var'>, $Table, $Tenv) = match-types($Etype, $Etype', $Table, $Tenv)

[mt13]	match-types(<$Etype $Var>, $Etype', $Table, $Tenv) = match-types($Etype, $Etype', $Table, $Tenv)

[mt13]	match-types($Etype, <$Etype' $Var>, $Table, $Tenv) = match-types($Etype, $Etype', $Table, $Tenv)

%%[mt12]	match-types(<$Etype+>, $Etype, $Table, $Tenv) = 
%%	match-types(get-tuple-type(<$Etype+>), $Etype, $Table, $Tenv)

%%[mt13]	match-types($Etype, <$Etype+>, $Table, $Tenv) = 
%%	match-types($Etype, get-tuple-type(<$Etype+>), $Table, $Tenv)

[mt12]	match-types(<$Formal+>, $Etype, $Table, $Tenv) = 
	match-types(get-tuple-type(<$Formal+>), $Etype, $Table, $Tenv)

[mt13]	match-types($Etype, <$Formal+>, $Table, $Tenv) = 
	match-types($Etype, get-tuple-type(<$Formal+>), $Table, $Tenv)

[mt14]	<true, $Table'> := match-types($Etype1, $Etype1', $Table, $Tenv),
	<true, $Table''> := match-types([$Etype*], [$Etype*'], $Table', $Tenv)
	===
	match-types([$Etype1, $Etype*], [$Etype1', $Etype*'], $Table, $Tenv) = <true, $Table''>

[mt15]  match-types([], [], $Table, $Tenv) = <true, $Table>

[default-mt]
	match-types($Etype1, $Etype2, $Table, $Tenv) = <false, $Table>

tests

[mt-0]	match-types(&T1, int, new-table, initial-type-environment()) ==
		<true, [<T1, int>]>

[mt-1]	match-types(<&T1, &T2>, <int, str>, new-table, initial-type-environment()) ==
		<true, [<T2, str>, <T1, int>]>

[mt-2]	match-types(<&T1, &T2>, <int theInt, str theStr>, new-table, initial-type-environment()) ==
		<true, [<T2, str>, <T1, int>]>

[mt-3]	match-types(<&T1, &T2>, pair, new-table, <[<pair,<int theInt, str theStr >>],errors[]>) == <true, [<T2, str>, <T1, int>]>


equations
%% ---- cover-empty

[ce1]	cover-empty(rel[$Etype*, undefined-type, $Etype*']) = empty-set-type
[ce2]	cover-empty(set[undefined-type]) = empty-set-type
[default-ce]
	cover-empty($Etype) = $Etype

%% ---- Substitute type
%% ---- We assume here that type variables &V that are undefined are the
%% ---- result of an occurrence of empty-set-type.

[sb1]	$Etype := lookup($Table, $Var)
	===
	substitute(& $Var, $Table, $Tenv) = 
	if equal-type($Etype, not-in-table, $Tenv) then <undefined-type, $Tenv > %%+ Undeclared $Var>
						   else <$Etype, $Tenv> fi

[sb2]   <$Etype', $Tenv'> := substitute($Etype, $Table, $Tenv)
	===
	substitute(set[$Etype], $Table, $Tenv) = <cover-empty(set[$Etype']), $Tenv>

[sb3]	<<$Etype+'>, $Tenv'> := substitute(<$Etype+>, $Table, $Tenv)
	===
	substitute(rel[$Etype+], $Table, $Tenv) = <cover-empty(rel[$Etype+']), $Tenv'>

[sb4]	<$Etype1', $Tenv'> := substitute($Etype1, $Table, $Tenv),
	<$Etype2', $Tenv''> := substitute($Etype2, $Table, $Tenv)
	===
	substitute(<$Etype1,$Etype2>, $Table, $Tenv) = <<$Etype1', $Etype2'>, $Tenv''>

[sb5]	<$Etype1', $Tenv'> := substitute($Etype1, $Table, $Tenv),
	<<$Etype+'>, $Tenv''> := substitute(<$Etype2, $Etype+>, $Table, $Tenv')
	===
	substitute(<$Etype1, $Etype2, $Etype+>, $Table, $Tenv) = <<$Etype1', $Etype+'>, $Tenv''>

[default-sb]
	substitute($Etype, $Table, $Tenv) = <$Etype, $Tenv>

%% ---- Where expressions

[WH1]	<$Table, $Errors> := $Tenv,
	$Tenv' := check-rscript($Stat+, $Tenv),
	<$Etype, <$Table', $Errors'>> := check($Exp, $Tenv')
	===
	check($Exp where $Stat+ endwhere, $Tenv) = <$Etype, <$Table, $Errors'>>


%% ---- Check script

[crs]	$Stat* := $Rscript,
	<$Table, $Errors> := check-rscript($Stat*,  initial-type-environment())
	===
	check-rscript($Rscript) = summary("RscriptChecker", get-filename(get-location($Rscript)), [convert-errors($Errors)])


[crs2]	check-rscript($Stat $Stat*, $Tenv) = check-rscript($Stat*, check-stat($Stat, $Tenv))
[crs3]	check-rscript( , $Tenv) = $Tenv


