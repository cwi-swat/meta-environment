module languages/rscript/run/REnvironment

imports basic/RStores
        languages/rscript/check/Rscript-TypeStore
imports containers/Table[IdCon Lambda] [Table[[IdCon,Lambda]] => FunctionStore]
        containers/Set[IdCon] [Set[[IdCon]] => YieldStore]
imports containers/Sets-and-Relations
        languages/rscript/syntax/Rscript

exports
sorts REnvironment Lambda Formals

context-free syntax
  <TypeStore,FunctionStore,YieldStore,RStore> -> REnvironment  

aliases
  {Formal ","}+   -> Formals  

context-free syntax
  <Formals,REXP> -> Lambda   

context-free syntax
  new-renvironment()                                    -> REnvironment {complete} 
  define-type(IdCon, REXPTYPE, REnvironment)            -> REnvironment {complete} 
  bind-function(IdCon, Formals, REXP, REnvironment)     -> REnvironment {complete} 
  assign-variable(IdCon, REXPTYPE, RElem, REnvironment) -> REnvironment {complete} 
  assign-variable(IdCon, RElem, REnvironment)           -> REnvironment {complete} 
  union-with-variable(IdCon, RElem, REnvironment)       -> REnvironment {complete} 
  yield(IdCon, REnvironment)                            -> REnvironment {complete} 
  formals(IdCon, REnvironment)                          -> Formals      {complete} 
  body(IdCon, REnvironment)                             -> REXP         {complete} 
  type(IdCon, REnvironment)                             -> REXPTYPE     {complete} 
  value(IdCon, REnvironment)                            -> RElem        {complete} 
  yielded(REnvironment)                                 -> {IdCon ","}* {complete} 
  filter(REnvironment, {IdCon ","}*)                    -> REnvironment {complete} 
  rstore(REnvironment)                                  -> RStore       {complete} 

context-free syntax
  "*undefined*" -> RElem  

hiddens
context-free start-symbols
  RType REnvironment

context-free syntax
  rexp-type-to-rtype(REXPTYPE, REnvironment) -> RType         {complete} 
  type-store(REnvironment)                   -> TypeStore     {complete} 
  function-store(REnvironment)               -> FunctionStore {complete} 
  yield-store(REnvironment)                  -> YieldStore    {complete} 
  update(TypeStore, REnvironment)            -> REnvironment  {complete} 
  update(RStore, REnvironment)               -> REnvironment  {complete} 
  update(FunctionStore, REnvironment)        -> REnvironment  {complete} 
  update(YieldStore, REnvironment)           -> REnvironment  {complete} 
  delete(RStore, IdCon)                      -> RStore        {complete} 

variables
  "$IdCon" [0-9\']*         -> IdCon            
  "$IdCon*" [0-9\']*        -> {IdCon ","}*     
  "$IdCon+" [0-9\']*        -> {IdCon ","}+     
  "$RExp" [0-9\']*          -> REXP             
  "$REnv" [0-9\']*          -> REnvironment     
  "$Formals" [0-9\']*       -> Formals          
  "$Formal" [0-9\']*        -> Formal          
  "$Lambda" [0-9\']*        -> Lambda           
  "$RExpType" [0-9\']*      -> REXPTYPE         
  "$RExpType*" [0-9\']*     -> {REXPTYPE ","}*  
  "$RExpType+" [0-9\']*     -> {REXPTYPE ","}+  
  "$RType" [0-9\']*         -> RType            
  "$RType*" [0-9\']*        -> {RType ","}*     
  "$RType+" [0-9\']*        -> {RType ","}+     
  "$RElem" [0-9\']*         -> RElem            
  "$RElem*" [0-9\']*        -> {RElem ","}*     
  "$RElem+" [0-9\']*        -> {RElem ","}+     
  "$TypeStore" [0-9\']*     -> TypeStore        
  "$FunctionStore" [0-9\']* -> FunctionStore    
  "$YieldStore" [0-9\']*    -> YieldStore       
  "$RStore" [0-9\']*        -> RStore           
  "$RTuple" [0-9\']*        -> RTuple           
  "$RTuple*" [0-9\']*       -> {RTuple ","}*    
  "$RTuple+" [0-9\']*       -> {RTuple ","}+    
  "$NatCon" [0-9\']*        -> NatCon           
  "$BoolCon" [0-9\']*       -> BoolCon          
  "$StrCon" [0-9\']*        -> StrCon           
  "$Location" [0-9\']*      -> Location         
