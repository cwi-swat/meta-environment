equations

[er1]	equal-rval($Set1, $Set2) = equal($Set1, $Set2)
[er2]	equal-rval($Rel1, $Rel2) = equal($Rel1, $Rel2)
[er3]	equal-rval($Val, $Val)  = true
[default-er] 
	equal-rval($Val1, $Val2) = false

%% ---- Extract a list of variables from a declaration list

[erv1]	$Var+ := extract-rvars($Formal+)
	===================================================
	extract-rvars($Etype $Var, $Formal+) = $Var, $Var+

[erv2]	extract-rvars($Etype $Var) = $Var

%% ---- Eval a complete Rscript

[ERS1]	$REnv := eval-rstats($Stat*, new-renvironment()),
	$Var+ := yielded($REnv)
	===============================================================
	eval-rscript($Stat*) = filter($REnv, $Var+)

[ERS2]	$REnv := eval-rstats($Stat*, new-renvironment()),
	yielded($REnv) == 
	===============================================================
	eval-rscript($Stat*) = $REnv

%% ---- Eval a complete Rscript and return value of specific variable (as string)

[ERS1]	$REnv := eval-rstats($Stat*, yield-environment),
	$Var := str2rvar($StrCon),
	$RElem := value($Var, $REnv)
	===============================================================
	eval-rscript-and-yield($Stat*, $StrCon) = $RElem


%% ---- Eval a complete Rscript and return value of specific variable

[ERS2]	$REnv := eval-rstats($Stat*, yield-environment),
	$RElem := value($Var, $REnv)
	===============================================================
	eval-rscript-and-yield($Stat*, $Var) = $RElem

%% ---- Eval a complete Rscript with given Rstore

[ERS3]	$REnv' := eval-rstats($Stat*, $REnv),
	$Var*:= yielded($REnv')
	===============================================================
	eval-rscript-with-rstore($Stat*, $REnv) = filter($REnv', $Var*)

%% ---- Eval complete script with given Rstore and yield value of a variable (as string constant

[ERS4]	$Var := str2rvar($StrCon),
	$RElem :=  value($Var, eval-rstats($Stat*, $REnv))
	===================================================
	eval-rscript-with-rstore-and-yield($Stat*, $REnv, $StrCon) = $RElem

%% ---- Eval complete script with given Rstore and yield value of a variable

[ERS5]	$RElem :=  value($Var, eval-rstats($Stat*, $REnv))
	===================================================
	eval-rscript-with-rstore-and-yield($Stat*, $REnv, $Var) = $RElem

%% ---- Execute Rscript for given Rstore

[EX1]   $REnv[| $Stat* |] = eval-rstats($Stat*, $REnv)

%% ---- Execute Rscript for empty Rstore

[EX]	[| $Stat* |] = eval-rstats($Stat*, new-renvironment())

%% ---- Execute Rscript for empty Rstore and yield value of a var

[default-EX3]   
	[| $Stat* |] yield $Var = eval-rscript-and-yield($Stat*, $Var)

%% ---- Execute given Rexp

[EXX1]	[| $Exp |] = evalx($Exp, new-renvironment())

%% ---- Eval statements

[ES2]	eval-rstats($Stat $Stat*, $REnv) = eval-rstats($Stat*, eval-rstat($Stat, $REnv))
[ES3]	eval-rstats( , $REnv) = $REnv

%% ---- Eval one statement

[S0]	eval-rstat(yield $Etype $Var, $REnv)	= eval-rstat($Etype $Var, yield($Var, $REnv))
[S1]	eval-rstat(bool $Var, $REnv) 		= assign-variable($Var, bool, true, $REnv)
[S2]	eval-rstat(int $Var, $REnv)  		= assign-variable($Var, int, 0, $REnv)
[S3]	eval-rstat(str $Var, $REnv)  		= assign-variable($Var, str, "", $REnv)
[S4]	eval-rstat(loc $Var, $REnv)		= assign-variable($Var, loc, file(""), $REnv)
[S5]	eval-rstat(set[$Etype] $Var, $REnv)  	= assign-variable($Var, set[$Etype], {}, $REnv)
	
[S6]	eval-rstat(rel[$Etype1, $Etype2] $Var, $REnv) 
						= assign-variable($Var, rel[$Etype1, $Etype2], {}, $REnv)
[S7]	eval-rstat($Etype $Var, $REnv)	= $REnv

[S8a]   	eval-rstat(yield $Etype $Var = $Exp, $REnv) = eval-rstat($Etype $Var = $Exp, yield($Var, $REnv))

[S8a]	eval-rstat($Etype $Var = $Exp, $REnv) = assign-variable($Var, $Etype, evalx($Exp, $REnv), $REnv)

[S8a]   eval-rstat(yield $Etype $Var += $Exp, $REnv) = 
						      eval-rstat($Etype $Var += $Exp, yield($Var, $REnv))

[S8b]	eval-rstat(rel[$Etype+] $Var += $Exp, $REnv) = union-with-variable($Var, evalr($Exp, $REnv), $REnv)

[S8c]	eval-rstat(set[$Etype] $Var += $Exp, $REnv)  = union-with-variable($Var, evalb($Exp, $REnv), $REnv)

[S8d]	eval-rstat($Etype $Var() = $Exp, $REnv)   = assign-variable($Var, $Etype, evalx($Exp, $REnv), $REnv)

%% What is this?
%%[S9]	eval-rstat($Etype $Var init $Exp, $REnv) = assign-variable($Var, $Etype, evalx($Exp, $REnv), $REnv)

[S10]	$REnv' := bind-function($Var1, $Formal+, $Exp, $REnv)
	===
	eval-rstat($Etype1 $Var1($Formal+) = $Exp, $REnv) = $REnv' 

%%						= assign-variable($Var1, $Etype1,
%%						<extract-rvars($Etype+),
%%						$Exp>, $REnv)

[S11]  eval-rstat(type $Var = < $Formal+ >, $REnv) = define-type($Var, <$Formal+>, eval-fields($Formal+, $REnv, 1))
[default-S12]  eval-rstat(type $Var = $Etype, $REnv) = define-type($Var, $Etype, $REnv)

%% implementation of assert 

[default-assert]	
	eval-rstat(assert $StrCon : $Exp, $REnv) = $REnv

[S13]	eval-rstat(yield $Var, $REnv) = yield($Var, $REnv)

%% ----	eval-fields

[ef1]	$REnv' := assign-variable($Var, int, $NatCon, $REnv)
	======================================================
	eval-fields($Etype $Var, $Formal*, $REnv, $NatCon) =
		eval-fields($Formal*, $REnv', $NatCon + 1)

[ef2]	eval-fields( , $REnv, $Integer) = $REnv

%% ---- Variable initialization in solve statement

[eiv]	$REnv' :=  assign-variable($Var, $Etype, evalx($Exp, $REnv), $REnv)
	========================================================
	eval-initvar($Etype $Var init $Exp $InitVar*, $REnv) =
	eval-initvar($InitVar*, $REnv')

[eiv2]	eval-initvar( , $REnv) = $REnv
	
%% --- Solve Sets of equations

[SL1]	$REnv' := eval-initvar( $InitVar+, $REnv)
	=======================================================
	eval-rstat(equations initial $InitVar+ satisfy $Var1 = $Exp1 end equations, $REnv) = 
	solve1(1000, $Var1, $Exp1, $REnv')

[SL2]	$REnv' := eval-initvar( $InitVar+, $REnv)
	=======================================================	
	eval-rstat(equations (limit $NatCon) initial $InitVar+ satisfy $Var1 = $Exp1 end equations, $REnv) = 
		solve1($NatCon, $Var1, $Exp1, $REnv')

[SL3]	$REnv' := eval-initvar( $InitVar+, $REnv)
	=======================================================	
	eval-rstat(equations initial  $InitVar+ satisfy $Var1 = $Exp1 $Var2 = $Exp2 end equations, $REnv) = 
	solve2(1000, $Var1, $Exp1, $Var2, $Exp2, $REnv')

[SL4]	$REnv' := eval-initvar( $InitVar+, $REnv)
	=======================================================	
	eval-rstat(equations (limit $NatCon) initial $InitVar+ satisfy $Var1 = $Exp1 $Var2 = $Exp2 end equations, $REnv) = 
	solve2($NatCon, $Var1, $Exp1, $Var2, $Exp2, $REnv')

[SL1-1]	$Integer > 0 == true,
	$Val1 := value($Var1, $REnv),
	$Val1' := evalx($Exp1, $REnv),
	$REnv' := assign-variable($Var1, $Val1', $REnv),
	equal-rval($Val1, $Val1') == false
	===========================================
	solve1($Integer, $Var1, $Exp1, $REnv) =
	solve1($Integer - 1, $Var1, $Exp1, $REnv')

[default-SL1-2]	
	solve1($Integer, $Var1, $Exp1, $REnv) = $REnv

[SL2-1]	$Integer > 0 == true,
	$Val1 := value($Var1, $REnv),
	$Val1' := evalx($Exp1, $REnv),
	$Val2 := value($Var2, $REnv),
	$Val2' := evalx($Exp2, $REnv),
	$REnv' := assign-variable($Var1, $Val1', $REnv),
	$REnv'' := assign-variable($Var2, $Val2', $REnv'),
	equal-rval($Val1, $Val1') & equal-rval($Val2, $Val2') == false
	===========================================
	solve2($Integer, $Var1, $Exp1, $Var2, $Exp2, $REnv) =
	solve2($Integer - 1, $Var1, $Exp1, $Var2, $Exp2, $REnv'')

[default-SL2-2]	
	solve2($Integer, $Var1, $Exp1, $Var2, $Exp2, $REnv) = $REnv

%% ---- Eval one REXP

%% ---- Specialized versions of evalx that return value of required type

%% The Elem equations are to general.
[EVP]	$BoolCon := evalx($Exp, $REnv) ===> evalp($Exp, $REnv) = $BoolCon
[EVI]	$NatCon := evalx($Exp, $REnv) ===> evali($Exp, $REnv) = $NatCon
[EVI]	- $NatCon := evalx($Exp, $REnv) ===> evali($Exp, $REnv) = -$NatCon
%% ? Why not? [EVI]	$StrCon := evalx($Exp, $REnv) ===> evals($Exp, $REnv) = $StrCon

[default-EVE1] $RElem    := evalx($Exp, $REnv) ===> evale($Exp, $REnv) = $RElem

[EVE2]	$RElem := evalx($Exp, $REnv) ===> evalt($Exp, $REnv) = $RElem
%%[EVE2]	<$RElem1, $RElem2> := evalx($Exp, $REnv) ===> evalt($Exp, $REnv) =  <$RElem1, $RElem2>
%%[EVE2]	<$RElem1, $RElem2, $RElem+> := evalx($Exp, $REnv) ===> evalt($Exp, $REnv) =  <$RElem1, $RElem2, $RElem+>

[EVB1]	$Set 	:= evalx($Exp, $REnv) ===> evalb($Exp, $REnv) = $Set
[EVR1]	$Rel     := evalx($Exp, $REnv) ===> evalr($Exp, $REnv) = $Rel
[EVA1]	$Loc     := evalx($Exp, $REnv) ===> evall($Exp, $REnv) = $Loc

%% ---- The main evaluation function evalx

%% ---- Eval elements, tuples and variables

[evalx-bool]	evalx($BoolCon, $REnv) = $BoolCon

[evalx-int]	evalx($NatCon, $REnv) = $NatCon

[evalx-str]	evalx($StrCon, $REnv) = $StrCon

[evalx-loc]	evalx($Loc, $REnv) = $Loc

%% Subsumed by evalx(<Exp1, Exp2>) below
%%[tup1]	evalx(<$RElem1, $RElem2>, $REnv) = <$RElem1, $RElem2>

%% TODO: this must be a nested unique! (similar for tuples)
%%[set1]	evalx({$RElem*}, $REnv) = unique({$RElem*}) 

[VAR1]	$RElem := value($Var, $REnv)
	=================================================
	 evalx($Var, $REnv)  = $RElem

%% ---- Eval tuples

[ET1]	$RElem1 := evale($Exp1, $REnv),
	$RElem2 := evale($Exp2, $REnv)
	==================================================
	evalx(<$Exp1, $Exp2>, $REnv) = <$RElem1, $RElem2>

[ET2]	$RElem1 := evale($Exp1, $REnv),
	$RElem2 := evale($Exp2, $REnv),
	$RElem3 := evale($Exp3, $REnv)
	==================================================
	evalx(<$Exp1, $Exp2, $Exp3>, $REnv) = <$RElem1, $RElem2, $RElem3>

[ET2]	$RElem1 := evale($Exp1, $REnv),
	<$RElem2, $RElem3, $RElem+> := evalx(<$Exp2, $Exp3, $Exp+>, $REnv)
	==================================================
	evalx(<$Exp1, $Exp2, $Exp3, $Exp+>, $REnv) = <$RElem1, $RElem2, $RElem3, $RElem+>


%% Disabled (tvds)
%%[ET3]	$RElem := evale($Exp, $REnv)
%%	==================================================
%%	evalx(<$Exp>, $REnv) = <$RElem>

%% ---- Eval sets

[EB2]   	$RElem := evale($Exp, $REnv),
	$Set := evalb({$Exp+}, $REnv)				%%XXX
	===================================================
	evalx({$Exp, $Exp+}, $REnv) = union({$RElem}, $Set)

[EB2]   $RElem := evale($Exp, $REnv)					%%XXX
	===================================================
	evalx({$Exp}, $REnv) = insert($RElem, {})

[EB3]	evalx({}, $REnv) = {}

%% ---- Eval binary operators

%%[PAR]	evalx(( $Exp ), $REnv) = evalx($Exp, $REnv)

[AND1]	$BoolCon := evalp($Exp1, $REnv) & evalp($Exp2, $REnv)
	====================================================
	evalx($Exp1 and $Exp2, $REnv) = $BoolCon

[OR1]	$BoolCon := evalp($Exp1, $REnv) | evalp($Exp2, $REnv)
	====================================================
	evalx($Exp1 or $Exp2, $REnv) 	= $BoolCon

[IMP1]	$BoolCon := not(evalp($Exp1, $REnv) & not(evalp($Exp2, $REnv)))
	====================================================
	evalx($Exp1 implies $Exp2, $REnv) = $BoolCon

[NOT1]	$BoolCon := not(evalp($Exp, $REnv))
	====================================================
	evalx(not $Exp, $REnv) = $BoolCon

[IN1]	$BoolCon := element-of(evale($Exp1, $REnv), evalb($Exp2, $REnv))
	====================================================
	evalx($Exp1 in $Exp2, $REnv) = $BoolCon

[NI1]	$BoolCon := not(element-of(evale($Exp1, $REnv), evalb($Exp2, $REnv)))
	====================================================
	evalx($Exp1 notin $Exp2, $REnv) = $BoolCon

[EQ1]	$BoolCon := equal(evale($Exp1, $REnv), evale($Exp2, $REnv))
	====================================================
	evalx($Exp1 == $Exp2, $REnv) 	= $BoolCon

[NE1]	$BoolCon := not(equal(evale($Exp1, $REnv), evale($Exp2, $REnv)))
	====================================================
	evalx($Exp1 != $Exp2, $REnv) 	=  $BoolCon

%% ---- aux functions for evaluating comparison operators

[LE1]	eval-le({$RElem*1}, {$RElem*2})		= subset({$RElem*1}, {$RElem*2})
[LE2]	eval-le($NatCon1, $NatCon2) 		= $NatCon1 <= $NatCon2
[LE3]	eval-le($StrCon1, $StrCon2)		= $StrCon1 <= $StrCon2
[LE4]	eval-le($Loc1, $Loc2)			= $Loc1 <= $Loc2

[LT1]	eval-lt({$RElem*1}, {$RElem*2}) 		= strict-subset({$RElem*1},  {$RElem*2})
[LT2]	eval-lt($NatCon1, $NatCon2) 		= $NatCon1 < $NatCon2
[LT3]	eval-lt($StrCon1, $StrCon2)		= $StrCon1 < $StrCon2
[LT4]	eval-lt($Loc1, $Loc2)			= $Loc1 < $Loc2

[LE1]	$BoolCon := eval-le(evalx($Exp1, $REnv), evalx($Exp2, $REnv))
	====================================================
	evalx($Exp1 <= $Exp2, $REnv) 	= $BoolCon

[LT1]	$BoolCon := eval-lt(evalx($Exp1, $REnv), evalx($Exp2, $REnv))
	====================================================
	evalx($Exp1 < $Exp2, $REnv) = $BoolCon

[GE1]	$BoolCon := not(eval-lt(evalx($Exp1, $REnv), evalx($Exp2, $REnv)))	   %% Not ok for area's!
	====================================================
	evalx($Exp1 >= $Exp2, $REnv) 	= $BoolCon

[GT1]	$BoolCon := not(eval-le(evalx($Exp1, $REnv), evalx($Exp2, $REnv)))
	====================================================
	evalx($Exp1 > $Exp2, $REnv) = $BoolCon

[UMIN1]	evalx(- $Exp, $REnv) 			= 0 - evali($Exp, $REnv)

[ADD1]	evalx($Exp1 + $Exp2, $REnv) 		= evali($Exp1, $REnv) + evali($Exp2, $REnv)

[SUB1]	evalx($Exp1 - $Exp2, $REnv) 		= evali($Exp1, $REnv) - evali($Exp2, $REnv)

[MUL1]	evalx($Exp1 * $Exp2, $REnv) 		= evali($Exp1, $REnv) * evali($Exp2, $REnv)

[DIV1]	evalx($Exp1 / $Exp2, $REnv) 		= evali($Exp1, $REnv) / evali($Exp2, $REnv)

[UN1]	evalx($Exp1 union $Exp2, $REnv)	= union(evalb($Exp1, $REnv), evalb($Exp2, $REnv))

[IN1]	evalx($Exp1 inter $Exp2, $REnv)	= intersection(evalb($Exp1, $REnv), evalb($Exp2, $REnv))

[DF1]	evalx($Exp1 \ $Exp2, $REnv)		= difference(evalb($Exp1, $REnv), evalb($Exp2, $REnv))

[CM1]	evalx($Exp1 o $Exp2, $REnv)		= compose(evalb($Exp1, $REnv), evalb($Exp2, $REnv))

[CP1]	evalx($Exp1 x $Exp2, $REnv)		= product(evalb($Exp1, $REnv), evalb($Exp2, $REnv))

[FLd1]	evalx($Exp . $Var, $REnv)		= select-field(evalt($Exp, $REnv), evali($Var, $REnv))

%% ---- aux function for field selection

[sel0-2]	select-field(<$RElem1, $RElem2>, 1) = $RElem1

[sel1-2]	select-field(<$RElem1, $RElem2>, 2) = $RElem2

[sel2-2]	select-field(<$RElem1, $RElem2, $RElem3>, 1) = $RElem1

[sel2-2]	select-field(<$RElem1, $RElem2, $RElem3>, 2) = $RElem2

[sel2-3]	select-field(<$RElem1, $RElem2, $RElem3>, 3) = $RElem3

[sel2]	select-field(<$RElem1, $RElem2, $RElem3, $RElem+>, 1) = $RElem1

[sel2]	select-field(<$RElem1, $RElem2, $RElem3, $RElem+>, 2) = $RElem2

[sel2]	select-field(<$RElem1, $RElem2, $RElem3, $RElem+>, 3) = $RElem3
	

[sel2]	$Integer > 3 == true
	===================================================
	select-field(<$RElem1, $RElem2, $RElem3, $RElem+>, $Integer) =
	select-field(<$RElem2, $RElem3, $RElem+>, $Integer - 1)

[default-sel3]	
	select-field($RElem, $Integer) = $RElem

%% ---- aux functions for evaluating image operator  [ ]

[elim2]	eval-lim($Rel, {$RElem*})			= left-image($Rel, {$RElem*})
[default-elim1]	eval-lim($Rel, $RElem)		= left-image($Rel, {$RElem})

[erim2]	eval-rim($Rel, {$RElem*})			= image($Rel, {$RElem*})
[default-erim1]	eval-rim($Rel, $RElem)		= image($Rel, {$RElem})


[IM1]	evalx($Exp0 [ -, $Exp1], $REnv)	= eval-lim(evalx($Exp0, $REnv), evalx($Exp1, $REnv))

[IM2]	evalx($Exp0 [ $Exp1, - ], $REnv)	= eval-rim(evalx($Exp0, $REnv), evalx($Exp1, $REnv))

[IM3]	evalx($Exp0 [ $Exp1 ], $REnv)		= eval-rim(evalx($Exp0, $REnv), evalx($Exp1, $REnv))

%% ---- Closures

[TC1]	evalx($Exp +, $REnv)			= transitive-closure(evalb($Exp, $REnv))

[RTC1]	evalx($Exp *, $REnv)			= transitive-reflexive-closure(evalb($Exp, $REnv))

%% ---- Size

[SZ1]	evalx(# $Exp, $REnv)			= size(evalb($Exp, $REnv))

%% ---- Eval comprehensions

%% ---- Simplify multiple generators

[sg-1]	simplify({$Exp+ | $Gen+})  =  simplify1({$Gen+ :: {$Exp+}})

[sg-2] 	simplify1({$Gen :: $Exp }) = { $Gen :: $Exp }

[sg-2] 	simplify1({$Gen, $Gen+ :: $Exp }) = { $Gen :: simplify1({$Gen+ :: $Exp})}

[ec-0]  	evalx({$Exp+ | $Gen+}, $REnv) = 
		evalx(simplify(	{$Exp+ | $Gen+} ),  $REnv)

[ec-1]	$RElem := evalc({$Gen :: $Exp}, $REnv)
	====================================================================
	evalx({$Gen :: $Exp}, $REnv) = $RElem

[default-ec]
	evalx({$Gen :: $Exp}, $REnv) = {}

%% ---- evalc-test

[evc1]	evalc-test(true, $Exp, $REnv) = evalc($Exp, $REnv)

[evc2]	evalc-test(false, $Exp, $REnv)  = {} %%*undefined*

%% ---- evalc: evaluate comprehensions

%% ---- Generator: test

[ec-1]	$Bool := evalp($Test, $REnv)
	==================================================================
	evalc({$Test :: $Exp} , $REnv) = evalc-test($Bool, $Exp,$REnv)

%% ---- Generator: assignment,  one target T <- E

[ec-2]	$Val := evalx($Exp1, $REnv),
	$Val' := match-rvars($Target, $Val, $Exp2, $REnv)
	=================================================================
	evalc({ $Target <- $Exp1 :: $Exp2 }, $REnv) = $Val'

%% ---- Generator: assignment, N targets: <T1, T2, ..., Tn> <- E

[ec-3]	
	$Val := evalx($Exp1, $REnv),
	$Val' :=  match-rvars($Target+, $Val, $Exp2, $REnv)
	=================================================================
	evalc({ <$Target+> <- $Exp1 :: $Exp2 }, $REnv) = $Val'

%% ---- Simple generator, match and extract one target  T : E

[ec-4]	$Set := evalx($Exp1, $REnv)
	=================================================================
	evalc({ $Target : $Exp1 :: $Exp2 }, $REnv) = 
		eval-itern($Target, $Set, {}, $Exp2, $REnv)

%% ---- Simple generator, match and extract N targets <T1, T2, ...> : E

[ec-5]	$Set := evalx($Exp1, $REnv)
	=================================================================
	evalc({ <$Target+> : $Exp1 :: $Exp2 }, $REnv) = 
		eval-itern($Target+, $Set, {}, $Exp2, $REnv)

%% ---- Ordinary expression as in { E | ... }

[ec-6]	evalc($Exp, $REnv) = evalx($Exp, $REnv)

%% ---- eval-itern: the workhorse for comprehensions

[ei-1]	$Val := match-rvars($Target+, $RElem, $Exp, $REnv),
	$Set' := append-rval($Set, $Val)
	======================================================
	eval-itern($Target+, {$RElem, $RElem*}, $Set, $Exp, $REnv) =
		eval-itern($Target+, {$RElem*}, $Set', $Exp, $REnv)

[ei-2]	eval-itern($Target+, {}, $Set, $Exp, $REnv) = $Set

%% ---- Auxiliary functions for evaluating comprehensions

%% ---- Assign to list of variables

[mv0] 	$REnv' := assign-variable($Var, $Etype, $RElem, $REnv) 
	=====================================================
	match-rvars($Etype $Var, $RElem, $Exp, $REnv) = evalc($Exp, $REnv')


[mv1]	$REnv' := assign-variable($Var1, $Etype1, $RElem1, $REnv),
	$REnv'' := assign-variable($Var2, $Etype2, $RElem2, $REnv')
	=====================================================
	match-rvars($Etype1 $Var1, $Etype2 $Var2, <$RElem1, $RElem2>, $Exp, $REnv) = evalc($Exp, $REnv'')

[mv2]	$REnv' := assign-variable($Var1, $Etype1, $RElem1, $REnv),
	$REnv'' := assign-variable($Var2, $Etype2, $RElem2, $REnv'),
	$REnv''' := assign-variable($Var3, $Etype3, $RElem3, $REnv'')
	=====================================================
	match-rvars($Etype1 $Var1, $Etype2 $Var2, $Etype3 $Var3, <$RElem1, $RElem2, $RElem3>, $Exp, $REnv) = 
		evalc($Exp, $REnv''')



[mv3]	$REnv' := assign-variable($Var1, $Etype1, $RElem1, $REnv) 
	====================================================
	match-rvars($Etype1 $Var1, $Target1, $Target2, $Target+, <$RElem1, $RElem2, $RElem3, $RElem+>, $Exp, $REnv) =
		match-rvars($Target1, $Target2, $Target+, <$RElem2, $RElem3, $RElem+>, $Exp, $REnv')


[mv3-n]	$Val := evalx($Exp, $REnv),
	equal-rval($Val, $RElem1) == true
	====================================================
	match-rvars($Exp, $Target1, $Target2, $Target+, <$RElem1, $RElem2, $RElem3, $RElem+>, $Exp', $REnv) =
		match-rvars($Target1, $Target2, $Target+, <$RElem2, $RElem3, $RElem+>, $Exp', $REnv)



%% Unfortunately, we have to cover all permutations of vars and exps.

%% 
[mv4]	$Val := evalx($Exp1, $REnv),	
	equal-rval($Val, $RElem) == true
	=====================================================
	match-rvars($Exp1, $RElem, $Exp2, $REnv) = evalc($Exp2, $REnv)

%% 2
[mv]	$Val := evalx($Exp, $REnv),	
	equal-rval($Val, $RElem1) == true,
	$REnv' := assign-variable($Var, $Etype, $RElem2, $REnv)
	=====================================================
	match-rvars($Exp, $Etype $Var, <$RElem1, $RElem2>, $Exp', $REnv) =
		evalc($Exp', $REnv')

[mv]	$REnv' := assign-variable($Var, $Etype, $RElem1, $REnv),
	$Val := evalx($Exp, $REnv'),	
	equal-rval($Val, $RElem2) == true
	=====================================================
	match-rvars($Etype $Var, $Exp, <$RElem1, $RElem2>, $Exp', $REnv) =
		evalc($Exp', $REnv')

%% 3

[mv]	$Val1 := evalx($Exp1, $REnv),
	equal-rval($Val1, $RElem1) == true,
	$Val2 := evalx($Exp2, $REnv),
	equal-rval($Val2, $RElem2) == true,
	$REnv' := assign-variable($Var, $Etype, $RElem3, $REnv)
	====
	match-rvars($Exp1, $Exp2, $Etype $Var, <$RElem1, $RElem2, $RElem3>, $Exp', $REnv) =
		evalc($Exp', $REnv')

[mv]	$Val1 := evalx($Exp1, $REnv),
	equal-rval($Val1, $RElem1) == true,
	$REnv' := assign-variable($Var, $Etype, $RElem2, $REnv),
	$Val2 := evalx($Exp2, $REnv'),
	equal-rval($Val2, $RElem3) == true
	====
	match-rvars($Exp1, $Etype $Var, $Exp2, <$RElem1, $RElem2, $RElem3>, $Exp', $REnv) =
		evalc($Exp', $REnv')

[mv]	$REnv' := assign-variable($Var, $Etype, $RElem1, $REnv),
	$Val1 := evalx($Exp1, $REnv'),
	equal-rval($Val1, $RElem2) == true,
	$Val2 := evalx($Exp2, $REnv'),
	equal-rval($Val2, $RElem3) == true
	====
	match-rvars($Etype $Var, $Exp1, $Exp2, <$RElem1, $RElem2, $RElem3>, $Exp', $REnv) =
		evalc($Exp', $REnv')

[mv]	$Val1 := evalx($Exp1, $REnv),
	equal-rval($Val1, $RElem1) == true,
	$Val2 := evalx($Exp2, $REnv),
	equal-rval($Val2, $RElem2) == true,
	$Val3 := evalx($Exp3, $REnv),
	equal-rval($Val3, $RElem3) == true
	====
	match-rvars($Exp1, $Exp2, $Exp3, <$RElem1, $RElem2, $RElem3>, $Exp', $REnv) =
		evalc($Exp', $REnv)


[mv]	$REnv' := assign-variable($Var1, $Etype1, $RElem1, $REnv),
	$REnv'' := assign-variable($Var2, $Etype2, $RElem2, $REnv'),
	$Val := evalx($Exp, $REnv''),
	equal-rval($Val, $RElem3) == true
	===
	match-rvars($Etype1 $Var1, $Etype2 $Var2, $Exp, <$RElem1, $RElem2, $RElem3>, $Exp', $REnv) =
		evalc($Exp', $REnv'')

[mv]	$REnv' := assign-variable($Var1, $Etype1, $RElem1, $REnv),
	$Val := evalx($Exp, $REnv'),
	equal-rval($Val, $RElem2) == true,
	$REnv'' := assign-variable($Var2, $Etype2, $RElem3, $REnv')
	===
	match-rvars($Etype1 $Var1, $Exp, $Etype2 $Var2, <$RElem1, $RElem2, $RElem3>, $Exp', $REnv) =
		evalc($Exp', $REnv'')

[mv]	$Val := evalx($Exp, $REnv),
	equal-rval($Val, $RElem1) == true,
	$REnv' := assign-variable($Var1, $Etype1, $RElem2, $REnv),
	$REnv'' := assign-variable($Var2, $Etype2, $RElem3, $REnv')
	===
	match-rvars($Exp, $Etype1 $Var1, $Etype2 $Var2, <$RElem1, $RElem2, $RElem3>, $Exp', $REnv) =
		evalc($Exp', $REnv'')


%% ??? Duplicate of mv6?
%%[mv4]	$Val := evalx($Exp1, $REnv),	
%%	equal-rval($Val, $RElem) == true
%%	=====================================================
%%	match-rvars($Exp1, <$RElem>, $Exp2, $REnv) = evalc($Exp2, $REnv)

%%[mv5]	$REnv' := assign-variable($Var, $RElem, $REnv) 
%%	=====================================================
%%	match-rvars($Etype $Var, $RElem, $Exp, $REnv) = evalc($Exp,$REnv')

%%[mv6]	$Val := evalx($Exp1, $REnv),	
%%	equal-rval($Val, $RElem) == true
%%	=====================================================
%%	match-rvars($Exp1, $RElem, $Exp2, $REnv) = evalc($Exp2, $REnv)

[default-mv]
	match-rvars($Target+, $RElem, $Exp, $REnv) = *undefined* 

%% --- Append-rval

[AP0]	append-rval($Set, *undefined*) = $Set

[AP0-2]	append-rval($Set, {}) = $Set

[AP1]	append-rval($Set1, {$RElem}) = union($Set1, {$RElem})

[default-AP]
	append-rval($Set1, $Set2) = union($Set1, $Set2)

%% ---- Exists

[EXB1]	$Set := evalb($Exp, $REnv),
	$BoolCon := exists($Target,  $Set, $Test, $REnv)
	=========================================
	evalx(exists($Target : $Exp | $Test), $REnv) = $BoolCon

[EXB3]	$Set := evalb($Exp, $REnv),
	$BoolCon := exists($Target+, $Set, $Test, $REnv)
	=========================================
	evalx(exists(<$Target+> : $Exp | $Test), $REnv) = $BoolCon

[ex1]	match-rvars($Target+, $RElem, $Test, $REnv) == true
	======================================================
	exists($Target+, {$RElem, $RElem*}, $Test, $REnv) = true

[ex2]	exists($Target+, {}, $Test, $REnv) = false

[default-ex]
	exists($Target+, {$RElem, $RElem*}, $Test, $REnv) = exists($Target+, {$RElem*}, $Test, $REnv)

%% ---- Forall

[AL1]	$Bool := evalp(exists($SimpleGen | not $Test), $REnv),
	$BoolCon :=  not($Bool)
	==========================================
	evalx(forall($SimpleGen | $Test), $REnv) = $BoolCon

%% ---- Where expressions

[WH1]	$REnv' := eval-rstats($Stat+, $REnv)
	=================================================
	evalx($Exp where $Stat+ endwhere, $REnv) =  evalx($Exp, $REnv')	

%% ---- Function calls

%% ---- Bind formals

[bf1]	$Val := evalx($Exp, $REnv),
	$REnv' := assign-variable($Var, $Etype, $Val, $REnv)
	====================================================
	bind-formals($Etype $Var, $Formal+, $Exp, $Exp+, $REnv) =
	bind-formals($Formal+, $Exp+, $REnv')

[bf1]	$Val := evalx($Exp, $REnv),
	$REnv' := assign-variable($Var, $Etype, $Val, $REnv)
	====================================================
	bind-formals($Etype $Var, $Exp, $REnv) = $REnv'

%% ---- General case for function application

[default-fun]
	$Formal+ := formals($Var1, $REnv),
	$Exp2 := body($Var1, $REnv),
	$REnv' := bind-formals($Formal+, $Exp+, $REnv)
	====================================================
	evalx($Var1($Exp+), $REnv) = evalx($Exp2, $REnv')

%% ---- Special cases for all built-in functions

[Fid]	$Set  := evalb($Exp, $REnv)
	====================================================
	evalx(id($Exp), $REnv) = identity($Set)

[Fdom]	$Rel := evalr($Exp, $REnv)
	====================================================
	evalx(domain($Exp), $REnv) = domain($Rel)

[Fran]	$Rel := evalr($Exp, $REnv)
	====================================================
	evalx(range($Exp), $REnv) = range($Rel)

[Fcar]	$Rel := evalr($Exp, $REnv)
	====================================================
	evalx(carrier($Exp), $REnv) = carrier($Rel)
	
[Ftop]	$Rel := evalr($Exp, $REnv)
	====================================================
	evalx(top($Exp), $REnv) = top($Rel)

[Fbot]	$Rel := evalr($Exp, $REnv)
	====================================================
	evalx(bottom($Exp), $REnv) = bottom($Rel)

[Funq]	$Set := evalb($Exp, $REnv)
	====================================================
	evalx(unique($Exp), $REnv) = unique($Set)

[Finv]	$Rel := evalr($Exp, $REnv)
	===================================================
	evalx(inv($Exp), $REnv) = inverse($Rel)

[Fcmp]	$Rel := evalr($Exp, $REnv)
	===================================================
	evalx(compl($Exp), $REnv) = complement($Rel)

[Ffst]	<$RElem1, $RElem2> := evalx($Exp, $REnv)
	===================================================
	evalx(first($Exp), $REnv) = $RElem1

[Fsec]	<$RElem1, $RElem2> := evalx($Exp, $REnv)
	===================================================
	evalx(second($Exp), $REnv) = $RElem2

[Fpower0]	
	$Set  := evalb($Exp, $REnv)
	====================================================
	evalx(power0($Exp), $REnv) = power($Set)

[Fpower1]	
	$Set  := evalb($Exp, $REnv)
	====================================================
	evalx(power1($Exp), $REnv) = delete({}, power($Set))

[product-x]
	$Set := evalb($Exp, $REnv)
	===
	evalx(gprod($Exp), $REnv) = product-space($Set)

[Fallpaths]
	$Rel := evalr($Exp1, $REnv),
	$Set := evalb($Exp2, $REnv)
	=============================
	evalx(all-paths-from($Exp1, $Exp2), $REnv) = 
		all-paths-from($Rel, $Set)
	
[RdomR]	$Rel := evalr($Exp1, $REnv), $Set := evalb($Exp2, $REnv)
	===================================================
	evalx(domainR($Exp1, $Exp2), $REnv) = domain-restriction($Rel, $Set)

[FranR]	$Rel := evalr($Exp1, $REnv), $Set := evalb($Exp2, $REnv)
	===================================================
	evalx(rangeR($Exp1, $Exp2), $REnv) = range-restriction($Rel, $Set)

[FcarR]	$Rel := evalr($Exp1, $REnv), $Set := evalb($Exp2, $REnv)
	====================================================
	evalx(carrierR($Exp1, $Exp2), $REnv) = carrier-restriction($Rel, $Set)

[FdomX]	$Rel := evalr($Exp1, $REnv), $Set := evalb($Exp2, $REnv)
	====================================================
	evalx(domainX($Exp1, $Exp2), $REnv) = domain-exclusion($Rel, $Set)

[FranX]	$Rel := evalr($Exp1, $REnv), $Set := evalb($Exp2, $REnv)
	====================================================
	evalx(rangeX($Exp1, $Exp2), $REnv) = range-exclusion($Rel, $Set)

[FcarX]	$Rel := evalr($Exp1, $REnv), $Set := evalb($Exp2, $REnv)
	====================================================
	evalx(carrierX($Exp1, $Exp2), $REnv) = carrier-exclusion($Rel, $Set)

[FrX]	$Set1 := evalb($Exp1, $REnv),
	$Set2 := evalb($Exp2, $REnv),
	$Rel  := evalr($Exp3, $REnv)
	================================================= 
	evalx(reachX($Exp1, $Exp2, $Exp3), $REnv) =
		reach-exclusion($Rel, $Set1, $Set2)	

[FrR]	$Set1 := evalb($Exp1, $REnv),
        $Set2 := evalb($Exp2, $REnv),
        $Rel  := evalr($Exp3, $REnv)
        ================================================= 
        evalx(reachR($Exp1, $Exp2, $Exp3), $REnv) =
	        reach-restriction($Rel, $Set1, $Set2)

%% ---- Auxiliary functions for powerset

[ae1]	$Set' := insert($RElem, $Set)
	==================================================
	add-element($RElem, {$Set, $RElem*}) = union({$Set'}, add-element($RElem, {$RElem*}))

[ae2]	add-element($RElem, {}) = {}

[pw01]	$Set1 := power0({$RElem*}),
	$Set2 := add-element($RElem, $Set1)
	====================================================
	power0({$RElem, $RElem*}) = union($Set1, $Set2)

[pw02]	power0({}) = insert({}, {})

[pw11]	power1($Set) = delete({}, power0($Set))	

%% ---- Access functions for locations

[fn]	evalx(filename($Exp), $REnv)	= get-filename(evall($Exp, $REnv))

[bl]	evalx(beginline($Exp), $REnv) = get-begin-line(evall($Exp, $REnv))

[bc]	evalx(begincol($Exp), $REnv) 	= get-begin-column(evall($Exp, $REnv))

[el]	evalx(endline($Exp), $REnv) 	= get-end-line(evall($Exp, $REnv))

[ec]	evalx(endcol($Exp), $REnv) 	= get-end-column(evall($Exp, $REnv))

%% ---- sum

[sumx1] sumx({$Integer1, $RElem*}, $Integer2) = sumx({$RElem*}, $Integer1 + $Integer2)

[sumx2]	sumx({}, $Integer) = $Integer

[sum1]	$Set := evalx($Exp, $REnv)
	========================================
	evalx(sum($Exp), $REnv) = sumx($Set, 0)

%% ---- sum-domain

[sumdx1] sum-domainx({<$Integer1, $RElem>, $RElem*}, $Integer2) = 
		sum-domainx({$RElem*}, $Integer1 + $Integer2)

[sumdx2]	sum-domainx({}, $Integer) = $Integer

[sumd1]	$Set := evalx($Exp, $REnv)
	========================================
	evalx(sum-domain($Exp), $REnv) = sum-domainx($Set, 0)

%% ---- sum-range

[sumdx1] sum-rangex({<$RElem, $Integer1>, $RElem*}, $Integer2) = 
		sum-rangex({$RElem*}, $Integer1 + $Integer2)

[sumdx2]	sum-rangex({}, $Integer) = $Integer

[sumd1]	$Set := evalx($Exp, $REnv)
	========================================
	evalx(sum-range($Exp), $REnv) = sum-rangex($Set, 0)

%%% --- average

[avg1]	$Set := evalx($Exp, $REnv),
	$Integer1 := sumx($Set, 0),
	$Integer2 := size($Set),
	$Integer2 > 0 == true
	========================================
	evalx(average($Exp), $REnv) = $Integer1 / $Integer2

[default-avg2]	evalx(average($Exp), $REnv) = 0

%%% --- average-domain

[avgd1] $Set := evalx($Exp, $REnv),
	$Integer1 := sum-domainx($Set, 0),
	$Integer2 := size($Set),
	$Integer2 > 0 == true
	========================================
	evalx(average-domain($Exp), $REnv) = $Integer1 / $Integer2

[default-avgd]	evalx(average-domain($Exp), $REnv) = 0

%%% --- average-range

[avgr1]	$Set := evalx($Exp, $REnv),
	$Integer1 := sum-rangex($Set, 0),
	$Integer2 := size($Set),
	$Integer2 > 0 == true
	========================================
	evalx(average-range($Exp), $REnv) = $Integer1 / $Integer2

[default-avgr]	evalx(average-range($Exp), $REnv) = 0

%% ---- max

[max11] max1({$Integer, $RElem*}) = max2({$RElem*}, $Integer)

[max12]	max1({}) = 0


%% Gaat nooit af?
%%[default-max1]
%%	max1($SetIter) = max1(tail($SetIter))


[max21]	$Integer1 > $Integer2 == true
	===========================================================================
	max2({$Integer1, $RElem*}, $Integer2) = max2({$RElem*}, $Integer1)

[max22]	max2({}, $Integer) = $Integer

[default-max2]
	max2({$RElem, $RElem*}, $Integer2) = max2({$RElem*}, $Integer2)

[max-1]	$Set := evalx($Exp, $REnv)
	========================================
	evalx(max($Exp), $REnv) = max1($Set)

%% ---- min

[min11]	min1({$Integer, $RElem*}) = min2({$RElem*}, $Integer)

[min12]	min1({}) = 0

%% Gaat nooit af?
%%[default-min1]
%%	min1($SetIter) = min1(tail($SetIter))

[min21]	$Integer1 < $Integer2 == true
	===========================================================================
	min2({$Integer1, $RElem*}, $Integer2) = min2({$RElem*}, $Integer1)

[min22]	min2({}, $Integer) = $Integer

[default-min2]
	min2({$RElem, $RElem*}, $Integer2) = min2({$RElem*}, $Integer2)

[min-1]	$Set := evalx($Exp, $REnv)
	========================================
	evalx(min($Exp), $REnv) = min1($Set)

%% Misc



equations

[str2rvar-single]
	str2rvar(strcon(\" strchar($IdConHeadChar) \")) = idcon($IdConHeadChar)

[str2rvar-many]
	idcon($IdConHeadChar $IdConChar*) := str2rvar(strcon(\" strchar($IdConHeadChar) $StrChar* \"))
	===
	str2rvar(strcon(\" strchar($IdConHeadChar) strchar($IdConChar) $StrChar* \")) =
		idcon($IdConHeadChar $IdConChar $IdConChar*)
	

tests

[str2rvar-test]
	str2rvar("ab-cd") == ab-cd






