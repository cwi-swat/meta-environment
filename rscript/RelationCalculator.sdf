module RelationCalculator

imports RScripts
%% imports Relations[Elem]

exports
   sorts RVALUE RSTORE

   context-free syntax

%% The values that a variable in the RSTORE may have

        Elem                          -> RVALUE
        "*empty*"                     -> RVALUE
        RVAR # REXP                    -> RVALUE
        RVAR # RVAR # REXP              -> RVALUE
        RVAR # RVAR # RVAR # REXP        -> RVALUE

        "if" Boolean "then" RVALUE "else" RVALUE "fi"       
                                      -> RVALUE

%% The RSTORE itself, maps RVARs to RVALUEs
        
        "[" { RVAR # RVALUE ","}* "]"         -> RSTORE
        assign(RVAR, RVALUE, RSTORE)          -> RSTORE
        value(RVAR, RSTORE)                   -> RVALUE

        rval2rel(RVALUE)	 	      -> Rel[[Elem]]
        rval2bag(RVALUE)		      -> Bag[[Elem]]

	add-tuple(RVAR, Elem # Elem, RSTORE)  -> RSTORE

	extend-rel(RVAR, Rel[[Elem]], RSTORE) -> RSTORE

%% Main evaluation functions for Rscripts

        eval-rscript(RSCRIPT)                -> RSTORE
        eval-rscript(RSCRIPT, RVAR, RSTORE)   -> RVALUE
        eval-rscript(RSTAT, RSTORE)           -> RSTORE
        eval-rscript(RSTAT*, RSTORE)          -> RSTORE

        eval-rexp(REXP, RSTORE)		     -> RVALUE

%% should be hidden

   sorts GEN GENS OP

   context-free syntax
 
        evalp(REXP, RSTORE)            -> Boolean
        evale(REXP, RSTORE)            -> Elem
        evalb(REXP, RSTORE)            -> Bag[[Elem]]
        evalr(REXP, RSTORE)            -> Rel[[Elem]]

        evalx(REXP, RSTORE)            -> RVALUE
        apply "(" RVALUE OP RVALUE ")"   -> RVALUE
        apply "(" OP RVALUE ")"         -> RVALUE

        "dominators"                   -> RVAR {prefer}

        "elem"			       -> OP
        "=="                           -> OP
        "<="                           -> OP
        "<"                            -> OP
        ">="                           -> OP
        ">"                            -> OP
        "union"                        -> OP
        "inter"                        -> OP
        "\\"                           -> OP
        "o"                            -> OP
        "x"                            -> OP
        "."                            -> OP
        "#"                            -> OP

        equal(Elem, Elem)              -> Boolean

        gen(RVAR, Bag[[Elem]], Bag[[Elem]], Boolean)       -> GEN
        gen(RVAR, RVAR, Rel[[Elem]], Rel[[Elem]], Boolean)  -> GEN

        "[" {GEN ","}* "]"                                -> GENS
        "get_from" "(" {FROM ","}* "," RSTORE ")"         -> GENS
        "has_more" "(" GENS ")"                           -> Boolean
        "get_next" "(" GENS ")"                           -> GENS
        "get_cur" "(" GENS "," RSTORE ")"                 -> RSTORE

        valformer(GENS, RVALUE, REXP, RSTORE, REXP)        -> RVALUE
	append(RVALUE, RVALUE)				-> RVALUE

hiddens
%%  imports asf/syntax/Comments

   variables
        "$Store" [0-9\']*              -> RSTORE
        "$Val" [0-9\']*                -> RVALUE
        "$VPair*" [0-9\']*             -> { RVAR # RVALUE ","}*

        "$Var" [0-9\']*                -> RVAR
        "$Exp"  [0-9\']*               -> REXP
        "$Exp*"  [0-9\']*              -> { REXP ","}*
        "$Exp+"  [0-9\']*              -> { REXP ","}+

        "$Rel" [0-9\']*                -> Rel[[Elem]]
        "$Bag" [0-9\']*                -> Bag[[Elem]]
        "$Elem"   [0-9\']*             -> Elem
        "$Elem*"  [0-9\']*             -> {Elem ","}*
        "$Elem+"  [0-9\']*             -> {Elem ","}+

        "$Tuple" [0-9\']*              -> Elem # Elem
        "$Tuple*" [0-9\']*             -> { Elem # Elem ","}*
        "$Tuple+" [0-9\']*             -> { Elem # Elem ","}+

        "$From*" [0-9\']*              -> {FROM ","}*
        "$From+" [0-9\']*              -> {FROM ","}+

        "$Gen*" [0-9\']*               -> { GEN ","}*
        "$Gen+" [0-9\']*               -> { GEN ","}+
        "$Gens" [0-9\']*               -> GENS

        "$Script" [0-9\']*             -> RSCRIPT

        "$Stat" [0-9\']*               -> RSTAT
        "$Stat*" [0-9\']*              -> RSTAT*

        "$Bool" [0-9\']*               -> Boolean
        "$Integer" [0-9\']*            -> Integer

	"$Etype" [0-9\']*              -> REXPTYPE

     


