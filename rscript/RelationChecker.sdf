module RelationChecker[Elem ElemType]

imports RScripts[Elem ElemType]
imports containers/Table[VAR REXPTYPE]

exports
    sorts ERROR ERRORS REXPTYPE # TENV OP TENV DCLVARS  Boolean #  Table[[VAR,REXPTYPE]]


    context-free syntax

	type-of(Elem)                  		-> ElemType

        undefined                       	-> REXPTYPE
        empty                           	-> REXPTYPE
        "fun" {REXPTYPE ","}* to REXPTYPE	-> REXPTYPE
        VAR                                     -> REXPTYPE
        "[" {REXPTYPE ","}* "]"                 -> REXPTYPE

        is-var(REXPTYPE)                        -> Boolean

	REXPTYPE "==" REXPTYPE			-> Boolean

	 REXP cannot be typed 			-> ERROR
	 FROM cannot be typed			-> ERROR
	 Bag[[Elem]] cannot be typed 		-> ERROR
	 Rel[[Elem]] cannot be typed 		-> ERROR
 	 "Undeclared" VAR			-> ERROR
  	 VAR "redeclared"			-> ERROR
        "Incompatible" arguments in REXP        -> ERROR
         REXP should have type REXPTYPE          -> ERROR
        REXP should be of type bag         	-> ERROR
        REXP should be of type rel         	-> ERROR
        "No" "definition" for VAR with argument REXPTYPE       -> ERROR

        "[" {ERROR ";"} * "]"                	-> ERRORS

	Table[[VAR,REXPTYPE]] # ERRORS  	-> TENV

	TENV "+" ERROR				-> TENV

        if Boolean then TENV else TENV fi	-> TENV

	lookup(TENV, VAR) 			-> REXPTYPE
	store(TENV, VAR, REXPTYPE)		-> TENV
	delete(TENV, VAR)			-> TENV

	built-ins				-> Table[[VAR,REXPTYPE]]

        check-bag-con(Bag[[Elem]], TENV)      	-> REXPTYPE # TENV
        check-bag-exp(REXP,TENV)     	 	-> REXPTYPE # TENV

        check-rel-con(Rel[[Elem]], TENV)      	-> REXPTYPE # TENV
        check-rel-exp(REXP,TENV)     	 	-> REXPTYPE # TENV

	check-rscript(STAT*)          		-> TENV

        check-rscript(STAT*, TENV)		-> TENV
	check(REXP, TENV) 			-> REXPTYPE # TENV
	check-stat(STAT, TENV) 			-> TENV

        check-not-defined(VAR, TENV)            -> TENV

        require-type(REXP, REXPTYPE, TENV) 		-> TENV
	require-bag-type(REXP, VAR, REXPTYPE, TENV) -> TENV
	require-rel-type(REXP, VAR, VAR, REXPTYPE, TENV) -> TENV

        container-type(REXPTYPE)		-> REXPTYPE
        
        "[" { DCLVAR ","}* "]"			-> DCLVARS

	add-from({FROM ","}*, TENV)             -> TENV
	del-from({FROM ","}*, TENV)             -> TENV


         add-formals(DCLVARS, TENV)             -> TENV
         del-formals(DCLVARS, TENV)		-> TENV
         "[" {REXPTYPE ","}* "]"		-> REXPTYPES

 	ext-types(DCLVARS )                      -> {REXPTYPE ","}*
        collect-actuals({REXP ","}*, TENV)        -> REXPTYPES # TENV

        find-result-type(VAR, REXPTYPE, TENV)   -> REXPTYPE # TENV

        match-types( REXPTYPE, REXPTYPE, Table[[VAR,REXPTYPE]]) 	-> Boolean #  Table[[VAR,REXPTYPE]]
        substitute(REXPTYPE,  Table[[VAR,REXPTYPE]]) -> REXPTYPE


       "and"                          -> OP
       "or"                           -> OP
       "not"                          -> OP
       "elem"			      -> OP

       "=="                           -> OP
        "<="                           -> OP
        "<"                            -> OP
        ">="                           -> OP
        ">"                            -> OP
        "union"                        -> OP
        "inter"                        -> OP
        "\\"                           -> OP
        "o"                            -> OP
        "x"                            -> OP
        "."                            -> OP
        "+"                            -> OP
        "*"                            -> OP

        compat "(" REXP "," REXPTYPE OP REXPTYPE "," TENV ")" -> REXPTYPE # TENV
        compat "(" REXP "," REXPTYPE ("+" | "*") "," TENV ")" -> REXPTYPE #TENV

hiddens
    imports asf/syntax/Comments
    variables
     "Table" [0-9\']* -> Table[[VAR,REXPTYPE]]
     "Tenv"[0-9\']* -> TENV
     "Error" [0-9\']* -> ERROR
     "Error*" [0-9\']* -> {ERROR ";"}*
     "Errors" [0-9\']*	-> ERRORS
     "#Exp" [0-9\']*    -> REXP
     "#Exp*" [0-9\']*    -> {REXP ","}*
     "#Exp+" [0-9\']*    -> {REXP ","}+

     "Op"               -> OP
     "#Etype" [0-9\']*    -> REXPTYPE
     "#Etype*" [0-9\']*    -> {REXPTYPE ","}*


      "Elem" [0-9\']*     -> Elem
     "Elem+" [0-9\']*     -> {Elem ","}+
     "Elem*" [0-9\']*     -> {Elem ","}*

     "#Tuple" [0-9\']*     -> Elem # Elem
     "#Tuple*" [0-9\']*     -> {Elem # Elem ","}*
     "#Tuple+" [0-9\']*     -> {Elem # Elem ","}+


     "Bag" [0-9\']*        -> Bag[[Elem]]
     "Rel" [0-9\']*        -> Rel[[Elem]]

     "Boolean" [0-9\']*    -> Boolean
     "Integer" [0-9\']*    -> Integer
     "#Var" [0-9\']*       -> VAR

      "#TExp" [0-9\']*     -> TEXP
     "#TExp*" [0-9\']*     -> {TEXP ","}*
     "#TExp+" [0-9\']*     -> {TEXP ","}+

     "#DclVar" [0-9\']*	   -> DCLVAR

     "#DclVar*" [0-9\']*	   -> {DCLVAR ","}*
     "#DclVar+" [0-9\']*	   -> {DCLVAR ","}+

        "Stat" [0-9\']*               -> STAT
        "Stat*" [0-9\']*              -> STAT*

      "#From" [0-9\']*   -> FROM
      "#From*" [0-9\']*   -> {FROM ","}*
      "#From+" [0-9\']*   -> {FROM ","}+
	
