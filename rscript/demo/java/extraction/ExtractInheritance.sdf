module ExtractInheritance

imports Rstore
imports JavaOperations

exports
  context-free syntax
    extractExtendsClass(CompilationUnit, Rel[[Elem]])
      -> Rel[[Elem]] {traversal(accu, top-down, break)}

    extractExtendsClass(ClassDeclaration, Rel[[Elem]])
      -> Rel[[Elem]] {traversal(accu, top-down, break)}


    extractImplements(CompilationUnit, Rel[[Elem]])
      -> Rel[[Elem]] {traversal(accu, top-down, break)}

    extractImplements(ClassDeclaration, Rel[[Elem]])
      -> Rel[[Elem]] {traversal(accu, top-down, break)}


    extractExtendsInterface(CompilationUnit, Rel[[Elem]])
      -> Rel[[Elem]] {traversal(accu, top-down, break)}
    
    extractExtendsInterface(InterfaceDeclaration, Rel[[Elem]])
      -> Rel[[Elem]] {traversal(accu, top-down, break)}


    extractInterfaceTypes({InterfaceType ","}+, Rel[[Elem]], String)
      -> Rel[[Elem]] {traversal(accu, top-down, break)}


    extractInterfaceTypes(InterfaceType, Rel[[Elem]], String)
      -> Rel[[Elem]] {traversal(accu, top-down, break)}

hiddens
  variables

    "&Rel"[0-9]*		-> Rel[[Elem]]
    "&ClassBody"		-> ClassBody
    "&ClassDeclaration"		-> ClassDeclaration
    "&ClassId"			-> String
    "&ClassType"		-> ClassType
    "&CompilationUnit"		-> CompilationUnit
     "&Identifier"		-> Identifier
    "&InterfaceBody"		-> InterfaceBody
    "&InterfaceDeclaration"	-> InterfaceDeclaration
    "&InterfaceId"		-> Area
    "&InterfaceName"		-> String
    "&Interfaces"		-> Interfaces?
    "&InterfaceType"		-> InterfaceType
    "&InterfaceTypes"		-> {InterfaceType ","}+
    "&Modifiers"		-> Modifier*
    "&Name"			-> Name

    "&SuperOpt"			-> Super?
 