module Relations[Elem]

exports
imports EmptyRel

imports Bags[Elem # Elem] [    Bag[[Elem # Elem]]  =>  Rel[[Elem]] 
                           ]
 
imports Bags[Elem]

  context-free syntax
     EmptyRel                                		-> Rel[[Elem]]

%%     equal(Rel[[Elem]], Rel[[Elem]])           		-> Boolean
%%     subset(Rel[[Elem]], Rel[[Elem]])          		-> Boolean
%%     strict-subset(Rel[[Elem]], Rel[[Elem]])   		-> Boolean
%%     superset(Rel[[Elem]], Rel[[Elem]])        		-> Boolean
%%     strict-superset(Rel[[Elem]], Rel[[Elem]]) 		-> Boolean

%%     union(Rel[[Elem]], Rel[[Elem]])           		-> Rel[[Elem]]
%%     inter(Rel[[Elem]], Rel[[Elem]])           		-> Rel[[Elem]]
%%     diff(Rel[[Elem]], Rel[[Elem]])            		-> Rel[[Elem]]
     compose(Rel[[Elem]], Rel[[Elem]])       		-> Rel[[Elem]]
    
     product(Elem, Bag[[Elem]])                		-> Rel[[Elem]]

     product(Bag[[Elem]], Bag[[Elem]])         		-> Rel[[Elem]]
     
     domain(Rel[[Elem]])                       		-> Bag[[Elem]]
     range(Rel[[Elem]])                        		-> Bag[[Elem]]
     carrier(Rel[[Elem]])                      		-> Bag[[Elem]]

     domR(Rel[[Elem]], Bag[[Elem]])   			-> Rel[[Elem]]
     ranR(Rel[[Elem]], Bag[[Elem]])  			-> Rel[[Elem]]
     carR(Rel[[Elem]], Bag[[Elem]])   			-> Rel[[Elem]]

     domX(Rel[[Elem]], Bag[[Elem]])   			-> Rel[[Elem]]
     ranX(Rel[[Elem]], Bag[[Elem]])   			-> Rel[[Elem]]
     carX(Rel[[Elem]], Bag[[Elem]])   			-> Rel[[Elem]]

     top(Rel[[Elem]])                 			-> Bag[[Elem]]
     bottom(Rel[[Elem]])                  		-> Bag[[Elem]]

     inv(Rel[[Elem]])                  			-> Rel[[Elem]]
     compl(Rel[[Elem]])                			-> Rel[[Elem]]

     id(Bag[[Elem]])                   			-> Rel[[Elem]]

     Rel[[Elem]] "." Elem             			-> Bag[[Elem]]
     Rel[[Elem]] "." Bag[[Elem]]      			-> Bag[[Elem]]

     Elem "." Rel[[Elem]]             			-> Bag[[Elem]]
     Bag[[Elem]] "." Rel[[Elem]]      			-> Bag[[Elem]]

     size(Rel[[Elem]])                  		-> Integer
     reachX(Bag[[Elem]], Bag[[Elem]], Rel[[Elem]])	-> Rel[[Elem]]
     reachR(Bag[[Elem]], Bag[[Elem]], Rel[[Elem]])	-> Rel[[Elem]]
     Rel[[Elem]] "+"                  			-> Rel[[Elem]]
     Rel[[Elem]] "*"                  			-> Rel[[Elem]]

     "(" Rel[[Elem]] ")"              			-> Rel[[Elem]] {bracket}

%%     "if" Boolean "then" Rel[[Elem]] "else" Rel[[Elem]] "fi" 
%%							-> Rel[[Elem]]

hiddens
  imports asf/syntax/Comments

  context-free syntax
     closure(Rel[[Elem]],Rel[[Elem]], Rel[[Elem]])	-> Rel[[Elem]]

  variables
     "BagEE" [0-9\']*            -> Bag[[Elem # Elem]]
     "Bag" [0-9\']*              -> Bag[[Elem]]
     "Rel" [0-9\']*              -> Rel[[Elem]]
     "E" [0-9\']*                -> Elem
     "E*" [0-9\']*               -> { Elem ","}*
     "E+" [0-9\']*               -> { Elem ","}+
     "Tuple" [0-9\']*            -> Elem # Elem
     "Tuple*" [0-9\']*           -> {Elem # Elem ","}*




