 equations

%% --- Simplify n-ary tuples

[st1]	$Exps = $Exp'
	=============================================================
	<$Exp1, $Exp2, $Exps> = <$Exp1, <$Exp2, $Exp'>>

[st2]	$Exps1 = $Exp', $Exps2
	=============================================================
	<$Exp1, $Exp2, $Exps1> = <$Exp1, <$Exp2, $Exp', $Exps2>>

%% ---- Equality on elements

[ee1]	equal-elem($Bool, $Bool)	= true
[ee2]	equal-elem($Integer, $Integer)	= true
[ee3]	equal-elem($String, $String)	= true
[ee4]	equal-elem($Bag1, $Bag2) 	= equal($Bag1, $Bag2)

[default-ee] 
	equal-elem($Elem, $Elem') 		= false

%% ---- Equality on RVALUEs

[er1]	equal-rval($Bag1, $Bag2) = equal($Bag1, $Bag2)
[er2]	equal-rval($Rel1, $Rel2) = equal($Rel1, $Rel2)
[er3]	equal-rval($Val, $Val)  = true
[default-er] 
	equal-rval($Val1, $Val2) = false

%% ---- Tests on RVALUEs

[ir1]	is-rel({<$Elem1,$Elem2>, $Elem*}) = true
[default-ir]
	is-rel($Val) = false

%% ---- Extract a list of variables from a declaration list

[erv1]	extract-rvars($DclRvar+) = $Var+
	===================================================
	extract-rvars($Etype $Var, $DclRvar+) = $Var, $Var+

[erv2]	extract-rvars($Etype $Var) = $Var

%% ---- Eval a complete Rscript

[ERS1]	$Rstore = eval-rstats($Stat*, rstore(<YIELD, {}>)),
	$Bag = value(YIELD, $Rstore)
	===============================================================
	eval-rscript($Stat*) = filter($Rstore, $Bag)

%% ---- Eval a complete Rscript with given Rstore

[ERS2]	$Rstore' = assign(YIELD, {}, $Rstore),
	$Rstore'' = eval-rstats($Stat*, $Rstore'),
	$Bag = value(YIELD, $Rstore'')
	===============================================================
	eval-rscript-with-rstore($Stat*, $Rstore) = filter($Rstore'', $Bag)

%% ---- Eval complete script and yield value of a variable

[ERS3]	$Elem =  value($Var, eval-rstats($Stat*, $Rstore))
	===================================================
	eval-rscript($Stat*, $Var, $Rstore) = $Elem

%% ---- Eval statements

[ES2]	eval-rstats($Stat $Stat*, $Rstore) = eval-rstats($Stat*, eval-rstat($Stat, $Rstore))
[ES3]	eval-rstats( , $Rstore) = $Rstore

%% ---- Eval one statement

[S1]	eval-rstat(bool $Var, $Rstore) 		= assign-when-undef($Var, true, $Rstore)
[S2]	eval-rstat(int $Var, $Rstore)  		= assign-when-undef($Var, 0, $Rstore)
[S3]	eval-rstat(str $Var, $Rstore)  		= assign-when-undef($Var, "", $Rstore)
[S4]	eval-rstat(area $Var, $Rstore)		= assign-when-undef($Var, area("",0,0,0,0), $Rstore)
[S5]	eval-rstat(bag[$Etype] $Var, $Rstore)  	= assign-when-undef($Var, {}, $Rstore)	
	
[S6]	eval-rstat(rel[$Etype1, $Etype2] $Var, $Rstore) 
						= assign-when-undef($Var, {}, $Rstore)
[S7]	eval-rstat($Etype $Var, $Rstore)	= $Rstore

[S8]	eval-rstat($Etype $Var = $Exp, $Rstore)    = assign($Var, evalx($Exp, $Rstore), $Rstore)
[S8]	eval-rstat($Etype $Var init $Exp, $Rstore) = assign($Var, evalx($Exp, $Rstore), $Rstore)

[S9]	eval-rstat($Etype1 $Var1($DclRvar+) = $Exp, $Rstore) 
						= assign($Var1, <extract-rvars($DclRvar+), $Exp>, $Rstore)
[default-assert]	
	eval-rstat(assert $String : $Exp, $Rstore) = $Rstore

[S10]	$Elem =  value($Var, $Rstore)
	=======================================================
	eval-rstat(yield $Var, $Rstore) = add-elem(YIELD, rvar2str($Var), $Rstore)

%% ---- Variable initialization in solve statement

[eiv]	$Rstore' =  assign($Var, evalx($Exp, $Rstore), $Rstore)
	========================================================
	eval-initvar($Etype $Var init $Exp $InitVar*, $Rstore) =
	eval-initvar($InitVar*, $Rstore')

[eiv2]	eval-initvar( , $Rstore) = $Rstore
	
%% --- Solve Sets of equations

[SL1]	eval-initvar( $InitVar+, $Rstore) = $Rstore'
	=======================================================
	eval-rstat(equations initial $InitVar+ satisfy $Var1 = $Exp1 end equations, $Rstore) = 
	solve1(1000, $Var1, $Exp1, $Rstore')

[SL2]	eval-initvar( $InitVar+, $Rstore) = $Rstore'
	=======================================================	
	eval-rstat(equations (limit $Integer) initial $InitVar+ satisfy $Var1 = $Exp1 end equations, $Rstore) = 
	solve1($Integer, $Var1, $Exp1, $Rstore')

[SL3]	eval-initvar( $InitVar+, $Rstore) = $Rstore'
	=======================================================	
	eval-rstat(equations initial  $InitVar+ satisfy $Var1 = $Exp1 $Var2 = $Exp2 end equations, $Rstore) = 
	solve2(1000, $Var1, $Exp1, $Var2, $Exp2, $Rstore')

[SL4]	eval-initvar( $InitVar+, $Rstore) = $Rstore'
	=======================================================	
	eval-rstat(equations (limit $Integer) initial $InitVar+ satisfy $Var1 = $Exp1 $Var2 = $Exp2 end equations, $Rstore) = 
	solve2($Integer, $Var1, $Exp1, $Var2, $Exp2, $Rstore')

[SL1-1]	$Integer > 0 = true,
	$Val1 = value($Var1, $Rstore),
	$Val1' = evalx($Exp1, $Rstore),
	$Rstore' = assign($Var1, $Val1', $Rstore),
	equal-rval($Val1, $Val1') = false
	===========================================
	solve1($Integer, $Var1, $Exp1, $Rstore) =
	solve1($Integer - 1, $Var1, $Exp1, $Rstore')

[default-SL1-2]	
	solve1($Integer, $Var1, $Exp1, $Rstore) = $Rstore

[SL2-1]	$Integer > 0 = true,
	$Val1 = value($Var1, $Rstore),
	$Val1' = evalx($Exp1, $Rstore),
	$Val2 = value($Var2, $Rstore),
	$Val2' = evalx($Exp2, $Rstore),
	$Rstore' = assign($Var1, $Val1', $Rstore),
	$Rstore'' = assign($Var2, $Val2', $Rstore'),
	equal-rval($Val1, $Val1') & equal-rval($Val2, $Val2') = false
	===========================================
	solve2($Integer, $Var1, $Exp1, $Var2, $Exp2, $Rstore) =
	solve2($Integer - 1, $Var1, $Exp1, $Var2, $Exp2, $Rstore'')

[default-SL2-2]	
	solve2($Integer, $Var1, $Exp1, $Var2, $Exp2, $Rstore) = $Rstore

%% ---- Eval one REXP

%% ---- Specialized versions of evalx that return value of required type

[EVP]	$Bool = evalx($Exp, $Rstore) 	===> evalp($Exp, $Rstore) = $Bool
[EVE1]	$Elem = evalx($Exp, $Rstore)   	===> evale($Exp, $Rstore) = $Elem
[EVE2]	$Tuple = evalx($Exp, $Rstore)	===> evalt($Exp, $Rstore) = $Tuple
[EVB1]	$Bag = evalx($Exp, $Rstore)     ===> evalb($Exp, $Rstore) = $Bag
[EVR1]	$Rel = evalx($Exp, $Rstore)     ===> evalr($Exp, $Rstore) = $Rel
[EVA1]	$Area = evalx($Exp, $Rstore)    ===> evala($Exp, $Rstore) = $Area


%% ---- The main evaluation function evalx

%% ---- Eval elements, tuples and variables

[ELM]	evalx($Elem, $Rstore) = $Elem

[VAR1]	$Elem = value($Var, $Rstore)
	=================================================
	 evalx($Var, $Rstore)  = $Elem

%% ---- Eval tuples

[ET1]	$Elem1 = evale($Exp1, $Rstore),
	$Elem2 = evale($Exp2, $Rstore)
	==================================================
	evalx(<$Exp1, $Exp2>, $Rstore) = <$Elem1, $Elem2>

%% ---- Eval bags

[EB2]   $Elem = evale($Exp, $Rstore),
	{$Elem+} = evalb({$Exp+}, $Rstore)
	===================================================
	evalx({$Exp, $Exp+}, $Rstore) = {$Elem, $Elem+}

[EB2]   $Elem = evale($Exp, $Rstore)
	===================================================
	evalx({$Exp}, $Rstore) = {$Elem}

%% ---- Eval binary operators

[AND1]	evalx($Exp1 and $Exp2, $Rstore) 	= evalp($Exp1, $Rstore) & evalp($Exp2, $Rstore)

[OR1]	evalx($Exp1 or $Exp2, $Rstore) 		= evalp($Exp1, $Rstore) | evalp($Exp2, $Rstore)

[IMP1]	evalx($Exp1 implies $Exp2, $Rstore) 	= not(evalp($Exp1, $Rstore) & not(evalp($Exp2, $Rstore)))

[NOT1]	evalx(not $Exp, $Rstore) 		= not(evalp($Exp, $Rstore))

[IN1]	evalx($Exp1 in $Exp2, $Rstore) 		= in(evalx($Exp1, $Rstore), evalb($Exp2, $Rstore))

[NI1]	evalx($Exp1 notin $Exp2, $Rstore)	= not(in(evalx($Exp1, $Rstore), evalb($Exp2, $Rstore)))

[EQ1]	evalx($Exp1 == $Exp2, $Rstore) 		= equal-elem(evalx($Exp1, $Rstore), evalx($Exp2, $Rstore))

[NE1]	evalx($Exp1 != $Exp2, $Rstore) 		= not(equal-elem(evalx($Exp1, $Rstore), evalx($Exp2, $Rstore)))

%% ---- aux functions for evaluating comparison operators

[LE1]	eval-le($Bag1, $Bag2)			= subset($Bag1, $Bag2)
[LE2]	eval-le($Integer1, $Integer2) 		= $Integer1 <= $Integer2

[LT1]	eval-lt($Bag1, $Bag2) 			= strict-subset($Bag1,  $Bag2)
[LT2]	eval-lt($Integer1, $Integer2) 		= $Integer1 < $Integer2

[LE1]	evalx($Exp1 <= $Exp2, $Rstore) 		= eval-le(evalx($Exp1, $Rstore), evalx($Exp2, $Rstore))

[LT1]	evalx($Exp1 < $Exp2, $Rstore) 		= eval-lt(evalx($Exp1, $Rstore), evalx($Exp2, $Rstore))

[GE1]	evalx($Exp1 >= $Exp2, $Rstore) 		= not(eval-lt(evalx($Exp1, $Rstore), evalx($Exp2, $Rstore)))

[GT1]	evalx($Exp1 > $Exp2, $Rstore) 		= not(eval-le(evalx($Exp1, $Rstore), evalx($Exp2, $Rstore)))

[UN1]	evalx($Exp1 union $Exp2, $Rstore)	= union(evalb($Exp1, $Rstore), evalb($Exp2, $Rstore))

[IN1]	evalx($Exp1 inter $Exp2, $Rstore)	= inter(evalb($Exp1, $Rstore), evalb($Exp2, $Rstore))

[DF1]	evalx($Exp1 \ $Exp2, $Rstore)		= diff(evalb($Exp1, $Rstore), evalb($Exp2, $Rstore))

[CM1]	evalx($Exp1 o $Exp2, $Rstore)		= compose(evalb($Exp1, $Rstore), evalb($Exp2, $Rstore))

[CP1]	evalx($Exp1 x $Exp2, $Rstore)		= product(evalb($Exp1, $Rstore), evalb($Exp2, $Rstore))

%% ---- aux functions for evaluating image operator .

[eim1]	eval-im($Rel, $Elem)			= limage($Rel, $Elem) when is-rel($Rel) = true
[eim2]	eval-im($Elem, $Rel)			= rimage($Elem, $Rel) when is-rel($Rel) = true

[eim3]	eval-im($Bag, $Rel)			= rimage($Bag,  $Rel) when is-rel($Rel) = true
[eim4]	eval-im($Rel, $Bag)			= limage($Rel,  $Bag) when is-rel($Rel) = true

[default-eim]
	eval-im($Val1, $Val2)			= {}

[IM1]	evalx($Exp1 . $Exp2, $Rstore)		= eval-im(evalx($Exp1, $Rstore), evalx($Exp2, $Rstore))

%% ---- [ ]
[IM2]	evalx($Exp1 [ $Exp2 ], $Rstore)		= evalx($Exp2 . $Exp1, $Rstore)

[TC1]	evalx($Exp +, $Rstore)			= trans-closure(evalb($Exp, $Rstore))

[RTC1]	evalx($Exp *, $Rstore)			= rtrans-closure(evalb($Exp, $Rstore))

[SZ1]	evalx(# $Exp, $Rstore) 			= size(evalb($Exp, $Rstore))

%% ---- Eval comprehensions

%% ---- Simplify multiple generators

[RF2]	{$Exp | $Gen+}  =  {$Gen+ :: $Exp}

[XX] 	{$Gen, $Gen+ :: $Exp } = { $Gen :: {$Gen+ :: $Exp}}

%% ---- Generator: test

[et-1a]	$Bool =  evalp($Test, $Rstore)
	======================================================================
	evalx({$Test :: $Exp} , $Rstore) = if $Bool then evalx($Exp, $Rstore) else *undefined* fi

%% ---- Generator: assignment,  one variable V <- E

[ea-1a]	$Val = evalx($Exp1, $Rstore),
	$Rstore' =  assign($Var, $Val, $Rstore)
	======================================================================
	evalx({ $Var <- $Exp1 :: $Exp2 }, $Rstore) = evalx($Exp2, $Rstore')

%% ---- Generator: assignment, two variables: <V1, V2> <- E

[eat-1a]	
	$Val = evalx($Exp1, $Rstore),
	$Rstore' =  store-rvars($Var1, $Var2, $Val, $Rstore)
	======================================================================
	evalx({ <$Var1,$Var2> <- $Exp1 :: $Exp2 }, $Rstore) = evalx($Exp2, $Rstore')

%% ---- Generator: assignment, N variables: <V1, V2, ..., Vn> <- E

[eat-1a]	
	$Val = evalx($Exp1, $Rstore),
	$Rstore' =  store-rvars($Var1, $Var2, $Var+, $Val, $Rstore)
	======================================================================
	evalx({ <$Var1,$Var2, $Var+> <- $Exp1 :: $Exp2 }, $Rstore) = evalx($Exp2, $Rstore')

%% ---- Simple generator, extract one value V : E

[ei-1]	$Val = evalx($Exp1, $Rstore)
	=======================================
	evalx({ $Var : $Exp1 :: $Exp2 }, $Rstore) = eval-itern($Var, $Val, {}, $Exp2, $Rstore)

%% ---- Simple generator, extract two values <V1, V2> : E

[ei2-1]	$Val = evalx($Exp1, $Rstore)
	=======================================
	evalx({ <$Var1, $Var2> : $Exp1 :: $Exp2 }, $Rstore) = 
	eval-itern($Var1, $Var2, $Val, {}, $Exp2, $Rstore)

%% ---- Simple generator, extract N values <V1, V2, ...> : E

[ei2-1]	$Val = evalx($Exp1, $Rstore)
	=======================================
	evalx({ <$Var1, $Var2, $Var+> : $Exp1 :: $Exp2 }, $Rstore) = 
	eval-itern($Var1, $Var2, $Var+, $Val, {}, $Exp2, $Rstore)

%% ---- eval-itern: the workhorse for comprehensions

[ei2-2]	$Rstore' = store-rvars($Var+, $Elem, $Rstore),
	$Val' = evalx($Exp, $Rstore'),
	eval-itern($Var+, {$Elem*}, append($Val, $Val'), $Exp, $Rstore') = $Elem'
	======================================================
	eval-itern($Var+, {$Elem, $Elem*}, $Val, $Exp, $Rstore) = $Elem'

[ei2-3]	eval-itern($Var+, {}, $Elem, $Exp2, $Rstore) = $Elem

%% ---- Auxiliary functions for evaluating comprehensions

%% ---- Assign to list of variables

[sv1]	$Rstore' = assign($Var, $Elem1, $Rstore)
	=====================================================
	store-rvars($Var, $Var+, <$Elem1, $Elem2>, $Rstore) =
	store-rvars($Var+, $Elem2, $Rstore')

[sv2]	$Rstore' = assign($Var, $Elem, $Rstore)
	=====================================================
	store-rvars($Var, $Elem, $Rstore) = $Rstore'

%% --- Append

[AP0]	append($Elem, *undefined*) = $Elem
[AP1]	append($Bag, $Elem) = union2($Bag, $Elem)
[AP2]	append($Bag1, $Bag2) = union($Bag1, $Bag2)

%% ---- Exists

[EXB1]	$Bag = evalb($Exp, $Rstore)
	=========================================
	evalx(exists($Var : $Exp | $Test), $Rstore) = exists($Var, $Bag, $Test, $Rstore)

[EXB1]	$Bag = evalb($Exp, $Rstore)
	=========================================
	evalx(exists(<$Var1, $Var2> : $Exp | $Test), $Rstore) = exists($Var1, $Var2, $Bag, $Test, $Rstore)

[EXB1]	$Bag = evalb($Exp, $Rstore)
	=========================================
	evalx(exists(<$Var1, $Var2, $Var+> : $Exp | $Test), $Rstore) = exists($Var1, $Var2, $Var+, $Bag, $Test, $Rstore)

[ex1]	$Rstore' = store-rvars($Var+, $Elem, $Rstore)
	======================================================
	exists($Var+, {$Elem, $Elem*}, $Test, $Rstore) = 
	if evalp($Test, $Rstore') then true else exists($Var+, {$Elem*}, $Test, $Rstore) fi

[ex2]	exists($Var+, {}, $Test, $Rstore) = false

%% ---- Forall

[AL1]	$Bool = evalp(exists($Var : $Exp | not $Test), $Rstore)
	==========================================
	evalx(forall($Var : $Exp | $Test), $Rstore) = not($Bool)

[AL2]	$Bool = evalp(exists(<$Var1, $Var2> : $Exp | not $Test), $Rstore)
	==========================================
	evalx(forall(<$Var1, $Var2> : $Exp | $Test), $Rstore) = not($Bool)

[AL3]	$Bool = evalp(exists(<$Var1, $Var2, $Var+> : $Exp | not $Test), $Rstore)
	==========================================
	evalx(forall(<$Var1, $Var2, $Var+> : $Exp | $Test), $Rstore) = not($Bool)

%% ---- Where expressions

[WH1]	eval-rstats($Stat+, $Rstore) = $Rstore'
	=================================================
	evalx($Exp where $Stat+ endwhere, $Rstore) =  evalx($Exp, $Rstore')	

%% ---- Function calls

%% ---- Bind formals

[bf1]	$Val = evalx($Exp, $Rstore),
	$Rstore' = assign($Var, $Val, $Rstore)
	====================================================
	bind-formals($Var, $Var+, $Exp, $Exp+, $Rstore) =
	bind-formals($Var+, $Exp+, $Rstore')

[bf1]	$Val = evalx($Exp, $Rstore),
	$Rstore' = assign($Var, $Val, $Rstore)
	====================================================
	bind-formals($Var, $Exp, $Rstore) = $Rstore'

%% ---- General case for function application

[default-fun]
	value($Var1, $Rstore) = <$Var+, $Exp2>,
	bind-formals($Var+, $Exp+, $Rstore) = $Rstore'
	====================================================
	evalx($Var1($Exp+), $Rstore) = evalx($Exp2, $Rstore')

%% ---- Special cases for all built-in functions

[Fid]	$Bag  = evalb($Exp, $Rstore)
	====================================================
	evalx(id($Exp), $Rstore) = id($Bag)

[Fdom]	$Rel = evalr($Exp, $Rstore)
	====================================================
	evalx(domain($Exp), $Rstore) = domain($Rel)

[Fran]	$Rel = evalr($Exp, $Rstore)
	====================================================
	evalx(range($Exp), $Rstore) = range($Rel)

[Fcar]	$Rel = evalr($Exp, $Rstore)
	====================================================
	evalx(carrier($Exp), $Rstore) = carrier($Rel)
	
[Ftop]	$Rel = evalr($Exp, $Rstore)
	====================================================
	evalx(top($Exp), $Rstore) = top($Rel)

[Fbot]	$Rel = evalr($Exp, $Rstore)
	====================================================
	evalx(bottom($Exp), $Rstore) = bottom($Rel)

[Finv]	$Rel = evalr($Exp, $Rstore)
	===================================================
	evalx(inv($Exp), $Rstore) = inv($Rel)

[Fcmp]	$Rel = evalr($Exp, $Rstore)
	===================================================
	evalx(compl($Exp), $Rstore) = compl($Rel)

[Ffst]	evalx($Exp, $Rstore) = <$Elem1, $Elem2>
	===================================================
	evalx(first($Exp), $Rstore) = $Elem1

[Fsec]	evalx($Exp, $Rstore) = <$Elem1, $Elem2>
	===================================================
	evalx(second($Exp), $Rstore) = $Elem2

[Fpower0]	
	$Bag  = evalb($Exp, $Rstore)
	====================================================
	evalx(power0($Exp), $Rstore) = power0($Bag)

[Fpower1]	
	$Bag  = evalb($Exp, $Rstore)
	====================================================
	evalx(power1($Exp), $Rstore) = power1($Bag)
	
[RdomR]	$Rel = evalr($Exp1, $Rstore), $Bag = evalb($Exp2, $Rstore)
	===================================================
	evalx(domainR($Exp1, $Exp2), $Rstore) = domR($Rel, $Bag)

[FranR]	$Rel = evalr($Exp1, $Rstore), $Bag = evalb($Exp2, $Rstore)
	===================================================
	evalx(rangeR($Exp1, $Exp2), $Rstore) = ranR($Rel, $Bag)

[FcarR]	$Rel = evalr($Exp1, $Rstore), $Bag = evalb($Exp2, $Rstore)
	====================================================
	evalx(carrierR($Exp1, $Exp2), $Rstore) = carR($Rel, $Bag)

[FdomX]	$Rel = evalr($Exp1, $Rstore), $Bag = evalb($Exp2, $Rstore)
	====================================================
	evalx(domainX($Exp1, $Exp2), $Rstore) = domX($Rel, $Bag)

[FranX]	$Rel = evalr($Exp1, $Rstore), $Bag = evalb($Exp2, $Rstore)
	====================================================
	evalx(rangeX($Exp1, $Exp2), $Rstore) = ranX($Rel, $Bag)

[FcarX]	$Rel = evalr($Exp1, $Rstore), $Bag = evalb($Exp2, $Rstore)
	====================================================
	evalx(carrierX($Exp1, $Exp2), $Rstore) = carX($Rel, $Bag)

[FrX]	$Bag1 = evalb($Exp1, $Rstore),
	$Bag2 = evalb($Exp2, $Rstore),
	$Rel  = evalr($Exp3, $Rstore)
	================================================= 
	evalx(reachX($Exp1, $Exp2, $Exp3), $Rstore) =
	reachX($Bag1, $Bag2, $Rel)	

[FrR]	$Bag1 = evalb($Exp1, $Rstore),
        $Bag2 = evalb($Exp2, $Rstore),
        $Rel  = evalr($Exp3, $Rstore)
        ================================================= 
        evalx(reachR($Exp1, $Exp2, $Exp3), $Rstore) =
        reachR($Bag1, $Bag2, $Rel)

%% ---- Auxiliary functions for powerset

[ae1]	add-element($Elem, {{$Elem*1}, $Elem*2}) =
	union({{$Elem, $Elem*1}}, add-element($Elem, {$Elem*2}))

[ae2]	add-element($Elem, {}) = {}

[pw01]	power0({$Elem*}) = $Bag1,
	add-element($Elem, $Bag1) = $Bag2
	====================================================
	power0({$Elem, $Elem*}) = union($Bag1, $Bag2)

[pw02]	power0({}) = {{}}

[pw11]	power1($Bag) = diff(power0($Bag), {{}})

[fn]	evalx(filename($Exp), $Rstore)	=  get-filename(evala($Exp, $Rstore))

[bl]	evalx(beginline($Exp), $Rstore) = get-beginline(evala($Exp, $Rstore))

[bc]	evalx(begincol($Exp), $Rstore) 	= get-begincol(evala($Exp, $Rstore))

[el]	evalx(endline($Exp), $Rstore) 	= get-endline(evala($Exp, $Rstore))

[ec]	evalx(endcol($Exp), $Rstore) 	= get-endcol(evala($Exp, $Rstore))

%% ---- sum

[sumx1]
	sumx({$Integer1, $Elem*}, $Integer2) = sumx({$Elem*}, $Integer1 + $Integer2)

[sumx2]	sumx({}, $Integer) = $Integer

[default-sumx]
	sumx({$Elem, $Elem*}, $Integer2) = sumx({$Elem*}, $Integer2)

[sum1]	$Bag = evalx($Exp, $Rstore)
	========================================
	evalx(sum($Exp), $Rstore) = sumx($Bag, 0)

%% ---- max

[max11]
	max1({$Integer, $Elem*}) = max2({$Elem*}, $Integer)
[max12]
	max1({}) = 0
[default-max1]
	max1({$Elem, $Elem*}) = max1({$Elem*})


[max21]	$Integer1 > $Integer2 = true
	===========================================================================
	max2({$Integer1, $Elem*}, $Integer2) = max2({$Elem*}, $Integer1)

[max22]	max2({}, $Integer) = $Integer

[default-max2]
	max2({$Elem, $Elem*}, $Integer2) = max2({$Elem*}, $Integer2)

[max-1]	$Bag = evalx($Exp, $Rstore)
	========================================
	evalx(max($Exp), $Rstore) = max1($Bag)

%% ---- min

[min11]
	min1({$Integer, $Elem*}) = min2({$Elem*}, $Integer)
[min12]
	min1({}) = 0
[default-min1]
	min1({$Elem, $Elem*}) = min1({$Elem*})


[min21]	$Integer1 < $Integer2 = true
	===========================================================================
	min2({$Integer1, $Elem*}, $Integer2) = min2({$Elem*}, $Integer1)

[min22]	min2({}, $Integer) = $Integer

[default-min2]
	min2({$Elem, $Elem*}, $Integer2) = min2({$Elem*}, $Integer2)

[min-1]	$Bag = evalx($Exp, $Rstore)
	========================================
	evalx(min($Exp), $Rstore) = min1($Bag)







