 equations

%% --- Simplify n-ary tuples

[st1]	$Exps = $Exp'
	=============================================================
	<$Exp1, $Exp2, $Exps> = <$Exp1, <$Exp2, $Exp'>>

[st2]	$Exps1 = $Exp', $Exps2
	=============================================================
	<$Exp1, $Exp2, $Exps1> = <$Exp1, <$Exp2, $Exp', $Exps2>>

%% Increment a variable

[INC1]	value($Var, $Rstore) = $Integer
	==================================================
	increment($Var, $Rstore) = assign($Var, $Integer + 1, $Rstore)

%%%%---- Equality on elements

[ee1]	equal-elem($Bool, $Bool)	= true
[ee2]	equal-elem($Integer, $Integer)	= true
[ee3]	equal-elem($String, $String)	= true
[ee4]	equal-elem($Bag1, $Bag2) 	= equal($Bag1, $Bag2)

[default-ee] 
	equal-elem($Elem, $Elem') 		= false

%% --- Equality on RVALUEs

[er1]	equal-rval($Bag1, $Bag2) = equal($Bag1, $Bag2)
[er2]	equal-rval($Rel1, $Rel2) = equal($Rel1, $Rel2)
[er3]	equal-rval($Val, $Val)  = true
[default-er] 
	equal-rval($Val1, $Val2) = false

[v2b]	rval2bag($Bag) = $Bag
[v2r]	rval2rel($Rel) = $Rel

%% ---- Tests on RVALUEs

[ir1]	is-rel({<$Elem1,$Elem2>, $Elem*}) = true
[default-ir]
	is-rel($Val) = false

%%---- Specialized versions of evalx that return value of required type

[EVP]	$Bool = evalx($Exp, $Rstore) 	===> evalp($Exp, $Rstore) = $Bool
[EVE1]	$Elem = evalx($Exp, $Rstore)   	===> evale($Exp, $Rstore) = $Elem
[EVE2]	$Tuple = evalx($Exp, $Rstore)	===> evalt($Exp, $Rstore) = $Tuple
[EVB1]	$Bag = evalx($Exp, $Rstore)     ===> evalb($Exp, $Rstore) = $Bag
[EVR1]	$Rel = evalx($Exp, $Rstore)     ===> evalr($Exp, $Rstore) = $Rel

%% --- Test suite support

[ETS1]	$Rstore = eval-rscript($Rscript),
	$Integer1 = value(NPASSED, $Rstore),
	$Integer2 = value(NFAILED, $Rstore),
	$Val = value(FAILED, $Rstore)
	==========================================================
	eval-rscript-testsuite($Rscript) = testsuite-report($Integer1, $Integer2, $Val)

[TSR1] testsuite-report($Integer, 0, $Val) = All $Integer tests passed

[TSR1] 	$Integer2 != 0
	===========================================================
	testsuite-report($Integer1, $Integer2, $Val) = 
	$Integer2 of $Integer1 tests failed: $Val

%% ---- Eval complete script

[ES1]	eval-rscript($Stat*) = eval-rstats($Stat*, rstore(<NPASSED,0>,<NFAILED,0>,<FAILED,{}>))

%% ---- Eval complete script and yield value of a variable

[ES2]	$Elem =  value($Var, eval-rstats($Stat*, $Rstore))
	===================================================
	eval-rscript($Stat*, $Var, $Rstore) = $Elem

%% ---- Eval statements

[ES2]	eval-rstats($Stat $Stat*, $Rstore) = eval-rstats($Stat*, eval-rstat($Stat, $Rstore))
[ES3]	eval-rstats( , $Rstore) = $Rstore


[ev1]	extract-rvars($DclRvar+) = $Var+
	===================================================
	extract-rvars($Etype $Var, $DclRvar+) = $Var, $Var+

[ev1]	extract-rvars($Etype $Var) = $Var


%% ---- Eval one statement

[S1]	eval-rstat(bool $Var, $Rstore) 		= assign-when-undef($Var, true, $Rstore)
[S2]	eval-rstat(int $Var, $Rstore)  		= assign-when-undef($Var, 0, $Rstore)
[S3]	eval-rstat(str $Var, $Rstore)  		= assign-when-undef($Var, "", $Rstore)
[S4]	eval-rstat(node $Var, $Rstore)		= assign-when-undef($Var, area("",0,0,0,0), $Rstore)
[S5]	eval-rstat(bag[$Etype] $Var, $Rstore)  	= assign-when-undef($Var, {}, $Rstore)	
	
[S6]	eval-rstat(rel[$Etype1, $Etype2] $Var, $Rstore) 
						= assign-when-undef($Var, {}, $Rstore)
[S7]	eval-rstat($Etype $Var, $Rstore)	 	= $Rstore

[S8]	eval-rstat($Etype $Var = $Exp, $Rstore) = assign($Var, evalx($Exp, $Rstore), $Rstore)

[S9]	eval-rstat($Etype1 $Var1($DclRvar+) = $Exp, $Rstore) 
						= assign($Var1, <extract-rvars($DclRvar+), $Exp>, $Rstore)

[S10]	evalp($Exp,$Rstore) = true
	===================================================
	eval-rstat(assert $String : $Exp, $Rstore)= increment(NPASSED, $Rstore)

[S11]	evalp($Exp,$Rstore) = false, add-elem(FAILED, $String, $Rstore) = $Rstore'
	===================================================
	eval-rstat(assert $String : $Exp, $Rstore)= increment(NFAILED, $Rstore')

%% --- Solve Sets of equations

[SL1]	eval-rstat(solve {$Var1 = $Exp1}, $Rstore) = 
	solve1(1000, $Var1, $Exp1, $Rstore)

[SL1]	eval-rstat(solve($Integer) {$Var1 = $Exp1}, $Rstore) = 
	solve1($Integer, $Var1, $Exp1, $Rstore)

[SL2]	eval-rstat(solve {$Var1 = $Exp1, $Var2 = $Exp2}, $Rstore) = 
	solve2(1000, $Var1, $Exp1, $Var2, $Exp2, $Rstore)

[SL2]	eval-rstat(solve($Integer){$Var1 = $Exp1, $Var2 = $Exp2}, $Rstore) = 
	solve2($Integer, $Var1, $Exp1, $Var2, $Exp2, $Rstore)

[SL1-1]	$Integer > 0 = true,
	$Val1 = value($Var1, $Rstore),
	$Val1' = evalx($Exp1, $Rstore),
	$Rstore' = assign($Var1, $Val1', $Rstore),
	equal-rval($Val1, $Val1') = false
	===========================================
	solve1($Integer, $Var1, $Exp1, $Rstore) =
	solve1($Integer - 1, $Var1, $Exp1, $Rstore')

[default-SL1-2]	
	solve1($Integer, $Var1, $Exp1, $Rstore) = $Rstore


[SL2-1]	$Integer > 0 = true,
	$Val1 = value($Var1, $Rstore),
	$Val1' = evalx($Exp1, $Rstore),
	$Val2 = value($Var2, $Rstore),
	$Val2' = evalx($Exp2, $Rstore),
	$Rstore' = assign($Var1, $Val1', $Rstore),
	$Rstore'' = assign($Var2, $Val2', $Rstore'),
	equal-rval($Val1, $Val1') & equal-rval($Val2, $Val2') = false
	===========================================
	solve2($Integer, $Var1, $Exp1, $Var2, $Exp2, $Rstore) =
	solve2($Integer - 1, $Var1, $Exp1, $Var2, $Exp2, $Rstore'')

[default-SL2-2]	
	solve2($Integer, $Var1, $Exp1, $Var2, $Exp2, $Rstore) = $Rstore

%% ---- Eval one REXP

%% ---- The main evaluation function evalx

%% ---- Eval elements, tuples and variables

[ELM]	evalx($Elem, $Rstore) = $Elem

[VAR1]	$Elem = value($Var, $Rstore)
	=================================================
	 evalx($Var, $Rstore)  = $Elem

%% ---- Eval tuples

[ET1]	$Elem1 = evale($Exp1, $Rstore),
	$Elem2 = evale($Exp2, $Rstore)
	==================================================
	evalx(<$Exp1, $Exp2>, $Rstore) = <$Elem1, $Elem2>

%% ---- Eval bags

[EB2]   $Elem = evale($Exp, $Rstore),
	{$Elem+} = evalb({$Exp+}, $Rstore)
	===================================================
	evalx({$Exp, $Exp+}, $Rstore) = {$Elem, $Elem+}

[EB2]   $Elem = evale($Exp, $Rstore)
	===================================================
	evalx({$Exp}, $Rstore) = {$Elem}

%% ---- Eval binary operators

[AND1]	evalx($Exp1 and $Exp2, $Rstore) 	= apply(evalx($Exp1, $Rstore), and, evalx($Exp2, $Rstore))
[AND2]	apply($Bool1, and, $Bool2) 		= $Bool1 & $Bool2

[OR1]	evalx($Exp1 or $Exp2, $Rstore) 		= apply(evalx($Exp1, $Rstore), or, evalx($Exp2, $Rstore))
[OR2]	apply($Bool1, or, $Bool2)		= $Bool1 | $Bool2

[IMP1]	evalx($Exp1 implies $Exp2, $Rstore) 	= apply(evalx($Exp1, $Rstore), implies, evalx($Exp2, $Rstore))
[IMP2]	apply($Bool1, implies, $Bool2)		= not($Bool1 & not($Bool2))	

[IN1]	evalx($Exp1 in $Exp2, $Rstore) 		= apply(evalx($Exp1, $Rstore), in, evalx($Exp2, $Rstore))
[IN2]	apply($Tuple, in, $Rel)			= in($Tuple, $Rel)
[IN3]	apply($Elem, in, $Bag)			= in($Elem, $Bag)

[NI1]	$Bool = apply(evalx($Exp1, $Rstore), in, evalx($Exp2, $Rstore))
	===========================================================
	evalx($Exp1 notin $Exp2, $Rstore)= not($Bool)

[EQ1]	evalx($Exp1 == $Exp2, $Rstore) 	= apply(evalx($Exp1, $Rstore), ==, evalx($Exp2, $Rstore))

[EQ2]	apply($Elem1, ==, $Elem2) 	= equal-elem($Elem1, $Elem2)

[NE1]	$Bool = apply(evalx($Exp1, $Rstore), ==, evalx($Exp2, $Rstore))
	===========================================================
	evalx($Exp1 != $Exp2, $Rstore) 	= not($Bool)

[LE1]	evalx($Exp1 <= $Exp2, $Rstore) 	= apply(evalx($Exp1, $Rstore), <=, evalx($Exp2, $Rstore))
[LE2]	apply($Rel1, <=, $Rel2)		= subset($Rel1, $Rel2)
[LE3]	apply($Bag1, <=, $Bag2)		= subset($Bag1, $Bag2)
[LE4]	apply($Integer1, <=, $Integer2) 	= $Integer1 <= $Integer2

[LT1]	evalx($Exp1 < $Exp2, $Rstore) 	= apply(evalx($Exp1, $Rstore), <, evalx($Exp2, $Rstore))
[LT2]	apply($Rel1, <, $Rel2) 		= strict-subset($Rel1,  $Rel2)
[LT2]	apply($Bag1, <, $Bag2) 		= strict-subset($Bag1,  $Bag2)
[LT3]	apply($Integer1, <, $Integer2) 	= $Integer1 < $Integer2

[GE1]	$Bool = apply(evalx($Exp1, $Rstore), <, evalx($Exp2, $Rstore))
	==========================================================
	evalx($Exp1 >= $Exp2, $Rstore) 	= not($Bool)

[GT1]	$Bool = apply(evalx($Exp1, $Rstore), <=, evalx($Exp2, $Rstore))
	===========================================================
	evalx($Exp1 > $Exp2, $Rstore) 	= not($Bool)

[UN1]	evalx($Exp1 union $Exp2, $Rstore)= apply(evalx($Exp1, $Rstore), union, evalx($Exp2, $Rstore))

[UN2]	apply($Bag1, union, $Bag2)	= union($Bag1, $Bag2)
[UN3]	apply($Elem, union, $Bag) 	= union({$Elem}, $Bag)
[UN4]	apply($Bag, union, $Elem) 	= union($Bag, {$Elem})
[UN5]	apply($Elem1, union, $Elem2)	= union({$Elem1}, {$Elem2})

[IN1]	evalx($Exp1 inter $Exp2, $Rstore)= apply(evalx($Exp1, $Rstore), inter, evalx($Exp2, $Rstore))

[IN2]	apply($Bag1, inter, $Bag2) 	= inter($Bag1, $Bag2)
[IN3]	apply($Elem, inter, $Bag) 	= inter({$Elem}, $Bag)
[IN4]	apply($Bag, inter, $Elem)	= inter($Bag, {$Elem})
[IN5]	apply($Elem1, inter, $Elem2)	= inter({$Elem1}, {$Elem2})

%% -- difference

[DF1]	evalx($Exp1 \ $Exp2, $Rstore)	= apply(evalx($Exp1, $Rstore), \, evalx($Exp2, $Rstore))

[DF2]	apply($Bag1, \, $Bag2) 		= diff($Bag1, $Bag2)
[DF3]	apply($Elem, \, $Bag) 		= diff({$Elem}, $Bag)
[DF4]	apply($Bag, \, $Elem) 		= diff($Bag, {$Elem})
[DF5]	apply($Elem1, \, $Elem2)	= diff({$Elem1}, {$Elem2})

%% -- composition

[CM1]	evalx($Exp1 o $Exp2, $Rstore)	= apply(evalx($Exp1, $Rstore), o, evalx($Exp2, $Rstore))
[CM2]	apply($Rel1, o, $Rel2) 		= compose($Rel1, $Rel2)
[CM3]	apply($Tuple, o, $Rel)     	= compose({$Tuple}, $Rel)
[CM4]	apply($Rel, o, $Tuple)     	= compose($Rel, {$Tuple})
[CM5]	apply($Tuple1, o, $Tuple2) 	= compose({$Tuple1}, {$Tuple2})

%% -- product

[CP1]	evalx($Exp1 x $Exp2, $Rstore)	= apply(evalx($Exp1, $Rstore), x, evalx($Exp2, $Rstore))

[CP2]	apply($Bag1, x, $Bag2) 		= product($Bag1, $Bag2)
[CP3]	apply($Elem, x, $Bag)    	= product({$Elem}, $Bag)
[CP4]	apply($Bag, x, $Elem)     	= product($Bag, {$Elem})

%% -- Image

[IM1]	evalx($Exp1 . $Exp2, $Rstore)	= apply(evalx($Exp1, $Rstore), ., evalx($Exp2, $Rstore))
 
[IM2]	apply($Rel, ., $Elem)		= limage($Rel, $Elem) when is-rel($Rel) = true
[IM3]	apply($Elem, ., $Rel)		= rimage($Elem, $Rel) when is-rel($Rel) = true

[IM4]	apply($Bag, ., $Rel)		= rimage($Bag,  $Rel) when is-rel($Rel) = true
[IM5]	apply($Rel, ., $Bag)		= limage($Rel,  $Bag) when is-rel($Rel) = true

[default-IM11]
	apply($Val1, ., $Val2)		= {}

%% -- [ ]
[IM1]	evalx($Exp1 [ $Exp2 ], $Rstore)	= evalx($Exp2 . $Exp1, $Rstore)

%% --- Eval unary prefix operators

[NOT1]	evalx(not $Exp, $Rstore) 	= apply(not, evalx($Exp, $Rstore))
[NOT1]	apply(not, $Bool)		= not($Bool)

[SZ1]	evalx(# $Exp, $Rstore) 		= apply(#, evalx($Exp, $Rstore))
[SZ1]	apply(#, $Rel) 			= size($Rel)
[SZ2]	apply(#, $Bag) 			= size($Bag)

%% --- Eval unary postfix operators

[TC1]	evalx($Exp +, $Rstore)		= apply(evalx($Exp, $Rstore), +)
[TC2]	apply($Rel, +)			= trans-closure($Rel)

[RTC1]	evalx($Exp *, $Rstore)		= apply(evalr($Exp, $Rstore), *)
[RTC2]	apply($Rel, *)			= rtrans-closure($Rel)

%% ---- Eval bag and relation formers

%% --- Simplify multiple froms

[RF2]	{$Exp | $From+}  =  {$From+ :: $Exp}

[XX] 	{$From, $From+ :: $Exp } = { $From :: {$From+ :: $Exp}}

%% --- test

[et-1a]	$Bool =  evalp($Test, $Rstore)
	======================================================================
	evalx({$Test :: $Exp} , $Rstore) = if $Bool then evalx($Exp, $Rstore) else *undefined* fi

%% --- assignment, single variable

[ea-1a]	$Val = evalx($Exp1, $Rstore),
	$Rstore' =  assign($Var, $Val, $Rstore)
	======================================================================
	evalx({ $Var <- $Exp1 :: $Exp2 }, $Rstore) = evalx($Exp2, $Rstore')

%% --- assignment, two variables

[eat-1a]	
	$Val = evalx($Exp1, $Rstore),
	$Rstore' =  store-var($Var1, $Var2, $Val, $Rstore)
	======================================================================
	evalx({ <$Var1,$Var2> <- $Exp1 :: $Exp2 }, $Rstore) = evalx($Exp2, $Rstore')

%% --- assignment, N variables

[eat-1a]	
	$Val = evalx($Exp1, $Rstore),
	$Rstore' =  store-var($Var1, $Var2, $Var+, $Val, $Rstore)
	======================================================================
	evalx({ <$Var1,$Var2, $Var+> <- $Exp1 :: $Exp2 }, $Rstore) = evalx($Exp2, $Rstore')

%% --- Extract one value 

[ei-1]	$Val = evalx($Exp1, $Rstore)
	=======================================
	evalx({ $Var : $Exp1 :: $Exp2 }, $Rstore) = eval-itern($Var, $Val, {}, $Exp2, $Rstore)

%% --- Extract two values

[ei2-1]	$Val = evalx($Exp1, $Rstore)
	=======================================
	evalx({ <$Var1, $Var2> : $Exp1 :: $Exp2 }, $Rstore) = 
	eval-itern($Var1, $Var2, $Val, {}, $Exp2, $Rstore)

%% --- Extract N values

[ei2-1]	$Val = evalx($Exp1, $Rstore)
	=======================================
	evalx({ <$Var1, $Var2, $Var+> : $Exp1 :: $Exp2 }, $Rstore) = 
	eval-itern($Var1, $Var2, $Var+, $Val, {}, $Exp2, $Rstore)

%% --- eval-itern: the workhorse for bag/rel formers

[ei2-2]	$Rstore' = store-var($Var+, $Elem, $Rstore),
	$Val' = evalx($Exp, $Rstore'),
	eval-itern($Var+, {$Elem*}, append($Val, $Val'), $Exp, $Rstore') = $Val''
	======================================================
	eval-itern($Var+, {$Elem, $Elem*}, $Val, $Exp, $Rstore) = $Val''

[ei2-3]	eval-itern($Var+, {}, $Val, $Exp2, $Rstore) = $Val

%% -- Assign to list of variables

[sv1]	$Rstore' = assign($Var, $Elem1, $Rstore)
	=====================================================
	store-var($Var, $Var+, <$Elem1, $Elem2>, $Rstore) =
	store-var($Var+, $Elem2, $Rstore')

[sv2]	$Rstore' = assign($Var, $Elem, $Rstore)
	=====================================================
	store-var($Var, $Elem, $Rstore) = $Rstore'

%% ---- Auxiliary functions for bag and relation formers

[AP0]	append($Elem, *undefined*) = $Elem

[AP1]	append($Bag, $Elem) = union2($Bag, $Elem)
[AP2]	append($Bag1, $Bag2) = union($Bag1, $Bag2)

%%%% --- Exists in bag
%%
%%[EXB1]	$Bag = evalb($Exp, $Rstore)
%%	=========================================
%%	evalx(exists($Var in $Exp | $Test), $Rstore) = existsb($Var, $Bag, $Test, $Rstore)
%%
%%[EXB2]	$Rstore' = assign($Var, $Elem, $Rstore)
%%	=========================================
%%	existsb($Var, [$Elem, $Elem*], $Test, $Rstore) =
%%	if evalp($Test, $Rstore') then true else existsb($Var, [$Elem*], $Test, $Rstore) fi
%%
%%[EXB3]	existsb($Var, [], $Test, $Rstore) = false
%%
%%%% --- Exists in relation
%%
%%[EXR1]	$Rel = evalr($Exp, $Rstore)
%%	=========================================
%%	evalx(exists(<$Var1, $Var2> in $Exp | $Test), $Rstore) = existsr($Var1, $Var2, $Rel, $Test, $Rstore)
%%
%%[EXR1]	$Rstore' = assign($Var1, $Elem1, $Rstore),
%%	$Rstore'' = assign($Var2, $Elem2, $Rstore')
%%	=========================================
%%	existsr($Var1, $Var2, {<$Elem1, $Elem2>, $Tuple*}, $Test, $Rstore) =
%%	if evalp($Test, $Rstore'') then true else existsr($Var1, $Var2, {$Tuple*}, $Test, $Rstore) fi
%%
%%[EXR2]	existsr($Var1, $Var2, {}, $Test, $Rstore) = false
%%
%%%%%% --- Forall in bag
%%
%%[ALB1]	$Bool = evalp(exists($Var in $Exp | not $Test), $Rstore)
%%	==========================================
%%	evalx(forall($Var in $Exp | $Test), $Rstore) = not($Bool)
%%
%%%% --- Forall in relation
%%
%%[ALB1]	$Bool = evalp(exists(<$Var1, $Var2> in $Exp | not $Test), $Rstore)
%%	==========================================
%%	evalx(forall(<$Var1, $Var2> in $Exp | $Test), $Rstore) = not($Bool)

%% ------------------------------

%%  ---- Function calls

%% --- Bind formals

[bf1]	$Val = evalx($Exp, $Rstore),
	$Rstore' = assign($Var, $Val, $Rstore)
	====================================================
	bind-formals($Var, $Var+, $Exp, $Exp+, $Rstore) =
	bind-formals($Var+, $Exp+, $Rstore')

[bf1]	$Val = evalx($Exp, $Rstore),
	$Rstore' = assign($Var, $Val, $Rstore)
	====================================================
	bind-formals($Var, $Exp, $Rstore) = $Rstore'

%% --- General case for function application

[default-fun]
	value($Var1, $Rstore) = <$Var+, $Exp2>,
	bind-formals($Var+, $Exp+, $Rstore) = $Rstore'
	====================================================
	evalx($Var1($Exp+), $Rstore) = evalx($Exp2, $Rstore')

%% --- Special cases for all built-in functions

[Fid]	$Bag  = evalb($Exp, $Rstore)
	====================================================
	evalx(id($Exp), $Rstore) = id($Bag)

[Fdom]	$Rel = evalr($Exp, $Rstore)
	====================================================
	evalx(domain($Exp), $Rstore) = domain($Rel)

[Fran]	$Rel = evalr($Exp, $Rstore)
	====================================================
	evalx(range($Exp), $Rstore) = range($Rel)

[Fcar]	$Rel = evalr($Exp, $Rstore)
	====================================================
	evalx(carrier($Exp), $Rstore) = carrier($Rel)
	
[Ftop]	$Rel = evalr($Exp, $Rstore)
	====================================================
	evalx(top($Exp), $Rstore) = top($Rel)

[Fbot]	$Rel = evalr($Exp, $Rstore)
	====================================================
	evalx(bottom($Exp), $Rstore) = bottom($Rel)

[Finv]	$Rel = evalr($Exp, $Rstore)
	===================================================
	evalx(inv($Exp), $Rstore) = inv($Rel)

[Fcmp]	$Rel = evalr($Exp, $Rstore)
	===================================================
	evalx(compl($Exp), $Rstore) = compl($Rel)

[Ffst]	evalx($Exp, $Rstore) = <$Elem1, $Elem2>
	===================================================
	evalx(first($Exp), $Rstore) = $Elem1

[Fsec]	evalx($Exp, $Rstore) = <$Elem1, $Elem2>
	===================================================
	evalx(second($Exp), $Rstore) = $Elem2

[Fpower]	
	$Bag  = evalb($Exp, $Rstore)
	====================================================
	evalx(power($Exp), $Rstore) = power($Bag)
	
[RdomR]	$Rel = evalr($Exp1, $Rstore), $Bag = evalb($Exp2, $Rstore)
	===================================================
	evalx(domainR($Exp1, $Exp2), $Rstore) = domR($Rel, $Bag)

[FranR]	$Rel = evalr($Exp1, $Rstore), $Bag = evalb($Exp2, $Rstore)
	===================================================
	evalx(rangeR($Exp1, $Exp2), $Rstore) = ranR($Rel, $Bag)

[FcarR]	$Rel = evalr($Exp1, $Rstore), $Bag = evalb($Exp2, $Rstore)
	====================================================
	evalx(carrierR($Exp1, $Exp2), $Rstore) = carR($Rel, $Bag)

[FdomX]	$Rel = evalr($Exp1, $Rstore), $Bag = evalb($Exp2, $Rstore)
	====================================================
	evalx(domainX($Exp1, $Exp2), $Rstore) = domX($Rel, $Bag)

[FranX]	$Rel = evalr($Exp1, $Rstore), $Bag = evalb($Exp2, $Rstore)
	====================================================
	evalx(rangeX($Exp1, $Exp2), $Rstore) = ranX($Rel, $Bag)

[FcarX]	$Rel = evalr($Exp1, $Rstore), $Bag = evalb($Exp2, $Rstore)
	====================================================
	evalx(carrierX($Exp1, $Exp2), $Rstore) = carX($Rel, $Bag)

[FrX]	$Bag1 = evalb($Exp1, $Rstore),
	$Bag2 = evalb($Exp2, $Rstore),
	$Rel  = evalr($Exp3, $Rstore)
	================================================= 
	evalx(reachX($Exp1, $Exp2, $Exp3), $Rstore) =
	reachX($Bag1, $Bag2, $Rel)	

[FrR]	$Bag1 = evalb($Exp1, $Rstore),
        $Bag2 = evalb($Exp2, $Rstore),
        $Rel  = evalr($Exp3, $Rstore)
        ================================================= 
        evalx(reachR($Exp1, $Exp2, $Exp3), $Rstore) =
        reachR($Bag1, $Bag2, $Rel)

%% --- Auxiliary functions for powerset

[ae1]	add-element($Elem, {{$Elem*1}, $Elem*2}) =
	union({{$Elem, $Elem*1}}, add-element($Elem, {$Elem*2}))

[ae2]	add-element($Elem, {}) = {}

[pw1]	power({$Elem*}) = $Bag1,
	add-element($Elem, $Bag1) = $Bag2
	====================================================
	power({$Elem, $Elem*}) = union($Bag1, $Bag2)

[pw2]	power({}) = {{}}


%% --- Where expressions

[WH1]	eval-rstats($Stat+, $Rstore) = $Rstore'
	=================================================
	evalx($Exp where $Stat+ endwhere, $Rstore) =  evalx($Exp, $Rstore')	






