module PosAnalysis

imports Pico-syntax
imports basic/Integers
imports MyPosInfo

exports
  sorts NodeId Item

  context-free syntax
     Area		-> NodeId
     PICO-ID | NodeId   -> Item

imports RelationCalculator[Item]


exports
  context-free syntax

     "list" "(" "[" { ListItem "," }* "]" ")"        -> List
     "listitem" "(" String "," "[" String "]" "," ATerm ")"  -> ListItem

      get-first({STATEMENT ";"}*)                 -> NodeId
      get-last({STATEMENT ";"}*)                  -> Bag[[Item]]

      add-succ(Rel[[Item]], RSTORE)               -> RSTORE
      add-last({STATEMENT ";"}*, NodeId, RSTORE)  -> RSTORE

      controlflow(PROGRAM, RSTORE)                -> RSTORE {traversal(accu, bottom-up, continue)}
%%      controlflow(STATEMENT, RSTORE)              -> RSTORE {traversal(accu, bottom-up, continue)}
      controlflow({ STATEMENT ";"}*, RSTORE)      -> RSTORE {traversal(accu, bottom-up, continue)}

      use-defs(PROGRAM, RSTORE)                   -> RSTORE  {traversal(accu,top-down,break)}
      use-defs(STATEMENT, RSTORE)                 -> RSTORE  {traversal(accu,top-down,break)}

      use-exp(STATEMENT, RSTORE, NodeId)          -> RSTORE  {traversal(accu,top-down,break)}
      use-exp(EXP, RSTORE, NodeId)                -> RSTORE  {traversal(accu,top-down,break)}

      analyze(PROGRAM)                            -> Rel[[Item]]
      undefined-query(RSTORE)	                  -> RSTORE

 hiddens
  imports asf/syntax/Comments

  variables
      "Int" [0-9\']*     -> Integer
      "Rstore" [0-9\']*  -> RSTORE
      "Prg"              -> PROGRAM
      
      "Rel" [0-9\']*     -> Rel[[Item]]
      "Bag" [0-9\']*     -> Bag[[Item]]
      "NodeId" [0-9\']*	 -> NodeId
 