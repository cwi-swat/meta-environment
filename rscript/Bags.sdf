module Bags[Elem]

exports 
imports basic/Booleans
imports basic/Integers

  sorts Elem Bag[[Elem]]  

context-free syntax
   "{" {Elem ","}* "}"              -> Bag[[Elem]] {constructor}

 context-free syntax

   "EmptyBag"                       -> Bag[[Elem]]

   add(Elem, Bag[[Elem]])           -> Bag[[Elem]]
   del(Elem, Bag[[Elem]])           -> Bag[[Elem]]

   Bag[[Elem]] "==" Bag[[Elem]]     -> Boolean
   Bag[[Elem]] "<=" Bag[[Elem]]     -> Boolean
   Bag[[Elem]] "<" Bag[[Elem]]      -> Boolean
   Bag[[Elem]] ">=" Bag[[Elem]]     -> Boolean
   Bag[[Elem]] ">"  Bag[[Elem]]     -> Boolean

   Bag[[Elem]] "union" Bag[[Elem]]  -> Bag[[Elem]] {left}
   Bag[[Elem]] "inter" Bag[[Elem]]  -> Bag[[Elem]] {left}
   Bag[[Elem]] "\\" Bag[[Elem]]     -> Bag[[Elem]] {left}

   "(" Bag[[Elem]] ")"              -> Bag[[Elem]] {bracket}

   "#" Bag[[Elem]]                  -> Integer
   Elem in Bag[[Elem]]              -> Boolean

   "if" Boolean "then" Bag[[Elem]] "else" Bag[[Elem]] "fi" 
                                    -> Bag[[Elem]]

 variables
   "Bag[[Elem]]" [0-9\']*           -> Bag[[Elem]]

 context-free priorities
   Bag[[Elem]] "\\" Bag[[Elem]]     -> Bag[[Elem]] >
   Bag[[Elem]] "inter" Bag[[Elem]]  -> Bag[[Elem]] >
   Bag[[Elem]] "union" Bag[[Elem]]  -> Bag[[Elem]]

hiddens
  imports asf/syntax/Comments

  variables
    "Bag" [0-9\']*           -> Bag[[Elem]]
    "E" [0-9\']*             -> Elem
    "E*" [0-9\']*            -> { Elem ","}*
    "E+" [0-9\']*            -> { Elem ","}+
