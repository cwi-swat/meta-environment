equations

%% --- Label the statements in a program

[lb-1] label(Program, 1) = <Program', Int>
       ============================
       label(Program) = Program'

[lb-2] label(Stat, Int) = < [Int] Stat, Int+1 >

[lb-3] label(  , Int) = < [Int] skip, Int+1 >

%% --- Add successors

[as-1] add-succ(Rel, Rstore) = add(SUCC, Rel, Rstore)

%% -- Construct the control flow graph

[cf1] Rstore' = add-succ({<Int, get-first(Stat*)>}, Rstore),
      Rstore''= add-last(Stat*, Int, Rstore'),
      ========================================================
      controlflow([Int] while Exp do Stat* od, Rstore) = Rstore''

[cf2] Rstore' = add-succ({ <Int1, get-first(Stat*1)>,
                           <Int1, get-first(Stat*2)> }, Rstore)
      ========================================================
      controlflow([Int1] if Exp then Stat*1 else Stat*2 fi, Rstore) = Rstore'

[cf3] controlflow(Stat+, Rstore) = Rstore'
      ========================================================
      controlflow(Stat ; Stat+, Rstore) = 
      add-succ(product(get-last(Stat), {get-first(Stat+)}), Rstore')

%% --- Get first statement of a series

[gf-1] get-first([Int] Stat; Stat*) = Int

%% --- Get last statement(s) of a series

[gl-2] get-last(Stat*; [Int] if Exp then Stat*1 else Stat*2 fi) = 
       union(get-last(Stat*1), get-last(Stat*2))

[default-gl-3] 
       get-last(Stat*; [Int] Stat) = {Int}

%% --- Add a successor to all last statements of a series

[al-1] get-last(Stat*) = Bag
       ========================================================
       add-last(Stat*, Int, Rstore) = add-succ(product(Bag, {Int}), Rstore)

%% --- Collect defines and uses

[ud-1] Rstore' = use-defs(Exp, Rstore, Int)
       ==========================================================
       use-defs([Int] Id := Exp, Rstore, Int') = add(DEFS, <Id, Int>, Rstore')

[default-ud-2] 
       use-defs([Int] Stat, Rstore, Int') = use-defs(Stat, Rstore, Int)

[ud-3] use-defs(Id, Rstore, Int) = add(USES, <Id, Int> , Rstore)

%% --- Analyze a program
 
[an-1] Program1 = label(Program),
       controlflow(Program1, []) = Rstore,
       use-defs(Program1, Rstore, 0) = Rstore',
       undefined-query(Rstore') = Rstore''
       =========================================================
       analyze(Program) = rel-value(UN, Rstore'')

[uq-1] undefined-query(Rstore) =
       eval-rscript(
      	def PRED   = inv(SUCC)
        fun reaches_root(R) = elem('1, range(R))
        def UN = { <V, N> in USES | reaches_root(dominators({<V,N>}, DEFS, PRED)) },
        Rstore
       )


         





