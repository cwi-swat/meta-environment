/* $Id$ */

tool sglr is {
  command = "sglr"
}

process SGLR is
let
  P    : sglr,
  Lid  : term,
  G    : str,
  S    : str,
  Id   : term,
  FN   : str,
  Tbl  : term,
  T    : term,
  Err  : list,
  Start: list,
  Amb  : int,
  Ambs : list
in
  (
    rec-msg(Id?, parse-string-given-table(Lid?, Tbl?, G?, S?)) .
    execute(sglr, P?) .
    snd-eval(P, open-language(Lid, Tbl)) .
    (
      rec-value(P, language-opened(Lid)) .
      snd-eval(P, parse-string(Lid, G, S)) .
      (
        rec-value(P, parsetree(T?, Amb?)) .
        snd-msg(parse-result-asfix2me(Id, parse-tree(parsetree(T, Amb))))
      +
        rec-value(P, parse-error(Err?,plain)) .
        snd-msg(parse-result-asfix2me(Id, parse-error(Err,plain)))
      +
        rec-value(P, parse-error(Err?,eof)) .
        snd-msg(parse-result-asfix2me(Id, parse-error(Err,eof)))
      +
        rec-value(P, ambiguous-tree(T?, Err?, ambiguities(Amb?, Ambs?))) .
        snd-msg(parse-result-asfix2me(Id, ambiguous-tree(parsetree(T, Amb), Err,ambiguities(Amb, Ambs))))
      +
        rec-value(P, parse-error(Err?,ambiguities(Amb?, Ambs?))) .
        snd-msg(parse-result-asfix2me(Id, parse-error(Err,ambiguities(Amb, Ambs))))
      +
        rec-value(P, parse-error(Err?,cycle(T?))) .
        snd-msg(parse-result-asfix2me(Id, parse-error(Err,cycle(T))))
      )
    +
      rec-value(P, language-not-opened(Lid)) .
      snd-msg(parse-result-asfix2me(Id, open-language-failed))
    ) .
    snd-terminate(P, "done")
  )
  * delta
endlet

toolbus(SGLR)
