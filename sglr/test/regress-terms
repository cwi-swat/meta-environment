#!/bin/sh
# $Id$

###
#  Some global variables, that might require occasional modification
###

verbose=0

cd `dirname $0`;
mydir=`pwd`

RM=rm
SGLR="sglr"
COMPARE="$mydir/trmdiff"

languages=$mydir/lang-types
tables=$mydir/tables
first=$mydir/first
terms=$mydir/terms
errterms=$mydir/erroneous

extensions=`egrep -v '^#' $languages |cut -f1`

###
#  Handle the command line, &c.
###

myname=`basename $0`
myversion="$Revision$"

# The argument vector: list of option letters, colons denote option
# arguments.  See Usage function, immediately below, for option
# explanation.
myarguments="hvV"

if [ $myarguments ] ; then
   arg2explanation='s/\(.:\)/ -\1 /g; s/ \([^-:]\)/ -\1/g; s/:/ file/g';
   myargsexplained=" -`echo $myarguments|sed -e \"$arg2explanation\"`"
fi

# Usage: displays helpful usage information
Usage() {
cat << E_O_USAGE >&2
Usage: $myname$myargsexplained . . .
Options:
    -h              display help information (usage)
    -v              verbose mode
    -V              reveal program version (i.e. $myversion)
E_O_USAGE
}

Version() {
    echo "$myname v$myversion" >&2
}

# getopt handles command line...
args=`getopt $myarguments $* 2> /dev/null`
if test $? != 0
then
        Usage
        exit 2
fi
set -- $args

# Argument interpretation...
while [ $#  -gt 0 ]
do
    case "$1"
    in
        -h)
            Usage; shift;;
        -v)
            verbose=1; shift;;
        -V)
            Version; shift;;
        --)
            shift; break;;
    # Add additional command line options here...
    *)
            Usage; shift ;;
    esac
done

###
#  Get to the real work now...
###


Notify () {
	if [ $verbose -gt 0 ]
	then
		echo $*                                   >&2
	fi
}

error=0
for ext in $extensions
do
	files=`ls $first/*.$ext $terms/*.$ext 2>/dev/null`
	errfiles=`ls $errterms/*.$ext 2>/dev/null`
	lang=`egrep "^$ext( |	)" $languages | cut -f2`
	ptbl=$tables/$lang.tbl

        for file in $files
        do
		base=`basename $file`
		dir=`dirname $file`
		out=$dir/`basename $base .$ext`.asfix2
		if [ ! -f $out.org ] ; then
			Notify "No reference term for $base"
			continue
		fi
		if $SGLR -p $ptbl -i $file -o $out
		then
	                if $COMPARE $out $out.org	> /dev/null
	                then
				Notify "Regression test for valid term $base succeeded"
		                ${RM} -f $out
			else
				Notify "Regression test for valid term $base failed"
				error=1
	                fi
		else
			echo "Error parsing $file"	>&2
			error=1
		fi
	done

        for file in $errfiles
        do
		base=`basename $file`
		dir=`dirname $file`
		out=$dir/`basename $base .$ext`.asfix2
		$SGLR --cycle -p $ptbl -i $file -o $out	2>/dev/null
	        if $COMPARE $out $out.org		> /dev/null
	        then
			Notify "Regression test for error term $base succeeded"
		        ${RM} -f $out
	        else
			Notify "Regression test for error term $base failed"
			error=1
	        fi
	done
done

exit $error
