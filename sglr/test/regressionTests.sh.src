#!/bin/bash

#Expand and print each command to stdout before executing it
#set -x 

version=1
verbose=0
VERBOSE=""
update=0
error=0
cd `dirname $0`;
currentDir=`pwd`
inputFilename=""
inputFilenameSuffix=""
outputFilename=""
orgAsfixFilename=""
parseTableFilename=""

MV=mv
RM=rm
SGLR="__SGLR_BINARY__"
ATCOMPARE="__ATERM__/bin/atdiff"
COMPARE="__PT_SUPPORT__/bin/comparePT"
ERRORCOMPARE="__ERROR_SUPPORT__/bin/error-diff"

TABLES="__SGLR__/test/tables"
TERMS="__SGLR__/test/terms"
ERRORTERMS="__SGLR__/test/erroneous"

# Usage: displays usage information on stderr
usage () {
  cat << E_O_USAGE >&2
  Usage: regressionTests runs the regression tests for SGLR.
  Options:
      -h              display help information (usage)
      -v              verbose mode
      -U              update outdated ".org" files
      -V              reveal program version (i.e. $version)
E_O_USAGE
}

version() {
  echo "regressionTests v$version" >&2
}

# Script's argument interpretation
handleScriptOptions () {
  while getopts ":hvUV" option
  do
    case $option in
      h ) usage; exit 0;;
      v ) verbose=1
          VERBOSE="-v";;
      U ) update=1;;
      V ) version;;
      * ) usage; exit 0;;
    esac
  done
  #Reset the OPTIND argument as getopts does not do this automatically
  OPTIND=1
}

warn () {
  echo $* >&2
}

error () {
  warn $*
  error=1
}

abort () {
  error $*
  exit 2
}

notify () {
  if [ $verbose -gt 0 ] ; then
    warn $*
  else
    printf "."
  fi
}

handleSGLROptions () {
  while getopts ":2Abdf::hi:lno:p:s:tvV" option
    do
      case $option in
        2 ) ;;
        A ) ;;
        b ) ;;
        d ) ;;
        f ) ;;
        h ) ;;
        i ) #Remove path
            inputPath=`eval "ls $OPTARG"`
            inputFilename=`basename $inputPath`
            dir=`dirname $inputPath`
            #Get suffix (path kept if present)
            inputFilenameSuffix="`expr "$inputFilename" : '.*\.\([^./]*\)$'`"
            #Remove suffix (path kept if present)
            name="`expr "$inputFilename" : '\(.*\)\.[^./]*$' \| "$inputFilename"`"
            outputFilename=${TMPDIR:-/var/tmp}/$name.asfix.$$
            orgAsfixFilename=$dir/$name.asfix2.org;;
        l ) ;;
        n ) ;;
        o ) ;;
        p ) parseTableFilename=`basename $OPTARG`;;
        s ) ;;
        t ) ;;
        v ) ;;
        V ) ;;
        * ) echo "SGLR option $OPTARG not recognised.";;
      esac
    done
  #Reset the OPTIND argument as getopts does not do this automatically
  OPTIND=1
}

runTermTests () {
  echo "" 
  if eval $SGLR $VERBOSE $1 -o $outputFilename ; then
    if $COMPARE -a $outputFilename $orgAsfixFilename > /dev/null ; then
      notify "SUCCEEDED regression test for term $inputFilename"
    else 
      error "FAILED regression test for term $inputFilename"
    fi
    if [ $update -eq 0 ] ; then
      if [ $error -eq 0 ] ; then 
        $RM -f $outputFilename
      fi
    else
      ${MV} $outputFilename $orgAsfixFilename
    fi
  else
    echo "Error parsing $inputFilename. NO PARSE FOREST!" >&2
    error=1
  fi
}

runErrorTests () {
  echo "" 
  eval $SGLR $VERBOSE $1 -o $outputFilename
  if $ATCOMPARE $VERBOSE $outputFilename $orgAsfixFilename > /dev/null ; then
    notify "SUCCEEDED regression test for error term $inputFilename"
  else 
    if $ERRORCOMPARE $outputFilename $orgAsfixFilename > /dev/null ; then
      notify "SUCCEEDED regression test for error term $inputFilename"
      if [ $update -eq 0 ] ; then
        $RM -f $outputFilename
      else
        ${MV} $outputFilename $orgAsfixFilename
      fi
    else
      echo "Error parsing error term $inputFilename. NO PARSE FOREST!" >&2
      error=1
    fi
  fi
}




handleScriptOptions $1
while read commandLine 
do
  #Strip comment lines and ignore whitespace
  t=`echo $commandLine | sed -e 's/^#.*$//'`
  if [ "$t" ] ; then 
    args=`echo $t | cut -d ' ' -f2-`
    handleSGLROptions $args
    runTermTests "$args"
  fi

done <termsCommandLines

while read commandLine 
do
  t=`echo $commandLine | sed -e 's/^#.*$//'`
  if [ "$t" ] ; then 
    args=`echo $t | cut -d ' ' -f2-`
    handleSGLROptions $args
    runErrorTests "$args"
  fi

done <erroneousCommandLines


