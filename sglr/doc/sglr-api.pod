=head1 NAME

B<SGinitParser>, B<SGopenLanguageFromTerm>, B<SGopenLanguage>, B<SGcloseLanguage>, B<SGreOpenLanguage>, B<SGparseString>, B<SGparseStringAsAsFix2>, B<SGparseStringAsAsFix1>, B<SGparseFile>, B<SGtermToFile>, B<SGparseFileUsingTable>, B<SGisParseTree>, B<SGisParseError> - an interface to the Scannerless Generalized LR parser


=head1 LIBRARY

SGLR library (libsglr, -lsglr)

=head1 SYNOPSIS

=over 4

=item #include <sglr.h>

=item void  B<SGinitParser>(ATbool toolbus_mode);

=item ATerm B<SGopenlanguageFromTerm>(char *errpre, char *lang, ATerm tbl);

=item ATerm B<SGopenlanguage>(char *errpre, char *lang, char *tblfil);

=item ATerm B<SGcloselanguage>(char *errpre, char *lang);

=item ATerm B<SGreOpenlanguage>(char *errpre, char *lang, char *tblfil);

=item ATerm B<SGparseString>(char *lang, char *sort, char *str);

=item ATerm B<SGparseStringAsAsFix2>(char *lang, char *sort, char *str);

=item ATerm B<SGparseStringAsAsFix1>(char *lang, char *sort, char *str);

=item ATerm B<SGparseFile>(char *errpre, char *lang, char *sort, char *infil);

=item ATerm B<SGparseFileUsingTable>(char *errpre, char *tblfil, char *sort, char *infil, char *outfil);

=item ATerm B<SGtermToFile>(char *errpre, ATerm frst, char *outfil);

=item ATbool B<SGisParseTree>(ATerm frst);

=item ATBool B<SGisParseError>(ATerm frst);

=back


=head1 DESCRIPTION

The B<SGLR> API offers high-level support for integrating parsing
functionality in other tools.

A few key concepts: to parse an input term, a parse table for the
language in which the term is supposed to be must be present.  A
database of parse tables is maintained for that purpuse.  In general,
the user first makes sure the appropriate parse table for some language
L is opened, and after that terms can be parsed over language L.

As a result, either a parse error or a parse forest will be returned.
That parse forest can be written to a file.

The functions in the API that return an C<ATerm> will return C<NULL>
on an operational error; bear in mind that an error term will be
produced (rather than C<NULL>) whenever possible.

The C<errpre> argument specifies a prefix that is used in contexts where
an error message is returned to the user.  It is typically instantiated
with the toolname, making it possible to identify the source of any
occurring error message in a possibly complex toolchain.


=head1 USAGE


B<SGinitParser> will make the parsing routines operate in default mode;
C<toolbus_mode> determines whether or not to run as a ToolBus
application.  Inspect the C<sglr.h> include file for operating modes,
and how to enable/disable them.

The B<SGopenLanguageFromTerm> and B<SGopenLanguage> make language
available.  The language is registered under the name of the C<name>
argument; it is available for later use (i.e. can be retreived from the
parse table database) by that name.  B<SGopenLanguageFromTerm> uses the
parse table, represented as an C<ATerm>, from the C<tbl> argument;
B<SGopenLanguage> reads the parse table from the file that is named
by the C<tblfil> argument.

If a parse table of the indicated name is already present, the existing
table will be used.  The B<SGreOpenlanguage>, used identically to
B<SGopenlanguage>, replaces eventually existing parse tables by the
table contained in the named file.

There are several ways of parsing an input term.  Assuming it does not
contain C<NULL> characters, it can be represented as a string. Such a
string can then be parsed using the B<SGparseString...> routines. The
C<lang> argument is a named language to parse the input term with;
optionally, an explicit top sort to be produced by the parser can be
specified using the C<sort> argument.  The term to parse is contained
as a string in C<str>.  The B<AsAsFix2> and B<AsAsFix1> variants can be
used to obtain parse trees in AsFix2 and AsFix1 results, respectively;
note that AsFix1 can contain parse trees only.

File-based parsing is provided by the B<SGparseFile> and
B<SGparseFileUsingTable> functions.  In both functions, C<sort> --
again, optional -- specifies the top sort the parse must produce.

For B<SGparseFile>, the term contained in named input file C<infil>
is parsed over the parse table as previously opened and registered
by the name C<lang>.

B<SGparseFileUsingTable> uses a parse table contained in C<tblfil>
to parse the term contained in the named file C<infil>, and writes
output to the named file C<outfil>.

After parsing, B<SGtermToFile> writes the parse forest in C<frst>
to the output file named C<outfil>.

The boolean functions B<SGisParseTree> and B<SGisParseError> inspect an
C<ATerm> and will return whether or not it contains a parsetree, resp.
a parse error.


=head1 EXAMPLES

  #include <sglr.h>

  #define ME "MyParser"
  #define L  "MyLanguageReferenceName"

  int main(int argc, char **argv)
  {
    ATerm bottomOfStack;
    ATerm forest;

    if(argc != 4) exit(1);

    AFinit(0, NULL, &bottomOfStack);

    SGinitParser(ATfalse);

    if(!SGopenLanguage(ME, L, argv[1])) {
      fprintf(stderr, "error opening language %s (in file %s)\n", L, argv[1]);
      exit(2);
    }
    if(!(forest = SGparseFile(ME, L, NULL, argv[2]))) {
      fprintf(stderr, "error parsing file %s (over %s)\n", argv[2], L);
      exit(3);
    }

    fprintf(stdout, "Parse successful, writing output to %s\n", argv[3]);
    SG_BINARY_OFF();  /*  use `-', and we'll get a parse result on stdout  */
    SGtermToFile(ME, forest, argv[3]);
    return 0;
  }

=head1 SEE ALSO

L<a2toa1>, L<sglr>


=head1 KNOWN BUGS

None.


=head1 AUTHOR

Jeroen Scheerder <S<js@cwi.nl>>
