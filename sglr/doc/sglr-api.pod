=head1 NAME

B<SGinitParser>, B<SGopenLanguageFromTerm>, B<SGopenLanguage>, B<SGcloseLanguage>, B<SGreOpenLanguage>, B<SGparseString>, B<SGparseStringAsAsFix2>, B<SGparseStringAsAsFix1>, B<SGparseFile>, B<SGtermToFile>, B<SGparseFileUsingTable>, B<SGisParseTree>, B<SGisParseError> - an interface to the Scannerless Generalized LR parser


=head1 LIBRARY

SGLR library (libsglr, -lsglr)

=head1 SYNOPSIS

=over 4

=head2 B<Definitions>

=item #include <sglr.h>


=head2 B<API Functions>

=item void  B<SGinitParser>(ATbool toolbus_mode);

=item ATerm B<SGopenlanguageFromTerm>(char *errpre, language lang, ATerm tbl);

=item ATerm B<SGopenlanguage>(char *errpre, language lang, char *tblfil);

=item ATerm B<SGcloselanguage>(char *errpre, language lang);

=item ATerm B<SGreOpenlanguage>(char *errpre, language lang, char *tblfil);

=item ATerm B<SGgetTopSymbols>(language lang);

=item ATerm B<SGparseString>(language lang, char *sort, char *str);

=item ATerm B<SGparseStringAsAsFix2>(language lang, char *sort, char *str);

=item ATerm B<SGparseStringAsAsFix1>(language lang, char *sort, char *str);

=item ATerm B<SGparseFile>(char *errpre, language lang, char *sort, char *infil);

=item ATerm B<SGparseFileUsingTable>(char *errpre, char *tblfil, char *sort, char *infil, char *outfil);

=item ATerm B<SGtermToFile>(char *errpre, ATerm frst, char *outfil);

=item ATbool B<SGisParseTree>(ATerm frst);

=item ATBool B<SGisParseError>(ATerm frst);


=head2 B<Operating Mode Macros>

=item ATbool B<SG_VERBOSE>;  B<SG_VERBOSE_ON>(), B<SG_VERBOSE_OFF>()

=item ATbool B<SG_DEBUG>;  B<SG_DEBUG_ON>(), B<SG_DEBUG_OFF>()

=item ATbool B<SG_SHOWSTAT>;  B<SG_SHOWSTAT_ON>(), B<SG_SHOWSTAT_OFF>()

=item ATbool B<SG_OUTPUT>;  B<SG_OUTPUT_ON>(), B<SG_OUTPUT_OFF>()

=item ATbool B<SG_ASFIX1>;  B<SG_ASFIX1_ON>(), B<SG_ASFIX1_OFF>()

=item ATbool B<SG_BINARY>;  B<SG_BINARY_ON>(), B<SG_BINARY_OFF>()

=item ATbool B<SG_FILTER>;  B<SG_FILTER_ON>(), B<SG_FILTER_OFF>()

=item ATbool B<SG_FILTER_ASSOCIATIVITY>; B<SG_FILTER_ASSOCIATIVITY_ON>(), B<SG_FILTER_ASSOCIATIVITY_OFF>

=item ATbool B<SG_FILTER_DIRECTEAGERNESS>; B<SG_FILTER_DIRECTEAGERNESS_ON>(), B<SG_FILTER_DIRECTEAGERNESS_OFF>

=item ATbool B<SG_FILTER_EAGERNESS>; B<SG_FILTER_EAGERNESS_ON>(), B<SG_FILTER_EAGERNESS_OFF>

=item ATbool B<SG_FILTER_INJECTIONCOUNT>; B<SG_FILTER_INJECTIONCOUNT_ON>(), B<SG_FILTER_INJECTIONCOUNT_OFF>

=item ATbool B<SG_FILTER_PRIORITY>; B<SG_FILTER_PRIORITY_ON>(), B<SG_FILTER_PRIORITY_OFF>

=item ATbool B<SG_FILTER_REJECT>; B<SG_FILTER_REJECT_ON>(), B<SG_FILTER_REJECT_OFF>

=back


=head1 DESCRIPTION

The B<SGLR> API offers high-level support for parsing functionality.

A few key concepts: in order to parse an input term, a parse table for
the language in which the term is supposed to be written must be
present.  A database of parse tables is maintained for that purpose.
In general, the user first makes sure the appropriate parse table for
some language L is opened; after that, terms can be parsed over that
language L.

As a result, either a parse error or a parse forest will be returned.
Parse forests can be written to a file.

The functions in the API that return an C<ATerm> will return C<NULL> on
an operational error; bear in mind that a successful parse that
stumbles upon a syntax error in the input term will produce an error
term rather than C<NULL>.  Functions for checking parse results are
therefore also provided.

Throughout the interface, a  C<errpre> argument specifies a prefix that
is used in contexts where an error message is returned to the user.  It
is typically instantiated with the toolname, making it possible to
identify the source of any occurring error message in a possibly
complex toolchain.


=head1 USAGE

=head2 B<API Functions>

=over 4

=item B<SGinitParser> will make the parsing routines operate in default
mode; C<toolbus_mode> determines whether or not to run as a ToolBus
application.

=item The B<SGopenLanguageFromTerm> and B<SGopenLanguage> functions
make a language available.  The language is registered under the name
of the C<name> argument; it is available for later use (i.e. can be
retrieved from the parse table database) by that name. 
B<SGopenLanguageFromTerm> uses the parse table, represented as an
C<ATerm>, from the C<tbl> argument; B<SGopenLanguage> reads the parse
table from the file that is named by the C<tblfil> argument.

If a parse table of the indicated name is already present, the existing
table will be used.  The B<SGreOpenlanguage>, used identically to
B<SGopenlanguage>, replaces eventually existing parse tables by the
table contained in the named file.

=item The B<SGgetTopSymbols> function returns the symbols that are
defined as start symbols in the requested language.


=item There are several ways of parsing an input term.  Assuming it
does not contain C<NULL> characters, it can be represented as a string.
Such a string can then be parsed using the B<SGparseString...>
routines. The C<lang> argument is a named language to parse the input
term with; optionally, an explicit top sort to be produced by the
parser can be specified using the C<sort> argument.  The term to parse
is contained as a string in C<str>.  The B<AsAsFix2> and B<AsAsFix1>
variants can be used to obtain parse trees in AsFix2 and AsFix1
results, respectively; note that AsFix1 can contain parse trees only.

=item File-based parsing is provided by the B<SGparseFile> and
B<SGparseFileUsingTable> functions.  In both functions, C<sort> --
again, optional -- specifies the top sort the parse must produce.

For B<SGparseFile>, the term contained in named input file C<infil>
is parsed over the parse table as previously opened and registered
by the name C<lang>.

B<SGparseFileUsingTable> uses a parse table contained in C<tblfil>
to parse the term contained in the named file C<infil>, and writes
output to the named file C<outfil>.

=item After parsing, B<SGtermToFile> writes the parse forest in C<frst>
to the output file named C<outfil>.

=item The boolean functions B<SGisParseTree> and B<SGisParseError>
inspect an C<ATerm> and will return whether or not it contains a
parsetree, resp. a parse error.

=back

=head2 B<Operating Mode Macros>

A number of macros influence the parsing process.  The following naming
convention is used:  use C<SG_XXX> as a variable to check whether
option C<XXX> is enabled; use C<SG_XXX_ON()> to enable and
C<SG_XXX_OFF()> to enable or disable option XXX, respectively.

=over 4

=item B<SG_VERBOSE> indicates whether or not parsing is performed in
verbose mode;  B<SG_VERBOSE_ON>() switches into and B<SG_VERBOSE_OFF>()
out of verbose operating mode.

=item With B<SG_DEBUG> on, debugging information is written to disk. 
B<SG_DEBUG_ON>() enables and B<SG_DEBUG_OFF>() disables this.

=item When using B<SG_SHOWSTAT>, some run-time statistics are
collected.  It is switched on by B<SG_SHOWSTAT_ON>() and off by
B<SG_SHOWSTAT_OFF>().

=item Unless B<SG_OUTPUT> is on (which it is by default) no output is
generated.  In effect, a (fast) accepting/rejecting parser can be
obtained by disabling output.  Switch it on using B<SG_OUTPUT_ON>(),
off using B<SG_OUTPUT_OFF>().

=item If you set B<SG_ASFIX1>, the parse result will be represented in
AsFix1 format, if possible.  By default, AsFix2 format is used. 
B<SG_ASFIX1_ON>() and B<SG_ASFIX1_OFF>() perform the obvious task; for
convenience, B<SG_ASFIX2>, B<SG_ASFIX2_ON>(), and B<SG_ASFIX2_OFF>()
are also provided.

=item B<SG_BINARY> determines whether terms are written in binary
(shared) format, or in textual format when doing file I/O.  By default,
the shared, binary format is used.  B<SG_BINARY_ON>() and
B<SG_BINARY_OFF>() act as should be expected.

=item The B<SG_FILTER> option determines whether or not the parser
applies a few common disambiguation strategies: subtree preference
filtering, multiset filtering, and injection count filtering.  By
default, filtering is applied; use B<SG_FILTER_ON>() to enable,
B<SG_FILTER_OFF>() to disable all filters. If filtering is enabled,
each filter can be toggled specifically also. 

These specific toggles are supposed to be used for debugging purposes only.
So, do not use these options to tweak your language implementations! It is
highly probable that there will be no backward compatibility for them in 
future versions.

=back


=head1 EXAMPLES

  #include <sglr.h>

  #define ME "MyParser"
  #define L  "MyLanguageReferenceName"

  int main(int argc, char **argv)
  {
    ATerm bottomOfStack;
    ATerm forest;

    if(argc != 4) exit(1);

    ATinit(0, NULL, &bottomOfStack);

    SGinitParser(ATfalse);

    if(!SGopenLanguage(ME, L, argv[1])) {
      fprintf(stderr, "error opening language %s (in %s)\n", L, argv[1]);
      exit(2);
    }
    if(!(forest = SGparseFile(ME, L, NULL, argv[2]))) {
      fprintf(stderr, "error parsing %s (over %s)\n", argv[2], L);
      exit(3);
    }

    fprintf(stdout, "Parse successful, writing %s\n", argv[3]);
    SG_BINARY_OFF();  /*  Make output to `-' (stdout) safe  */
    SGtermToFile(ME, forest, argv[3]);
    return 0;
  }

=head1 SEE ALSO

L<sglr>, L<tree2dot>


=head1 KNOWN BUGS

None.


=head1 AUTHOR

Jeroen Scheerder <S<js@cwi.nl>>
