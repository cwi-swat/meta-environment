tool sglr is {
  command = "sglr"
}

process Parser is
  let
    P  : sglr,
    L  : str,
    G  : str,
    S  : str,
    Id : term,
    FN : str,
    T  : term
  in
    execute(sglr, P?) .
    ( rec-msg(Id?, parse-string(L?, G?, S?)) .
      snd-eval(P, parse-string(L, G, S)) .
      rec-value(P, T?) .
      snd-msg(Id, parse-result(T))
    +
      rec-msg(parse-file(L?, G?, FN?, Id?)) .
      snd-eval(P, parse-file(L, G, FN)) .
      rec-value(P, T?) .
      snd-msg(Id, parse-result(T)) 
    +
      rec-msg(Id?,open-language(L?, FN?)) .
      snd-eval(P, open-language(L, FN)) .
      (
        rec-value(P, language-opened(L?, FN)) .
        snd-msg(Id?,language-available(L))
      +
        rec-value(P, open-language-failed(L?, FN))
      )
    )
    * rec-disconnect(P)
  endlet

tool a2toa1 is { command = "a2toa1 -silent" }

process AsFix2toAsFix1 is
let
  Id : term,
  T  : term,
  T1 : term,
  A2toa1 : a2toa1
in
  execute(a2toa1, A2toa1?).
  ( rec-msg(Id?,a2toa1(T?)).
    snd-eval(A2toa1,trans(T)).
    rec-value(A2toa1,T1?). 
    snd-msg(Id,converted(T1))
  ) * delta
endlet


tool parse-client is { }

process FileParse(R : parse-client) is
let
  S    : str,
  TS   : str,
  LN   : str,
  LT   : str,
  L    : str,
  T    : term,
  T1   : term,  
  T2   : term, 
  Tf   : term, 
  I    : int, 
  Ch   : int, 
  Li   : int, 
  Co   : int,
  Char : term
in 
  rec-event(R, open-language(LN?,LT?)) .
  snd-msg(R,open-language(LN,LT)) .
  rec-msg(R,language-available(L?)) .
  snd-ack-event(R, open-language(LN,LT)) .
  ( rec-event(R, parsetext(LN?,TS?,S?)) .
    snd-msg(R, parse-string(LN,TS,S)) .
    (
      ( rec-msg(R, parse-result(parsetree(T?,I?))) .
        if equal(I,0) then
          snd-msg(R,a2toa1(T)) .
          rec-msg(R,converted(Tf?)) .
          snd-ack-event(R, parsetext(LN, TS, S, Tf))   
        else 
          snd-ack-event(R, parsetext(LN, TS, S, parse-error(ambiguities(I))))
        fi 
      )
      +
      ( rec-msg(R, parse-result(eof-error)) . 
        snd-ack-event(R, parsetext(LN, TS, S, parse-error(eof-error)))
      )
      +
      ( rec-msg(R, 
                parse-result(parse-error([character(Ch?),
                                          line(Li?),
                                          col(Co?),
                                          char(Char?)]))) . 
        snd-ack-event(R, parsetext(LN, TS, S, 
                         parse-error([character(Ch),line(Li),
                                      col(Co),char(Char)])))
      )
    )  
  ) * rec-disconnect(R) 
endlet

process Connect-ParseFile is
let
  R : parse-client,
  P : int
in
  ( rec-connect(R?) . 
    create(FileParse(R), P?)
  ) * delta
endlet

toolbus(Parser, AsFix2toAsFix1, Connect-ParseFile)
