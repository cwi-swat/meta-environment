tool sglr is {
  command = "sglr"
}

process Parser is
  let
    P  : sglr,
    L  : str,
    G  : str,
    S  : str,
    Id : term,
    FN : str,
    Err: list,
    T  : term,
    I  : int
  in
    execute(sglr, P?) .
    (
      rec-msg(Id?, parse-string(L?, G?, S?)) .
      printf("parser: received msg parse-string\n") .
      snd-eval(P, parse-string(L, G, S)) .
      (
        rec-value(P, parsetree(T?,I?)) .
        printf("parser: received val parsetree\n") .
        snd-msg(Id, parse-result(parsetree(T,I)))
      +
        rec-value(P, parse-error(Err?,T?)) .
        printf("parser: received val parse-error/2\n") .
        snd-msg(Id, parse-error(Err,T))
      )
    +
      rec-msg(Id?, parse-string-as-asfix1(L?, G?, S?)) .
      printf("parser: received msg parse-string-as-asfix1\n") .
      snd-eval(P, parse-string-as-asfix1(L, G, S)) .
      (
        rec-value(P, asfix1-parsetree(T?)) .
        printf("parser: received val asfix1-parsetree\n") .
        snd-msg(Id, parse-result(parsetree(T)))
      +
        rec-value(P, parse-error(Err?,T?)) .
        printf("parser: received val parse-error/1\n") .
        snd-msg(Id, parse-error(Err,T))
      )
    +
      rec-msg(parse-file(L?, G?, FN?, Id?)) .
      snd-eval(P, parse-file(L, G, FN)) .
      rec-value(P, T?) .
      snd-msg(Id, parse-result(T))
    +
      rec-msg(Id?,open-language(L?, FN?)) .
      snd-eval(P, open-language(L, FN)) .
      (
        rec-value(P, language-opened(L?, FN)) .
        snd-msg(Id?,language-available(L))
      +
        rec-value(P, open-language-failed(L?, FN))
      )
    )
    * rec-disconnect(P)
  endlet


tool parse-client is { }

process FileParse(R : parse-client) is
let
  S    : str,
  TS   : str,
  LN   : str,
  LT   : str,
  L    : str,
  Err  : list,
  T    : term,
  T1   : term,
  T2   : term,
  AF1  : bool,
  I    : int,
  Ch   : int,
  Li   : int,
  Co   : int,
  Char : term
in
  rec-event(R, open-language(LN?,LT?)) .
  snd-msg(R,open-language(LN,LT)) .
  rec-msg(R,language-available(L?)) .
  snd-ack-event(R, open-language(LN,LT)) .
  (
    rec-event(R, parsetext(0,LN?,TS?,S?)) .
    printf("parse-server: received parsetext/2\n") .
    snd-msg(R, parse-string(LN,TS,S)) .
    (
      rec-msg(R, parse-error(Err?,T?)) .
      printf("parse-server: received parse-error/2\n") .
      snd-ack-event(R, parsetext(0, LN, TS, S, parse-error(Err,T)))
    +
      rec-msg(R, parse-result(parsetree(T?,I?))) .
      printf("parse-server: received parsetree (asfix2)\n") .
      snd-ack-event(R, parsetext(0, LN, TS, S, T))
    )
  +
    rec-event(R, parsetext(1,LN?,TS?,S?)) .
    printf("parse-server: received parsetext/1\n") .
    snd-msg(R, parse-string-as-asfix1(LN, TS, S)) .
    (
      rec-msg(R, parse-error(Err?,T?)) .
      printf("parse-server: received parse-error/1\n") .
      snd-ack-event(R, parsetext(1, LN, TS, S, parse-error(Err,T)))
    +
      rec-msg(R, parse-result(parsetree(T?))) .
      printf("parse-server: received parsetree (asfix1)\n") .
      snd-ack-event(R, parsetext(1, LN, TS, S, T))
    )
  ) * rec-disconnect(R)
endlet

process Connect-ParseFile is
let
  R : parse-client,
  P : int
in
  ( rec-connect(R?) .
    create(FileParse(R), P?)
  ) * delta
endlet

toolbus(Parser, Connect-ParseFile)
