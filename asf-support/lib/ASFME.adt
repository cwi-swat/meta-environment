 [ constructor ( "OptLayout" , "Absent" , appl ( prod ( [  ] , cf ( opt ( layout ) ) , no-attrs ) , [  ] ) ) , constructor ( "OptLayout" , "Present" , appl ( prod ( [ cf ( layout ) ] , cf ( opt ( layout ) ) , no-attrs ) , [ < "layout" ( "Layout" ) > ] ) ) , constructor ( "Layout" , "Lex-to-cf" , appl ( prod ( [ lex ( iter ( layout ) ) ] , cf ( layout ) , no-attrs ) , [ appl ( list ( lex ( iter ( layout ) ) ) , < "list" ( "Lex-Layout-list" ) > ) ] ) ) , list ( "Lex-Layout-list" , "Lex-Layout" ) , constructor ( "Tree" , "cast" , < "Tree" ( term ) > ) , constructor ( "Lex-CHAR" , "default" , appl ( prod ( [ char-class ( [ 34 ] ) , char-class ( [ range ( 0 , 255 ) ] ) , char-class ( [ 34 ] ) ] , lex ( sort ( "CHAR" ) ) , attrs ( [ term ( cons ( "default" ) ) ] ) ) , [ 34 , < "value" ( char ) > , 34 ] ) ) , constructor ( "CHAR" , "Lex-to-cf" , appl ( prod ( [ lex ( sort ( "CHAR" ) ) ] , cf ( sort ( "CHAR" ) ) , no-attrs ) , [ < "CHAR" ( "Lex-CHAR" ) > ] ) ) , constructor ( "ASF-Condition" , "negative" , appl ( prod ( [ < "type-of-lhs" ( term ) > , cf ( opt ( layout ) ) , lit ( "!=" ) , cf ( opt ( layout ) ) , < "type-of-rhs" ( term ) > ] , cf ( sort ( "ASF-Condition" ) ) , attrs ( [ term ( cons ( "negative" ) ) ] ) ) , [ < "lhs" ( "Tree" ) > , < "ws-after-lhs" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 33 ] ) , char-class ( [ 61 ] ) ] , lit ( "!=" ) , no-attrs ) , [ 33 , 61 ] ) , < "ws-after-unequal" ( "OptLayout" ) > , < "rhs" ( "Tree" ) > ] ) ) , constructor ( "ASF-Condition" , "equality" , appl ( prod ( [ < "type-of-lhs" ( term ) > , cf ( opt ( layout ) ) , lit ( "==" ) , cf ( opt ( layout ) ) , < "type-of-rhs" ( term ) > ] , cf ( sort ( "ASF-Condition" ) ) , attrs ( [ term ( cons ( "equality" ) ) ] ) ) , [ < "lhs" ( "Tree" ) > , < "ws-after-lhs" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 61 ] ) , char-class ( [ 61 ] ) ] , lit ( "==" ) , no-attrs ) , [ 61 , 61 ] ) , < "ws-after-equality" ( "OptLayout" ) > , < "rhs" ( "Tree" ) > ] ) ) , constructor ( "ASF-Condition" , "match" , appl ( prod ( [ < "type-of-lhs" ( term ) > , cf ( opt ( layout ) ) , lit ( ":=" ) , cf ( opt ( layout ) ) , < "type-of-rhs" ( term ) > ] , cf ( sort ( "ASF-Condition" ) ) , attrs ( [ term ( cons ( "match" ) ) ] ) ) , [ < "lhs" ( "Tree" ) > , < "ws-after-lhs" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 58 ] ) , char-class ( [ 61 ] ) ] , lit ( ":=" ) , no-attrs ) , [ 58 , 61 ] ) , < "ws-after-match" ( "OptLayout" ) > , < "rhs" ( "Tree" ) > ] ) ) , constructor ( "ASF-Condition" , "no-match" , appl ( prod ( [ < "type-of-lhs" ( term ) > , cf ( opt ( layout ) ) , lit ( "!:=" ) , cf ( opt ( layout ) ) , < "type-of-rhs" ( term ) > ] , cf ( sort ( "ASF-Condition" ) ) , attrs ( [ term ( cons ( "no-match" ) ) ] ) ) , [ < "lhs" ( "Tree" ) > , < "ws-after-lhs" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 33 ] ) , char-class ( [ 58 ] ) , char-class ( [ 61 ] ) ] , lit ( "!:=" ) , no-attrs ) , [ 33 , 58 , 61 ] ) , < "ws-after-match" ( "OptLayout" ) > , < "rhs" ( "Tree" ) > ] ) ) , constructor ( "ASF-Conditions" , "Default" , appl ( prod ( [ cf ( iter-sep ( sort ( "ASF-Condition" ) , lit ( "," ) ) ) ] , cf ( sort ( "ASF-Conditions" ) ) , no-attrs ) , [ appl ( list ( cf ( iter-sep ( sort ( "ASF-Condition" ) , lit ( "," ) ) ) ) , < "list" ( "ASF-Condition-list" ) > ) ] ) ) , separated-list ( "ASF-Condition-list" , "ASF-Condition" , [ < ws-after-head ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 44 ] ) ] , lit ( "," ) , no-attrs ) , [ 44 ] ) , < ws-after-sep ( "OptLayout" ) > ] ) , constructor ( "Tree" , "ambiguity-constructor" , appl ( prod ( [ lit ( "amb" ) , cf ( opt ( layout ) ) , lit ( "(" ) , cf ( opt ( layout ) ) , cf ( iter-star-sep ( sort ( "Tree" ) , lit ( "," ) ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "Tree" ) ) , attrs ( [ term ( cons ( "ambiguity-constructor" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 97 ] ) , char-class ( [ 109 ] ) , char-class ( [ 98 ] ) ] , lit ( "amb" ) , no-attrs ) , [ 97 , 109 , 98 ] ) , < "ws-after-amb" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 40 ] ) ] , lit ( "(" ) , no-attrs ) , [ 40 ] ) , < "ws-after-(" ( "OptLayout" ) > , appl ( list ( cf ( iter-star-sep ( sort ( "Tree" ) , lit ( "," ) ) ) ) , < "ambs" ( "Tree-ambs" ) > ) , < "ws-after-ambs" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 41 ] ) ] , lit ( ")" ) , no-attrs ) , [ 41 ] ) ] ) ) , constructor ( "Tree" , "lexical-constructor" , appl ( prod ( [ cf ( sort ( "Tree" ) ) , cf ( opt ( layout ) ) , lit ( "(" ) , cf ( opt ( layout ) ) , cf ( iter-star ( sort ( "CHAR" ) ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "Tree" ) ) , attrs ( [ term ( cons ( "lexical-constructor" ) ) ] ) ) , [ < "name" ( "Tree" ) > , < "ws-after-name" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 40 ] ) ] , lit ( "(" ) , no-attrs ) , [ 40 ] ) , < "ws-after-(" ( "OptLayout" ) > , appl ( list ( cf ( iter-star ( sort ( "CHAR" ) ) ) ) , < "list" ( "CHAR-list" ) > ) , < "ws-after-list" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 41 ] ) ] , lit ( ")" ) , no-attrs ) , [ 41 ] ) ] ) ) , separated-list ( "Tree-ambs" , "Tree" , [ < ws-after-head ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 44 ] ) ] , lit ( "," ) , no-attrs ) , [ 44 ] ) , < ws-after-sep ( "OptLayout" ) > ] ) , separated-list ( "CHAR-list" , "CHAR" , [ < ws-after-head ( "OptLayout" ) > ] ) , constructor ( "Lex-ASF-BarEnd" , "Absent" , appl ( prod ( [  ] , lex ( sort ( "ASF-BarEnd" ) ) , attrs ( [ term ( cons ( "Absent" ) ) ] ) ) , [  ] ) ) , constructor ( "ASF-BarEnd" , "Lex-to-cf" , appl ( prod ( [ lex ( sort ( "ASF-BarEnd" ) ) ] , cf ( sort ( "ASF-BarEnd" ) ) , no-attrs ) , [ < "ASF-BarEnd" ( "Lex-ASF-BarEnd" ) > ] ) ) , constructor ( "Lex-ASF-BarEnd" , "Present" , appl ( prod ( [ char-class ( [ 62 ] ) ] , lex ( sort ( "ASF-BarEnd" ) ) , attrs ( [ term ( cons ( "Present" ) ) ] ) ) , [ 62 ] ) ) , constructor ( "Lex-ASF-Implies" , "default" , appl ( prod ( [ lit ( "===" ) , lex ( iter-star ( char-class ( [ 61 ] ) ) ) , lex ( sort ( "ASF-BarEnd" ) ) ] , lex ( sort ( "ASF-Implies" ) ) , attrs ( [ term ( cons ( "default" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 61 ] ) , char-class ( [ 61 ] ) , char-class ( [ 61 ] ) ] , lit ( "===" ) , no-attrs ) , [ 61 , 61 , 61 ] ) , appl ( list ( lex ( iter-star ( char-class ( [ 61 ] ) ) ) ) , < "bar" ( chars ) > ) , < "end" ( "Lex-ASF-BarEnd" ) > ] ) ) , constructor ( "ASF-Implies" , "Lex-to-cf" , appl ( prod ( [ lex ( sort ( "ASF-Implies" ) ) ] , cf ( sort ( "ASF-Implies" ) ) , no-attrs ) , [ < "ASF-Implies" ( "Lex-ASF-Implies" ) > ] ) ) , constructor ( "ASF-ConditionalEquation" , "simple" , appl ( prod ( [ cf ( sort ( "ASF-Tag" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "ASF-Equation" ) ) ] , cf ( sort ( "ASF-ConditionalEquation" ) ) , attrs ( [ term ( cons ( "simple" ) ) ] ) ) , [ < "ASF-Tag" ( "ASF-Tag" ) > , < "ws-after-ASF-Tag" ( "OptLayout" ) > , < "ASF-Equation" ( "ASF-Equation" ) > ] ) ) , constructor ( "ASF-ConditionalEquation" , "implies" , appl ( prod ( [ cf ( sort ( "ASF-Tag" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "ASF-Conditions" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "ASF-Implies" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "ASF-Equation" ) ) ] , cf ( sort ( "ASF-ConditionalEquation" ) ) , attrs ( [ term ( cons ( "implies" ) ) ] ) ) , [ < "ASF-Tag" ( "ASF-Tag" ) > , < "ws-after-ASF-Tag" ( "OptLayout" ) > , < "ASF-Conditions" ( "ASF-Conditions" ) > , < "ws-after-ASF-Conditions" ( "OptLayout" ) > , < "ASF-Implies" ( "ASF-Implies" ) > , < "ws-after-ASF-Implies" ( "OptLayout" ) > , < "ASF-Equation" ( "ASF-Equation" ) > ] ) ) , constructor ( "ASF-ConditionalEquation" , "when" , appl ( prod ( [ cf ( sort ( "ASF-Tag" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "ASF-Equation" ) ) , cf ( opt ( layout ) ) , lit ( "when" ) , cf ( opt ( layout ) ) , cf ( sort ( "ASF-Conditions" ) ) ] , cf ( sort ( "ASF-ConditionalEquation" ) ) , attrs ( [ term ( cons ( "when" ) ) ] ) ) , [ < "ASF-Tag" ( "ASF-Tag" ) > , < "ws-after-ASF-Tag" ( "OptLayout" ) > , < "ASF-Equation" ( "ASF-Equation" ) > , < "ws-after-ASF-Equation" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 119 ] ) , char-class ( [ 104 ] ) , char-class ( [ 101 ] ) , char-class ( [ 110 ] ) ] , lit ( "when" ) , no-attrs ) , [ 119 , 104 , 101 , 110 ] ) , < "ws-after-when" ( "OptLayout" ) > , < "ASF-Conditions" ( "ASF-Conditions" ) > ] ) ) , constructor ( "ASF-Equation" , "Default" , appl ( prod ( [ < "type-of-lhs" ( term ) > , cf ( opt ( layout ) ) , lit ( "=" ) , cf ( opt ( layout ) ) , < "type-of-rhs" ( term ) > ] , cf ( sort ( "ASF-Equation" ) ) , no-attrs ) , [ < "lhs" ( "Tree" ) > , < "ws-after-lhs" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 61 ] ) ] , lit ( "=" ) , no-attrs ) , [ 61 ] ) , < "ws-after-=" ( "OptLayout" ) > , < "rhs" ( "Tree" ) > ] ) ) , constructor ( "Start" , "ASF-Module" , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "ASF-Module" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < "ws-before" ( "OptLayout" ) > , < "top-ASF-Module" ( "ASF-Module" ) > , < "ws-after" ( "OptLayout" ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( "Start" , "ASF-Section" , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "ASF-Section" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < "ws-before" ( "OptLayout" ) > , < "top-ASF-Section" ( "ASF-Section" ) > , < "ws-after" ( "OptLayout" ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( "ASF-Module" , "default" , appl ( prod ( [ cf ( iter-star ( sort ( "ASF-Section" ) ) ) ] , cf ( sort ( "ASF-Module" ) ) , attrs ( [ term ( cons ( "default" ) ) ] ) ) , [ appl ( list ( cf ( iter-star ( sort ( "ASF-Section" ) ) ) ) , < "list" ( "ASF-Section-list" ) > ) ] ) ) , constructor ( "ASF-Section" , "equations" , appl ( prod ( [ lit ( "equations" ) , cf ( opt ( layout ) ) , cf ( iter-star ( sort ( "ASF-ConditionalEquation" ) ) ) ] , cf ( sort ( "ASF-Section" ) ) , attrs ( [ term ( cons ( "equations" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 101 ] ) , char-class ( [ 113 ] ) , char-class ( [ 117 ] ) , char-class ( [ 97 ] ) , char-class ( [ 116 ] ) , char-class ( [ 105 ] ) , char-class ( [ 111 ] ) , char-class ( [ 110 ] ) , char-class ( [ 115 ] ) ] , lit ( "equations" ) , no-attrs ) , [ 101 , 113 , 117 , 97 , 116 , 105 , 111 , 110 , 115 ] ) , < "ws-after-equations" ( "OptLayout" ) > , appl ( list ( cf ( iter-star ( sort ( "ASF-ConditionalEquation" ) ) ) ) , < "list" ( "ASF-ConditionalEquation-list" ) > ) ] ) ) , constructor ( "ASF-Section" , "tests" , appl ( prod ( [ lit ( "tests" ) , cf ( opt ( layout ) ) , cf ( iter-star ( sort ( "ASF-TestEquation" ) ) ) ] , cf ( sort ( "ASF-Section" ) ) , attrs ( [ term ( cons ( "tests" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 116 ] ) , char-class ( [ 101 ] ) , char-class ( [ 115 ] ) , char-class ( [ 116 ] ) , char-class ( [ 115 ] ) ] , lit ( "tests" ) , no-attrs ) , [ 116 , 101 , 115 , 116 , 115 ] ) , < "ws-after-tests" ( "OptLayout" ) > , appl ( list ( cf ( iter-star ( sort ( "ASF-TestEquation" ) ) ) ) , < "test-list" ( "ASF-TestEquation-test-list" ) > ) ] ) ) , separated-list ( "ASF-Section-list" , "ASF-Section" , [ < ws-after-head ( "OptLayout" ) > ] ) , separated-list ( "ASF-ConditionalEquation-list" , "ASF-ConditionalEquation" , [ < ws-after-head ( "OptLayout" ) > ] ) , separated-list ( "ASF-TestEquation-test-list" , "ASF-TestEquation" , [ < ws-after-head ( "OptLayout" ) > ] ) , constructor ( "Lex-ASF-TagId" , "one-char" , appl ( prod ( [ char-class ( [ 34 , 39 , range ( 48 , 57 ) , range ( 65 , 90 ) , range ( 97 , 122 ) ] ) ] , lex ( sort ( "ASF-TagId" ) ) , attrs ( [ avoid , term ( cons ( "one-char" ) ) ] ) ) , [ < "head" ( char ) > ] ) ) , constructor ( "ASF-TagId" , "Lex-to-cf" , appl ( prod ( [ lex ( sort ( "ASF-TagId" ) ) ] , cf ( sort ( "ASF-TagId" ) ) , no-attrs ) , [ < "ASF-TagId" ( "Lex-ASF-TagId" ) > ] ) ) , constructor ( "Lex-ASF-TagId" , "many-chars" , appl ( prod ( [ char-class ( [ 34 , 39 , range ( 48 , 57 ) , range ( 65 , 90 ) , range ( 97 , 122 ) ] ) , lex ( iter-star ( char-class ( [ 34 , 39 , 45 , range ( 48 , 57 ) , range ( 65 , 90 ) , range ( 97 , 122 ) ] ) ) ) , char-class ( [ 34 , 39 , range ( 48 , 57 ) , range ( 65 , 90 ) , range ( 97 , 122 ) ] ) ] , lex ( sort ( "ASF-TagId" ) ) , attrs ( [ avoid , term ( cons ( "many-chars" ) ) ] ) ) , [ < "head" ( char ) > , appl ( list ( lex ( iter-star ( char-class ( [ 34 , 39 , 45 , range ( 48 , 57 ) , range ( 65 , 90 ) , range ( 97 , 122 ) ] ) ) ) ) , < "middle" ( chars ) > ) , < "last" ( char ) > ] ) ) , constructor ( "ASF-Tag" , "empty" , appl ( prod ( [ lit ( "[" ) , cf ( opt ( layout ) ) , lit ( "]" ) ] , cf ( sort ( "ASF-Tag" ) ) , attrs ( [ term ( cons ( "empty" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 91 ] ) ] , lit ( "[" ) , no-attrs ) , [ 91 ] ) , < "ws-after-[" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 93 ] ) ] , lit ( "]" ) , no-attrs ) , [ 93 ] ) ] ) ) , constructor ( "ASF-Tag" , "not-empty" , appl ( prod ( [ lit ( "[" ) , cf ( opt ( layout ) ) , cf ( sort ( "ASF-TagId" ) ) , cf ( opt ( layout ) ) , lit ( "]" ) ] , cf ( sort ( "ASF-Tag" ) ) , attrs ( [ term ( cons ( "not-empty" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 91 ] ) ] , lit ( "[" ) , no-attrs ) , [ 91 ] ) , < "ws-after-[" ( "OptLayout" ) > , < "ASF-TagId" ( "ASF-TagId" ) > , < "ws-after-ASF-TagId" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 93 ] ) ] , lit ( "]" ) , no-attrs ) , [ 93 ] ) ] ) ) , constructor ( "ASF-TestEquation" , "simple" , appl ( prod ( [ cf ( sort ( "ASF-Tag" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "ASF-Condition" ) ) ] , cf ( sort ( "ASF-TestEquation" ) ) , attrs ( [ term ( cons ( "simple" ) ) ] ) ) , [ < "ASF-Tag" ( "ASF-Tag" ) > , < "ws-after-ASF-Tag" ( "OptLayout" ) > , < "ASF-Condition" ( "ASF-Condition" ) > ] ) ) , constructor ( "ASF-TestEquation" , "implies" , appl ( prod ( [ cf ( sort ( "ASF-Tag" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "ASF-Conditions" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "ASF-Implies" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "ASF-Condition" ) ) ] , cf ( sort ( "ASF-TestEquation" ) ) , attrs ( [ term ( cons ( "implies" ) ) ] ) ) , [ < "ASF-Tag" ( "ASF-Tag" ) > , < "ws-after-ASF-Tag" ( "OptLayout" ) > , < "ASF-Conditions" ( "ASF-Conditions" ) > , < "ws-after-ASF-Conditions" ( "OptLayout" ) > , < "ASF-Implies" ( "ASF-Implies" ) > , < "ws-after-ASF-Implies" ( "OptLayout" ) > , < "ASF-Condition" ( "ASF-Condition" ) > ] ) ) , constructor ( "ASF-TestEquation" , "when" , appl ( prod ( [ cf ( sort ( "ASF-Tag" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "ASF-Condition" ) ) , cf ( opt ( layout ) ) , lit ( "when" ) , cf ( opt ( layout ) ) , cf ( sort ( "ASF-Conditions" ) ) ] , cf ( sort ( "ASF-TestEquation" ) ) , attrs ( [ term ( cons ( "when" ) ) ] ) ) , [ < "ASF-Tag" ( "ASF-Tag" ) > , < "ws-after-ASF-Tag" ( "OptLayout" ) > , < "ASF-Condition" ( "ASF-Condition" ) > , < "ws-after-ASF-Condition" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 119 ] ) , char-class ( [ 104 ] ) , char-class ( [ 101 ] ) , char-class ( [ 110 ] ) ] , lit ( "when" ) , no-attrs ) , [ 119 , 104 , 101 , 110 ] ) , < "ws-after-when" ( "OptLayout" ) > , < "ASF-Conditions" ( "ASF-Conditions" ) > ] ) ) , constructor ( "Lex-Layout" , "whitespace" , appl ( prod ( [ char-class ( [ range ( 9 , 10 ) , 13 , 32 ] ) ] , lex ( layout ) , attrs ( [ term ( cons ( "whitespace" ) ) ] ) ) , [ < "ch" ( char ) > ] ) ) , constructor ( "Lex-NumChar" , "digits" , appl ( prod ( [ char-class ( [ 92 ] ) , lex ( iter ( char-class ( [ range ( 48 , 57 ) ] ) ) ) ] , lex ( sort ( "NumChar" ) ) , attrs ( [ term ( cons ( "digits" ) ) ] ) ) , [ 92 , appl ( list ( lex ( iter ( char-class ( [ range ( 48 , 57 ) ] ) ) ) ) , < "number" ( chars ) > ) ] ) ) , constructor ( "NumChar" , "Lex-to-cf" , appl ( prod ( [ lex ( sort ( "NumChar" ) ) ] , cf ( sort ( "NumChar" ) ) , no-attrs ) , [ < "NumChar" ( "Lex-NumChar" ) > ] ) ) , constructor ( "Lex-ShortChar" , "regular" , appl ( prod ( [ char-class ( [ range ( 48 , 57 ) , range ( 65 , 90 ) , range ( 97 , 122 ) ] ) ] , lex ( sort ( "ShortChar" ) ) , attrs ( [ term ( cons ( "regular" ) ) ] ) ) , [ < "character" ( char ) > ] ) ) , constructor ( "ShortChar" , "Lex-to-cf" , appl ( prod ( [ lex ( sort ( "ShortChar" ) ) ] , cf ( sort ( "ShortChar" ) ) , no-attrs ) , [ < "ShortChar" ( "Lex-ShortChar" ) > ] ) ) , constructor ( "Lex-ShortChar" , "escaped" , appl ( prod ( [ char-class ( [ 92 ] ) , char-class ( [ range ( 32 , 47 ) , range ( 58 , 64 ) , range ( 91 , 96 ) , 110 , 114 , 116 , range ( 123 , 255 ) ] ) ] , lex ( sort ( "ShortChar" ) ) , attrs ( [ term ( cons ( "escaped" ) ) ] ) ) , [ 92 , < "escape" ( char ) > ] ) ) , constructor ( "Character" , "numeric" , appl ( prod ( [ cf ( sort ( "NumChar" ) ) ] , cf ( sort ( "Character" ) ) , attrs ( [ term ( cons ( "numeric" ) ) ] ) ) , [ < "NumChar" ( "NumChar" ) > ] ) ) , constructor ( "Character" , "short" , appl ( prod ( [ cf ( sort ( "ShortChar" ) ) ] , cf ( sort ( "Character" ) ) , attrs ( [ term ( cons ( "short" ) ) ] ) ) , [ < "ShortChar" ( "ShortChar" ) > ] ) ) , constructor ( "Character" , "top" , appl ( prod ( [ lit ( "\\TOP" ) ] , cf ( sort ( "Character" ) ) , attrs ( [ term ( cons ( "top" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 92 ] ) , char-class ( [ 84 ] ) , char-class ( [ 79 ] ) , char-class ( [ 80 ] ) ] , lit ( "\\TOP" ) , no-attrs ) , [ 92 , 84 , 79 , 80 ] ) ] ) ) , constructor ( "Character" , "eof" , appl ( prod ( [ lit ( "\\EOF" ) ] , cf ( sort ( "Character" ) ) , attrs ( [ term ( cons ( "eof" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 92 ] ) , char-class ( [ 69 ] ) , char-class ( [ 79 ] ) , char-class ( [ 70 ] ) ] , lit ( "\\EOF" ) , no-attrs ) , [ 92 , 69 , 79 , 70 ] ) ] ) ) , constructor ( "Character" , "bot" , appl ( prod ( [ lit ( "\\BOT" ) ] , cf ( sort ( "Character" ) ) , attrs ( [ term ( cons ( "bot" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 92 ] ) , char-class ( [ 66 ] ) , char-class ( [ 79 ] ) , char-class ( [ 84 ] ) ] , lit ( "\\BOT" ) , no-attrs ) , [ 92 , 66 , 79 , 84 ] ) ] ) ) , constructor ( "Character" , "label_start" , appl ( prod ( [ lit ( "\\LABEL_START" ) ] , cf ( sort ( "Character" ) ) , attrs ( [ term ( cons ( "label_start" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 92 ] ) , char-class ( [ 76 ] ) , char-class ( [ 65 ] ) , char-class ( [ 66 ] ) , char-class ( [ 69 ] ) , char-class ( [ 76 ] ) , char-class ( [ 95 ] ) , char-class ( [ 83 ] ) , char-class ( [ 84 ] ) , char-class ( [ 65 ] ) , char-class ( [ 82 ] ) , char-class ( [ 84 ] ) ] , lit ( "\\LABEL_START" ) , no-attrs ) , [ 92 , 76 , 65 , 66 , 69 , 76 , 95 , 83 , 84 , 65 , 82 , 84 ] ) ] ) ) ] 