definition
module languages/asf/syntax/Characters
hiddens
  sorts CHAR
exports
  lexical syntax
    [\"] value:~[\257] [\"] -> CHAR {cons("default")}


module languages/asf/syntax/Conditions

exports
   sorts ASF-Condition ASF-Conditions Tree

   context-free syntax

       lhs:Tree "=" rhs:Tree -> ASF-Condition {cons("positive")}
       lhs:Tree unequal:"!=" rhs:Tree -> ASF-Condition {cons("negative")}
       lhs:Tree equality:"==" rhs:Tree   -> ASF-Condition {cons("equality")}
       lhs:Tree match:":=" rhs:Tree   -> ASF-Condition {cons("match")}
       lhs:Tree match:"!:=" rhs:Tree  -> ASF-Condition {cons("no-match")}

  context-free syntax

       list:{ASF-Condition ","}+ -> ASF-Conditions

module languages/asf/syntax/Constructors

imports languages/asf/syntax/Characters
exports
sorts Tree

context-free syntax

       "amb" "(" ambs:{Tree ","}* ")" -> Tree {cons("ambiguity-constructor")}
       name:Tree "(" list:CHAR* ")"   -> Tree {cons("lexical-constructor")}


module languages/asf/syntax/Equations
imports languages/asf/syntax/Conditions
imports languages/asf/syntax/Tags
exports
  sorts ASF-Implies ASF-Equation ASF-ConditionalEquation

exports
  lexical syntax
    "===" [\=]* [\>]?  -> ASF-Implies {cons("default")}
  lexical restrictions
    ASF-Implies -/- [\=]

  context-free syntax

    ASF-Tag ASF-Equation -> ASF-ConditionalEquation {cons("simple")}
    ASF-Tag ASF-Conditions ASF-Implies ASF-Equation -> ASF-ConditionalEquation {cons("implies")}
    ASF-Tag ASF-Equation "when" ASF-Conditions  -> ASF-ConditionalEquation {cons("when")}

  context-free syntax

    lhs:Tree "=" rhs:Tree -> ASF-Equation

module languages/asf/syntax/Module

imports languages/asf/syntax/Equations languages/asf/syntax/Tests languages/asf/syntax/Characters languages/asf/syntax/Constructors
exports
  sorts ASF-Module ASF-Section

context-free syntax

  list:ASF-Section* -> ASF-Module {cons("default")}

  "equations" list:ASF-ConditionalEquation* -> ASF-Section {cons("equations")}
  "tests" test-list:ASF-TestEquation*           -> ASF-Section {cons("tests")}

module languages/asf/syntax/Tags

exports

sorts ASF-TagId ASF-Tag

lexical syntax

    [A-Za-z0-9\"\'] -> ASF-TagId {avoid,cons("one-char")}
    [A-Za-z0-9\"\'][A-Za-z0-9\"\'\-]*[A-Za-z0-9\"\'] -> ASF-TagId {avoid,cons("many-chars")}

context-free syntax

    "[" "]"           -> ASF-Tag {cons("empty")}
    "[" ASF-TagId "]" -> ASF-Tag {cons("not-empty")}

module languages/asf/syntax/Tests

imports languages/asf/syntax/Equations

exports

sorts ASF-TestEquation

context-free syntax
    ASF-Tag ASF-Condition -> ASF-TestEquation {cons("simple")}
    ASF-Tag ASF-Conditions ASF-Implies ASF-Condition -> ASF-TestEquation {cons("implies")}
    ASF-Tag ASF-Condition "when" ASF-Conditions  -> ASF-TestEquation {cons("when")}

