[ constructor ( CHAR , default , appl ( prod ( [ lex ( sort ( "CHAR" ) ) ] , cf ( sort ( "CHAR" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < string ( chars ) > ) ] ) ) , constructor ( ASF-Condition , positive , appl ( prod ( [ cf ( sort ( "Tree" ) ) , cf ( opt ( layout ) ) , lit ( "=" ) , cf ( opt ( layout ) ) , cf ( sort ( "Tree" ) ) ] , cf ( sort ( "ASF-Condition" ) ) , attrs ( [ term ( cons ( "positive" ) ) ] ) ) , [ < lhs ( Tree ) > , < ws-after-lhs ( OptLayout ) > , lit ( "=" ) , < "ws-after-=" ( OptLayout ) > , < rhs ( Tree ) > ] ) ) , constructor ( ASF-Condition , negative , appl ( prod ( [ cf ( sort ( "Tree" ) ) , cf ( opt ( layout ) ) , lit ( "!=" ) , cf ( opt ( layout ) ) , cf ( sort ( "Tree" ) ) ] , cf ( sort ( "ASF-Condition" ) ) , attrs ( [ term ( cons ( "negative" ) ) ] ) ) , [ < lhs ( Tree ) > , < ws-after-lhs ( OptLayout ) > , lit ( "!=" ) , < ws-after-unequal ( OptLayout ) > , < rhs ( Tree ) > ] ) ) , constructor ( ASF-Condition , equality , appl ( prod ( [ cf ( sort ( "Tree" ) ) , cf ( opt ( layout ) ) , lit ( "==" ) , cf ( opt ( layout ) ) , cf ( sort ( "Tree" ) ) ] , cf ( sort ( "ASF-Condition" ) ) , attrs ( [ term ( cons ( "equality" ) ) ] ) ) , [ < lhs ( Tree ) > , < ws-after-lhs ( OptLayout ) > , lit ( "==" ) , < ws-after-equality ( OptLayout ) > , < rhs ( Tree ) > ] ) ) , constructor ( ASF-Condition , match , appl ( prod ( [ cf ( sort ( "Tree" ) ) , cf ( opt ( layout ) ) , lit ( ":=" ) , cf ( opt ( layout ) ) , cf ( sort ( "Tree" ) ) ] , cf ( sort ( "ASF-Condition" ) ) , attrs ( [ term ( cons ( "match" ) ) ] ) ) , [ < lhs ( Tree ) > , < ws-after-lhs ( OptLayout ) > , lit ( ":=" ) , < ws-after-match ( OptLayout ) > , < rhs ( Tree ) > ] ) ) , constructor ( ASF-Condition , no-match , appl ( prod ( [ cf ( sort ( "Tree" ) ) , cf ( opt ( layout ) ) , lit ( "!:=" ) , cf ( opt ( layout ) ) , cf ( sort ( "Tree" ) ) ] , cf ( sort ( "ASF-Condition" ) ) , attrs ( [ term ( cons ( "no-match" ) ) ] ) ) , [ < lhs ( Tree ) > , < ws-after-lhs ( OptLayout ) > , lit ( "!:=" ) , < ws-after-match ( OptLayout ) > , < rhs ( Tree ) > ] ) ) , constructor ( ASF-Conditions , Default , appl ( prod ( [ cf ( iter-sep ( sort ( "ASF-Condition" ) , lit ( "," ) ) ) ] , cf ( sort ( "ASF-Conditions" ) ) , no-attrs ) , [ appl ( list ( cf ( iter-sep ( sort ( "ASF-Condition" ) , lit ( "," ) ) ) ) , < list ( ASF-Condition-list ) > ) ] ) ) , separated-list ( ASF-Condition-list , ASF-Condition , [ < ws-after-head ( OptLayout ) > , lit ( "," ) , < ws-after-sep ( OptLayout ) > ] ) , constructor ( Tree , ambiguity-constructor , appl ( prod ( [ lit ( "amb" ) , cf ( opt ( layout ) ) , lit ( "(" ) , cf ( opt ( layout ) ) , cf ( iter-star-sep ( sort ( "Tree" ) , lit ( "," ) ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "Tree" ) ) , attrs ( [ term ( cons ( "ambiguity-constructor" ) ) ] ) ) , [ lit ( "amb" ) , < "ws-after-amb" ( OptLayout ) > , lit ( "(" ) , < "ws-after-(" ( OptLayout ) > , appl ( list ( cf ( iter-star-sep ( sort ( "Tree" ) , lit ( "," ) ) ) ) , < ambs ( Tree-ambs ) > ) , < ws-after-ambs ( OptLayout ) > , lit ( ")" ) ] ) ) , separated-list ( Tree-ambs , Tree , [ < ws-after-head ( OptLayout ) > , lit ( "," ) , < ws-after-sep ( OptLayout ) > ] ) , constructor ( Tree , lexical-constructor , appl ( prod ( [ cf ( sort ( "Tree" ) ) , cf ( opt ( layout ) ) , lit ( "(" ) , cf ( opt ( layout ) ) , cf ( iter-star ( sort ( "CHAR" ) ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "Tree" ) ) , attrs ( [ term ( cons ( "lexical-constructor" ) ) ] ) ) , [ < name ( Tree ) > , < ws-after-name ( OptLayout ) > , lit ( "(" ) , < "ws-after-(" ( OptLayout ) > , appl ( list ( cf ( iter-star ( sort ( "CHAR" ) ) ) ) , < list ( CHAR-list ) > ) , < ws-after-list ( OptLayout ) > , lit ( ")" ) ] ) ) , separated-list ( CHAR-list , CHAR , [ < ws-after-head ( OptLayout ) > ] ) , constructor ( ASF-Implies , default , appl ( prod ( [ lex ( sort ( "ASF-Implies" ) ) ] , cf ( sort ( "ASF-Implies" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < string ( chars ) > ) ] ) ) , constructor ( ASF-ConditionalEquation , simple , appl ( prod ( [ cf ( sort ( "ASF-Tag" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "ASF-Equation" ) ) ] , cf ( sort ( "ASF-ConditionalEquation" ) ) , attrs ( [ term ( cons ( "simple" ) ) ] ) ) , [ < "ASF-Tag" ( ASF-Tag ) > , < "ws-after-ASF-Tag" ( OptLayout ) > , < "ASF-Equation" ( ASF-Equation ) > ] ) ) , constructor ( ASF-ConditionalEquation , implies , appl ( prod ( [ cf ( sort ( "ASF-Tag" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "ASF-Conditions" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "ASF-Implies" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "ASF-Equation" ) ) ] , cf ( sort ( "ASF-ConditionalEquation" ) ) , attrs ( [ term ( cons ( "implies" ) ) ] ) ) , [ < "ASF-Tag" ( ASF-Tag ) > , < "ws-after-ASF-Tag" ( OptLayout ) > , < "ASF-Conditions" ( ASF-Conditions ) > , < "ws-after-ASF-Conditions" ( OptLayout ) > , < "ASF-Implies" ( ASF-Implies ) > , < "ws-after-ASF-Implies" ( OptLayout ) > , < "ASF-Equation" ( ASF-Equation ) > ] ) ) , constructor ( ASF-ConditionalEquation , when , appl ( prod ( [ cf ( sort ( "ASF-Tag" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "ASF-Equation" ) ) , cf ( opt ( layout ) ) , lit ( "when" ) , cf ( opt ( layout ) ) , cf ( sort ( "ASF-Conditions" ) ) ] , cf ( sort ( "ASF-ConditionalEquation" ) ) , attrs ( [ term ( cons ( "when" ) ) ] ) ) , [ < "ASF-Tag" ( ASF-Tag ) > , < "ws-after-ASF-Tag" ( OptLayout ) > , < "ASF-Equation" ( ASF-Equation ) > , < "ws-after-ASF-Equation" ( OptLayout ) > , lit ( "when" ) , < "ws-after-when" ( OptLayout ) > , < "ASF-Conditions" ( ASF-Conditions ) > ] ) ) , constructor ( ASF-Equation , Default , appl ( prod ( [ cf ( sort ( "Tree" ) ) , cf ( opt ( layout ) ) , lit ( "=" ) , cf ( opt ( layout ) ) , cf ( sort ( "Tree" ) ) ] , cf ( sort ( "ASF-Equation" ) ) , no-attrs ) , [ < lhs ( Tree ) > , < ws-after-lhs ( OptLayout ) > , lit ( "=" ) , < "ws-after-=" ( OptLayout ) > , < rhs ( Tree ) > ] ) ) , constructor ( ASF-Module , default , appl ( prod ( [ cf ( iter-star ( sort ( "ASF-Section" ) ) ) ] , cf ( sort ( "ASF-Module" ) ) , attrs ( [ term ( cons ( "default" ) ) ] ) ) , [ appl ( list ( cf ( iter-star ( sort ( "ASF-Section" ) ) ) ) , < list ( ASF-Section-list ) > ) ] ) ) , separated-list ( ASF-Section-list , ASF-Section , [ < ws-after-head ( OptLayout ) > ] ) , constructor ( ASF-Section , equations , appl ( prod ( [ lit ( "equations" ) , cf ( opt ( layout ) ) , cf ( iter-star ( sort ( "ASF-ConditionalEquation" ) ) ) ] , cf ( sort ( "ASF-Section" ) ) , attrs ( [ term ( cons ( "equations" ) ) ] ) ) , [ lit ( "equations" ) , < "ws-after-equations" ( OptLayout ) > , appl ( list ( cf ( iter-star ( sort ( "ASF-ConditionalEquation" ) ) ) ) , < list ( ASF-ConditionalEquation-list ) > ) ] ) ) , separated-list ( ASF-ConditionalEquation-list , ASF-ConditionalEquation , [ < ws-after-head ( OptLayout ) > ] ) , constructor ( ASF-Section , tests , appl ( prod ( [ lit ( "tests" ) , cf ( opt ( layout ) ) , cf ( iter-star ( sort ( "ASF-TestEquation" ) ) ) ] , cf ( sort ( "ASF-Section" ) ) , attrs ( [ term ( cons ( "tests" ) ) ] ) ) , [ lit ( "tests" ) , < "ws-after-tests" ( OptLayout ) > , appl ( list ( cf ( iter-star ( sort ( "ASF-TestEquation" ) ) ) ) , < test-list ( ASF-TestEquation-test-list ) > ) ] ) ) , separated-list ( ASF-TestEquation-test-list , ASF-TestEquation , [ < ws-after-head ( OptLayout ) > ] ) , constructor ( ASF-TagId , one-char , appl ( prod ( [ lex ( sort ( "ASF-TagId" ) ) ] , cf ( sort ( "ASF-TagId" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < string ( chars ) > ) ] ) ) , constructor ( ASF-TagId , many-chars , appl ( prod ( [ lex ( sort ( "ASF-TagId" ) ) ] , cf ( sort ( "ASF-TagId" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < string ( chars ) > ) ] ) ) , constructor ( ASF-Tag , empty , appl ( prod ( [ lit ( "[" ) , cf ( opt ( layout ) ) , lit ( "]" ) ] , cf ( sort ( "ASF-Tag" ) ) , attrs ( [ term ( cons ( "empty" ) ) ] ) ) , [ lit ( "[" ) , < "ws-after-[" ( OptLayout ) > , lit ( "]" ) ] ) ) , constructor ( ASF-Tag , not-empty , appl ( prod ( [ lit ( "[" ) , cf ( opt ( layout ) ) , cf ( sort ( "ASF-TagId" ) ) , cf ( opt ( layout ) ) , lit ( "]" ) ] , cf ( sort ( "ASF-Tag" ) ) , attrs ( [ term ( cons ( "not-empty" ) ) ] ) ) , [ lit ( "[" ) , < "ws-after-[" ( OptLayout ) > , < "ASF-TagId" ( ASF-TagId ) > , < "ws-after-ASF-TagId" ( OptLayout ) > , lit ( "]" ) ] ) ) , constructor ( ASF-TestEquation , simple , appl ( prod ( [ cf ( sort ( "ASF-Tag" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "ASF-Condition" ) ) ] , cf ( sort ( "ASF-TestEquation" ) ) , attrs ( [ term ( cons ( "simple" ) ) ] ) ) , [ < "ASF-Tag" ( ASF-Tag ) > , < "ws-after-ASF-Tag" ( OptLayout ) > , < "ASF-Condition" ( ASF-Condition ) > ] ) ) , constructor ( ASF-TestEquation , implies , appl ( prod ( [ cf ( sort ( "ASF-Tag" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "ASF-Conditions" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "ASF-Implies" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "ASF-Condition" ) ) ] , cf ( sort ( "ASF-TestEquation" ) ) , attrs ( [ term ( cons ( "implies" ) ) ] ) ) , [ < "ASF-Tag" ( ASF-Tag ) > , < "ws-after-ASF-Tag" ( OptLayout ) > , < "ASF-Conditions" ( ASF-Conditions ) > , < "ws-after-ASF-Conditions" ( OptLayout ) > , < "ASF-Implies" ( ASF-Implies ) > , < "ws-after-ASF-Implies" ( OptLayout ) > , < "ASF-Condition" ( ASF-Condition ) > ] ) ) , constructor ( ASF-TestEquation , when , appl ( prod ( [ cf ( sort ( "ASF-Tag" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "ASF-Condition" ) ) , cf ( opt ( layout ) ) , lit ( "when" ) , cf ( opt ( layout ) ) , cf ( sort ( "ASF-Conditions" ) ) ] , cf ( sort ( "ASF-TestEquation" ) ) , attrs ( [ term ( cons ( "when" ) ) ] ) ) , [ < "ASF-Tag" ( ASF-Tag ) > , < "ws-after-ASF-Tag" ( OptLayout ) > , < "ASF-Condition" ( ASF-Condition ) > , < "ws-after-ASF-Condition" ( OptLayout ) > , lit ( "when" ) , < "ws-after-when" ( OptLayout ) > , < "ASF-Conditions" ( ASF-Conditions ) > ] ) ) , constructor ( Start , ASF-TestEquation , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "ASF-TestEquation" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-ASF-TestEquation ( ASF-TestEquation ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( OptLayout , Absent , appl ( prod ( [  ] , cf ( opt ( layout ) ) , no-attrs ) , [  ] ) ) , constructor ( OptLayout , Present , appl ( prod ( [ cf ( layout ) ] , cf ( opt ( layout ) ) , no-attrs ) , < string ( chars ) > ) ) , constructor ( Start , ASF-Tag , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "ASF-Tag" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-ASF-Tag ( ASF-Tag ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , ASF-TagId , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "ASF-TagId" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-ASF-TagId ( ASF-TagId ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , ASF-Section , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "ASF-Section" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-ASF-Section ( ASF-Section ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , ASF-Module , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "ASF-Module" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-ASF-Module ( ASF-Module ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , ASF-ConditionalEquation , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "ASF-ConditionalEquation" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-ASF-ConditionalEquation ( ASF-ConditionalEquation ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , ASF-Equation , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "ASF-Equation" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-ASF-Equation ( ASF-Equation ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , ASF-Implies , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "ASF-Implies" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-ASF-Implies ( ASF-Implies ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , Tree , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Tree" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Tree ( Tree ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , ASF-Conditions , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "ASF-Conditions" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-ASF-Conditions ( ASF-Conditions ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , ASF-Condition , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "ASF-Condition" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-ASF-Condition ( ASF-Condition ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) ]