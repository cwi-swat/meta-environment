definition

module Equations
imports Characters

exports
  sorts Tag TagId CondEquation Equation Implies Condition Equations
  lexical syntax

    "===" [\=]* [\>]?  -> Implies {cons("default")}

    [A-Za-z0-9\"\']                                  -> TagId {avoid,cons("one-char")}
    [A-Za-z0-9\"\'][A-Za-z0-9\"\'\-]*[A-Za-z0-9\"\'] -> TagId {avoid,cons("many-chars")}
     
  lexical restrictions
    Implies -/- [\=]

  context-free syntax

    list:{Condition ","}+           -> Conditions
                                    -> Equations {cons("absent")} 
    "equations" list:CondEquation*  -> Equations {cons("present")}

    Tag Equation                    -> CondEquation {cons("simple")}
    Tag Conditions Implies Equation -> CondEquation {cons("implies")}
    Tag Equation "when" Conditions  -> CondEquation {cons("when")}

    "[" "]"                         -> Tag {cons("empty")}
    "[" TagId "]"                   -> Tag {cons("not-empty")}


module GEN-Equations
imports Equations

exports
  context-free syntax
   
  lhs:Term  "=" rhs:Term -> Equation
  lhs:Term  "=" rhs:Term -> Condition {cons("positive")}
  lhs:Term unequal:"!=" rhs:Term -> Condition {cons("negative")}

module Characters
exports
  sorts CHAR
  lexical syntax
    [\"] value:~[\257] [\"]         -> CHAR {cons("default")}
