atype Term = QualifiedTypeName(string)
          | Expression(Expr)
          | Method(Class, Method)
          | Field(Class, Field)
          | Param(Method, int)
          | Decl(Method)
          | Decl(Field)

type Type = str

atype TypeSet = set[Type]
             | Union(TypeSet,TypeSet)
             | Intersection(TypeSet,TypeSet)
             | Subtypes(TypeSet)
             | Supertypes(TypeSet)
             | Subtypes(Type)
             | Supertypes(Type)
             | EmptySet
             | Universe
             | SingletonType(Type)

// Representation of the type hierarchy, computed by a previous analysis
Type root = "java.lang.Object"

set[Type] typeUniverse = { /* computed by previous analysis */ }

rel[Type,set[Type]] subTypesOf = {
    < "java.lang.Number", { "java.lang.Float", "java.lang.Integer", "java.lang.Double" } >
    // ...
}

rel[Type,set[Type]] superTypesOf = {
    < "java.lang.Number", { "java.lang.Object", "java.lang.Serializable" } >
    // ...
}

rules
    Subtypes(root)            => Universe
    Subtypes(Universe)        => Universe
    Subtypes(Subtypes(x))     => Subtypes(x)
    Supertypes(Universe)      => Universe
    Supertypes(Supertypes(x)) => Supertypes(x)
    Intersection(EmptySet,_)  => EmptySet
    Intersection(Universe,x)  => x
    Intersection(x,Universe)  => x
    Intersection(set[Type] s1, set[Type] s2) => s1 intersect s2
    Union(Universe,_)         => Universe
    Union(_,Universe)         => Universe
    Union(EmptySet,x)         => x
    Union(x,EmptySet)         => x
    Union(set[Type] s1, set[Type] s2) => s1 union s2

avoid-rules
    EmptySet                => { }
    Universe                => typeUniverse
    SingletonType(Type t)   => { t }

    Subtypes(Type t)        => subTypesOf[t]
    Subtypes(set[Type] s)   => { Type t | Type si: s, t in subTypesOf[si] }

    Supertypes(Type t)      => superTypesOf[t]
    Supertypes(set[Type] s) => { Type t | Type si: s, t in superTypesOf[si] }

    Intersection(set[Type] s1, set[Type] s2) => s1 intersect s2
    Union(set[Type] s1, set[Type] s2)        => s1 union s2

// ********************************************************************************
// Facts extracted from the program being analyzed
// ********************************************************************************

rel[Term,Term] equalConstraints = { 
    <Expression(new ArraryList()), QualifiedTypeName(ArrayList)> ,
    <Expression(new Float(3.3)),   QualifiedTypeName(Float)>
}

rel[Term,Term] subTypeConstraints = {
    <Expression(new ArraryList()), Expression(v2)>,
    <Expression(v2), Expression(v3)>,
    <Expression(new RevIterator(v2)), Expression(it)>
}

// ********************************************************************************
// Fancy version w/ algebraic data types for implicit set representation:
// ********************************************************************************

TypeSet getInitialEstimate(Term t) = case
    t = QualifiedTypeName(name): SingletonType(name),
    else: Universe

analysis typeInference {
    nodes {
        Term t := getInitialEstimate(t); // tells the system the type of "estimates"
    }

    constraints {
        // From the constraints, system can determine that the graph nodes are Terms,
        // and therefore that the worklist is a set[Term], and can also topologically
        // sort the graph and use that to keep the worklist well-ordered.

        // worklist is initialized by the system with every node in the graph (the
        // "carrier" of the constraint relation)

        rel[Term lhs, Term rhs] simpleConstraints =
               equalConstraints union inv(equalConstraints) union subTypeConstraints;

        // pick a node on the worklist, and satisfy all constraints in which it appears
        satisfy (simpleConstraints) {
            lhsEst := estimates[lhs];
            rhsEst := estimates[rhs];

            // N.B.: Hopefully "compiler" will use the above identities to generate
            // special-case code, e.g. "if (lhsEst.isUniverse()) return Subtypes(rhsEst)"

            // The following assignments also cause the system to place the lhs/rhs
            // nodes on the worklist if their estimates changed.
            estimates'[lhs] := Intersection(lhsEst, Subtypes(rhsEst));
            estimates'[rhs] := Intersection(rhsEst, Supertypes(lhsEst));

            error if estimates'[lhs] is EmptySet
            error if estimates'[rhs] is EmptySet
        }
    }
    // "estimates" relation now has the final answer
}

// ********************************************************************************
// Naive version w/o algebraic data types for implicit set representation:
// ********************************************************************************

set[Type] getInitialEstimate(Term t) = case
    t = QualifiedTypeName(name): { name },
    else: typeUniverse

analysis typeInference {
    initial-estimates(Term t) := getInitialEstimate(t);

    constraints {
        simpleConstraints {
            Tuple[Term lhs, Term rhs]: {
                lhsEst := estimates[lhs];
                rhsEst := estimates[rhs];

                estimates'[lhs] := lhsEst intersect subtypes[rhsEst];
                estimates'[rhs] := rhsEst intersect supertypes[lhsEst];
            }
        }
        disjunctiveConstraints {
            Tuple[Tuple lhs, Tuple rhs]: {
                lhs || rhs
            }
        }
        conditionalConstraints {
            Tuple[Term lhs, Term rhs]: {
                isRootType(lhs) && !isRootType(rhs) => constraint
            }
        }
    }
}
