module Queens2

// Alternative solutions for N-Queens.

// Generate all permutations of a list.
// (A candidate for the standard library)

list[list[&T]] permute(list[&T] L){
  if(L == [])
     return [];
  else {
     <&T E, L> = arb(L);
     return [ [E] + P | list[int] P : permute(L) ]    
  }
}

// Generate and accept all permutations of a list
// (A candidate for the standard library)


list[list[&T]] permute_and_filter(list[&T] L, bool accept(list[&T])){
  if(L == [])
     return [];
  else {
     <&T E, L> = arb(L);
     return [ [E] + P | list[int] P : permute(L), accept(P) ]    
  }

}

// Test that a configuration of queens is safe

bool is_safe(list[int] board){
  int y = size(board);
  int x = board[y];

  for(int i : [1..y]){
      if(board[y-i] == x || board[y-i] == x - i || board[y-i] == x + i)
        return false;
  }
  return true;
}

list[list[int]]  eight_queens1(int N){
 return [L | list[int] L : permutations([1..N]), is_safe(L) ]
}

list[list[int]]  eight_queens2(int N){
 return permute_and_filter([1..N], is_safe);
}