module Pico-eval

import pico/syntax/Pico;

data PICO_VALUE int ival | str sval;

type map[PICO-ID, PICO_VALUE] VEnv;

global VEnv Env = {};

void evalProgram(PROGRAM P){
    switch P {
      case begin <DECLS Decls> <{STATEMENT ";"}* Series> end: {
          evalDecls(Decls);
          evalStatements(Series);
      }
   }
}

VEnv evalDecls(DECLS Decls){
    global Venv Env;
    visit Decls {
      case <PICO-ID Id> : string:  Env[Id] = "";
      case <PICO-ID Id> : natural: Env[Id] = 0;
    }
}

void evalStatements({STATEMENT ";"}* Series){
    switch Series {
      case <STATEMENT Stat>; <{STATEMENT ";"}* Series2>: {
        evalStatement(Stat);
        evalStatements(Series2);
        return;
      }
      case [| |]: return;
    }
}

void evalStatement(STATEMENT Stat){
    global Venv Env;
    switch Stat {
      case [| <PICO-ID Id> = <EXP Exp> |]: {
        Env[Id] = evalExp(Exp);
        return;
      }

      case if <EXP Exp> then <{STATEMENT ";"}* Stats1> 
                   else <{STATEMENT ";"}* Stats1> fi:{
        PICO_VALUE Val = evalExp(Exp);
        if(Val.ival != 0) {
          evalStatements(Stats1);
          return;
        } else {
          evalStatements(Stats2);
          return;
        }
      }

      case while <EXP Exp> do <{STATEMENT ";"}* Stats1> od:{
        PICO_VALUE Val = evalExp(Exp);
        if(Val.ival != 0){
          return;
        } else {
          evalStatements(Stats1);
          evalStatement(Stat);
          return;
        }
      }
    }
};

PICO_VALUE evalExp(Exp exp) {
    global Venv Env;
    switch exp {
      case <NatCon N>: toInt(unparseToString(N));

      case <StrCon S>: return unparseToString(S);

      case <PICO-ID Id>: return Env[Id];

      case <EXP exp1> + <EXP exp2>:
           return evalExp(exp1, Env).ival +
                  evalExp(exp2, Env).ival;

      case <EXP exp1> - <EXP exp2>:
           return evalExp(exp1, Env).ival -
                  evalExp(exp2, Env).ival;
   
      case <EXP exp1> || <EXP exp2>:
          return evalExp(exp1, Env).sval +
                  evalExp(exp2, Env).sval;
   } 
}
