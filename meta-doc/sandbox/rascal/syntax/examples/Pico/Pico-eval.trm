module Pico-eval
import pico/syntax/Pico;
 
data PICO_VALUE int ival | str sval;

type map[PICO_ID, PICO_VALUE] VEnv;

VEnv evalProgram(PROGRAM P){
    switch P {
      case begin <DECLS Decls> <{STATEMENT ";"}* Series> end: {
          VEnv Env = evalDecls(Decls);
          return evalStatements(Series, Env);
      }
   }
}

VEnv evalDecls(DECLS Decls){
    VEnv Env = {};
    visit Decls {
      case <PICO-ID Id> : string:  { Env[Id] = ""; return Env;}
      case <PICO-ID Id> : natural: { Env[Id] = 0;  return Env;}
    }
}

VEnv evalStatements({STATEMENT ";"}* Series, VEnv Env){
    switch Series {
      case <STATEMENT Stat>; <{STATEMENT ";"}* Series2>: {
        Env Env2 = evalStatement(Stat, Env);
        return evalStatements(Series2, Env2);
      }
      case [| |]: return Env;
    }
}

VEnv evalStatement(STATEMENT Stat, VEnv Env){
    switch Stat {
      case [| <PICO_ID Id> = <EXP Exp> |]: {
        Env[Id] = evalExp(Exp, Env);
        return Env;
      }

      case STATEMENT[| if <EXP Exp> then <{STATEMENT ";"}* Stats1> 
                       else <{STATEMENT ";"}* Stats1> fi |]:{
        PICO_VALUE Val = evalExp(Exp, Env);
        if(Val.ival != 0){
          return evalStatments(Stats1, Env);
        } else {
          return evalStatements(Stats2, Env);
        }
      }

      case STATEMENT[| while <EXP Exp> do <{STATEMENT ";"}* Stats1> od|]: {
        PICO_VALUE Val = evalExp(Exp, Env);
        if(Val.ival != 0){
          return Env;
        } else {
          VEnv Env2 = evalStatements(Stats1, Env);
          return evalStatement(Stat, Env2);
        }
      }
    }
}

PICO_VALUE evalExp(Exp exp, VEnv Env) {
    switch exp {
      case NatCon[| <NatCon N> |]: 
           return toInt(unparseToString(N));

      case StrCon[| <StrCon S> |]: 
           return unparseToString(S);

      case PICO_ID[| <PICO_ID Id> |]: 
           return Env[Id];

      case <EXP exp1> + <EXP exp2>:
           return evalExp(exp1, Env).ival +
                  evalExp(exp2, Env).ival;
      
      case <EXP exp1> - <EXP exp2>:
           return evalExp(exp1, Env).ival -
                  evalExp(exp2, Env).ival;
      
      case <EXP exp1> || <EXP exp2>:
           return evalExp(exp1, Env).sval +
                  evalExp(exp2, Env).sval;
   } 
}
