module Lambda-Examples

import-syntax Lambda-syntax;

fun set[Var] allVars(Exp E) {
    return {V | Var V : E}
}

fun set[Var] boundVars(Exp E) {
    return {V | fn <Var V> => <Exp E1> : E};
} 

fun set[Var] freeVars(Exp E) {
    return allVars(E) - boundVars(E);
}

%% Generate a fresh variable if V does not occur in 
%% given set of variables.

fun Var fresh(Var V, set[Var] S) {
    if (V in S){ return prime(V); } else {return V;};
}

%% Substitution: replace all occurrences of V in E2 by E1

fun Exp subst(Var V1, Exp E1, Exp E2) {

    switch E2 {
      case <Var V2>: if(V1 != V2){ yield V2; }

      case <Var V2>: if(V1 == V2){ yield E1; }

      case <Exp Ea> <Exp Eb>: {
        Exp EaS = subst(V, E, Ea);
        Exp EbS = subst(V, E, Eb);
        return make <Exp EaS> <Exp EbS>;
      } 

      case fn <Var V2> => <Var Ea>:
        if (V1 == V2) { yield make fn <Var V2> => <Exp Ea> }

      case fn <Var V2> => <Exp Ea>:
        if(V1 != V2 and not(V1 in freeVars(E2) and 
           V2 in freeVars(E1))){
           Exp E1S = subst(V1, E1, Ea);
           yield make fn <Var V2> => <Exp E1S>;
        }              
 
      case fn <Var V2> => <Exp Ea>: 
        if(V1 != V2 and V1 in freeVars(Ea) and 
           V2 in freeVars(E1)){
           Var V3 = fresh(V2, freeVars(Ea) + freeVars(E1));
           Exp EaS = subst(V1, E1, subst(V2, V3, E2));
           yield make fn <Var V3> => <Exp EaS>;
        }
    };
}