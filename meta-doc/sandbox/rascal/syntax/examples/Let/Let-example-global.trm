module Let-Example

import Let;

%% Rename all bound variables in an Exp
%% Version 2: using global variables
%% Cnt: global counter to generate fresh variables
%% rel[Var,Var]: global renaming table

global int Cnt = 0;
global rel[Var,Var] Rn = {};

Var newVar() {
    global int Cnt;  
    Cnt = Cnt + 1;
    return "x" + Cnt
}

Exp rename(Exp E) {
    global int Cnt;
    global rel[Var,Var] Rn;
    switch E {
    case let <Var V> = <Exp E1> in <Exp E2> end: {
         Var Y = newVar();
         Rn = {<V, Y>} + Rn;
         Exp E1R = rename(E1);
         Exp E2R = rename(E2);
         return [| let <Var Y >= <Exp E1R>
                   in 
                      <Exp E2R>
                   end 
                |]
          }

    case <Var V>: return Rn(V)

    default: return E
    };
}