module Let-Example

import Let;

%% Rename all bound variables in an Exp
%% Version 1: purely functional
%% Exp: given expression to be renamed
%% rel[Var,Var]: renaming table
%% Int: counter to generate global variables

Exp rename(Exp E, rel[Var,Var] Rn, Int Cnt) {
    switch E {
    case let <Var V> = <Exp E1> in <Exp E2> end: {
         Var Y = "x" + Cnt;  %% this + operator concatenates 
                             %% (after converting the int to str)
         int Cnt1 = Cnt + 1;
         Exp E1R = rename(E1, Rn, Cnt);
         Exp E2R = rename(E2, {<V, Y>} + Rn, Cnt1);
         return [| let <Var Y> = <Exp E1R>
                   in 
                      <Exp E2R>
                   end
                |]
          }

    case <Var V>: return Rn(V)

    default: return E
    };
}