module Declarations

imports  Types 
	Expressions 
         languages/java/syntax/Statements [Type       => JavaType
                                           Block      => JavaBlock
                                           Statement  => JavaStatement
                                           Assignment => JavaAssignment
                                           Expression => JavaExpression
                                           Identifier => JavaIdentifier
                                           Name       => JavaName
                                          ]

hiddens
  context-free start-symbols
        Declaration

exports
  sorts Declaration Visibility Primitive Throws ThrowDecl

  context-free syntax

    ("public" | "private")?                            -> Visibility  {cons("visibility")}

    Visibility "data" ( Name | ParameterizedType)
                            { AbstractType "|"}+       -> Declaration {cons("data-decl")}

    Visibility "view" Name "<:" Name
                         { (Name AbstractType) "|"}+   -> Declaration {cons("view-decl")}

    Visibility "type" Type (Name  | ParameterizedType) -> Declaration {cons("type-decl")}

    Visibility "global" Type Name ("=" Expression)?    -> Declaration {cons("global-decl")}

    "primitive" ( "(" StringLiteral ")" )?             -> Primitive

    ("throws" ThrowDecl)*                              -> Throws

     Name "(" OptNamedTypes ")"                        -> ThrowDecl

    Visibility "memo"? FunctionType Throws
                       (Statement | Primitive)         -> Declaration {cons("function-decl")}
    Visibility "java" FunctionType Throws JavaBlock    -> Declaration {cons("java-function-decl")}

    "rules" "(" Type ")" "{" Rule+ "}"                 -> Declaration {cons("rules-decl")}
    "arules" "(" Type ")" "{" ARule+ "}"               -> Declaration {cons("arules-decl")}

%% Define reserved words
   "public" | "private" | "data" | "type" | "global" | 
   "memo" | "primitive" | "java" | "rules" | "arules"  -> Name {reject}

  
