module Declarations

imports  Types 
	Expressions 
         languages/java/syntax/Statements [Type       => JavaType
                                           Block      => JavaBlock
                                           Statement  => JavaStatement
                                           Assignment => JavaAssignment
                                           Expression => JavaExpression
                                           Identifier => JavaIdentifier
                                           Name       => JavaName
                                          ]

hiddens
  context-free start-symbols
        Declaration

exports
  sorts Declaration Throws ThrowDecl DeclarationUnit 

  context-free syntax
    "data" ( Name | ParameterizedType) { AbstractType "|"}+ -> Declaration {cons("data-decl")}

    "view" Name "<:" Name { (Name AbstractType) "|"}+       -> Declaration {cons("view-decl")}

    "type" Type (Name  | ParameterizedType)                 -> Declaration {cons("type-decl")}

    "anno" Type Name { Type "|"}+                           -> Declaration {cons("anno-decl")}

    "module" | "function" | "global" | "data" | 
    "view" | "type" | "anno" | "decl-anno" | "all"          -> DeclarationUnit

    "decl-anno" DeclarationUnit Name {Type "|"}+            -> Declaration {cons("decl-anno-decl")}
 
    "global" Type Name ("=" Expression)?                    -> Declaration {cons("global-decl")}

    ("throws" ThrowDecl)*                                   -> Throws
    Name "(" OptNamedTypes ")"                              -> ThrowDecl
    FunctionType Throws Block?                              -> Declaration {cons("function-decl")}

%%  Visibility "java" FunctionType Throws JavaBlock    -> Declaration {cons("java-function-decl")}

    "rules"  "(" Type ")" "{" Rule+ "}"                     -> Declaration {cons("rules-decl")}
    "arules" "(" Type ")" "{" ARule+ "}"                    -> Declaration {cons("arules-decl")}

%% Define reserved words
    "data" | "view" | "type" | "anno" | "decl-anno" |
    "global" | "throws" |"rules" | "arules"                 -> Name {reject}

    DeclarationUnit                                         -> Name {reject}

  
