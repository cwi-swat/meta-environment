module Declarations

imports  Types 
	Expressions 
         languages/java/syntax/Statements [Type       => JavaType
                                           Block      => JavaBlock
                                           Statement  => JavaStatement
                                           Assignment => JavaAssignment
                                           Expression => JavaExpression
                                           Identifier => JavaIdentifier
                                           Name       => JavaName
                                          ]

hiddens
  context-free start-symbols
        Declaration

exports
  sorts Declaration Visibility Primitive Throws ThrowDecl 
        DeclarationUnit RascalAnno RascalAnnoChar

  lexical syntax
    "@" Name "{" RascalAnnoChar* "}"                   -> RascalAnno
    ~[\}]                                              -> RascalAnnoChar
    [\\\}]                                             -> RascalAnnoChar


  context-free syntax

    ("public" | "private")?                            -> Visibility  {cons("visibility")}

    Visibility "data" RascalAnno? 
      ( Name | ParameterizedType) { AbstractType "|"}+ -> Declaration {cons("data-decl")}

    Visibility "anno" RascalAnno? 
      Name Name { AbstractType "|"}+                   -> Declaration {cons("anno-decl")}

    "module" | "function" | "global" | "data" | 
    "view" | "type" | "anno" | "rascal-anno"           -> DeclarationUnit

    Visibility "rascal-anno" RascalAnno?
      DeclarationUnit Name AbstractType                                                         
                                                       -> Declaration {cons("rascal-anno-decl")}
    Visibility "view" RascalAnno? 
      Name "<:" Name { (Name AbstractType) "|"}+       -> Declaration {cons("view-decl")}

    Visibility "type" RascalAnno? 
      Type (Name  | ParameterizedType)                 -> Declaration {cons("type-decl")}

    Visibility "global" RascalAnno? 
      Type Name ("=" Expression)?                      -> Declaration {cons("global-decl")}

    "primitive" ( "(" StringLiteral ")" )?             -> Primitive

    ("throws" ThrowDecl)*                              -> Throws

     Name "(" OptNamedTypes ")"                        -> ThrowDecl

    Visibility FunctionType Throws RascalAnno? 
                       Block?                          -> Declaration {cons("function-decl")}
    Visibility "java" FunctionType Throws JavaBlock    -> Declaration {cons("java-function-decl")}

    "rules"  "(" Type ")" RascalAnno? "{" Rule+ "}"    -> Declaration {cons("rules-decl")}
    "arules" "(" Type ")" RascalAnno? "{" ARule+ "}"   -> Declaration {cons("arules-decl")}

%% Define reserved words
   "public" | "private" | "data" | "type" | "global" | 
   "memo" | "primitive" | "java" | "rules" | "arules"  -> Name {reject}

  
