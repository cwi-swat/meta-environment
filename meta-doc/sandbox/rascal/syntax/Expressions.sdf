module Expressions

imports  basic/Areas
         Names
	Types
         Patterns
         languages/java/syntax/Lexical [ Identifier => JavaIdentifier
                                         Name       => JavaName
                                       ]
hiddens
context-free start-symbols 
	Expression

exports
sorts Expression Declarator Predicate SimpleGenerator Generator Call Callable
      Strategy Statement Rule Case CaseAction Assignment IncrAssignOp Value AbstractValue
      Catch Finally

context-free syntax
%% Basic values
         BooleanLiteral                                          -> Value {cons("boollit-exp")}
         IntegerLiteral                                          -> Value {cons("intlit-exp")}
         FloatingPointLiteral                                    -> Value {cons("floatlit-exp")}
         StringLiteral                                           -> Value {cons("strlit-exp")}
         Area                                                    -> Value {cons("areacon-exp")}

%% Abstract values used for datatypes
         Value                                                   -> AbstractValue
         PatternVar                                              -> AbstractValue
         Name                                                    -> AbstractValue
         Name "(" {AbstractValue ","}* ")"                       -> AbstractValue
         "[" {AbstractValue ","}* "]"                            -> AbstractValue
         "{" {AbstractValue ","}* "}"                            -> AbstractValue
         "<" {AbstractValue ","}+ ">"                            -> AbstractValue

%% Expressions
         Value                                                   -> Expression
        "(" Expression ")"                                       -> Expression {bracket}
	QualName                                                -> Expression {cons("qual-variable")}

         QualName | Call                                         -> Callable

	Callable "(" {Expression ","}* ")"                      -> Call {cons("fun-or-map-call")}
         Callable "{" Expression  "}"                            -> Call {cons("multi-map-call")}
         Call                                                    -> Expression

%% Lists, sets and tuples
	"[" {Expression ","}* "]"                               -> Expression {cons("list")}
	"{" {Expression ","}* "}"                               -> Expression {cons("set")}
	"<" {Expression ","}+ ">"                               -> Expression {cons("tuple")}

context-free priorities

%% Closure operators
       {
         Expression "*"                                          -> Expression {cons("trans0")}
         Expression "+"                                          -> Expression {cons("trans1")}
       } >

%% Replace "o" and "x" by "compose" and "product" library functions
%%         Expression "o" Expression                               -> Expression {cons("comp"), left} >
%%         Expression "x" Expression                               -> Expression {cons("prod"), left} >

%% Replace "#" by "size" library function
%%        "#" Expression                                           -> Expression {cons("size")} >

%% Arithmetic operators
   %% multiplication/intersection
        Expression "*" Expression                                -> Expression {cons("mul"), left} >
   %% division
        Expression "/" Expression                                -> Expression {cons("div"), left} >
   %% addition/union/concatenation
        { Expression "+" Expression                              -> Expression {cons("add"), left}
   %% subtraction/difference
          Expression "-" Expression                              -> Expression {cons("sub"), left}
        } >
 
%% Relational operators
         {
         Expression "<" Expression                               -> Predicate {cons("less")}
         Expression "<=" Expression                              -> Predicate {cons("less-equal")}
         Expression ">" Expression                               -> Predicate {cons("greater")}
         Expression ">=" Expression                              -> Predicate {cons("greater-equal")}
	Expression "in" Expression                              -> Predicate {cons("element-of")}
	Expression "notin" Expression                           -> Predicate {cons("not-element-of")}
	Expression "==" Expression                              -> Predicate {cons("equal")}
	Expression "!=" Expression                              -> Predicate {cons("not-equal")}
         } >

	"not" Predicate                                         -> Predicate {cons("not")} >
	Predicate "and" Predicate                               -> Predicate {left,cons("and")} >
	Predicate "or" Predicate                                -> Predicate {left,cons("or")} >
         Predicate "implies" Predicate                           -> Predicate {cons("implies")}

context-free syntax
	Declarator ":=" Expression                              -> Predicate {cons("match")}
	Declarator "!:=" Expression                             -> Predicate {cons("not-match")}
         Call                                                    -> Predicate
	"(" Predicate ")"                                       -> Predicate {bracket}

context-free syntax
%% Generators
         Type Name                                               -> Declarator
         StructuredType                                          -> Declarator
         AbstractType                                            -> Declarator
         QuotedSynPattern                                        -> Declarator
         Name "~=" RegPattern                                    -> Declarator

         ("top-down" | "top-down-break" | 
          "bottom-up" | "bottom-up-break" |
          "outermost" | "innermost")?                            -> Strategy

	Declarator ":" Strategy Expression                      -> SimpleGenerator {cons("generator")}

         SimpleGenerator                                         -> Generator
         Predicate                                               -> Generator

%% Comprehensions
	"{" Expression "|" {Generator ","}+ "}"                 -> Expression {cons("set-comprehension")}
	"[" Expression "|" {Generator ","}+ "]"                 -> Expression {cons("list-comprehension")}
         "exists" "(" SimpleGenerator "|" Predicate ")"          -> Expression {cons("exists")}
         "forall" "(" SimpleGenerator "|" Predicate ")"          -> Expression {cons("forall")}

context-free syntax
%% Rules, Switch, visit and solve
         QuotedSynPattern                                        -> Expression
         "@" AbsPattern                                          -> Expression

         "=>" Expression                                         -> CaseAction
         ":" Statement                                           -> CaseAction

         "case"  SynPattern CaseAction                           -> Case       {cons("case")}
         "acase" AbsPattern CaseAction                           -> Case       {cons("acase")}
         "rcase" Name "~=" RegPattern CaseAction                 -> Case       {cons("rcase")}

         "default" ":" Statement                                 -> Case       {cond("default-case")}

 	"switch" Expression "{" Case+ "}"                       -> Statement  {cons("switch")}
   	"visit" Strategy Expression "{" Case+ "}"               -> Statement  {cons("visit")}
         "solve" "{" { Assignment ";"}+ "}"                      -> Statement  {cons("solve")}
         "for" "(" {Generator ","}+ ")" Statement                -> Statement  {cons("for")}

         "if" "(" Predicate ")" Statement "else" Statement       -> Statement  {cons("if-else")}
         "if" "(" Predicate ")" Statement                        -> Statement  {cons("if-then")}
%% Do we want elseif etc.?

         "="  | "+=" | "-=" | "*=" | "/="                        -> IncrAssignOp {cons("incr-assignop")}

         Expression                                              -> Statement

         Callable IncrAssignOp Expression                        -> Assignment {cons("assign")}
         Assignment                                              -> Statement

         Declarator  "=" Expression                              -> Statement  {cons("varinit")}
         "global" Type Name ("=" Expression)?                    -> Statement  {cons("global")}
         "return" Expression?                                    -> Statement  {cons("return")}
         "yield" Expression                                      -> Statement  {cons("yield")}
         "fail"                                                  -> Statement  {cons("fail")}
         "throw" Expression                                      -> Statement  {cons("throw")}
         "assert" StringLiteral ":" Predicate                    -> Statement  {cons("assert")}

         "try" Statement Catch* Finally?                         -> Statement  {cons("try")}
         "catch" Pattern ":" Statement                           -> Catch      {cons("catch")}
         "finally" ":" Statement                                 -> Finally    {cons("finally")}

         "{" {Statement ";"}+ ";"? "}"                           -> Statement  {cons("block")}

%% Define reserved words:
         "true" | "false" |
         "and" | "or" | "implies" | "global" | 
         "case" | "acase" | "rcase" | "default" | "switch" | 
         "visit" | "try" | "catch" | "finally" | "solve"  |
         "for" | "if" | "else" | "return" | "throw" |
         "yield" | "fail" | "assert"                             -> Name {reject}
