module SDFSymbol

%% This is a modified clone of languages/sdf2/syntax/Regular

%%imports languages/sdf2/syntax/Kernel 
%%imports languages/aterm/syntax/IntCon
imports languages/java/syntax/Lexical [Identifier => Name]

exports
  sorts Symbol
  context-free syntax

    Name                                          -> Symbol {cons("name")}
    "(" ")"                                       -> Symbol {cons("empty")}
    "(" head:Symbol tail:Symbol+ ")"              -> Symbol {cons("seq")}
    Symbol "?"                                    -> Symbol {cons("opt")}
    Symbol "+"                                    -> Symbol {cons("iter")}
    Symbol "*"                                    -> Symbol {cons("iter-star")}
    "{" Symbol sep:StringLiteral "}" "+"          -> Symbol {cons("iter-sep")}
    "{" Symbol sep:StringLiteral "}" "*"          -> Symbol {cons("iter-star-sep")}
%%    "<" head:Symbol "," rest:{Symbol ","}+ ">"    -> Symbol {cons("tuple")}
%%    "(" arguments:Symbols "=>" results:Symbol ")" -> Symbol {cons("func")}
    "left":Symbol "|" "right":Symbol              -> Symbol {right,cons("alt")}
%%    "(" "left":Symbol "->" "right":Symbol ")"     -> Symbol {cons("strategy")}

  context-free priorities
    {Symbol "?"               -> Symbol
    Symbol "*"                -> Symbol
    Symbol "+"                -> Symbol} >
    Symbol "|" Symbol         -> Symbol       
