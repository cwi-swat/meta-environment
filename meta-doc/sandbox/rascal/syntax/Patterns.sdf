module Patterns

imports Names Types Expressions RegExp

exports
  sorts Pattern AbstractPattern AbstractPatternName AbstractPatterns
        SyntaxPattern SyntaxPatternChar SyntaxPatternSymbol PatternVariable QuotedSyntaxPattern
        RegExpPattern

  lexical syntax
    "\\<"                                         -> SyntaxPatternChar
    "\\>"                                         -> SyntaxPatternChar
    "\\|"                                         -> SyntaxPatternChar
    ~[\<\>\|]                                     -> SyntaxPatternChar
        
    "/" RegExp "/"  RegModifier?                  -> RegExpPattern

  context-free syntax

%% Pattern Variable
    "<" Type? Name  ">"                           -> PatternVariable
    "<" Call ">"                                  -> PatternVariable  %% TODO: better naming

%% SyntaxPattern
    SyntaxPatternChar                             -> SyntaxPatternSymbol
    PatternVariable                               -> SyntaxPatternSymbol
    Symbol? "[|" SyntaxPatternSymbol* "|]"        -> QuotedSyntaxPattern
    QuotedSyntaxPattern                           -> SyntaxPattern

%% AbstractPattern
    OptTypedName | StringLiteral                  -> AbstractPatternName  {cons("abspat-name")}
    "(" {AbstractPattern ","}* ")"                -> AbstractPatterns     {cons("abspat-args")}

     AbstractPatternName AbstractPatterns?        -> AbstractPattern      {cons("abspat-arg2")}
    "<" {AbstractPattern ","}+ ">"                -> AbstractPattern      {cons("abspat-tuple")}
    "[" {AbstractPattern ","}* "]"                -> AbstractPattern      {cons("abspat-list")}
    "{" {AbstractPattern ","}* "}"                -> AbstractPattern      {cons("abspat-set")}

%% Pattern
    "!"? (RegExpPattern | 
          SyntaxPattern | 
          AbstractPattern)                        -> Pattern              {cons("pattern")}

    "abs"                                         -> Reserved



