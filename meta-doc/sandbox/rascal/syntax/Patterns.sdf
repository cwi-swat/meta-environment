module Patterns

imports Names Types Expressions RegExp

exports
  sorts Pattern AbstractPattern AbstractPatternName AbstractPatternArgument AbstractPatternArguments
        SyntaxPattern SyntaxPatternChar SyntaxPatternSymbol PatternVariable QuotedSyntaxPattern
        RegExpPattern

  lexical syntax
         "\\<"                                            -> SyntaxPatternChar
         "\\>"                                            -> SyntaxPatternChar
         "\\|"                                            -> SyntaxPatternChar
         ~[\<\>\|]                                        -> SyntaxPatternChar
         
         "/" RegExp "/"  RegModifier?                     -> RegExpPattern

  context-free syntax
         "<" Type? Name  ">"                              -> PatternVariable
         "<" Call ">"                                     -> PatternVariable  %% TODO: better naming

         SyntaxPatternChar                                -> SyntaxPatternSymbol
         PatternVariable                                  -> SyntaxPatternSymbol
         Symbol? "[|" SyntaxPatternSymbol* "|]"           -> QuotedSyntaxPattern
         QuotedSyntaxPattern                              -> SyntaxPattern

         Name | StringLiteral                             -> AbstractPatternName {cons("abspat-name")}
         AbstractPattern                                  -> AbstractPatternArgument
         PatternVariable                                  -> AbstractPatternArgument     {cons("abspat-pattern-var")}
         "(" {AbstractPatternArgument ","}* ")"           -> AbstractPatternArguments {cons("abspat-args")}

 
         AbstractPatternName AbstractPatternArguments?    -> AbstractPattern     {cons("abspat-call")}

         "!"? (RegExpPattern | 
               SyntaxPattern | 
               AbstractPattern)                           -> Pattern        {cons("pattern")}



