module Patterns

imports Names Types Expressions RegExp

exports
  sorts Pattern AbsPattern AbsPatternName AbsPatternArg AbsPatternArgs
        SynPattern SynPatternChar SynPatternSymbol PatternVar QuotedSynPattern
        RegPattern

  lexical syntax
         "\\<"                                        -> SynPatternChar
         "\\>"                                        -> SynPatternChar
         "\\|"                                        -> SynPatternChar
         ~[\<\>\|]                                    -> SynPatternChar
         
         "/" RegExp "/"  RegModifier?                 -> RegPattern

  context-free syntax
         "<" Type? Name  ">"                          -> PatternVar
         "<" Call ">"                                 -> PatternVar  %% TODO: better naming

         SynPatternChar                               -> SynPatternSymbol
         PatternVar                                   -> SynPatternSymbol
         Symbol? "[|" SynPatternSymbol* "|]"          -> QuotedSynPattern
         QuotedSynPattern                             -> SynPattern

         Name | StringLiteral                         -> AbsPatternName {cons("abspat-name")}
         AbsPattern                                   -> AbsPatternArg
%%         Type Name                                   -> AbsPatternArg
         "(" {AbsPatternArg ","}* ")"                 -> AbsPatternArgs {cons("abspat-args")}

         PatternVar                                   -> AbsPattern     {cons("abspat-pattern-var")}
         AbsPatternName AbsPatternArgs?               -> AbsPattern     {cons("abspat-call")}

         "!"? (RegPattern | SynPattern | AbsPattern)  -> Pattern        {cons("negated-pattern")}



