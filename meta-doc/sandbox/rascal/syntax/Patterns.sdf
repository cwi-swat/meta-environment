module Patterns

imports Names Types Expressions
 
exports
sorts Pattern AbsPattern AbsPatternName AbsPatternArgs
      SynPattern SynPatternChar SynPatternSymbol PatternVar QuotedSynPattern
      RegPattern RegPatternChar

lexical syntax
         "\\<"                                       -> SynPatternChar
         "\\>"                                       -> SynPatternChar
         "\\|"                                       -> SynPatternChar
         ~[\<\>\|]                                   -> SynPatternChar

         ~[\/]                                       -> RegPatternChar
         "\\/"                                       -> RegPatternChar
         "/" RegPatternChar* "/"                     -> RegPattern

context-free syntax
         "<" Type? Name  ">"                         -> PatternVar

         SynPatternChar                              -> SynPatternSymbol
         PatternVar                                  -> SynPatternSymbol
         "[|" SynPatternSymbol* "|]"                 -> QuotedSynPattern
         QuotedSynPattern                            -> SynPattern

         Name | StringLiteral                        -> AbsPatternName {cons("abspat-name")}
         "(" {AbsPattern ","}* ")"                   -> AbsPatternArgs {cons("abspat-args")}

         PatternVar                                  -> AbsPattern     {cons("abspat-pattern-var")}
         AbsPatternName AbsPatternArgs?              -> AbsPattern     {cons("abspat-call")}

         "!"? (RegPattern | SynPattern | AbsPattern) -> Pattern        {cons("negated-pattern")}

