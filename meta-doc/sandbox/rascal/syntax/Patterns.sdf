module Patterns

imports Names Types Expressions RegExp

exports
  sorts Pattern AbstractPattern AbstractPatternName AbstractPatternArgument AbstractPatternArguments
        SyntaxPattern SyntaxPatternChar SyntaxPatternSymbol PatternVariable QuotedSyntaxPattern
        RegExpPattern

  lexical syntax
    "\\<"                                         -> SyntaxPatternChar
    "\\>"                                         -> SyntaxPatternChar
    "\\|"                                         -> SyntaxPatternChar
    ~[\<\>\|]                                     -> SyntaxPatternChar
        
    "/" RegExp "/"  RegModifier?                  -> RegExpPattern

  context-free syntax

%% Pattern Variable
    "<" Type? Name  ">"                           -> PatternVariable
    "<" Call ">"                                  -> PatternVariable  %% TODO: better naming

%% SyntaxPattern
    SyntaxPatternChar                             -> SyntaxPatternSymbol
    PatternVariable                               -> SyntaxPatternSymbol
    Symbol? "[|" SyntaxPatternSymbol* "|]"        -> QuotedSyntaxPattern
    QuotedSyntaxPattern                           -> SyntaxPattern

%% AbstractPattern
    Name | StringLiteral                          -> AbstractPatternName      {cons("abspat-name")}
    AbstractPattern                               -> AbstractPatternArgument  {cons("abspat-arg1")}
    PatternVariable                               -> AbstractPatternArgument  {cons("abspat-arg2")}
    "(" {AbstractPatternArgument ","}* ")"        -> AbstractPatternArguments {cons("abspat-args")}

    "abs"? AbstractPatternName 
           AbstractPatternArguments?              -> AbstractPattern          {cons("abspat")}

%% Pattern
    "!"? (RegExpPattern | 
          SyntaxPattern | 
          AbstractPattern)                        -> Pattern                  {cons("pattern")}

    "abs"                                         -> Reserved



