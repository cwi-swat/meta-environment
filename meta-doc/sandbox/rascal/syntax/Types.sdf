module Types

imports 
        SDFSymbol
        Names

hiddens
  context-free start-symbols
        Type

exports
  sorts TypeName Type OptNamedType OptNamedTypes TypeVar 
        BasicType StructuredType FunctionType AbstractType
        ParameterizedType

  lexical syntax
    head:[a-z]                                          -> TypeName {cons("one-char")}
    head:[a-z] middle:[A-Za-z0-9\-]* last:[A-Za-z0-9]   -> TypeName {cons("more-chars")} 
  lexical restrictions
    TypeName -/- [A-Za-z0-9]

  context-free syntax

    Name                                                -> Symbol
    StringLiteral                                       -> Symbol

    "bool"                                              -> BasicType {cons("bool-type")} 
    "int"                                               -> BasicType {cons("int-type")} 
    "float"                                             -> BasicType {cons("float-type")}
    "str"                                               -> BasicType {cons("str-type")} 
    "loc"                                               -> BasicType {cons("loc-type")}
    "value"                                             -> BasicType {cons("value-type")}
    "term"                                              -> BasicType {cons("term-type")}
    "void"                                              -> BasicType {cons("void-type")}
 
    Type Name?                                          -> OptNamedType  
    {OptNamedType ","}+                                 -> OptNamedTypes

    "list" "[" Type "]"                                 -> StructuredType {cons("list-type")} 
    "set" "[" Type "]"                                  -> StructuredType {cons("set-type")}
    "map" "[" OptNamedType "," OptNamedType "]"         -> StructuredType {cons("map-type")}
    "rel" "[" OptNamedTypes "]"                         -> StructuredType {cons("rel-type")}
    "tuple" "[" OptNamedType "," OptNamedTypes "]"      -> StructuredType {cons("tuple-type")}

    "fun" Type Name "(" OptNamedTypes? ")"              -> FunctionType {cons("function-type")}

    "&" Name                                            -> TypeVar {cons("type-var")}
    (TypeName ) "[" {TypeVar ","}+ "]"                  -> ParameterizedType

    Symbol                                              -> Type {cons("symbol-type")}

    TypeName                                            -> AbstractType {cons("typename-abstype")}
%%    TypeVar                                             -> AbstractType {cons("typevar-abstype")}
    TypeName "(" {OptNamedType ","}* ")"                -> AbstractType {cons("constructor-abstype")}

    TypeVar | BasicType | StructuredType | 
    FunctionType | AbstractType | ParameterizedType     -> Type {cons("type")}

%% Define reserved words
   "bool" | "int" | "float" | "str" | "loc" | "value" | "term" | 
   "void" | "list" | "set" | "map" | "rel" | "tuple" |
   "fun"                                                -> TypeName {reject}
 

  

