module Types

imports basic/Whitespace
        languages/sdf2/syntax/Regular
        languages/sdf2/syntax/Sorts
        languages/sdf2/syntax/Literals
        Variables

hiddens
context-free start-symbols
  Type

exports
sorts TypeName Type LabelledType LabelledTypes TypeVar BasicType StructuredType FunctionType
      TypePattern LabelledTypePattern LabelledTypesPattern BasicTypePattern StructuredTypePattern

  lexical syntax
    head:[a-z]                                        -> TypeName {cons("one-char")}
    head:[a-z] middle:[A-Za-z0-9\-]* last:[A-Za-z0-9] -> TypeName {cons("more-chars")} 

context-free syntax

   "bool"                                                  -> BasicType {cons("bool-type")} 
   "int"                                                   -> BasicType {cons("int-type")} 
   "str"                                                   -> BasicType {cons("str-type")} 
   "loc"                                                   -> BasicType {cons("loc-type")}
   "any"                                                   -> BasicType {cons("any-type")}
 
   Type Variable?                                          -> LabelledType  
   {LabelledType ","}+                                     -> LabelledTypes
   "list" "[" Type "]"                                     -> StructuredType {cons("list-type")} 
   "set" "[" Type "]"                                      -> StructuredType {cons("set-type")}
   "rel" "[" LabelledTypes "]"                             -> StructuredType {cons("rel-type")}
   "<" LabelledType "," LabelledTypes ">"                  -> StructuredType {cons("tuple-type")}
   Symbol                                                  -> StructuredType {cons("symbol-type")}

   "fun" Type Variable "(" LabelledTypes ")"               -> FunctionType {cons("function-type")}

%%   "pat" Type Variable "(" LabelledTypes ")"               -> PatternType {cons("patttern-type")}

   "&" Variable                                            -> TypeVar

   TypeVar | BasicType | StructuredType | FunctionType     -> Type
   TypeName                                                -> Type
   TypeName "(" {Type ","}* ")"                            -> Type
 
   "(" Type ")"                                            -> Type {bracket} 

%% TypePattern (undesirable repetition!)

   "bool"                                                  -> BasicTypePattern {cons("bool-type")} 
   "int"                                                   -> BasicTypePattern {cons("int-type")} 
   "str"                                                   -> BasicTypePattern {cons("str-type")} 
   "loc"                                                   -> BasicTypePattern {cons("loc-type")}
   "any"                                                   -> BasicTypePattern {cons("any-type")}

   Type Variable?                                          -> LabelledTypePattern
   
   {LabelledType ","}+                                     -> LabelledTypesPattern
   "list" "[" TypePattern "]"                              -> StructuredTypePattern {cons("list-type")} 
   "set" "[" TypePattern "]"                               -> StructuredTypePattern {cons("set-type")}
   "rel" "[" LabelledTypesPattern "]"                      -> StructuredTypePattern {cons("rel-type")}
   "<" LabelledTypePattern "," LabelledTypesPattern ">"    -> StructuredTypePattern {cons("tuple-type")}
   Symbol                                                  -> StructuredTypePattern {cons("symbol-type")}

%%   "fun" Type Variable "(" LabelledTypes ")"               -> FunctionType {cons("function-type")}

%%   "pat" Type Variable "(" LabelledTypes ")"               -> PatternType {cons("patttern-type")}

   BasicTypePattern | StructuredTypePattern                -> TypePattern
   TypeName                                                -> TypePattern
   TypeName "(" {TypePattern ","}* ")"                     -> TypePattern

   "<" Type Variable ">"                                   -> TypePattern
   "(" TypePattern ")"                                     -> TypePattern {bracket}     

