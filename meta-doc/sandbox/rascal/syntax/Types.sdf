module Types

imports DeclAnnos
        SDFSymbol
        Names
        languages/java/syntax/Lexical

hiddens
  context-free start-symbols
        Type

exports
  sorts Type NamedType NamedTypes OptNamedType OptNamedTypes TypeVar StandardOperator
        BasicType StructuredType FunctionType FunctionName AnonymousFunctionType 
        AbstractType AbsTypeName AbsTypeArgs
        ParameterizedType VarArgs TypeDeclaration DataDeclaration ViewDeclaration

  context-free syntax
    "bool"                                                   -> BasicType      {cons("bool-type")} 
    "int"                                                    -> BasicType      {cons("int-type")} 
    "double"                                                 -> BasicType      {cons("double-type")}
    "str"                                                    -> BasicType      {cons("str-type")} 
    "loc"                                                    -> BasicType      {cons("loc-type")}
    "value"                                                  -> BasicType      {cons("value-type")}
    "term"                                                   -> BasicType      {cons("term-type")}
    "void"                                                   -> BasicType      {cons("void-type")}

    Type Name                                                -> NamedType
    {NamedType ","}+                                         -> NamedTypes
 
    Type Name?                                               -> OptNamedType  
    {OptNamedType ","}+                                      -> OptNamedTypes

    OptNamedTypes "+" OptNamedTypes                          -> OptNamedTypes

    "list" "[" OptNamedType "]"                              -> StructuredType {cons("list-type")} 
    "set" "[" OptNamedType "]"                               -> StructuredType {cons("set-type")}
    "map" "[" OptNamedTypes "]"                              -> StructuredType {cons("map-type")}
    "rel" "[" OptNamedTypes "]"                              -> StructuredType {cons("rel-type")}
    "tuple" "[" OptNamedTypes "]"                            -> StructuredType {cons("tuple-type")}

    "+" | "-" | "*" | "/" | "&" | "==" | "!=" |
    "<" | "<=" |">" | ">="                                   -> StandardOperator

    "..."                                                    -> VarArgs
    Name | StandardOperator                                  -> FunctionName   { avoid }
    Type FunctionName "(" OptNamedTypes? VarArgs? ")"        -> FunctionType   {cons("function-type")}

    Type "(" OptNamedTypes? ")"                              -> AnonymousFunctionType

    "&" Name                                                 -> TypeVar        {cons("type-var")}
    "&" Name "<:" Type                                       -> TypeVar        {cons("type-var-constrained")}

    Name "[" {TypeVar ","}+ "]"                              -> ParameterizedType
                                                                          {cons("par-type")}

    Name | StringLiteral                                     -> AbsTypeName  {cons("abstype-name")} 
    "(" {OptNamedType ","}* ")"                              -> AbsTypeArgs  {cons("abstype-args")}

    NamedType                                                -> AbstractType {cons("abstype-namedtype")}
    TypeVar                                                  -> AbstractType {cons("abstype-typevat")}
    AbsTypeName AbsTypeArgs?                                 -> AbstractType {cons("abstype-call")}

    BasicType | StructuredType | FunctionType | 
    TypeVar | ParameterizedType | Symbol                     -> Type           {cons("type")}

%% Type-related declarations

    "type" Type (Name  | ParameterizedType)  DeclAnnos       -> TypeDeclaration {cons("type-decl")}

    "data" ( Name | ParameterizedType) 
           DeclAnnos { AbstractType "|"}+                    -> DataDeclaration {cons("data-decl")}

    "view" Name "<:" Name 
           DeclAnnos { (Name AbstractType) "|"}+             -> ViewDeclaration {cons("view-decl")}


%% Reserved words
   "bool" | "int" | "double" | "str" | 
   "loc" | "value" | "term" | "void" | "list" | 
   "set" | "map" | "rel" | "tuple" | "fun" |
   "data" | "type" | "view"                                  -> Reserved
 

  

