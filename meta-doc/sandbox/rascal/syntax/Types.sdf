module Types

imports DeclarationAnnotations
        SDFSymbol
        Names
        languages/java/syntax/Lexical

hiddens
  context-free start-symbols
        Type

exports
  sorts Type NamedType NamedTypes OptNamedType OptNamedTypes OptTypedName OptTypedNames
        TypeVar StandardOperator
        BasicType StructuredType FunctionType FunctionName AnonymousFunctionType 
        AbstractType AbstractTypeName AbstractTypeArguments AbstractTypeSelector
        ParameterizedType VarArgs TypeDeclaration DataDeclaration ViewDeclaration

  context-free syntax
    "bool"                                                    -> BasicType      {cons("BooleanType")} 
    "int"                                                     -> BasicType      {cons("IntegerType")} 
    "double"                                                  -> BasicType      {cons("Doubleype")}
    "str"                                                     -> BasicType      {cons("StringType")} 
    "loc"                                                     -> BasicType      {cons("LocationType")}
    "value"                                                   -> BasicType      {cons("ValueType")}
    "term"                                                    -> BasicType      {cons("TermType")}
    "void"                                                    -> BasicType      {cons("VoidType")}

    Type Name                                                 -> NamedType      {cons("NamedType")}
    {NamedType ","}+                                          -> NamedTypes     {cons("NamedTypes")}
 
    Type Name?                                                -> OptNamedType   {cons("OptNamedType")}
    {OptNamedType ","}+                                       -> OptNamedTypes  {cons("OptNamedTypes")}

    Type? Name                                                -> OptTypedName   {cons("OptTypedName")}
    {OptTypedNames ","}+                                      -> OptTypedNames  {cons("OptTypedNames")}

    OptNamedTypes "+" OptNamedTypes                           -> OptNamedTypes  {conc("ConcatenateOptNamedTypes")}

    "list" "[" OptNamedType "]"                               -> StructuredType {cons("ListType")} 
    "set" "[" OptNamedType "]"                                -> StructuredType {cons("SetType")}
    "map" "[" OptNamedTypes "]"                               -> StructuredType {cons("MapType")}
    "rel" "[" OptNamedTypes "]"                               -> StructuredType {cons("RelationType")}
    "tuple" "[" OptNamedTypes "]"                             -> StructuredType {cons("TupleType")}

    "+" | "-"  | "*" | "/"  | "&"  | "|"  | "==" | "!=" |
    "<" | "<=" | ">" | ">=" | "&&" | "||" | "!"               -> StandardOperator {cons("StandardOperator")}

    "..."                                                     -> VarArgs        {cons("VarArgs")}
    Name | StandardOperator                                   -> FunctionName   {avoid, cons("FunctionName")}
    Type FunctionName "(" OptNamedTypes? VarArgs? ")"         -> FunctionType   {cons("FunctionType")}

    Type "(" OptNamedTypes? ")"                               -> AnonymousFunctionType
                                                                                {cons("AnonymousFunctionType")}

    "&" Name                                                  -> TypeVar        {cons("TypeVar")}
    "&" Name "<:" Type                                        -> TypeVar        {cons("ConstrainedTypeVar")}

    Name "[" {TypeVar ","}+ "]"                               -> ParameterizedType
                                                                          {cons("ParameterizedType")}

    Name | StringLiteral                                      -> AbstractTypeName  {cons("AbstractTypeName")} 
    "(" {OptNamedType ","}* ")"                               -> AbstractTypeArguments  {cons("AbstractTypeArguments")}

    NamedType                                                 -> AbstractType {cons("NamedTypeAbstractType")}
    TypeVar                                                   -> AbstractType {cons("TypeVarAbstractType")}                                          
    AbstractTypeName AbstractTypeArguments?                   -> AbstractType {cons("CallAbstractType")}

    Type "." AbstractTypeName                                 -> AbstractTypeSelector {cons("AbstractTypeSelector")}

    BasicType | StructuredType | FunctionType | 
    TypeVar | ParameterizedType | Symbol |
    AbstractTypeSelector                                      -> Type           {cons("Type")}

%% Type-related declarations

    "type" Type (Name  | ParameterizedType)  
           DeclarationAnnotations                             -> TypeDeclaration {cons("TypeDeclaration")}

    "data" ( Name | ParameterizedType) 
           DeclarationAnnotations { AbstractType "|"}+        -> DataDeclaration {cons("dataDeclaration")}

    "view" Name "<:" Name 
           DeclarationAnnotations { (Name AbstractType) "|"}+ -> ViewDeclaration {cons("ViewDeclaration")}


%% Reserved words
   "bool" | "int"   | "double" | "str"   | 
   "loc"  | "value" | "term"   | "void"  | "list" | 
   "set"  | "map"   | "rel"    | "tuple" | "fun" |
   "data" | "type"  | "view"                                  -> Reserved
 

  

