equations

%% Subtyping rules (<=) on OptionalNamedTypes

[leo1] T N <= T' N'                        = T <= T'
[leo2] T N, ONTs <= T' N, ONTs'            = T <= T' & ONTs <= ONTs'
[leo3] ONTs1 + ONTs2 <= ONTs3              = ONTs1, ONTs2 <= ONTs3
[leo4] ONTs1 <= ONTs2 + ONTs3              = ONTs1 <=  ONTs2, ONTs3
[default-leo]
       ONTs <= ONTs'                       = false

%% Subtyping rules (<=) on Types

[let01] int <= number                      = true

[let02] double <= number                   = true

[let03] T <= value                         = true

[let04] T <= T                             = true

[let04] T <= & N                           = true

[let05] T <= &N <= T'                      = T <= T'

[let06] list[T] <= list[T']                = T <= T'

[let07] set[T] <= set[T']                  = T <= T'

[let08] tuple[ONTs] <= tuple[ONTs']        = ONTs <= ONTs'

[let09] map[T1, T2] <= map[T1', T2']       = T1 <= T1' &  T2 <= T2'

[let10] map[T1, T2] <= rel[T1', T2']       = T1 <= T1' &  T2 <= T2'

[let11] rel[ONTs] <= rel[ONTs']            = ONTs <= ONTs'

[let12] rel[ONTs] <= set[tuple[ONTs']]     = ONTs <= ONTs'

[let13] set[tuple[ONTs]] <= rel[ONTs']     = ONTs <= ONTs'

[let14] T <= T' == true,
        ONTs <= ONTs' == true
        =========================================
        fun T N (ONTs) <= fun T' N (ONTs') = true
[default-let]
        T <= T'                            = false

%% Equality (==) on Names

[eqn] N == N  = true
[default-eqn]
      N == N' = false

%% Incomparable

[com1] incomparable(ONTs, ONTs') = not((ONTs <= ONTs') | (ONTs' <= ONTs))

%% May-overload

[mo-1] may-overload(fun T N (ONTs), fun T' N' (ONTs')) = 
       not(N == N') | incomparable(ONTs, ONTs') | incomparable(T, T')

