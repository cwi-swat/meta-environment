equations

%% Subtyping rules (<:) on OptionalNamedTypes

[leo1] T N <: T' N'                        = T <: T'
[leo2] T N, ONTs <: T' N, ONTs'            = T <: T' & ONTs <: ONTs'
[leo3] ONTs1 + ONTs2 <: ONTs3              = ONTs1, ONTs2 <: ONTs3
[leo4] ONTs1 <: ONTs2 + ONTs3              = ONTs1 <:  ONTs2, ONTs3
[default-leo]
       ONTs <: ONTs'                       = false

%% Subtyping rules (<:) on Types

[let00] void <: T                          = true

[let01] T <: value                         = true

[let02] T <: T                             = true

[let03] T <: & N                           = true

[let04] T <: &N <: T'                      = T <: T'

[let05] N[&T] <: N[&U]                     = true

[let06] list[T] <: list[T']                = T <: T'

[let07] set[T] <: set[T']                  = T <: T'

[let08] tuple[ONTs] <: tuple[ONTs']        = ONTs <: ONTs'

[let09] map[T1, T2] <: map[T1', T2']       = T1 <: T1' &  T2 <: T2'

[let10] map[T1, T2] <: rel[T1', T2']       = T1 <: T1' &  T2 <: T2'

[let11] rel[ONTs] <: rel[ONTs']            = ONTs <: ONTs'

[let12] rel[ONTs] <: set[tuple[ONTs']]     = ONTs <: ONTs'

[let13] set[tuple[ONTs]] <: rel[ONTs']     = ONTs <: ONTs'

[let14] T <: T' == true,        %% covariant
        ONTs' <: ONTs == true   %% contravariant
        =========================================
       T N (ONTs) <: T'N (ONTs') = true

[default-let]
        T <: T'                            = false

%% Equality (==) on Names

[eqn] N == N  = true
[default-eqn]
      N == N' = false

%% Incomparable

[com1] incomparable(ONTs, ONTs') = not((ONTs <: ONTs') | (ONTs' <: ONTs))

%% May-overload

[mo-1] may-overload(T N (ONTs), T' N' (ONTs')) = 
       not(N == N') | incomparable(ONTs, ONTs')

