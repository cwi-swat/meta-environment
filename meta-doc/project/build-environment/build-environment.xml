<?xml version="1.0" encoding="UTF-8"?>
<article version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns6="http://www.w3.org/1999/xhtml"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <info>
    <title>Build environment of The Meta-Environment</title>

    <pubdate>$Rev$Author: paulk$ at $2006-12-13 22:16:02 +0100
    (Wed, 13 Dec 2006)$</pubdate>

    <authorgroup>
      <author>
        <personname><firstname>Gerco</firstname><surname>Ballintijn</surname></personname>
      </author>

      <author>
        <personname><firstname>Taeke</firstname><surname>Kooiker</surname></personname>
      </author>

      <author>
        <personname><firstname>Tijs</firstname><surname>van der
        Storm</surname></personname>
      </author>

      <author>
        <personname><firstname>Jurgen</firstname><surname>Vinju</surname></personname>
      </author>
    </authorgroup>
  </info>

  <section>
    <title>Introduction</title>

    <para>All packages use the following tools as a build environment:</para>

    <itemizedlist>
      <listitem>
        <para>GNU make, automake, autoconf, libtool, autoreconf</para>
      </listitem>

      <listitem>
        <para>For C projects we use GCC</para>
      </listitem>

      <listitem>
        <para>For Java projects we use Sun SDK</para>
      </listitem>

      <listitem>
        <para>For Java projects we use ant (called by make)</para>
      </listitem>

      <listitem>
        <para>Sisyphus for combining Subversion checkouts, and calling build
        commands in the correct order according to the package import
        structure</para>
      </listitem>

      <listitem>
        <para>Autobundle for composing distributable source packages (composed
        from individual packages automatically by autobundle)</para>
      </listitem>
    </itemizedlist>

    <para>This document is incomplete, please help.</para>
  </section>

  <section>
    <title>The 'meta-build-env' package</title>

    <para>Since we use autoconf, automake, gmake, and libtool, and we have a
    rather modular package system, building a package can become complex. The
    package <command>meta-build-env</command> helps to make this easier. The
    goals of this package are:</para>

    <itemizedlist>
      <listitem>
        <para>to provide each package with the same build interface</para>
      </listitem>

      <listitem>
        <para>to have no duplication/cloning of m4 macros and make
        rules</para>
      </listitem>

      <listitem>
        <para>to hide autoconf/automake ideosyncrasies as much as possible
        (not 100% possible)</para>
      </listitem>

      <listitem>
        <para>to have a single 'bill-of-materials' file for each package that
        can be used by other tools (like sisyphys, pkg-config, autobundle,
        etc.)</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>Usage</title>

      <para>To use the build environment, you first have to check it out from
      Subversion, then configure, make and make install it. This installs the
      tool <command>meta-build</command>, which can be seen as an extension of
      <command>aclocal</command>. Now this is what you need to do to use the
      build environment for a certain package:</para>

      <orderedlist>
        <listitem>
          <para>Go to the root of the package.</para>
        </listitem>

        <listitem>
          <para>Call <command>meta-build</command> (or<command>
          ./reconf</command> as explained below)</para>
        </listitem>

        <listitem>
          <para>Use the normal <command>configure</command>,
          <command>make</command>, <command>make install</command>,
          <command>make distcheck</command> routine that is implemented by
          <command>automake</command> and <command>autoconf.</command></para>
        </listitem>
      </orderedlist>

      <para>The convention is to let the <command>./reconf</command> script do
      the call to <command>meta-build</command>. It copies all relevant build
      environment files to the local directory, or makes a softlink to these
      files. From now on, the package is independent of the meta-build-env
      package, and can be distributed without it.</para>
    </section>

    <section>
      <title>Files</title>

      <para>The following files are installed by meta-build. The use of these
      files is <emphasis>obligatory, </emphasis>not optional. This rule makes
      sure that all packages implement the same interface.</para>

      <itemizedlist>
        <listitem>
          <para><filename>meta-build.m4</filename>: macros that extend
          autoconf to use pkg-config files to retrieve dependencies, and to
          set up a Java build environment, etc.</para>
        </listitem>

        <listitem>
          <para><filename>Makefile.top.meta</filename>: Makefile to include in
          all toplevel <filename>Makefile.am</filename>'s of C-based
          packages</para>
        </listitem>

        <listitem>
          <para><filename>Makefile.java.meta</filename>: Makefile to include
          in all toplevel <filename>Makefile.am</filename>'s of Java-based
          packages</para>
        </listitem>

        <listitem>
          <para><filename>Makefile.meta</filename>: Makefile to include in all
          other <filename>Makefile.am</filename>'s</para>
        </listitem>

        <listitem>
          <para><filename>meta-build.ant</filename>: ant targets for Java
          compilation</para>
        </listitem>
      </itemizedlist>

      <para>The following files should be present in the toplevel directory of
      each package:</para>

      <itemizedlist>
        <listitem>
          <para><filename>configure.ac</filename>: calls
          <command>AC_INIT</command>, then calls
          <command>META_SETUP</command>, and then
          <command>META_JAVA_SETUP</command> if it is a Java package, and
          calls appropriate <command>AC_</command> macros to resolve C
          configuration issues.</para>
        </listitem>

        <listitem>
          <para><replaceable>package</replaceable><filename>.pc.in</filename>:
          contains most information about the package, including the name and
          the version and the dependencies. This file is used by
          <filename>meta-build.m4</filename> to generate configure flags and
          to set up the <replaceable>CLASSPATH</replaceable>, and all other
          things needed for modular source tree composition.</para>
        </listitem>

        <listitem>
          <para><command>./reconf</command>: contains a call to
          <command>meta-build</command></para>
        </listitem>

        <listitem>
          <para><filename>ChangeLog</filename>: contains a description of all
          changes (usually equal to the commit message, but sometimes more
          extensive, or on a slightly higher level of abstraction)</para>
        </listitem>

        <listitem>
          <para><filename>Makefile.am</filename>: includes either
          <filename>Makefile.top.meta</filename> or
          <filename>Makefile.java.meta</filename>, and declares the
          <replaceable>SUBDIRS</replaceable> variable, contains
          <programlisting>ACLOCAL_AMFLAGS = -I</programlisting></para>
        </listitem>

        <listitem>
          <para><filename>COPYING</filename>: contains a copy of the GNU
          Lesser General Public License</para>
        </listitem>
      </itemizedlist>

      <para>This is an example
      <replaceable>package</replaceable><filename>.pc.in</filename> file for a
      C based package:</para>

      <programlisting>prefix=@prefix@

Name: toolbuslib
Description: ToolBus adapter library
Version: 0.8
Libs: -L${prefix}/lib -lATB @SOCKETLIBS@
Cflags: -I${prefix}/include
#uninstalled Libs: -L@abs_top_builddir@/src -lATB @SOCKETLIBS@
#uninstalled Cflags: -I@abs_top_builddir@/src
Requires: aterm</programlisting>

      <para>The prefix line is obligatory, as well as Name, Description and
      Version. The <literal>#uninstalled</literal> lines declare the location
      of exported libraries in the local source tree. This is used to compose
      source trees. <literal>Libs</literal> and <literal>Cflags</literal>
      declare the location of headers and libraries after installation. This
      file is constructed by <command>configure</command>, so you may use
      configure variables that you introduced in
      <filename>configure.ac</filename> (e.g.
      <literal>@SOCKETLIBS@</literal>).</para>

      <para>This is an example
      <replaceable>package</replaceable><filename>.pc.in</filename> file for a
      Java based package:</para>

      <programlisting>prefix=@prefix@

Name: aterm-java
Description: Java version of the ATerm library
Version: 1.6.3
Requires: shared-objects,JJTraveler
JarFile=aterm-java-1.6.3.jar
Packages=aterm,aterm.pure,aterm.test
LocalJars=
ExternalJars=@EXTERNAL_JARS@
TestClass=</programlisting>

      <para>Some extra variables are declared (notice the
      '<literal>=</literal>', instead of the '<literal>:</literal>'). Java
      packages all have the same directory structure. The sources must be in
      '<filename>./src</filename>'. The extra variables are used to configure
      <command>ant</command> to do it's job. They are all obligatory. The
      <literal>ExternalJars=@EXTERNAL_JARS@</literal> line is only needed if
      the packages has dependencies in the '<literal>Requires</literal>'
      field. <literal>EXTERNAL_JARS</literal> will be substituted by all Jar
      files needed to compile and run this package, but you may add your own
      external dependencies here. <literal>LocalJars</literal> can be used to
      add jars that are needed to build the package, but are not build from
      Java source directly. These are typically third party packages like
      <filename>junit.jar</filename>.</para>
    </section>
  </section>

  <section>
    <title>Building Meta-Environment packages from Subversion using
    Sisyphus</title>

    <para>To set up a build environment for the Meta-Environment can be hard
    because:</para>

    <itemizedlist>
      <listitem>
        <para>It is so modular, that it is hard to know which packages to
        checkout, configure, build etc, and in which order.</para>
      </listitem>

      <listitem>
        <para>The configure and build interface of the packages (using the GNU
        autotools) is sometimes hard to remember.</para>
      </listitem>
    </itemizedlist>

    <para>Sisyphus is a tool that manages this complexity for us. For one
    thing, we use it in our continuous integration, but we can reuse it to
    construct a build environment for a developer.</para>

    <para>Sisyphus takes a top-level package as argument, and a Sisyphus
    configuration, and uses the central repositories to find out in which
    order packages need to be build and with which commands. This information
    is cached locally in a <filename>.rollrc</filename> file. The
    <filename>.rollrc</filename> file is constructed by running
    <command>boot-roll</command> once.</para>

    <section>
      <title>How to use <command>boot-roll</command> and
      <command>roll</command> to checkout and build software</title>

      <section>
        <title>Step 1: get access to the Sisyphus tools
        <command>boot-roll</command> and <command>roll</command></title>

        <para>You can get access to <command>boot-roll</command> and
        <command>roll</command> as follows:</para>

        <itemizedlist>
          <listitem>
            <para>When you are working in the CWI domain add
            <filename>/ufs/sen1/software/installed/sisyphus/linux/i686/bin</filename>
            to your <replaceable>PATH</replaceable> or add
            '<literal>sisyphus</literal>' to your <filename>.pkgrc</filename>
            file.</para>
          </listitem>

          <listitem>
            <para>Otherwise, you should install Sisyphus yourself as <link
            linkend="installing-sisyphus">explained below</link>.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Step 2: Initialize boot-roll</title>

        <para>Make a file <filename>.bootrollrc</filename> in your home
        directory and edit the <literal>build_dir</literal>,
        <literal>install_dir</literal> and <literal>vcs_user</literal>
        variables according to your settings. The following is an example
        <filename>.bootrollrc</filename> file:</para>

        <programlisting>boot_roll:
  build_dir: /ufs/jurgenv/glt/build
  install_dir: /ufs/jurgenv/glt/installed/roll
  vcs_user: jurgenv
sisyphus:
  url: sisyphus-configuration
  host: sjofar.sen.cwi.nl
  port: 3960
  protocol: svn
  user: daybuild
  password: daybuild
templates:
 reconf: ./reconf
 configure: ./configure --prefix=&lt;%= prefix%&gt; &lt;%deps.each do |d|%&gt;--with-&lt;%= d.name%&gt;=&lt;%= d.prefix%&gt; &lt;%end%&gt; --enable-maintainer-mode
 make: echo 'use make install'
 install: make install
 check: make check
 distcheck: DISTCHECK_CONFIGURE_FLAGS="&lt;%deps.each do |d|%&gt;--with-&lt;%= d.name%&gt;=&lt;%= d.prefix%&gt; &lt;%end%&gt;" make distcheck
 clean: make uninstall clean 
 update: make uninstall ; svn update
 maintainer-clean: make uninstall maintainer-clean

 configure-user: ./configure --prefix=&lt;%= prefix%&gt; &lt;%deps.each do |d|%&gt;--with-&lt;%= d.name%&gt;=&lt;%= d.prefix%&gt; &lt;%end%&gt; --with-cflags="-Wall -Werror -g -O2"
</programlisting>

        <para>If your workstation is outside the CWI domain, it is necessary
        to use a tunnel specification. Replace the <literal>sisyphus</literal>
        tag with the following to tunnel from <literal>ssh.cwi.nl</literal> to
        <literal>sjofar.sen.cwi.nl</literal>: <programlisting>sisyphus:
  url: sisyphus-configuration
  host: sjofar.sen.cwi.nl
  port: 3960
  protocol: svn
  user: daybuild
  password: daybuild
  tunnel:
    host: ssh.cwi.nl
    user: jurgenv</programlisting><warning>
            <para>The connection with the Subversion repository uses the
            Secure Shell. Be aware that this set up will not work if you use
            password-protected identities like <literal>id_rsa</literal> as
            used by the Secure Shell. Currently, the only solution is to
            remove those passwords.</para>
          </warning></para>
      </section>

      <section>
        <title>Step 3: Run <command>boot-roll</command></title>

        <para>Run the command:</para>

        <programlisting>boot-roll asfsdf-meta</programlisting>

        <para>This generates a file '<filename>.rollrc</filename>' which
        contains, amongst others, the dependencies between the packages. The
        .rollrc file will be used by subsequent calls to the
        <command>roll</command> command.</para>
      </section>

      <section>
        <title>Step 4: Run <command>roll</command></title>

        <para>As explained earlier, each package can be built by way of the
        standard operation sequence: <literal>reconf</literal>,
        <literal>configure</literal>, install. For first time installations,
        it is mandatory to apply these operations to each package first before
        moving on to the next package. This is achieved by executing:</para>

        <para><programlisting>roll -s reconf configure install</programlisting></para>

        <para>The option '<literal>-s</literal>' means apply to each package
        the sequence of operations that follow it. <command>roll -h</command>
        and <command>roll -l</command> give helpful hints on the usage of
        <command>roll</command>.</para>

        <para>The command <command>roll</command> is no substitute for
        understanding the build interface of the Meta-Environment. It just
        automates a number of repetitive tasks, and manages the order in which
        they are executed. You are expected to fully understand the contents
        of your <filename>.bootrollrc</filename> file and your
        <filename>.rollrc</filename> file.</para>
      </section>
    </section>
  </section>

  <section xml:id="installing-sisyphus">
    <title>Installing Sisyphus</title>

    <para>The following steps are needed for a full installation of
    Sisyphus:</para>

    <itemizedlist>
      <listitem>
        <para>install <filename>ruby-1.8.x</filename></para>
      </listitem>

      <listitem>
        <para>make sure your ruby binary is called '<command>ruby</command>'
        and not '<command>ruby1.8</command>' or something similar.</para>
      </listitem>

      <listitem>
        <para>install <filename>rubygems</filename>, using the following
        script:</para>

        <programlisting>wget http://rubyforge.org/frs/download.php/5207/rubygems-0.8.11.tgz
tar zxvf rubygems-0.8.11.tgz
cd rubygems-0.8.11
sudo ruby1.8 setup.rb
sudo gem install rubygems-update
sudo gem install rails</programlisting>
      </listitem>

      <listitem>
        <para>install Subversion</para>
      </listitem>

      <listitem>
        <para>download sisyphus from the <link
        xlink:href="http://sisyphus.sen.cwi.nl:8080">sisyphus
        website</link></para>
      </listitem>

      <listitem>
        <para><command>./configure --prefix=/your/prefix</command></para>
      </listitem>

      <listitem>
        <para><command>make install</command></para>
      </listitem>
    </itemizedlist>
  </section>
</article>
