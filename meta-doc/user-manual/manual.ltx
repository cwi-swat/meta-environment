%{{{ LaTeX configuration

% vim:ts=4:sw=4:tw=75
%% \documentclass[a4paper,twoside]{article}
\documentclass{article}
\usepackage{hyperlatex} 
\usepackage{xspace}
\usepackage{verbatim}
\usepackage[english]{babel}
\usepackage{times}
\usepackage{a4wide}
\usepackage{alltt}
\usepackage{moreverb}  

\W\usepackage{longtable}
\W\usepackage{makeidx}
\W\usepackage{frames}
\W\usepackage{sequential}
\T\usepackage{epsfig}

\html{user-manual}

\makeindex

\xmlattributes{body}{bgcolor= "#ffffe6"}
\xmlattributes{TABLE}{BORDER}

\htmltopname{ASF+SDF Meta-Environment User Manual}

\newcommand{\printindex}{%
  \htmlonly{\HlxSection{-5}{}*{\indexname}\label{hlxindex}}%
  \texorhtml{\input{manual.ind}}{\htmlprintindex}}

\htmlpanelfield{Contents}{hlxcontents}
\htmlpanelfield{Index}{hlxindex}

\newcommand{\ASmetaenv}{{\textsc ASF}+{\textsc SDF} Meta-En\-vir\-on\-ment}
\newcommand{\sdf}{{\textsc SDF}}
\newcommand{\asf}{{\textsc ASF}}
\newcommand{\asfsdf}{{\textsc ASF}+{\textsc SDF}}
\newcommand{\ATerm}{ATerm}
\newcommand{\ATerms}{ATerms}
\newcommand{\xemacs}{{\tt XEmacs}}

\newcommand{\fignegspacebefore}{\vspace*{-0.25cm}}
\newcommand{\fignegspacebetween}{\vspace*{-0.25cm}}
\newcommand{\fignegspaceafter}{\vspace*{-0.5cm}}        

\newenvironment{Code}
        {\begin{small}\begin{center}}
        {\end{center}\end{small}}

\newcommand{\crule}{
  \htmlonly{\htmlrule}
  \texonly{\hrulefill}
}

\newenvironment{IncCode}
        {\crule \begin{small}}
        {\end{small} \crule}  

\newenvironment{CodeExample}
        {\crule \begin{center} \begin{small}}
        {\end{small} \end{center} \crule}

\newcommand{\traversalprod}[2]{\ensuremath{f(S_1 ,\dots, S_{#1}) \rightarrow #2}}
\newcommand{\transformerprod}{\ensuremath{f(S_1 ,\dots, S_n) \rightarrow S_1} \{\traversal(\trafo)\}}
\newcommand{\accumulatorprod}[1]{\ensuremath{f(S_1 , S_2 ,\dots, S_{#1}) \rightarrow S_2}}
\newcommand{\combinationprod}[1]{\ensuremath{f(S_1 , S_2 ,\dots, S_{#1}) \rightarrow S_1 \# S_2}}
\newcommand{\accu}[0]{{\tt accu}}
\newcommand{\trafo}[0]{{\tt trafo}}
\newcommand{\accutrafo}[0]{{\tt accu, trafo}}
\newcommand{\traversal}[0]{{\tt traversal}}
\newcommand{\innerm}[0]{{\tt bottom-up}}
\newcommand{\outerm}[0]{{\tt top-down}}
\newcommand{\suppress}[0]{{\tt suppress-syntax-generation}}
\newcommand{\generate}[0]{{\tt generate-syntax}}
%}}}
%{{{ Title page and table of contents

%----[ TITLE PAGE ]----           
\title{\ASmetaenv\ User Manual \\ $Revision$}
\author{M.G.J. van den Brand and P. Klint\\
        {\small Centrum voor Wiskunde en Informatica (CWI),}\\
{\small Kruislaan 413, 1098 SJ Amsterdam, The Netherlands}}

\htmltitle{ASF+SDF Meta-Environment\ User Manual \\ $Revision$}
\htmldirectory{html} 
\htmlname{user-manual}
\htmladdress{M.G.J. van den Brand and P. Klint, \today}

\newcommand{\homepage}{http://www.cwi.nl/\~{}markvdb/}

\xmlattributes{BODY}{BGCOLOR="#ffffe6"}
\xmlattributes{TABLE}{BORDER}
\setcounter{htmldepth}{3}

\date{\today}
\begin{document}
\maketitle    

\begin{abstract}
This is a preliminary user manual for the \ASmetaenv\ Release 1.
This is work under construction.
\end{abstract}

\T\tableofcontents

\htmlmenu{0}

%}}}

%{{{ Overview

%---- [ OVERVIEW ]---- 

\section{Update with respect to previous version}

\begin{itemize}
\item Updated the text at various places.
\item Added a section on 
\link{parameterized sorts}[, see
Section~\ref{ParameterizedSorts}]{ParameterizedSorts}.
\end{itemize}

\section{Overview}
\label{overview} 

\subsection{When to use the \ASmetaenv?}

\index{Asf+Sdf Meta-Environment@\ASmetaenv}
\index{Asf+Sdf formalism@\asfsdf\ formalism}
The \ASmetaenv\ is an interactive development environment
for the automatic generation of interactive systems for manipulating
programs, specifications, or other texts written in a formal
language. The generation process is controlled by a definition of the
target language, which typically includes such features as syntax,
pretty printing, type checking and execution of programs in the target
language. The \ASmetaenv\ can help you if:

\begin{itemize}

  \item You have to write a formal specification for some problem
  and you need interactive support to do this.

  \item You have developed your own (application) language and want to
  create an interactive environment for it.

  \item You have programs in some existing programming language and you
   want to analyze or transform them.
\end{itemize}

The \asfsdf\ formalism allows the definition of syntactic as well as
semantic aspects of a (programming) language. 
It can be used for the definition of languages (for
programming, for writing specifications, for querying databases, for
text processing, or for dedicated applications). In addition it can be
used for the formal specification of a wide variety of
problems. \asfsdf\ provides you with:

\begin{itemize}

  \item A general-purpose algebraic specification formalism based on equational logic. 

  \item Modular structuring of specifications.

  \item Integrated definition of lexical, context-free, and abstract syntax. 

  \item User-defined syntax, allowing you to write specifications using your own notation. 

  \item Complete integration of the definition of syntax and
  semantics.

\end{itemize}

The \ASmetaenv\ offers: 

\begin{itemize}

  \item Syntax-directed editing of \asfsdf\ specifications.

  \item Testing of specifications by means of interpretation.

  \item Compilation of \asfsdf\ specifications into dedicated
interactive environments containing various tools such as a parser, 
a pretty printer, a syntax-directed editor, a
debugger, and an interpreter or compiler.

\end{itemize}

The advantages of creating interactive environments in this way are twofold:

\begin{itemize}

  \item \emph{Increased uniformity}. Similar tools for different
  languages often suffer from a lack of uniformity.  Generating tools
  from language definitions will result in a large increase in
  uniformity, with corresponding benefits for the user.

  \item \emph{Reduced implementation effort.} Preparing a language
  definition requires significantly less effort than developing an
  environment from scratch.

\end{itemize}

\subsection{Global Structure of the Meta-Environment}

\index{generic syntax-directed editor@generic syntax-directed editor}
\index{syntax-directed editor@syntax-directed editor}
\index{term editor@term editor}
You can create new specifications or modify and test existing ones
using the Meta-Environment. Specifications consist of a series of
modules, and individual modules can be edited by invoking editors
for the syntax part and the equations part of a module.
All editing in the Meta-environment is done by creating
instances of a \emph{generic syntax-directed editor}.

After each editing operation on a module its \emph{implementation} is updated
immediately. It consists of a parser, a pretty
printer, and a term rewriting system which are all derived from the
module automatically.

A module can be tested by invoking a \emph{term editor} to create and evaluate
terms defined by the module. Term editors use the syntax of the module for
parsing the textual representation of terms and for converting them to
internal format (syntax trees). The equations of the module are then used to
reduce the terms into normal form. This result is, in its turn, converted back
to textual form by pretty printing it.

%%The reduction of a term can be monitored by using EDB (Equation
%%Debugger), a debugging system that allows you to reduce a term
%%step-by-step or to place breakpoints for interrupting the reduction
%%process at specific moments.

%%Finally, term editors can be customized by adding \emph{buttons} whose
%%activation starts the evaluation of a function which is defined in the
%%specification. In this way you can customize the user-interface of the
%%application by adding, for instance, a typechecking or evaluation
%%button to a term editor. (** check; not in Release 1.**)

\subsection{About this Manual}

This manual is intended for those courageous users that want to try
out the brand new implementation of the \ASmetaenv. This manual is
still under development and we welcome all feed back and comments.

%%In the sequel we will use \ASmetaenv\ to address the new
%%system and old \ASmetaenv\ when addressing the old system.

The focus of this manual will be on using the system to write a
specification like a type checker or evaluator for the toy language
PICO. It follows the user-interface to explain the capabilities of the
system.  Topics that will be addressed include:
\begin{itemize}
\item How to start the system, and how to exit it.
\item How to create, open and save a specification.
\item How to edit the syntax and/or equations part of a module.
\item How to edit a term.
\item How to evaluate a term.
\item How to compile a specification.
\item How to parse a term outside the \ASmetaenv.
\item How to rewrite a term using a compiled specification outside the
\ASmetaenv.
\item How to unparse parsed and/or normalized terms.
\end{itemize}

\noindent We do \emph{not} explain in detail:

\begin{itemize}
\item The formalism \asfsdf. 
We only give a \link{quick introduction to \asfsdf}
[ (Section~\ref{ASF+SDF})]{ASF+SDF}.

\item The architectural and implementational aspects of the system.
We only give a brief sketch of the underlying 
\link{technology and architecture of the \ASmetaenv}
[ (Section~\ref{SEC:TechnologyandArchitecture})]{SEC:TechnologyandArchitecture}.

\item The stand-alone usage of various parts of the system.
We only describe the \link{usage of the most important components}[
(Section~\ref{SEC:Components})]{SEC:Components}.
\end{itemize}

\subsection{Downloading the \ASmetaenv}

\index{download@download}
You can download the \ASmetaenv\ from the following location:
\begin{verbatim}
   http://www.cwi.nl/projects/MetaEnv/
\end{verbatim}

\noindent It provides links to the software as well as to related documents.

\subsection{Further Reading}

There are many publications about the \ASmetaenv\ itself, about the
implementation techniques used, and about applications.
Also see the overview of
\link{architecture and implementation techniques}
[ (Section~\ref{SEC:TechnologyandArchitecture})]{SEC:TechnologyandArchitecture}. 
We give here a brief
overview of selected publications:

\begin{description}

\item{Overviews:} \cite{HKKL85}, \cite{Kli93}, \cite{B*97}, \cite{B*01}.

\item {General ideas:} \cite{HK85b}, \cite{HK00}, \cite{H00}.

\item{ASF:} \cite{BHK89}.

\item{SDF:} \cite{HHKR89}, \cite{Vis97}.

\item{ASF+SDF:} \cite{BHK89}, \cite{DHK96}.

\item{Parser generation and parsing}: \cite{Rek87b}, \cite{HKR90},
\cite{RK91}, \cite{R92}, \cite{Vis97}, \cite{BSVV02}.

\item{Pretty printing:} \cite{BV96}, \cite{Jon00}.

\item{Rewriting and Compilation:} \cite{BKO99}, \cite{vdBHK00}, \cite{vdBV00},
\cite{BKV01}.

\item{ToolBus}: ~\cite{BK98}.

\item{ATerms:} \cite{BJKO00}.

\item{Applications:} \cite{BDKKM96},\cite{BS00}, \cite{BR00}.

\item{Generic debugging}: \cite{Oli00}.

\item{User manuals:} \cite{ATmanual}, \cite{TBmanual},
\cite{MEmanual}.

\end{description}




\section{Starting the System}
\label{StartingMeta}

\index{meta@{\tt meta}}
\index{Asf+Sdf Meta-Environment@\ASmetaenv}
The \ASmetaenv\ can be invoked via the command {\tt meta}.  As a
result, 
\link{the \ASmetaenv\ main window pops up.}[ This is shown in
Figure~\ref{FIG:meta-start}.]{FIG:meta-start}

\begin{figure}[t]
\begin{Label}{FIG:meta-start}
\begin{center}
\T \epsfig{file=meta-start.ps,width=12cm}
\W \htmlimage{meta-start.gif}
\end{center}
\caption{Main window of \ASmetaenv}
\end{Label}
\end{figure}

The {\tt meta} command has the following options, which may come in handy
later on. As a novice user, you may want to skip the remainder of this section
and continue with the description of the 
\link{Main Window}[ (Section~\ref{MainWindow})]{MainWindow}.

\begin{itemize}

\item {\tt -C \emph{file}} specifies the configuration file to be used,
in the default case the configuration file {\tt meta.conf} is used.

\item {\tt -d} starts the \ASmetaenv\ in debug mode. As a result,
an interactive viewer will be started that 
allows the study of the internal behaviour of the system,
the so-called \link{``ToolBus viewer''}[. This viewer is shown in
Figure~\ref{FIG:viewer}]{FIG:viewer}.

\item {\tt -h } shows help information for the {\tt meta} command.

\item {\tt -T \emph{port}} controls the communication ports that will
be used for communication between the components of the \ASmetaenv.
Note that these ports are also controlled by the environment variable
{\tt TB\_PORT}.  The default value is {\tt 8999}, but this port may be
in use by someone else (or by an aborted previous run of the
\ASmetaenv). In that case, it is advisable to use other values in the
range 9000 and up.

\item {\tt -v} runs the \ASmetaenv\ in verbose mode.

\item {\tt -V} shows the version number of the \ASmetaenv\ you are running.

\end{itemize}

Search paths can be initialized by creating a file ``meta.conf'' in
the directory from which the {\tt meta} command is initiated.  This
file may contain a list of absolute and/or relative path names (each
on a separate line) that will be searched when opening modules.  For
instance, in the {\tt pico} directory (see 
the \link{Guided Tour}[, Section~\ref{GuidedTour}]{GuidedTour})
you will find an example {\tt meta.conf} file which only contains the
path `{\tt .}', i.e., only the current directory will be searched.

\begin{figure}[t]
\begin{Label}{FIG:viewer}
\begin{center}
\T \epsfig{file=viewer.ps,width=14cm}
\W \htmlimage{viewer.gif}
\caption{ToolBus viewer}
\end{center}
\end{Label}
\end{figure}

\section{The Main Window}
\label{MainWindow}

The main window of the \ASmetaenv\ immediately after starting the system was
already \link{shown}[ (Figure~\ref{FIG:meta-start})]{FIG:meta-start}.
After loading a specification it may look as shown
\link{\htmlonly{below}}[in Figure~]{FIG:meta-pico}.

The main window consists of the following parts:

\begin{itemize}
\item At the top of the window is a menu bar that contains the following menus:
  \begin{itemize}

   \item {\tt File}: for creating, opening, saving, and printing
    specifications as well as for leaving the \ASmetaenv.
    The {\tt File} menu is described in 
    \T Section~\ref{FileMenu}.
    \W \link{File Menu}[]{FileMenu}.
    
  \item {\tt Edit}: for setting user preferences.  The {\tt Edit} menu is
    described in 
    \T Section~\ref{EditMenu}.  
    \W \link{Edit Menu}[]{EditMenu}.
    
  \item {\tt Graph}: for setting options for the display of the graph in the
    import pane (see below).  The {\tt Graph} menu is described in
    \T Section~\ref{GraphMenu}.
    \W \link{Graph Menu}[]{GraphMenu}.
    
  \item {\tt Debug}: for turning on/off the display of diagnostic messages.
    The {\tt Debug} menu is described in 
    \T Section~\ref{DebugMenu}.
    \W \link{DebugMenu}[]{DebugMenu}.
    
  \item {\tt Help} for various forms of information and online help.  The {\tt
      Help} menu is described in
      \T Section~\ref{HelpMenu}.
      \W \link{Help Menu}[]{HelpMenu}.

  \end{itemize}
  
\item The \emph{import pane}: A graphical canvas (either \link{empty}[ in
  Figure~\ref{FIG:meta-start}]{FIG:meta-start}, or containing \link{rectangles
    and arrows}[ in Figure~\ref{FIG:meta-pico}]{FIG:meta-pico}) at the left
  hand side of the window shows the import graph of the specification you are
  editing.  The import pane is described in 
  \T Section~\ref{ImportPane}.
  \W \link{Import Pane}[]{ImportPane}.
  
\item The \emph{module pane}: a vertical list (either \link{empty}[ in
  Figure~\ref{FIG:meta-start}]{FIG:meta-start}, or containing names like
  \link{{\tt Layout}, {\tt Pico-Booleans}, ... }[ in
  Figure~\ref{FIG:meta-pico}]{FIG:meta-pico}) at the right/middle part of the
  window that shows the names of all modules in the current specification.
  The module pane is described in 
  \T Section~\ref{ModulePane}.
  \W \link{Module Pane}[]{ModulePane}.

 
\item The \emph{button pane}: a vertical row of buttons at the right hand side
  of the window containing buttons like {\tt Edit Syntax} and {\tt Edit
    Equations}: they are used for common operations on the current
  specification like editing, saving, or deleting a module or compiling the
  complete specification. The button pane is described in 
  \T Section~\ref{ButtonPane}.
  \W \link{Button Pane}[]{ButtonPane}.
  
\item A \emph{status bar} at the bottom of the window that shows the current
  activity of the system. Examples are: {\tt idle} (the system is doing
  nothing), {\tt parsing} (the system is performing a syntactic analysis of
  some module or term), and {\tt rewriting} (the system is rewriting a term).

\end{itemize}

\begin{figure}
\begin{Label}{FIG:meta-pico}
\begin{center}
\T \epsfig{file=meta-pico.ps,width=12cm}
\W \htmlimage{meta-pico.gif}
\caption{Main window after loading the Pico specification}
\end{center}
\end{Label}
\end{figure}

\section{The Menus of the Main Window}
 
\subsection{The File menu}
\label{FileMenu}



The \link{{\tt File} menu}[]{FIG:file-menu} 
is used for creating, opening, saving and printing
specifications as well as for quitting the \ASmetaenv.  
\T It is shown in Figure \ref{FIG:file-menu}.

\begin{figure}
\begin{Label}{FIG:file-menu}
\begin{center}
\T \epsfig{file=file-menu.ps,width=3cm}
\W \htmlimage{file-menu.gif}
\caption{{\tt File} menu (main window)}
\end{center}
\end{Label}
\end{figure}

{\tt New} and {\tt Open} are used for creating
a new module and opening an existing one, respectively.
In both cases a dialog window appears as shown 
\link{dialog window}[ (Figure~\ref{FIG:open-file})]{FIG:open-file} appears.

\begin{figure}
\begin{Label}{FIG:open-file}
\begin{center}
\T \epsfig{file=open-file.ps,width=8cm}
\W \htmlimage{open-file.gif}
\caption{Dialog for opening a module ({\tt File} menu)}
\end{center}
\end{Label}
\end{figure}

{\tt Save All} saves all modules that have been opened so far.
{\tt Clear All} removes all modules that have been opened so far from the
Meta-Environment. If modules have been modified, you are explicitly
asked to save them. The same effect can be achieved by exiting the
Meta-Environment (using {\tt Quit}, see below) and starting a new
version of the Meta-Environment using the {\tt meta} command.

{\tt Export} allows the export of the import pane in various graphical
formats.  \link{{\tt Print Setup}}[]{FIG:printer-setup}
allows the customization of the command
used for printing.  
\begin{iftex}
Its dialog window is shown in
Figure~\ref{FIG:printer-setup}.  
\end{iftex}
{\tt Print} prints the current import pane.

\begin{figure}
\begin{Label}{FIG:printer-setup}
\begin{center}
\T \epsfig{file=printer-setup.ps,width=3cm}
\W \htmlimage{printer-setup.gif}
\caption{Dialog for printer setup}
\end{center}
\end{Label}
\end{figure}

{\tt Quit} ends the execution of the \ASmetaenv.

\subsection{The Edit menu}
\label{EditMenu}





The \link{{\tt Edit} menu}[(Figure~\ref{FIG:edit-menu})]{FIG:edit-menu} is used for setting the preferences of a user.
At this moment this functionality is not yet implemented and
this menu is disabled.

\begin{figure}
\begin{Label}{FIG:edit-menu}
\begin{center}
\T \epsfig{file=edit-menu.ps,width=3cm}
\W \htmlimage{edit-menu.gif}
\caption{{\tt Edit} menu (main window)}
\end{center}
\end{Label}
\end{figure}

\subsection{The Graph Menu}
\label{GraphMenu}

The \link{{\tt Graph} menu}[ (Figure~\ref{FIG:graph-menu})]{FIG:graph-menu} is used for 
setting options for the display of the graph in the import pane.  


\begin{figure}
\begin{Label}{FIG:graph-menu}
\begin{center}
\T \epsfig{file=graph-menu.ps,width=4cm}
\W \htmlimage{graph-menu.gif}
\caption{{\tt Graph} menu (main window)}
\end{center}
\end{Label}
\end{figure}

{\tt View All} enlarges the import pane to enable the display of the whole
import graph.

{\tt Autoresize after loading} defines the size of the import pane
after loading a specification. When enabled (check box red), the
import pane will be enlarged to enable the display of the whole import
graph.  When disabled (check box empty), only part of the import graph
will be shown.

{\tt Animate while loading} defines the visualization of the import
graph while the system is loading a specification. When enabled, the
import graph will be updated each time a module from the specification
has been loaded in the system. When disabled, the new import graph
will only be shown when the loading of the specification is complete.


\subsection{The Debug Menu}
\label{DebugMenu}

The \link{{\tt Debug} menu}[ is shown in Figure~\ref{FIG:debug-menu} and ]{FIG:debug-menu} 
contains the
single check box {\tt Diagnostic messages}.  When enabled, diagnostic
messages will be displayed.  Otherwise the systems runs silently.

\begin{figure}
\begin{Label}{FIG:debug-menu}
\begin{center}
\T \epsfig{file=debug-menu.ps,width=4cm}
\W \htmlimage{debug-menu.gif}
\caption{{\tt Debug}  menu (main window)}
\end{center}
\end{Label}
\end{figure}

\subsection{The Help Menu}
\label{HelpMenu}

The \link{{\tt Help} menu}[ is shown in
Figure~\ref{FIG:help-menu} and]{FIG:help-menu}
provides various (still experimental) help features.

\begin{figure}
\begin{Label}{FIG:help-menu}
\begin{center}
\T \epsfig{file=help-menu.ps,width=5cm}
\W \htmlimage{help-menu.gif}
\caption{{\tt Help}  menu (main window)}
\end{center}
\end{Label}
\end{figure}

{\tt About Meta-Environment} and {\tt About Graph Browser}
give background on the  \ASmetaenv\ and on the graph browser
that is part of the main window.

{\tt Mouse Operations} gives an overview of the meaning of
the available mouse operations.


{\tt Online Help} displays online help files in a {\tt Netscape
Navigator} window.

{\tt JitterBug Activated} opens in an active {\tt Netscape} window a page
to enter a bug report. This offers the users of the \ASmetaenv\ an online
facility to report bugs to the developers.

Both {\tt Online Help} and {\tt JitterBug Activated} assume that there
is a {\tt Netscape} running, other browsers are not yet supported.

\section{The Panes of the Main Window}

The two left-most panes of the main window give two, alternative,
views on the \asfsdf\ specification that has been loaded into the
Meta-Environment.  On the left you see the import graph, on the right
you see a list of modules.  Using one of these views, the same set of
operations is available either via a pop up menu or via the buttons in
the pane at the right-hand side of the main window.

\subsection{The Import Pane}
\label{ImportPane}

The \emph{import pane} gives a graphical view of the specification by
displaying the \emph{import} relation between modules in the form of a
graph. A module $M_1$ imports another module $M_2$ if $M_1$ contains
an import statement of the form {\tt imports $M_2$}.

Each module is represented by a rectangle. An arrow between two
rectangles represents an import relation between the two corresponding
modules. Modules with a special status (e.g., imported by some other
module but never defined, or containing syntax errors) are represented
by a circle.

The import pane has the following interaction facilities:

\begin{itemize}
  
\item Different parts of the import graph can be displayed by using the
  horizontal or vertical scrollbar at the right and at the bottom of the
  import pane.

\item By clicking and holding the middle mouse button outside any
module, the import graph can be dragged across the import pane.

\item Clicking \emph{on} a module yields 
a \link{pop up menu}[ as shown in Figure~\ref{FIG:module-menu}]{FIG:module-menu}. 
It contains the same entries as the
\link{button pane of the main window}[ (see 
Section \ref{ButtonPane})]{ButtonPane}.

\begin{figure}
\begin{Label}{FIG:module-menu}
\begin{center}
\T \epsfig{file=module-menu.ps,width=3cm}
\W \htmlimage{module-menu.gif}
\caption{Pop up menu for module operations (import pane)}
\end{center}
\end{Label}
\end{figure}

\item Clicking \emph{outside} any module yields a \link{another pop-up menu}[ as shown
in Figure~\ref{FIG:new-open}]{FIG:new-open}.  It contains the entries {\tt New} and
{\tt Open} for creating a new and opening an existing module, respectively. 
These two operations are also available from the 
\link{{\tt File} menu}[ (see Section~\ref{FileMenu})]{FileMenu}.

\begin{figure}
\begin{Label}{FIG:new-open}
\begin{center}
\T \epsfig{file=new-open.ps,width=2cm}
\W \htmlimage{new-open.gif}
\caption{Pop up menu for adding a module (import pane)}
\end{center}
\end{Label}
\end{figure}
\end{itemize}

\subsection{The Module Pane}
\label{ModulePane}

The import pane is particularly useful when you want to understand the
overall structure of a specification but it may become unwieldy for
very large specifications. For large specifications the module pane
may give you quicker access to the modules in the specification.
It presents a vertical, scrollable, list of the names of all the modules in
the specification.

The main purpose of the module pane is to select one or more modules from
the specification on which an operation from the 
\link{button pane}[ (Section~\ref{ButtonPane})]{ButtonPane}
is to be performed.  One module is selected
by clicking on the corresponding module name in the module pane.  More
than one module can be selected by clicking on a module name, keeping
the mouse button down and and then dragging the mouse to the last
desired module name.

After making the selection, an operation can be performed on all the
selected modules by pushing a button from the button pane.  For
instance, pushing the {\tt Edit Syntax} button will create editors for
the syntax of all the selected modules.

\subsection{The Button Pane of the Main Window}
\label{ButtonPane}

The entries in the button pane at the right-hand side of the main
window (see \link{Main Window }[ in Figure~\ref{FIG:meta-start}]{FIG:meta-start}) and
in the module pop-up menu (see \link{screenshot}[ in
Figure~\ref{FIG:module-menu}]{FIG:module-menu} and the description of the \link{Import
Pane}[ in Section\ref{ImportPane}]{ImportPane}) are mostly identical in function,
except that the latter may operate on more than one module while the
former operate on a single module only.

We describe them here together. The names of the entries in the
pop-up menu are given in parentheses when they differ from the 
corresponding button in the button pane.

First, one or more modules are selected via the import pane or the
module pane. Next, one of the following operations can be applied to
them.

{\tt Edit Syntax}, {\tt Edit Equations},
and {\tt Edit Term} activate (structure) editors for
editing syntax, equations, or terms, respectively, for the selected module(s).
{\tt New Term} allows the creation of a new term (pop-up menu only).

{\tt Save} ({\tt Save Module}) saves the tree representation of the 
syntax definition and the equations section of the selected module(s).
{\tt Save All} saves the tree representation of the 
syntax definition and the equations section of all modules.
{\tt Revert} ({\tt Revert Module}) removes modules and 
re-opens the removed modules, 
the effect is that modifications made to these modules are discarded.
{\tt Delete} ({\tt Delete Module}) removes modules, 
\emph{beware the deleted modules are also physically removed from 
the file system}.

{\tt Compile} ({\tt Compile Module...}) invokes the \asfsdf-compiler to generate C code.  
\T Section \ref{compiling-specs}
\W \link{Compiling Specifications}[]{compiling-specs} 
gives more details on the compilation of \asfsdf\ specifications.

{\tt Dump Equations...} dumps the equation of the selected
module and all its imports. This feature is needed in order to 
\link{run the evaluator in a stand-alone way}[, see Section
\ref{SEC:interpretationgofterms}]{SEC:interpretationgofterms}.

{\tt Dump Parse Table...} dumps the parse table of the selected module and
all its imports in order to parse terms. This functionality is needed in
order to 
\link{use the parser in a stand-alone way}[, see Section
\ref{SEC:parsingofterms}]{SEC:parsingofterms}.

{\tt Rename Module...} renames a module, not only in the
Meta-En\-vir\-on\-ment but also physically on the file system.

{\tt Print}({\tt Print Module}) prints the syntax and the equation part
together in one file.

{\tt Info} ({\tt Module Info}) gives detailed information for the selected modules (not yet implemented).

\section{Editing Specifications}

The editors used to create and modify specifications and terms are
based on \xemacs, so some familiarity with this editor is assumed.
See \xlink{xemacs.org}{http://www.xemacs.org/Documentation/index.html}
for documentation on \xemacs.

The two pull-down menus {\tt Meta-Environment} and {\tt Move}have been
added to the standard user-interface of \xemacs:

\begin{itemize}
\item While editing syntax or equations, the {\tt Meta-Environment}
menu contains a \link{single button}[
(Figure~\ref{FIG:meta-env-menu1})]{FIG:meta-env-menu1} {\tt Parse} for applying the
\asfsdf\ parser to the complete text buffer..

\begin{figure}
\begin{Label}{FIG:meta-env-menu1}
\begin{center}
\T \epsfig{file=meta-env-menu1.ps,width=1.2cm}
\W \htmlimage{meta-env-menu1.gif}
\caption{{\tt Meta-Environment} menu (editor)}
\end{center}
\end{Label}
\end{figure}

For term editors the {\tt Meta-Environment} menu contains \link{two
buttons}[ (Figure~\ref{FIG:meta-env-menu2})]{FIG:meta-env-menu2}: {\tt
Parse} and {\tt Reduce}. {\tt Parse} parses the term in the editor and
{\tt Reduce} that applies the evaluator to the text in the editor.

\begin{figure}
\begin{Label}{FIG:meta-env-menu2}
\begin{center}
\T \epsfig{file=meta-env-menu2.ps,width=1.6cm}
\W \htmlimage{meta-env-menu2.gif}
\caption{{\tt Meta-Environment} menu (term editor)}
\end{center}
\end{Label}
\end{figure}

\item The {\tt Move} pull-down menu
contains \link{four buttons}[ (Figure~\ref{FIG:move-menu})]{FIG:move-menu}
for structured traversal of the syntax tree of the text in the editor.
Using the entries {\tt Left}, {\tt Righ}t, {\tt Up}, {\tt Down} the
user can navigate in the tree.
\end{itemize}


\begin{figure}
\begin{Label}{FIG:move-menu}
\begin{center}
\T \epsfig{file=move-menu.ps,width=1.2cm}
\W \htmlimage{move-menu.gif}
\caption{{\tt Move} menu (editor)}
\end{center}
\end{Label}
\end{figure}

Editing is now described in more detail.

\subsection{Editing the Syntax Part of a Module}

An editor for editing the syntax part of a module can be activated by
pressing the {\tt Edit Syntax} button
\link{Button Pane}[ (Section~\ref{ButtonPane})]{ButtonPane} of the main window
or the pop-menu in the \link{Import Pane}[ (Section~\ref{ImportPane})]{ImportPane}.
An example is shown 
\T in Figure~\ref{FIG:Bool-example.sdf}.  
\W \link{here}[]{FIG:Bool-example.sdf}.

Initially the entire text is
highlighted and the message ``{\tt Focus symbol: term}'' appears
in the status line at the bottom of the main window.

Via the entry {\tt Parse Buffer} in the {\tt Meta-Environment} menu of the
editor, the parser can be activated.  The parser is finished when the
status line in the main window displays ``{\tt Idle}'' again.

Note: when parsing a large term it may take
some time for the editor to be active again. If the parse was
successful, the bottom line in the \xemacs\ window displays the message
{\tt Focus sort: None}. If the term contains an error, the cursor is
located at the position where the error was detected and the bottom line
in the \xemacs\ window displays the message
{\tt Parse error near cursor}.
Clicking on an arbitrary location in a correctly parsed term sets the focus
and changes the bottom line message.


\subsection{Editing the Equations Section of a Module}

An editor for editing the equations section of a module is activated
via the button {\tt Edit Equations}
in the \link{Button Pane}[ (Section~\ref{ButtonPane})]{ButtonPane} of the main window
or the pop-menu in the \link{Import Pane}[ (Section~\ref{ImportPane})]{ImportPane}.
An example is shown 
\T in Figure \ref{FIG:Bool-example.asf}.  
\W \link{here}[]{FIG:Bool-example.asf}.

The entry {\tt Parse} in the {\tt Meta-Environment} menu of the editor 
activates the parser for the
equations. It is possible that in order to parse the equations, a
parse table must be generated. This is visible through the status
message {\tt Generating Parse Table}.

\subsection{Editing Terms}
\label{EditingTerms}

An editor for editing a term over a module is activated via the button
{\tt Edit Term}
in the \link{Button Pane}[ (Section~\ref{ButtonPane})]{ButtonPane} of the main window
or the pop-menu in the \link{Import Pane}[ (Section~\ref{ImportPane})]{ImportPane}.
An example is shown 
\T in Figure \ref{FIG:Bool-example.trm}.
\W \link{here}[]{FIG:Bool-example.trm}.

The entry {\tt Parse} in the {\tt Meta-Environment} menu of the editor 
activate the parser for this
term. It is possible that in order to parse the term, a parse table
must be generated. This is visible through the status message {\tt
Generating Parse Table}.

The entry {\tt Reduce} in the {\tt Meta-Environment} menu of the
editor activates the evaluator\footnote{We will also use interpreter,
rewriter, or reducer instead of evaluator, and equivalently we use 
evaluating, interpreting, rewriting, or reducing of a term}. The term is
reduced given the specified equations (if any). In order to reduce the
term it may be necessary to parse the equations of various modules and
to initialize the evaluator with this set of equations.

\section{Executing Specifications} 
\label{ExecutingSpecifications}

Some (but not all!) \asfsdf\ specifications can be executed by interpreting
each equation as a (conditional) rewrite rule from left to right.

When you have created a term (using a \link{term editor}[, see
Section~\ref{EditingTerms}]{EditingTerms}), 
you can reduce it (by selecting the {\tt Reduce} entry from 
the {\tt Meta-Environment} menu of the term
editor).  As a result, rewrite rules will be applied until a normal
form is reached (a term for which no applicable rule can be
found). This normal form is the result of the execution and is
displayed in a new term window.

The rewriting process is further described in Section
\begin{iftex}
\ref{Equations}.
\end{iftex}
\begin{ifhtml}
\link{Equations}[]{Equations}.
\end{ifhtml}

\section{Guided Tour}
\label{GuidedTour}

%%\begin{figure}
%%\begin{Label}{FIG:meta-booleans}
%%\begin{center}
%%\T \epsfig{file=meta-booleans.ps,width=12cm}
%%\W \htmlimage{meta-booleans.gif}
%%\caption{Main window after opening {\tt Pico-Booleans}}
%%\end{center}
%%\end{Label}
%%\end{figure}

To help you get acquainted with the \ASmetaenv\ the system
contains two example specifications. The first is the one-module specification:
{\tt Bool-example}, and the second is the specification of the syntax, 
typechecker, and dynamic semantics of the small programming language Pico.

This Guided Tour is meant to guide you through these specifications, and show
you the main features of the \ASmetaenv. Only global information
is given about these features but references are made to parts of the
user-manual where detailed information can be found.

\subsection{Before you start the Guided Tour}

When configuring the Meta-Environment a directory was giving where
the Meta-Environment will be installed, e.g., {\tt <path>/asfsdf-meta}. 
You will then find the files needed for this Guided Tour in the directory 
{\tt <path>/asfsdf-meta/share/demo/pico}. 
It is advisable to make your personal copy of this
directory.  In this Guided Tour we will use `{\tt pico}' to refer to your own
copy of the directory. Furthermore, all the examples given in this
manual can be found in$\\$
{\tt <path>/asfsdf-meta/share/demo/user-manual-examples}.

For each module in a specification two files exist: `{\tt
  $module$.sdf}' contains the syntax of $module$ and `{\tt
  $module$.asf}' contains the equations (semantics) of $module$. The
  directory {\tt pico} contains:

\begin{itemize}

\item Two files for the module {\tt Bool-example}.

\item Files for the Pico-specification.

\item Three examples of Pico-programs: `{\tt big.pico}', `{\tt fac.pico}',
  `{\tt small.pico}'.

\item Terms for typechecking and evaluating these Pico-programs.

\end{itemize}

\subsection{Beginning the Guided Tour}

\begin{itemize}

\item Go to directory {\tt pico}. 
\item Type the command {\tt meta}. The \link{main window}[]{FIG:meta-start}
of the Meta-environment will
\begin{ifhtml}
appear.
\end{ifhtml}
\begin{iftex}
appear as shown in Figure~\ref{FIG:meta-start}.
\end{iftex}
  
\item Add the module {\tt Bool-example} by selecting the File menu, and
  choosing the Open button. In a dialog window, the system asks you to give
  the name of the module to be opened. It presents a list of all files with
  extension `{\tt sdf}'. Click once on `{\tt Bool-example.sdf}' and then
  push the {\tt Open} button. This will load the module {\tt Module-example}
  (both its syntax and equations!) into the system.
  
\item Verify that module {\tt Bool-example} appears as a rectangle in
the import pane as well as in the module pane of the 
\link{main window}[ as shown in
Figure~\ref{FIG:meta-Bool-example}]{FIG:meta-Bool-example}.

\end{itemize}

\begin{figure}
\begin{Label}{FIG:meta-Bool-example}
\begin{center}
\T \epsfig{file=meta-Bool-example.ps,width=12cm}
\W \htmlimage{meta-Bool-example.gif}
\caption{Main window after opening {\tt Bool-example}}
\end{center}
\end{Label}
\end{figure}

\subsection{The Module Bool-example}
\label{Bool-example}

One of the simplest specifications possible, and therefore frequently used as
an example, is the datatype of the Boolean values. It defines the constants
{\tt true} and {\tt false} and the functions \emph{and} and \emph{or}
 (written in infix notation using
the left-associative operators `{\tt \&}' and `{\tt |}', respectively) and
\emph{not} (written
in prefix notation using the function symbol `{\tt not}'). Here is the
specification:

\begin{IncCode}
\begin{verbatim}
module Bool-example
  exports
    sorts BOOL 
    lexical syntax
      [\ \t\n]           -> LAYOUT

    context-free syntax
      "true"             -> BOOL
      "false"            -> BOOL 
      BOOL "|" BOOL      -> BOOL {left}
      BOOL "&" BOOL      -> BOOL {left}
      "not" "(" BOOL ")" -> BOOL
      "(" BOOL ")"       -> BOOL {bracket}

  hiddens
    variables
      "Bool"[0-9\']* -> BOOL

    context-free priorities
      BOOL "&" BOOL -> BOOL >
      BOOL "|" BOOL -> BOOL

    equations

    [B1] true | Bool = true 
    [B2] false | Bool = Bool

    [B3] true & Bool = Bool 
    [B4] false & Bool = false

    [B5] not(false) = true 
    [B6] not(true) = false
\end{verbatim}
\end{IncCode}

The \asfsdf\ features used in this specification are explained in
\T Section~\ref{ASF+SDF}.
\W \link{Introduction to \asfsdf}[]{ASF+SDF}.

\subsubsection{The Module Editor for {\tt Bool-example}}

\begin{itemize}
  
\item Select module {\tt Bool-example} from the module pane (the vertical list
  of module names that now only contains {\tt Bool-example}) by clicking on it
  once.
  
\item Push the button {\tt Edit Syntax} in the button pane at the right-hand
  side of the main window.  An editor will appear containing the syntax part
  of the {\tt Bool-example} specification: the \sdf\ section.  This editor is
  a version of the standard text editor Emacs extended with the menus 
 {\tt Meta-Environment} and {\tt Move}.
The result is shown 
\T in Figure~\ref{FIG:Bool-example.sdf}.
\W \link{below}[]{FIG:Bool-example.sdf}.

\begin{figure}
\begin{Label}{FIG:Bool-example.sdf}
\begin{center}
\T \epsfig{file=Bool-example.sdf2.ps,width=12cm}
\W \htmlimage{Bool-example.sdf2.gif}
\caption{Editor for the syntax of {\tt Bool-example}}
\end{center}
\end{Label}
\end{figure}
  
\item Push the button {\tt Edit Equations}.  This will open a new 
  instance of Emacs containing the semantic part
  of the {\tt Bool-example} specification: a list of conditional equations.
  Note that the syntax of the equations is determined by the syntax defined in
  the \sdf\ section. 
The result is shown 
\T in Figure~\ref{FIG:Bool-example.asf}.
\W \link{below}[]{FIG:Bool-example.asf}.

\begin{figure}
\begin{Label}{FIG:Bool-example.asf}
\begin{center}
\T \epsfig{file=Bool-example.asf.ps,width=12cm}
\W \htmlimage{Bool-example.asf.gif}
\caption{Editor for the equations of {\tt Bool-example}}
\end{center}
\end{Label}
\end{figure}

\end{itemize}

\subsubsection{A Term Editor for {\tt Bool-example}}

\begin{itemize}
\item Open a term-editor over module {\tt Bool-example} by first selecting
  module {\tt Bool-example} in the module pane, and then pushing the {\tt
    New Term} button.  A standard dialog window pops up.
    Enter any new filename, for instance, `{\tt my-term}'.

\item 
  Type the term `{\tt true \& false}' in this editor. Observe how the text
  that you type gets a different background color.
  This is called a \emph{focus}. 
The result is shown
\T  in Figure~\ref{FIG:Bool-example.trm}.
\W \link{below}[]{FIG:Bool-example.trm}.

\begin{figure}
\begin{Label}{FIG:Bool-example.trm}
\begin{center}
\T \epsfig{file=Bool-example.trm.ps,width=12cm}
\W \htmlimage{Bool-example.trm.gif}
\caption{Term editor for {\tt Bool-example} after entering `{\tt true \&
    false}'}
\end{center}
\end{Label}
\end{figure}

\item Click in the focus, this will move the cursor (a single character-sized
  rectangle) 
  
\item From menu {\tt Meta-Environment} click the {\tt Parse} button.  The text
  in the focus is now parsed and the different background color has 
  disappeared. 
The result is shown 
\T in Figure~\ref{FIG:Bool-example.trm2}.
\W \link{below}[]{FIG:Bool-example.trm2}.

\begin{figure}
\begin{Label}{FIG:Bool-example.trm2}
\begin{center}
\T \epsfig{file=Bool-example.trm2.ps,width=12cm}
\W \htmlimage{Bool-example.trm2.gif}
\T \caption{Same term editor as in Figure~\ref{FIG:Bool-example.trm} after parsing}
\W \caption{Same term editor as \link{above}[]{FIG:Bool-example.trm} after parsing}
\end{center}
\end{Label}
\end{figure}

\end{itemize}

All the text \emph{outside} the focus is (by definition) always syntactically
correct. The text \emph{inside} the focus is fresh text which may contain syntax
errors.

\begin{itemize}

\item Click on one of the characters of the word `{\tt false}'.  You
have selected `{\tt false}' as new focus and the blue background
reappears. 
This is shown 
\T in Figure~\ref{FIG:Bool-example.trm3}.
\W \link{below}[]{FIG:Bool-example.trm2}.

\begin{figure}
\begin{Label}{FIG:Bool-example.trm3}
\begin{center}
\T \epsfig{file=Bool-example.trm3.ps,width=12cm}
\W \htmlimage{Bool-example.trm3.gif}
\caption{Term editor for {\tt Bool-example} after clicking on `{\tt false}'}
\end{center}
\end{Label}
\end{figure}

\item Click on the \emph{and} operator `{\tt \&}'.  The whole expression is
  now selected as focus.

\end{itemize}

The movements of the focus are \emph{syntax-directed}: when you click on any
character in the text, the smallest syntactic unit enclosing that character
will be selected and becomes the focus.


\begin{itemize}
  
\item Reduce the term in the term-editor by clicking the {\tt Reduce} button
  in the {\tt Meta-Environment} menu of the editor.  The result will appear in
  a new \link{term editor window}[ (Figure~\ref{FIG:reduct.out})]{FIG:reduct.out}.

\begin{figure}
\begin{Label}{FIG:reduct.out}
\begin{center}
\T \epsfig{file=reduct.out.ps,width=12cm}
\W \htmlimage{reduct.out.gif}
\caption{New term editor with normal form of `{\tt true \& false}'}
\end{center}
\end{Label}
\end{figure}
\end{itemize}

\paragraph{Error-messages}

\begin{itemize}
  
\item Edit the term `{\tt true \& false}' such that the new term will be
  syntactically incorrect. For instance, type `{\tt true \& wrong}'. Force a
  parse of the term by selecting the {\tt Parse Buffer} button of the 
  {\tt Meta-Environment} menu.
  
  In the status line at the bottom of the edit window a message appears
  `{\tt Parse error near cursor}' and the cursor will be positioned in
  the word `{\tt wrong}'

\end{itemize}

\paragraph{Associativity, Priorities and Brackets}

\begin{itemize}
  
\item Erase the term in your term-editor and type a new term `{\tt true \&
    false \& true}'. 

\item Parse the term using the {\tt Parse Buffer} button.

\item  Try to find out how this term has been parsed by clicking
  on different parts of the term and studying the resulting focus.

\end{itemize}

The {\tt left} attribute in the \sdf\ definition indicates that the `{\tt \&}'
operator is left associative. The term will thus be parsed as `{\tt (true \&
  false) \& true}'. Clicking on the left or right {\tt \&} yields a focus that
corresponds with this parse.

\begin{itemize}
  
\item Erase the term in your term-window and type a new term `{\tt true |
    false \& true}'. 
\item Parse the term using the {\tt Parse Buffer} button.
  
\item Try to find out how this term has been parsed by clicking on various
  parts of the term and studying the resulting focus.

\end{itemize}

The {\tt context-free priorities} definitions in the \sdf\ 
definition state that the `{\tt
  \&}' operator binds stronger than the `{\tt |}' operator.

\begin{itemize}
  
\item Erase the term in the term-editor and type a new term `{\tt true \&
    false}'.  Click on `false', so that the focus is around `false' only. Then
  add `{\tt | true}' after `{\tt false}', so that the resulting term is `{\tt
    true \& false | true}'.  

\item Parse the term.

\item Click on the `{\tt \&}' symbol. Is this what you wanted? Probably not.
\end{itemize}
  
To resolve a priority conflict `{\tt (}' and `{\tt )}' which are defined as
brackets in the \sdf\ definition are put around the term `{\tt false | true}'.
Thus `{\tt true \& (false | true})' is more likely to express what you
intended.

\subsubsection{Modifying {\tt Bool-example}}

The \ASmetaenv\ is an \emph{incremental environment generator}. After
each edit operation on a module, its \emph{implementation} (i.e., scanner, parser and
term rewriting system) is updated immediately.

The editing of both the syntax section and the equations section of a module is
syntax-directed like the editing of terms in a term editor.

\paragraph{Modifying the Equations}

The equations section of a module begins with the keyword {\tt equations}
and is saved in files ending on `{\tt .asf}'.

\begin{itemize}

\item  Click in the equation section to investigate the focus behavior.
  
\item Change the equations, for instance replace in equation {\tt [B1]} the
  last part `{\tt = true}' by `{\tt = false}'. 
  
\item Study the effect on the reduction of terms in the term-editor.

\end{itemize}

\paragraph{Modifying the Syntax}

The syntax part of a module starts with the keyword {\tt module}
and  is saved in files ending on `{\tt .sdf}'.
Modifying the syntax causes the generated scanner and parser to be adapted.
After each edit operation in the \sdf\ section that is followed by a parse of
the \sdf\ section, the focus in both the equations section and the term editor
is extended to completely contain the text in these editors.

Modifying the context-free syntax:

\begin{itemize}
  
\item Change the syntax of the defined functions. E.g, replace `{\tt not}' by
  `{\tt negation}'.

\item Try to re-parse the equations. 
  
%%\item Investigate the expand menu in the term-editor. (type `{\tt <BOOL>}' and
%%  select {\tt expand}.)

\end{itemize}

Modifying the priorities: 

\begin{itemize}

\item Remove the priority declaration. 
  
\item Type the term `{\tt true \& false | true}' in the term-editor (or
  anything similar according to your current syntax). Try to parse this term.

\item Add the priority declarations again.

\end{itemize}

Modifying layout in the lexical section: 

\begin{itemize}

\item Remove the lexical syntax with the {\tt LAYOUT} definitions. 

\item Try parsing equations of {\tt Bool-example}.

\end{itemize}

\paragraph{Frequently occurring errors} Omitting the {\tt LAYOUT} definition is one of most common
errors made when writing a new specification; always make sure your syntax
definitions define at least spaces and newlines to be {\tt LAYOUT}.

\begin{itemize}
  
\item End the editing of your term and the module {\tt Bool-example} by
  selecting the {\tt Exit XEmacs} from the {\tt File} menu of the editor.  
  If you like, you can save the changes to module Bool-example.

\end{itemize}

If you save the changes the files `{\tt Bool-example.sdf}' and `{\tt
  Bool-example.asf}' will be modified.


\begin{itemize}
  
\item Exit the system by pushing the {\tt Quit} entry in the {\tt File} menu
  of the main window of the \ASmetaenv.

\end{itemize}


\subsection{The Pico Specification}

More features of the  \ASmetaenv\  can be studied by looking at the
Pico specification. Pico is a toy language used demonstration purposes.





\begin{itemize}



\item Open an editor for the \link{syntax}[
(Figure~\ref{FIG:Pico-Booleans-sdf})]{FIG:Pico-Booleans-sdf}
      of {\tt Pico-Booleans}.

\begin{figure}[t]
\begin{Label}{FIG:Pico-Booleans-sdf}
\begin{center}
\T \epsfig{file=Pico-Booleans.sdf2.ps,width=12cm}
\W \htmlimage{Pico-Booleans.sdf2.gif}
\caption{Editor for syntax of {\tt Pico-Booleans}}
\end{center}
\end{Label}
\end{figure}

\item Open an editor for the \link{equations}[
(Figure~\ref{FIG:Pico-Booleans-eqs})]{FIG:Pico-Booleans-eqs}.

\begin{figure}
\begin{Label}{FIG:Pico-Booleans-eqs}
\begin{center}
\T \epsfig{file=Pico-Booleans.asf.ps,width=12cm}
\W \htmlimage{Pico-Booleans.asf.gif}
\caption{Editor for equations of {\tt Pico-Booleans}}
\end{center}
\end{Label}
\end{figure}

\item Study the differences in syntax and equations between with {\tt Bool-example}
and {\tt Pico-Booleans}.

\end{itemize}

Now we turn our attention to the complete Pico specification.

\begin{itemize}
  
\item Leave the \ASmetaenv.  This is done by
selecting {\tt Quit} from the \link{{\tt File} menu}[ (Section
~\ref{FileMenu})]{FileMenu}.

\item Go to {\tt pico}, and type \link{{\tt meta}}[
(Section~\ref{StartingMeta})]{StartingMeta} at the command line.
  
\item Add the module {\tt Pico-syntax} by selecting the {\tt File} menu, and
  selecting the {\tt Open...} button.  In the dialog window that appears, click
  on {\tt Pico-syntax.sdf} and push the {\tt Open} button.
  
\item As you can see in both \link{the import pane and the module pane}[
(see Figure~\ref{FIG:Pico-syntax})]{FIG:Pico-syntax}, not only
  {\tt Pico-syntax} has been added, but also all modules that are directly or
  transitively imported by {\tt Pico-syntax}.

\begin{figure}
\begin{Label}{FIG:Pico-syntax}
\begin{center}
\T \epsfig{file=meta-Pico-syntax.ps,width=12cm}
\W \htmlimage{meta-Pico-syntax.gif}
\caption{Main window after opening {\tt Pico-syntax}}
\end{center}
\end{Label}
\end{figure}


\end{itemize}

\subsubsection{The Module Editor for Pico-syntax}

\begin{itemize}
  
\item Open an editor for the syntax of {\tt Pico-syntax} (using the {\tt Edit
    Syntax} button).

\end{itemize}
  
  A Pico program consists of the word `{\tt begin}', a declaration section, a
  series of zero or more statements, and the word `{\tt end}'. The declaration
  section consists of the word `{\tt declare}', a list of zero or more tuples
  `{\em identifier} {\tt :} {\em type}' and a semi-colon `{\tt ;}'. 
  Types are `{\tt string}' and `{\tt natural}'.  
  There are three kinds of statements:
  assignments, if-then-else statements and while-loops. The Pico language
  has also expressions for adding and subtracting natural numbers and
  for concatenating strings.

\noindent Notes:

\begin{itemize}
  
\item A module {\tt Layout} is imported, in which the 
sort {\tt LAYOUT} has been specified.
  
\item In the context-free section the list constructs 
`{\tt \{ID-TYPE ","\}*}' and `{\tt \{STATEMENT ","\}*}' are used. 
In fact, the sort {\tt SERIES}
  could have been left out entirely and be replaced by 
`{\tt \{STATEMENT ","\}*}' all through the specification. 
{\tt SERIES} is only used for
  abbreviation in the syntax rules. Also, variables over list constructs are
  declared.

\item  The Pico-syntax module contains no equations.

\end{itemize}

\subsubsection{A Term Editor for Pico-syntax}

\begin{itemize}
  
\item Open a term-editor for the Pico-program `{\tt small.pico}': select {\tt
    Pico-syntax} in the module pane and push the {\tt term} button in the
  button pane. A dialog window pops up and type `{\tt small.pico}' as name of
  the term.

\item Press the {\tt Parse Buffer} button in the {\tt Meta-Environment} menu of the
  editor. As a result, {\tt small.pico} is parsed.

\item Press the {\tt Reduce} button in the {\tt Meta-Environment} menu of the
  editor.

\end{itemize}

This has the following effects:

\begin{itemize}

\item  The term in the editor is parsed. 
  
\item All the equations that are valid for this editor are parsed and compiled
  into a rewrite system.  In this case that means the equations of the
  imported modules {\tt Pico-Booleans}, {\tt Pico-Integers}, {\tt Pico-Strings} and {\tt
    Pico-Types}. This takes some time.
  
\item The term in the editor is reduced. As no equation can be applied to
  reduce this term, the term itself is returned in the shell window from which
  the Meta-Environment has been started.
\end{itemize}

  
Reducing a term for the second time is notably faster: the equations have been
processed already. If you are curious what is going, have a look at the
status field at the bottom of the main window. It reveals the steps that
are necessary to arrive at a specification which can be interpreted.

\begin{itemize}
\item Verify this by pushing the {\tt Reduce} button once more.
\end{itemize}

\begin{itemize}

\item Load the module {\tt Pico-typecheck} in the Meta-Environment.

\item Open a term editor for the term {\tt smalltc.pico}.

\item Reduce this term.

\end{itemize}

This has the following effects:

\begin{itemize}

\item  The module {\tt Pico-typecheck} is added to the specification. 
  
\item The term in {\tt smalltc.pico} is identical to the one in 
  {\tt small.pico}, except that the program has been surrounded by `{\tt tcp(}'
  and `{\tt )}'.  The function {\tt tcp} (for type check program), applies the
  typing rules for the Pico language to its single argument: a complete Pico
  program. The result is {\tt true} or {\tt false}, depending on whether
  the Pico program is properly typed.
  
\item All equations of {\tt Pico-typecheck} and its imported
  modules are being compiled.
  
\item The term {\tt smalltc.pico} is reduced using the equations of {\tt
    Pico-typecheck}.

\end{itemize}
  
Typechecking a term for the second time is notably faster, the
modules have been added already and the equations have been compiled.

\begin{itemize}

\item Verify this, by pushing {\tt Reduce} once more.
  
\item Make some modifications to `{\tt smalltc.pico}' in the term-editor.
  Typecheck the modified program.
  
\item Open term-editors with other pico programs (`{\tt fac.pico}', `{\tt
    big.pico}') or create your own program. The corresponding applications of
  the type check function are in `{\tt factc.pico}' and `{\tt bigtc.pico}', 
  respectively.  Typecheck these programs.

\end{itemize}

The evaluation of Pico programs is achieved in a similar fashion. 
The evaluation rules are defined in the module `{\tt
  Pico-eval}'. Applications of the evaluation function `{\tt evp}' can be
found in `{\tt smallev.pico}', `{\tt facev.pico}', and `{\tt bigev.pico}.

\begin{itemize}
  
\item Repeat the steps described above for typechecking, now for the
  evaluation of Pico programs.

\end{itemize}

\subsubsection{More Exercises to Study the Pico Specification}

\begin{itemize}

\item Study other modules in the specification. The modules {\tt
    Pico-typecheck} and {\tt  Pico-eval} are explained in the next sections.
  
\item Add a repeat statement `{\tt repeat SERIES until EXP}' to {\tt
    Pico-syntax}, add typecheck equations to {\tt Pico-typecheck}, and
  eval-equations to {\tt Pico-eval}, for this new statement.

\item Add your own module to the specification. 

\item Make your own specification. Create a new directory for each
  specification.

\end{itemize}

\subsubsection{Module Pico-typecheck}

\begin{itemize}

\item Open an editor for the syntax of {\tt Pico-typecheck}.

\end{itemize}

The function `{\tt tcp}' is defined for typechecking Pico-programs.
Variants of this function exist for typechecking various parts of a Pico program. 
The
typechecking of the declarations yields a type-environment: a table of
identifiers and their types. This type-environment, and the `{\tt lookup}'
function is specified in the module {\tt Type-environments}. The typechecking
of statements uses a type-environment and yields a Boolean value.


\begin{itemize}

\item Open an editor for the equations of {\tt Pico-typecheck}.

\end{itemize}

The equations define how a Pico-program is typechecked. Equation {\tt
  [Tc1]} says that the typechecking of a program is `{\tt true}' if the
typechecking of the Series in the type-environments, `{\tt tcd(Decls)}', is
`{\tt true}'.

Equations {\tt [Tc2]} and {\tt [Tc3]} specify how a type-environment is
constructed, when the declarations are typechecked.

Equations {\tt [Tc3a]} and {\tt [Tc3b]} specify the typechecking of a,
possibly empty, list of statements. Equations {\tt [Tc4a]} through {\tt
  [default-Tc6]} specify how the three kinds of Statements are typechecked
using the information from the type-environment.

The rest of the equations deal with the typechecking of expressions.

\subsubsection{Module Pico-eval}

\begin{itemize}

\item Open an editor for the syntax of {\tt Pico-eval}.

\end{itemize}

The functions `{\tt evp}' and variants are defined for describing the dynamic semantics of
Pico. The result of evaluation is a value-environment: a table of identifiers
and values with the final values of the declared identifiers. (Note that Pico
does not have an output-statement.)


\begin{itemize}

\item Open an editor for the equations of {\tt Pico-eval}.

\end{itemize}

The equations define how a program is evaluated. Equation {\tt [Ev1]}
says that the evaluation of a program is the evaluation of the Series in the
value-environments, `{\tt evs(Decls)}'.

Equations {\tt [Ev2]} thorugh {\tt [Ev3c]}  specify how a
value-environment is constructed, when the declarations are evaluated.
Identifiers of type `{\tt natural}' get value `{\tt 0}', Identifiers of type
`{\tt string}' get value `{\tt ""}' (the empty-string).

Equations {\tt [Ev4a]} and {\tt [Ev4b]} specify the evaluation of a, possibly
empty, list of statements. Equations {\tt [Ev5a]} through {\tt [Ev5e]}
specify how the three kinds of statements are
evaluated using the information from the type-environment. Evaluating
statements means updating the value-environment.

The rest of the equations deal with the evaluation of expressions. Evaluating
an expression results in a value.

\section{An Introduction to \asfsdf}
\label{ASF+SDF}

\asfsdf\ is the result of the marriage of two formalisms \asf\ (Algebraic
Specification Formalism) and \sdf\ (Syntax Definition Formalism).  \asf\ is
based on the notion of a module consisting of a signature defining the
abstract syntax of functions and a set of conditional equations defining their
semantics. Modules can be imported in other modules. 
\sdf\ allows the simultaneous definition of concrete
(i.e., lexical and context-free) and abstract syntax and implicitly defines a
translation from text strings to abstract syntax trees.

The main idea of \asfsdf\ is to identify the abstract syntax defined by the
signature in \asf\ specifications with the abstract syntax defined 
implicitly by an \sdf\ specification, thus yielding a standard mapping 
from text to abstract syntax tree. This allows the 
association of semantics with (the tree representation of) text and 
introduces user-defined notation in specifications.

\asfsdf\ is therefore a modular specification formalism for the integrated
definition of syntax and semantics.

\subsection{Modules and Modular Structure}
\label{modules}

An \asfsdf\ specification consists of a sequence of module declarations. Each
module may define syntax rules as well as semantic rules and the notation used
in the semantic rules depends on the definition of syntax rules. The entities
declared in a module may be visible or invisible to other modules. A module
can use another module from the specification by importing it. As a result,
all visible names of the imported module become available in the importing
module.

The overall structure of a module is:

\begin{verbatim}
module <ModuleName>

  <ImportSection>*
 
  <ExportOrHiddenSection>*

equations
  <ConditionalEquation>*
\end{verbatim}

A module consists of a module header, followed by a list of zero or more
import sections, followed by zero or more hidden or exported
sections and an optional equations section that defines conditional equations.
\T In Section~\ref{ParametersRenamings}
\W \link{Later}[]{ParametersRenamings}
we will see that modules can alse be \emph{parameterized} and
that they can be \emph{renamed on import}.

Conceptually, a module is a single unit but for technical reasons the
syntax sections and the equations section are stored in physically
separate files.  For each module $M$ in a specification two files
exist: `{\tt $M$.sdf}' contains the syntax sections of $M$ and `{\tt
$M$.asf}' contains the equations section of $M$.

A {\tt <ModuleName>} is either a simple {\tt <ModuleId>} or a {\tt
<ModuleId>} followed by zero or more parameter symbols, e.g., 
{\tt <Module>[<Symbol>*]}, the symbols will be explained in 
\begin{iftex}
Section~\ref{Symbols}.
\end{iftex}
\begin{ifhtml}
Section \link{Symbols}[]{Symbols}.
\end{ifhtml}
An {\tt <ExportOrHiddenSection>} is either an \emph{export section} or a
\emph{hidden section}. The former starts with the keyword {\tt exports} and
makes all entities in the section visible to other modules.  The latter starts
with the keyword {\tt hiddens} and makes all entities in the section local to
the module.

An {\tt <ExportOrHiddenSection>} has thus one of the two forms:

\begin{verbatim}
exports 
  <Grammar>+
\end{verbatim}
\noindent or
\begin{verbatim}
hiddens
  <Grammar>+
\end{verbatim}
  
\noindent A {\tt <Grammar>} 
can be a definition of one of the following: 
\begin{itemize}
\item \link{Imports}[ (Section~\ref{Imports})]{Imports}.
\item \link{Aliases}[ (Section~\ref{Aliases})]{Aliases}.
\item \link{Sorts}[ (Section~\ref{Sorts})]{Sorts}.
\item \link{Lexical syntax}[ (Section~\ref{LexicalSyntax})]{LexicalSyntax}.
\item \link{Context-free syntax}[
(Section~\ref{ContexFreeSyntax})]{ContexFreeSyntax}.
%\item lexical variables;
%\item lexical priorities;
\item \link{Priorities}[ (Section~\ref{Priorities})]{Priorities}.
\item \link{Variables}[ (Section~\ref{Variables})]{Variables}.
\end{itemize}

There are a number of related properties which have an effect across the
various grammar items, these items are intermixed with the discussion
of the grammars:
\begin{itemize}
\item \link{\sdf\ comment convention}[
(Section~\ref{SdfComment})]{SdfComment}.

\item \link{Symbols}[ (Section~\ref{Symbols})]{Symbols}.

\item \link{Attributes of Lexical and Context-free Functions}[
(Section~\ref{Attributes})]{Attributes}.

\item \link{Disambiguation}[ (Section~\ref{Disambiguation})]{Disambiguation}.

\item \link{Parameterization and Renamings}[
(Section~\ref{ParametersRenamings})]{ParametersRenamings}.

\item \link{Equations}[ (Section~\ref{Equations})]{Equations}.
\end{itemize}

\noindent Each of these entities and properties
will now be described and illustrated by examples.

\subsection{\sdf\ comment convention} 
\label{SdfComment}

\index{Sdf comment@\sdf\ comment}
The comment convention within an \sdf\ specification is that character
between {\tt "\%\%"} and the end of line is comment as well as every
character between two {\tt "\%"} including the newline character.
An example of the use of comments is given
\T in Figure~\ref{CODE:sdfcomment}.
\W \link{below}[]{CODE:sdfcomment}.


\begin{figure}
\label{CODE:sdfcomment}
\begin{IncCode}
\begin{verbatim}
module Layout

%% In this module we define the 
%% comment convention for Sdf.

exports
  lexical syntax
    "%%" ~[\n]* [\n]   -> LAYOUT
    "%" ~[\n\%]+ "%"   -> LAYOUT
\end{verbatim}
\end{IncCode}
\caption{\sdf\ comment}
\end{figure}  

This definition also defines the comment convention in \sdf\ itself.
More details on defining layout can be found in
\T Section~\ref{Restrictions}.
\W \link{Restrictions}[]{Restrictions}. 

\subsection{Imports}
\label{Imports}

\index{imports@{\tt imports}}
\index{{\tt <ImportSection>}@{\tt <ImportSection>}}
Each {\tt <ImportSection>} starts with the keyword {\tt imports} followed
by one or more module names:

\begin{verbatim}
imports
  <ModuleName>+
\end{verbatim}

\noindent Modules can be combined by importing one module in another. 
Imports can occur as {\tt <ImportSection>} at the topmost level of a module
or they can occur within an exports or hiddens section.

When importing modules at the topmost level of a module or when the import
section occurs within the scope of an exports keyword, all exported entities
of the imported module (and of all modules that are imported indirectly by it)
become available in the importing module. In addition, they are also exported
by the importing module.  However, if the import section occurs within the
scope of a hiddens keyword, the exported entities are only visible in the
importing module but they are not exported by the importing module.

An imported module can be parameterized or decorated with renamings, see
\T Section~\ref{ParametersRenamings}
\W \link{ParametersRenamings}[]{ParametersRenamings} 
for more details.

\subsection{Symbols}
\label{Symbols}

The elementary building block of \sdf\ syntax rules is the ``symbol''.  It is
comparable to terminals and non-terminals in other grammar definition
formalisms. The elementary symbols are:

\begin{itemize}
\item \emph{sort}: corresponds to a non-terminal, e.g., {\tt Bool}.  Sort
  names always start with a capital letter and may be followed by letters
  and/or digits.  Hyphens (``{\tt -}'') may be embedded in a sort name.

\item \emph{literal}: corresponds to a terminal, e.g.,  {\tt true} or  {\tt
    "\&"}.
  
\item \emph{character class}: corresponds to a set of characters, 
e.g., {\tt [a-z]}.
Character classes will be explained in
\T Section~\ref{CharacterClasses}, 
\T \link{Character Classes}[]{CharacterClasses}, 
they are mainly used when describing the lexical syntax of a language.
\end{itemize}

Starting with the elementary symbols, more complex symbols can be constructed
by way of operators that we will discuss now.

\htmlmenu{1}

Examples of the use of the various operators will be given in
\T Sections~\ref{LexicalSyntax} and~\ref{ContexFreeSyntax}.
\W \link{Lexical Syntax}[]{LexicalSyntax} and 
\W \link{Context-freeSyntax}[]{ContexFreeSyntax}. 

\subsubsection{Option}
\label{OptionOperator}

\index{option operator@option operator}
\index{{\tt ?}@{\tt ?}}
The postfix option operator {\tt ?} describes an optional part in a syntax
rule. For instance, {\tt ElsePart?}  defines zero or exactly one occurrence of
{\tt ElsePart}.

\subsubsection{Sequence}
\label{SequenceOperator}

\index{sequence operator@sequence operator}
\index{{\tt (...)}@{\tt (...)}}
The sequence operator {\tt (...)} describes the grouping of two or more
symbols, e.g., {\tt (Bool "\&")}.  Sequences are mostly used to group symbols
together to form a more complex symbol using one of the available operators,
e.g., {\tt (Bool "\&")*}.  It has no effect to construct a sequence consisting
of a single symbol.  The empty sequence is represented as {\tt ()}.

\subsubsection{Repetition}
\label{RepetitionOperator}

\index{repetition operator@repetition operator}
\index{list@list}
\index{{\tt *}@{\tt *}}
\index{{\tt +}@{\tt +}}
Repetition operators express that a symbol should occur several times.  In
this way it is possible to construct flat lists and therefore we usually refer
to repetitions as \emph{lists}.

Repetition operators come in two flavors, with and without separators.
Furthermore, it is possible to express the minimal number of repetitions of
the symbol: at least zero times ({\tt *}), at least one time ({\tt +}), or at
least $n$ times ({\tt n+}). Examples are:

\begin{itemize}

\item {\tt Bool*} (a list of zero or more {\tt Bool}s).

\item {\tt \{Bool ","\}+} (a list of one or more {\tt Bool}s separated by comma's).

\item {\tt Bool3+} (a list of at least 3 {\tt Bool}s).

\end{itemize}

Both the element and the separator can be an arbitrary symbol.  To avoid
confusion it is, however, advisable that the element and the separator are not
the same symbol, e.g., {\tt \{Bool Bool\}*}.

\subsubsection{Alternative}
\label{AlternativeOperator}

\index{alternative operator@alternative operator}
\index{{\tt |}@{\tt |}}
The alternative operator {\tt |} expresses the choice between two symbols,
e.g., {\tt true | false} represents that either a {\tt true} symbol or a {\tt
  false} symbol may occur here.  The alternative operator is right associative
and binds stronger than any other operator on symbols. This is important
because {\tt Bool "," | Bool ";"} expresses {\tt Bool ("," | Bool) ";"}
instead of {\tt (Bool ",") | (Bool ";")}. So, in case of doubt use the
sequence operator in combination with the alternative operator.

\subsubsection{Tuple}
\label{TupleOperator}

\index{tuple operator@tuple operator}
\index{{\tt \#}@{\tt \#}}
The tuple operator {\tt \#} describes the grouping of a sequence of symbols of
a fixed length into a tuple. The notation for tuples is {\tt < , , >}, i.e., a
comma-separated list of elements enclosed in angle brackets.  For example,
{\tt Bool \# Int \# Id} describes a tuple with three elements consisting of a
{\tt Bool}, an {\tt Int} and an {\tt Id} (in that order).  For instance, {\tt
  <true, 3, x>} is a valid example of such a tuple.  The tuple operator is
right associative and binds weaker than the alternative operator.

\subsubsection{Permutation}
\label{PermutationOperator}

\index{permutation operator@permutation operator}
\index{{\tt <<...>>}@{\tt <<...>>}}
The permutation operator {\tt <<...>>} describes an arbitrary permutation of
a given sequence of symbols.  For example, {\tt <<Bool Int Id>>} represents a
permutation of the symbols {\tt Bool}, {\tt Int}, and {\tt Id}.  Valid
instantiations are, for instance, {\tt true 3 x} and {\tt x 3 true}.  There
are six valid instantiations for this permutation.

\subsubsection{Set}
\label{SetOperator}

\index{set operator@set operator}
\index{{\tt Set[...]}@{\tt Set[...]}}
The set operator {\tt Set[...]} is an abbreviation for defining a set of
elements of a given symbol.  For example, {\tt Set[Int]} abbreviates the
definition {\tt "\{" \{Int ","\}* "\}"}. As a consequnce, {\tt \{1, 2, 3\}} is
a valid instantiation for the given definition.

\subsubsection{Function}
\label{FunctionOperator}

\index{function operator@function operator}
\index{{\tt (...=>...)}@{\tt (...=>...)}}
The function operator {\tt (...=>...)} allows the definition of function
types. Left of {\tt =>} zero or more symbols may occur, right of {\tt =>}
exactly one symbol may occur.  For example, {\tt (Bool Int) => Int} represents
a function with two argument (of types {\tt Bool} and {\tt Int}, respectively)
and a result type {\tt Int}.

\subsubsection{Parameterized Sorts}
\label{ParameterizedSorts}

\index{parameterized sort@parameterized sort}
\index{{\tt ...[[...]]}@{\tt ...[[...]]}}
Sort names can have parameters. This provides a way of distinguishing 
a generic sort {\tt List} for integers, e.g. {\tt List[[Int]]},
from booleans, e.g. {\tt List[[Bool]]}.
These sort parameters can be instantiated via the parameters of 
the module name. A parameterized sort may have the form
{\tt List[[X,Y]]} where {\tt X} and {\tt Y} are generic sorts
which will be provided via the parameters of the module name.
See
\T Section~\ref{ParametersRenamings}
\W \link{Parameterization and Renamings}[]{ParametersRenamings}
for more details.
The context-free syntax rule describing parameterized sorts is:
\begin{verbatim}
   Sort "[[" {Symbol ","}+ "]]" -> Symbol
\end{verbatim}

\subsection{Aliases}
\label{Aliases}

In ordinary programming it is good practice to use named constants to
represent literals or constant values.  In \sdf\ it is good practice to give a
name (``alias'') to complicated symbols that occur repeatedly in the
specification.  An alias is thus a named abbreviation for a complicated
symbol.  For example,

\begin{verbatim}
aliases
  Bool # Int # Id -> Tuple3
\end{verbatim}
introduces the alias {\tt Tuple3} for the symbol {\tt Bool \# Int \# Id} and
instead of using {\tt Bool \# Int \# Id} one can use the alias {\tt Tuple3}.
During parse table generation the alias is replaced by the actual symbol.  It
is not allowed to give an alias for an alias or to redefine aliases.
For example, the following definitions are illegal:

\begin{verbatim}
aliases
  Tuple3          -> SuperTuple
  Bool # Int # Id -> Tuple3
\end{verbatim}
(An alias is defined for the alias {\tt Tuple3}.)

\begin{verbatim}
aliases
  Bool # Int # Id -> Tuple3
  Bool # Int      -> Tuple3
\end{verbatim}
(The alias {\tt Tuple3} is redefined.)

\subsection{Sorts}
\label{Sorts}
Sorts are declared by listing their name in a sorts section of the form:

\begin{verbatim}
sorts
  (<SortName>|<Symbol>)*
\end{verbatim}

The keyword {\tt sorts} is a bit misleading, since not only {\tt SortName}s
can be declared, but in fact {\tt Symbol}s can be declare in the sorts section as well.

\noindent Recall that a sort name should start with a capital letter and may be followed by 
letters and/or digits. Hyphens (`{\tt -}') may be embedded in sort names.
There is one predefined sort name ({\tt LAYOUT}). It is described in
\T Section~\ref{LexicalSyntax}.
\W \link{Lexical Syntax}[]{LexicalSyntax}.

XXX Sort declarations have a more liberal form and may contain
arbitrary symbols rather than just sort names. XXX

It is required that all sorts that occur in some symbol in the specification
are declared. This has also the effect that input sentences corresponding to
these sorts can be parsed. Technically speaking each sort can act as start
symbol for the underlying grammar.
Declaring an arbitrary symbol has the effect that that symbol can
act as start symbol.

Sorts sections can either be hidden or exported. XXXXXXX

\subsection{Lexical Syntax}
\label{LexicalSyntax}
\label{lexical-syntax}

The lexical syntax describes the low level structure of text by means of
\emph{lexical tokens}. A lexical token consists of a sort name (used to
distinguish classes of tokens like identifiers and numbers), and the actual text
of the token. The lexical syntax also defines which substrings of the text are
layout symbols or comments and are to be skipped.

A lexical syntax contains a set of declarations for \emph{lexical functions},
each consisting of a regular expression and a result sort. All functions with
the same result sort together define the lexical syntax of tokens of that
sort. Regular expressions may contain any basic symbol and any symbol
operator as described in 
\T Section~\ref{Symbols}. 
\W \link{Symbols}[]{Symbols}. 
Spaces are only significant inside strings and character classes.

The sort name {\tt LAYOUT} is predefined and may not be redeclared.  
{\tt LAYOUT} defines which parts of the text are \emph{layout symbols} (also
known as \emph{white space}) between lexical tokens and are to be skipped
during lexical analysis. It may only be used as result sort of
\link{lexical functions}[ (Section~\ref{LexicalFunctions})]{LexicalFunctions}.
When a string is matched by both a
LAYOUT function and by other non-LAYOUT functions, then the interpretation as
layout symbol is ignored. {\tt LAYOUT} is typically used for defining layout
and comment conventions.

Traditionally, lexical syntax and context-free syntax are treated
differently.  They are defined by different notations and implemented
by means of different techniques. \sdf\ provides a much more uniform
treatment.  In \sdf, the only significant difference between the two
is that no layout will be accepted while recognizing the members of
the left-hand side of a lexical function, whereas layout \emph{will}
be accepted between the members of the left-hand side of a
context-free function. At the implementation level, both are
implemented using a single parsing technique.

Technically, there exist only \emph{syntax} sections. Both lexical
syntax sections and context-free syntax sections are transformed into
such syntax sections after appropriate insertion of optional layout
between the elements of context-free functions. In rare cases,
the specification writer may want to control this process explicitly
and write syntax sections directly. This will not be discussed
in this manual, but further details can be found in \cite{Vis97}.

\subsubsection{Lexical Functions}
\label{LexicalFunctions}

In their simplest form, declarations of lexical functions consist of a
sequence of zero or more symbols followed by `$\rightarrow$' and a
result symbol, say $L$.  A lexical function may be followed by a list
of attributes. The regular expression associated with $L$ consists of the
logical \emph{or} of all left-hand sides of lexical functions with result sort
$L$.  All sort names appearing in left-hand sides of declarations are replaced
by the regular expression associated with them. 
%%Circular dependencies between declarations in the lexical syntax are 
%%forbidden.\footnote{Does this limitation still apply?}  
\T Figure \ref{CODE:simplelex} shows 
\W \link{Below}[]{CODE:simplelex} we give
an example of a
simple lexical function definition for defining the first three words that
Dutch children learn to read.  The three sorts {\tt Aap}, {\tt Noot} and {\tt
  Mies}, each recognize, respectively, the strings {\tt aap}, {\tt noot} and
{\tt mies}. The sort {\tt LeesPlank} (a reading-desk used in primary
education) recognizes the single string {\tt aapnootmies}.


\begin{figure}
\label{CODE:simplelex}
\begin{IncCode}
\begin{verbatim}
module LeesPlank

imports Layout

exports
  sorts Aap Noot Mies
  lexical syntax
    "aap"         -> Aap
    "noot"        -> Noot
    "mies"        -> Mies
    Aap Noot Mies -> LeesPlank  
\end{verbatim}
\end{IncCode}
\caption{Simple lexical functions}
\end{figure}   
      

\paragraph{Lexical constructor functions}
For each sort {\tt L} that appears as result sort in the lexical syntax a lexical
constructor function of the form {\tt l "(" CHAR+ ")" -> L} is automatically
added to the context-free syntax of the specification.  Here, `{\tt l}' is the
name of sort `{\tt L}' written in lower-case letters.  In this way, you can
get access to the characters of lexical tokens.

\subsubsection{Character Classes}
\label{CharacterClasses}

Enumerations of characters occur frequently in lexical definitions. They can
be abbreviated by using character classes enclosed by `{\tt [}' and 
`{\tt ]}'. 
A character class contains a list of zero or more characters (which
stand for themselves) or character ranges such as, for instance, {\tt [0-9]}
as an abbreviation for the characters {\tt 0}, {\tt 1}, ..., {\tt 9}. 
In a character range of the form {\tt $c_1$-$c_2$} one of the following 
restrictions should apply:

\begin{itemize}
\item $c_1$ and $c_2$ are both lower-case letters and $c_2$ follows $c_1$ in
  the alphabet, or 
\item $c_1$ and $c_2$ are both upper-case letters and $c_2$ follows $c_1$ in
  the alphabet, or 
\item $c_1$ and $c_2$ are both digits and the numeric value of $c_2$ is
  greater than that of $c_1$, or 
\item $c_1$ and $c_2$ are both escaped non-printable characters and the 
character code of $c_2$ is greater than that of $c_1$.
\end{itemize}

Definitions for lower-case letter ({\tt LCLetter}), upper-case letters
({\tt UCLetter}), lower-case and upper-case letters ({\tt Letter}) and
digits ({\tt Digit}) are shown in
\T Figure~\ref{CODE:LettersDigits1}. 
\W in the first example \link{below}[]{CODE:LettersDigits1}. 

\begin{figure}
\label{CODE:LettersDigits1}
\begin{IncCode}
\begin{verbatim}
module LettersDigits1

imports Layout

exports
  sorts LCLetter UCLetter Letter Digit
  lexical syntax
    [a-z]    -> LCLetter
    [A-Z]    -> UCLetter
    [a-zA-Z] -> Letter
    [0-9]    -> Digit
\end{verbatim}
\end{IncCode}
\caption{Defining letter (lower-case and upper-case) and digit}
\end{figure}   

\T Figure~\ref{CODE:LettersDigits2}
\W The \link{next example}[]{CODE:LettersDigits2}
gives
a definition of the sort {\tt LetterOrDigit} that recognizes a single letter
(upper-case or lower-case) or digit.

\begin{figure}
\label{CODE:LettersDigits2}
\begin{IncCode}
\begin{verbatim}
module LettersDigits2
imports Layout

exports
  sorts LetterOrDigit
  lexical syntax
    [a-z]    -> LetterOrDigit
    [A-Z]    -> LetterOrDigit
    [0-9]    -> LetterOrDigit
\end{verbatim}
\end{IncCode}
\caption{Defining a single letter or digit}
\end{figure}   

\paragraph{Escape Conventions}

Characters with a special meaning in \asfsdf\ may cause problems when they are
needed as ordinary characters in the lexical syntax. The backslash character
(`{\tt \verb+\+}') is used as escape character for 
the quoting of special characters. You
should use `{\tt \verb+\+$c$}' whenever you need special 
character $c$ as ordinary character in a definition.
All individual characters in character classes, except digits and letters,
are {\em always} escaped with a backslash.

In literal strings, the following characters are special and should be
escaped:

\begin{itemize}
 \item {\tt "}: double quote 
\item \verb+\+: escape character.
\end{itemize}

You may use the following abbreviations in literals and in character classes:

\begin{itemize}

\item \verb+\n+: newline character 

\item \verb+\r+: carriage return

\item \verb+\t+: horizontal tabulation 

\item \verb+\+$nr$: a non-printable character with the decimal code $nr$.

\end{itemize}

\paragraph{Character Class Operators}

The following operators are available for character classes
\begin{itemize}
\item {\tt \~{}}: complement of character class. Accepts all characters not in the original class.
\item {\tt /}: difference of two character classes. Accepts all characters in
  the first class unless they are in the second class.
\item {\tt  /\verb+\+}: intersection of two character classes. Accepts all
  characters that are accepted by both character classes.
\item {\tt  \verb+\+/}: union of two character classes. Accepts all characters
  that are accepted by either character class.
\end{itemize}
\noindent The first operator is a unary operator, whereas the other three are
left-associative binary operators.

\T Figure~\ref{CODE:LettersDigits3} shows 
\W The example \link{below}[]{CODE:LettersDigits3} gives
the definion of a single letter or digit
using the alternative operator {\tt  \verb+\+/}.
This definition is equivalent to the one given 
\link{earlier}[ in Figure~\ref{CODE:LettersDigits2}]{CODE:LettersDigits2}.

\begin{figure}
\label{CODE:LettersDigits3}
\begin{IncCode}
\begin{verbatim}
module LettersDigits3
exports
  sorts LetterOrDigit
  lexical syntax
    [a-z] \/ [A-Z] \/ [0-9]   -> LetterOrDigit
\end{verbatim}
\end{IncCode}
\caption{Defining a single letter or digit using the alternative operator}
\end{figure}


Another example is shown 
\T in Figure \ref{CODE:charclasses}.
\W \link{below}[]{CODE:charclasses}.
This definition of characters contains
all possible characters, either by means of the ordinary representation
or via their decimal representation.

\begin{figure}
\label{CODE:charclasses}
\begin{IncCode}
\begin{verbatim}
module Characters

imports Layout

exports
  sorts AlphaNumericalEscChar DecimalEscChar EscChar L-Char
  lexical syntax
    "\\" ~[]                 -> AlphaNumericalEscChar

    "\\" [01] [0-9] [0-9]    -> DecimalEscChar
    "\\" "2" [0-4] [0-9]     -> DecimalEscChar
    "\\" "2" "5" [0-5]       -> DecimalEscChar

    AlphaNumericalEscChar    -> EscChar
    DecimalEscChar           -> EscChar

    ~[\0-\31\"\\] \/ [\t\n]  -> L-Char
    EscChar                  -> L-Char
\end{verbatim}
\end{IncCode}
\caption{Example of character classes}
\end{figure}  


\subsubsection{Repetition}

\index{repetition operator@repetition operator}
Lexical tokens are often described by patterns that exhibit a certain
repetition. The operator described in 
\T Section~\ref{RepetitionOperator}
\W \link{Repetition}[]{RepetitionOperator} 
can be used to express repetitions.

\T Figure \ref{CODE:repetition} shows 
\W The example \link{below}[]{CODE:repetition} demonstrates
the use of the repetition
operator {\tt *} for defining identifiers consisting of a letter
followed by zero or more letters or digits.

\begin{figure}
\label{CODE:repetition}
\begin{IncCode}
\begin{verbatim}
module Identifiers-repetition

imports Layout

exports
  sorts Letter DigitLetter
  lexical syntax
    [a-z]       -> Letter
    [a-z0-9]    -> DigitLetter

    Letter DigitLetter* -> Id
\end{verbatim}
\end{IncCode}
\caption{Defining identifiers using the repetition operator {\tt *}}
\end{figure}   

\subsubsection{Option}

\index{option operator@option operator}
If zero or exactly one occurrence of a lexical token is desired the
option operator described in 
\T Section~\ref{OptionOperator}  
\W \link{Option}[]{OptionOperator}
can be used.

The use of the option operator is illustrated 
\T in Figure \ref{CODE:option}.
\W \link{below}[]{CODE:option}.
Identifiers are defined consisting of one letter followed by one, optional,
digit. This definition accepts {\tt a} and {\tt z8}, but rejects {\tt ab} or {\tt
  z789}.

\begin{figure}
\label{CODE:option}
\begin{IncCode}
\begin{verbatim}
module Identifiers-optional

imports Layout

exports
  sorts Letter Digit
  lexical syntax
    [a-z]  -> Letter
    [0-9]  -> Digit

    Letter Digit? -> Id
\end{verbatim}
\end{IncCode}
\caption{Defining a letter followed by an optional number using the option operator {\tt ?} }
\end{figure}   

\subsubsection{Alternative}

\index{alternative operator@alternative operator}
Functions with the same result sort together define the lexical syntax of
tokens of that sort. The left-hand sides of these function definitions form
the alternatives for this function. Sometimes, it is more convenient to list
these alternatives explicitly in a single left-hand side or to list
alternative parts inside a left-hand side.  This is precisely the role of the
alternative operator described in 
\T Section~\ref{AlternativeOperator}.
\W \link{Alternative}[]{AlternativeOperator}.



The example 
\T in Figure \ref{CODE:alternative1} 
\W \link{below}[]{CODE:alternative1}
shows how this operator can be used.  
It describes identifiers starting with an upper-case letter
followed by one of the following:
\begin{itemize}
\item  zero or more lower-case letters, 

\item zero or more upper-case letters, or

\item zero or more digits.
\end{itemize}

\noindent According to this definition, 
{\tt Aap}, {\tt NOOT}, and {\tt B49} are acceptable, but {\tt MiES}, {\tt
  B49a} and {\tt 007} are not.

\begin{figure}
\label{CODE:alternative1}
\begin{IncCode}
\begin{verbatim}
module Identifiers-alternative1

imports Layout

exports
  sorts UCLetter Digit
  lexical syntax
    [A-Z]   -> UCLetter
    [a-z]   -> LCLetter
    [0-9]   -> Digit

  UCLetter LCLetter* | UCLetter* | Digit* -> Id
\end{verbatim}
\end{IncCode}
\caption{Example of alternative operator {\tt |} }
\end{figure}   


Note that the relation between juxtaposition and alternative operator is best
understood by looking at the line defining {\tt Id}. A parenthesized
version of this same line would read as follows:
\begin{quote}
\begin{verbatim}
  UCLetter (LCLetter* | UCLetter* | Digit*) -> Id
\end{verbatim}
\end{quote}
As an aside, note that moving the {\tt *} outside the parentheses as in
\begin{quote}
\begin{verbatim}
  UCLetter (LCLetter | UCLetter | Digit)* -> Id
\end{verbatim}
\end{quote}
yields a completely different definition: it describes identifiers starting
with an uppercase letter followed by zero or more lower-case letters,
uppercase letters or digits. According to this definition {\tt MiES}, {\tt
  B49a} and {\tt 007} would, for instance, be acceptable.

\noindent A slightly more readable definition that is equivalent to the 
\link{previous one}[ in Figure~\ref{CODE:alternative1}]{CODE:alternative1}
is shown 
\T in Figure~\ref{CODE:alternative2}.  
\W \link{below}[]{CODE:alternative2}.
In any case, we recommend to use parentheses to make the scope of alternatives
explicit.

\begin{figure}
\label{CODE:alternative2}
\begin{IncCode}
\begin{verbatim}
module Identifiers-alternative2

imports Layout

exports
  sorts UCLetter LCLetterDigit
  lexical syntax
    [A-Z]   -> UCLetter
    [a-z]   -> LCLetter
    [0-9]   -> Digit

    (UCLetter LCLetter*) | (UCLetter UCLetter*) | (UCLetter Digit*) -> Id
\end{verbatim}
\end{IncCode}
\caption{Example of alternative operator {\tt |} }
\end{figure}   

\subsubsection{Miscellaneous Operators}
The other operators described in 
\T Section~\ref{Symbols} 
\W \link{Symbols}[]{Symbols}
are less frequently used within lexical syntax definitions 
and will not be illustrated by means of an example.

\subsubsection{Examples of Lexical Syntax Definitions}

We will present a number of non-trivial lexical syntax definitions
in order to get some ideas what can be specified using 
\sdf.

\paragraph{Defining Numbers}

Definitions of integers and real numbers are shown 
\T in Figure \ref{CODE:numbers}. 
\W \link{below}[]{CODE:numbers}.
Note the use of the alternative operator in the
definitions of {\tt UnsignedInt} and {\tt Number}.  Also note the use
of the option operator in the definitions of {\tt SignedReal} and {\tt
UnsignedReal}.

\begin{figure}[t]
\label{CODE:numbers}
\begin{IncCode}
\begin{verbatim}
module Numbers

imports Layout

exports
  sorts UnsignedInt SignedInt UnsignedReal Number 

  lexical syntax
    [0] | ([1-9][0-9]*)                           -> UnsignedInt

    [\+\-]? UnsignedInt                           -> SignedInt

    UnsignedInt "." UnsignedInt ([eE] SignedInt)? -> UnsignedReal 
    UnsignedInt [eE] SignedInt                    -> UnsignedReal

    UnsignedInt | UnsignedReal                    -> Number
\end{verbatim}
\end{IncCode}
\caption{Lexical definition of Numbers}
\end{figure}   

\paragraph{Defining Strings}

\T Figure \ref{CODE:string} 
\W The specification \link{below}[]{CODE:string}
gives the lexical definition of
strings which may contain escaped double quote characters.
It defines a {\tt StringChar} as either
\begin{itemize}
\item zero or more
arbitrary characters except double quote or newline, or
\item an escaped double quote, i.e., \verb+\"+.
\end{itemize}

\noindent A string consists of zero or more {\tt StringChar}s surrounded by
double quotes.

\begin{figure}
\label{CODE:string}
\begin{IncCode}
\begin{verbatim}
module Strings

imports Layout

exports
  sorts String StringChar

  lexical syntax
    ~[\"\n]*              -> StringChar
    [\\][\"]              -> StringChar
    "\"" StringChar* "\"" -> String
\end{verbatim}
\end{IncCode}
\caption{Lexical definition of String}
\end{figure}   

\subsection{Context-free Syntax}
\label{ContexFreeSyntax}

The context-free syntax describes the concrete and abstract syntactic
structure of sentences in a language. A context-free syntax contains a set of
declarations for \emph{context-free functions}, each consisting of zero or
more symbols followed by `$\rightarrow$' and a result symbol.  They may be
followed by attributes that control how parentheses and brackets affect the
abstract syntax, by attributes that define the associativity of a rule, or by
\link{attributes}[ (Section~\Ref]{Attributes} which influence the rewriting
process.  All functions with the same result sort together define the
alternatives for that symbol.

Elements of the left-hand side of a context-free function
are separated by an invisible non-terminal {\tt LAYOUT?} 
(optional {\tt LAYOUT}) in order to permit layout between these members.
This optional layout non-terminal is automatically inserted.

\subsubsection{Context-free Functions}

In their simplest form, declarations of context-free functions consist of a
sequence of zero or more symbols followed by `$\rightarrow$'
and a result symbol. All literal strings appearing in a context-free
function declaration are implicitly added to the lexical syntax. Consider the
language of coordinates and drawing commands presented
\T in Figure \ref{CODE:simple-cf}.
\W \link{below}[]{CODE:simple-cf}.

\begin{figure}
\label{CODE:simple-cf}
\begin{IncCode}
\begin{verbatim}
module DrawingCommands

imports Layout

exports
  sorts NAT COORD CMND 

  lexical syntax
    [0-9]+ -> NAT 

  context-free syntax
    "(" NAT "," NAT ")" -> COORD
    "line" "to" COORD   -> CMND 
    "move" "to" COORD   -> CMND
\end{verbatim}
\end{IncCode}
\caption{Simple context-free syntax definition}
\end{figure}   


An equivalent conventional BNF grammar (and not considering lexical syntax) 
of the \link{above grammar}[ of Figure~\ref{CODE:simple-cf}]{CODE:simple-cf} is
\T presented in Figure \ref{CODE:simple-bnf}.
\W \link{as follows}[]{CODE:simple-bnf}.

\begin{figure}
\label{CODE:simple-bnf}
\begin{IncCode}
\begin{verbatim}
<COORD> ::= "(" <NAT> "," <NAT> ")" 
<CMND>  ::= "line" "to" <COORD> | "move" "to" <COORD>
\end{verbatim}
\end{IncCode}
\caption{BNF definition of simple grammar}
\end{figure}   

When a literal in a context-free function consists only of lower-case letters
and digits and is not a keyword of \asfsdf, it need not be surrounded by
quotes. You may therefore write `{\tt move to COORD -> CMND}' instead of the
\link{previous definition}[ given in Figure \ref{CODE:simple-cf}]{CODE:simple-cf}.

\subsubsection{Lists}

Context-free syntax often requires the description of
the repetition of a syntactic notion or of list structures (with or without
separators) containing a syntactic notion. The 
\link{repetition operator}[
described in Section~\ref{RepetitionOperator}]{RepetitionOperator}
can be used for this purpose.

Lists may be used in both the left-hand side and right-hand side of a
context-free function as well as in the right-hand side of a 
\link{variable declaration}[ (see Section~\ref{Variables})]{Variables}.

\T Figure \ref{CODE:pascal-ids} shows 
\W \link{Below}[]{CODE:pascal-ids} an example is given of
how lists can be used to define 
the syntax of a list of identifiers (occurring in a declaration
in a Pascal-like language).

\begin{figure}
\label{CODE:pascal-ids}
\begin{IncCode}
\begin{verbatim}
module Decls

imports Layout

exports
  sorts ID DECL TYPE 

  lexical syntax
    [a-z]+ -> ID 

  context-free syntax
    "decl" {ID ","}+ ":" TYPE -> DECL
    "integer"                 -> TYPE 
    "real"                    -> TYPE
\end{verbatim}
\end{IncCode}
\caption{Definition of a list of identifiers}
\end{figure}

\subsubsection{Chain Functions}

A context-free syntax may contain functions that do not add syntax, but serve
the sole purpose of including a smaller syntactic notion into a larger one. 
This notion is also known as {\em injections}. 
Injections are functions ``without a name'' and with one argument sort
like {\tt ID -> DATA}.
A typical example is the inclusion of identifiers in expressions or of natural
numbers in reals. Such a \emph{chain function} has one of the following forms:

\begin{itemize}

\item {\tt SMALL -> BIG} 
\item {\tt \{SMALL SEP\}* -> BIG} 
\item {\tt SMALL* -> BIG} 
\item {\tt \{SMALL SEP\}+ -> BIG} 
\item {\tt SMALL+ -> BIG}
\item {\tt \{SMALL SEP\}n+ -> BIG} 
\item {\tt SMALLn+ -> BIG}

\end{itemize}

Chain functions do not appear in the abstract syntax but correspond to a
\emph{subsort relation} between {\tt SMALL} and {\tt BIG}.
If {\tt SORT-A} is a subsort of {\tt SORT-B} then in the abstract syntax
tree a tree of sort {\tt SORT-A} can be put wherever a tree of
sort {\tt SORT-B} is required.
\T In Figure~\ref{CODE:inj-exp} 
\W In the example \link{below}[]{CODE:inj-exp}
the symbols {\tt NAT} and {\tt VAR} are injected in {\tt EXP}.

\begin{figure}
\label{CODE:inj-exp}
\begin{IncCode}
\begin{verbatim}
module Exp

imports Layout

exports
  sorts NAT VAR EXP

  lexical syntax
    [0-9]+   -> NAT
    [XYZ]    -> VAR

  context-free syntax
    NAT                 -> EXP
    VAR                 -> EXP
    EXP "+" EXP         -> EXP
\end{verbatim}
\end{IncCode}
\caption{Definition of expressions that uses injections}
\end{figure}

\subsubsection{Miscellaneous Operators}

In 
\T Section~\ref{Symbols} 
\W \link{Symbols}[]{Symbols}
a number of sophisticated operators, like
alternative, option, set, function, sequence, tuple, and permutation
are discussed. These operators allow a concise manner of defining
grammars. There are, however, a number of issues to be taken into consideration
when using this operators. 

\paragraph{Definition of lists}

\T In Figure~\ref{CODE:lists-usage}
\W In the example \link{below}[]{CODE:lists-usage},
two different lists are defined, 
{\tt LIST1} represents a list of naturals separated
by commas whereas {\tt LIST2} represents a list of naturals terminated
by commas.

\begin{figure}[t]
\label{CODE:lists-usage}
\begin{IncCode}
\begin{verbatim}
module Lists

imports Layout

exports
  sorts NAT LIST1 LIST2

  lexical syntax
    [0-9]+   -> NAT

  context-free syntax
    {NAT ","}+ -> LIST1
    (NAT ",")+ -> LIST2
\end{verbatim}
\end{IncCode}
\caption{Definition of two list variants}
\end{figure}

\paragraph{Alternative alternatives}
The choice between two symbols can be defined in two different ways: by two
separate syntax rules or by a single syntax rule using an alternative
operator. 
Both styles are shown
\T in Figure~\ref{CODE:alternative-alternatives}.
\W \link{below}[]{CODE:alternative-alternatives}.

The definition of the binary operators {\tt "|"} and {\tt "\&"} can
be made more concise as shown by {\tt Bool2}, however, it is now
impossible to express that {\tt "\&"} has a higher priority
than {\tt "|"}, see 
\T Section~\ref{Priorities} 
\W \link{Priorities}[]{Priorities}
for more details on priority definitions.

\begin{figure}
\label{CODE:alternative-alternatives}
\begin{IncCode}
\begin{verbatim}
module Bool

imports Layout

exports
  sorts Bool1 Bool2

  context-free syntax
    true                    -> Bool1
    false                   -> Bool1
    Bool1 "|" Bool1         -> Bool1 {left}
    Bool1 "&" Bool1         -> Bool1 {left}

    true | false            -> Bool2
    Bool2 ("|" | "&") Bool2 -> Bool2 {left}
\end{verbatim}
\end{IncCode}
\caption{Two ways of defining {\tt |} and {\tt \&}}
\end{figure}

\subsubsection{Lists in combination with optionals or empty producing
sorts}

The combination of lists and optionals or empty producing sorts leads to
cycles in the parse tree. 
See 
\T Figure \ref{CODE:listcycle}
\W \link{below}[]{CODE:listcycle}
for an example of such a specification.

\begin{figure}
\label{CODE:listcycle}
\begin{IncCode}
\begin{verbatim}   
module Cycle

imports Layout

exports
  sorts A P T

  context-free syntax
    "a"        -> A
    A?         -> P
    "[" P+ "]" -> T
\end{verbatim}
\end{IncCode}
\caption{Dangerous combination of lists and optionals}
\end{figure}                                                                              

\subsection{Attributes of Lexical and Context-free Functions}
\label{Attributes}

\index{attribute@attribute}
The definition of a lexical or context-free functions may be followed by
\emph{attributes} that define additional (syntactic or semantic) properties of
that function.  The following syntax-related attributes exist:

\begin{itemize}

\index{bracket attribute@bracket attribute}
\item {\tt bracket} allows the definitions of parenthesis and other
kinds of brackets that are mostly used for overruling the priorities
of operators in expressions
\T (Section~\ref{BracketFunctions}).
\W (see \link{Bracket Functions}[]{BracketFunctions}).

\index{left attribute@left attribute}
\index{right attribute@right attribute}
\index{non-assoc attribute@non-assoc attribute}
\index{assoc attribute@assoc attribute}
\item {\tt left}, {\tt right}, {\tt non-assoc}, and {\tt assoc}
are used to define the associativity of functions 
\T (Section~\ref{Priorities}).
\W (see  \link{Priorities}[]{Priorities}).

\index{prefer attribute@prefer attribute}
\item {\tt prefer} is used to indicate that the attributed function should
always be preferred over other functions (without this attribute)
in certain cases of syntactic ambiguity
\T (Section~\ref{PreferAvoidReject}).
\W (see \link{Preferring, Avoiding or Rejecting Parses}[]{PreferAvoidReject}).

\index{avoid attribute@avoid attribute}
\item {\tt avoid} is used to indicate that a function should
only be used as a last resort in certain cases of
syntactic ambiguity
\T (Section~\ref{PreferAvoidReject}).
\W (see \link{Preferring, Avoiding or Rejecting Parses}[]{PreferAvoidReject}).

\index{reject attribute@reject attribute}
\item {\tt reject} can be used to explicitly forbid certain syntactic
  constructs
\T (Section~\ref{PreferAvoidReject}).
\W (see  \link{Preferring, Avoiding or Rejecting Parses}[]{PreferAvoidReject}).

\end{itemize}

\noindent The remaining attributes define semantic properties of a function:

\begin{itemize}

\index{constructor attribute@constructor attribute}
\item {\tt constructor} declares a function to be a \emph{constructor
function}, this means that for this function \emph{no} equations
may be defined with this function as outermost function symbol
in the left hand side.

\index{memo attribute@memo attribute}
\item {\tt memo} declares a function to be a \emph{memo function} for
which all calls and results will be cached during evaluation
\T (Section~\ref{MemoFunctions}).
\W (see \link{Memo Functions}[]{MemoFunctions}).

%%\item {\tt delay} is used to influence the evaluation order of the
%%arguments of a function (Section~\ref{Delay}).

\index{traversal attribute@traversal attribute}
\item {\tt traversal} is used to declare so-called traversal functions
that greatly simply the specification of functions that have to visit
(parts of) a term 
\T (Section~\ref{Traversal}).
\W (see \link{Traversal Functions}[]{Traversal}).

\end{itemize}

\subsection{Priorities}
\label{Priorities}

\index{priorities@priorities}
The context-free syntax defined in an \asfsdf\ specification may be 
ambiguous: there are sentences which have more than one associated tree. 
The common example is the arithmetic expression in which definitions 
of the priority or associativity of operators are missing. There are 
three mechanisms for defining associativity and priority:

\begin{itemize}
  
\item \link{Relative priorities of functions}[ (see Section~\Ref)]{RelativePriorities}
  defined in the {\tt context-free priorities} section.

\index{associativity@associativity}
\item \link{Associativity of functions}[ (see Section~\Ref)]{AssociativeFunctions}
 defined as attributes following the function declaration.
  
\item \link{Associativity of groups of functions}[ (see Section~\Ref)]{GroupAssoc}
  defined in the {\tt context-free priorities} section.

\end{itemize}

Closely related with priorities are brackets that can be used to
overrule priorities.  We will first describe bracket functions,
and then the various methods for defining priorities.

\subsubsection{Bracket Functions}
\label{BracketFunctions}

\index{bracket functions@bracket functions}
A bracket function has the form `{\tt $open$ $S$ $close$ -> $S$}' where $open$
and $close$ are literals acting as opening and closing parenthesis for sort
$S$. Examples are `{\tt (}' and `{\tt )}' in arithmetic expressions.
In most cases, such brackets are only
introduced for grouping and disambiguation, but have no further meaning. By
adding the attribute {\tt bracket} to the function declaration, it will not be
included in the abstract syntax.
The definition of a bracket function for the sort {\tt EXPR} 
is given
\T in Figure \ref{CODE:bracket-expr}.
\W \link{below}[]{CODE:bracket-expr}.

\begin{figure}
\label{CODE:bracket-expr}
\begin{IncCode}
\begin{verbatim}
module BracketExpr

imports Layout

exports
  sorts EXPR

  lexical syntax
    [0-9]+ -> EXPR

  context-free syntax
    "(" EXPR ")" -> EXPR {bracket}
\end{verbatim}
\end{IncCode}
\caption{Syntax definition with a bracket function}
\end{figure}

Since brackets are necessary for overruling the priority and associativity of
functions,  it is required that bracket 
functions are declared for the argument and result sorts of

\begin{itemize}

\item all functions appearing in priority declarations, and
  
\item all functions having one of the attributes {\tt left}, {\tt right}, 
{\tt assoc}, or {\tt non-assoc}.

\end{itemize}

\subsubsection{Relative Priorities}
\label{RelativePriorities}

\index{relative priorities@relative priorities}
The relative priority of two functions is defined 
in the `{\tt context-free priorities}' section 
by including {\tt $F$ > $G$},
where $F$ and $G$ are 
as written in the context-free grammar. Functions with a higher 
priority bind more strongly than functions with lower priorities and 
the nodes corresponding to them should
thus appear at lower levels in the tree than nodes corresponding to functions
with lower priorities. Lists of functions may be used in a priority
declaration: {\tt $F$ > \{$G$, $H$\}} is an 
abbreviation for {\tt $F$ > $G$, $F$ > $H$}.
Note that this tells us nothing about the priority relation between $G$ and $H$. 

\subsubsection{Associative Functions}
\label{AssociativeFunctions}

\index{associativity functions@associativity functions}
Associativity attributes can be attached to binary functions of the form 
`{\tt $S$ $op$ $S$ -> $S$}', where $op$ is a symbol or empty. 
Without associativity attributes, nested occurrences of such 
functions immediately lead to ambiguities, as is shown by the 
sentence `{\tt S-string op S-string op S-string}' where 
`{\tt S-string}' is a string produced by symbol $S$. 
The particular associativity 
associated with $op$ determines the indented interpretation of such sentences.
  
We call two occurrences of functions $F$ and $G$ \emph{related}, when the node
corresponding to $F$ has a node corresponding to $G$ as first or last child.
The associativity attributes define how to accept or reject trees containing
related occurrences of the same function, $F$:

\begin{itemize}

\item {\tt left}: related occurrences of $F$ associate from left to right. 

\item {\tt right}: related occurrences of $F$ associate from right to left. 

\item{\tt  assoc}: related occurrences of $F$ associate from left to right.

\item {\tt non-assoc}: related occurrences of $F$ are not allowed.

\end{itemize}

Currently, there is no syntactic or semantic difference between `{\tt left}'
and `{\tt assoc}', but we may change the semantics of the `{\tt assoc}'
attribute in the future.

\T Figure \ref{CODE:simple-prio} gives 
\W \link{Below}[]{CODE:simple-prio} we give
an example of a definition of
simple arithmetic expressions with the usual priorities and
associativities.

\begin{figure}
\label{CODE:simple-prio}
\begin{IncCode}
\begin{verbatim}
module SimpleExpr

imports Layout

exports
  sorts E 

  lexical syntax
    [0-9]+ -> E 

  context-free syntax
    E "+" E   -> E {left}
    E "*" E   -> E {left}
    "(" E ")" -> E {bracket}

  context-free priorities
    E "*" E -> E > 
    E "+" E -> E
\end{verbatim}
\end{IncCode}
\caption{Simple context-free priority definition}
\end{figure}   

\subsubsection{Groups of Associative Functions}
\label{GroupAssoc}

\index{associativity groups@associativity groups}
Groups of associative functions define how to accept or reject trees
containing related occurrences of different functions with the same priority.
They are defined by prefixing a list of context-free functions in a priority
declaration with one of the following attributes:

\begin{itemize}

\item {\tt left}: related occurrences of $F$ and $G$ associate from left to right. 
\item {\tt right}: related occurrences of $F$ and $G$ associate from right to left.
\item {\tt non-assoc}: related occurrences of $F$ and $G$ are not allowed.

\end{itemize}

\noindent where $F$ and $G$ are functions appearing in the list.
\T See Figure \ref{CODE:complex-prio} for
\W \link{Below}[]{CODE:complex-prio},
an example of the use of grouped associativity.

\begin{figure}
\label{CODE:complex-prio}
\begin{IncCode}
\begin{verbatim}
module ComplexExpr

imports Layout

exports
  sorts E 

  lexical syntax
    [0-9]+ -> E

  context-free syntax
    E "+" E   -> E {left}
    E "-" E   -> E {non-assoc}
    E "*" E   -> E {left}
    E "/" E   -> E {non-assoc}
    E "^" E   -> E {right}
    "(" E ")" -> E {bracket}

  context-free priorities
    E "^" E -> E > 
    {non-assoc: E "*" E -> E
                E "/" E -> E} >
    {left: E "+" E -> E
           E "-" E -> E}
\end{verbatim}
\end{IncCode}
\caption{More complex associativity and priority definitions}
\end{figure}   

\subsubsection{Restrictions}
\label{Restrictions}
\label{ContextFreeRestrictions}
\label{LexicalRestrictions}

\index{restrictions@restrictions}
\index{lexical restrictions@lexical restrictions}
\index{context-free restrictions@context-free restrictions}
\index{{\tt -/-}@{\tt -/-}}
\index{{\tt <Lookaheads>}@{\tt <Lookaheads>}}
Lexical syntax can be highly ambiguous.  Consider 
a simple lexical definition for identifiers
\T like the one in Figure~\ref{CODE:repetition}]{CODE:repetition}.
\W given \link{earlier}[]{CODE:repetition}.
When recognizing the text {\tt abc}, what should we return: {\tt a}, {\tt ab}
or, {\tt abc}? 
We discuss the strategy \emph{Prefer Longest Match} for
resolving this kind of ambiguity in
\T Section~\ref{lex-ambiguity}]{lex-ambiguity}.
\W \link{Lexical Ambiguities}[]{lex-ambiguity}.

Here, we describe the notion of \emph{restrictions} that enable the formulation
of this and other lexical disambiguation strategies.

A restriction limits the \emph{lookahead} for a given symbol; it indicates
that a symbol may not be followed by a character from a given character class.
A lookahead may consist of more than one character class.  Restrictions come
in two flavors:

\begin{itemize}
\item lexical restrictions;
\item context-free restrictions.
\end{itemize}

\noindent The general form of a restriction is 

\begin{verbatim}
<Symbol>+ -/- <Lookaheads>
\end{verbatim}
 
\noindent In case of lexical restrictions {\tt <Symbol>} may be   
either a literal or sort.  
In case of context-free restrictions only a sort or symbol is allowed.
The restriction operator {\tt -/-} should be read as ``may not be
followed by''.
Before the restriction operator {\tt -/-} a list of symbols
is given for which the restriction holds.
 
In the example\footnote{Taken from~\cite{Vis97}}
\T in Figure \ref{CODE:functional}
\W \link{below}[]{CODE:functional}
both {\tt let} and {\tt in} may not be followed by a letter.
This example shows how lexical restrictions can be used to prevent
the recognition of erroneous expressions in a small functional language.
The lexical restriction deals with the possible confusion between
the reserved words {\tt let} and {\tt in} and variables (of sort {\tt Var}).
It forbids the recognition of, for instance, {\tt let} as part
of {\tt letter}. Without this restriction {\tt letter} would be recognized
as the keyword {\tt let} followed by the variable  {\tt ter}.
The context-free restriction forbids that a variable is directly
followed by a letter. It does not forbid layout characters between
the letters, e.g. {\tt a b} is a legal recognizable string.

\begin{figure}
\label{CODE:functional}
\begin{IncCode}
\begin{verbatim}
module Functional

imports Layout

exports
  sorts Var Term
  lexical syntax
    [a-z]+ -> Var
  context-free syntax
    Var                          -> Term
    Term Term                    -> Term {left}
    "let" Var "=" Term "in" Term -> Term

  lexical restrictions
    "let" "in" -/- [a-z]

  context-free restrictions
    Var -/- [a-z]
\end{verbatim}
\end{IncCode}
\caption{Using restrictions in the definition of a simple functional language}
\end{figure}   

{\tt <Lookaheads>} are slightly more complex.  The most compact way is to
give the \sdf\ definition of the {\tt <Lookaheads>} and illustrate their use by
means of some examples.

\begin{verbatim}
context-free syntax
  CharClass                    -> Lookahead
  CharClass "." Lookaheads     -> Lookahead
  Lookahead                    -> Lookaheads
  Lookaheads "|" Lookaheads    -> Lookaheads {right}
  "(" Lookaheads ")"           -> Lookaheads {bracket}
  "[[" {Lookahead ","}* "]]"   -> Lookaheads 
\end{verbatim}


The next example illustrates the use of restrictions to define a
`safe' way of layout.  
\link{Recall}[ from Section~\ref{LexicalSyntax}]{LexicalSyntax}
that optional layout, represented by the symbol {\tt LAYOUT?},
may be recognized between the 
members of the left-hand side of a context-free syntax rule.

However, if a such a member recognizes the empty string, this gives rise to a
\link{lexical ambiguity}[, (Section \ref{lex-ambiguity})]{lex-ambiguity}. 
This problem is avoided by the definition 
\T in Figure \ref{CODE:safe-layout}:
\W given \link{below}[]{CODE:safe-layout}:
it simply forbids that optional layout is followed by layout characters.

\begin{figure}
\label{CODE:safe-layout}
\begin{IncCode}
\begin{verbatim}
module Layout

exports
  lexical syntax
    [\ \t\n] -> LAYOUT

  context-free restrictions
    LAYOUT? -/- [\ \t\n]
\end{verbatim}
\end{IncCode}
\caption{Safe way of defining {\tt LAYOUT}}
\end{figure}

The example
\T shown in Figure~\ref{CODE:c-comment}
\W \link{below}[]{CODE:c-comment}
illustrates the
use of restrictions to extend the previous layout definition with C-style
comments. For readability we give here \emph{two} restrictions whereas the
first one is already imported from 
\link{module {\tt Layout}}[(Figure~\ref{CODE:safe-layout})]{CODE:safe-layout}.  
The repetition of this first restriction is
redundant and could be eliminated.

\begin{figure}
\label{CODE:c-comment}
\begin{IncCode}
\begin{verbatim}
module Comment

imports Layout

exports
  sorts ComWord Comment
  lexical syntax
    ~[\ \n\t\/]+ -> ComWord

  context-free syntax
    "/*" ComWord* "*/" -> Comment
    Comment            -> LAYOUT

  context-free restrictions
    LAYOUT? -/- [\ \t\n]
    LAYOUT? -/- [\/].[\*]
\end{verbatim}
\end{IncCode}
\caption{Definition of C comments}
\end{figure}

A frequently asked question is when to use \emph{lexical} restrictions
and when to use \emph{context-free} restrictions. 
In one of the \link{previous examples}[ (Figure \Ref)]{CODE:functional}
the lexical restrictions on {\tt let} and {\tt in}
cannot be defined using context-free restrictions
because these keywords do not "live" at the context-free level.
Is it possible to put a lexical restriction on {\tt Var}?
Yes, but it will have no effect, because internally the
lexical {\tt Var} is injected in the context-free {\tt Var}.
XXX verbeter XXX


\T Figure \ref{CODE:restrictedexpressions} shows
\W The specification \link{below}[]{CODE:restrictedexpressions} is an example of
an erroneous use of
context-free expressions, because it prevents the recognition of
{\tt (abc)def}. If we want to enforce the correct restriction, it
is necessary to transform this context-free restriction into
a lexical restriction.

\begin{figure}
\begin{Label}{CODE:restrictedexpressions}
\begin{IncCode}
\begin{verbatim}
module RestrictedExpressions

imports Layout

exports
  sorts Expr

  lexical syntax
    [a-z]+ -> Expr

  context-free syntax
    Expr Expr    -> Expr {left}
    "(" Expr ")" -> Expr {bracket}

  context-free restrictions
    Expr -/- [a-z]
\end{verbatim}
\end{IncCode}
\caption{Erroneous use of restrictions in the definition of simple expressions}
\end{Label}
\end{figure}   



\subsubsection{Preferring, Avoiding or Rejecting Parses} 
\label{PreferAvoidReject}

Priorities can be used to define a priority between two functions or between
two groups of functions. In both cases the functions involved have to be
listed explicitly in the priority declaration. In certain cases, however, it
is desirable to define that a single rule has higher or lower priority than
all other functions or to explicitly reject certain syntactic constructs.
The former is achieved by the attributes {\tt prefer} and {\tt avoid}. The
latter by the attribute {\tt reject}.

If a function $F$ is attributed with {\tt prefer} and there is a syntactic
ambiguity in which it is involved, only the parse using $F$ will remain.

If a function $F$ is attributed with {\tt avoid} and there is no ambiguity,
then $F$ will be used. If there is an ambiguity, then $F$ will be immediately
removed from the set of ambiguities.

If a function $F$ is attributed with {\tt reject}, then independently of the
number of ambiguities, the parse using $F$ will be removed.  While
\link{restrictions}[ (Section~\ref{Restrictions})]{Restrictions}
only impose limitations on the
immediate lookahead that follows a symbol, the reject mechanism can be used
to eliminate complicated syntactic structures.

Examples of the use of {\tt prefer}, {\tt avoid} and {\tt reject} in order
to solve lexical ambiguities are discussed in
\T Section~\ref{lex-ambiguity}.
\W \link{Lexical Ambiguities}[]{lex-ambiguity}.
In 
\T Section~\ref{cf-ambiguity} 
\W \link{Context-free Ambiguities}[]{cf-ambiguity}
we will give examples of how to use
these attributes to solve context-free ambiguities, such as the
famous dangling else problem.

\subsection{Disambiguation}
\label{Disambiguation}

\subsubsection{Lexical Ambiguities}
\label{lex-ambiguity}

\sdf\ provides a number of elementary lexical disambiguation features but does
not offer {\em fully automated} lexical disambiguation.
As a result, the specification writer has to be aware of lexical ambiguities
and has to specify disambiguation rules explicitly.
We will discuss various
approaches to lexical disambiguation and illustrate them by means of examples.

\W We will discuss:
\W \htmlmenu{1}

\paragraph{Prefer Longest Match per Sort} Reject all interpretations of 
the input text that are included in a longer interpretation of the same 
sort. Given a standard definition of identifiers, the input `{\tt xyz}' 
will thus lead to recognition of the identifier `{\tt xyz}' and not to 
either `{\tt x}' or `{\tt xy}'.

This is achieved by defining a restriction on this lexical sort. This
can be done using either lexical or context-free
\link{restrictions}[ (see Section \Ref)]{Restrictions}.
The specification \link*{below}[ in Figure \Ref]{CODE:restrict-id} 
shows how to enforce the longest match for the sort {\tt Id}.

\begin{figure}
\label{CODE:restrict-id}
\begin{IncCode}
\begin{verbatim}
module Identifiers-restrict

imports Layout

exports
  sorts Id
  lexical syntax
    [a-zA-Z][a-zA-Z0-9]* -> Id

  context-free restrictions
    Id -/- [a-zA-Z0-9]  
\end{verbatim}
\end{IncCode}
\caption{Using context-free restrictions to define a longest match for identifiers}
\end{figure}   

\paragraph{Prefer Literals} 

In the left-hand side of a context-free syntax rule literals (keywords
and/or operators) may be used.  If these literals overlap with  more
general lexical tokens (such as identifier) this causes ambiguities.

The strategy \emph{Prefer Literals} gives preference to interpretation
as a literal, over interpretation as a more general lexical token.
For instance, the keyword {\tt begin} may be recognized as an identifier
given the lexical definition \link*{below}[ in Figure \Ref]{CODE:restrict-id}.

There are two approaches to implement Prefer Literals.

In the first approach, we can explicitly forbid the recognition of
literals as tokens of a specific sort using the
\link{reject mechanism}[ (see Section~\Ref)]{PreferAvoidReject}.  
The idea is to define context-free
grammar rules for all literals with the undesired lexical sort (e.g.,
{\tt Id}) in the right-hand side followed by the attribute {\tt reject}.
This is illustrated \link*{below}[in Figure~\Ref]{CODE:reject-id}.
The {\tt reject} attribute
indicates here that the recognition of a keyword as a literal of the sort
{\tt Id} should be rejected. This approach has the major disadvantage
that the addition of a literal in any context-free rule also requires
the addition of a new reject rule for that literal.

\begin{figure}
\label{CODE:reject-id}
\begin{IncCode}
\begin{verbatim}
module Identifiers-reject

imports Layout

exports
  lexical syntax
    [a-zA-Z][a-zA-Z0-9]* -> Id

  context-free restrictions
    Id -/- [a-zA-Z0-9]  

  context-free syntax
    "begin" -> Id {reject}
\end{verbatim}
\end{IncCode}
\caption{Using {\tt reject} to implement Prefer Literals}
\end{figure}   

The second approach is more attractive. The lexical definition of the general
notion that interferes with our literals is written in such a way that it is
only used as a last resort. In other words, it is avoided as much as possible
and is only used when no alternative exists.  
The attribute {\tt avoid} defines precisely this behaviour
(see \link*{Preferring, Avoiding or Rejecting Parses}[Section~\Ref]{PreferAvoidReject}).
\link*{The next example}[Figure \Ref]{CODE:avoid-id} shows
how the lexical definition of {\tt Id} is attributed with {\tt avoid}.

Although the first approach is more tedious, it allows more flexibility
than the second one.

\begin{figure}
\label{CODE:avoid-id}
\begin{IncCode}
\begin{verbatim}
module Identifiers-avoid

imports Layout

exports
  lexical syntax
    [a-zA-Z][a-zA-Z0-9]* -> Id {avoid}

  context-free restrictions
    Id -/- [a-zA-Z0-9]  
\end{verbatim}
\end{IncCode}
\caption{Using {\tt avoid} to implement Prefer Literals}
\end{figure}   

\paragraph{Prefer Non-Layout} If there are interpretations of the text as
layout symbol and as non-layout symbol, eliminate all interpretations as layout
symbol. This is built-in behaviour of \asfsdf.

\paragraph{Prefer Variables} Give preference to interpretation as a 
variable (as defined in a variables section) over interpretation as a lexical
token. Thus built-in behaviour of \asfsdf. It is achieved by automatically
extending each variable declaration with 
the attribute {\tt prefer}
(see \link*{Preferring, Avoiding or Rejecting Parses}[Section~\Ref]{PreferAvoidReject}).

\subsubsection{Context-free Ambiguities}
\label{cf-ambiguity}

Context-free grammars may be ambiguous and, as a result, the parser may yield
different parses of a text. More precisely, the result of a parse is a single
tree in which the ambiguities are explicitly marked. Each marked ambiguity
consists of a set of different parse trees for that ambiguity.  Many---but not
all!--- of these different parses can be eliminated by the following
strategies that are built-in the \ASmetaenv. These strategies use the
priorities and associativities as defined in the specification. In addition,
some standard heuristics are used.

\paragraph{Associativity filtering} The associativity filtering
is performed during the generation of the parse table. Based
on the associativity relations certain entries in the parse table
are removed.

\paragraph{Removing Trees containing Conflicts}

The simplest application of priority and associativity declarations is the
elimination of trees that contain conflicts:

\begin{itemize}

\item A parent node has a child with a lower priority than the parent itself.
  
\item A parent has a first or last child that is in conflict with
  an associativity relation between this parent and child.

\end{itemize}

Reconsidering the example of complex priorities shown \link*{earlier}[in
Figure~\Ref]{CODE:complex-prio} we will give a number of example sentences and
the interpretation given to them by that language definition.

\begin{center}
\begin{tabular}{ll}
  Sentence   & Interpretation \\
\verb"1^2^3" & \verb"1^(2^3)" \\
\verb"1^2*3" & \verb"(1^2)*3" \\
\verb"1*2*3" & \verb"(1*2)*3" \\
\verb"1/2/3" & error \\
\verb"1*2/3" & error \\
\verb"1-2-3" & error \\
\verb"1+2+3" & \verb"(1+2)+3" \\
\verb"1-2+3" & \verb"(1-2)+3" \\
\verb"1+2-3" & \verb"(1+2)-3"\\
\end{tabular}
\end{center}

\paragraph{Removing Trees using {\tt prefer}/{\tt avoid} Attributes at the Root}

The priority declarations are used to eliminate trees 
in three phases: 

\begin{enumerate}
  
\item If there are trees of which the syntax rule at the top node has a {\tt
    prefer} attribute, all other trees are removed.

\item  If there are trees of which the syntax rule at the top node has an {\tt
    avoid} attribute and there are other trees without an {\tt avoid} attribute at
  the root node, then all trees with {\tt avoid} attribute are removed.
  
\end{enumerate}

\paragraph{Removing Trees containing {\tt prefer}/{\tt avoid} Attributes}

After removing all trees containing conflicts, more than one tree may
still remain.  To further reduce this set of remaining trees, the number
of context-free functions with {\tt prefer}/{\tt avoid} attributes is
calculated and compared.  A tree in the set is then rejected if there
is another tree in the set with more {\tt prefer}s and less or equal
{\tt avoid}s, or with equal {\tt prefer}s and more {\tt avoid}s.

\paragraph{Injection count}
Finally, the number of injections in each of the resulting trees
is calculated, the tree with the smallest number of injections
is prefered.


\paragraph{Examples}

The following examples show how the interaction (and resulting ambiguities)
between general context-free functions and special case functions can be
described using {\tt prefer} attribute. 

The \link{first example}[(Figure~\Ref]{CODE:eqn-exprs} concerns expressions
for describing subscripts and superscripts in the typesetting language EQN.
The crucial point is that, for typesetting reasons, we want to treat a
subscript followed by a superscript in a special way. Therefore, the special
case `{\tt E sub E sup E -> E}' is introduced, which is prefered over a
combination of the two functions `{\tt E sub E -> E}' and `{\tt E sup E ->
  E}'.

\begin{figure}
\label{CODE:eqn-exprs}
\begin{IncCode}
\begin{verbatim}
module Eqn

imports Layout

exports
  sorts E 

  context-free syntax
    E "sub" E         -> E {left}
    E "sup" E         -> E {left}
    E "sub" E "sup" E -> E {prefer}
    "{" E "}"         -> E {bracket}
    "a"               -> E 
\end{verbatim}
\end{IncCode}
\caption{Syntax definition of EQN expressions}
\end{figure}

In the \link{second example}[ (Figure~\Ref)]{CODE:dangling-else}
the {\tt prefer} attribute is used to
solve the dangling else problem in a nice way.
The input sentence {\tt "if 0 then if 1 then hi else ho"} can be parsed
in two ways: {\tt if 0 then (if 1 then hi) else ho} and
{\tt if 0 then (if 1 then hi else ho)}.
We can select the latter derivation by adding the {\tt prefer}
attribute to the production without the {\tt else} part.
The parser will still construct an ambiguity node containing both
deriviations,
namely, {\tt if 0 then (if 1 then hi \{prefer\}) else ho} and
{\tt if 0 then (if 1 then hi else ho) \{prefer\}}.
But given the fact that the \emph{top} node of the latter derivation tree
has the prefer attribute this derivation is selected and the other
tree is removed from the ambiguity node.

\begin{figure}
\label{CODE:dangling-else}
\begin{IncCode}
\begin{verbatim}
module DanglingElse

imports Layout

exports
  sorts E S

  context-free syntax
    "a"                      -> E 
    "if" E "then" S          -> S {prefer}
    "if" E "then" S "else" S -> S
    "s"                      -> S
\end{verbatim}
\end{IncCode}
\caption{Syntax definition of conditionals}
\end{figure}

\subsection{Parameterization and Renaming}
\label{ParametersRenamings}

Parameterization and renaming were in fact features of 
the original \asf\ as described
in \cite{BHK89}, but they were never supported by the \asfsdf\
used in the first version of the \ASmetaenv~\cite{Kli93}. 
Based on the work described in \cite{Vis97}, \asfsdf\ is extended
with parameterization and symbol renaming\footnote{In \cite{Vis97} the
notion of production renaming is also introduced, but this
is not yet supported.}. We will first explain the notion
of parameterization, later we will give details on symbol renaming.

\subsubsection{Parameterization}
\label{Parameters}

Modules can have formal parameters when defining them. The module name
is then followed by a list of symbols, representing the formal
parameters of this module. 
The specification \link*{below}[in Figure~\Ref]{CODE:generic-pairs} shows 
an example of a parameterized module. In this example the
formal parameters are used in the parameterized sorts as well,
in order to increase readability and to avoid name clashes between
different instances of the same module.

\begin{figure}
\label{CODE:generic-pairs}
\begin{IncCode}
\begin{verbatim}
module Pair[X Y]

imports Booleans

hiddens
  sorts X Y
exports
  sorts Pair[[X,Y]]

  context-free syntax
    "[" X "," Y "]"      -> Pair[[X,Y]]

    make-pair(X, Y)      -> Pair[[X,Y]]
    first(Pair[[X,Y]])   -> X
    second(Pair[[X,Y]])  -> Y
    is-pair(Pair[[X,Y]]) -> Bool
\end{verbatim}
\end{IncCode}
\caption{Definition of generic pairs}
\end{figure}

When importing a parameterized module the formal parameters have
to be replaced by actual parameters. 
The specification \link*{below}[in Figure~\Ref]{CODE:importing-pairs} shows 
an example of a rather complicated import of a parameterized module. 
The symbols {\tt Pair[[Bool,Bool]]} and {\tt Pair[[Int,Int]]} are the
actual parameters of the module {\tt Pair[X Y]} in the last import.

\begin{figure}
\label{CODE:importing-pairs}
\begin{IncCode}
\begin{verbatim}
module TestPair

imports Booleans Pair[Bool Bool]
        Integers Pair[Int Int]
        Pair[Pair[[Bool,Bool]] Pair[[Int,Int]]]
\end{verbatim}
\end{IncCode}
\caption{Use of generic pair module}
\end{figure}

\subsubsection{Symbol Renaming}
\label{Renamings}

Symbol renaming is in fact very similar to parameterization except
that it is not necessary to add formal parameters to a module.
The specification \link*{below}[in Figure~\Ref]{CODE:pairs} shows 
an example of the {\tt Pair} module without parameters. 
The idea is to achieve the same effect as parameterization
by explicitly renaming {\tt X} and {\tt Y} to the desired
names when {\tt Pair} is imported.

\begin{figure}
\label{CODE:pairs}
\begin{IncCode}
\begin{verbatim}
module Pair

imports Booleans

hiddens
  sorts X Y
exports
  sorts Pair[[X,Y]]

  context-free syntax
    "[" X "," Y "]"      -> Pair[[X,Y]]

    make-pair(X, Y)      -> Pair[[X,Y]]
    first(Pair[[X,Y]])   -> X
    second(Pair[[X,Y]])  -> Y
    is-pair(Pair[[X,Y]]) -> Bool
\end{verbatim}
\end{IncCode}
\caption{Definition of generic pairs}
\end{figure}

During import such module symbols can be renamed via symbol renaming.
The specification \link*{below}[in Figure~\Ref]{CODE:renaming-pairs} shows 
an example of a rather complicated import of the module {\tt Pair}
using renamings. Renaming {\tt X} to {\tt Bool} is, for instance,
written as {\tt X => Bool}.

\begin{figure}
\label{CODE:renaming-pairs}
\begin{IncCode}
\begin{verbatim}
module TestPair

imports Booleans Pair[X => Bool Y => Bool]
        Integers Pair[X => Int  Y => Int]
        Pair[X => Pair[[Bool,Bool]] Y => Pair[[Int,Int]]]
\end{verbatim}
\end{IncCode}
\caption{Use of generic pair module}
\end{figure}

\subsection{Variables}
\label{Variables}

\index{variables@variables}
Variables are declared in the `{\tt variables}' section of a module.  Like all
other entities in a 
module---except equations---variables may be exported
(see \link*{Modules}[Section \Ref]{modules}). 
A variables section consists of a list of variable
names followed by a symbol. In fact, a variable declaration can define an
infinite collection of variables by using a \emph{naming scheme} instead of a
simple variable name.  A naming scheme is a regular expression like the ones
allowed in the \link{lexical syntax}[ (Section~\Ref)]{lexical-syntax} except that sorts
are not allowed. A variable may represent any symbol. 

In the specification \link*{below}[in Figure \Ref]{CODE:variables},
`{\tt Id}', `{\tt Type3}', and `{\tt Id-list}'
are examples of variables declared by the naming schemes in 
the {\tt variables} section.
Strings that occur in the left-hand side of variable declarations
should {\em always} be quoted.

\begin{figure}
\label{CODE:variables}
\begin{IncCode}
\begin{verbatim}
module VarDecls

imports Layout

exports
  sorts ID DECL TYPE 

  lexical syntax
    [a-z]+ -> ID
 
  context-free syntax
    "decl" {ID ","}+ ":" TYPE -> DECL 
    "integer"                 -> TYPE 
    "real"                    -> TYPE 

hiddens
  variables
    "Id"           -> ID 
    "Type"[0-9]*   -> TYPE 
    "Id-list"[\']* -> {ID ","}* 
    "Id-ne-list"   -> {ID ","}+
\end{verbatim}
\end{IncCode}
\caption{Variable declarations using naming schemes}
\end{figure}         

Declared variables can only be used when defining equations. It is not
allowed to use them in terms.

Ambiguities due to variables are resolved by the {\em Prefer Variables}
strategy that was discussed in
\link*{Lexical Ambiguities}[Section~\Ref]{lex-ambiguity}.

\subsubsection{Set Operator}

The \link{set operator}[ (see Section~\Ref)]{SetOperator} 
is an abbrevation for
representing sets. However, to obtain access to the elements of such
a set an auxilary variable has to be defined
as shown \link*{below}[in Figure~\Ref]{CODE:set-variable}.

\begin{figure}
\label{CODE:set-variable}
\begin{IncCode}
\begin{verbatim}
module Set

imports Layout

exports
  sorts Id IdSet

  lexical syntax
    [a-z]+ -> Id
 
  context-free syntax
    Set[ID] -> IdSet 

hiddens
  variables
    "Id"[0-9]*     -> Id
    "Id*"[0-9]*    -> {Id ","}* 
    "IdSet"[0-9]*  -> IdSet
\end{verbatim}
\end{IncCode}
\caption{Variable declarations for Set}
\end{figure}         

\subsection{Equations}
\label{Equations}

\index{equations@equations}
\index{Asf+Sdf@\asfsdf}
With equations a meaning or semantics may be added to functions declared in
the lexical and context-free syntax sections. 
In particular, equations consist of two \emph{open terms}, i.e.
terms possibly containing variables.

In the context of \asfsdf, an open term is any string that can be parsed
according to one of the sorts in the specification (possibly including
variables).  Recalling \link{the {\tt Bool-example} specification}[ in
Section~\ref{Bool-example}]{Bool-example}, 
examples of open terms are `{\tt true}', 
`{\tt not(false)}' and `{\tt true | Bool}'.

\subsubsection{Unconditional Equations}

\index{unconditional equations@unconditional equations}
An equality then consists of two open $L$ (lefthand side) and $R$ (righthand
side) such that:

\begin{itemize}

\item $L$ and $R$ are of the same sort.

\item $L$ is not a single variable.
  
\item The variables that occur in $R$ also occur in $L$.

\end{itemize}

It is assumed that the
variables occurring in the equation are universally quantified. In other
words, the equality holds for all possible values of the variables.

The equality of two terms $L$ and $R$ is defined  in \asfsdf\ by the following
\emph{unconditional} equation:

\begin{quote}
{\tt [$TagId$] $L$ = $R$} 
\end{quote}

\noindent where $TagId$ is a sequence of letters, digits, and/or minus
signs ({\tt -}) starting with a letter or a digit.


\subsubsection{Conditional Equations}

\index{conditional equations@conditional equations}
An unconditional equation is a special case of a \emph{conditional equation},
i.e., an equality with one or more associated conditions (premises).  The
equality is sometimes called the \emph{conclusion} of the conditional
equation.

In \asfsdf\ a conditional equation can be written in three (syntactically
different) ways:

\begin{tabbing}
(a) \= {\tt [$TagId$]} \= {\tt $L$ = $R$ when $C_1$, $C_2$, ...} \\\\
(b) \> {\tt [$TagId$]} \> {\tt $C_1$, $C_2$, ... ===> $L$ = $R$} \\ 
(c) \> {\tt [$TagId$]} \> {\tt $C_1$, $C_2$, ...} \\
             \>    \> {\tt =================} \\
             \>    \> \ \ \ \ \ {\tt $L$ = $R$}
\end{tabbing}


\noindent where $C_1$, $C_2$, ...  are conditions which may be 
either positive (and have  the form `{\tt $S$ = $T$}'), 
or negative (and have the form `{\tt $S$ != $T$}').

The conditions of an equation are evaluated from left to right. Let,
initially, $V$ be the set of variables occurring in the left-hand side $L$ of the
conclusion of the equation. For the evaluation of each positive condition we
distinguish the following cases:

\begin{itemize}
  
\item The condition contains only variables in $V$. Reduce both sides of the
  condition to normal form and the condition succeeds if both normal forms are
  identical.
  
\item One of the sides of the condition contains new variables not in $V$.
  Reduce the side that does not contain new variables to normal form and the
  condition succeeds if this normal form and the other (unnormalized) side of
  the condition match. The new variables resulting from this match are added
  to $V$.

\end{itemize}
  
The evaluation of negative conditions is described by replacing in the above
description `identical' and `match' by `not identical' and `do not
match', respectively. 
However, it is not allowed to introduce new variables in a negative condition.
%%A warning is appropriate here: a negative condition that introduces
%%new variables nearly always succeeds (unless the sort has exactly one
%% element) and this is almost certainly not what you want.

After the successful evaluation of the conditions, all variables occurring in
the right-hand side of the conclusion of the equation should be in $V$.

New variables (see above) should therefore {\bf not} occur on \emph{both} 
sides of a positive condition, in a negative condition, 
or in the right-hand side of the conclusion.


\begin{figure}[t]
\label{CODE:split}
\begin{IncCode}
\begin{verbatim}
module Split

imports Integers

exports
  sorts El List
  lexical syntax
    [a-z]+ -> El
  context-free syntax
    {El ","}* -> List
    "length" "(" List ")"       -> Int
    "split-in-two" "(" List ")" -> List

hiddens
  variables
    "El"[0-9]*  -> El
    "El*"[0-9]* -> {El ","}* 

equations

  [l-1] length() = 0

  [l-2] length(El, El*) = 1 + length(El*)

  [s-1] length(El*1) = length(El*2)
        ===========================
        split-in-two(El*1, El*2) = El*1

  [s-1] length(El*1) = length(El*2)
        ===========================
        split-in-two(El*1, El, El*2) = El*1 
\end{verbatim}
\end{IncCode}
\caption{Split-in-two specification}
\end{figure}  

\subsubsection{Executing Equations}
\label{ExecutingEquations}

\index{leftmost-innermost@leftmost-innermost}
\index{rewrite rules@rewrite rules}
\index{default equations@default equations}
In the \ASmetaenv, equations can be executed as \emph{rewrite rules}.  The
above equation is thus executed as the rewrite rule $L \rightarrow R$. This
can be used to reduce some initial closed term (i.e., not containing
variables) to a \emph{normal form} (i.e., a term that is not reducible any
further) by repeatedly applying rules from the specification.

A term is always reduced in the context of a certain module, say $M$. The
rewrite rules that may be used for the reduction of the term are the rules
declared in $M$ itself and in the modules that are (directly or indirectly)
imported by $M$.

The search for an applicable rule is determined by the reduction strategy,
that is, the procedure used to select a subterm for possible reduction. In our
case the \emph{leftmost-innermost} reduction strategy is used. This means that a
left-to-right, depth-first traversal of the term is performed and that for
each subterm encountered an attempt is made to reduce it.

Next, the rules are traversed one after the other.  The textual order of the
rules is irrelevant.  Instead they are ordered according to their
\emph{specificity}: more specific rules come before more general rules and
\link{default rules}[ (see
Section~\ref{DefaultEquations})]{DefaultEquations} come last.  
If the selected subterm and the left-hand side of a
rule (more precisely: of the left-hand side of its conclusion) match, we say
that a \emph{redex} has been found and the following happens. The conditions
of the rule are evaluated and if the evaluation of a condition fails, other
rules (if any) with matching left-hand sides are tried.  If the evaluation of
all conditions succeeds, the selected subterm is replaced by the right-hand
side of the rule (more precisely: the right-hand side of the conclusion of the
rule) after performing proper \emph{substitutions}. Substitutions come into
existence by the initial matching of the rule and by the evaluation of its
conditions.  For the resulting term the above process is repeated until no
further reductions are possible and a normal form is reached (if any).

\subsubsection{List Matching}

\index{list matching@list matching}
\index{associative matching@associative matching}
List matching, also known as associative matching, is a powerful
mechanism to describe complex functionality in a compact way.  
\begin{iftex}
See Figure \ref{CODE:sets} for
\end{iftex}
\begin{ifhtml}
The example below gives
\end{ifhtml}
a compact specification to remove double elements from a set.

\begin{figure}[tb]
\label{CODE:sets}
\begin{IncCode}
\begin{verbatim}
module Sets

imports Layout

exports
  sorts Elem Set

  lexical syntax
    [a-z]+ -> Elem

  context-free syntax
    Set[Elem] -> Set

hiddens
  variables
    "Elem"[0-9]*  -> Elem
    "Elem*"[0-9]* -> {Elem ","}*

equations
  
  [set] {Elem*1, Elem, Elem*2, Elem, Elem*3} = {Elem*1, Elem, Elem*2, Elem*3} 
\end{verbatim}
\end{IncCode}
\caption{Set specification}
\end{figure}   

Unlike the matching of ordinary (non-list) variables, the matching of a list
variable may have more than one solution since the variable can match lists of
arbitrary length.

As a result, backtracking is needed. For instance, to match {\tt X Y} (a list
expression containing the two list variables {\tt X} and {\tt Y} indicating
the division of a list into two sublists) with the list {\tt ab} (a list
containing two elements) the following three alternatives have to be
considered:

\begin{quote}
{\tt X = (empty), Y = ab, \\
X = a, Y = b, \\
X = ab, Y = (empty)}.
\end{quote}

In the unconditional case, backtracking occurs only during matching. When
conditions are present, the failure of a condition following the match of a
list variable leads to the trial of the next possible match of the list
variable and the repeated evaluation of following conditions.

This is exemplified by the 
\link{Set specification}[ presented in Figure \ref{CODE:sets}]{CODE:sets}.
Yet another example of list matching in combination with the evaluation
of conditions is \link{shown}[ in Figure \ref{CODE:split}]{CODE:split}.
A list of elements is split into two parts of equal length, if the list
has an even number of elements. In case of a list of uneven length
the middle element is ignored. The first part of the list is returned
as result.

\begin{figure}[tb]
\label{CODE:lcfs}
\begin{IncCode}
\begin{verbatim}
module Nats

imports Layout

exports
  sorts NAT-CON
  lexical syntax
    [0-9]+ -> NAT-CON 

hiddens
  variables
    "Char+"[0-9]* -> CHAR+

equations

  [1] nat-con("0" Char+) = nat-con(Char+)  
\end{verbatim}
\end{IncCode}
\caption{Use of lexical constructor functions}
\end{figure}    

\subsubsection{Lexical Constructor Functions}

The only way to access the actual characters of a lexical token is
by means of the so-called {\em lexical constructor functions}.
For each lexical sort $LEX$ a lexical constructor function is automatically
derived, the corresponding syntax definition is:
{\tt "lex" "(" CHAR* ")" -> LEX}.
The sort {\tt CHAR} is a predefined sort to access the characters.

Characters can be directly addressed by the representation or via
variables which are either of the sort {\tt CHAR}, {\tt CHAR*}, or
{\tt CHAR+}, where the latter two represent lists of characters.
A \link{lexical constructor function}[, in Figure
\ref{CODE:lcfs},]{CODE:lcfs} is used to remove the leading zeros for a number.

\noindent Note: there is no check on the use of characters within the
lexical constructor function.

\subsubsection{Default Equations}
\label{DefaultEquations}

\index{default equations@default equations}
The evaluation strategy for normalizing terms given the equations is
based on innermost rewriting. All equations have the same priority.
Given the outermost function symbol of a redex the set of equations with
this outermost function symbol in the left-hand side is selected and all
these rules will be tried.  However, sometimes a specification writer
would like to write down a rule with a special status ``{\em try this rule
if all other rules fail}''.  A kind of default behaviour is needed. \asf\
offers functionality in order to obtain this behaviour. If the $TagId$
of an equation starts with {\tt default-} this equation is considered to
be a special equation which will only be applied if no other rule matches.
\begin{iftex} 
Figure \ref{CODE:types} shows
\end{iftex}
\begin{ifhtml}
The specification below gives
\end{ifhtml}
an example of the use of a default equation.

\begin{figure}
\label{CODE:types}
\begin{IncCode}
\begin{verbatim}
module Types

imports Booleans

exports
  sorts Type
  context-free syntax
    "natural"     -> Type
    "string"      -> Type
    "nil-type"    -> Type
    "compatible" "(" Type "," Type ")" -> Bool 

hiddens
  variables
    "Type"[0-9]*  -> Type

equations

  [Type-1]  compatible(natural, natural) = true

  [Type-2]  compatible(string, string) = true

  [default-Type] compatible(Type1,Type2) = false
\end{verbatim}
\end{IncCode}
\caption{Using a default equation}
\end{figure}   

\subsubsection{Memo Functions}
\label{MemoFunctions}

\index{memo functions@memo functions}
Rewriting as execution model is not very efficient. Memo functions
improve the efficiency of \asfsdf\ specifications.  Given a set of
argument values for some function the normal form can be obtained via
rewriting. It is possible that some function is called with the same set
of arguments over and over again. Each time the function is rewritten to
obtain the same normal again. By means of adding the {\tt memo} attribute,
this behaviour is improved by storing the set of argument values and the
derived normal form in a memo-table.  For each set of argument values it
is checked whether there exists a normal form in the memo-table. If so,
this normal form is returned.  If not, the function given this set of
argument values is normalized and stored in the memo-table.

There is some overhead involved in accessing the memo-table.  Therefore,
it is not wise to add the memo attribute to each function.  With respect
to the operational behaviour adding a memo attribute does not have any
effect.  
The \link{Fibonacci function}[, in Figure~\ref{CODE:fib},]{CODE:fib}
is decorated with
the memo attribute, improving its efficiency.
For 
\link{some figures}[, see Table~\ref{TABLE:fibn},]{TABLE:fibn}
on the performance improvement.

\begin{table}
\label{TABLE:fibn}
\begin{center}
\begin{tabular}{|l|c|c|} \hline
fib(n) & Time without memo (sec) & Time with memo (sec) \\ \hline \hline
fib(16)          & \ 2.0 & 0.7  \\ \hline
fib(17)          & \ 3.5 & 1.1  \\ \hline
fib(18)          & \ 5.9 & 1.8  \\ \hline
fib(19)          &  10.4 & 3.3  \\ \hline
\end{tabular}
\caption{Execution times for the evaluation of $\mbox{\em fib}(n)$}
\end{center}
\end{table}


\begin{figure}
\label{CODE:fib}
\begin{IncCode}
\begin{verbatim}
module Fib

imports Layout

exports
  sorts Int
  context-free syntax
    "0"             -> Int
    "s" "(" Int ")" -> Int

  context-free syntax
    add(Int, Int) -> Int

    fib(Int)      -> Int {memo}

hiddens
  variables
    [xy][0-9]* -> Int

equations

  [add-s] add(s(x), y) = s(add(x, y))
  [add-z] add(0, y) = y

  [fib-z] fib(0) = s(0)
  [fib-o] fib(s(0)) = s(0)
  [fib-x] fib(s(s(x))) = add(fib(s(x)), fib(x))

\end{verbatim}
\end{IncCode}
\caption{Using the memo attribute when defining Fibonacci}
\end{figure}   

%%\subsubsection{Delaying} \label{Delay}
%%
%%Both the compiler and the evaluator are based on innermost rewriting.
%%In some cases it is more efficient to overrule this rewriting
%%strategy. The disadvantage of innermost rewriting are redundant work
%%in some cases and in some cases even non-termination. An example
%%of the first point and indirectly of the second point is the
%%evaluation of a conditional (see Figure~\ref{CODE:conditional}), 
%%using innermost rewriting the evaluation of an conditional 
%%amounts to evaluating the expression, then part, and else part, independent
%%of the result of the evaluation of the expression.
%%
%%\begin{figure}
%%\label{CODE:conditional}
%%\begin{IncCode}
%%\begin{verbatim}
%%module Conditional
%%
%%imports Layout Expr Booleans
%%
%%exports
%%  context-free syntax
%%    "if" Bool "then" Expr "else" Expr "fi" -> Expr
%%
%%hiddens
%%  variables
%%    "Bool"[0-9]* -> Bool
%%    "Expr"[0-9]* -> Expr
%%
%%equations
%%
%%  [if-t] if true then Expr1 else Expr2 fi = Expr1
%%  [if-f] if false then Expr1 else Expr2 fi = Expr2
%%\end{verbatim}
%%\end{IncCode}
%%\caption{Equations for conditions}
%%\end{figure}   

\subsubsection{Getters and Setters Functions}
\label{GettersSetters}

\index{getter functions@getter functions}
\index{setter functions@setter functions}

\subsubsection{Traversal Functions}
\label{Traversal}

\index{traversal functions@traversal functions}
\index{accumulator@accumulator}
\index{transformer@transformer}
Program analysis and program transformation usually take the syntax
tree of a program as starting point.  One common
problem that one encounters is how to express the \emph{traversal} of
the tree: visit all the nodes of the tree and extract information from
some nodes or make changes to certain other nodes.

The kinds of nodes that may appear in a program's syntax tree are
determined by the grammar of the language the program is written
in. Typically, each rule in the grammar corresponds to a node category
in the syntax tree. Real-life languages are described by grammars which
can easily contain several hundred, if not thousands of grammar rules.
This immediately reveals a hurdle for writing tree traversals: a naive
recursive traversal function should consider many node categories and
the size of its definition will grow accordingly.  This becomes even
more dramatic if we realize that the traversal function will only do
some real work (apart from traversing) for very few node categories.

Traversal functions in \asfsdf~\cite{BKV01} solve this 
problem\footnote{Traversal functions are currently only supported 
by the evaluator and not by the compiler.}.
We distinguish three kinds of traversal functions, defined as follows.

\begin{description}

\item[Transformer:] a sort-preserving transformation that 
will traverse its first argument. Possible extra arguments may contain
additional data that can be used (but not modified) during the traversal.
A transformer is declared as follows:

\[f(S_1 , ..., S_n) \rightarrow S_1 \mbox{\tt \{traversal(trafo)\}}\]

Because a transformer always returns the same sort, it is type-safe. A
transformer is used to transform a tree.

\item[Accumulator:] a mapping of all node types to a single type. 
It will traverse its first argument, while the second
argument keeps the accumulated value. An accumulator is declared as follows:

\[f(S_1 , S_2 , ..., S_n) \rightarrow S_2 \mbox{\tt \{traversal(accu)\}}\] 

After each application of an accumulator, the accumulated argument is updated.
The next application of the accumulator, possibly somewhere else in the term,
will use the \emph{new} value of the accumulated argument. In other words,
the accumulator acts as a global, modifiable, state during the traversal.

An accumulator function never changes the tree, only its accumulated argument.
Furthermore, the type of the second argument has to be equal to the result
type. The end-result of an accumulator is the value of the accumulated
argument. By these restrictions, an accumulator is also type-safe for every
instantiation.

An accumulator is meant to be used to extract information from a tree.

\item[Accumulating transformer:] a sort preserving transformation
that accumulates information while traversing its first argument. The
second argument maintains the accumulated value. The return value of
an accumulating transformer is a tuple consisting of the transformed
first argument and accumulated value. An accumulating transformer
is declared as follows:

\[f(S_1 , S_2 , ..., S_n) \rightarrow S_1 \# S_2 \mbox{\{{\tt traversal(accutrafo)}\}}\]

An accumulating transformer is used to simultaneously extract information from a
tree and transform it.
\end{description}

Having these three types of traversals, they must be provided with visiting
strategies. Visiting strategies determine the order of traversal and the
``depth'' of the traversal. We provide the following two strategies for each
type of traversal:

\begin{description}
\item[Bottom-up:] the traversal visits \emph{all} the subtrees of a node where
  the visiting function applies in an \emph{bottom-up}\ fashion.  The
  annotation {\tt bottom-up} selects this behavior.  A traversal function without an
  explicit indication of a visiting strategy also uses the bottom-up strategy.
  
\item[Top-down:] the traversal visits the subtrees of a node in an top-down
  fashion and stops recurring at the first node where the visiting function
  applies and does not visit the subtrees of that node. The annotation
  {\tt top-down} selects this behavior.
\end{description}

We give two simple examples of traversal functions that are both
based on the \link{tree language}[ defined in
Figure~\ref{FIG:tree-language}]{FIG:tree-language}.
\link{Our first example}[ (Figure~\ref{FIG:inc})]{FIG:inc} 
transforms a given tree into a new tree in which
all numbers have been incremented.  
\link{Our second example}[ (Figure~\ref{FIG:sum})]{FIG:sum}
computes the sum of all numbers in a tree.
For many more examples and a detailed description of traversal functions
see~\cite{BKV01}.

Implicitly, each traversal function corresponds to a set of functions,
one for each sort that can be reached during a traversal.
They are explicitly defined by the specification writer
(this is the default).

\begin{figure}
\label{FIG:tree-language}
\begin{IncCode}
\begin{verbatim}
module Tree-syntax
imports Naturals
exports
  sorts TREE
  context-free syntax
    NAT           -> TREE
    f(TREE, TREE) -> TREE
    g(TREE, TREE) -> TREE
    h(TREE, TREE) -> TREE
\end{verbatim}
\end{IncCode}
\caption{A simple tree language}
\end{figure}     

\begin{figure}
\label{FIG:inc}
\begin{IncCode}
\begin{verbatim}
module Tree-inc
imports Tree-syntax
exports
  context-free syntax
    inc(TREE) -> TREE {traversal(trafo)}
equations
[1] inc(N) = N + 1  
\end{verbatim}
\end{IncCode}
\caption{The transformer {\tt inc} increments all numbers in a tree}
\end{figure}  

\begin{figure}
\label{FIG:sum} 
\begin{IncCode}
\begin{verbatim}
module Tree-sum
imports Tree-syntax
exports
context-free syntax
   sum(TREE, NAT) -> NAT {traversal(accu)}
equations
[1] sum(N1, N2) = N1 + N2
\end{verbatim}
\end{IncCode}
\caption{The accumulator {\tt sum} that sums all numbers in a tree.}
\end{figure}   



\begin{figure}
\label{CODE:itemsets}
\begin{IncCode}
\begin{verbatim}
module ItemSet

imports Layout

exports
  sorts Item Set 

  lexical syntax
    [a-z]+ -> Item 

  context-free syntax
    Set[Item] -> Set

hiddens
  variables
    "i"[0-9]* -> Item
    "l"[0-9]* -> {Item ","}* 

equations

  [1] {l1, i, l2, i, l3}   = {l1, i, l2, l3} 
  [2] {l1, i1, l2, i2, l3} = {l1, i2, l2, i1, l3}
\end{verbatim}
\end{IncCode}
\caption{Non-executable specification for sets}
\end{figure}   

\subsubsection{Which Specifications are Executable?}

Which \asfsdf\ specifications can be executed? 
The \link{specification of sets}[ in
Figure~\ref{CODE:itemsets}]{CODE:itemsets} 
illustrates a non-executable specification,
since equation {\tt [2]}, which expresses that two elements in a set may
be exchanged, will lead to an infinite rewriting loop.

\subsubsection{Common Errors when Executing Specifications}

\begin{itemize}

\item When using the inequality operator {\tt !=} in a condition,
no new variables may be introduced in either side of the inequality.

\item If the normal form of a term still contains function symbols
that should have been removed during rewriting, you probably have
forgotten one or more equations that define the function.

A typical situation is that you have given an \emph{incomplete} set of equations
defining the function.

\item The rewriting process does not stop. Your equations probably contain
an infinite loop.

\item Be careful when a condition contains both instantiated and 
uninstantiated variables.

\end{itemize}

\section{Examples of \asfsdf\ Specifications}
\label{large-examples}




Here are some examples of \asfsdf\ specifications, which are selected to
illustrate specific features of the formalism. Larger examples can be found in
the online specifications.

\subsection{Symbolic Differentiation}


Computing the derivative of an expression with respect to some variable is a
classical problem we discuss in this example. 
Computing the derivative of {\tt X * (X + Y + Z)} with respect to X gives:
\begin{quote}
{\tt d(X * (X + Y + Z)) / dX ) = X + Y + Z + X}
\end{quote}

\noindent Differentiation is defined in three stages. First, the sorts {\tt NAT}
(natural numbers), {\tt VAR} (variables), and {\tt EXP} (expressions) are
introduced. Next, a differentiation operator of the form {\tt d $E$/d$V$} is
defined. Then, the differentiation rules are defined (equations [1]-[5]).
Finally, some rules for simplifying expressions are given. As the above
example shows, further simplification rules could have been added to collect
multiple occurrences of a variable (giving {\tt 2*X + Y + Z}) or to 
compute constant expressions.

\begin{figure}
\label{CODE:diff}
\begin{IncCode}
\begin{verbatim}
module Diff 

imports Layout

exports
  sorts NAT VAR EXP
 
  lexical syntax
    [0-9]+   -> NAT 
    [XYZ]    -> VAR

  context-free syntax
    NAT                 -> EXP 
    VAR                 -> EXP 
    EXP "+" EXP         -> EXP {left} 
    EXP "*" EXP         -> EXP {left} 
    "(" EXP ")"         -> EXP {bracket} 
    "d" EXP "/" "d" VAR -> EXP

 context-free priorities
   EXP "*" EXP -> EXP > EXP "+" EXP -> EXP

hiddens
  variables
    "N"       -> NAT 
    "V"[0-9]* -> VAR 
    "E"[0-9]* -> EXP 

equations 
  [ 1] dN/dV = 0            [ 2] dV/dV = 1 
  [ 3] V1 != V2 ==> dV1/dV2 = 0 
  [ 4] d(E1+E2)/dV = dE1/dV + dE2/dV 
  [ 5] d(E1*E2)/dV = dE1/dV * E2 + E1 * dE2/dV 
  [ 6] E + 0 = E            [ 7] 0 + E = E 
  [ 8] E * 1 = E            [ 9] 1 * E = E 
  [10] 0 * E = 0            [11] E * 0 = 0
\end{verbatim}
\end{IncCode}
\caption{\asfsdf\ specification for differentiation}
\end{figure}   


\subsection{Sorting}



The use of list structures is illustrated by the specification of
the \link{"Dutch National Flag" problem}[ presented in Figure
\ref{CODE:flag}]{CODE:flag}: 
given an arbitrary list of the colours red,
white and blue, sort them in the order as they appear in the Dutch National
Flag. We want:

{\tt \{white blue red blue red white red\} $\Rightarrow$ \{red red red white
 white blue blue\}}

In the \link{specification}[ of Figure~\ref{CODE:flag}]{CODE:flag}, 
the list variables {\tt Cs1} and {\tt Cs2}
permit a succinct formulation of the search for adjacent colours that are in
the wrong order.


\begin{figure}
\label{CODE:flag}
\begin{IncCode}
\begin{verbatim}
module Flag

imports Layout

exports
  sorts Color Flag 

  context-free syntax
    "red"          -> Color 
    "white"        -> Color 
    "blue"         -> Color 
    "{" Color+ "}" -> Flag 

hiddens
  variables
    "Cs"[0-9]* -> Color* 
    "C"[0-9]*  -> Color 

equations

  [1] {Cs1 white red Cs2}  = {Cs1 red white Cs2}

  [2] {Cs1 blue white Cs2} = {Cs1 white blue Cs2} 

  [3] {Cs1 blue red Cs2}   = {Cs1 red blue Cs2}
\end{verbatim}
\end{IncCode}
\caption{\asfsdf\ specification for sorting}
\end{figure} 

\subsection{Code Generation}

Consider a simple statement language (with assignment, if-statement and
while-statement) and suppose we want to compile this language to the following
stack machine code:

\begin{description}
\item{\tt push $N$} Push the number $N$. 
\item{\tt rvalue $I$} Push the contents of data location $I$.
\item{\tt lvalue $I$} Push the address of data location $I$. 
\item{\tt pop} Remove the top of the stack. 
\item{\tt copy} Push a copy of the top value on the stack. 
\item{\tt assign} The r-value on top of the stack is stored in the l-value
  below it and both are popped.
\item{\tt add, sub, mul}
Replace the two values on top of the stack by their sum (difference,
product). 
\item{\tt label $L$} Place a label (target of jumps). 
\item{\tt goto $L$} Next instruction is taken from statement following label
  $L$. 
\item{\tt gotrue $L$} Pop the top value; jump if it is nonzero.
\item{\tt  gofalse $L$}
Pop the top value; jump if it is zero.
\end{description}

\noindent The statement:
\begin{quote}
{\tt while a do a := a - 1; b := a * c od }
\end{quote}
will now be translated to the following instruction sequence:
\begin{verbatim}
label xx ; 
rvalue a ; 
gofalse xxx ; 
lvalue a ; 
rvalue a ; 
push 1 ;
sub ; 
assign ;
lvalue b ; 
rvalue a ; 
rvalue c ; 
mul ; 
assign ; 
goto xx ; 
label xxx
\end{verbatim}


\noindent 
The \link{specification}[, in Figure
\ref{CODE:basicnotions},]{CODE:basicnotions} defines the 
sorts {\tt Nat} (numbers) and {\tt Id} (identifiers).
Given these basic notions the \link{expressions}[, see Figure
\ref{CODE:expressions}]{CODE:expressions}, and 
\link{statements}[, see Figure \ref{CODE:statements},]{CODE:statements}
of our little source language are defined.

\begin{figure}
\label{CODE:basicnotions}
\begin{IncCode}
\begin{verbatim}
module BasicNotions 
exports
  sorts Nat Id 
  lexical syntax
    [0-9]+         -> Nat 
    [a-z][a-z0-9]* -> Id
\end{verbatim}
\end{IncCode}
\caption{\asfsdf\ specification for BasicNotions}
\end{figure}

\begin{figure}
\label{CODE:expressions}
\begin{IncCode}
\begin{verbatim}
module Expressions 

imports BasicNotions

exports
  sorts Exp 
  context-free syntax
    Nat         -> Exp 
    Id          -> Exp 
    Exp "+" Exp -> Exp {left}
    Exp "-" Exp -> Exp {left}
    Exp "*" Exp -> Exp {left}

  context-free priorities
    Exp "*" Exp -> Exp > {left: Exp "+" Exp -> Exp
                                Exp "-" Exp -> Exp}
\end{verbatim}
\end{IncCode}
\caption{\asfsdf\ specification for Expressions}
\end{figure}

\begin{figure}[tb]
\label{CODE:statements}
\begin{IncCode}
\begin{verbatim}
module Statements 

imports Expressions 

exports
  sorts Stat Stats 
  context-free syntax
    Id ":=" Exp                 -> Stat 
    "if" Exp "then" Stats "fi"  -> Stat 
    "while" Exp "do" Stats "od" -> Stat
    {Stat ";"}+                 -> Stats 
\end{verbatim}
\end{IncCode}
\caption{\asfsdf\ specification for Statements}
\end{figure}


The instructions of the \link{stack machine are defined}[ in 
Figure \ref{CODE:assemblylanguage}]{CODE:assemblylanguage}.
Next, we define a function to construct a next label given the
previous one. It is defined on the lexical notion of labels ({\tt Label}). 
The \link{scheme}[, see Figure \ref{CODE:nextlabel} for the actual
definition,]{CODE:nextlabel} of appending the 
character `{\tt x}' to the previous label is, of
course, naive and will in real life be replaced by a more sophisticated one.

\begin{figure}
\label{CODE:assemblylanguage}
\begin{IncCode}
\begin{verbatim}
module AssemblyLanguage

imports BasicNotions 
exports 
  sorts Label Instr Instrs
  lexical syntax
    [a-z0-9]+ -> Label 
  context-free syntax
    "push" Nat      -> Instr
    "rvalue" Id     -> Instr 
    "lvalue" Id     -> Instr 
    "assign"        -> Instr 
    "add"           -> Instr 
    "sub"           -> Instr 
    "mul"           -> Instr 
    "label" Label   -> Instr 
    "goto" Label    -> Instr 
    "gotrue" Label  -> Instr 
    "gofalse" Label -> Instr
    {Instr ";"}+    -> Instrs 
\end{verbatim}
\end{IncCode}
\caption{\asfsdf\ specification for AssemblyLanguage}
\end{figure}

\begin{figure}
\label{CODE:nextlabel}
\begin{IncCode}
\begin{verbatim}
module NextLabel
  
imports AssemblyLanguage
  
exports
  context-free syntax
    "nextlabel" "(" Label ")" -> Label 

hiddens
  variables
    "Char*"[0-9]* -> CHAR*

equations

 [1] nextlabel(label(Char*)) = label(Char* "x")
\end{verbatim}
\end{IncCode}
\caption{\asfsdf\ specification for NextLabel}
\end{figure}

It remains to define a function `{\tt tr}' that translates statements into
instructions. During code generation we should generate new label names for
the translation of if- and while-statements. This is an instance of a
frequently occurring problem: how do we maintain global information (in this
case: the last label name generated)? A standard solution is to introduce an
auxiliary sort ({\tt Instrs-Lab}) that contains both the generated instruction
sequence and the last label name generated so far.
\begin{iftex}
The Figures \ref{CODE:codegenerator.sdf} and \ref{CODE:codegenerator.asf} 
show the module containing this actual translation function.
\end{iftex}
\begin{ifhtml}
The \link{\sdf\ part}[]{CODE:codegenerator.sdf} and
\link{\asf\ part}[]{CODE:codegenerator.asf} define
the actual translation function.
\end{ifhtml}

This completes the specification of our code generator.

\begin{figure}
\label{CODE:codegenerator.sdf}
\begin{IncCode}
\begin{verbatim}
module CodeGenerator

imports Statements AssemblyLanguage NextLabel 
  
exports
  context-free syntax
    "tr" "(" Stats ")" -> Instrs
  
hiddens
  sorts Instrs-lab 
  context-free syntax
    Instrs # Label               -> Instrs-lab 
    "tr" "(" Stats "," Label ")" -> Instrs-lab 
    "tr" "(" Exp ")"             -> Instrs

hiddens
  variables
    "Exp"[0-9\']*        -> Exp 
    "Id"[0-9\']*         -> Id
    "Instr"[0-9\']*      -> Instr 
    "Instr-list"[0-9\']* -> {Instr ";"}+
    "Label"[0-9\']*      -> Label
    "Nat"[0-9\']*        -> Nat 
    "Stat"[0-9\']*       -> Stat
    "Stat+"[0-9\']*      -> {Stat ";"}+
\end{verbatim}
\end{IncCode}
\caption{\asfsdf\ specification for
CodeGenerator}
\end{figure}

    
\begin{figure}
\label{CODE:codegenerator.asf}
\begin{IncCode}
\begin{verbatim}
equations 

[1] tr(Stat-list, x) = <Instr-list, Label>
    ======================================
    tr(Stat-list) = Instr-list

[2] tr(Stat, Label) = <Instr-list1, Label'>, 
    tr(Stat-list, Label') = <Instr-list2, Label''>
    ================================================================== 
    tr(Stat ; Stat-list, Label) = <Instr-list1 ; Instr-list2, Label''>

[3] tr(Exp) = Instr-list
    ============================================================= 
    tr(Id := Exp, Label) = <lvalue Id; Instr-list; assign, Label>

[4] tr(Exp) = Instr-list1, tr(Stat-list, Label) = <Instr-list2, Label'>,
    Label'' = nextlabel(Label') 
    ================================================================ 
    tr(if Exp then Stat-list fi, Label) =
    <Instr-list1; gofalse Label''; Instr-list2; label Label'', Label''>

[5] tr(Exp) = Instr-list1, tr(Stat-list, Label) = <Instr-list2, Label'>,
    Label'' = nextlabel(Label'), Label''' = nextlabel(Label'') 
    ================================================================ 
    tr(while Exp do Stat-list od, Label) =
    <label Label''; Instr-list1; gofalse Label'''; Instr-list2;
     goto Label''; label Label''', Label'''>

[6] tr(Exp1) = Instr-list1, tr(Exp2) = Instr-list2
    =============================================== 
    tr(Exp1 + Exp2) = Instr-list1; Instr-list2; add

[7] tr(Exp1) = Instr-list1, tr(Exp2) = Instr-list2
    =============================================== 
    tr(Exp1 - Exp2) = Instr-list1; Instr-list2; sub

[8] tr(Exp1) = Instr-list1, tr(Exp2) = Instr-list2
    =============================================== 
    tr(Exp1 * Exp2) = Instr-list1; Instr-list2; mul

[9] tr(Nat) = push Nat 
[10] tr(Id) = rvalue Id
\end{verbatim}
\end{IncCode}
\caption{\asfsdf\ specification for
CodeGenerator}
\end{figure}


\subsection{Large \asfsdf\ Specifications}

There are a quite a few very large \asfsdf\ specifications around:

\begin{itemize}

\item The \asfsdf2C compiler.

\item A part of the parse table generator for \sdf.

\item The syntax and type checking of a domain specific language for
describing financial products.

\item A compiler from UML diagrams to various target languages (Progress, Java, DB2).

\item Transformation system for improving Cobol programs.

\item A system for Java refactoring.

\item Tooling for Action Semantics.

\item Tooling for Casl.

\end{itemize}

\section{Compiling Specifications}
\label{compiling-specs}

By means of the button {\tt Compile ...} in the 
\link{pop up menu for module operations}[ (Figure
\ref{FIG:module-menu})]{FIG:module-menu} or the button pane the \asfsdf2C
compiler can be activated. C code is generated for the selected module
(exactly {\em one} module can be selected for compilation) including
the imported modules. The C code is immediately compiled into an
executable.

\begin{itemize}
\item The specification should be complete, i.e., no missing modules are
allowed, and the equations sections should be error free.
\end{itemize}

If this requirement is satisfied, C code can be generated.
This process of C code generation is described in detail in \cite{BKO99}.
We shall give a brief description of the main steps performed by the
\asfsdf2C compiler.

In \asfsdf\ there is {\em no} restriction in which module an equation
is defined, except that all applied syntax rules should be defined.
This freedom asks for a `reshuffling' of the equations given the set of
defined syntax rules. This reshuffling is needed because for each syntax
rule a separate C function is generated. This C function must contain
the C code for {\em all} equations with the C function as outermost
function symbol in the left-hand side.  By having all equations with the
same outermost function symbol in the left-hand side together an optimal
matching automaton can be generated.  Equations with the same outermost
function symbol are moved to the corresponding syntax rule.  

\section{Technology and Architecture of the \ASmetaenv}
\label{SEC:TechnologyandArchitecture}

So far, we have explained the functionality of the \ASmetaenv\ as an
interactive development environment for \asfsdf\ specifications.
There are, however, good reasons to have a look under the hood and
understand the architecture and technologies that have been used:

\begin{itemize}

\item Both architecture and technologies are very innovative
and it is worthwhile to learn about them.

\item The \ASmetaenv\ has been constructed as a collection of
cooperating components. All of these components have merits of their
own and can be used independently of the \ASmetaenv.

\end{itemize}

If you want to reuse components of the \ASmetaenv\ or want to build
variants of it, then the following information is for you.

\subsection{Technological Background}

\paragraph{ToolBus}

A hallmark of legacy systems in general and the old \ASmetaenv\ in particular is the 
entangling of control flow and actual computation.  To separate coordination from 
computation we use the
ToolBus coordination architecture~\cite{BK98}, a programmable software bus based
on process algebra.  Coordination is expressed by a formal description of the
cooperation protocol between components while computation is expressed in
components that may be written in any language. We thus obtain 
interoperability of heterogeneous components in a (possibly) distributed
system.

\paragraph{ATerms}

Coordination protocol and components have to share data. We use
ATerms~\cite{BJKO00} for this purpose. These are trees with optional annotations on
each node.  The annotations are used to store tool-specific information
like text coordinates or color attributes. The implementation of ATerms
has two essential properties: terms are stored using maximal subterm
sharing (reducing memory requirements and making deep equality tests
very efficient) and they can be exchanged using a very dense binary encoding that
preserves sharing. As a result very large terms (with over $1,000,000$ nodes)
can be processed.

\paragraph{SGLR}

In our language-centric approach the parser is an essential tool.  We
use scannerless, generalized-LR parsing~\cite{Vis97}.  In this way we
can parse arbitrary context-free grammars, an essential property when
combining and parsing large grammars for (dialects of) real-world
languages.

\paragraph{Term rewriting}

\asfsdf\ specifications are executed as (conditional) rewrite rules. Both
interpretation and compilation (using the ASF2C compiler~\cite{BKO99}) of
these rewrite rules are supported. The compiler generates very efficient
C code that implements pattern matching and term traversal. The generated
code uses ATerms as its main data representation, and ensures a minimal
use of memory during normalization of terms.



\subsection{Architecture}

\begin{figure}
\begin{center}
\begin{iftex}
\psfig{file=newarch.eps,width=12cm}
\end{iftex}
\end{center}
\caption{\label{FIG:architecture}Architecture of the \ASmetaenv}
\end{figure}

The architecture of the \ASmetaenv\ is shown in Figure~\ref{FIG:architecture}.
It consists of a ToolBus that interconnects the following components:

\begin{itemize}
\item {\bf User interface}: the top level user-interface of the system.
      It consists primarily of a graph browser for the import graph
      of the current specification.

\item {\bf Text Editor}: a customized version of \xemacs\ for text editing.
\item {\bf Structure Editor}: a syntax-directed editor that closely cooperates
with the Text Editor.

\item {\bf Parser}:  scannerless, generalized-LR parser (SGLR) that is parametrized 
with a parse table.
\item {\bf Parsetable generator}: takes an SDF syntax definition as input and 
generates a parse table for SGLR.
\item {\bf Tree Repository}: stores all terms corresponding to specification 
modules, parse tables, user-defined terms, etc.
\item {\bf Compiler}: the ASF2C compiler.
\item {\bf Interpreter}: executes specifiations by direct interpretation.
\item {\bf Unparser generator}: generates prettyprinters.
\end{itemize}

\section{Selected Components of the \ASmetaenv}
\label{SEC:Components}

Now we will describe a selection of components that are useful for
building stand-alone tools. \emph{Be aware that the information in the
following pages is still very much in a state of flux.}

Note that all components mentioned have a Unix-style manual page,
e.g., {\tt man sglr} gives the manual page for the command {\tt sglr}.
All components also have a {\tt -h} options that gives an overview of
their command line options.

\subsection{Parse Table Generation}

Before you can parse terms over a module {\tt M} outside the
\ASmetaenv\ you have to obtain a parse table for this module.  There
are currently three ways to achieve this:

\begin{itemize}

\item Interactively using the \ASmetaenv\

via {\tt Dump Parse Table...} for module {\tt M}.

\item From the command line using the command {\tt pt-dump}.
In the background the same actions are performed as in the interactive
setting, only no user interface is activated.

For further information use {\tt pt-dump -h}.

\item From the command line using the command {\tt sdf2table}.  You should
be aware that {\tt sdf2table} needs as input the \emph{complete} grammar
of {\tt M}. This means in particular that all imports of {\tt M} should
be expanded before {\tt sdf2table} can be used. Command line tools are
available to do this, but we will not describe them here.

For further information see the manual page for {\tt sdf2table}.

\end{itemize}


\subsection{Parsing}
\label{SEC:parsingofterms}

Given a parse table {\tt M.trm.tbl} for module {\tt M},
terms can be parsed by using the command {\tt sglr}:

\begin{verbatim}
   sglr -m -p M.trm.tbl -i term.txt -o term.tree
\end{verbatim}
or, alternatively, via

\begin{verbatim}
   sglr -m -p M.trm.tbl < term.txt > term.tree
\end{verbatim}

The output of {\tt sglr} is either an error message (if the input
contains a syntax error) or a parse tree in a format called AsFixMe.\
Note that {\tt sglr} can generate parse trees in several formats:

\begin{itemize}
\item Use the flag {\tt -2} to generate AsFix2: this is the format
introduced for the latest version of \sdf.  This format is only in use
by some tools outside the \ASmetaenv.  AsFix2 is very verbose: even
lexical tokens and layout are represented as trees.  For efficiency
reasons, the \ASmetaenv\ uses the more concise format AsFixMe.

\item Use the flag {\tt -m} to generate AsFixMe: this is the preferred
parse tree format that is becoming the standard inside the \ASmetaenv.

\end{itemize}

For further information see the manual page for {\tt sglr}.

\subsection{Rewriting a Term using the Evaluator}
\label{SEC:interpretationgofterms}

In order to rewrite a term {\tt term.txt} using the \asfsdf\ evaluator {\tt asfe}
two inputs are required:

\begin{itemize}

\item The parse tree of {\tt term.txt}. See the previous paragraph how to do
this. The result is {\tt term.tree}.

\item The equations to be used for rewriting.  Select the desired
module and 
\link{use {\tt Dump Equations...}}[ (see
Section~\ref{ButtonPane})]{ButtonPane}
to dump the equations of the selected module and all its imports.
The results is a file named {\tt M.eqs}.

\end{itemize}

\begin{verbatim}
   asfe -e M.eqs < term.tree > reduct.tree 
\end{verbatim}  

\begin{iftex}
Section~\ref{SEC:unparsing} 
\end{iftex}
\begin{ifhtml}
Section \link{Unparsing}[]{SEC:unparsing}
\end{ifhtml}
explains how {\tt reduct.tree} can be converted to a textual representation.

\subsection{Rewriting a Term using a Compiled Specification}
\label{SEC:reducingofterms}

In 
\begin{iftex}
Section~\ref{compiling-specs} 
\end{iftex}
\begin{ifhtml}
Section \link{Compiling Specifications}[]{compiling-specs}
\end{ifhtml}
we explained how a given module {\tt M}
can be compiled into C code. Here we describe how to compile and
use this generated C code. The steps are as follows:

\begin{itemize}

\item Go to the directory where the \asfsdf2C compiler has generated
the C code.

\item Check whether there is a {\tt Makefile}. If this is not the case
or you expect it to be invalid, generate a new one as follows:
\begin{verbatim}
   genmakefile -m M > Makefile
\end{verbatim}
where {\tt M} is the name of the top module for which the C code was
generated.  There should also exist a file {\tt
ModuleName.module-list} in the directory with generated C code.


\item Use {\tt make} to compile the generated C code.
The result is both a library {\tt libM.a}
and an executable {\tt M}. This library can be used 
when several compiled specifications have to be combined into a single executable
or when compiled specifications have to be combined with hand-written C code.

\item

After 
\link{parsing the term}[ (as explained in
Section \ref{SEC:parsingofterms})]{SEC:parsingofterms}
that has to be reduced, this term can
be reduced via the compiled code as follows:

\begin{verbatim}
COMPILER_OUTPUT/ModuleName < term.tree > reduct.tree
\end{verbatim}

\begin{iftex}
Section~\ref{SEC:unparsing} 
\end{iftex}
\begin{ifhtml}
Section \link{Unparsing}[]{SEC:unparsing}
\end{ifhtml}
explains how {\tt reduct.tree} can be
converted to a textual representation.
\end{itemize}

\subsection{Unparsing a (Parsed/Normalized) Term}
\label{SEC:unparsing}

The unparsing of parsed/normalized terms is currently quite primitive.
It is achieved as follows:

\begin{verbatim}
   unparsePT < reduct.tree > reduct.txt
\end{verbatim}

\subsection{Applying a Function to a Term}

In many applications it is desirable to apply a function to a given term
before reducing it. A typical example is the type checking of a program: given
a parse tree {\tt T} for a program we first want to apply the typecheck
function {\tt tc} to it
before reduction. In the context of term rewriting this means first
constructing the term {\tt tc(T)} and then reducing it.

The construction of this new term is achieved by the following command:
\begin{verbatim}
   apply-function -f <name> -s <sort> -m <modulename> -i <in> -o <out> 
\end{verbatim}

A term is constructed consisting of an application of function {\tt <name>}
with result sort {\tt <sort>} defined in module {\tt <modulename>} to a term
{\tt <in>}.  The resulting term is written to {\tt <out> }.
In order to actually \emph{apply} {\tt <name>}, the term {\tt out} has to
be reduced by {\tt asfe}.

\section{Examples of Stand-alone Tools}

\subsection{A Stand-alone Boolean Tool}

A stand-alone tool for parsing and reducing Boolean terms can be created in
the following steps:
\begin{itemize}

\item Goto the directory {\tt demo/pico}.

\item Start the \ASmetaenv.

\item Create a parse table for {\tt Pico-Booleans}:
  \begin{itemize}
  \item Right click on {\tt Pico-Booleans} and select {\tt New Term}.
    
  \item Enter the text {\tt true | false}.
  \item Save this text as {\tt term.txt}.
    
  \item Push the {\tt Parse} button in the {\tt Meta-Environment} menu of the
    editor.
  \item Push the {\tt Save} button of the {\tt File} menu of the \ASmetaenv.
  \end{itemize}
  The parse table {\tt Pico-Booleans.trm.tbl} has now been created.

\item Dump the equations for {\tt Pico-Booleans}:
  \begin{itemize}
  \item Right click on  {\tt Pico-Booleans} and select {\tt Dump Equations}.
  \end{itemize}
   The equations file {\tt Pico-Booleans.eqs} has now been created.

\item Parse {\tt term.txt}:
\begin{verbatim}
  sglr -p Pico-Booleans.trm.tbl -i term.txt -o term.tree
\end{verbatim}
The result is the parse tree {\tt term.tree}

\item Reduce {\tt term.tree}:
\begin{verbatim}
  asfe -e Pico-Booleans.eqs  <term.tree >reduct.tree   
\end{verbatim}

\item Unparse {\tt reduct.tree}:
\begin{verbatim}
  unparsePT <reduct.tree >reduct.txt
\end{verbatim}

The result (in textual form) of reducing {\tt term.txt} is now {\tt reduct.txt}
\end{itemize}

Of course, the last steps can be written more concisely in a pipeline:
\begin{verbatim}
  sglr -p Pico-Booleans.trm.tbl -i term.txt | \
  asfe -e Pico-Booleans.eqs | asource > reduct.txt
\end{verbatim}

\subsection{A Stand-alone Pico Typechecker}

Now we show how to create a stand-alone typechecker for the Pico language.  We
follow the same steps as in the previous example, but there is one additional
step required: given a parsed Pico program, we have to wrap the function
symbol {\tt tcp( )} around the Pico program, before we reduce the term.  The
steps are as follows:

\begin{itemize}
\item As before, generate a parse table for {\tt Pico-syntax} (result: {\tt
    Pico-syntax.trm.tbl}) and equations for {\tt Pico-typecheck} (result: {\tt
    Pico-typecheck.eqs}).
\item Parse the input term {\tt term.txt} (result: {\tt term.tree}).
\item Wrap  {\tt tcp(  )} around {\tt term.tree}:
\begin{verbatim}
  apply-function -f tcp                       \
                 -s PICO-BOOL                 \
                 -m Pico-typecheck            \
                 -i term.tree -o tcterm.tree
\end{verbatim}
\item Reduce {\tt tcterm.tree} and unparse the result as before.

\end{itemize}


\section{Future Developments}
The \ASmetaenv\ is a system that is continuously evolving.  In this
section, we give a brief sketch of the developments that we expect in
the near future. Don't hesitate to give us feedback on these plans!

\subsection{Near Future (within 6 months)}

\begin{itemize}

\item Conversion of all tools to work with the new internal format AsFixMe.
      This will simplify several components since only support for a single
      format is needed.

\item Face lift of the toplevel user-interface. The current interface is written
      in Tcl/Tk. The new interface will be written in Java/Swing.
      Probably, we will detach the import graph viewer from the toplevel interface,
      but add it as an optional, separate view on the specification.

\item Integration of the TIDE debugging framework.  This will provide
      very sophisticated support for the debugging of, amongst others,
      \asfsdf\ specifications.

\item Integration of the pretty printer generator.

\item Overall optimizations.

\end{itemize}

\subsection{Medium Term (within 1.5 years)}

\begin{itemize}

\item Support for traversal functions in the compiler.

\item Support for origin tracking in evaluator and compiler.

\item New lexical primitives in \asfsdf\ that allow the detailed
      control of the output of transformations.

\item User-interface tailoring: make it possible to add button definitions to editors
      that can activate either specified functions or external tools.

\item Generation of stand-alone environments.

\item Support for representing and manipulating graphs.

\item Introduction of generic services like error messaging and online help.

\end{itemize}

\subsection{Long Term (more than 1.5 years)}

The long term ambition is to build a very flexible tool kit that can
be used to build many kinds of interactive systems for program
analysis and program transformation.  We currently target
domain-specific languages and software renovation as our main
application areas. Emphasis will be on:

\begin{itemize}

\item Enhancing the functionality, efficiency and reuasability of components.

\item Gradually defining a framework in which all these applications can be fit.
     
\item Carrying out case studies with as many different languages as possible
      to get feedback on the emerging framework.

\end{itemize}

\bibliographystyle{plain}
\bibliography{manual}
 
\printindex

\tableofcontents

\end{document}
