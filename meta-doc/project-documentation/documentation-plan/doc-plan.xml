<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<article>
  <title>Documentation Plan for the Meta-Environment</title>

  <authorblurb>
    <para><authorinitials>Paul</authorinitials> <authorinitials>Klint and
    Jurgen Vinju</authorinitials>, <orgname>Centrum voor Wiskunde en
    Informatica</orgname>, <address>Amsterdam, The Netherlands</address><mediaobject>
        <imageobject>
          <imagedata fileref="/ufs/paulk/GIF/cwi.gif" />
        </imageobject>
      </mediaobject></para>
  </authorblurb>

  <section>
    <title>Background</title>

    <para>The ASF+SDF Meta-Environment is an interactive development
    environment for</para>

    <para><itemizedlist>
        <listitem>
          <para>defining domain-specific languages and the tools to support
          them, and</para>
        </listitem>

        <listitem>
          <para>performing analysis and transformation existing
          software.</para>
        </listitem>
      </itemizedlist>See <uri>www.meta-environment.org</uri> for further
    details. We are planning to organize the development of this system in the
    fashion of an open source project. First of all, we will relabel the
    project as "Meta-Environment" <remark>(Is this the best name?)</remark>.
    Next we need to present our documentation in a coherent fashion. The
    purpose of the current document is twofold:</para>

    <itemizedlist>
      <listitem>
        <para>to describe a general documentation policy for the
        Meta-Environment, and</para>
      </listitem>

      <listitem>
        <para>to make a selection of tools and techniques that can be used to
        implement this policy.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Current situation</title>

    <para>Currently, we use the following mechanisms to document (parts of)
    the system:</para>

    <itemizedlist>
      <listitem>
        <para>Scientific papers that describe specific techniques or case
        studies.</para>
      </listitem>

      <listitem>
        <para>LaTex documents to describe either the whole system
        (<emphasis>e.g</emphasis>. user manual) or specific tools or libraries
        (<emphasis>e.g</emphasis>., <productname>aterm library</productname>,
        <productname>toolbus</productname>). HyperLatex is being used for
        generating web pages from LaTex files.</para>
      </listitem>

      <listitem>
        <para>POD files for manual pages.</para>
      </listitem>

      <listitem>
        <para>API documentation generated with
        <application>javadoc</application>.</para>
      </listitem>

      <listitem>
        <para>Web pages in our SEN1 twiki.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>The ideal situation</title>

    <para>Ideally, we want to present all information about our system in a
    unified manner. This includes:</para>

    <itemizedlist>
      <listitem>
        <para>High-level descriptions of purpose and architecture</para>
      </listitem>

      <listitem>
        <para>For each package we need:</para>

        <itemizedlist>
          <listitem>
            <para>A global description of purpose and main use cases.</para>
          </listitem>

          <listitem>
            <para>A manpage-like description of command-line use of that
            package.</para>
          </listitem>

          <listitem>
            <para>Description of the APIs provided by the package.</para>
          </listitem>

          <listitem>
            <para>A User manual that describes user-interface and common
            tasks.</para>
          </listitem>

          <listitem>
            <para>An implementors manual.</para>
          </listitem>

          <listitem>
            <para>Helpfiles.</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>

    <para>Other information that is primarily relevant for the website:</para>

    <itemizedlist>
      <listitem>
        <para>Download area with instructions.</para>
      </listitem>

      <listitem>
        <para>Description of the licenses we are using.</para>
      </listitem>

      <listitem>
        <para>Access to bugtracker.</para>
      </listitem>

      <listitem>
        <para>Access to SVN repository.</para>
      </listitem>

      <listitem>
        <para>Access to mailing lists.</para>
      </listitem>
    </itemizedlist>

    <para>Documentation can be organized in various manners, e.g.
    task-oriented, technology-oriented, user-oriented, developer-oriented,
    etc. Another critical decision is to use large, integrated, manuals or
    more loosely coupled information. In the following subsections a more
    loosely coupled is proposed based on <emphasis>articles</emphasis> that
    fall a number of categoteries and follow common presentation
    styles.</para>

    <section>
      <title>Getting started ...</title>

      <para><emphasis>Getting started</emphasis> articles describe howto
      download, install and run our software. They also provide pointers to
      other articles and online resources. Typical issues:</para>

      <itemizedlist>
        <listitem>
          <para>Downloading</para>
        </listitem>

        <listitem>
          <para>Installing on Linux</para>
        </listitem>

        <listitem>
          <para>Installing on MacOS</para>
        </listitem>

        <listitem>
          <para>Installing on Windows</para>
        </listitem>

        <listitem>
          <para>Executing commands</para>
        </listitem>

        <listitem>
          <para>Further reading</para>
        </listitem>
      </itemizedlist>

      <para>Characterization of <emphasis>Getting started</emphasis>
      articles:</para>

      <itemizedlist>
        <listitem>
          <para>Targeted at users with a modest technical background.</para>
        </listitem>

        <listitem>
          <para>Short: 1-2 pages.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <para />
    </section>

    <section>
      <title>How to ...</title>

      <para><emphasis>How to</emphasis> articles provide tutorials for various
      aspects of the software. These articles are written with a particular
      use-case in mind. At least the following articles should be
      present:</para>

      <itemizedlist>
        <listitem>
          <para>How to write a grammar in SDF</para>
        </listitem>

        <listitem>
          <para>How to write equations and functions in ASF</para>
        </listitem>

        <listitem>
          <para>How to fix a parse error</para>
        </listitem>

        <listitem>
          <para>How to fix an ambiguity</para>
        </listitem>

        <listitem>
          <para>How to analyse source code in ASF</para>
        </listitem>

        <listitem>
          <para>How to transform source code in ASF</para>
        </listitem>

        <listitem>
          <para>How to specify language semantics in ASF</para>
        </listitem>

        <listitem>
          <para>How to write ToolBus scripts</para>
        </listitem>

        <listitem>
          <para>How to extend the Meta-Environment</para>
        </listitem>

        <listitem>
          <para>How to use the SDF commandline tools</para>
        </listitem>

        <listitem>
          <para>How to use the ASF commandline tools</para>
        </listitem>

        <listitem>
          <para>How to prototype a domain specific language in ASF+SDF</para>
        </listitem>

        <listitem>
          <para>How to use the generic debugger TIDE</para>
        </listitem>

        <listitem>
          <para>How to write parameterized ASF+SDF modules</para>
        </listitem>
      </itemizedlist>

      <para>The above articles may be cross-linked. Especially if there is a
      hierarchical dependency such as: 'How to analyse source code in ASF',
      which references 'How to write a grammar in SDF'. We formulate a number
      of requirements for each of these <emphasis>How to's:</emphasis></para>

      <itemizedlist>
        <listitem>
          <para>Start with a summary of tasks, including a work-flow
          diagram</para>
        </listitem>

        <listitem>
          <para>Mention the necessary knowledge and experience of the
          user</para>
        </listitem>

        <listitem>
          <para>Reference <emphasis>Understanding</emphasis> documents where
          the information would become to technical</para>
        </listitem>

        <listitem>
          <para>Avoid the use of screen-shots (provide a reference to a <link
          linkend="???">Demonstration</link>)</para>
        </listitem>
      </itemizedlist>

      <para></para>
    </section>

    <section>
      <title>Demonstrations</title>

      <para>We will use interactive demonstrations (using Flash?) to
      demonstrate GUI related features. A demonstration can:</para>

      <para><itemizedlist>
          <listitem>
            <para>Provide an overview of an How to document</para>
          </listitem>

          <listitem>
            <para>Detail typical GUI related stuff (that is likely to be hard
            to guess, but also highly volatile)</para>
          </listitem>
        </itemizedlist></para>
    </section>

    <section>
      <title>Understanding ...</title>

      <para>Articles in the category <emphasis>understanding</emphasis>
      explain a fundamental concept. </para>

      <itemizedlist>
        <listitem>
          <para>Understanding the architecture of the Meta-Environment</para>
        </listitem>

        <listitem>
          <para>Understanding ATerm data representation and
          manipulation</para>
        </listitem>

        <listitem>
          <para>Understanding SDF disambiguation and filtering</para>
        </listitem>

        <listitem>
          <para>Understanding ASF traversal functions</para>
        </listitem>

        <listitem>
          <para>Understanding ASF conditional term rewriting</para>
        </listitem>

        <listitem>
          <para>Understanding SDF grammar normalization</para>
        </listitem>

        <listitem>
          <para>Understanding source code locations</para>
        </listitem>

        <listitem>
          <para>Understanding SDF scannerless generalized LR parsing</para>
        </listitem>

        <listitem>
          <para>Understanding ToolBus coordination middleware</para>
        </listitem>

        <listitem>
          <para>Understanding the Relational Calculus</para>
        </listitem>

        <listitem>
          <para>Understanding TIDE, the language independent debugging
          interface</para>
        </listitem>

        <listitem>
          <para>Understanding the connection between ASF and SDF</para>
        </listitem>

        <listitem>
          <para>Understanding SDF parse trees</para>
        </listitem>

        <listitem>
          <para>Understanding ATerm API generation</para>
        </listitem>

        <listitem>
          <para>Understanding SDF API generation</para>
        </listitem>

        <listitem>
          <para>Understanding Autobundle source code composition tool</para>
        </listitem>

        <listitem>
          <para>Understanding Sisyphus modular continuous integration
          toolkit</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Project managament ...</title>

      <para><itemizedlist>
          <para>The project management category contains information for
          developers</para>

          <listitem>
            <para>Documentation plan</para>
          </listitem>

          <listitem>
            <para>Communication plan</para>
          </listitem>

          <listitem>
            <para>Software process standard</para>
          </listitem>

          <listitem>
            <para>How to document source code</para>
          </listitem>

          <listitem>
            <para>How to use version control</para>
          </listitem>

          <listitem>
            <para>Coding standards</para>
          </listitem>

          <listitem>
            <para>Roadmaps (per main topic such as SDF, ASF, ToolBus, ATerms,
            Sisyphus)</para>
          </listitem>

          <listitem>
            <para>Testing</para>
          </listitem>
        </itemizedlist></para>
    </section>
  </section>

  <section>
    <title>How to get there?</title>

    <para>It seems that the most widely used technology for documenting
    software projects is DocBook (see, <ulink
    url="http://www.docbook.org">www.docbook.org</ulink>). Docbook is an
    XML-based standard for the semantic mark-up of text and can be used to
    generate a wide variety of output formats including HTML, PDF, man pages,
    javahelp, and eclipsehelp. This means that we can use a single source for
    our webpages, interactive help and printed documentation.</para>

    <para>The downside of using DocBook is that we have to learn yet another
    text processing technology. The number of predefined tags in DocBook is
    large (400) and the markup is more verbose than, for instance,
    LaTex.</para>

    <para>I have tried a number of DocBook editors including:</para>

    <itemizedlist>
      <listitem>
        <para>The <application>xxe</application> editor by XMLMind (<ulink
        url="http://xmlmind.com.xmleditor">www.xmlmind.com/xmleditor</ulink>).
        The standard edition of <application>xxe</application> is freely
        available.</para>
      </listitem>

      <listitem>
        <para>The Eclipse-based editor Vex (<ulink
        url="http://vex.sourceforge.net">vex.sourceforge.net</ulink>).</para>
      </listitem>

      <listitem>
        <para>The conglomerate editor (<ulink
        url="http://www.conglomerate.org">www.conglomerate.org</ulink>).</para>
      </listitem>

      <listitem>
        <para>The nXML extention of <application>emacs</application> (<ulink
        url="http://hack.oreilly.com/pub/h/2044">hacks.oreilly.com/pub/h/2044</ulink>).</para>
      </listitem>

      <listitem>
        <para>The DocBook extension of <application>openoffice</application>
        (<ulink
        url="http://xml.openoffice.org/xmerge/docbook/index.html">xml.openoffice.org/xmerge/docbook/index.html</ulink>).</para>
      </listitem>
    </itemizedlist>

    <para>Based on this experience I recommend to use
    <application>xxe</application> for wysiwyg editing and
    <application>emacs</application> for editing of the XML source.</para>
  </section>

  <section>
    <title>DocBook resources</title>

    <para>Useful links related to DocBook:</para>

    <itemizedlist>
      <listitem>
        <para><ulink url="http://www.docbook.org">www.docbook.org</ulink> (see
        in particular the DocBook wiki at <ulink
        url="http://wiki.docbook.org">wiki.docbook.org</ulink> with many
        tutorials, tools and examples)</para>
      </listitem>

      <listitem>
        <para>The DocBook project (<ulink
        url="http://docbook.sourceforge.net">docbook.sourceforge.net</ulink>)</para>
      </listitem>
    </itemizedlist>

    <para>Useful books related to DocBook are:</para>

    <itemizedlist>
      <listitem>
        <para>N. Walsh and L. Mueller, <emphasis>DocBook: The Definitive
        Guide</emphasis>, O'Reilly, 1999. See also <ulink
        url="http://docbook.org/tdg">www.docbook.org/tdg</ulink>.</para>
      </listitem>

      <listitem>
        <para>Bob Stayton, DocBook XSL, The Complete Guide, Sagehill, 2005.
        See also <ulink
        url="http://www.sagehill.net/docbookxsl">www.sagehill.net/docbookxsl</ulink>.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Plan</title>

    <itemizedlist>
      <listitem>
        <para>Switch to DocBook for writing all documentation.</para>
      </listitem>

      <listitem>
        <para>Existing documentation will be converted to DocBook.</para>
      </listitem>

      <listitem>
        <para>Existing javadoc documentation in Java will be rendered by
        javadoc Doxygen and included in the Twiki pages.</para>
      </listitem>

      <listitem>
        <para>For all non-java documentation, we will start to write Doxygen
        comment</para>
      </listitem>

      <listitem>
        <para>Use Doxygen to generate documentation for all non-java packages,
        and include in the Twiki pages.</para>
      </listitem>

      <listitem>
        <para>Add a <emphasis>doc</emphasis> target to all our packages and
        include the documentation in the website.</para>
      </listitem>

      <listitem>
        <para>Man pages and API documentation will be included in each
        package.</para>
      </listitem>

      <listitem>
        <para>Write manpages in docbook format (in the directory that contains
        the main() of the tool).</para>
      </listitem>

      <listitem>
        <para>More global documents will be included in the meta-doc
        package.</para>
      </listitem>

      <listitem>
        <para>Publish meta-doc documentation in the Twiki pages
        (continuously)</para>
      </listitem>

      <listitem>
        <para>Extend meta-studio with a java help browser. See http <ulink
        url="www.onjava.com/pub/a/onjave/2003/10/15/javahelp_docbook.html">www.onjava.com/pub/a/onjava/2003/10/15/javahelp_docbook.html</ulink></para>
      </listitem>

      <listitem>
        <para>Start write 'learning' and 'understanding' articles, after
        prioritizing them, reusing parts of the old documentation</para>
      </listitem>
    </itemizedlist>
  </section>
</article>