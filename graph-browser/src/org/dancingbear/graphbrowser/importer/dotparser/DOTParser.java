/* Generated By:JJTree&JavaCC: Do not edit this line. DOTParser.java */
package org.dancingbear.graphbrowser.importer.dotparser;

import java.io.Reader;
import java.util.Hashtable;
import java.util.Iterator;

public class DOTParser/* @bgen(jjtree) */implements DOTParserTreeConstants,
        DOTParserConstants {/* @bgen(jjtree) */
    protected JJTDOTParserState jjtree = new JJTDOTParserState();
    private static int subgraphId = 0;

    public static SimpleNode parseDot(Reader r) throws ParseException {
        return new DOTParser(r).Parse();
    }

    private static String normalizeValue(String value) {
        // Quoted string
        if (value.length() != 0 && value.charAt(0) == '"'
                && value.charAt(value.length() - 1) == '"') {
            return normalizeValue(value.substring(1, value.length() - 1));
        }
        return value;
    }

    private static int getNewSubgraphId() {
        return subgraphId++;
    }

    /**
     * ========================================================================
     * =================== DOT LANGUAGE
     * ==========================================
     * =================================================
     */
    final public SimpleNode Parse() throws ParseException {
        /* @bgen(jjtree) Parse */
        Parse jjtn000 = new Parse(JJTPARSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            Graph();
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {
                if (true)
                    return jjtn000;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte000;
                }
            }
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    // ----------------------------------------------------------------------------------------------
    // GRAPH: [struct] (digraph | graph) id '{' stmt-list '}'
    // ----------------------------------------------------------------------------------------------
    final public void Graph() throws ParseException {
        /* @bgen(jjtree) Graph */
        Graph jjtn000 = new Graph(JJTGRAPH);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token strict = null;
        Token type = null;
        Token name = null;
        Hashtable<String, String> properties = new Hashtable<String, String>();
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case DIGRAPH:
            case STRICT:
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case STRICT:
                    strict = jj_consume_token(STRICT);
                    break;
                default:
                    jj_la1[0] = jj_gen;
                }
                type = jj_consume_token(DIGRAPH);
                break;
            case GRAPH:
                type = jj_consume_token(GRAPH);
                break;
            default:
                jj_la1[1] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            name = jj_consume_token(ID);
            jj_consume_token(LBRACE);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case EDGE:
            case GRAPH:
            case NODE:
            case SUBGRAPH:
            case LBRACE:
            case ID:
                StmtList();
                break;
            default:
                jj_la1[2] = jj_gen;
            }
            jj_consume_token(RBRACE);
            jj_consume_token(0);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            properties.put("isStrict", Boolean.valueOf(strict != null).toString());
            properties.put("type", type.image);
            properties.put("name", name.image);
            jjtn000.value = properties;
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte000;
                }
            }
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    // ----------------------------------------------------------------------------------------------
    // STATEMENT LIST: [stmt[';'][stmt-list]]
    // ----------------------------------------------------------------------------------------------
    final public void StmtList() throws ParseException {
        /* @bgen(jjtree) StmtList */
        StmtList jjtn000 = new StmtList(JJTSTMTLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            Stmt();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case SEMICOLON:
                jj_consume_token(SEMICOLON);
                break;
            default:
                jj_la1[3] = jj_gen;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case EDGE:
            case GRAPH:
            case NODE:
            case SUBGRAPH:
            case LBRACE:
            case ID:
                StmtList();
                break;
            default:
                jj_la1[4] = jj_gen;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte000;
                }
            }
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    // ----------------------------------------------------------------------------------------------
    // STATEMENT: attr-stmt | node-stmt | edge-stmt subgraph | id '=' id
    //
    // note: id '=' id is replaced with IdEqStmt (former a-list)
    // ----------------------------------------------------------------------------------------------
    final public void Stmt() throws ParseException {
        /* @bgen(jjtree) Stmt */
        Stmt jjtn000 = new Stmt(JJTSTMT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            if (jj_2_1(2147483647)) {
                EdgeStmt();
            } else if (jj_2_2(2)) {
                IdeqStmt();
            } else if (jj_2_3(2)) {
                Subgraph();
            } else if (jj_2_4(2147483647)) {
                NodeStmt();
            } else if (jj_2_5(2)) {
                AttrStmt();
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte000;
                }
            }
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    // ----------------------------------------------------------------------------------------------
    // ATTRIBUTE STATEMENT: (graph | node | edge) attr-list
    // ----------------------------------------------------------------------------------------------
    final public AttrStmt AttrStmt() throws ParseException {
        /* @bgen(jjtree) AttrStmt */
        AttrStmt jjtn000 = new AttrStmt(JJTATTRSTMT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case GRAPH:
                t = jj_consume_token(GRAPH);
                break;
            case NODE:
                t = jj_consume_token(NODE);
                break;
            case EDGE:
                t = jj_consume_token(EDGE);
                break;
            default:
                jj_la1[5] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            AttrList();
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.value = normalizeValue(t.image);
            {
                if (true)
                    return jjtn000;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte000;
                }
            }
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    // ----------------------------------------------------------------------------------------------
    // ATTRIBUTE LIST: '[' [a-list] ']' [attr-list]
    // ----------------------------------------------------------------------------------------------
    final public void AttrList() throws ParseException {
        /* @bgen(jjtree) AttrList */
        AttrList jjtn000 = new AttrList(JJTATTRLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Attr a;
        try {
            jj_consume_token(LBRACKET);
            a = Attr();
            jj_consume_token(RBRACKET);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.value = a.value;
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte000;
                }
            }
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    // ----------------------------------------------------------------------------------------------
    // ATTRIBUTE: id '=' id [','] [a-list]
    // Note: this is the a-list
    // ----------------------------------------------------------------------------------------------
    final public Attr Attr() throws ParseException {
        /* @bgen(jjtree) Attr */
        Attr jjtn000 = new Attr(JJTATTR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t = null;
        Token u = null;
        Attr a = null;
        Hashtable<String, String> properties;
        try {
            t = jj_consume_token(ID);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case EQ:
                jj_consume_token(EQ);
                u = jj_consume_token(ID);
                break;
            default:
                jj_la1[6] = jj_gen;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case COMMA:
                jj_consume_token(COMMA);
                break;
            default:
                jj_la1[7] = jj_gen;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case ID:
                a = Attr();
                break;
            default:
                jj_la1[8] = jj_gen;
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            if (a == null) {
                properties = new Hashtable<String, String>();
            } else {
                properties = (Hashtable<String, String>) a.jjtGetValue();
            }

            properties.put(normalizeValue(t.image), normalizeValue(u.image));
            jjtn000.value = properties;
            {
                if (true)
                    return jjtn000;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte000;
                }
            }
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    // ----------------------------------------------------------------------------------------------
    // ID EQUALS ID STATEMENT: id '=' id
    // ----------------------------------------------------------------------------------------------
    final public IdeqStmt IdeqStmt() throws ParseException {
        /* @bgen(jjtree) IdeqStmt */
        IdeqStmt jjtn000 = new IdeqStmt(JJTIDEQSTMT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token key;
        Token value = null;
        Hashtable<String, String> stmt;
        try {
            key = jj_consume_token(ID);
            jj_consume_token(EQ);
            value = jj_consume_token(ID);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            stmt = new Hashtable<String, String>();
            if (value != null) {
                stmt.put(key.image, normalizeValue(value.image));
            } else {
                stmt.put(key.image, "true");
            }

            jjtn000.value = stmt;
            {
                if (true)
                    return jjtn000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    // ----------------------------------------------------------------------------------------------
    // NODE STATEMENT: node-id [attr-list]
    // ----------------------------------------------------------------------------------------------
    final public void NodeStmt() throws ParseException {
        /* @bgen(jjtree) NodeStmt */
        NodeStmt jjtn000 = new NodeStmt(JJTNODESTMT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        NodeId n = null;
        try {
            n = NodeId();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case LBRACKET:
                AttrList();
                break;
            default:
                jj_la1[9] = jj_gen;
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.value = n.jjtGetValue();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte000;
                }
            }
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    // ----------------------------------------------------------------------------------------------
    // NODE ID: id [port]
    // ----------------------------------------------------------------------------------------------
    final public NodeId NodeId() throws ParseException {
        /* @bgen(jjtree) NodeId */
        NodeId jjtn000 = new NodeId(JJTNODEID);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(ID);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case COLON:
                Port();
                break;
            default:
                jj_la1[10] = jj_gen;
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.value = normalizeValue(t.image);
            {
                if (true)
                    return jjtn000;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte000;
                }
            }
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    // ----------------------------------------------------------------------------------------------
    // PORT: ':' ID [ ':' compass_pt ] |':' compass_pt
    // Compass point = (n | ne | e | se | s | sw | w | nw | c | _)
    // The parser allows any identifier as compass point (DOT grammar)
    // Therefore the parser is not able to directly detect wether the ID is a
    // compass point or an ID
    // Additional checks are added to ensure that a compasspoint is one of the
    // characters
    // n | ne | e | se | s | sw | w | nw | c | _
    // ----------------------------------------------------------------------------------------------
    final public void Port() throws ParseException {
        /* @bgen(jjtree) Port */
        Port jjtn000 = new Port(JJTPORT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token portId = null;
        Token portCompassPt = null;
        try {
            jj_consume_token(COLON);
            portId = jj_consume_token(ID);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case COLON:
                jj_consume_token(COLON);
                portCompassPt = jj_consume_token(ID);
                break;
            default:
                jj_la1[11] = jj_gen;
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            Hashtable<String, String> value = new Hashtable<String, String>();

            if (portCompassPt == null) {
                String sPortId = portId.image.toString();

                // Additional check to determine if the id is a real id or a
                // compass point
                boolean isPortCompass = "N".equals(sPortId)
                        || "NE".equals(sPortId) || "E".equals(sPortId)
                        || "SE".equals(sPortId) || "S".equals(sPortId)
                        || "SW".equals(sPortId) || "W".equals(sPortId)
                        || "NW".equals(sPortId) || "C".equals(sPortId)
                        || "_".equals(sPortId);

                // If the id is an port compass instead, save as
                // port_compass_point
                // Otherwise, the id needs to be saved as a port_id
                if (isPortCompass) {
                    value.put("port_compass_point", sPortId);
                } else {
                    value.put("port_id", sPortId);
                }

            } else {
                // Store port id and compass point
                String sPortId = portId.image.toString();
                String sPortCompassPt = portCompassPt.image.toString();

                value.put("port_id", sPortId);
                value.put("port_compass_point", sPortCompassPt);
            }

            jjtn000.value = value;
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    // ----------------------------------------------------------------------------------------------
    // EDGE STATEMENT: (node-id | subgraph) edgeRHS [attr-list]
    // ----------------------------------------------------------------------------------------------
    final public void EdgeStmt() throws ParseException {
        /* @bgen(jjtree) EdgeStmt */
        EdgeStmt jjtn000 = new EdgeStmt(JJTEDGESTMT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case ID:
                NodeId();
                break;
            case SUBGRAPH:
            case LBRACE:
                Subgraph();
                break;
            default:
                jj_la1[12] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            EdgeRHS();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case LBRACKET:
                AttrList();
                break;
            default:
                jj_la1[13] = jj_gen;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte000;
                }
            }
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    // ----------------------------------------------------------------------------------------------
    // EDGE RIGHT HAND SIDE: edgeop (node-id | subgraph) [edgeRHS]
    // ----------------------------------------------------------------------------------------------
    final public EdgeRHS EdgeRHS() throws ParseException {
        /* @bgen(jjtree) EdgeRHS */
        EdgeRHS jjtn000 = new EdgeRHS(JJTEDGERHS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        EdgeOp direction = null;
        NodeId target = null;
        try {
            direction = EdgeOp();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case ID:
                target = NodeId();
                break;
            case SUBGRAPH:
            case LBRACE:
                Subgraph();
                break;
            default:
                jj_la1[14] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case EDGE_UNDIRECTED:
            case EDGE_DIRECTED:
                EdgeRHS();
                break;
            default:
                jj_la1[15] = jj_gen;
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            Hashtable<String, Object> value = new Hashtable<String, Object>();
            value.put("direction", direction.jjtGetValue());
            value.put("target", target);
            jjtn000.value = value;
            {
                if (true)
                    return jjtn000;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte000;
                }
            }
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    // ----------------------------------------------------------------------------------------------
    // EDGE OPERATOR: ('--' | '->')
    // ----------------------------------------------------------------------------------------------
    final public EdgeOp EdgeOp() throws ParseException {
        /* @bgen(jjtree) EdgeOp */
        EdgeOp jjtn000 = new EdgeOp(JJTEDGEOP);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case EDGE_UNDIRECTED:
                t = jj_consume_token(EDGE_UNDIRECTED);
                break;
            case EDGE_DIRECTED:
                t = jj_consume_token(EDGE_DIRECTED);
                break;
            default:
                jj_la1[16] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.value = t.image;
            {
                if (true)
                    return jjtn000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    // ----------------------------------------------------------------------------------------------
    // SUBGRAPH: [subgraph id] '{' stmt-list '}'| subgraph id
    // ----------------------------------------------------------------------------------------------
    final public void Subgraph() throws ParseException {
        /* @bgen(jjtree) Subgraph */
        Subgraph jjtn000 = new Subgraph(JJTSUBGRAPH);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token name = null;
        try {
            if (jj_2_6(2)) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case SUBGRAPH:
                    jj_consume_token(SUBGRAPH);
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case ID:
                        name = jj_consume_token(ID);
                        break;
                    default:
                        jj_la1[17] = jj_gen;
                    }
                    break;
                default:
                    jj_la1[18] = jj_gen;
                }
                jj_consume_token(LBRACE);
                StmtList();
                jj_consume_token(RBRACE);
            } else {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case SUBGRAPH:
                    jj_consume_token(SUBGRAPH);
                    jj_consume_token(ID);
                    break;
                default:
                    jj_la1[19] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            if (name != null) {
                jjtn000.value = name.image;
            } else {
                // Assign a name to the subgraph is name does not exists
                jjtn000.value = "dancing_bear_internal_name_"
                        + getNewSubgraphId();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte000;
                }
            }
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_1();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(0, xla);
        }
    }

    private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_2();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(1, xla);
        }
    }

    private boolean jj_2_3(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_3();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(2, xla);
        }
    }

    private boolean jj_2_4(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_4();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(3, xla);
        }
    }

    private boolean jj_2_5(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_5();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(4, xla);
        }
    }

    private boolean jj_2_6(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_6();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(5, xla);
        }
    }

    private boolean jj_3_5() {
        if (jj_3R_5())
            return true;
        return false;
    }

    private boolean jj_3R_15() {
        if (jj_scan_token(LBRACKET))
            return true;
        if (jj_3R_24())
            return true;
        if (jj_scan_token(RBRACKET))
            return true;
        return false;
    }

    private boolean jj_3R_20() {
        if (jj_3R_10())
            return true;
        return false;
    }

    private boolean jj_3R_25() {
        if (jj_scan_token(COLON))
            return true;
        if (jj_scan_token(ID))
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_28())
            jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_29() {
        if (jj_3R_7())
            return true;
        return false;
    }

    private boolean jj_3R_5() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(14)) {
            jj_scanpos = xsp;
            if (jj_scan_token(15)) {
                jj_scanpos = xsp;
                if (jj_scan_token(13))
                    return true;
            }
        }
        if (jj_3R_15())
            return true;
        return false;
    }

    private boolean jj_3_1() {
        if (jj_3R_1())
            return true;
        return false;
    }

    private boolean jj_3R_19() {
        if (jj_3R_3())
            return true;
        return false;
    }

    private boolean jj_3_4() {
        if (jj_3R_4())
            return true;
        return false;
    }

    private boolean jj_3R_21() {
        if (jj_3R_25())
            return true;
        return false;
    }

    private boolean jj_3R_22() {
        if (jj_3R_1())
            return true;
        return false;
    }

    private boolean jj_3R_6() {
        if (jj_scan_token(SUBGRAPH))
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(31))
            jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_16() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_22()) {
            jj_scanpos = xsp;
            if (jj_3_2()) {
                jj_scanpos = xsp;
                if (jj_3_3()) {
                    jj_scanpos = xsp;
                    if (jj_3R_23()) {
                        jj_scanpos = xsp;
                        if (jj_3_5())
                            return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3_6() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_6())
            jj_scanpos = xsp;
        if (jj_scan_token(LBRACE))
            return true;
        if (jj_3R_7())
            return true;
        if (jj_scan_token(RBRACE))
            return true;
        return false;
    }

    private boolean jj_3R_14() {
        if (jj_3R_15())
            return true;
        return false;
    }

    private boolean jj_3R_13() {
        if (jj_scan_token(ID))
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_21())
            jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_23() {
        if (jj_3R_4())
            return true;
        return false;
    }

    private boolean jj_3R_3() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_6()) {
            jj_scanpos = xsp;
            if (jj_3R_12())
                return true;
        }
        return false;
    }

    private boolean jj_3R_7() {
        if (jj_3R_16())
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(26))
            jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_3R_29())
            jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_11() {
        if (jj_3R_15())
            return true;
        return false;
    }

    private boolean jj_3R_18() {
        if (jj_3R_13())
            return true;
        return false;
    }

    private boolean jj_3R_4() {
        if (jj_3R_13())
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_14())
            jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_17() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(21)) {
            jj_scanpos = xsp;
            if (jj_scan_token(22))
                return true;
        }
        return false;
    }

    private boolean jj_3R_27() {
        if (jj_3R_24())
            return true;
        return false;
    }

    private boolean jj_3R_9() {
        if (jj_3R_3())
            return true;
        return false;
    }

    private boolean jj_3_3() {
        if (jj_3R_3())
            return true;
        return false;
    }

    private boolean jj_3R_10() {
        if (jj_3R_17())
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_18()) {
            jj_scanpos = xsp;
            if (jj_3R_19())
                return true;
        }
        xsp = jj_scanpos;
        if (jj_3R_20())
            jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_12() {
        if (jj_scan_token(SUBGRAPH))
            return true;
        if (jj_scan_token(ID))
            return true;
        return false;
    }

    private boolean jj_3R_2() {
        if (jj_scan_token(ID))
            return true;
        if (jj_scan_token(EQ))
            return true;
        if (jj_scan_token(ID))
            return true;
        return false;
    }

    private boolean jj_3R_8() {
        if (jj_3R_13())
            return true;
        return false;
    }

    private boolean jj_3R_1() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_8()) {
            jj_scanpos = xsp;
            if (jj_3R_9())
                return true;
        }
        if (jj_3R_10())
            return true;
        xsp = jj_scanpos;
        if (jj_3R_11())
            jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_26() {
        if (jj_scan_token(EQ))
            return true;
        if (jj_scan_token(ID))
            return true;
        return false;
    }

    private boolean jj_3R_28() {
        if (jj_scan_token(COLON))
            return true;
        if (jj_scan_token(ID))
            return true;
        return false;
    }

    private boolean jj_3R_24() {
        if (jj_scan_token(ID))
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_26())
            jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(25))
            jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_3R_27())
            jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3_2() {
        if (jj_3R_2())
            return true;
        return false;
    }

    /** Generated Token Manager. */
    public DOTParserTokenManager token_source;
    SimpleCharStream jj_input_stream;
    /** Current token. */
    public Token token;
    /** Next token. */
    public Token jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    private int jj_gen;
    final private int[] jj_la1 = new int[20];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static {
        jj_la1_init_0();
        jj_la1_init_1();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[] { 0x10000, 0x15000, 0x800ae000, 0x4000000,
                0x800ae000, 0xe000, 0x40000, 0x2000000, 0x80000000, 0x800000,
                0x8000000, 0x8000000, 0x800a0000, 0x800000, 0x800a0000,
                0x600000, 0x600000, 0x80000000, 0x20000, 0x20000, };
    }

    private static void jj_la1_init_1() {
        jj_la1_1 = new int[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, };
    }

    final private JJCalls[] jj_2_rtns = new JJCalls[6];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    /** Constructor with InputStream. */
    public DOTParser(java.io.InputStream stream) {
        this(stream, null);
    }

    /** Constructor with InputStream and supplied encoding */
    public DOTParser(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new DOTParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 20; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 20; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Constructor. */
    public DOTParser(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new DOTParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 20; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 20; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Constructor with generated Token Manager. */
    public DOTParser(DOTParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 20; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(DOTParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 20; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen)
                            c.first = null;
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    static private final class LookaheadSuccess extends Error{
		private static final long serialVersionUID = -8848423296442751459L;
    }

    final private LookaheadSuccess jj_ls = new LookaheadSuccess();

    private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source
                        .getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null)
                jj_add_error_token(kind, i);
        }
        if (jj_scanpos.kind != kind)
            return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos)
            throw jj_ls;
        return false;
    }

    /** Get the next Token. */
    final public Token getNextToken() {
        if (token.next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /** Get the specific Token. */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null)
                t = t.next;
            else
                t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private int jj_ntk() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        return (jj_ntk = jj_nt.kind);
            
    }

    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100)
            return;
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            jj_entries_loop: for (Iterator<int[]> it = jj_expentries
                    .iterator(); it.hasNext();) {
                int[] oldentry = it.next();
                if (oldentry.length == jj_expentry.length) {
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            continue jj_entries_loop;
                        }
                    }
                    jj_expentries.add(jj_expentry);
                    break jj_entries_loop;
                }
            }
            if (pos != 0)
                jj_lasttokens[(jj_endpos = pos) - 1] = kind;
        }
    }

    /** Generate ParseException. */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[45];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 20; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 45; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /** Enable tracing. */
    final public void enable_tracing() {
    }

    /** Disable tracing. */
    final public void disable_tracing() {
    }

    private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 6; i++) {
            try {
                JJCalls p = jj_2_rtns[i];
                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i) {
                        case 0:
                            jj_3_1();
                            break;
                        case 1:
                            jj_3_2();
                            break;
                        case 2:
                            jj_3_3();
                            break;
                        case 3:
                            jj_3_4();
                            break;
                        case 4:
                            jj_3_5();
                            break;
                        case 5:
                            jj_3_6();
                            break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            } catch (LookaheadSuccess ls) {
            }
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}
