/*
 * $Id$
 */
#include "asfc.idef"
#include "asfoperations.idef"
#include "asfchecker.idef"
#include "asfsdfchecker.idef"
#include "asfe.idef"
#include "addeqssyntax.idef"
#include "addapisyntax.idef"
#include "removevarsyntax.idef"
#include "error-display.tb"

process Create-Asf-Processes is
let Pid : int 
in
  create(Asfe, Pid?).
  create(AsfSdfChecker, Pid?).
  create(AsfChecker, Pid?).
  create(AsfOperations, Pid?).
  create(AddEqSyn, Pid?).
  create(AddAPISyn, Pid?).
  create(RemoveVars, Pid?).
  create(Asfc, Pid?).
  create(DisplayErrors, Pid?) .
  create(Preprocess-syntax, Pid?) .
  create(Interpret-term, Pid?) .
  create(Postprocess-semantics, Pid?) .
  create(Compile-semantics, Pid?) .
  create(Postprocess-collected-semantics, Pid?)
endlet

process Preprocess-syntax is
let
  Syntax     : term, 
  ModuleName : str,
  Msgs       : list
in
  (
    rec-msg(preprocess-syntax-hook(ModuleName?, eqs, Syntax?)).
    snd-msg(check-asfsdf(Syntax)) .
    rec-msg(messages(Msgs?)) .
    snd-msg(display-sdf-errors(Msgs)) .
    snd-msg(add-api-syntax(Syntax)).
    rec-msg(extended-syntax(Syntax?)). 
    snd-msg(add-eqs-syntax(ModuleName, Syntax)) .
    rec-msg(extended-syntax(Syntax?)) .
    snd-msg(preprocess-syntax-hook-result(ModuleName, Syntax)) .
    Syntax := no-tree
  +
    rec-msg(preprocess-syntax-hook(ModuleName?, trm, Syntax?)).
    snd-msg(check-asfsdf(Syntax)) .
    rec-msg(messages(Msgs?)) .
    snd-msg(display-sdf-errors(Msgs)) .
    snd-msg(remove-var-syntax(ModuleName, Syntax)) .
    rec-msg(changed-syntax(Syntax?)) .
    snd-msg(add-api-syntax(Syntax)).
    rec-msg(extended-syntax(Syntax?)).
    snd-msg(preprocess-syntax-hook-result(ModuleName, Syntax)) .
    Syntax := no-tree
  )*delta
endlet

process Interpret-term is
let
  Id         : int,
  Semantics  : term,
  ModuleName : str,
  Tree       : term,
  NormalForm : term,
  Errors     : list,
  Text       : str
in
  Id := process-id.
  (
    rec-msg(interpret-term-hook(ModuleName?, Semantics?, Tree?)).
    snd-note(ui-status(stat(Id, "Rewriting"))) .
    snd-msg(rewrite(ModuleName, Semantics, Tree)).
    (
      rec-msg(rewrite-result(NormalForm?)).
      snd-msg(restore-term-brackets(ModuleName, NormalForm)).
      rec-msg(restore-term-brackets-result(ModuleName, NormalForm?))
    +
      rec-msg(rewrite-text(Text?)) .
      NormalForm := quote(str(Text))
    +
      rec-msg(rewrite-errors(Errors?)).
      snd-msg(display-rewrite-errors(Errors)).
      NormalForm := error-tree
    ).
    snd-note(ui-status(endstat(Id))).
    snd-msg(interpret-term-hook-result(NormalForm))
  )*delta
endlet

process Postprocess-semantics is
let
  Semantics : term,
  Msgs      : list
in
  (
    rec-msg(postprocess-semantics-hook(Semantics?)).
    snd-msg(check-asf(Semantics)).
    rec-msg(messages(Msgs?)).
    snd-msg(display-asf-errors(Msgs)).
    snd-msg(postprocess-semantics-hook-result(Semantics))
  )*delta
endlet

process Compile-semantics is
let
  Id         : int,
  Semantics  : term,
  ModuleName : str,
  Progress   : str
in
  Id := process-id .
  subscribe(asfc-progress(<term>)) .
  (
    rec-msg(compile-semantics-hook(ModuleName?, Semantics?)).
    snd-msg(compile-module(ModuleName, Semantics)) .
    (
      rec-note(asfc-progress(Progress?)).
      snd-note(ui-status(endstat(Id))).
      snd-note(ui-status(statf(Id,"Compiling %s - %s",
                              [ModuleName, Progress])))
    )*
    rec-msg(compilation-done(ModuleName)).
    snd-note(ui-status(endstat(Id))).
    snd-msg(compile-semantics-hook-done(ModuleName))
  )*delta
endlet

process Postprocess-collected-semantics is
let
  Semantics : term,
  ModuleName : str,
  Modules   : list
in 
  (
    rec-msg(postprocess-collected-semantics-hook(ModuleName?, Modules?)).
    snd-msg(extract-equations(Modules)).
    rec-msg(extract-equations-result(Semantics?)).
    snd-msg(postprocess-collected-semantics-hook-result(ModuleName, Semantics)) 
  ) * delta
endlet

process Meta-Interface is
let
  Id : int,
  Module : str,
  ModuleNames : list
in
  Id := process-id.
  Create-Asf-Processes.
  (
    rec-msg(environment-name-hook).
    snd-msg(environment-name-hook-result("ASF+SDF Meta-Environment"))
  +
    rec-msg(library-location-hook).
    snd-msg(library-location-hook-result("__ASF_LIBRARY__"))
  +
    rec-msg(file-extension-hook(sdf)).
    snd-msg(file-extension-hook-result(".sdf"))
  +
    rec-msg(file-extension-hook(asf)).
    snd-msg(file-extension-hook-result(".asf"))
  +
    rec-msg(file-extension-hook(trm)).
    snd-msg(file-extension-hook-result(".trm"))
  +
    rec-msg(file-extensions-hook).
    snd-msg(file-extensions-hook-result(".sdf",".asf",".trm"))
  +
    rec-msg(parsetable-extension-hook(trm)) .
    snd-msg(parsetable-extension-hook-result(".trm.tbl"))
  +
    rec-msg(parsetable-extension-hook(eqs)) .
    snd-msg(parsetable-extension-hook-result(".asf.tbl"))
  +
    rec-msg(get-module-id-hook(sdf)) .
    snd-msg(get-module-id-hook-result("Sdf2")) 
  +
    rec-msg(extension-to-type-hook(".sdf")).
    snd-msg(extension-to-type-hook-result(sdf))
  +
    rec-msg(syntax-top-sort-hook(sdf)).
    snd-msg(syntax-top-sort-hook-result(sort("Module")))
  +
    rec-msg(semantics-top-sort-hook).
    snd-msg(semantics-top-sort-hook-result(sort("Equations")))
  + 
    rec-msg(invalidate-other-tables-hook(Module?, sdf)) .
    snd-msg(other-tables-invalidated-hook)
  +
    rec-msg(pre-get-all-sdf2-hook(ModuleNames?)) .
    snd-msg(pre-get-all-sdf2-hook-result(success)) 
  ) * delta
endlet

