#ifndef __TERM__UTILS__
#define __TERM__UTILS__

#include <undefined.h>
#define NO_NONTERMINAL ""

process GetTermParsetree(ModuleId: term, Path: str, Result: term?) is
let
  Error: term,
  Id: int,
  Table: term,
  ParseError: term,
  ParseResult: term,
  Pid: int,
  Summary: term,
  Text: str
in
  Id := process-id
  . GetParseTable(ModuleId, trm, Table?)
  . ReadFile(Path, Text?)
  .
  if not-equal(Text, "") then
    create(ParseText(Id, Text, Table, NO_NONTERMINAL), Pid?)
    .
    (
      (
        rec-msg(parse-tree(Id, ParseResult?))
      +
        rec-msg(parse-forest(Id, ParseResult?, Error?))
        . AddFilenameToParseError(Error, Path, ParseError?)
        . snd-msg(es-make-summary("sglr", Path, [ParseError]))
        . rec-msg(es-summary(Summary?))
        . snd-msg(ui-show-feedback-summary(Summary))
      )
      . AnnotateTree(ParseResult, Path, Result?)
      . snd-msg(ui-remove-feedback-summary("sglr", Path))
    +
      rec-msg(parse-error(Id, Error?))
      . AddFilenameToParseError(Error, Path, ParseError?)
      . snd-msg(es-make-summary("sglr", Path, [ParseError]))
      . rec-msg(es-summary(Summary?))
      . snd-msg(ui-show-feedback-summary(Summary))
      . Result := UNDEFINED
    )  
  else
    Error("TODO fix this error io-error-reading: %t\n", [Error])
  fi
endlet

process RestoreTermBrackets(ModuleId: term, Tree: term, Result: term?) is
let
  Table: term
in
  GetParseTable(ModuleId, trm, Table?)
  . 
  if not-equal(Table, UNDEFINED) then
    snd-msg(restore-brackets(Tree, Table))
    . rec-msg(brackets-restored(Result?))
  else
    Result := UNDEFINED
  fi
endlet


#endif /* __TERM__UTILS__ */
