#ifndef __ASF_ACTIONS__
#define __ASF_ACTIONS__

#include <asf-utils.tb>
#include <term-utils.tb>
#include <undefined.h>
#include <asf-pretty-print.tb>
#include <sdf-pretty.tb>
#include <sdf-utils.tb>
#include <sdf-module-utils.tb>

process PrettyPrintSdfAction(EditorId : term) is
let
  Tree : term,
  RTree : term,
  ModuleId: term,
  Path: str
in
  GetModuleId(EditorId, ModuleId?)
  . GetPath(EditorId, Path?)
  . GetSDFParseTree(ModuleId, Tree?)
  .
  if not-equal(Tree, UNDEFINED) then
    PrettyPrintSdf(Path, Tree, RTree?)
    .
    if not-equal(RTree, UNDEFINED) then
      ReplaceFocus(EditorId, RTree)
    else 
      tau
    fi
  else
    tau
  fi
endlet

process PrettyPrintAction(EditorId : term, EditorType : term, Sort: str) is
let
  Tree : term,
  RTree : term,
  ModuleId: term,
  Path: str
in
  GetModuleId(EditorId, ModuleId?)
  . GetPath(EditorId, Path?)
  . GetTermParsetree(ModuleId, Path, Tree?)
  .
  if not-equal(Tree, UNDEFINED) then
    BoxAndPrettyPrint(ModuleId, Path, Tree, RTree?)
    . 
    if not-equal(RTree, UNDEFINED) then
      ReplaceFocus(EditorId, RTree)
    else 
      tau
    fi
  else tau
  fi
endlet

process RunAction(EditorId : term) is
let
  ModuleId : term,
  RunModuleId : term,
  Path: str,
  ResultTree: term,
  Sid: term,
  Pid: int,
  File: str
in
  GetModuleId(EditorId, ModuleId?)
  . LookupFeatureModuleId(ModuleId,  "run", RunModuleId?)
  .
  if not-equal(RunModuleId, UNDEFINED) then
    File := "run.out"
    . GetPath(EditorId, Path?)
    . AddJob(Path)
    . Reduce(RunModuleId, Path, off, ResultTree?)
    . 
    if not-equal(ResultTree, UNDEFINED) then
      snd-msg(em-get-session-by-path(File))
      .
      (
        rec-msg(em-session(File, Sid?))
        . DeleteSession(Sid)
      +
        rec-msg(em-no-such-session(File))
      )
      . ActivateEditorWithTree(ResultTree, ModuleId, File)
      . create(AmbiguityHandler(ResultTree, File), Pid?)
    else
      tau
    fi
    . JobDone(Path)
  else
    tau
  fi
endlet

process ReduceAction(EditorId : term) is
let
  ModuleId : term,
  Path: str,
  ResultTree: term,
  Sid: term,
  Pid: int
in
  GetModuleId(EditorId, ModuleId?)
  . GetPath(EditorId, Path?)
  . AddJob(Path)
  . Reduce(ModuleId, Path, off, ResultTree?)
  . 
  if not-equal(ResultTree, UNDEFINED) then
    snd-msg(em-get-session-by-path("reduct.out"))
    .
    (
      rec-msg(em-session("reduct.out", Sid?))
      . DeleteSession(Sid)
    +
      rec-msg(em-no-such-session("reduct.out"))
    )
    . ActivateEditorWithTree(ResultTree, ModuleId, "reduct.out")
    . create(AmbiguityHandler(ResultTree, "reduct.out"), Pid?)
  else
    tau
  fi
  . JobDone(Path)
endlet

process DebugReduceAction(EditorId : term) is
let
  ModuleId: term,
  Path: str,
  ResultTree: term
in
  GetModuleId(EditorId, ModuleId?)
  . GetPath(EditorId, Path?)
  . Reduce(ModuleId, Path, on, ResultTree?)
  . ActivateEditorWithTree(ResultTree, ModuleId, "reduct.out")
endlet

process DumpEquationsAction(ModuleId : term) is
let
  Cancel: bool,
  Path : str
in
  PromptForFileWithExtension("Export Equations", [], ".eqs", Cancel?, Path?)
  .
  if equal(Cancel, true) then
    tau
  else
    DumpEquationsGivenFile(ModuleId, Path)
  fi
endlet

process CompileModuleAction(ModuleId : term) is
let
  Cancel: bool,
  Path : str
in
  PromptForFileWithExtension("Target C file", [], ".c", Cancel?, Path?)
  .
  if equal(Cancel, true) then
    tau
  else
    CompileModule(ModuleId, Path)
  fi
endlet

process RunAsfTestsAction(ModuleId : term) is
  TestAsfSpecification(ModuleId) 

process DebugRunAsfTestsAction(ModuleId : term) is
  snd-msg(asfe-debugging(on))
  . RunAsfTestsAction(ModuleId)

process EditorRunAsfTestsAction(EditorId : term) is
let
  ModuleId : term
in
  GetModuleId(EditorId, ModuleId?)
  . TestAsfSpecification(ModuleId)
endlet

process AsfSdfApiGenAction(ModuleId: term) is
let
  Cancel: bool,
  Path: str,
  Paths: list
in
  GetSearchPaths(Paths?)
  . PromptForFileWithExtension("Generate New Module", Paths, ".sdf", Cancel?, Path?)
  .
  if equal(Cancel, true) then
    tau
  else
    GenerateASFSDFApi(ModuleId, Path)
  fi
endlet

process PrintModuleAction(ModuleId : term) is
let
  Cancel: bool,
  Path : str
in
  PromptForFileWithExtension("Module Text (ASF+SDF)", [], ".txt", Cancel?, Path?)
  .
  if equal(Cancel, true) then
    tau
  else
    snd-msg(print-module(ModuleId, Path))
    . rec-msg(module-printed(ModuleId))
  fi
endlet

process DumpEquationsParseTableAction(ModuleId : term) is
let
  Cancel: bool,
  Path : str
in
  PromptForFileWithExtension("Export Equations ParseTable", [], ".asf.tbl", Cancel?, Path?)
  .
  if equal(Cancel, true) then
    tau
  else
    DumpParseTable(ModuleId, Path, eqs)
  fi
endlet

process EditorDumpEquationsParseTableAction(EditorId : term) is
let
  Cancel: bool,
  Path : str,
  ModuleId : term
in
  GetModuleId(EditorId, ModuleId?)
  . PromptForFileWithExtension("Export Equations ParseTable", [], ".asf.tbl", Cancel?, Path?)
  .
  if equal(Cancel, true) then
    tau
  else
    DumpParseTable(ModuleId, Path, eqs)
  fi
endlet

#endif /* __ASF_ACTIONS__ */
