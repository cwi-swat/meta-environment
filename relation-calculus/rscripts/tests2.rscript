%%
%% Test all built-in functions
%%

rel[int,int] Rel1 = {<1,10>}
rel[int,int] Rel2 = {<1,10>, <2,20>, <3,30>}
rel[int,int] Rel3 = {<1,10>, <2,20>, <3, 30>, <2, 21>, <1, 11>}
rel[int,int] Rel4 = {<1,10>, <2,20>, <3, 10>, <2, 10>, <1, 20>}

%% --- id

assert "id-1": id({}) == {}
assert "id-2": id({1,2,3}) == {<1, 1>, <2, 2>, <3, 3>}

%% --- domain

assert "domain-1" : domain({}) == {}
assert "domain-2" : domain(Rel1) == {1}
assert "domain-3" : domain(Rel2) == {1, 2, 3}
assert "domain-4" : domain(Rel3) == {1, 2, 3, 2, 1}

%% --- range

assert "range-1" : range({}) == {}
assert "range-2" : range(Rel1) == {10}
assert "range-3" : range (Rel2) == {10,20,30}
assert "range-4" : range (Rel4) == {10,20,10,10,20}
set[int] range4 = range(Rel4)

%% --- carrier

assert "carrier-1": carrier({}) == {}
assert "carrier-2": carrier(Rel2) == {1,2,3,10,20,30}
assert "carrier-3": carrier(Rel3) == {1,10,2,20,3,30,2,21,1,11}

%% --- top

rel[int,int] G = {<1,2>, <1,3>, <2,4>, <3,4>}

assert "top-1": top({}) == {}
assert "top-2": top(G) == {1}

%% --- bottom

assert "bottom-1": bottom({}) == {}
assert "bottom-2": bottom(G) == {4}


%% --- inv

assert "inv-1": inv({}) == {}
assert "inv-2": inv(Rel2) == {<10,1>,<20,2>,<30,3>}

%% --- compl

assert "compl-1": compl({}) == {}
assert "compl-2": compl(Rel1) ==  {<1, 1>, <10, 1>, <10, 10>}

%% --- domainR

assert "domainR-1": domainR({}, {}) == {}
assert "domainR-2": domainR({}, {1}) == {}
assert "domainR-3": domainR(Rel2, {}) == {}
assert "domainR-4": domainR(Rel2, {1}) == {<1,10>}
assert "domainR-5": domainR(Rel2, {3, 1}) == {<1,10>,<3,30>}
assert "domainR-6": domainR(Rel2, {7, 17}) == {}
assert "domainR-7": domainR(Rel3, {1,2}) == {<1,10>, <2,20>, <2, 21>, <1, 11>}


%% --- rangeR

assert "rangeR-1": rangeR({}, {}) == {}
assert "rangeR-2": rangeR({}, {10}) == {}
assert "rangeR-3": rangeR(Rel2, {}) == {}
assert "rangeR-4": rangeR(Rel2, {10}) == {<1,10>}
assert "rangeR-5": rangeR(Rel2, {30, 10}) == {<1,10>,<3,30>}
assert "rangeR-6": rangeR(Rel2, {7, 17}) == {}
assert "rangeR-7": rangeR(Rel4, {10}) == {<1,10>, <3, 10>, <2, 10>}

%% --- carrierR

assert "carrierR-1": carrierR({}, {}) == {}
assert "carrierR-2": carrierR({}, {10}) == {}
assert "carrierR-3": carrierR(Rel2, {}) == {}
assert "carrierR-4": carrierR(Rel2, {10, 1, 20}) == {<1,10>}
assert "carrierR-5": carrierR(Rel2, {30, 1, 3, 10}) == {<1,10>,<3,30>}
assert "carrierR-6": carrierR(Rel2, {7, 17}) == {}

%% --- domainX

assert "domainX-1": domainX({}, {}) == {}
assert "domainX-2": domainX({}, {1}) == {}
assert "domainX-3": domainX(Rel2, {}) == Rel2
assert "domainX-4": domainX(Rel2, {1}) == {<2,20>,<3,30>}
assert "domainX-5": domainX(Rel2, {3, 1}) == {<2,20>}
assert "domainX-6": domainX(Rel2, {7, 17}) == Rel2

%% --- rangeX

assert "rangeX-1": rangeX({}, {}) == {}
assert "rangeX-2": rangeX({}, {10}) == {}
assert "rangeX-3": rangeX(Rel2, {}) == Rel2
assert "rangeX-4": rangeX(Rel2, {10}) ==  {<2,20>,<3,30>}
assert "rangeX-5": rangeX(Rel2, {30, 10}) == {<2,20>}
assert "rangeX-6": rangeX(Rel2, {7, 17}) == Rel2

%% --- carrierX

assert "carrierX-1": carrierX({}, {}) == {}
assert "carrierX-2": carrierX({}, {10}) == {}
assert "carrierX-3": carrierX(Rel2, {}) == Rel2
assert "carrierX-4": carrierX(Rel2, {10, 1, 20}) == {<3,30>}
assert "carrierX-5": carrierX(Rel2, {30, 1, 3, 10}) == {<2,20>}
assert "carrierX-6": carrierX(Rel2, {7, 17}) == Rel2

%% --- first

assert "first-1": first(<1,2>) == 1

%% --- second

assert "second-2": second(<1,2>) == 2

%% --- reachX

assert "reachX-1":  reachX({}, {}, {}) == {}
assert "reachX-2":  reachX({1}, {}, G) ==  {2, 3, 4}
assert "reachX-3":  reachX({1}, {2}, G) ==  {3, 4}
assert "reachX-4":  reachX({1}, {2,3}, G) ==  {}
assert "reachX-5":  reachX({1}, {4}, G) ==  {2, 3}

%% --- reachR

assert "reachR-1":  reachR({}, {}, {}) == {}
assert "reachR-2":  reachR({1}, {}, G) ==  {}
assert "reachR-3":  reachR({1}, {1,2}, G) ==  {2}
assert "reachR-4":  reachR({1}, {1,2,3}, G) ==  {2, 3}
assert "reachR-5":  reachR({1}, {1,2,4}, G) ==  {2, 4}

assert "power0-1":   power0({}) == {{}}
assert "power0-2":   power0({1}) == {{}, {1}}
assert "power0-3":   power0({1, 2}) == {{}, {1}, {2}, {1,2}}
assert "power0-4":   power0({1, 2, 3, 4}) == {{}, {1}, {2}, {3}, {4},{1,2}, {1,3}, {1,4}, {2,3}, {2,4}, {3,4}, {1,2,3}, {1,2,4}, {1,3,4}, {2,3,4}, {1,2,3,4}}

assert "power1-1":   power1({}) == {}
assert "power1-2":   power1({1}) == {{1}}
assert "power1-3":   power1({1, 2}) == {{1}, {2}, {1,2}}
assert "power1-4":   power1({1, 2, 3, 4}) == { {1}, {2}, {3}, {4},{1,2}, {1,3}, {1,4}, {2,3}, {2,4}, {3,4}, {1,2,3}, {1,2,4}, {1,3,4}, {2,3,4}, {1,2,3,4}}


loc L = area-in-file("pico1.trm",area(5,2,6,8,0,0))

assert "loc-1":     filename(L) == "pico1.trm"
assert "loc-2":     beginline(L) == 5
assert "loc-3":     begincol(L) == 2
assert "loc-4":     endline(L) == 6
assert "loc-5":     endcol(L) == 8

assert "sum-1":		sum({})		== 0
assert "sum-2":		sum({1})		== 1
assert "sum-3":		sum({1, 2})		== 3
assert "sum-4":		sum({1, 2, 3})		== 6
assert "sum-5":		sum({1, -2, 3})		== 2
%%>>assert "sum-6":		sum({1, 1, 1})		== 3
assert "sum-6":		sum({1, 1, 1})		== 1

assert "average-1":	average({})	== 0
assert "average-2":	average({1})		== 1
assert "average-3":	average({1,3})		== 2

assert "max-1":		max({})		== 0
assert "max-2":		max({1})		== 1
assert "max-3":		max({1, 2, 3})		== 3
assert "max-4":		max({3, 2, 1})		== 3
assert "max-5":		max({3, -2, 1})		== 3
assert "max-6":		max({1, 2, 1, 2})	== 2

assert "min-1":		min({})		== 0
assert "min-2":		min({1})		== 1
assert "min-3":		min({1, 2, 3})		== 1
assert "min-4":		min({3, 2, 1})		== 1
assert "min-5":		min({3, -2, 1})		== -2
assert "min-6":		min({1, 2, 1, 2})	== 1

rel[int,int] Tree = { <1,2>, <2,3>, <2,4> }
rel[int,int] Diamond = { <1,2>, <2,3>, <2,4>, <3,5>, <4,5> }
rel[int,int] Circle = { <1,2>, <2,3>, <3,1> }

assert "paths-1": 	all-paths-from(Tree, {1}) ==
	{{<1, 2>, <2, 3>}, {<1, 2>, <2, 4>}, {<1, 2>}, {}}

assert "paths-2": 	all-paths-from(Tree, {4}) ==  {{}}

assert "paths-3":	all-paths-from(Diamond, {1}) ==
	{{<1,2>,<2,3>,<3,5>}, {<1,2>,<2,4>,<4,5>},
	 {<1,2>,<2,3>}, {<1,2>, <2,4>}, {<1, 2>}, {}}

                 
assert "unq-1" : unique({}) == {}
assert "unq-2" : unique({1,2,3}) == {1,2,3}
assert "unq-3" : unique({1,2,1,3}) == {1,2,3}
assert "unq-4" : unique({3,1,2,1,2,3}) == {1,2,3}

