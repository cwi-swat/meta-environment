
%% Reaching definitions, example ASU, p626

type stat = int
type var = str
type def  = <stat theStat, var theVar>

rel[stat,stat] PRED = { <1,2>, <2,3>, <3,4>, <4,5>, <5,6>, <5,7>, <6,7>, <7,4>}

rel[stat, var] DEFS = { <1, "i">, <2, "j">, <3, "a">, <4, "i">, <5, "j">, <6, "a">, <7, "i">}
rel[stat, var] USES = { <1, "m">, <2, "n">, <3, "u1">, <4, "i">, <5, "j">, <6, "u2">, <7, "u3">}

rel[stat, def] DEF =   {<S, <S, V>> | <stat S, var V> : DEFS}
rel[stat, def] USE =   {<S, <S, V>> | <stat S, var V> : USES}

rel[stat, def] KILL = {<S1, <S2, V>> |  <stat S1, var V> : DEFS, <stat S2, V> : DEFS, S1 != S2}

assert "kill": KILL ==  {<1, <4, "i">>, <1, <7, "i">>, <2, <5, "j">>, <3, <6, "a">>, 
                         <4, <1, "i">>, <4, <7, "i">>, <5, <2, "j">>, <6, <3, "a">>, 
                         <7, <1, "i">>, <7, <4, "i">>}

set[stat] STATEMENTS = carrier(PRED)

set[stat] predecessor(stat S) = PRED[-,S]
set[stat] successor(stat S) = PRED[S,-]

set[stat] gpredecessor(rel[stat,stat] P, stat S) = P[-,S]
set[stat] gsuccessor(rel[stat,stat] P, stat S) = P[S,-]

%% Reaching definitions

equations
  initial
	rel[stat,def] IN init {}
	rel[stat,def] OUT init DEF
  satisfy
	IN  =  {<S, D> | stat S : STATEMENTS, stat P : predecessor(S), def D : OUT[P]}
	OUT =  {<S, D> | stat S : STATEMENTS, def D : DEF[S] union  (IN[S] \ KILL[S])}

end equations

assert "IN": IN ==  {<2, <1, "i">>, <3, <2, "j">>, <3, <1, "i">>, <4, <3, "a">>, 
                     <4, <2, "j">>, <4, <1, "i">>, <4, <7, "i">>, <4, <5, "j">>, 
                     <4, <6, "a">>, <5, <4, "i">>, <5, <3, "a">>, <5, <2, "j">>, 
                     <5, <5, "j">>, <5, <6, "a">>, <6, <5, "j">>, <6, <4, "i">>, 
                     <6, <3, "a">>, <6, <6, "a">>, <7, <5, "j">>, <7, <4, "i">>, 
                     <7, <3, "a">>, <7, <6, "a">>}

assert "OUT": OUT == {<1, <1, "i">>, <2, <2, "j">>, <2, <1, "i">>, <3, <3, "a">>,
                      <3, <2, "j">>, <3, <1, "i">>, <4, <4, "i">>, <4, <3, "a">>,
                      <4, <2, "j">>, <4, <5, "j">>, <4, <6, "a">>, <5, <5, "j">>,
                      <5, <4, "i">>, <5, <3, "a">>, <5, <6, "a">>, <6, <6, "a">>,
                      <6, <5, "j">>, <6, <4, "i">>, <7, <7, "i">>, <7, <5, "j">>,
                      <7, <3, "a">>, <7, <6, "a">>}

rel[stat, def] reaching-definitions(rel[stat,var] MYDEFS, rel[stat,stat] MYPRED) = 
   MYIN
where
	set[stat] STATEMENT = carrier(MYPRED)

	rel[stat,def] MYDEF  = {<S,<S,V>> | <stat S, var V> : MYDEFS}

	rel[stat,def] MYKILL = 
 	   {<S1, <S2, V>> | <stat S1, var V> : MYDEFS, <stat S2, V> : MYDEFS, S1 != S2}

	%% The set of mutually recursive dataflow equations that has to be solved:

	equations 
	   initial
		rel[stat,def] MYIN init {}

		rel[stat,def] MYOUT init DEF
	   satisfy
       		MYIN =  {<S, D> | int S : STATEMENT, stat P : gpredecessor(PRED,S), def D : MYOUT[P]}
        	MYOUT = {<S, D> |  int S : STATEMENT, def D : MYDEF[S] union (MYIN[S] \ MYKILL[S])}
	end equations
end where

%% Live variables

equations
  initial
	rel[stat,def] LIN init {}
	rel[stat,def] LOUT init DEF
  satisfy
	LIN  =  { < S, D> | stat S : STATEMENTS,  def D : USE[S] union (LOUT[S] \ (DEF[S]))}
	LOUT =  { < S, D> | stat S : STATEMENTS,  stat Succ : successor(S), def D : LIN[Succ] }
end equations

assert "LIN": LIN ==  {<1, <6, "u2">>, <1, <7, "u3">>, <1, <5, "j">>, <1, <4, "i">>,
		       <1, <3, "u1">>, <1, <2, "n">>, <1, <1, "m">>, 
		       <2, <7, "u3">>, <2, <6, "u2">>, <2, <5, "j">>, <2, <4, "i">>, 
		       <2, <3, "u1">>, <2, <2, "n">>, 
		       <3, <7, "u3">>, <3, <6, "u2">>, <3, <5, "j">>, <3, <4, "i">>, 
		       <3, <3, "u1">>, 
		       <5, <4, "i">>, <5, <7, "u3">>, <5, <6, "u2">>, <5, <5, "j">>, 
		       <6, <5, "j">>, <6, <4, "i">>, <6, <7, "u3">>, <6, <6, "u2">>, 
		       <7, <6, "u2">>, <7, <5, "j">>, <7, <4, "i">>, <7, <7, "u3">>, 
		       <4, <7, "u3">>, <4, <6, "u2">>, <4, <5, "j">>, <4, <4, "i">>}

assert "LOUT": LOUT ==  {<1, <2, "n">>, <1, <3, "u1">>, <1, <4, "i">>, <1, <5, "j">>, 
			 <1, <7, "u3">>, <1, <6, "u2">>, 
			 <2, <3, "u1">>, <2, <4, "i">>, <2, <5, "j">>, <2, <6, "u2">>, 
			 <2, <7, "u3">>, <3, <4, "i">>, 
			 <3, <5, "j">>, <3, <6, "u2">>, <3, <7, "u3">>, 
			 <5, <6, "u2">>, <5, <7, "u3">>, <5, <4, "i">>, <5, <5, "j">>, 
			 <6, <7, "u3">>, <6, <4, "i">>, <6, <5, "j">>, <6, <6, "u2">>, 
			 <7, <4, "i">>, <7, <5, "j">>, <7, <6, "u2">>, <7, <7, "u3">>, 
			 <4, <5, "j">>, <4, <6, "u2">>, <4, <7, "u3">>, <4, <4, "i">>}