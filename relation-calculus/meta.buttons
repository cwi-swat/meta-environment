buttons([
 button("Rscript",
        [description(term-editor, menu(["Rscript", "Check"]))],
        [push-active-module,
         get-root,
	 push-string("RSCRIPT"),
	 check-sort,
	 push-term(true),
	 if-equal([
         	apply("check-rscript", "List", 1),
         	push-modulename("RscriptChecker"),
         	reduce,
         	unparse,
         	push-active-module,
         	show-list],
		[ message("Not an Rscript")
		]
         )
        ]),

button("Rscript",
          [description(term-editor, menu(["Rscript","Run"]))],
          [push-active-module,
           get-root,
           push-string("RSCRIPT"),
	   check-sort,
	   push-term(true),
	   if-equal([
           	      	apply("check-rscript", "List", 1),
           		push-modulename("RscriptChecker"),
           		reduce,
	   		dup,
           		push-string("[listitem(\"Rscript is type correct!\", area(\"\",0,0,0,0))]"),
           		parse("RscriptChecker", "List"),
           		if-equal([	push-active-module,
                     			get-root,
		     			apply("eval-rscript", "RSTORE", 1),
		     			exists("RscriptCalculator"),
		     			unpack-tree,
		     			execute-action("RscriptCalculator -t"),
                     			push-filename("RscriptCalculator.results"),
                     			push-modulename("Rstore"),
                     			close-editor,
                     			push-filename("RscriptCalculator.results"),
                     			push-modulename("Rstore"),
                     			activate-editor],

                    		[	message("Rscript contains type error(s)"),
		     			unparse,
		     			push-active-module,
		     			show-list
                    		])
		],
		[	message("Not an Rscript")
		])
           ]
       ),

button("Rscript",
          [description(term-editor, menu(["Rscript","Run with Rstore"]))],
          [push-active-module,
           get-root,
           push-string("RSCRIPT"),
	   check-sort,
	   push-term(true),
	   if-equal([
			push-filename("RSTORE.rstore"),
			dup,
			push-string(""),
			if-equal([	message("Rstore does not exist")
				 ],
				 [
					parse("Rstore", "RSTORE"),
					apply("check-rscript-with-rstore", "List", 2),
					push-modulename("RscriptChecker"),
					reduce,
					dup,
					push-string("[listitem(\"Rscript is type correct!\", area(\"\",0,0,0,0))]"),
					parse("RscriptChecker", "List"),
					if-equal([		
							push-active-module,
							get-root, 
							push-filename("RSTORE.rstore"),
							parse("RscriptCalculator", "RSTORE"),
							apply("eval-rscript-with-rstore", "RSTORE", 2),
							exists("./RscriptCalculator"),
							unpack-tree,
							message("Executing Rscript ..."),
							execute-action("./RscriptCalculator -t"),
							message("Execution of Rscript completed"),
							push-filename("RscriptCalculator.results"),
							push-modulename("Rstore"),
							close-editor,
							push-filename("RscriptCalculator.results"),
							push-modulename("Rstore"),
							activate-editor

							],
						  [	message("Rscript contains type error(s)"),
							unparse,
							push-active-module,
							show-list
						  ])
				  ])
		    ],
		    [ message("Not an Rscript")
		    ])
          ]),

 button("Rscript",
	  [description(term-editor, menu(["Rscript", "Run interpreted"]))],
          [push-active-module,
           get-root,
           push-string("RSCRIPT"),
	   check-sort,
	   push-term(true),
	   if-equal([
			apply("eval-rscript", "RSTORE", 1),
			push-modulename("RscriptCalculator"),
			reduce,
			push-filename("RscriptCalculator.results"),
			push-active-module,
			activate-editor
		    ],
		    [	message("Not an Rscript")
		    ]
	   )]),

 button("Rscript",
	  [description(term-editor, menu(["Rscript", "TestSuite interpreted"]))],
          [push-active-module,
           get-root,
	   push-string("RSCRIPT"),
	   check-sort,
	   push-term(true),
	   if-equal([
			apply("eval-rscript-testsuite", "TESTREPORT", 1),
			push-modulename("RscriptTestsuites"),
			reduce,
			push-filename("RscriptCalculator.results"),
			push-active-module,
			activate-editor
		    ],
		    [	message("Not an Rscript")
		    ]
          )]),

 button("Rstore",
  	  [description(term-editor, menu(["Rstore", "Dummy"]))],
	  [
	  message("Dummy button")
	  ]),

 button("basic/Booleans",
  	  [description(term-editor, menu(["Example", "Debug"]))],
	  [
	  message("Debug button"),
	  push-string("Een string\n"),
	  push-filename("tmp"),
	  save-text
	  ]),

  button("Rstore",
  	  [description(term-editor, menu(["Rstore", "View"]))],
          [push-active-module, get-focus,
	   push-string("BoolCon"),
	   check-sort,
	   push-term(true),
	   if-equal([	 push-active-module, get-focus,
			 apply("export-graph-bool", "Graph", 1),
			 push-modulename("ExportGraph"),
			 reduce,
			 unparse,
			 push-filename("Graph.graph"),
			 save-text
		    ],
		    [	push-active-module, get-focus,
			push-string("NatCon"),
			check-sort,
			push-term(true),
			if-equal([	push-active-module, get-focus,
					apply("export-graph-int", "Graph", 1),
					push-modulename("ExportGraph"),
					reduce,
					unparse,
					push-filename("Graph.graph"),
					save-text
				],
				[ 	push-active-module, get-focus,
					push-string("StrCon"),
					check-sort,
					push-term(true),
					if-equal([	push-active-module, get-focus,	
							apply("export-graph-str", "Graph", 1),
							push-modulename("ExportGraph"),
							reduce,
							unparse,
							push-filename("Graph.graph"),
							save-text
						 ],
						 [	push-active-module, get-focus,
							push-string("Bag[[Elem]]"),
							check-sort,
							push-term(true),
							if-equal([	push-active-module, get-focus,
									apply("export-graph-bag", "Graph", 1),
									push-modulename("ExportGraph"),
									reduce,
									unparse,
									push-filename("Graph.graph"),
									save-text
								 ],
								 [
									message("Cannot view selected focus")
								])
						])
				])
			])			 
		    ])

])
