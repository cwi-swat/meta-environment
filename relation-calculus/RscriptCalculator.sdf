module RscriptCalculator

imports Rstore ExtendedIntegers

exports

   context-free syntax

%% Main evaluation functions for Rscripts

        eval-rscript(RSCRIPT)                 			-> RSTORE
	eval-rscript-with-rstore(RSCRIPT,RSTORE)		-> RSTORE
        eval-rscript(RSCRIPT, RVAR, RSTORE)   			-> Elem

%% should be hidden

   context-free syntax

        eval-rstat(RSTAT, RSTORE)           			-> RSTORE
        eval-rstats(RSTAT*, RSTORE)          			-> RSTORE

	 "{" {GENERATOR ","}+ "::" REXP  "}"			-> REXP
 
        evalp(REXP, RSTORE)            				-> Boolean
        evali(REXP, RSTORE)            				-> Integer
        evale(REXP, RSTORE)            				-> Elem
        evalt(REXP, RSTORE)            				-> Tuple
        evalb(REXP, RSTORE)            				-> Bag[[Elem]]
        evalr(REXP, RSTORE)            				-> Bag[[Elem]]
        evalx(REXP, RSTORE)            				-> Elem
	evala(REXP, RSTORE)					-> Area

	eval-lt(RVALUE, RVALUE)					-> Boolean
	eval-le(RVALUE, RVALUE)					-> Boolean
	eval-im(RVALUE, RVALUE)					-> Elem

	eval-initvar(INITVAR*, RSTORE)				-> RSTORE

	add-element(Elem, BagIterator[[Elem]])			-> Bag[[Elem]]
	power0(BagIterator[[Elem]])				-> Bag[[Elem]]
	power1(BagIterator[[Elem]])				-> Bag[[Elem]]

	extract-rvars( {DCLRVAR ","}+ )				-> {RVAR  ","}+
	bind-formals({RVAR ","}+, {REXP ","}+, RSTORE)		-> RSTORE

        equal-elem(Elem, Elem)              			-> Boolean
	equal-rval(RVALUE, RVALUE)				-> Boolean

	eval-itern({RVAR ","}+,  BagIterator[[Elem]], RVALUE, REXP, RSTORE)	-> Elem
	store-rvars({RVAR ","}+, RVALUE, RSTORE)		-> RSTORE

	append(RVALUE, RVALUE)					-> Elem
	exists({RVAR ","}+, Bag[[Elem]], REXP, RSTORE)		-> Boolean

	solve1(Integer, RVAR, REXP, RSTORE)			-> RSTORE
	solve2(Integer, RVAR, REXP, RVAR, REXP, RSTORE)		-> RSTORE

	is-rel(BagIterator[[Elem]])				-> Boolean

%%	"get-filename"						-> RVAR {reject}
%%	"get-beginline"						-> RVAR {reject}
%%	"get-begincol"						-> RVAR {reject}
%%	"get-endline"						-> RVAR {reject}
%%	"get-endcol"						-> RVAR {reject}

	sumx(BagIterator[[Elem]], Integer)			-> Integer
	max1(BagIterator[[Elem]])				-> Integer
	max2(BagIterator[[Elem]], Integer)			-> Integer

	min1(BagIterator[[Elem]])				-> Integer
	min2(BagIterator[[Elem]], Integer)			-> Integer

	Integer "==" Integer					-> Boolean	%% Should be in Integers!

hiddens
%%  imports asf/syntax/Comments
   imports basic/Comments

   variables
        "$Rstore" [0-9\']*             -> RSTORE
        "$Val" [0-9\']*                -> RVALUE
        "$VPair*" [0-9\']*             -> { RVAR # RVALUE ","}*

        "$Var" [0-9\']*                -> RVAR
        "$Var*" [0-9\']*               -> {RVAR ","}*
        "$Var+" [0-9\']*               -> {RVAR ","}+

        "$Exp"  [0-9\']*               -> REXP
        "$Test"  [0-9\']*              -> REXP
        "$Exp*"  [0-9\']*              -> { REXP ","}*
        "$Exp+"  [0-9\']*              -> { REXP ","}+
        "$Exps"  [0-9\']*              -> { REXP ","}+

        "$Rel" [0-9\']*                -> Bag[[Elem]] 
        "$Bag" [0-9\']*                -> Bag[[Elem]]
        "$BagIter" [0-9\']*            -> BagIterator[[Elem]]

        "$Elem"   [0-9\']*             -> Elem
        "$Elem*"  [0-9\']*             -> {Elem ","}*
        "$Elem+"  [0-9\']*             -> {Elem ","}+

        "$Tuple" [0-9\']*              -> Tuple
        "$Tuple*" [0-9\']*             -> { Tuple ","}*
        "$Tuple+" [0-9\']*             -> { Tuple ","}+

        "$Gen" [0-9\']*                -> GENERATOR
        "$Gen*" [0-9\']*               -> {GENERATOR ","}*
        "$Gen+" [0-9\']*               -> {GENERATOR ","}+

        "$Rscript" [0-9\']*            -> RSCRIPT

        "$Stat" [0-9\']*               -> RSTAT
        "$Stat*" [0-9\']*              -> RSTAT*
        "$Stat+" [0-9\']*              -> RSTAT+

        "$BoolCon" [0-9\']*            -> BoolCon
        "$Bool" [0-9\']*               -> Boolean
        "$NatCon" [0-9\']*             -> NatCon
        "$Integer" [0-9\']*            -> Integer

        "$String" [0-9\']*             -> String

	"$Etype" [0-9\']*              -> REXPTYPE
	"$Etype*" [0-9\']*             -> {REXPTYPE ","}*
	"$Etype+" [0-9\']*             -> {REXPTYPE ","}+

	"$DclRvar+" [0-9\']*		-> { DCLRVAR ","}+
	"$Area" [0-9\']* 		-> Area

	"$InitVar" [0-9\']*		-> INITVAR
	"$InitVar*" [0-9\']*		-> INITVAR*
	"$InitVar+" [0-9\']*		-> INITVAR+

       "$Eq" [0-9\']*		-> EQU
       "$Eq*" [0-9\']*		-> EQU*
       "$Eq+" [0-9\']*		-> EQU+



     


