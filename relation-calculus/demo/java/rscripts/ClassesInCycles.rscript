type Class = str
type ClassUse = str
type Package = str
type Method = str
type Interface = str

rel [ ClassUse , loc ] CLASS_USES
rel [ Class , loc ] CLASSES
rel [ Package , loc ] PACKAGES
rel [ Method , loc ] METHODS
rel [ Interface , loc ] INTERFACES
rel [ Class , Interface ] IMPLEMENTS
rel [ Class , Class ]  EXTENDS_CLASS
rel [ Interface , Interface ] EXTENDS_INTERFACE

rel [Class, Class] CONTAINMENT = {<C1, C2> | <Class C1, loc l1> : CLASS_USES, <Class C2, loc l2> : CLASSES, l1 < l2 }

rel[Class,Class] CALL
rel[Class,Class] CONTAINMENT
rel[Class,Class] INHERITANCE =  EXTENDS_CLASS

%% rel[Class,Class] USE = CALL union CONTAINMENT union INHERITANCE

rel[Class,Class] USE = CALL union CONTAINMENT union INHERITANCE

bag[Class] ClassesInCycle = {C1 | <Class C1, Class C2> : USE+, C1 == C2}

int size = # ClassesInCycle

yield size

bag[Class] CLASS_NAMES = domain(CLASSES)

rel[Class,Class] USETRANS = USE+

rel[Class,bag[Class]] ClassCycles = {<C, USETRANS[C]> | Class C : CLASS_NAMES, <C, C> in USETRANS }
yield ClassCycles

