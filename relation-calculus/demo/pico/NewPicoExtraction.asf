equations

%% --- control flow of statement lists

[cf1] <$Entry1, $Rel1, $Exit1> := cflow($Stat), 
      <$Entry2, $Rel2, $Exit2> := cflow($Stat+)
       ==========================================================
       cflow($Stat ; $Stat+) = 
       < $Entry1, 
         $Rel1 union $Rel2 union ($Exit1 x $Entry2), 
         $Exit2
       >

[cf2] cflow() = <{}, {}, {}>

%% ---- control flow of individual statements

[cf3]  <$Entry, $Rel, $Exit> := cflow($Stat*),
       $Loc := get-location($Exp)
       =========================================================
       cflow(while $Exp do $Stat* od) = 
       < {$Loc},
         ({$Loc} x $Entry) union $Rel union ($Exit x {$Loc}),
         {$Loc}
       >

[cf4]  <$Entry1, $Rel1, $Exit1> := cflow($Stat*1), 
       <$Entry2, $Rel2, $Exit2> := cflow($Stat*2),
       $Loc := get-location($Exp)
       =========================================================
       cflow(if $Exp then $Stat*1 else $Stat*2 fi) =
       < {$Loc},
         ({$Loc} x $Entry1) union ({$Loc} x $Entry2) union  $Rel1 union $Rel2,
         $Exit1 union $Exit2
       > 

[default-cf]
	$Loc := get-location($Stat)
       =========================================================
        cflow($Stat) = < {$Loc}, {}, {$Loc} >

%% ---- Variable definitions: <statement-location, name>

[df1]  $Id := $Exp := $Stat
       ========================================================== 
       defs($Stat, $Rel) = $Rel union {<get-location($Stat), id2str($Id)>}

%% ---- Variable occurrences <var-location, name>

[us1]  $Id := $Exp
       ========================================================== 
       uses($Exp, $Rel) = $Rel union  {<get-location($Id), id2str($Id)>}

%% ----

[er-1] $Loc := area-in-file("", area(0,0,0,0,0,0)),
       begin $Decls $Stat+ end := $Program,
       <$Entry, $Rel, $Exit> := cflow($Stat+),
       $Rel1 := $Rel union ({$Loc} x $Entry),
       $Rval := [| type expr = loc
		   type var  = loc
		   type name = str

		   expr ROOT = $Loc

		   rel[expr,expr] PRED = $Rel1
		   rel[expr,name] DEFS = defs($Program, {})
		   rel[var,name] USES  = uses($Program, {})
		   bag[name] VARNAMES  = range(USES)

		   rel[name, var] UNINIT =
		   { <N, V>| name N : VARNAMES, 
                             var V : USES[-,N], 
			     <ROOT, expr E> : reachX({ROOT}, DEFS[-,N], PRED),
			     V <= E
		   }
                |] yield UNINIT
       ==========================================================
       uninit($Program) = convert2summary("Uninitialized variable", $Rval)

%% ----- utilities

[i2s] id2str(pico-id($Char*)) = strcon(""" $Char* """)


[cvt-1] convert2error($StrCon1, <$StrCon2, $Loc>) = error($StrCon1, [localized($StrCon2, $Loc)])

[cvt-2] convert2errorlist($StrCon, {<$String, $Loc>, $Elem*}) = 
	convert2error($StrCon, <$String, $Loc>),  convert2errorlist($StrCon, {$Elem*})

[cvt-3] convert2errorlist($StrCon, {}) = 

[cvt-4]	convert2summary($StrCon, $Elem) = 
        summary("PicoQuery", "PicoQuery", [convert2errorlist($StrCon, $Elem)])

[cvt-5]	convert2summary($StrCon, $Summary) = $Summary


