equations

[to1] type-of(Integer) = int
[to2] type-of(Boolean) = bool

[eqt1] #Etype == #Etype = true

[default-eqt]
	#Etype1 == #Etype2 = false

[ite1]
      if true then Tenv1 else Tenv2 fi = Tenv1

[ite2]
      if false then Tenv1 else Tenv2 fi = Tenv2

[te1] <Table, [Error*]> + Error = <Table, [Error*;
Error]>

[te2] lookup(<Table, Errors>, #Var) = lookup(Table, #Var)
[te3] store(<Table, Errors>, #Var, #Etype) = <store(Table, #Var, #Etype), Errors>
[te4] delete(<Table, Errors>, #Var)  = <delete(Table, #Var), Errors>

[cb1] type-of(Elem) = #Etype,
      check-bag-con({Elem+}, Tenv) = <bag[#Etype], Tenv'>
      ===========================================
      check-bag-con({Elem, Elem+}, Tenv) = <bag[#Etype], Tenv'>

[cb2] check-bag-con({Elem}, Tenv) = <bag[type-of(Elem)], Tenv>

[cb3] check-bag-con({}, Tenv) = <empty, Tenv>

[default-cb]
      check-bag-con(Bag,Tenv) = < undefined, Tenv + Bag cannot be typed >


[cbe1] check(#Exp, Tenv) = <#Etype, Tenv'>,
       check-bag-exp({ #Exp+ }, Tenv') = <bag[#Etype], Tenv''>
       ==========================================
       check-bag-exp({ #Exp, #Exp+ }, Tenv) = <bag[#Etype], Tenv''>

[cbe1] check(#Exp, Tenv) = <#Etype, Tenv'>
       ==========================================
       check-bag-exp({ #Exp }, Tenv) = <bag[#Etype], Tenv'>

[cbe1] check-bag-exp(EmptyBag, Tenv) = <empty, Tenv>

[default-cbe]
	check-bag-exp({ #Exp, #Exp* } , Tenv) = <undefined, Tenv + #Exp cannot be typed>

[cre1] check(#TExp, Tenv) = <<#Etype1,#Etype2>, Tenv'>,
       check-rel-exp({ #TExp+ }, Tenv') = <rel[#Etype1,#Etype2], Tenv''>
       ==========================================
       check-rel-exp({ #TExp, #TExp+ }, Tenv) = <rel[#Etype1,#Etype2], Tenv''>

[cre1] check(#TExp, Tenv) = <<#Etype1,#Etype2>, Tenv'>
       ==========================================
       check-rel-exp({ #TExp }, Tenv) = <rel[#Etype1,#Etype2], Tenv'>


[cre1] check-rel-exp(EmptyRel, Tenv) = <empty, Tenv>

[default-cre]
	check-rel-exp(#Exp, Tenv) = <undefined, Tenv + #Exp cannot be typed>

[cr1] type-of(Elem1) = #Etype1,
      type-of(Elem2) = #Etype2,
      check-rel-con({#Tuple+}, Tenv) = <rel[#Etype1,#Etype2], Tenv'>
      ===========================================
      check-rel-con({<Elem1, Elem2>, #Tuple+}, Tenv) = <rel[#Etype1,#Etype2], Tenv'>

[cr2] check-rel-con({<Elem1,Elem2>}, Tenv) = <rel[type-of(Elem1),type-of(Elem2)], Tenv>

[cr3] check-rel-con({}, Tenv) = <empty, Tenv>

[default-rl]
      check-rel-con(Rel, Tenv) = <undefined, Tenv + Rel cannot be typed>


%% --- Check Elementary values

[check-bool] 
      check(Boolean, Tenv) = <bool, Tenv>

[check-int] 
      check(Integer, Tenv) = <int, Tenv>

[check-q-elem] 
      check('Elem, Tenv) = <type-of(Elem), Tenv>

[check-q-bag] 
      check('Bag, Tenv) = check-bag-con(Bag, Tenv)

[check-q-rel] 
      check('Rel, Tenv) =  check-rel-con(Rel, Tenv)

[check-var1] 
      lookup(Tenv, #Var) = #Etype
      ============================================
      check(#Var, Tenv) = <#Etype, if #Etype == not-in-table then Tenv + Undeclared #Var else Tenv fi>

[check-bag] 
      check({ #Exp* }, Tenv) = check-bag-exp({ #Exp* }, Tenv)

[check-rel1] 
      check(#Exp1, Tenv) = <#Etype1, Tenv'>, 
      check(#Exp2, Tenv') = <#Etype2, Tenv''>
      ============================================
      check(<#Exp1, #Exp2>, Tenv) = <<#Etype1, #Etype2>, Tenv''>

[check-rel2] 
      check({ #TExp* }, Tenv) = check-rel-exp({ #TExp* }, Tenv)

%% --- Check Operators

[check-and] 
      #Exp = #Exp1 and #Exp2,
      check(#Exp1, Tenv) = <#Etype1, Tenv'>, 
      check(#Exp2, Tenv') = <#Etype2, Tenv''>,
      compat(#Exp, #Etype1 and #Etype2, Tenv'') = <#Etype3, Tenv'''>
      ===========================================
      check(#Exp, Tenv) = <bool, Tenv'''>

[compat-and] 
      compat(#Exp, bool and bool, Tenv) = <bool, tenv>

[check-or] 
      #Exp = #Exp1 or #Exp2,
      check(#Exp1, Tenv) = <#Etype1, Tenv'>, 
      check(#Exp2, Tenv') = <#Etype2, Tenv''>,
      compat(#Exp, #Etype1 or #Etype2, Tenv'') = <#Etype3, Tenv'''>
      ===========================================
      check(#Exp, Tenv) = <bool, Tenv'''>

[compat-or] 
      compat(#Exp, bool or bool, Tenv) = <bool, Tenv>

[check-not] 
      check(#Exp, Tenv) = <bool, Tenv'>
      ===========================================
      check(not #Exp, Tenv) = <bool, Tenv'>

[check-elem] 
      #Exp = #Exp1 elem #Exp2,
      check(#Exp1, Tenv) = <#Etype1, Tenv'>, 
      check(#Exp2, Tenv') = <#Etype2, Tenv''>,
      compat(#Exp, #Etype1 elem #Etype2, Tenv'') = <#Etype3, Tenv'''>
      ===========================================
      check(#Exp, Tenv) = <bool, Tenv'''>

[compat-elem1] 
      compat(#Exp, #Etype elem bag[#Etype], Tenv) = <bool, Tenv>
[compat-elem2] 
      compat(#Exp, <#Etype1, #Etype2> elem rel[#Etype1,#Etype2], Tenv) = <bool, Tenv>

[check-eq] 
      #Exp = #Exp1 == #Exp2,
      check(#Exp1, Tenv) = <#Etype1, Tenv'>, 
      check(#Exp2, Tenv') = <#Etype2, Tenv''>,
      compat(#Exp, #Etype1 == #Etype2, Tenv'') = <#Etype3, Tenv'''>
      ===========================================
      check(#Exp, Tenv) = <bool, Tenv'''>

[compat-eq]
      compat(#Exp, #Etype == #Etype, Tenv) = <bool, Tenv>

[check-le] 
      #Exp = #Exp1 <= #Exp2, 
      check(#Exp1, Tenv) = <#Etype1, Tenv'>, 
      check(#Exp2, Tenv') = <#Etype2, Tenv''>,
      compat(#Exp, #Etype1 <= #Etype2, Tenv'') = <#Etype3, Tenv'''>
      ===========================================
      check(#Exp, Tenv) = <bool, Tenv'''>

[compat-le]
      compat(#Exp, #Etype <= #Etype, Tenv) = <bool, Tenv>

[check-lt] 
      #Exp = #Exp1 < #Exp2,
      check(#Exp1, Tenv) = <#Etype1, Tenv'>, 
      check(#Exp2, Tenv') = <#Etype2, Tenv''>,
      compat(#Exp, #Etype1 < #Etype2, Tenv'') = <#Etype3, Tenv'''>
      ===========================================
      check(#Exp, Tenv) = <bool, Tenv'''>

[compat-lt]
      compat(#Exp, #Etype < #Etype, Tenv) = <bool, Tenv>

[check-ge]
      #Exp = #Exp1 >= #Exp2,
      check(#Exp1, Tenv) = <#Etype1, Tenv'>, 
      check(#Exp2, Tenv') = <#Etype2, Tenv''>,
      compat(#Exp, #Etype1 >= #Etype2, Tenv'') = <#Etype3, Tenv'''>
      ===========================================
      check(#Exp, Tenv) = <bool, Tenv'''>

[compat-ge]
      compat(#Exp, #Etype >= #Etype, Tenv) = <bool, Tenv>

[check-gt]
      #Exp = #Exp1 > #Exp2,
      check(#Exp1, Tenv) = <#Etype1, Tenv'>, 
      check(#Exp2, Tenv) = <#Etype2, Tenv''>,
      compat(#Exp, #Etype1 > #Etype2, Tenv'') = <#Etype3, Tenv'''>
      ===========================================
      check(#Exp, Tenv) = <bool, Tenv'''>

[compat-gt]
      compat(#Exp, #Etype > #Etype, Tenv) = <bool, Tenv>

[check-union]
      #Exp = #Exp1 union #Exp2,
      check(#Exp1, Tenv) = <#Etype1, Tenv'>, 
      check(#Exp2, Tenv') = <#Etype2, Tenv''>,
      compat(#Exp, #Etype1 union #Etype2,Tenv'') = <#Etype3, Tenv'''>
      ===========================================
      check(#Exp, Tenv) = <#Etype3, Tenv'''>

[cu1] compat(#Exp, #Etype              union #Etype, Tenv)              = <bag[#Etype], Tenv>
[cu2] compat(#Exp, bag[#Etype]         union bag[#Etype], Tenv)         = <bag[#Etype], Tenv>
[cu3] compat(#Exp, bag[#Etype]         union #Etype, Tenv)              = <bag[#Etype], Tenv>
[cu4] compat(#Exp, #Etype              union bag[#Etype], Tenv)         = <bag[#Etype], Tenv>
[cu5] compat(#Exp, rel[#Etype1,#Etype2] union rel[#Etype1,#Etype2], Tenv) = <rel[#Etype1,#Etype2], Tenv>
[cu6] compat(#Exp, <#Etype1,#Etype2>    union rel[#Etype1,#Etype2], Tenv) = <rel[#Etype1,#Etype2], Tenv>
[cu7] compat(#Exp, rel[#Etype1,#Etype2] union <#Etype1,#Etype2>, Tenv)    = <rel[#Etype1,#Etype2], Tenv>
[cu8] compat(#Exp, <#Etype1,#Etype2>    union <#Etype1,#Etype2>, Tenv)    = <rel[#Etype1,#Etype2], Tenv>

[c03] 
      #Exp = #Exp1 inter #Exp2,
      check(#Exp1, Tenv) = <#Etype1, Tenv'>, 
      check(#Exp2, Tenv') = <#Etype2, Tenv''>,
      compat(#Exp, #Etype1 inter #Etype2, Tenv'') = <#Etype3, Tenv'''>
      ===========================================
      check(#Exp, Tenv) = <#Etype3, Tenv'''>

[xxx] compat(#Exp, #Etype              inter #Etype, Tenv)              = <bag[#Etype], Tenv>
[xxx] compat(#Exp, bag[#Etype]         inter bag[#Etype], Tenv)         = <bag[#Etype], Tenv>
[xxx] compat(#Exp, bag[#Etype]         inter #Etype, Tenv)              = <bag[#Etype], Tenv>
[xxx] compat(#Exp, #Etype              inter bag[#Etype], Tenv)         = <bag[#Etype], Tenv>
[xxx] compat(#Exp, rel[#Etype1,#Etype2] inter rel[#Etype1,#Etype2], Tenv) = <rel[#Etype1,#Etype2], Tenv>
[xxx] compat(#Exp, <#Etype1,#Etype2>    inter rel[#Etype1,#Etype2], Tenv) = <rel[#Etype1,#Etype2], Tenv>
[xxx] compat(#Exp, rel[#Etype1,#Etype2] inter <#Etype1,#Etype2>, Tenv)    = <rel[#Etype1,#Etype2], Tenv>
[xxx] compat(#Exp, <#Etype1,#Etype2>    inter <#Etype1,#Etype2>, Tenv)    = <rel[#Etype1,#Etype2], Tenv>

[c03] #Exp = #Exp1 \ #Exp2,
      check(#Exp1, Tenv) = <#Etype1, Tenv'>, 
      check(#Exp2, Tenv') = <#Etype2, Tenv''>,
      compat(#Exp, #Etype1 \ #Etype2, Tenv'') = <#Etype3, Tenv'''>
      ===========================================
      check(#Exp, Tenv) = <#Etype3, Tenv'''>

[xxx] compat(#Exp, #Etype              \ #Etype, Tenv)              = <bag[#Etype], Tenv>
[xxx] compat(#Exp, bag[#Etype]         \ bag[#Etype], Tenv)         = <bag[#Etype], Tenv>
[xxx] compat(#Exp, bag[#Etype]         \ #Etype, Tenv)              = <bag[#Etype], Tenv>
[xxx] compat(#Exp, #Etype              \ bag[#Etype], Tenv)         = <bag[#Etype], Tenv>
[xxx] compat(#Exp, rel[#Etype1,#Etype2] \ rel[#Etype1,#Etype2], Tenv) = <rel[#Etype1,#Etype2], Tenv>
[xxx] compat(#Exp, <#Etype1,#Etype2>    \ rel[#Etype1,#Etype2], Tenv) = <rel[#Etype1,#Etype2], Tenv>
[xxx] compat(#Exp, rel[#Etype1,#Etype2] \ <#Etype1,#Etype2>, Tenv)    = <rel[#Etype1,#Etype2], Tenv>
[xxx] compat(#Exp, <#Etype1,#Etype2>    \ <#Etype1,#Etype2>, Tenv)    = <rel[#Etype1,#Etype2], Tenv>

[c03] #Exp = #Exp1 o #Exp2,
      check(#Exp1, Tenv) = <#Etype1, Tenv'>, 
      check(#Exp2, Tenv') = <#Etype2, Tenv''>,
      compat(#Exp, #Etype1 o #Etype2, Tenv'') = <#Etype3, Tenv'''>
      ===========================================
      check(#Exp, Tenv) = <#Etype3, Tenv'''>

[xxx] compat(#Exp, rel[#Etype1,#Etype2] o rel[#Etype2,#Etype3], Tenv) = <rel[#Etype1,#Etype3], Tenv>

[c03] #Exp = #Exp1 x #Exp2,
      check(#Exp1, Tenv) = <#Etype1, Tenv'>, 
      check(#Exp2, Tenv') = <#Etype2, Tenv''>,
      compat(#Exp, #Etype1 x #Etype2, Tenv'') = <#Etype3, Tenv'''>
      ===========================================
      check(#Exp, Tenv) = <#Etype3, Tenv'''>

[xxx] compat(#Exp, bag[#Etype1] x bag[#Etype2], Tenv) = <rel[#Etype1,#Etype2], Tenv>
[xxx] compat(#Exp, #Etype1 x bag[#Etype2], Tenv) = <rel[#Etype1,#Etype2], Tenv>
[xxx] compat(#Exp, bag[#Etype1] x #Etype2, Tenv) = <rel[#Etype1,#Etype2], Tenv>
[xxx] compat(#Exp, #Etype1 x #Etype2, Tenv) = <rel[#Etype1,#Etype2], Tenv>

[c03] #Exp = #Exp1 . #Exp2,
      check(#Exp1, Tenv) = <#Etype1, Tenv'>, 
      check(#Exp2, Tenv') = <#Etype2, Tenv''>,
      compat(#Exp, #Etype1 . #Etype2, Tenv'') = <#Etype3, Tenv'''>
      ===========================================
      check(#Exp1 . #Exp2, Tenv) = <#Etype3, Tenv'''>

[xxx] compat(#Exp, rel[#Etype1,#Etype2] . #Etype2, Tenv)             = <bag[#Etype1], Tenv>
[xxx] compat(#Exp, rel[#Etype1,#Etype2] . bag[#Etype2], Tenv)        = <bag[#Etype1], Tenv>
[xxx] compat(#Exp, #Etype1             . rel[#Etype1,#Etype2], Tenv) = <bag[#Etype2], Tenv>
[xxx] compat(#Exp, bag[#Etype1]        . rel[#Etype1,#Etype2], Tenv) = <bag[#Etype2], Tenv>

[c03] #Exp = #Exp1 +,
      check(#Exp1, Tenv) = <#Etype, Tenv'>,
      compat(#Exp, #Etype +, Tenv') = <#Etype1, Tenv''>
      ===========================================
      check(#Exp, Tenv) = <#Etype1, Tenv''>

[xxx] compat(#Exp, rel[#Etype,#Etype]+, Tenv) = <rel[#Etype, #Etype], Tenv>

[c03] #Exp = #Exp1 *,
      check(#Exp1, Tenv) = <#Etype, Tenv'>,
      compat(#Exp, #Etype *, Tenv') = <#Etype1, Tenv''>
      ===========================================
      check(#Exp, Tenv) = <#Etype1, Tenv''>

[xxx] compat(#Exp, rel[#Etype,#Etype] *, Tenv) = <rel[#Etype, #Etype], Tenv>

%% Check value formers

[rt1] check(#Exp, Tenv) = <#Etype', Tenv'>
      =========================================
      require-type(#Exp, #Etype, Tenv) = 
      if #Etype == #Etype' then Tenv' else Tenv' + #Exp should have type #Etype fi

[rbt1]
      store(Tenv, #Var, #Etype) = Tenv'
      ==========================================
      require-bag-type(#Exp, #Var, bag[#Etype], Tenv) = Tenv'

[default-rbt]
      store(Tenv, #Var, undefined) = Tenv'
      ==========================================
      require-bag-type(#Exp, #Var, #Etype, Tenv) = Tenv' + #Exp should be of type bag

[rbt1]
      store(Tenv, #Var1, #Etype1) = Tenv',
      store(Tenv', #Var2, #Etype2) = Tenv''
      ==========================================
      require-rel-type(#Exp, #Var1, #Var2, rel[#Etype1, #Etype2], Tenv) = Tenv''

[default-rbt]
      store(Tenv, #Var1, undefined) = Tenv',
      store(Tenv', #Var2, undefined) = Tenv''
      ==========================================
      require-rel-type(#Exp, #Var1, #Var2, #Etype, Tenv) = Tenv'' + #Exp should be of type rel


[af1] check(#Exp, Tenv) = <#Etype, Tenv'>,
      require-bag-type(#Exp, #Var, #Etype, Tenv') = Tenv''
      ==========================================
      add-from(#Var in #Exp, #From*, Tenv) = add-from(#From*, Tenv'')

[af2] check(#Exp, Tenv) = <#Etype, Tenv'>, 
      require-rel-type(#Exp, #Var1, #Var2, #Etype, Tenv') = Tenv''
      ==========================================
      add-from(<#Var1, #Var2> in #Exp, #From*, Tenv) = add-from(#From*, Tenv'')

[af3] add-from( , Tenv) = Tenv

[default-af]
      add-from(#From, #From*, Tenv) = Tenv + #From cannot be typed

[df1] delete(Tenv, #Var) = Tenv'
      ==========================================
      del-from(#Var in #Exp, #From*, Tenv) = del-from(#From*, Tenv')

[df2] delete(Tenv, #Var1) = Tenv', delete(Tenv', #Var2) = Tenv''
      ==========================================
      del-from(<#Var1, #Var2> in #Exp, #From*, Tenv) = del-from(#From*, Tenv'')

[df3] del-from( , Tenv) = Tenv

[ct1] container-type(<#Etype1,#Etype2>) = rel[#Etype1, #Etype2]
[default-ct1]
      container-type(#Etype) = bag[#Etype]

[check-valueformer1] 
      check({ #Var in #Exp1 | #Exp2}, Tenv) =  
      check({ #Var in #Exp1 | #Exp2 | #Var}, Tenv)
 
[check-valueformer2] 
      check({ <#Var1,#Var2> in #Exp1 | #Exp2}, Tenv) =  
      check({ <#Var1,#Var2> in #Exp1 | #Exp2 | <#Var1,#Var2>}, Tenv)

[check-valueformer3] 
      add-from(#From+, Tenv) = Tenv',
      require-type(#Exp1, bool, Tenv') = Tenv'',
      check(#Exp2, Tenv'') = <#Etype, Tenv'''>,
      container-type(#Etype) = #Etype',
      del-from(#From+, Tenv''') = Tenv''''
      ======================================
      check({#From+ | #Exp1 | #Exp2}, Tenv) = <#Etype', Tenv''''>

%% --- Check function applications

[ca1] check(#Exp, Tenv) = <#Etype, Tenv'>,
      collect-actuals(#Exp*, Tenv') = < [#Etype*], Tenv''>
      ===========================================
      collect-actuals(#Exp, #Exp*, Tenv) = <[#Etype, #Etype*], Tenv''>

[ca2] collect-actuals( , Tenv) = <[], Tenv>

[check-appl] 
      collect-actuals(#Exp*, Tenv) = <[#Etype*], Tenv'>
      ============================================
      check(#Var ( #Exp* ), Tenv) = find-result-type(#Var, [#Etype*], Tenv')

%% check-not-defined

[cnd] check-not-defined(#Var, Tenv) = 
      if lookup(Tenv, #Var) == not-in-table then Tenv else  Tenv + #Var redeclared fi

%% add-formals

[af1] store(Tenv, #Var, #Etype) = Tenv',
      add-formals([#DclVar*], Tenv') = Tenv''
      ===========================================
      add-formals([#Etype #Var, #DclVar*], Tenv) = Tenv''

[af2] add-formals([], Tenv) = Tenv

%% del-formals

[df1] delete(Tenv, #Var) = Tenv',
      del-formals([#DclVar*], Tenv') = Tenv''
      ===========================================
      del-formals([#Etype #Var, #DclVar*], Tenv) = Tenv''

[df2] del-formals([], Tenv) = Tenv

%% ext-types

[et1] ext-types([#Etype #Var, #DclVar*]) = #Etype, ext-types([#DclVar*])
[et2] ext-types([]) = 

%% --- Check var and function declarations

[check-vardef1]
      check-stat(#Etype #Var, Tenv) = store(Tenv, #Var, #Etype)

[check-vardef2] 
      check-stat(#Etype #Var = #Exp, Tenv) =  check-stat(#Etype #Var() = #Exp, Tenv)

[check-fundef] 
      check-not-defined(#Var, Tenv) = Tenv1,
      add-formals([#DclVar*], Tenv1) = Tenv2,
      require-type(#Exp, #Etype, Tenv2) = Tenv3,      
      del-formals([#DclVar*], Tenv3) = Tenv4, 
      store(Tenv4, #Var, fun ext-types([#DclVar*]) to #Etype) = Tenv5 
      ===========================================
      check-stat(#Etype #Var (#DclVar*) = #Exp, Tenv) = Tenv5

[xxx] fun to #Etype = #Etype

%% -- Default cases for check and compat

[default-check]
      check(#Exp, Tenv) = <undefined, Tenv +  #Exp cannot be typed>

[xxx]  compat(#Exp, undefined Op #Etype2, Tenv) = <undefined, Tenv>
[xxx]  compat(#Exp, #Etype1 Op undefined, Tenv) = <undefined, Tenv>
[default-xxx]
      compat(#Exp, #Etype1 Op #Etype2, Tenv) = <undefined, Tenv + Incompatible arguments in #Exp>

%% -- Check script

[xxx] check-rscript(Stat*) = check-rscript(Stat*, <built-ins, []>)
[xxx] check-rscript(Stat Stat*, Tenv) = check-rscript(Stat*, check-stat(Stat, Tenv))
[xxx] check-rscript( , Tenv) = Tenv

%% Find result type of a function, given list of argument types

[xxx] lookup(Tenv, #Var) = not-in-table
      ==================================
      find-result-type(#Var, [#Etype*], Tenv) = <undefined, Tenv + Undeclared #Var>

[xxx] lookup(Tenv, #Var) = fun #Etype*2 to #Etype,
      match-types([#Etype*2],  [#Etype*1], new-table) = <true, Table>
     ===========================================
      find-result-type(#Var, [#Etype*1], Tenv) = <substitute(#Etype, Table), Tenv>

[default-xxx]
      find-result-type(#Var, [#Etype*1], Tenv) = <undefined, Tenv + No definition for #Var with argument [#Etype*1]>

%% is-var 

[iv1]  is-var(#Var) = true
[default-iv] 
       is-var(#Etype) = false

%% --- match types

[xxx]  is-var(#Etype) = false
       ================================================
       match-types(#Etype, #Etype, Table) = <true, Table>

[xxx]  lookup(Table, #Var) = not-in-table
      ==================================
       match-types(#Var, #Etype, Table) = <true, store(Table, #Var, #Etype)>

[xxx]  lookup(Table, #Var) = #Etype
      ==================================
       match-types(#Var, #Etype, Table) = <true, Table>

[xxx]  match-types(#Etype1, #Etype2, Table) = <true, Table'>
       ===================================================
       match-types(bag[#Etype1], bag[#Etype2], Table) =  <true, Table'>

[xxx]  match-types(#Etype1, #Etype3, Table) = <true, Table'>,
       match-types(#Etype2, #Etype4, Table') = <true, Table''>
       ===================================================
       match-types(rel[#Etype1, #Etype2], rel[#Etype3, #Etype4], Table) =  <true, Table''>

[xxx]  match-types(#Etype1, #Etype2, Table) = <true, Table'>,
       match-types([#Etype*1], [#Etype*2], Table') = <true, Table''>
       ===================================================
       match-types([#Etype1, #Etype*1], [#Etype2, #Etype*2], Table) = <true, Table''>

[xxx]  match-types([], [], Table) = <true, Table>

[default-xxx]
	match-types(#Etype1, #Etype2, Table) = <false, Table>

%% --- Substitute type

[xxx]  substitute(#Var, Table) = lookup(Table, #Var)
[xxx]  substitute(bag[#Etype], Table) = bag[substitute(#Etype, Table)]
[xxx]  substitute(rel[#Etype1,#Etype2], Table) = 
       rel[substitute(#Etype1, Table),substitute(#Etype2, Table)]
[default-xxx]
       substitute(#Etype, Table) = #Etype  

%% -- The built-in functions

[bi-1]  built-ins = [
%%		<id, fun T1 to bag[T1]>,
      		<domain, fun rel[T1,T2] to bag[T1]>,
     		<range, fun rel[T1,T2] to bag[T2]>,
       		<carrier, fun rel[T,T] to bag[T]>,
		<top, fun rel[T1,T2] to bag[T2]>,
		<bottom, fun rel[T1,T2] to bag[T1]>,
       		<inv, fun rel[T1,T2] to rel[T2,T1]>,
		<compl, fun rel[T1, T2] to rel[T1,T2]>,

       		<domR, fun rel[T1,T2], bag[T1] to rel[T1,T2]>,
       		<ranR, fun  rel[T1,T2], bag[T2] to rel[T1,T2]>,
       		<carR, fun  rel[T,T], bag[T] to rel[T,T]>,

       		<domX, fun rel[T1,T2], bag[T1] to rel[T1,T2]>,
       		<ranX, fun  rel[T1,T2], bag[T2] to rel[T1,T2]>,
       		<carX, fun  rel[T,T], bag[T] to rel[T,T]>,

		<closure, fun bag[T], rel[T,T] to bag[T]>,

		<dominators, fun rel[T1,T2], rel[T1,T2], rel[T2,T2] to rel[T1,T2]>,

<xxxx, fun undefined to undefined>

        ]


