module RelationChecker

imports RScripts
imports containers/Table[VAR REXPTYPE]

exports
    sorts ERROR ERRORS REXPTYPE # TENV OP TENV DCLVARS  Boolean #  Table[[VAR,REXPTYPE]]

    context-free syntax

	type-of(Elem)                  		-> ElemType

        undefined                       	-> REXPTYPE
        empty                           	-> REXPTYPE
        "fun" {REXPTYPE ","}* to REXPTYPE	-> REXPTYPE
        "[" {REXPTYPE ","}* "]"                 -> REXPTYPE

        is-var(REXPTYPE)                        -> Boolean

	REXPTYPE "==" REXPTYPE			-> Boolean

	 REXP cannot be typed 			-> ERROR
	 FROM cannot be typed			-> ERROR
	 Bag[[Elem]] cannot be typed 		-> ERROR
	 Rel[[Elem]] cannot be typed 		-> ERROR
 	 "Undeclared" VAR			-> ERROR
  	 VAR "redeclared"			-> ERROR
        "Incompatible" argument types REXPTYPE in REXP        -> ERROR
         REXP should have type REXPTYPE          -> ERROR
        REXP should be of type bag         	-> ERROR
        REXP should be of type rel         	-> ERROR
        "No" "definition" for VAR with argument REXPTYPE       -> ERROR

        "[" {ERROR ";"} * "]"                	-> ERRORS

	Table[[VAR,REXPTYPE]] # ERRORS  	-> TENV

	TENV "+" ERROR				-> TENV

        if Boolean then TENV else TENV fi	-> TENV
        if Boolean then REXPTYPE # TENV else REXPTYPE # TENV fi	-> REXPTYPE # TENV

	lookup(TENV, VAR) 			-> REXPTYPE
	store(TENV, VAR, REXPTYPE)		-> TENV
	delete(TENV, VAR)			-> TENV

	built-ins				-> Table[[VAR,REXPTYPE]]

	check-rscript(STAT*)          		-> TENV

        check-rscript(STAT*, TENV)		-> TENV
	check(REXP, TENV) 			-> REXPTYPE # TENV
	check-stat(STAT, TENV) 			-> TENV

        check-not-defined(VAR, TENV)            -> TENV

        require-type(REXP, REXPTYPE, TENV) 		-> TENV
	require-bag-type(REXP, VAR, REXPTYPE, TENV) -> TENV
	require-rel-type(REXP, VAR, VAR, REXPTYPE, TENV) -> TENV

        container-type(REXPTYPE)		-> REXPTYPE
        
        "[" { DCLVAR ","}* "]"			-> DCLVARS

	add-from({FROM ","}*, TENV)             -> TENV
	del-from({FROM ","}*, TENV)             -> TENV


         add-formals(DCLVARS, TENV)             -> TENV
         del-formals(DCLVARS, TENV)		-> TENV
        "[" {REXPTYPE ","}* "]"		-> REXPTYPES

 	ext-types(DCLVARS )                      -> {REXPTYPE ","}*
        collect-actuals({REXP ","}*, TENV)        -> REXPTYPES # TENV

        find-result-type(VAR, REXPTYPE, TENV)   -> REXPTYPE # TENV

        match-types( REXPTYPE, REXPTYPE, Table[[VAR,REXPTYPE]]) 	-> Boolean #  Table[[VAR,REXPTYPE]]
        substitute(REXPTYPE,  Table[[VAR,REXPTYPE]], TENV) -> REXPTYPE # TENV


       "and"                          -> OP
       "or"                           -> OP
       "not"                          -> OP
       "elem"			      -> OP

       "=="                           -> OP
        "<="                           -> OP
        "<"                            -> OP
        ">="                           -> OP
        ">"                            -> OP
        "union"                        -> OP
        "inter"                        -> OP
        "\\"                           -> OP
        "o"                            -> OP
        "x"                            -> OP
        "."                            -> OP
        "+"                            -> OP
        "*"                            -> OP
        "#"                            -> OP

        compat "(" REXP "," REXPTYPE OP REXPTYPE "," TENV ")" -> REXPTYPE # TENV
        compat "(" REXP "," REXPTYPE OP "," TENV ")" -> REXPTYPE #TENV
        compat "(" REXP "," OP REXPTYPE  "," TENV ")" -> REXPTYPE #TENV

hiddens
%%    imports asf/syntax/Comments
    variables
     "$Table" [0-9\']* 		-> Table[[VAR,REXPTYPE]]
     "$Tenv"[0-9\']* 		-> TENV
     "$Error" [0-9\']* 		-> ERROR
     "$Error*" [0-9\']* 	-> {ERROR ";"}*
     "$Errors" [0-9\']*		-> ERRORS
     "$Exp" [0-9\']*    	-> REXP
     "$Exp*" [0-9\']*    	-> {REXP ","}*
     "$Exp+" [0-9\']*    	-> {REXP ","}+

     "$Op"               	-> OP
     "$Etype" [0-9\']*    	-> REXPTYPE
     "$Etype*" [0-9\']*    	-> {REXPTYPE ","}*


     "$Elem" [0-9\']*     	-> Elem
     "$Elem+" [0-9\']*     	-> {Elem ","}+
     "$Elem*" [0-9\']*     	-> {Elem ","}*

     "$Tuple" [0-9\']*     	-> Elem # Elem
     "$Tuple*" [0-9\']*     	-> {Elem # Elem ","}*
     "$Tuple+" [0-9\']*     	-> {Elem # Elem ","}+


     "$Bag" [0-9\']*        	-> Bag[[Elem]]
     "$Rel" [0-9\']*        	-> Rel[[Elem]]

     "$Boolean" [0-9\']*    	-> Boolean
     "$Integer" [0-9\']*    	-> Integer
     "$Area" [0-9\']*    	-> Area
     "$String" [0-9\']*    	-> String

     "$Var" [0-9\']*       	-> VAR

      "$DclVar" [0-9\']*	   	-> DCLVAR

     "$DclVar*" [0-9\']*	-> {DCLVAR ","}*
     "$DclVar+" [0-9\']*	-> {DCLVAR ","}+

     "$Stat" [0-9\']*            -> STAT
     "$Stat*" [0-9\']*           -> STAT*

     "$From" [0-9\']*   	-> FROM
     "$From*" [0-9\']*   	-> {FROM ","}*
     "$From+" [0-9\']*   	-> {FROM ","}+
	
