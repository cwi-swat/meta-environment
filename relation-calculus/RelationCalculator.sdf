module RelationCalculator[Elem]

imports RScripts[Elem]
imports Relations[Elem]

exports
   sorts VALUE RSTORE GEN GENS OP

   context-free syntax

        "*empty*"                    -> VALUE
        Boolean                      -> VALUE
        Elem                         -> VALUE
        Bag[[Elem]]                  -> VALUE
        Rel[[Elem]]                  -> VALUE
        VAR # EXP                    -> VALUE
        VAR # VAR # EXP              -> VALUE
        
        "[" { VAR # VALUE ","}* "]"   -> RSTORE
        assign(VAR, VALUE, RSTORE)    -> RSTORE
        value(VAR, RSTORE)            -> VALUE
        add(VAR, VALUE, RSTORE)       -> RSTORE
        add(VAR, VALUE, VALUE, RSTORE)       -> RSTORE

        add(RSTORE, VAR, VALUE, VALUE)       -> RSTORE
        add(RSTORE, VAR, VALUE)       -> RSTORE

        evalp(EXP, RSTORE)            -> Boolean
        evale(EXP, RSTORE)            -> Elem
        evalb(EXP, RSTORE)            -> Bag[[Elem]]
        evalr(EXP, RSTORE)            -> Rel[[Elem]]

        evalx(EXP, RSTORE)            -> VALUE
        apply "(" VALUE OP VALUE ")"  -> VALUE

        "=="                         -> OP
        "<="                         -> OP
        "<"                          -> OP
        ">="                         -> OP
        ">"                          -> OP
        "union"                      -> OP
        "inter"                      -> OP
        "\\"                         -> OP
        "o"                          -> OP
        "x"                          -> OP
        "."                          -> OP

        eval(STAT, RSTORE)           -> RSTORE
        eval(SCRIPT)                 -> RSTORE
        eval1(STAT*, RSTORE)         -> RSTORE

        equal(Elem, Elem)            -> Boolean

        gen(VAR, Bag[[Elem]], Bag[[Elem]], Boolean)        -> GEN
        gen(VAR, VAR, Rel[[Elem]], Rel[[Elem]], Boolean)  -> GEN

        "[" {GEN ","}* "]"                                  -> GENS

        "get_from" "(" {FROM ","}* "," RSTORE ")"           -> GENS
        "has_more" "(" GENS ")"                             -> Boolean
        "get_next" "(" GENS ")"                             -> GENS
        "get_cur" "(" GENS "," RSTORE ")"                   -> RSTORE

        valformer(GENS, VALUE, EXP, RSTORE, EXP)           -> VALUE
        "if" Boolean "then" VALUE "else" VALUE "fi"         -> VALUE

hiddens
  imports asf/syntax/Comments

   variables
        "Store" [0-9\']*              -> RSTORE
        "Val" [0-9\']*                -> VALUE
        "VPair*" [0-9\']*             -> { VAR # VALUE ","}*

        "Var" [0-9\']*                -> VAR
        "Exp"  [0-9\']*               -> EXP
        "Exp*"  [0-9\']*              -> { EXP ","}*
        "Exp+"  [0-9\']*              -> { EXP ","}+

        "Rel" [0-9\']*                -> Rel[[Elem]]
        "Bag" [0-9\']*                -> Bag[[Elem]]
        "E"   [0-9\']*                -> Elem
        "E*"  [0-9\']*                -> {Elem ","}*
        "E+"  [0-9\']*                -> {Elem ","}+

        "Texp" [0-9\']*               -> EXP # EXP
        "Texp*" [0-9\']*              -> { TEXP  ","}*
        "Texp+" [0-9\']*              -> { TEXP  ","}+

        "Tuple" [0-9\']*              -> Elem # Elem
        "Tuple*" [0-9\']*             -> { Elem # Elem ","}*
        "Tuple+" [0-9\']*             -> { Elem # Elem ","}+

        "From*" [0-9\']*              -> {FROM ","}*
        "From+" [0-9\']*              -> {FROM ","}+

        "Gen*" [0-9\']*               -> { GEN ","}*
        "Gen+" [0-9\']*               -> { GEN ","}+
        "Gens" [0-9\']*               -> GENS

        "Script" [0-9\']*             -> SCRIPT

        "Stat" [0-9\']*               -> STAT
        "Stat*" [0-9\']*              -> STAT*

        "Bool" [0-9\']*               -> Boolean

     


