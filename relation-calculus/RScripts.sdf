module RScripts

imports basic/Booleans basic/Integers basic/Strings
imports MyArea

exports
  sorts Elem ElemType SCRIPT STAT VAR DCLVAR FROM REXP REXPTYPE

  imports Relations[Elem]

  lexical syntax
     [A-Za-z][A-Za-z0-9\_\-]*             -> VAR {avoid}

  context-free restrictions
     VAR -/- [A-Za-z0-9\_\-]

  context-free syntax

%% Elementary values
     Boolean                                -> Elem
     Integer                                -> Elem
     String				    -> Elem
     Area				    -> Elem

%% Extend Elem to allow nested bags and relations

     Bag[[Elem]]                   	    -> Elem
     Rel[[Elem]]                            -> Elem
     Elem # Elem                            -> Elem

     Elem                                    -> REXP {prefer}
     VAR                                     -> REXP
     REXP # REXP			     -> REXP
     "{" {REXP ","}* "}"                     -> REXP

%% Operators
     REXP "and" REXP                         -> REXP {left}
     REXP "or" REXP                          -> REXP {left}
     "not" REXP                              -> REXP
     REXP "elem" REXP			     -> REXP {non-assoc}

     REXP "==" REXP                          -> REXP {non-assoc}
     REXP "<=" REXP                          -> REXP {non-assoc}
     REXP "<" REXP                           -> REXP {non-assoc}
     REXP ">=" REXP                          -> REXP {non-assoc}
     REXP ">" REXP                           -> REXP {non-assoc}

     REXP "union" REXP                       -> REXP {left}
     REXP "inter" REXP                       -> REXP {left}
     REXP "\\" REXP                          -> REXP {left}
     REXP "o" REXP                           -> REXP {left}
     REXP "x" REXP                           -> REXP {left}
     REXP "." REXP                           -> REXP {left}
     REXP "+"                                -> REXP
     REXP "*"                                -> REXP

     "#" REXP			    	     -> REXP

%% Types

     "bool" | "int" | "str" | "node"	     -> ElemType
     ElemType                                -> REXPTYPE
     "<" REXPTYPE "," REXPTYPE ">"           -> REXPTYPE
     "bag" "[" REXPTYPE "]"       	     -> REXPTYPE
     "rel" "[" REXPTYPE "," REXPTYPE "]"     -> REXPTYPE
     "@" VAR				     -> REXPTYPE

%% value formers

     "{" FROM "|" REXP "}"                    -> REXP
     "{" {FROM ","}+ "|" REXP "|" REXP "}"    -> REXP

     VAR "in" REXP                            -> FROM
     "<" VAR "," VAR ">" in REXP              -> FROM

%% functions

     VAR "(" {REXP ","}* ")"                  -> REXP {avoid}
     "(" REXP ")"                             -> REXP {bracket}

%% Statements and script

     REXPTYPE VAR			      -> DCLVAR

     DCLVAR				      -> STAT

     DCLVAR "=" REXP                          -> STAT

     DCLVAR  "(" { DCLVAR ","}* ")" "=" REXP  -> STAT
 
     STAT*                                   -> SCRIPT

  context-free priorities

    { REXP "+" -> REXP
       REXP "*" -> REXP} >

     REXP "o" REXP -> REXP>
     REXP "x" REXP -> REXP >
     REXP "." REXP -> REXP >
     REXP "inter" REXP -> REXP >
     REXP "union" REXP -> REXP >
     REXP "elem" REXP -> REXP >    
     REXP "\\" REXP -> REXP >
     "#" REXP -> REXP >
    

     { REXP "<=" REXP -> REXP 
       REXP "<" REXP -> REXP
       REXP ">=" REXP -> REXP
       REXP ">" REXP -> REXP
       REXP "==" REXP -> REXP  
     }   

     

     
