module RScripts

imports basic/Booleans basic/Integers basic/Strings
imports MyArea

exports
  sorts Elem ElemType RSCRIPT RSTAT RVAR DCLRVAR FROM REXP REXPTYPE

  imports Relations[Elem]

  lexical syntax
     [A-Za-z][A-Za-z0-9\_\-]*             	-> RVAR {avoid}

  context-free restrictions
     RVAR -/- [A-Za-z0-9\_\-]

  context-free syntax

%% Elementary values
     Boolean                                	-> Elem  {avoid}
     Integer                                	-> Elem  {avoid}
     String				    	-> Elem  {avoid}
     Area				    	-> Elem  {avoid}

%% Extend Elem to allow nested bags and relations

     Bag[[Elem]]                   	    	-> Elem  {avoid}
     Rel[[Elem]]                           	-> Elem  {avoid}
     Elem # Elem                              	-> Elem  {avoid}

     Elem                                    	-> REXP 
     RVAR                                    	-> REXP
     REXP # REXP			     	-> REXP
     "{" {REXP ","}* "}"                     	-> REXP

%% Operators
     REXP "and" REXP                         	-> REXP {left}
     REXP "or" REXP                          	-> REXP {left}
     "not" REXP                              	-> REXP
     REXP "elem" REXP			     	-> REXP {non-assoc}

     REXP "==" REXP                          	-> REXP {non-assoc}
     REXP "<=" REXP                          	-> REXP {non-assoc}
     REXP "<" REXP                           	-> REXP {non-assoc}
     REXP ">=" REXP                          	-> REXP {non-assoc}
     REXP ">" REXP                           	-> REXP {non-assoc}

     REXP "union" REXP                       	-> REXP {left}
     REXP "inter" REXP                       	-> REXP {left}
     REXP "\\" REXP                          	-> REXP {left}
     REXP "o" REXP                           	-> REXP {left}
     REXP "x" REXP                           	-> REXP {left}
     REXP "." REXP                           	-> REXP {left}
     REXP "+"                                	-> REXP
     REXP "*"                                	-> REXP

     "#" REXP			    	     	-> REXP

%% Types

     "bool" | "int" | "str" | "node"	     	-> ElemType
     ElemType                                	-> REXPTYPE
     "<" REXPTYPE "," REXPTYPE ">"           	-> REXPTYPE
     "bag" "[" REXPTYPE "]"       	     	-> REXPTYPE
     "rel" "[" REXPTYPE "," REXPTYPE "]"     	-> REXPTYPE
     RVAR				     	-> REXPTYPE

%% value formers

%%     "{" FROM "|" REXP "}"                    -> REXP
%%     "{" {FROM ","}+ "|" REXP "|" REXP "}"    -> REXP

    "{" {FROM ","}+ ":" REXP "}"             	-> REXP
    "{" {FROM ","}+ ":" "if" REXP "then" REXP "}"
						-> REXP

     RVAR "in" REXP                           	-> FROM
     "<" RVAR "," RVAR ">" in REXP            	-> FROM

%% functions

     RVAR "(" {REXP ","}* ")"                 	-> REXP {avoid}
     "(" REXP ")"                             	-> REXP {bracket}

%% Statements and script

     REXPTYPE RVAR			      	-> DCLRVAR

     DCLRVAR				      	-> RSTAT

     DCLRVAR "=" REXP                         	-> RSTAT

     DCLRVAR  "(" { DCLRVAR ","}* ")" "=" REXP	-> RSTAT
 
     RSTAT*                                     -> RSCRIPT

  context-free priorities

    { REXP "+" -> REXP
       REXP "*" -> REXP} >

     REXP "o" REXP -> REXP>
     REXP "x" REXP -> REXP >
     REXP "." REXP -> REXP >
     REXP "inter" REXP -> REXP >
     REXP "union" REXP -> REXP >
     REXP "elem" REXP -> REXP >    
     REXP "\\" REXP -> REXP >
     "#" REXP -> REXP >
    

     { REXP "<=" REXP -> REXP 
       REXP "<" REXP -> REXP
       REXP ">=" REXP -> REXP
       REXP ">" REXP -> REXP
       REXP "==" REXP -> REXP  
     }   

     

     
