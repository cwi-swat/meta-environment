 equations

%%---- Store

%% Get value of a variable

[VL1]	value($Var, store(<$Var, $Val>, $VPair*)) = $Val
[VL2]	$Var != $Var' ===> value($Var, store(<$Var', $Val>, $VPair*)) = value($Var, store($VPair*))

%% Added by Mark van den Brand on 9th of July 2003
[VL3]   value($Var, store()) = *empty*

%% Assign value to variable

[ASG1]  assign($Var, $Val, store($VPair*1, <$Var, $Val'>, $VPair*2)) = store($VPair*1, <$Var, $Val>, $VPair*2)
	

[default-ASG1]	
	assign($Var, $Val, store($VPair*)) = store(<$Var, $Val>, $VPair*)

%% Assign when undefined

[AWU1]  assign-when-undef($Var, $Val, store($VPair*1, <$Var, $Val'>, $VPair*2)) = store($VPair*1, <$Var, $Val'>, $VPair*2)
	

[default-AWU2]	
	assign-when-undef($Var, $Val, store($VPair*)) = store(<$Var, $Val>, $VPair*)

%% Increment a variable

[INC1]	value($Var, $Store) = $Integer
	==================================================
	increment($Var, $Store) = assign($Var, $Integer + 1, $Store)

%% Add elem to tuple

[AE1]	add-elem($Var, $Elem, $Store) = assign($Var, append(value($Var, $Store), $Elem), $Store)


%% Add tuple to a relation

[AT1]	add-tuple($Var, <$Elem1, $Elem2>, store(<$Var, $Val>, $VPair*)) = 
	store(<$Var, apply({<$Elem1, $Elem2>}, union, $Val)>, $VPair*)

[AT2]	$Var != $Var', 
	store($VPair*') = add-tuple($Var, <$Elem1, $Elem2>, store($VPair*))
	===============================================================
	add-tuple($Var, <$Elem1, $Elem2>, store(<$Var', $Val>, $VPair*)) = store(<$Var', $Val>, $VPair*')

[AT3]	add-tuple($Var, <$Elem1, $Elem2>, store()) = store(< $Var, {<$Elem1, $Elem2>} >)

%% Extend a relation

[ER1]	extend-rel($Var, $Rel, store(<$Var, $Val>, $VPair*)) = store(<$Var, apply($Rel, union, $Val)>, $VPair*)

[ER2]	$Var != $Var', 
	store($VPair*') = extend-rel($Var, $Rel, store($VPair*))
	===============================================================
	extend-rel($Var, $Rel, store(<$Var', $Val>, $VPair*)) = store(<$Var', $Val>, $VPair*')

[ER3]	extend-rel($Var, $Rel, store()) = store(< $Var, $Rel >)

%%---- if on VALUEs

[if1]	if true then $Val1 else $Val2 fi  = $Val1
[if2]	if false then $Val1 else $Val2 fi = $Val2

%%%%---- Equality on elements

[e1]	equal-elem($Bool, $Bool)	= true
[e1]	equal-elem($Integer, $Integer)	= true
[e2]	equal-elem($String, $String)	= true
[e1]	equal-elem($Bag1, $Bag2) 	= equal($Bag1, $Bag2)
[e2]	equal-elem($Rel1, $Rel2) 	= equal($Rel1, $Rel2)
[default-e4] 
	equal-elem($Elem, $Elem') 		= false

%% --- Equality on RVALUEs

[e1]	equal-rval($Bag1, $Bag2) = equal($Bag1, $Bag2)
[e2]	equal-rval($Rel1, $Rel2) = equal($Rel1, $Rel2)
[e3]	equal-rval($Val, $Val)  = true
[default-e4] 
	equal-rval($Val1, $Val2) = false

%%[v2b]	rval2bag($Bag) = $Bag
%%[v2r]	rval2rel($Rel) = $Rel

%% ---- Tests on RVALUEs

[it-1]	is-tuple(<$Elem1, $Elem2>) = true
[default-it]
	is-tuple($Val) = false

%%---- Specialized versions of evalx that return value of required type

[EVP]	$Bool = evalx($Exp, $Store) 	===> evalp($Exp, $Store) = $Bool
[EVE1]	$Elem = evalx($Exp, $Store)   	===> evale($Exp, $Store) = $Elem
[EVE2]	$Tuple = evalx($Exp, $Store)	===> evalt($Exp, $Store) = $Tuple
[EVB1]	$Bag = evalx($Exp, $Store)     	===> evalb($Exp, $Store) = $Bag
[EVR1]	$Rel = evalx($Exp, $Store)     	===> evalr($Exp, $Store) = $Rel

%% --- Test suite support

[ETS1]	$Store = eval-rscript($Rscript),
	$Integer1 = value(NPASSED, $Store),
	$Integer2 = value(NFAILED, $Store),
	$Val = value(FAILED, $Store)
	==========================================================
	eval-rscript-testsuite($Rscript) = testsuite-report($Integer1, $Integer2, $Val)

[TSR1] testsuite-report($Integer, 0, $Val) = All $Integer tests passed

[TSR1] 	$Integer2 != 0
	===========================================================
	testsuite-report($Integer1, $Integer2, $Val) = 
	$Integer2 of $Integer1 tests failed: $Val

%% ---- Eval complete script

[ES1]	eval-rscript($Stat*) = eval-rstats($Stat*, store(<NPASSED,0>,<NFAILED,0>,<FAILED,[]>))

%% ---- Eval complete script and yield value of a variable

[ES2]	eval-rscript($Stat*, $Var, $Store) = value($Var, eval-rstats($Stat*, $Store))

%% ---- Eval statements

[ES2]	eval-rstats($Stat $Stat*, $Store) = eval-rstats($Stat*, eval-rstat($Stat, $Store))
[ES3]	eval-rstats( , $Store) = $Store


%% ---- Eval one statement

[S1]	eval-rstat(bool $Var, $Store) 		= assign-when-undef($Var, true, $Store)
[S2]	eval-rstat(int $Var, $Store)  		= assign-when-undef($Var, 0, $Store)
[S3]	eval-rstat(str $Var, $Store)  		= assign-when-undef($Var, "", $Store)
[S4]	eval-rstat(node $Var, $Store)		= assign-when-undef($Var, area("",0,0,0,0), $Store)
[S5]	eval-rstat(bag[$Etype] $Var, $Store)  	= assign-when-undef($Var, [], $Store)	
	
[S6]	eval-rstat(rel[$Etype1, $Etype2] $Var, $Store) 
						= assign-when-undef($Var, {}, $Store)
[S8]	eval-rstat($Etype $Var, $Store)	 	= $Store

[S11]	eval-rstat($Etype $Var = $Exp, $Store) = assign($Var, evalx($Exp, $Store), $Store)

[S12]	eval-rstat($Etype1 $Var1($Etype2 $Var2) = $Exp, $Store) 
						= assign($Var1, <$Var2, $Exp>, $Store)

[S13]	eval-rstat($Etype1 $Var1($Etype2 $Var2, $Etype3 $Var3) = $Exp, $Store) 
						= assign($Var1, <$Var2, $Var3, $Exp>, $Store)

[S14]	eval-rstat($Etype1 $Var1($Etype2 $Var2, $Etype3 $Var3, $Etype4 $Var4) = $Exp, $Store) 
						= assign($Var1, <$Var2, $Var3, $Var4, $Exp>, $Store)

[S14]	eval-rstat($Etype1 $Var1($Etype2 $Var2, $Etype3 $Var3, $Etype4 $Var4, $Etype5 $Var5) = $Exp, $Store) 
						= assign($Var1, <$Var2, $Var3, $Var4, $Var5, $Exp>, $Store)

[S14]	eval-rstat($Etype1 $Var1($Etype2 $Var2, $Etype3 $Var3, $Etype4 $Var4, $Etype5 $Var5, $Etype6 $Var6) = $Exp, $Store) 
						= assign($Var1, <$Var2, $Var3, $Var4, $Var5, $Var6, $Exp>, $Store)

[S14]	eval-rstat($Etype1 $Var1($Etype2 $Var2, $Etype3 $Var3, $Etype4 $Var4, $Etype5 $Var5, $Etype6 $Var6, $Etype7 $Var7) = $Exp, $Store) 
						= assign($Var1, <$Var2, $Var3, $Var4, $Var5, $Var6, $Var7, $Exp>, $Store)

[S15]	evalp($Exp,$Store) = true
	===================================================
	eval-rstat(assert $String : $Exp, $Store)= increment(NPASSED, $Store)

[S16]	evalp($Exp,$Store) = false, add-elem(FAILED, $String, $Store) = $Store'
	===================================================
	eval-rstat(assert $String : $Exp, $Store)= increment(NFAILED, $Store')

%% --- Solve Sets of equations

[SL1]	eval-rstat(solve {$Var1 = $Exp1}, $Store) = 
	solve1(1000, $Var1, $Exp1, $Store)

[SL1]	eval-rstat(solve($Integer) {$Var1 = $Exp1}, $Store) = 
	solve1($Integer, $Var1, $Exp1, $Store)

[SL2]	eval-rstat(solve {$Var1 = $Exp1, $Var2 = $Exp2}, $Store) = 
	solve2(1000, $Var1, $Exp1, $Var2, $Exp2, $Store)

[SL2]	eval-rstat(solve($Integer){$Var1 = $Exp1, $Var2 = $Exp2}, $Store) = 
	solve2($Integer, $Var1, $Exp1, $Var2, $Exp2, $Store)

[SL1-1]	$Integer > 0 = true,
	$Val1 = value($Var1, $Store),
	$Val1' = evalx($Exp1, $Store),
	$Store' = assign($Var1, $Val1', $Store),
	equal-rval($Val1, $Val1') = false
	===========================================
	solve1($Integer, $Var1, $Exp1, $Store) =
	solve1($Integer - 1, $Var1, $Exp1, $Store')

[default-SL1-2]	
	solve1($Integer, $Var1, $Exp1, $Store) = $Store


[SL2-1]	$Integer > 0 = true,
	$Val1 = value($Var1, $Store),
	$Val1' = evalx($Exp1, $Store),
	$Val2 = value($Var2, $Store),
	$Val2' = evalx($Exp2, $Store),
	$Store' = assign($Var1, $Val1', $Store),
	$Store'' = assign($Var2, $Val2', $Store'),
	equal-rval($Val1, $Val1') & equal-rval($Val2, $Val2') = false
	===========================================
	solve2($Integer, $Var1, $Exp1, $Var2, $Exp2, $Store) =
	solve2($Integer - 1, $Var1, $Exp1, $Var2, $Exp2, $Store'')

[default-SL2-2]	
	solve2($Integer, $Var1, $Exp1, $Var2, $Exp2, $Store) = $Store

%% ---- Eval one REXP

%%[ER1]	eval-rexp($Exp, $Store) = evalx($Exp, $Store)

%% ---- The main evaluation function evalx

%% ---- Eval elements, tuples and variables

[ELM]	evalx($Elem, $Store) = $Elem

%%[TPL]	evalx($Tuple, $Store) = $Tuple

[VAR1]	evalx($Var, $Store)  = value($Var, $Store)

%% ---- Eval tuples

[ET1]	$Elem1 = evale($Exp1, $Store),
	$Elem2 = evale($Exp2, $Store)
	==================================================
	evalx(<$Exp1, $Exp2>, $Store) = <$Elem1, $Elem2>

%% ---- Eval bags

[EB2]   $Elem = evale($Exp, $Store),
	[$Elem+] = evalb([$Exp+], $Store)
	===================================================
	evalx([$Exp, $Exp+], $Store) = [$Elem, $Elem+]

[EB2]   $Elem = evale($Exp, $Store)
	===================================================
	evalx([$Exp], $Store) = [$Elem]

%% ---- Eval relations

[ER2]	$Tuple = evalt($Exp, $Store),
	evalr({$Exp+}, $Store) = {$Tuple+}
	====================================================
	evalx({$Exp, $Exp+}, $Store) = {$Tuple, $Tuple+}

[ER2]	$Tuple = evalt($Exp, $Store)
	====================================================
	evalx({$Exp}, $Store) = {$Tuple}

%%%% ---- Eval binary infix operators

[AND1]	evalx($Exp1 and $Exp2, $Store) 	= apply(evalx($Exp1, $Store), and, evalx($Exp2, $Store))
[AND2]	apply($Bool1, and, $Bool2) 	= $Bool1 & $Bool2

[OR1]	evalx($Exp1 or $Exp2, $Store) 	= apply(evalx($Exp1, $Store), or, evalx($Exp2, $Store))
[OR2]	apply($Bool1, or, $Bool2)	= $Bool1 | $Bool2	

[IN1]	evalx($Exp1 in $Exp2, $Store) 	= apply(evalx($Exp1, $Store), in, evalx($Exp2, $Store))
[IN2]	apply($Tuple, in, $Rel)		= in($Tuple, $Rel)
[IN3]	apply($Elem, in, $Bag)		= in($Elem, $Bag)

[NI1]	$Bool = apply(evalx($Exp1, $Store), in, evalx($Exp2, $Store))
	===========================================================
	evalx($Exp1 notin $Exp2, $Store)= not($Bool)

[EQ1]	evalx($Exp1 == $Exp2, $Store) 	= apply(evalx($Exp1, $Store), ==, evalx($Exp2, $Store))

[EQ2]	apply($Elem1, ==, $Elem2) 	= equal-elem($Elem1, $Elem2)

[NE1]	$Bool = apply(evalx($Exp1, $Store), ==, evalx($Exp2, $Store))
	===========================================================
	evalx($Exp1 != $Exp2, $Store) 	= not($Bool)

[LE1]	evalx($Exp1 <= $Exp2, $Store) 	= apply(evalx($Exp1, $Store), <=, evalx($Exp2, $Store))
[LE2]	apply($Rel1, <=, $Rel2)		= subset($Rel1, $Rel2)
[LE3]	apply($Bag1, <=, $Bag2)		= subset($Bag1, $Bag2)
[LE4]	apply($Integer1, <=, $Integer2) 	= $Integer1 <= $Integer2

[LT1]	evalx($Exp1 < $Exp2, $Store) 	= apply(evalx($Exp1, $Store), <, evalx($Exp2, $Store))
[LT2]	apply($Rel1, <, $Rel2) 		= strict-subset($Rel1,  $Rel2)
[LT2]	apply($Bag1, <, $Bag2) 		= strict-subset($Bag1,  $Bag2)
[LT3]	apply($Integer1, <, $Integer2) 	= $Integer1 < $Integer2

[GE1]	$Bool = apply(evalx($Exp1, $Store), <, evalx($Exp2, $Store))
	==========================================================
	evalx($Exp1 >= $Exp2, $Store) 	= not($Bool)

[GT1]	$Bool = apply(evalx($Exp1, $Store), <=, evalx($Exp2, $Store))
	===========================================================
	evalx($Exp1 > $Exp2, $Store) 	= not($Bool)

[UN1]	evalx($Exp1 union $Exp2, $Store)= apply(evalx($Exp1, $Store), union, evalx($Exp2, $Store))

[UN2]	apply($Rel1, union, $Rel2)     	= union($Rel1, $Rel2)
[UN3]	apply($Tuple, union, $Rel)     	= union({$Tuple}, $Rel)
[UN4]	apply($Rel, union, $Tuple)    	= union($Rel, {$Tuple})
[UN5]	apply($Tuple1, union, $Tuple2) 	= union({$Tuple1}, {$Tuple2})
[UN6]	apply($Bag1, union, $Bag2)	= union($Bag1, $Bag2)
[UN7]	apply($Elem, union, $Bag) 	= union([$Elem], $Bag)
[UN8]	apply($Bag, union, $Elem) 	= union($Bag, [$Elem])

[IN1]	evalx($Exp1 inter $Exp2, $Store)= apply(evalx($Exp1, $Store), inter, evalx($Exp2, $Store))

[IN2]	apply($Rel1, inter, $Rel2)     	= inter($Rel1, $Rel2)
[IN3]	apply($Tuple, inter, $Rel)   	= inter({$Tuple}, $Rel)
[IN4]	apply($Rel, inter, $Tuple)    	= inter($Rel, {$Tuple})
[IN5]	apply($Tuple1, inter, $Tuple2) 	= inter({$Tuple1}, {$Tuple2})
[IN6]	apply($Bag1, inter, $Bag2) 	= inter($Bag1, $Bag2)
[IN7]	apply($Elem, inter, $Bag) 	= inter([$Elem], $Bag)
[IN8]	apply($Bag, inter, $Elem)	= inter($Bag, [$Elem])

%% -- difference

[DF1]	evalx($Exp1 \ $Exp2, $Store)	= apply(evalx($Exp1, $Store), \, evalx($Exp2, $Store))

[DF3]	apply($Rel1, \, $Rel2)     	= diff($Rel1, $Rel2)
[DF3]	apply($Tuple, \, $Rel)     	= diff({$Tuple}, $Rel)
[DF4]	apply($Rel, \, $Tuple)     	= diff($Rel, {$Tuple})
[DF5]	apply($Tuple1, \, $Tuple2) 	= diff({$Tuple1}, {$Tuple2})
[DF6]	apply($Bag1, \, $Bag2) 		= diff($Bag1, $Bag2)
[DF7]	apply($Elem, \, $Bag) 		= diff([$Elem], $Bag)
[DF8]	apply($Bag, \, $Elem) 		= diff($Bag, [$Elem])

%% -- composition

[CM1]	evalx($Exp1 o $Exp2, $Store)	= apply(evalx($Exp1, $Store), o, evalx($Exp2, $Store))
[CM2]	apply($Rel1, o, $Rel2) 		= compose($Rel1, $Rel2)
[CM3]	apply($Tuple, o, $Rel)     	= compose({$Tuple}, $Rel)
[CM4]	apply($Rel, o, $Tuple)     	= compose($Rel, {$Tuple})
[CM5]	apply($Tuple1, o, $Tuple2) 	= compose({$Tuple1}, {$Tuple2})

%% -- product

[CP1]	evalx($Exp1 x $Exp2, $Store)	= apply(evalx($Exp1, $Store), x, evalx($Exp2, $Store))

[CP2]	apply($Bag1, x, $Bag2) 		= product($Bag1, $Bag2)
[CP3]	apply($Elem, x, $Bag)    	= product([$Elem], $Bag)
[CP4]	apply($Bag, x, $Elem)     	= product($Bag, [$Elem])

%% -- Image

[IM1]	evalx($Exp1 . $Exp2, $Store)	= apply(evalx($Exp1, $Store), ., evalx($Exp2, $Store))
 
[IM2]	apply($Rel, ., $Elem)		= $Rel . $Elem
[IM3]	apply($Elem, ., $Rel)		= $Elem. $Rel

[IM4]	apply($Bag, ., $Rel)		= $Bag . $Rel
[IM5]	apply($Rel, ., $Bag)		= $Rel . $Bag

%%[default-IM11]
%%	apply($Val1, ., $Val2)		= *empty*

%% -- [ ]
[IM1]	evalx($Exp1 [ $Exp2 ], $Store)	= evalx($Exp2 . $Exp1, $Store)

%% --- Eval unary prefix operators

[NOT1]	evalx(not $Exp, $Store) 	= apply(not, evalx($Exp, $Store))
[NOT1]	apply(not, $Bool)		= not($Bool)

[SZ1]	evalx(# $Exp, $Store) 		= apply(#, evalx($Exp, $Store))
[SZ1]	apply(#, $Rel) 			= size($Rel)
[SZ2]	apply(#, $Bag) 			= size($Bag)

%% --- Eval unary postfix operators

[TC1]	evalx($Exp +, $Store)		= apply(evalx($Exp, $Store), +)
[TC2]	apply($Rel, +)			= trans-closure($Rel)

[RTC1]	evalx($Exp *, $Store)		= apply(evalr($Exp, $Store), *)
[RTC2]	apply($Rel, *)			= rtrans-closure($Rel)

%% ---- Eval bag and relation formers

%% --- Determine resulttype and Simplify multiple Froms

[RF2]	{$Exp | $From+}  =  {$From+ :: $Exp}

[XX] 	{$From, $From+ :: $Exp } = { $From :: {$From+ :: $Exp}}

[RF2]	[$Exp | $From+]  =   [$From+ :: $Exp]

[XX] 	[$From, $From+ :: $Exp ] = [$From :: [$From+ :: $Exp]]

[et-1a]	$Bool =  evalp($Test, $Store)
	======================================================================
	evalx($Test :: $Exp , $Store) = if $Bool then evalx($Exp, $Store) else *empty* fi

[ea-1a]	$Val = evalx($Exp1, $Store),
	$Store' =  assign($Var, $Val, $Store)
	======================================================================
	evalx($Var <- $Exp1 :: $Exp2, $Store) = evalx($Exp2, $Store')

[eat-1a]	
	<$Elem1, $Elem2> = evalx($Exp1, $Store),
	$Store' =  assign($Var1, $Elem1, $Store),
	$Store'' =  assign($Var2, $Elem2, $Store')
	======================================================================
	evalx(<$Var1,$Var2> <- $Exp1 :: $Exp2 , $Store) = evalx($Exp2, $Store'')

%% --- Iterate over Bags

[ei-1]	$Val = evalx($Exp1, $Store)
	=======================================
	evalx([ $Var : $Exp1 :: $Exp2 ], $Store) = eval-iter($Var, $Val, [], $Exp2, $Store)

[ei-2]	$Val = evalx($Exp1, $Store)
	=======================================
	evalx({ $Var : $Exp1 :: $Exp2 }, $Store) = eval-iter($Var, $Val, {}, $Exp2, $Store)

[ei-3]	$Store' = assign($Var, $Elem, $Store),
	$Val' = evalx($Exp, $Store'),
	eval-iter($Var, [$Elem*], append($Val, $Val'), $Exp, $Store') = $Val''
	======================================================
	eval-iter($Var, [$Elem, $Elem*], $Val, $Exp, $Store) =  $Val''

[ei-4]	$Store' = assign($Var, $Tuple, $Store),
	$Val' = evalx($Exp, $Store'),
	eval-iter($Var, {$Tuple*}, append($Val, $Val'), $Exp, $Store') = $Val''
	======================================================
	eval-iter($Var, {$Tuple, $Tuple*}, $Val, $Exp, $Store) =  $Val''

[ei-5]	eval-iter($Var, [], $Val, $Exp2, $Store) = $Val

[ei-6]	eval-iter($Var, {}, $Val, $Exp2, $Store) = $Val

%% --- Iterate over Relations

[ei2-1]	$Val = evalx($Exp1, $Store)
	=======================================
	evalx([ <$Var1, $Var2> : $Exp1 :: $Exp2 ], $Store) = 
	eval-iter2($Var1, $Var2, $Val, [], $Exp2, $Store)

[ei2-2]	$Val = evalx($Exp1, $Store), 
	=======================================
	evalx({ <$Var1, $Var2> : $Exp1 :: $Exp2 }, $Store) = 
	eval-iter2($Var1, $Var2, $Val, {}, $Exp2, $Store)

[ei2-3]	$Store' = assign($Var1, $Elem1, $Store),
	$Store'' = assign($Var2, $Elem2, $Store'),
	$Val' = evalx($Exp, $Store''),
	eval-iter2($Var1, $Var2, {$Tuple*}, append($Val, $Val'), $Exp, $Store'') = $Val''
	======================================================
	eval-iter2($Var1, $Var2, {<$Elem1, $Elem2>, $Tuple*}, $Val, $Exp, $Store) = $Val''

[ei2-4]	$Store' = assign($Var1, $Elem1, $Store),
	$Store'' = assign($Var2, $Elem2, $Store'),
	$Val' = evalx($Exp, $Store''),
	eval-iter2($Var1, $Var2, [$Elem*], append($Val, $Val'), $Exp, $Store'') = $Val''
	======================================================
	eval-iter2($Var1, $Var2, [<$Elem1, $Elem2>, $Elem*], $Val, $Exp, $Store) = $Val''

[ei2-5]	eval-iter2($Var1, $Var2, [], $Val, $Exp2, $Store) = $Val

[ei2-6]	eval-iter2($Var1, $Var2, {}, $Val, $Exp2, $Store) = $Val


%%[RF2]	{$Exp | $From+}  =  {$From+ :: $Exp}
%%
%%[XX] 	{$From, $From+ :: $Exp } = { $From :: {$From+ :: $Exp}}
%%
%%[RF2]	[$Exp | $From+]  =   [$From+ :: $Exp]
%%
%%[XX] 	[$From, $From+ :: $Exp ] = [$From :: [$From+ :: $Exp]]
%%
%%[et-1a]	$Bool =  evalp($Test, $Store)
%%	======================================================================
%%	evalx([ $Test :: $Exp ], $Store) = if $Bool then evalx($Exp, $Store) else *empty* fi
%%
%%[et-1b]	$Bool =  evalp($Test, $Store)
%%	======================================================================
%%	evalx({ $Test :: $Exp }, $Store) = if $Bool then evalx($Exp, $Store) else *empty* fi
%%
%%[ea-1a]	$Val = evalx($Exp1, $Store),
%%	$Store' =  assign($Var, $Val, $Store)
%%	======================================================================
%%	evalx([ $Var <- $Exp1 :: $Exp2 ], $Store) = evalx($Exp2, $Store')
%%
%%[ea-1b]	$Val = evalx($Exp1, $Store),
%%	$Store' =  assign($Var, $Val, $Store)
%%	======================================================================
%%	evalx({ $Var <- $Exp1 :: $Exp2 }, $Store) = evalx($Exp2, $Store')
%%
%%[eat-1a]	
%%	<$Elem1, $Elem2> = evalx($Exp1, $Store),
%%	$Store' =  assign($Var1, $Elem1, $Store),
%%	$Store'' =  assign($Var2, $Elem2, $Store')
%%	======================================================================
%%	evalx([ <$Var1,$Var2> <- $Exp1 :: $Exp2 ], $Store) = evalx($Exp2, $Store'')
%%
%%[eat-1b]	
%%	<$Elem1, $Elem2> = evalx($Exp1, $Store),
%%	$Store' =  assign($Var1, $Elem1, $Store),
%%	$Store'' =  assign($Var2, $Elem2, $Store')
%%	======================================================================
%%	evalx({ <$Var1,$Var2> <- $Exp1 :: $Exp2 }, $Store) = evalx($Exp2, $Store'')
%%
%%%% --- Iterate over Bags
%%
%%[ei-1]	$Bag = evalb($Exp1, $Store)
%%	=======================================
%%	evalx([ $Var : $Exp1 :: $Exp2 ], $Store) = eval-iter($Var, $Bag, [], $Exp2, $Store)
%%
%%[ei-1]	$Bag = evalb($Exp1, $Store)
%%	=======================================
%%	evalx({ $Var : $Exp1 :: $Exp2 }, $Store) = eval-iter($Var, $Bag, {}, $Exp2, $Store)
%%
%%[ei-2]	$Store' = assign($Var, $Elem, $Store),
%%	$Val' = evalx($Exp, $Store'),
%%	eval-iter($Var, [$Elem*], append($Val, $Val'), $Exp, $Store') = $Val''
%%	======================================================
%%	eval-iter($Var, [$Elem, $Elem*], $Val, $Exp, $Store) =  $Val''
%%
%%[ei-3]	eval-iter($Var, [], $Val, $Exp2, $Store) = $Val
%%
%%%% --- Iterate over Relations
%%
%%[ei2-1]	$Rel = evalr($Exp1, $Store)
%%	=======================================
%%	evalx([ <$Var1, $Var2> : $Exp1 :: $Exp2 ], $Store) = 
%%	eval-iter2($Var1, $Var2, $Rel, [], $Exp2, $Store)
%%
%%[ei2-1]	$Rel = evalr($Exp1, $Store), 
%%	=======================================
%%	evalx({ <$Var1, $Var2> : $Exp1 :: $Exp2 }, $Store) = 
%%	eval-iter2($Var1, $Var2, $Rel, {}, $Exp2, $Store)
%%
%%[ei2-2]	$Store' = assign($Var1, $Elem1, $Store),
%%	$Store'' = assign($Var2, $Elem2, $Store'),
%%	$Val' = evalx($Exp, $Store''),
%%	eval-iter2($Var1, $Var2, {$Tuple*}, append($Val, $Val'), $Exp, $Store'') = $Val''
%%	======================================================
%%	eval-iter2($Var1, $Var2, {<$Elem1, $Elem2>, $Tuple*}, $Val, $Exp, $Store) = $Val''
%%
%%[ei2-3]	eval-iter2($Var1, $Var2, {}, $Val, $Exp2, $Store) = $Val
%%
%%
%% ---- Auxiliary functions for bag and relation formers

[AP0]	append($Elem, *empty*) = $Elem

[AP1]	append($Bag, $Elem) = union2($Bag, $Elem)
[AP2]	append($Bag1, $Bag2) = union($Bag1, $Bag2)
[AP3]	append($Rel, $Tuple) = union2($Rel, $Tuple)
[AP4]	append($Rel1, $Rel2) = union($Rel1, $Rel2)

%% --- Exists in bag

[EXB1]	$Bag = evalb($Exp, $Store)
	=========================================
	evalx(exists($Var in $Exp | $Test), $Store) = existsb($Var, $Bag, $Test, $Store)

[EXB2]	$Store' = assign($Var, $Elem, $Store)
	=========================================
	existsb($Var, [$Elem, $Elem*], $Test, $Store) =
	if evalp($Test, $Store') then true else existsb($Var, [$Elem*], $Test, $Store) fi

[EXB3]	existsb($Var, [], $Test, $Store) = false

%% --- Exists in relation

[EXR1]	$Rel = evalr($Exp, $Store)
	=========================================
	evalx(exists(<$Var1, $Var2> in $Exp | $Test), $Store) = existsr($Var1, $Var2, $Rel, $Test, $Store)

[EXR1]	$Store' = assign($Var1, $Elem1, $Store),
	$Store'' = assign($Var2, $Elem2, $Store')
	=========================================
	existsr($Var1, $Var2, {<$Elem1, $Elem2>, $Tuple*}, $Test, $Store) =
	if evalp($Test, $Store'') then true else existsr($Var1, $Var2, {$Tuple*}, $Test, $Store) fi

[EXR2]	existsr($Var1, $Var2, {}, $Test, $Store) = false

%%%% --- Forall in bag

[ALB1]	$Bool = evalp(exists($Var in $Exp | not $Test), $Store)
	==========================================
	evalx(forall($Var in $Exp | $Test), $Store) = not($Bool)

%% --- Forall in relation

[ALB1]	$Bool = evalp(exists(<$Var1, $Var2> in $Exp | not $Test), $Store)
	==========================================
	evalx(forall(<$Var1, $Var2> in $Exp | $Test), $Store) = not($Bool)

%% ------------------------------

%%  ---- FUN ( EXP ) -> EXP

[default-fun1]
	value($Var1, $Store) = <$Var2, $Exp2>,
	$Val = evalx($Exp1, $Store),
	$Store' = assign($Var2, $Val, $Store)
	====================================================
	evalx($Var1($Exp1), $Store) = evalx($Exp2, $Store')

[Fid]	$Bag  = evalb($Exp, $Store)
	====================================================
	evalx(id($Exp), $Store) = id($Bag)

[Fdom]	$Rel = evalr($Exp, $Store)
	====================================================
	evalx(domain($Exp), $Store) = domain($Rel)

[Fran]	$Rel = evalr($Exp, $Store)
	====================================================
	evalx(range($Exp), $Store) = range($Rel)

[Fcar]	$Rel = evalr($Exp, $Store)
	====================================================
	evalx(carrier($Exp), $Store) = carrier($Rel)
	
[Ftop]	$Rel = evalr($Exp, $Store)
	====================================================
	evalx(top($Exp), $Store) = top($Rel)

[Fbot]	$Rel = evalr($Exp, $Store)
	====================================================
	evalx(bottom($Exp), $Store) = bottom($Rel)

[Finv]	$Rel = evalr($Exp, $Store)
	===================================================
	evalx(inv($Exp), $Store) = inv($Rel)

[Fcmp]	$Rel = evalr($Exp, $Store)
	===================================================
	evalx(compl($Exp), $Store) = compl($Rel)

[Ffst]	evalx($Exp, $Store) = <$Elem1, $Elem2>
	===================================================
	evalx(first($Exp), $Store) = $Elem1

[Fsec]	evalx($Exp, $Store) = <$Elem1, $Elem2>
	===================================================
	evalx(second($Exp), $Store) = $Elem2

%% ---- FUN ( EXP , EXP )  -> EXP

[default-fun2]
	value($Var, $Store) = <$Var1, $Var2, $Exp3>,
	$Val1 = evalx($Exp1, $Store),
	$Val2 = evalx($Exp2, $Store),

	$Store' = assign($Var1, $Val1, $Store),
	$Store'' = assign($Var2, $Val2, $Store')
	==================================================
	evalx($Var($Exp1, $Exp2), $Store) = evalx($Exp3, $Store'')

 %%     fun domR(REL, $Bag) = { <$x, $y> in REL | $x in $Bag | {<$x, $y}>}

[RdomR]	$Rel = evalr($Exp1, $Store), $Bag = evalb($Exp2, $Store)
	===================================================
	evalx(domainR($Exp1, $Exp2), $Store) = domR($Rel, $Bag)

[FranR]	$Rel = evalr($Exp1, $Store), $Bag = evalb($Exp2, $Store)
	===================================================
	evalx(rangeR($Exp1, $Exp2), $Store) = ranR($Rel, $Bag)

[FcarR]	$Rel = evalr($Exp1, $Store), $Bag = evalb($Exp2, $Store)
	====================================================
	evalx(carrierR($Exp1, $Exp2), $Store) = carR($Rel, $Bag)

[FdomX]	$Rel = evalr($Exp1, $Store), $Bag = evalb($Exp2, $Store)
	====================================================
	evalx(domainX($Exp1, $Exp2), $Store) = domX($Rel, $Bag)

[FranX]	$Rel = evalr($Exp1, $Store), $Bag = evalb($Exp2, $Store)
	====================================================
	evalx(rangeX($Exp1, $Exp2), $Store) = ranX($Rel, $Bag)

[FcarX]	$Rel = evalr($Exp1, $Store), $Bag = evalb($Exp2, $Store)
	====================================================
	evalx(carrierX($Exp1, $Exp2), $Store) = carX($Rel, $Bag)

%%  ---- FUN ( EXP , EXP , EXP)  -> EXP

[default-fun3]
	value($Var, $Store) = <$Var1, $Var2, $Var3, $Exp4>,
	$Val1 = evalx($Exp1, $Store),
	$Val2 = evalx($Exp2, $Store),
	$Val3 = evalx($Exp3, $Store),

	$Store' = assign($Var1, $Val1, $Store),
	$Store'' = assign($Var2, $Val2, $Store'),
	$Store''' = assign($Var3, $Val3, $Store'')
	==================================================
	evalx($Var($Exp1, $Exp2, $Exp3), $Store) = evalx($Exp4, $Store''')

[FrX]	$Bag1 = evalb($Exp1, $Store),
	$Bag2 = evalb($Exp2, $Store),
	$Rel  = evalr($Exp3, $Store)
	================================================= 
	evalx(reachX($Exp1, $Exp2, $Exp3), $Store) =
	reachX($Bag1, $Bag2, $Rel)	

[FrR]	$Bag1 = evalb($Exp1, $Store),
        $Bag2 = evalb($Exp2, $Store),
        $Rel  = evalr($Exp3, $Store)
        ================================================= 
        evalx(reachR($Exp1, $Exp2, $Exp3), $Store) =
        reachR($Bag1, $Bag2, $Rel)

[default-fun4]
	value($Var, $Store) = <$Var1, $Var2, $Var3, $Var4, $Exp5>,
	$Val1 = evalx($Exp1, $Store),
	$Val2 = evalx($Exp2, $Store),
	$Val3 = evalx($Exp3, $Store),
	$Val4 = evalx($Exp4, $Store),

	$Store' = assign($Var1, $Val1, $Store),
	$Store'' = assign($Var2, $Val2, $Store'),
	$Store''' = assign($Var3, $Val3, $Store''),
	$Store'''' = assign($Var4, $Val4, $Store''')
	==================================================
	evalx($Var($Exp1, $Exp2, $Exp3, $Exp4), $Store) = evalx($Exp5, $Store'''')

[default-fun5]
	value($Var, $Store) = <$Var1, $Var2, $Var3, $Var4, $Var5, $Exp6>,
	$Val1 = evalx($Exp1, $Store),
	$Val2 = evalx($Exp2, $Store),
	$Val3 = evalx($Exp3, $Store),
	$Val4 = evalx($Exp4, $Store),
	$Val5 = evalx($Exp5, $Store),

	$Store' = assign($Var1, $Val1, $Store),
	$Store'' = assign($Var2, $Val2, $Store'),
	$Store''' = assign($Var3, $Val3, $Store''),
	$Store'''' = assign($Var4, $Val4, $Store'''),
	$Store''''' = assign($Var5, $Val5, $Store'''')

	==================================================
	evalx($Var($Exp1, $Exp2, $Exp3, $Exp4, $Exp5), $Store) = evalx($Exp6, $Store''''')

[default-fun6]
	value($Var, $Store) = <$Var1, $Var2, $Var3, $Var4, $Var5, $Var6, $Exp7>,
	$Val1 = evalx($Exp1, $Store),
	$Val2 = evalx($Exp2, $Store),
	$Val3 = evalx($Exp3, $Store),
	$Val4 = evalx($Exp4, $Store),
	$Val5 = evalx($Exp5, $Store),
	$Val6 = evalx($Exp6, $Store),

	$Store' = assign($Var1, $Val1, $Store),
	$Store'' = assign($Var2, $Val2, $Store'),
	$Store''' = assign($Var3, $Val3, $Store''),
	$Store'''' = assign($Var4, $Val4, $Store'''),
	$Store''''' = assign($Var5, $Val5, $Store''''),
	$Store'''''' = assign($Var6, $Val6, $Store''''')

	==================================================
	evalx($Var($Exp1, $Exp2, $Exp3, $Exp4, $Exp5, $Exp6), $Store) = evalx($Exp7, $Store'''''')


%% --- Where expressions

[WH1]	eval-rstats($Stat+, $Store) = $Store'
	=================================================
	evalx($Exp where $Stat+ endwhere, $Store) =  evalx($Exp, $Store')	






