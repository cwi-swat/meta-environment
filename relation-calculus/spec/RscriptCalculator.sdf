module RscriptCalculator

imports Rstore ExtendedIntegers ExtendedStrings basic/Errors RscriptChecker

exports

   context-free start-symbols StrCon	%% For the benefit of parsing in meta.buttons

   context-free syntax

%% Main evaluation functions for Rscripts

        eval-rscript(RSCRIPT)                 				-> RSTORE
        eval-rscript-and-yield(RSCRIPT, StrCon)             		-> Elem
        eval-rscript-and-yield(RSCRIPT, RVAR)             		-> Elem
	eval-rscript-with-rstore(RSCRIPT,RSTORE)			-> RSTORE
        eval-rscript-with-rstore-and-yield(RSCRIPT, RSTORE, StrCon)   	-> Elem
        eval-rscript-with-rstore-and-yield(RSCRIPT, RSTORE, RVAR)   	-> Elem

	Summary								-> RVALUE

	RSTORE "[|" RSTAT* "|]"						-> RSTORE
	"[|" RSTAT* "|]"						-> RSTORE

	"[|" RSTAT* "|]" "yield" RVAR					-> RVALUE
        "[|" REXP "|]"							-> RVALUE

%% should be hidden

   context-free syntax

        eval-rstat(RSTAT, RSTORE)           			-> RSTORE { complete}
        eval-rstats(RSTAT*, RSTORE)          			-> RSTORE {complete}

	"{" {GENERATOR ","}+ "::" {REXP ","}+  "}"		-> REXP
 
        evalp(REXP, RSTORE)            				-> Boolean {complete}
        evali(REXP, RSTORE)            				-> Integer {complete}
        evale(REXP, RSTORE)            				-> Elem {complete}
        evalt(REXP, RSTORE)            				-> Tuple {complete}
        evalb(REXP, RSTORE)            				-> Bag[[Elem]] {complete}
        evalr(REXP, RSTORE)            				-> Bag[[Elem]] {complete}
        evalx(REXP, RSTORE)            				-> Elem {complete}
	evall(REXP, RSTORE)					-> Location {complete}

	evalc(REXP, RSTORE)					-> RVALUE
	evalc-test(Boolean, REXP, RSTORE)			-> RVALUE

	eval-lt(RVALUE, RVALUE)					-> Boolean
	eval-le(RVALUE, RVALUE)					-> Boolean
	eval-rim(RVALUE, RVALUE)				-> Elem
	eval-lim(RVALUE, RVALUE)				-> Elem


	eval-initvar(INITVAR*, RSTORE)				-> RSTORE

	eval-fields({DCLRVAR ","}*, RSTORE, Integer)		-> RSTORE
	select-field(REXP, Integer)				-> Elem

	add-element(Elem, BagIterator[[Elem]])			-> Bag[[Elem]]
	power0(BagIterator[[Elem]])				-> Bag[[Elem]]
	power1(BagIterator[[Elem]])				-> Bag[[Elem]]

	%% All paths from roots in the second bag.
	all-paths-from(Bag[[Elem]],Bag[[Elem]])			-> Bag[[Elem]] 

	chain-bag(Bag[[Elem]])					-> Bag[[Elem]]
	chain-each(Bag[[Elem]])					-> Bag[[Elem]]
	all-nodes-from(Bag[[Elem]], Bag[[Elem]])		-> Bag[[Elem]]

	extract-rvars( {DCLRVAR ","}+ )				-> {RVAR  ","}+
	bind-formals({RVAR ","}+, {REXP ","}+, RSTORE)		-> RSTORE

	equal-rval(RVALUE, RVALUE)				-> Boolean

	simplify(REXP)						-> REXP
	simplify1(REXP)						-> REXP

	eval-itern({TARGET ","}+,  BagIterator[[Elem]], Bag[[Elem]], REXP, RSTORE)	-> Bag[[Elem]]

	match-rvars({TARGET ","}*, RVALUE, REXP, RSTORE)		-> RVALUE

	append-rval(Bag[[Elem]], RVALUE)			-> Bag[[Elem]]
	exists({TARGET ","}+, BagIterator[[Elem]], REXP, RSTORE)	-> Boolean

	solve1(Integer, RVAR, REXP, RSTORE)			-> RSTORE
	solve2(Integer, RVAR, REXP, RVAR, REXP, RSTORE)		-> RSTORE

	sumx(BagIterator[[Elem]], Integer)			-> Integer
	max1(BagIterator[[Elem]])				-> Integer
	max2(BagIterator[[Elem]], Integer)			-> Integer

	min1(BagIterator[[Elem]])				-> Integer
	min2(BagIterator[[Elem]], Integer)			-> Integer

	str2rvar(String)					-> RVAR

hiddens
%%  imports asf/syntax/Comments
   imports basic/Comments

   variables
        "$Rstore" [0-9\']*             -> RSTORE
        "$Val" [0-9\']*                -> RVALUE
        "$VPair*" [0-9\']*             -> { <RVAR, RVALUE> ","}*

        "$Var" [0-9\']*                -> RVAR
        "$Var*" [0-9\']*               -> {RVAR ","}*
        "$Var+" [0-9\']*               -> {RVAR ","}+

        "$Exp0"  [0-9\']*               -> REXP0
        "$Exp"  [1-9\']*               -> REXP
        "$Test"  [0-9\']*              -> REXP
        "$Exp*"  [0-9\']*              -> { REXP ","}*
        "$Exp+"  [0-9\']*              -> { REXP ","}+
        "$Exps"  [0-9\']*              -> { REXP ","}+

        "$Rel" [0-9\']*                -> Bag[[Elem]] 
        "$Bag" [0-9\']*                -> Bag[[Elem]]
        "$BagIter" [0-9\']*            -> BagIterator[[Elem]]

        "$Elem"   [0-9\']*             -> Elem
        "$Elem*"  [0-9\']*             -> {Elem ","}*
        "$Elem+"  [0-9\']*             -> {Elem ","}+

        "$Tuple" [0-9\']*              -> Tuple
        "$Tuple*" [0-9\']*             -> { Tuple ","}*
        "$Tuple+" [0-9\']*             -> { Tuple ","}+

        "$Gen" [0-9\']*                -> GENERATOR
        "$Gen*" [0-9\']*               -> {GENERATOR ","}*
        "$Gen+" [0-9\']*               -> {GENERATOR ","}+

        "$SimpleGen" [0-9\']*          -> SIMPLE-GENERATOR	

        "$Rscript" [0-9\']*            -> RSCRIPT

        "$Stat" [0-9\']*               -> RSTAT
        "$Stat*" [0-9\']*              -> RSTAT*
        "$Stat+" [0-9\']*              -> RSTAT+

        "$BoolCon" [0-9\']*            -> BoolCon
        "$Bool" [0-9\']*               -> Boolean
        "$NatCon" [0-9\']*             -> NatCon
        "$Integer" [0-9\']*            -> Integer

        "$String" [0-9\']*             -> String
        "$StrCon" [0-9\']*             -> StrCon

	"$Etype" [0-9\']*              -> REXPTYPE
	"$Etype*" [0-9\']*             -> {REXPTYPE ","}*
	"$Etype+" [0-9\']*             -> {REXPTYPE ","}+

	"$DclRvar*" [0-9\']*		-> { DCLRVAR ","}*
	"$DclRvar+" [0-9\']*		-> { DCLRVAR ","}+
	"$Area" [0-9\']* 		-> Area
	"$Loc" [0-9\']* 		-> Location

	"$InitVar" [0-9\']*		-> INITVAR
	"$InitVar*" [0-9\']*		-> INITVAR*
	"$InitVar+" [0-9\']*		-> INITVAR+

       "$Eq" [0-9\']*		-> EQU
       "$Eq*" [0-9\']*		-> EQU*
       "$Eq+" [0-9\']*		-> EQU+

       "$Target" [0-9\']*		-> TARGET
       "$Target*" [0-9\']*		-> {TARGET ","}*
       "$Target+" [0-9\']*		-> {TARGET ","}+

       "$Char*" [0-9\']*    -> CHAR*

	"$Summary"  [0-9\']*	       -> Summary




     


