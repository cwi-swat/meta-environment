equations

%% ---- {  } notation

%% ---- intern

[in1]	intern({$Elem, $Elem*}) = insert($Elem, 1, intern({$Elem*}))
[in2]	intern({}) = null

%% ---- extern

[ex0]	extern($Bag1) = {$Elem*1}, extern($Bag2) = {$Elem*2} 
	================================================
	extern(bag($C, $Bag1, $Elem, 0, $Bag2)) = {$Elem*1, $Elem*2}

[ex1]	extern($Bag1) = {$Elem*1}, extern($Bag2) = {$Elem*2} 
	================================================
	extern(bag($C, $Bag1, $Elem, 1, $Bag2)) = {$Elem*1, $Elem, $Elem*2}

[ex2]	$N > 1 = true, extern($Bag1) = {$Elem*1}, 
	extern(bag($C, null, $Elem, $N - 1, $Bag2)) = {$Elem*2} 
	================================================
	extern(bag($C, $Bag1, $Elem, $N, $Bag2)) = {$Elem*1, $Elem, $Elem*2}

[ex4]	extern(null) = {}

%% ---- is-empty

[ie1]	is-empty(null) = true
[default-ie]
	is-empty($Bag) = false

%% ---- insert

[insert1]
	$N > 0 = true ===> insert($Elem, $N, $Bag) = blacken(ins($Elem, $N, $Bag))
[default-insert]
	insert($Elem, $N, $Bag) = $Bag

%% ---- ins

[ins1]	ins($Elem, $N, null) = bag(red, null, $Elem, $N, null)

[ins2]	ins($Elem, $N1, bag($C, $Bag1, $Elem, $N2, $Bag2)) = bag($C, $Bag1, $Elem, $N1+$N2, $Bag2)

[ins3a]	$Elem1 < $Elem2 = true
	================================================
	ins($Elem1, $N1, bag(black, $Bag1, $Elem2, $N2, $Bag2)) =
	balance(ins($Elem1, $N1, $Bag1), $Elem2, $N2, $Bag2)

[ins3b]	$Elem1 < $Elem2 = true
	================================================
	ins($Elem1, $N1, bag(red, $Bag1, $Elem2, $N2, $Bag2)) =
	bag(red,ins($Elem1, $N1, $Bag1), $Elem2, $N2, $Bag2)

[ins4a]	$Elem1 > $Elem2 = true
	================================================
	ins($Elem1, $N1, bag(black, $Bag1, $Elem2, $N2, $Bag2)) =
	balance($Bag1, $Elem2, $N2, ins($Elem1, $N1, $Bag2))

[ins4b]	$Elem1 > $Elem2 = true
	================================================
	ins($Elem1, $N1, bag(red, $Bag1, $Elem2, $N2, $Bag2)) =
	bag(red, $Bag1, $Elem2, $N2, ins($Elem1, $N2, $Bag2))

%% ---- blacken

[blacken1]
	blacken(null) = null
[blacken2]
	blacken(bag($C, $Bag1, $Elem, $N, $Bag2)) =  bag(black, $Bag1, $Elem, $N, $Bag2)

%% ---- balance

[bal0]	balance(bag(red, $Bag1, $Elem1, $N1, $Bag2), $Elem2, $N2,  bag(red, $Bag3, $Elem3, $N3, $Bag4)) =
	bag(red, bag(black,$Bag1, $Elem1, $N1, $Bag2), $Elem2, $N2, bag(black, $Bag3, $Elem3, $N3, $Bag4))

[bal1]	balance(bag(red, bag(red,$Bag1, $Elem1, $N1, $Bag2), $Elem2, $N2, $Bag3), $Elem3, $N3, $Bag4) =
	bag(red, bag(black,$Bag1, $Elem1, $N1, $Bag2), $Elem2, $N2, bag(black, $Bag3, $Elem3, $N3, $Bag4))

[bal2]	balance(bag(red, $Bag1, $Elem1, $N1, bag(red, $Bag2, $Elem2, $N2, $Bag3)), $Elem3, $N3, $Bag4) =
	bag(red, bag(black,$Bag1, $Elem1, $N1, $Bag2), $Elem2, $N2, bag(black, $Bag3, $Elem3, $N3, $Bag4))

[bal3]	balance($Bag1, $Elem1, $N1, bag(red, bag(red, $Bag2, $Elem2, $N2, $Bag3), $Elem3, $N3, $Bag4)) =
	bag(red, bag(black,$Bag1, $Elem1, $N1, $Bag2), $Elem2, $N2, bag(black, $Bag3, $Elem3, $N3, $Bag4))

[bal4]	balance($Bag1, $Elem1, $N1, bag(red, $Bag2, $Elem2, $N2, bag(red, $Bag3, $Elem3, $N3, $Bag4))) =
	bag(red, bag(black,$Bag1, $Elem1, $N1, $Bag2), $Elem2, $N2, bag(black, $Bag3, $Elem3, $N3, $Bag4))

[default-bal]
	balance($Bag1, $Elem, $N, $Bag2) = bag(black, $Bag1, $Elem, $N, $Bag2)

%% ---- delete 

[delete1]
	$N > 0 = true ===> delete($Elem, $N, $Bag) =  blacken(del($Elem, $N, $Bag))
[default-delete]
	 delete($Elem, $N, $Bag) = $Bag

%% ---- del

[del1]	del($Elem, $N, null) = null

[del2]	$N1 > $N2 = true  ===> del($Elem, $N1, bag($C, $Bag1, $Elem, $N2, $Bag2)) = bag($C, $Bag1, $Elem, $N1-$N2, $Bag2)

[del3]	$N1 = $N2 ===> del($Elem, $N1, bag($C, $Bag1, $Elem, $N2, $Bag2)) = append($Bag1, $Bag2)

[del4]	$Elem1 < $Elem2 = true
	================================================
	del($Elem1, $N1, bag($C, $Bag1, $Elem2, $N2, $Bag2)) = delFromLeft($Elem1, $N1, $Bag1, $Elem2, $N2, $Bag2)

[del5]	$Elem1 > $Elem2 = true
	================================================
	del($Elem1, $N1, bag($C, $Bag1, $Elem2, $N2, $Bag2)) = delFromRight($Elem1, $N1, $Bag1, $Elem2, $N2, $Bag2)

%% ---- delFromLeft

[dfl1]	is-black($Bag1) = true
	================================================
	delFromLeft($Elem1, $N1, $Bag1, $Elem2, $N2, $Bag2) = 
	balLeft(del($Elem1, $N1, $Bag1), $Elem2, $N2, $Bag2)
[default-dfl]
	delFromLeft($Elem1, $N1, $Bag1, $Elem2, $N2, $Bag2) = 
	bag(red, del($Elem1, $N1, $Bag1), $Elem2, $N2, $Bag2)

%% ---- delFromRight

[dfr1]	is-black($Bag2) = true
	================================================
	delFromRight($Elem1, $N1, $Bag1, $Elem2, $N2, $Bag2) =
	balRight($Bag1, $Elem2, $N2, del($Elem1, $N1, $Bag2))
[default-dfl]
	delFromRight($Elem1, $N1, $Bag1, $Elem2, $N2,$Bag2) = 
	bag(red, $Bag1, $Elem2, $N2, del($Elem1, $N1, $Bag2))

%% ---- balLeft
[bl1]	balLeft(bag(red, $Bag1, $Elem1, $N1, $Bag2), $Elem2, $N2, $Bag3) =
	bag(red, bag(black, $Bag1, $Elem1, $N1, $Bag2), $Elem2, $N2, $Bag3)

[bl2]	balLeft($Bag1, $Elem1, $N1, bag(black, $Bag2, $Elem2, $N2, $Bag3)) =
	balance($Bag1, $Elem1, $N1, bag(red, $Bag2, $Elem2, $N2, $Bag3))

[bl3]	balLeft($Bag1, $Elem1, $N1, bag(red, bag(black, $Bag2, $Elem2, $N2, $Bag3), $Elem3, $N3, $Bag4)) =
	bag(red, bag(black, $Bag1, $Elem1, $N1, $Bag2), $Elem1, $N2, balance($Bag3, $Elem3, $N3, sub1($Bag4)))

%% ---- balRight

[br1]	balRight($Bag1, $Elem1, $N1, bag(red, $Bag2, $Elem2, $N2, $Bag3)) =
	bag(red, $Bag1, $Elem1, $N1, bag(black, $Bag2, $Elem2, $N2, $Bag3))

[br2]	balRight(bag(black, $Bag1, $Elem1, $N1, $Bag2), $Elem2, $N2, $Bag3) =
	balance(bag(red, $Bag1, $Elem1, $N1, $Bag2), $Elem2, $N2, $Bag3)

[br3]	balRight(bag(red, $Bag1, $Elem1, $N1, bag(black, $Bag2, $Elem2, $N2, $Bag3)), $Elem3, $N3, $Bag4) =
	bag(red, balance(sub1($Bag1), $Elem1, $N1, $Bag2), $Elem1, $N2, bag(black, $Bag3, $Elem3, $N3, $Bag4))

%% ---- sub1

[sub11]	sub1(bag(black, $Bag1, $Elem2, $N, $Bag2)) = bag(red, $Bag1, $Elem2, $N, $Bag2)

%% ---- append

[app1]	append(null, $Bag) = $Bag

[app2]	append($Bag, null) = $Bag

[app3]	append($Bag2, $Bag3) = bag(red, $Bag2', $Elem', $N', $Bag3')
	================================================================================
	append(bag(red, $Bag1, $Elem1, $N1, $Bag2), bag(red, $Bag3, $Elem2, $N2, $Bag4)) =
	bag(red, bag(red, $Bag1, $Elem1, $N1, $Bag2'), $Elem2, $N2, bag(red, $Bag3', $Elem', $N', $Bag4))

[default-app3]
	append($Bag2, $Bag3) = $Bag23
	================================================================================
	append(bag(red, $Bag1, $Elem1, $N1, $Bag2), bag(red, $Bag3, $Elem2, $N2, $Bag4)) =
	bag(red, $Bag1, $Elem1, $N1, bag(red, $Bag23, $Elem2, $N2, $Bag4))

[app4]	append($Bag2, $Bag3) = bag(red, $Bag2', $Elem', $N', $Bag3')
	================================================================================
	append(bag(black, $Bag1, $Elem1, $N1, $Bag2), bag(black, $Bag3, $Elem2, $N2, $Bag4)) =
	bag(red, bag(black, $Bag1, $Elem1, $N1, $Bag2'), $Elem2, $N2, bag(black, $Bag3', $Elem', $N', $Bag4))

[default-app4]
	append($Bag2, $Bag3) = $Bag23
	================================================================================
	append(bag(black, $Bag1, $Elem1, $N1, $Bag2), bag(black, $Bag3, $Elem2, $N2, $Bag4)) =
	balLeft($Bag1, $Elem1, $N1, bag(black, $Bag23, $Elem2, $N2, $Bag4))

[app5]	append($Bag1, bag(red, $Bag2, $Elem, $N, $Bag3)) = bag(red, append($Bag1, $Bag2), $Elem, $N, $Bag3)

[app6]	append(bag(red, $Bag1, $Elem, $N, $Bag2), $Bag3) = bag(red, $Bag1, $Elem, $N, append($Bag2, $Bag3))
	

%% ---- max

[max1]	$N1 > $N2 = true ===> max($N1, $N2) = $N1

[default-max]
	max($N1, $N2) = $N2

%% ---- min

[min1]	$N1 < $N2 = true ===> min($N1, $N2) = $N1

[default-min]
	min($N1, $N2) = $N2

%% ---- lookup

[l1]	lookup($Elem, null) = 0

[l2]	lookup($Elem, bag($C, $Bag1, $Elem, $N, $Bag2)) = $N

[l3]	$Elem1 < $Elem2 = true
	================================================
	lookup($Elem1, bag($C, $Bag1, $Elem2, $N, $Bag2)) = lookup($Elem1, $Bag1)

[l4]	$Elem1 > $Elem2 = true
	================================================
	lookup($Elem1, bag($C, $Bag1, $Elem2, $N, $Bag2)) = lookup($Elem1, $Bag2)

%%[l5]	lookup($Elem, join($Bag1, $Bag2)) = max(lookup($Elem, $Bag1), lookup($Elem, $Bag2))

%% ---- mk-iterator($Bag) = $Bag

%% ---- iterator

[i1]	iterator(null, $Iter) = $Iter
[i2]	iterator(null, null) = null

%% ---- head

[h1]	head(bag($C, $Bag1, $Elem, $N, $Bag2)) = <$Elem, $N>
[h2]	head(iterator(bag($C, $Bag1, $Elem, $N, $Bag2), $Iter)) = <$Elem, $N>
[h3]	head(iterator(null, $Iter)) = head($Iter)

%% ---- tail

[t1]	tail(bag($C, $Bag1, $Elem, $N, $Bag2)) = iterator($Bag1, $Bag2)
[t2]	tail(iterator(bag($C, $Bag1, $Elem, $N, $Bag2), $Iter)) = iterator($Bag1, iterator($Bag2, $Iter))
[t3]	tail(iterator(null,$Iter)) = tail($Iter)

%% ---- is-empty

[ie1]	is-empty-iter(null) = true
[ie2]	is-empty-iter(iterator(null, $Iter)) = is-empty-iter($Iter)
[default-ie]
	is-empty-iter($Iter) = false

%% --- equal(Rel1, Rel2)

%%[eq-1] equal($Bag, $Bag) = true
%%[default-eq]
%%	equal($Bag1, $Bag2) = false

%% --- subset(Rel1, Rel22)

[subs1]	is-empty-iter($IBag1) = true
	=========================================
	subset($IBag1, $Bag2) = true

[subs2]	is-empty($Bag2) = true
	=========================================
	subset($IBag1, $Bag2) = is-empty-iter($IBag1)

[subs3]	<$Elem, $N1> = head($IBag1),
	$N2 = lookup($Elem, $Bag2)
	=========================================
	subset($IBag1, $Bag2) = 
	if $N1 <= $N2 then subset(tail($IBag1), delete($Elem, $N2, $Bag2)) else false fi

%% --- ssubset(Rel1, Rel2)

[ssub-1] strict-subset($Bag1, $Bag2) = subset($Bag1, $Bag2) & not(equal($Bag1, $Bag2))

%% --- superset(Rel1, Rel2)

[sup-1] superset($Bag1, $Bag2) = subset($Bag2, $Bag1)

%% --- strict-superset(Rel1, Rel2)

[ssup-1] strict-superset($Bag1, $Bag2) = strict-subset($Bag2, $Bag1)

%% --- union1($Elem, Rel)

[un1-1]	in($Elem, $Bag) = true	
	=============================
	union1($Elem, $Bag) = $Bag

[default-un1-2]
	union1($Elem, $Bag) = insert($Elem, 1, $Bag)

%% --- union2($Bag, $Elem)

[un2-1]	in($Elem, $Bag) = true
	=============================
	union2($Bag, $Elem) = $Bag

[default-un2-2]
	union2($Bag, $Elem) = insert($Elem, 1, $Bag)

%% --- union($Bag1, $Bag2)

[un-1] 	union(null, $Bag) = $Bag
[un-2] 	union($Bag, null) = $Bag

[un-3]	<$Elem, $N1> = head($IBag1),
	$N2 =  lookup($Elem, $Bag2),
	$Bag = union(tail($IBag1), delete($Elem, $N2,$Bag2))
	=========================================
	union($IBag1, $Bag2) = insert($Elem, max($N1,$N2), $Bag)

%% ---- diff($Bag1, $Bag)

[df-1] 	diff(null, $Bag) = null
[df-2] 	diff($Bag, null) = $Bag

[df-3]	<$Elem, $N1> = head($IBag1),
	$N2 = lookup($Elem, $Bag2),
	$Bag = diff(tail($IBag1), delete($Elem, $N2, $Bag2))
	=========================================
	diff($IBag1, $Bag2) = insert($Elem, max($N1-$N2, 0), $Bag)

%% --- $Bag1 inter $Bag2

[int-1] inter(null, $Bag) = null
[int-2] inter($Bag, null) = null
[default-int-3]	
	<$Elem, $N1> = head($IBag1),
	$N2 = lookup($Elem, $Bag2),
	$Bag = inter(tail($IBag1), delete($Elem, $N2, $Bag2))
	=========================================
	inter($IBag1, $Bag2) = insert($Elem, min($N1, $N2), $Bag)

%% --- size($Bag)

[sz-1] size(null) = 0
[sz-2] size(bag($C, $Bag1, $Elem, $N, $Bag2)) = $N + size($Bag1) + size($Bag2)

%% --- in($Elem, $Bag)

[in-1]  in($Elem, $Bag) = lookup($Elem, $Bag) > 0

%% if

[if-1] if true then $Bag1 else $Bag2 fi = $Bag1
[if-2] if false then $Bag1 else $Bag2 fi = $Bag2

[ifb-1]	 if true then $Bool1 else $Bool2 fi = $Bool1
[ifb-2]	 if false then $Bool1 else $Bool2 fi = $Bool2



