equations

%%-----------------------------------------------------------------------------------

%% ---- Simplify constant type

[xxx]	fun [] to $Etype = $Etype

%% ---- Type of element

[to1]	type-of($Integer) = int 
[to2]	type-of($BoolCon) = bool
[to3]	type-of($String)  = str
[to4]	type-of($Loc)     = loc

%% ---- Element type

[et1]	element-type(bag[$Etype], $Tenv)  = $Etype
[et2]	element-type(rel[$Etype+], $Tenv) = <$Etype+>
[et3]	element-type(<$Etype+>, $Tenv)    = <$Etype+>
[et4]	element-type($Var, $Tenv)         = element-type(lookup($Tenv, $Var), $Tenv)
[default-et]
	element-type($Etype, $Tenv)       = undefined

%% ---- First of type

[ft1]	first(<$Etype1, $Etype*>, $Tenv) = $Etype1

[ft2]	first(<$Etype1 $Var, $DclVar*>, $Tenv) = $Etype1

[ft3]	first($Var, $Tenv) = first(lookup($Tenv, $Var), $Tenv)

[default-ft]
	first($Etype, $Tenv) = $Etype

%% ---- Second of type

[st1]	second(<$Etype1, $Etype+>, $Tenv) = <$Etype+>
[st2]	second(<$Etype1 $Var, $DclVar+>, $Tenv) = <$DclVar+>
[st3]	second($Var, $Tenv) = second(lookup($Tenv, $Var), $Tenv)
[default-st]
	second($Etype, $Tenv) = undefined

%% ---- Normalize type

[nm1]	norm(bag[$Etype], $Tenv) = bag[norm($Etype, $Tenv)]

[nm2]	norm(rel[$Etype+], $Tenv) = bag[norm(<$Etype+>, $Tenv)]

[nm3]	$Etype1' := norm($Etype1, $Tenv),
	<$Etype+'> := norm(<$Etype2, $Etype+>, $Tenv)
	=========================================================
	norm(<$Etype1, $Etype2, $Etype+>, $Tenv) = <$Etype1', $Etype+'>

[nm4]	$Etype1' := norm($Etype1, $Tenv),
	$Etype2' := norm($Etype2, $Tenv)
	=========================================================
	norm(<$Etype1, $Etype2>, $Tenv) = <$Etype1', $Etype2'>

[nm5]	norm(<$DclVar+>, $Tenv) = norm(get-tuple-type(<$DclVar+>), $Tenv)

[nm6]	norm($Var, $Tenv) = norm(lookup($Tenv, $Var), $Tenv)

[default-nm]
	norm($Etype, $Tenv) = $Etype

%% ---- Equality on types: ==

[eqt1]	norm($Etype1, $Tenv) == norm($Etype2, $Tenv)
	=====================================================
	equal-type($Etype1, $Etype2, $Tenv) = true

[eqt2]	bag[$Etype1'] := norm($Etype1, $Tenv),
	bag[$Etype2'] := norm($Etype2, $Tenv)
	=====================================================
	equal-type($Etype1, $Etype2, $Tenv) = equal-type($Etype1', $Etype2', $Tenv)

[eqt3] empty-bag-type == norm($Etype1, $Tenv),
 	bag[$Etype2']:= norm($Etype2, $Tenv)
	=====================================================
	equal-type($Etype1, $Etype2, $Tenv) = true

[eqt4]	bag[$Etype1'] := norm($Etype1, $Tenv),
	empty-bag-type == norm($Etype2, $Tenv)
	=====================================================
	equal-type($Etype1, $Etype2, $Tenv) = true

[eqt5]	<$Etype1', $Etype1'', $Etype+1> := norm($Etype1, $Tenv),
	<$Etype2', $Etype2'', $Etype+2> := norm($Etype2, $Tenv),
	equal-type($Etype1', $Etype2', $Tenv) == true,
	equal-type(<$Etype1'', $Etype+1>, <$Etype2'', $Etype+2>, $Tenv) == true
	=====================================================
	equal-type($Etype1, $Etype2, $Tenv) = true

[eqt6]	<$Etype1', $Etype1''> := norm($Etype1, $Tenv),
	<$Etype2', $Etype2''> := norm($Etype2, $Tenv),
	equal-type($Etype1', $Etype2', $Tenv) == true,
	equal-type($Etype1'', $Etype2'', $Tenv) == true
	=====================================================
	equal-type($Etype1, $Etype2, $Tenv) = true
	

[default-eqt]
	equal-type($Etype1, $Etype2, $Tenv) = false

%% ---- get-tuple-type

[gtt1]	get-tuple-type(<$Etype1 $Var1, $Etype2 $Var2>) = <$Etype1, $Etype2>

[gtt2]	<$Etype2, $Etype+> := get-tuple-type(<$Etype2 $Var2, $DclVar+>)
	=========================================================
	get-tuple-type(<$Etype1 $Var1, $Etype2 $Var2, $DclVar+>) = <$Etype1, $Etype2, $Etype+>

%% ---- Is tuple

[it1]	is-tuple(<$Elem+>) = true
[default-it]
	is-tuple($Elem) = false

%% ---- well-formed-type

[wft1]	well-formed-type(bag[$Etype], $Tenv) = well-formed-type($Etype, $Tenv)

[wft2]	well-formed-type(rel[$Etype+], $Tenv) = well-formed-type(<$Etype+>,$Tenv)

[wft3]	$Tenv' := well-formed-type($Etype, $Tenv),
	$Tenv'' := well-formed-type(<$Etype+>, $Tenv')
	========================================================
	well-formed-type(<$Etype, $Etype+>, $Tenv) = $Tenv''

[wft4]	well-formed-type(<$Etype>, $Tenv) = well-formed-type($Etype, $Tenv)

[wft5]	well-formed-type(<$DclVar+>, $Tenv) = well-formed-type(get-tuple-type(<$DclVar+>), $Tenv)

[wft5]	lookup($Tenv, $Var) == not-in-table
	=======================================================
	well-formed-type($Var, $Tenv) = $Tenv + Undeclared $Var

[wft6]	$Tenv' := well-formed-type(<$Etype+>, $Tenv),
	$Tenv'' := well-formed-type($Etype, $Tenv')
	======================================================
	well-formed-type(fun [$Etype+] to $Etype, $Tenv) = $Tenv''

[wft6]	$Etype := lookup($Tenv, $Var)
	=======================================================
	well-formed-type($Var, $Tenv) = well-formed-type($Etype, $Tenv)

[default-wft]
	well-formed-type($Etype, $Tenv) = $Tenv


%% ---- If-then-else on type environments

[ite1]	if true then $Tenv1 else $Tenv2 fi = $Tenv1

[ite2]	if false then $Tenv1 else $Tenv2 fi = $Tenv2

%% ---- If-then-else on <Type, TypeEnv>

[ite3]	if true then <$Etype1, $Tenv1> else <$Etype2, $Tenv2> fi = <$Etype1, $Tenv1>

[ite4]	if false then <$Etype1, $Tenv1> else <$Etype2, $Tenv2> fi = <$Etype2, $Tenv2>

%% ---- Add error message

[te1]	<$Table, errors[$Error*]> + $Error = <$Table, errors[$Error*;
$Error]>

%% ---- Errors to ItemList

[i2s]	rvar2str(rvar(Char*)) = strcon(""" Char* """)

[cve-1] convert-errors(errors[$Error+]) = summary("RscriptChecker", "Rscript", [convert-errors1(errors[$Error+])])
[cve-1] convert-errors(errors[]) =  summary("RscriptChecker", "Rscript", [info("Rscript is type correct!", [])])


[cve-1] $Feedback* := convert-errors1(errors[$Error*])
      	================================================
        convert-errors1(errors[$Error; $Error*])= e2i($Error), $Feedback*

[cve-2] convert-errors1(errors[]) = 

[e2i-1] e2i($Exp cannot be typed)	= error("Expression cannot be typed", [localized("expr", get-location($Exp))])
[e2i-2] e2i($Stat cannot be typed)	= error("Statement cannot be typed", [localized("stat", get-location($Stat))])
[e2i-3] e2i($Gen cannot be typed) 	= error("Generator cannot be typed", [localized("generator", get-location($Gen))])
[e2i-4] e2i($Bag cannot be typed) 	= error("Bag cannot be typed", [localized("bag", get-location($Bag))])
[e2i-5] e2i($Rel cannot be typed) 	= error("Relation cannot be typed", [localized("relation", get-location($Rel))])
[e2i-6] e2i(Undeclared $Var) 		= error("Undeclared:", [localized(rvar2str($Var), get-location($Var))])
[e2i-7] e2i($Var redeclared) 		= error("Redeclared:", [localized(rvar2str($Var), get-location($Var))])

[e2i-8]	e2i($Var not initialized in Rstore)
					= error("Not initialized in Rstore: ", [localized( rvar2str($Var), get-location($Var))])

[e2i-9]	e2i($Var conflicting initialization in Rscript and in Rstore) =
	error("Conflicting initialization in Rscript and in Rstore: ", 
	[localized(rvar2str($Var), get-location($Var))])

[e2i-10] e2i(Incompatible argument types $Etype in $Exp) = 
	 error("Incompatible arguments of type ", [localized(t2s($Etype), get-location($Exp))])

[e2i-11] e2i($Exp should have type $Etype)= 
	 error("Expression should have type ", [localized(t2s($Etype), get-location($Exp))])

[e2i-12] e2i($Exp should be of type bag) = 
	 error("Expression should be of type bag", [localized("exp", get-location($Exp))])

[e2i-13] e2i($Exp should be of type rel) = 
	 error("Expression should be of type relation", [localized("exp", get-location($Exp))])

[e2i-14] $StrCon := rvar2str($Var) || " with argument " || t2s($Etype)
	 ==============================================================
	 e2i(No definition for $Var with argument $Etype) = 
	 error("No definition found for ", [subject($StrCon)])

[e2i-15] e2i(No definition for field $Var) =  
	 error("No definition for ", [localized(rvar2str($Var), get-location($Var))])

[e2i-16] e2i($Var exceeds number of targets of generator) =  
	 error("Destination contains too many targets", [localized("var", get-location($Var))])

[e2i-17] $StrCon := "Field " || rvar2str($Var) || " used at different record positions"
	===============================================================
	e2i(Field name $Var used at different record positions) =
		   error($StrCon, [localized(rvar2str($Var), get-location($Var))])

[t2s-1]	t2s(int) 			= "int"
[t2s-2] t2s(bool) 			= "bool"
[t2s-3] t2s(str) 			= "str"
[t2s-4] t2s(loc) 			= "loc"
[t2s-5] t2s(undefined) 			= "undefined"
	
[t2s-6] $StrCon :=  "<" || tl2sl($Etype+) || ">"
	========================================================
	t2s(< $Etype+ >)		= $StrCon

[t2s-6] $StrCon :=  "[" || tl2sl($Etype+) || "]"
	========================================================
	t2s([ $Etype+ ])		= $StrCon

[t2s-ta] t2s(empty-bag-type)		= "{}"

[t2s-7] $StrCon :=  "bag[" || t2s($Etype) || "]"
	========================================================
	t2s(bag[$Etype])		= $StrCon

[t2s-8] $StrCon := "rel[" || tl2sl($Etype+) || "]"
	========================================================
	t2s(rel[$Etype+])		= $StrCon

[t2s-8]  $StrCon := "[" || tl2sl($Etype*) || "]"
	========================================================	 
	t2s([$Etype*]) 			= $StrCon
[t2s-9] t2s($Var) 			= rvar2str($Var)
[t2s-10]  $StrCon :=  "&" || rvar2str($Var)
	========================================================	 
	 t2s(& $Var) 			= $StrCon

[tl2sl-1]  $StrCon :=t2s($Etype) || "," || tl2sl($Etype+)
	========================================================	 
	tl2sl($Etype, $Etype+)		= $StrCon
[tl2sl-1]
	tl2sl($Etype)			= t2s($Etype)
[tl2sl-2]
	tl2sl()				= ""

%% ---- Lookup/store/delete

[te2]	lookup(<$Table, $Errors>, $Var) = lookup($Table, $Var)

[te3]	$Tenv' := well-formed-type($Etype, $Tenv),
	<$Table, $Errors> := $Tenv'
	===================================================================
	store($Tenv, $Var, $Etype) = <store($Table, $Var, $Etype), $Errors>

[te4]	delete(<$Table, $Errors>, $Var)  = <delete($Table, $Var), $Errors>

%% ---- Check that variable is not yet defined

[cnd]	check-not-defined($Var, $Tenv) = 
	if equal-type(lookup($Tenv, $Var), not-in-table, $Tenv) then $Tenv else  $Tenv + $Var redeclared fi

%% ---- get index of a field (if any)

%%[gfi1]				%% asfe bug?
%%	values($Table) = [$Etype*1, <$DclVar*1,$Etype $Var, $DclVar*2>, $Etype*2 ]
%%	=========================================================================
%%	get-field-index($Var, <$Table, $Errors>) = 1 + length($DclVar*1)

[gfi1]	%%<$DclVar+> = <$DclVar*1, $Etype $Var, $DclVar*2>
	$Integer := get-field-index1($Var, $DclVar+, 1),
	$Integer > 0 == true
	=================================================================
	get-field-index($Var, [<$DclVar+>, $Etype*]) = $Integer

[default-gfi2]	
	get-field-index($Var, [$Etype, $Etype*]) = get-field-index($Var,  [$Etype*])

[default-gfi]
	get-field-index($Var, []) = 0

[ldcl1]	get-field-index1($Var, $Etype $Var, $DclVar*, $Integer) = $Integer
[default-ldcl1]	
	get-field-index1($Var, $DclVar, $DclVar*, $Integer) = get-field-index1($Var, $DclVar*, $Integer+1)
[ldcl2]	get-field-index1($Var, , $Integer) = 0

%% ---- check-duplicate-fields

[cdf1]	<$Table, $Errors> := $Tenv,
	$Integer' := get-field-index($Var, values($Table)),
	$Tenv' := if $Integer' == 0 | $Integer' == $Integer then $Tenv 
		 else $Tenv + Field name $Var used at different record positions
		 fi
	===============================================
	check-duplicate-fields($Etype $Var, $DclVar*, $Integer, $Tenv) =
	check-duplicate-fields($DclVar*, $Integer+1, $Tenv')

[cdf2]	check-duplicate-fields(, $Integer, $Tenv) = $Tenv

%% ---- get-field-type

[gft0]	$Etype := lookup($Tenv, $Var1)
	=============================================
	get-field-type($Var1, $Var2, $Tenv) = get-field-type($Etype, $Var2, $Tenv)

[gft1]	get-field-type(<$Etype $Var, $DclVar*>, $Var, $Tenv) = <$Etype, $Tenv>

[gft2]	$Var1 != $Var2
	=============================================
	get-field-type(<$Etype $Var1, $DclVar*>, $Var2, $Tenv) = 
	get-field-type(<$DclVar*>, $Var2, $Tenv)

[gft3]	get-field-type(< > , $Var, $Tenv) = <undefined, $Tenv + No definition for field $Var>

[rt1] 	<$Etype', $Tenv'> := check($Exp, $Tenv)
      	=========================================
      	require-type($Exp, $Etype, $Tenv) = 
      	if equal-type($Etype, $Etype', $Tenv') then $Tenv' else $Tenv' + $Exp
      	should have type $Etype fi

[rt2]	$Tenv' := require-type($Exp1, $Etype1, $Tenv),
	$Tenv'' := require-type($Exp2, $Etype2, $Tenv')
	==============================================================	
	require-type2($Exp1, $Etype1, $Exp2, $Etype2, $Tenv) = $Tenv''

%%-----------------------------------------------------------------------------------

[check-const-tuple1] 
      	<$Etype1, $Tenv'> := check-const($Elem1, $Tenv), 
      	<$Etype2, $Tenv''> := check-const($Elem2, $Tenv')
    	============================================
     	check-const-tuple(<$Elem1, $Elem2>, $Tenv) = <<$Etype1, $Etype2>, $Tenv''>

[check-const-tuple2] 
      	<$Etype1, $Tenv'> := check-const($Elem1, $Tenv), 
      	<<$Etype+>, $Tenv''> := check-const-tuple(<$Elem2, $Elem+>, $Tenv')
    	============================================
     	check-const-tuple(<$Elem1, $Elem2, $Elem+>, $Tenv) = <<$Etype1, $Etype+>, $Tenv''>

%% ---- Check Elementary values

[check-const-bool] 
	check-const($BoolCon, $Tenv) = <type-of($BoolCon), $Tenv>

[check-const-int] 
	check-const($Integer, $Tenv) = <type-of($Integer), $Tenv>

[check-const-str]
	check-const($String, $Tenv) = <type-of($String), $Tenv>

[check-const-loc]
	check-const($Loc, $Tenv) = <type-of($Loc), $Tenv>

[check-const-tuple1]
	check-const(<$Elem+>, $Tenv) = check-const-tuple(<$Elem+>, $Tenv)

[check-const-bag1]
	check-const($Bag, $Tenv) = check-const-bag-or-rel(mk-iterator($Bag),$Tenv)

[check-const-br1]
	is-tuple($Elem) == false,
	<$Etype, $Tenv'> := check-const($Elem, $Tenv),
	$Etype' := bag[$Etype],
	<$Etype'', $Tenv''> := check-const-bag-or-rel({ $Elem+ }, $Tenv'),
	equal-type($Etype', $Etype'', $Tenv'') == true
	==========================================
	check-const-bag-or-rel({ $Elem, $Elem+ }, $Tenv) = <$Etype', $Tenv''>

[check-const-br2] 
	is-tuple($Elem) == false,
	<$Etype, $Tenv'> := check-const($Elem, $Tenv),
	$Etype' :=  bag[$Etype]
	==========================================
	check-const-bag-or-rel({ $Elem }, $Tenv) = <$Etype', $Tenv'>

[check-const-br31]
	is-tuple($Elem) == true,   
	<<$Etype+>, $Tenv'> := check-const-tuple($Elem, $Tenv), 
	$Etype := rel[$Etype+],
	<$Etype', $Tenv''> := check-const-bag-or-rel({ $Elem+ }, $Tenv'),
	equal-type($Etype, $Etype', $Tenv'') == true
	==========================================
	check-const-bag-or-rel({ $Elem, $Elem+ }, $Tenv) = <$Etype,$Tenv''>

[check-const-br4]
	is-tuple($Elem) == true, 
	<<$Etype+>, $Tenv'> := check-const-tuple($Elem, $Tenv), 
	$Etype := rel[$Etype+]
       ==========================================
       check-const-bag-or-rel({ $Elem }, $Tenv) = <$Etype, $Tenv'>

[check-const-br5]
	check-const-bag-or-rel({}, $Tenv) = <empty-bag-type, $Tenv>

[default-check-const-br]
	{$Elem*} := $Bag
	=========================================
	check-const-bag-or-rel($Bag, $Tenv) = <undefined, $Tenv + $Bag cannot be typed>

%%-----------------------------------------------------------------------------------

%% ---- Check arbitrary expressions

%% ---- Default case for check

[default-check]
	check($Exp, $Tenv) = <undefined, $Tenv +  $Exp cannot be typed>

%% ---- Parentheses

[check-par]
	check(( $Exp ), $Tenv) = check($Exp, $Tenv)

[check-const1]
	check($Elem, $Tenv) = check-const($Elem, $Tenv)

[check-var] 
	$Etype := lookup($Tenv, $Var)
	============================================
	check($Var, $Tenv) = 
	if equal-type($Etype, not-in-table, $Tenv) then <undefined, $Tenv + Undeclared $Var> else <$Etype, $Tenv> fi

[check-tuple-const]
 	check($Tuple, $Tenv) = check-const-tuple($Tuple, $Tenv)	

[check-tuple-exp1] 
      	<$Etype1, $Tenv'> := check($Exp1, $Tenv), 
      	<<$Etype+>, $Tenv''> := check(<$Exp2, $Exp+>, $Tenv')
      	============================================
      	check(<$Exp1, $Exp2, $Exp+>, $Tenv) = <<$Etype1, $Etype+>, $Tenv''>

[check-tuple-exp2] 
     	<$Etype1, $Tenv'> := check($Exp1, $Tenv), 
      	<$Etype2, $Tenv''> := check($Exp2, $Tenv')
      	============================================
      	check(<$Exp1, $Exp2>, $Tenv) = <<$Etype1, $Etype2>, $Tenv''>

[ct1]	container-type(<$Etype+>) = rel[$Etype+]
[default-ct2] 
	container-type($Etype) = bag[$Etype]

%% ---- Check bag/relation  expressions

[check-bag-rel1] 
	<$Etype, $Tenv'> := check($Exp, $Tenv),
	$Etype' :=  container-type($Etype),
	$Tenv'' := require-type({ $Exp+ }, $Etype', $Tenv')
	==========================================
	check({ $Exp, $Exp+ }, $Tenv) = <$Etype', $Tenv''>

[check-bag-rel2] 
	<$Etype, $Tenv'> := check($Exp, $Tenv),
	$Etype' :=  container-type($Etype)
	==========================================
	check({ $Exp }, $Tenv) = <$Etype', $Tenv'>

[check-bag-rel3]
	check({}, $Tenv) =  <empty-bag-type, $Tenv>

[default-bag-rel]
	check($Exp, $Tenv) = <undefined, $Tenv + $Exp cannot be typed>

%% ---- Check Operators

%% ---- Boolean operators

[check-and]
      	$Tenv' := require-type2($Exp1, bool, $Exp2, bool, $Tenv)
      	================================================================
      	check($Exp1 and $Exp2, $Tenv) = <bool, $Tenv'>

[check-or]
      	$Tenv' := require-type2($Exp1, bool, $Exp2, bool, $Tenv)
      	================================================================
      	check($Exp1 or $Exp2, $Tenv) = <bool, $Tenv'>

[check-implies]
      	$Tenv' := require-type2($Exp1, bool, $Exp2, bool, $Tenv)
      	================================================================
      	check($Exp1 implies $Exp2, $Tenv) = <bool, $Tenv'>

[check-not] 
      	$Tenv' := require-type($Exp, bool, $Tenv)
      	===========================================
      	check(not $Exp, $Tenv) = <bool, $Tenv'>

[check-in]
	<$Etype1, $Tenv'> := check($Exp1, $Tenv),
	$Tenv'' := require-type($Exp2, bag[$Etype1], $Tenv')
	===================================================
	check($Exp1 in $Exp2, $Tenv) = <bool, $Tenv''>

[check-notin]
	<$Etype1, $Tenv'> := check($Exp1, $Tenv),
	$Tenv'' := require-type($Exp2, bag[$Etype1], $Tenv')
	===================================================
	check($Exp1 notin $Exp2, $Tenv) = <bool, $Tenv''>

%% ---- Comparison operators

%% ---- equal and notequal

[check-eq] 
      	<$Etype1, $Tenv'> := check($Exp1, $Tenv), 
	$Tenv'' := require-type($Exp2, $Etype1, $Tenv')
      	===========================================
      	check($Exp1 == $Exp2, $Tenv) = <bool, $Tenv''>
[check-ne] 
      	<$Etype1, $Tenv'> := check($Exp1, $Tenv), 
	$Tenv'' := require-type($Exp2, $Etype1, $Tenv')
      	===========================================
      	check($Exp1 != $Exp2, $Tenv) = <bool, $Tenv''>

%% ---- compatibility for other comparison operators

[compat-cmp1]
	compat-cmp($Exp, bag[$Etype], bag[$Etype], $Tenv) = $Tenv
[compat-cmp2]
	compat-cmp($Exp, bag[$Etype], empty-bag-type, $Tenv) = $Tenv
[compat-cmp3]
	compat-cmp($Exp, empty-bag-type, bag[$Etype], $Tenv) = $Tenv
[compat-cmp4]
	compat-cmp($Exp, empty-bag-type, empty-bag-type, $Tenv) = $Tenv
[compat-cmp5]
	compat-cmp($Exp, int, int, $Tenv) = $Tenv
[compat-cmp6]
	compat-cmp($Exp, str, str, $Tenv) = $Tenv
[compat-cmp7]
	compat-cmp($Exp, loc, loc, $Tenv) = $Tenv
[compat-cmp8]
	compat-cmp($Exp, $Etype1, $Etype2, $Tenv) = 
	$Tenv + Incompatible argument types [$Etype1, $Etype2] in $Exp

[check-cmp1]
	<$Etype1, $Tenv'> := check($Exp1, $Tenv), 
      	<$Etype2, $Tenv''> := check($Exp2, $Tenv'),
	$Tenv''' := compat-cmp($Exp, norm($Etype1,$Tenv), norm($Etype2, $Tenv), $Tenv'')
	===============================================
	check-cmp($Exp, $Exp1, $Exp2, $Tenv) = <bool, $Tenv'''>

[check-le] 
      $Exp1 <= $Exp2 := $Exp
      ===========================================
      check($Exp, $Tenv) = check-cmp($Exp, $Exp1, $Exp2, $Tenv)

[check-lt] 
      $Exp1 < $Exp2 := $Exp
      ===========================================
      check($Exp, $Tenv) = check-cmp($Exp, $Exp1, $Exp2, $Tenv)

[check-ge] 
      $Exp1 >= $Exp2 := $Exp
      ===========================================
      check($Exp, $Tenv) = check-cmp($Exp, $Exp1, $Exp2, $Tenv)

[check-gt] 
      $Exp1 > $Exp2 := $Exp
      ===========================================
      check($Exp, $Tenv) = check-cmp($Exp, $Exp1, $Exp2, $Tenv)

%% ---- Integers operators

[check-int1]
	$Tenv' := require-type($Exp1, int, $Tenv),
	$Tenv'' := require-type($Exp2, int, $Tenv')
	=========================================
	check-int($Exp, $Exp1, $Exp2, $Tenv) = <int, $Tenv''>

[check-add1]
 	$Exp1 + $Exp2 := $Exp
      	===========================================
      	check($Exp, $Tenv) = check-int($Exp, $Exp1, $Exp2, $Tenv)

[check-sub1]
 	$Exp1 - $Exp2 := $Exp
      	===========================================
      	check($Exp, $Tenv) = check-int($Exp, $Exp1, $Exp2, $Tenv)
	
[check-mul1]
 	$Exp1 * $Exp2 := $Exp
      	===========================================
      	check($Exp, $Tenv) = check-int($Exp, $Exp1, $Exp2, $Tenv)

[check-div1]
 	$Exp1 / $Exp2 := $Exp
      	===========================================
      	check($Exp, $Tenv) = check-int($Exp, $Exp1, $Exp2, $Tenv)

%% --- Union-like operators

[compat-un1] 
	compat-un($Exp, bag[$Etype], bag[$Etype], $Tenv) = <bag[$Etype], $Tenv>

[compat-un2] 
	compat-un($Exp, bag[$Etype], empty-bag-type, $Tenv) = <bag[$Etype], $Tenv>

[compat-un3] 
	compat-un($Exp, empty-bag-type, bag[$Etype], $Tenv) = <bag[$Etype], $Tenv>

[compat-un4] 
	compat-un($Exp, empty-bag-type, empty-bag-type, $Tenv) = <empty-bag-type, $Tenv>

[default-compat-un]
	compat-un($Exp, $Etype1, $Etype2, $Tenv) = 
	<undefined, $Tenv + Incompatible argument types [$Etype1, $Etype2] in $Exp>  

[check-un1]
	<$Etype1, $Tenv'> := check($Exp1, $Tenv), 
      	<$Etype2, $Tenv''> := check($Exp2, $Tenv'),
	<$Etype, $Tenv'''> := compat-un($Exp, norm($Etype1,$Tenv), norm($Etype2,$Tenv), $Tenv'')
	===============================================
	check-un($Exp, $Exp1, $Exp2, $Tenv) = <$Etype, $Tenv'''>
	
[check-union]
	$Exp1 union $Exp2 := $Exp
	===========================================
	check($Exp, $Tenv) = check-un($Exp, $Exp1, $Exp2, $Tenv)

[check-inter]
	$Exp1 inter $Exp2 := $Exp
	===========================================
	check($Exp, $Tenv) = check-un($Exp, $Exp1, $Exp2, $Tenv)

[check-diff]
	$Exp1 \ $Exp2 := $Exp
	===========================================
	check($Exp, $Tenv) = check-un($Exp, $Exp1, $Exp2, $Tenv)

%% --- Composition

[compat-comp1] 
	compat-comp($Exp, bag[<$Etype1,$Etype2>], bag[<$Etype2,$Etype3>], $Tenv) = <rel[$Etype1,$Etype3], $Tenv>
[compat-comp2] 
	compat-comp($Exp, bag[<$Etype1,$Etype2>], empty-bag-type, $Tenv) = <empty-bag-type, $Tenv>
[compat-comp3] 
	compat-comp($Exp, empty-bag-type, bag[<$Etype2,$Etype3>], $Tenv) = <empty-bag-type, $Tenv>
[compat-comp4] 
	compat-comp($Exp, empty-bag-type, empty-bag-type, $Tenv) = <empty-bag-type, $Tenv>

[default-compat-comp]
	compat-comp($Exp, $Etype1, $Etype2, $Tenv) = 
	<undefined, $Tenv + Incompatible argument types [$Etype1, $Etype2] in $Exp>  

[c03] $Exp1 o $Exp2 := $Exp,
      <$Etype1, $Tenv'> := check($Exp1, $Tenv), 
      <$Etype2, $Tenv''> := check($Exp2, $Tenv'),
      <$Etype3, $Tenv'''> := compat-comp($Exp, norm($Etype1,$Tenv), norm($Etype2,$Tenv), $Tenv'')
      ===================================================================
      check($Exp, $Tenv) = <$Etype3, $Tenv'''>

%% -- Product

[compat-prod1] 
	compat-prod($Exp, bag[$Etype1], bag[$Etype2], $Tenv) = <rel[$Etype1,$Etype2], $Tenv>
[compat-prod2] 
	compat-prod($Exp, bag[$Etype1], empty-bag-type, $Tenv) = <empty-bag-type, $Tenv>
[compat-prod3] 
	compat-prod($Exp, empty-bag-type, bag[$Etype2], $Tenv) = <empty-bag-type, $Tenv>
[compat-prod4] 
	compat-prod($Exp, empty-bag-type, empty-bag-type, $Tenv) = <empty-bag-type, $Tenv>

[default-compat-prod]
	compat-prod($Exp, $Etype1, $Etype2, $Tenv) = 
	<undefined, $Tenv + Incompatible argument types [$Etype1, $Etype2] in $Exp>  

[check-product] 
	$Exp1 x $Exp2 := $Exp,
      	<$Etype1, $Tenv'> := check($Exp1, $Tenv), 
      	<$Etype2, $Tenv''> := check($Exp2, $Tenv'),
      	<$Etype3, $Tenv'''> := compat-prod($Exp, norm($Etype1,$Tenv), norm($Etype2,$Tenv), $Tenv'')
      ===========================================
      	check($Exp, $Tenv) = <$Etype3, $Tenv'''>

%% ---- Image

[clm1]	compat-lim($Exp, bag[<$Etype1,$Etype2>], $Etype2, $Tenv) = <bag[$Etype1], $Tenv>
[clm2]  compat-lim($Exp, bag[<$Etype1,$Etype2>], bag[$Etype2], $Tenv) = <bag[$Etype1], $Tenv>
[clm3]  compat-lim($Exp, bag[<$Etype1,$Etype2>], empty-bag-type, $Tenv) = <bag[$Etype1], $Tenv>
[clm4]  compat-lim($Exp, empty-bag-type, $Etype, $Tenv) = <empty-bag-type, $Tenv>

[default-clm]
	compat-lim($Exp, $Etype1, $Etype2, $Tenv) = 
	<undefined, $Tenv + Incompatible argument types [$Etype1, $Etype2] in $Exp>  

[crm1]	compat-rim($Exp, bag[<$Etype1,$Etype2>], $Etype1, $Tenv) = <bag[$Etype2], $Tenv>
[crm2]	compat-rim($Exp, bag[<$Etype1,$Etype2>], bag[$Etype1], $Tenv) = <bag[$Etype2], $Tenv>
[crm2]	compat-rim($Exp, bag[<$Etype1,$Etype2>], empty-bag-type, $Tenv) = <bag[$Etype2], $Tenv>
[crm2]	compat-rim($Exp, empty-bag-type, $Etype, $Tenv) = <empty-bag-type, $Tenv>

[default-compat-rim]
	compat-rim($Exp, $Etype1, $Etype2, $Tenv) = 
	<undefined, $Tenv + Incompatible argument types [$Etype1, $Etype2] in $Exp>  

[check-im1] 	
	$Exp0 [ -, $Exp1] := $Exp,
      	<$Etype0, $Tenv'> := check($Exp0, $Tenv), 
      	<$Etype1, $Tenv''> := check($Exp1, $Tenv'),
      	<$Etype2, $Tenv'''> := compat-lim($Exp, norm($Etype0, $Tenv), norm($Etype1, $Tenv), $Tenv'')
      	===========================================
      	check($Exp, $Tenv) = <$Etype2, $Tenv'''>

[check-im2]
	$Exp0 [ $Exp1, - ] := $Exp,
      	<$Etype0, $Tenv'> := check($Exp0, $Tenv), 
      	<$Etype1, $Tenv''> := check($Exp1, $Tenv'),
      	<$Etype2, $Tenv'''> := compat-rim($Exp, norm($Etype0,$Tenv), norm($Etype1,$Tenv), $Tenv'')
      	===========================================
	check($Exp, $Tenv) = <$Etype2, $Tenv'''>

[check-im3]
	$Exp0 [ $Exp1 ] := $Exp,
      	<$Etype0, $Tenv'> := check($Exp0, $Tenv), 
      	<$Etype1, $Tenv''> := check($Exp1, $Tenv'),
      	<$Etype2, $Tenv'''> := compat-rim($Exp, norm($Etype0,$Tenv), norm($Etype1,$Tenv), $Tenv'')
      	===========================================
	check($Exp, $Tenv) = <$Etype2, $Tenv'''>

%% ---- field selection

[check-sel]
	$Exp1 . $Var := $Exp,
	<$Etype1, $Tenv'> := check($Exp1, $Tenv),
	<$Etype2, $Tenv''> := get-field-type($Etype1, $Var, $Tenv')
	===========================================
	check($Exp, $Tenv) = <$Etype2, $Tenv''>

%% --- Transitive closure

[compat-trans1]
	compat-trans($Exp, bag[<$Etype,$Etype>], $Tenv) = <rel[$Etype, $Etype], $Tenv>
[compat-trans2]
	compat-trans($Exp, empty-bag-type, $Tenv) = <empty-bag-type, $Tenv>

[default-compat-trans]
	compat-trans($Exp, $Etype, $Tenv) = 
	<undefined, $Tenv + Incompatible argument types $Etype in $Exp>  
 
[check-closure] 
	$Exp1 + := $Exp,
      	<$Etype, $Tenv'> := check($Exp1, $Tenv),
      	<$Etype1, $Tenv''> := compat-trans($Exp, norm($Etype,$Tenv), $Tenv')
      	===========================================
      	check($Exp, $Tenv) = <$Etype1, $Tenv''>

[check-rclosure]
	$Exp1 * := $Exp,
      	<$Etype, $Tenv'> := check($Exp1, $Tenv),
      	<$Etype1, $Tenv''> := compat-trans($Exp, norm($Etype,$Tenv), $Tenv')
      	===========================================
      	check($Exp, $Tenv) = <$Etype1, $Tenv''>

%% --- size

[compat-size1]
	compat-size($Exp, bag[$Etype], $Tenv) = <int, $Tenv>
[compat-size1]
	compat-size($Exp, empty-bag-type, $Tenv) = <int, $Tenv>
[default-compat-size]
	compat-size($Exp, $Etype, $Tenv) = 
	<undefined, $Tenv + Incompatible argument types $Etype in $Exp>  
 
[check-size]
	#  $Exp1 := $Exp,
      	<$Etype, $Tenv'> := check($Exp1, $Tenv),
      	<$Etype1, $Tenv''> := compat-size($Exp, norm($Etype,$Tenv), $Tenv')
      	===========================================
      	check($Exp, $Tenv) = <$Etype1, $Tenv''>

%% --- end of checking operators

%% --- Check comprehensions
	
%% ---- Check generators and add introduced variables to type environment

[ag1] 	$Tenv' := require-type($Exp, bag[$Etype], $Tenv),
      	$Tenv'' := store($Tenv', $Var, $Etype)
      	==========================================
      	add-generators($Etype $Var : $Exp, $Gen*, $Tenv) = add-generators($Gen*, $Tenv'')

[ag2] 	<$Etype, $Tenv'> := check($Exp, $Tenv), 
      	$Tenv'' := match-targets($Target+, element-type($Etype, $Tenv), $Tenv')	
      	==========================================
      	add-generators(<$Target+> : $Exp, $Gen*, $Tenv) = add-generators($Gen*, $Tenv'')

[ag3] 	$Tenv' := require-type($Exp, bool, $Tenv)
      	==========================================
      	add-generators($Exp, $Gen*, $Tenv) = add-generators($Gen*, $Tenv')


[ag4] 	$Tenv' := require-type($Exp, $Etype, $Tenv),
      	$Tenv'' := store($Tenv', $Var, $Etype)
      	==========================================
      	add-generators($Etype $Var <- $Exp, $Gen*, $Tenv) = add-generators($Gen*, $Tenv'')

[ag5] 	<$Etype, $Tenv'> := check($Exp, $Tenv), 
	$Tenv'' := match-targets($Target+, $Etype, $Tenv')
      	==========================================
      	add-generators(<$Target+> <- $Exp, $Gen*, $Tenv) = add-generators($Gen*, $Tenv'')

[ag6] 	add-generators( , $Tenv) = $Tenv

[default-af]
      	add-generators($Gen, $Gen*, $Tenv) = $Tenv + $Gen cannot be typed

%% ---- Match a list of targets

[mt1]	equal-type($Etype1, first($Etype2, $Tenv), $Tenv) == true,
	$Tenv' := store($Tenv, $Var, $Etype1)
	=====================================================
	match-targets($Etype1 $Var, $Target*, $Etype2, $Tenv) =
	match-targets($Target*, second($Etype2,$Tenv), $Tenv')

[mt2]	equal-type($Etype1, first($Etype2, $Tenv), $Tenv) == false,
	first($Etype2, $Tenv) != undefined	
	=====================================================
	match-targets($Etype1 $Var, $Target*, $Etype2, $Tenv) =
	match-targets($Target*, second($Etype2, $Tenv), $Tenv + $Var should have type
	first($Etype2, $Tenv))

[mt3]	equal-type($Etype1, first($Etype2, $Tenv), $Tenv) == false,
	first($Etype2, $Tenv) == undefined	
	=====================================================
	match-targets($Etype1 $Var, $Target*, $Etype2, $Tenv) =
	match-targets($Target*, second($Etype2, $Tenv), $Tenv + $Var exceeds number of targets of generator)

[mt4]	$Tenv' := require-type($Exp, first($Etype, $Tenv), $Tenv)
	=====================================================
	match-targets($Exp, $Target*, $Etype, $Tenv) =
	match-targets($Target*, second($Etype, $Tenv), $Tenv')

[mt5]	match-targets( , $Etype, $Tenv) = $Tenv

%% ---  Delete a list of targets from the type environment

[dt1]	$Tenv' := delete($Tenv, $Var)
	=========================================
	delete-targets($Etype $Var, $Target*, $Tenv) = delete-targets($Target*, $Tenv')

[dt2]	delete-targets($Exp, $Target*, $Tenv) = delete-targets($Target*, $Tenv)

[dt3]	delete-targets( , $Tenv) = $Tenv

%% Delete the variables introduced in from clauses from the type environment

[dg1] 	$Tenv' := delete-targets($Target, $Tenv)
      	==========================================
      	del-generators($Target : $Exp, $Gen*, $Tenv) = del-generators($Gen*, $Tenv')

[dg2] 	$Tenv' := delete-targets($Target1, $Target+, $Tenv)
      	==========================================
      	del-generators(<$Target1, $Target+> : $Exp, $Gen*, $Tenv) = del-generators($Gen*, $Tenv')

[dg3]	del-generators($Exp, $Gen*, $Tenv) = del-generators($Gen*, $Tenv)

[df4]	$Tenv' := delete-targets($Target, $Tenv)
	=================================================================
	del-generators($Target <- $Exp, $Gen*, $Tenv) = del-generators($Gen*, $Tenv')

[df5]	$Tenv' := delete-targets($Target1, $Target+, $Tenv)
	=================================================================
	del-generators(<$Target1, $Target+> <- $Exp, $Gen*, $Tenv) = del-generators($Gen*, $Tenv')

[df6] 	del-generators( , $Tenv) = $Tenv

%% ---- Check comprehensions

[check-comprehension] 
      	$Tenv' := add-generators($Gen+, $Tenv),
      	<$Etype, $Tenv''> := check({$Exp+}, $Tenv'),
      	$Tenv''' := del-generators($Gen+, $Tenv'')
      	======================================
      	check({ $Exp+ | $Gen+ }, $Tenv) = <$Etype, $Tenv'''>

%% --- Check Exists

[check-exists1]
	$Tenv' := add-generators($SimpleGen, $Tenv),
	$Tenv'' := require-type($Test, bool, $Tenv'),
	$Tenv''' := del-generators($SimpleGen, $Tenv'')
	=====================================
	check(exists($SimpleGen | $Test), $Tenv) = <bool, $Tenv'''>

%% --- Check Forall

[check-forall1]
	$Tenv' := add-generators($SimpleGen, $Tenv),
	$Tenv'' := require-type($Test, bool, $Tenv'),
	$Tenv''' := del-generators($SimpleGen, $Tenv'')
	=====================================
	check(forall($SimpleGen | $Test), $Tenv) = <bool, $Tenv'''>

%% ---- Function applications

%% ---- collect-actuals

[ca1]	<$Etype, $Tenv'> := check($Exp, $Tenv),
	< [$Etype*], $Tenv''> := collect-actuals($Exp*, $Tenv')
	===========================================
	collect-actuals($Exp, $Exp*, $Tenv) = <[$Etype, $Etype*], $Tenv''>

[ca2]	collect-actuals( , $Tenv) = <[], $Tenv>

%% ---- Check function application

[check-appl] 
	<$Etype, $Tenv'> := collect-actuals($Exp*, $Tenv)
	============================================
	check($Var ( $Exp* ), $Tenv) = find-result-type($Var, $Etype, $Tenv')

%% ---- add-formals

[af1]	$Tenv' := check-not-defined($Var, $Tenv),
	$Tenv'' := store($Tenv', $Var, $Etype),
	$Tenv''' := add-formals([$DclVar*], $Tenv'')
	===========================================
	add-formals([$Etype $Var, $DclVar*], $Tenv) = $Tenv'''

[af2] add-formals([], $Tenv) = $Tenv

%% ---- del-formals

[df1]	$Tenv' := delete($Tenv, $Var),
	$Tenv'' := del-formals([$DclVar*], $Tenv')
	===========================================
	del-formals([$Etype $Var, $DclVar*], $Tenv) = $Tenv''

[df2]	del-formals([], $Tenv) = $Tenv

%% Extract the types from a list of formal parameters

[et1]	[$Etype*] := extract-types([$DclVar*])
	===========================================
	extract-types([$Etype $Var, $DclVar*]) = [$Etype, $Etype*]

[et2] extract-types([]) = []

%% ---- Check variable declarations

[check-vardef1]
	check-stat($Etype $Var, $Tenv) = store($Tenv, $Var, $Etype)

[check-vardef2] 
	check-stat($Etype $Var = $Exp, $Tenv) =  check-stat($Etype $Var() = $Exp, $Tenv)

%%[check-vardef3]
%%	check-stat(bag[$Etype] $Var = {}, $Tenv) = store($Tenv, $Var, bag[$Etype])

%%[check-vardef4]
%%	check-stat(rel[$Etype1,$Etype2] $Var = {}, $Tenv) = store($Tenv, $Var, rel[$Etype1,$Etype2])

%% ---- Check function declarations

[check-fundef] 
	$Tenv1 := check-not-defined($Var, $Tenv),
	$Tenv2 := add-formals([$DclVar*], $Tenv1),
	$Tenv3 := require-type($Exp, $Etype, $Tenv2),      
	$Tenv4 := del-formals([$DclVar*], $Tenv3), 
	$Tenv5 := store($Tenv4, $Var, fun extract-types([$DclVar*]) to $Etype) 
	===========================================
	check-stat($Etype $Var ($DclVar*) = $Exp, $Tenv) = $Tenv5

%% ---- Check type declarations

[check-typedef1]
	$Tenv' := check-not-defined($Var, $Tenv),
	$Tenv'' :=  check-duplicate-fields($DclVar+, 1, $Tenv')
	=============================================
	check-stat(type $Var = < $DclVar+ >, $Tenv) = store($Tenv'', $Var, <$DclVar+ >)

[check-typedef1]
	$Tenv' := check-not-defined($Var, $Tenv)
	=============================================
	check-stat(type $Var = $Etype, $Tenv) = store($Tenv', $Var, $Etype)

%% ---- Check assert statement

[check-assert]
	check-stat(assert $String : $Exp, $Tenv) = require-type($Exp, bool, $Tenv)

%% ---- Check yield statement

[check-yield]
	<$Etype, $Tenv'> := check($Var, $Tenv)
	===============================================
	check-stat(yield $Var, $Tenv) =  $Tenv'

%% ---- Check set of equations

[CEQ1]	check-stat(equations (limit $Integer) initial $InitVar+ satisfy  $Eq+ end equations, $Tenv) = 
	check-eqs($InitVar+, $Eq+, $Tenv)

[CEQ2]	check-stat(equations initial $InitVar+ satisfy  $Eq+ end equations, $Tenv) = 
	check-eqs($InitVar+, $Eq+, $Tenv)

[CEQS1]	$Tenv1 := check-stat($Etype $Var = $Exp, $Tenv)
	===============================================	
	check-eqs($Etype $Var init $Exp $InitVar*, $Eq+, $Tenv) =
	check-eqs($InitVar*, $Eq+, $Tenv1)

[CEQS2]	<$Etype, $Tenv1> := check($Var, $Tenv),
        $Tenv2 := require-type($Exp, $Etype, $Tenv1)
        =========================================
	check-eqs( , $Var = $Exp $Eq*, $Tenv) = check-eqs( , $Eq*, $Tenv2)

[CEQS2]	check-eqs( , , $Tenv) = $Tenv

%% ---- Default case for check-stat

[default-check-stat]
	check-stat($Stat, $Tenv) = $Tenv +  $Stat cannot be typed



%% ---- Find result type of a function, given list of argument types

[frt1]	lookup($Tenv, $Var) == not-in-table
	==================================
	find-result-type($Var, [$Etype*], $Tenv) = <undefined, $Tenv + Undeclared $Var>

[frt2]	fun [$Etype*2] to $Etype := lookup($Tenv, $Var),
	<true, $Table> := match-types([$Etype*2],  [$Etype*1], new-table, $Tenv)
	===========================================
	find-result-type($Var, [$Etype*1], $Tenv) = substitute($Etype, $Table, $Tenv)

[default-frt]
	find-result-type($Var, [$Etype*1], $Tenv) = <undefined, $Tenv + No definition for $Var with argument [$Etype*1]>

%% ---- match types

[mt1]	equal-type($Etype, $Etype', $Tenv) == true
	================================================
	match-types($Etype, $Etype', $Table, $Tenv) = <true, $Table>

[mt2]	$Etype' := lookup($Tenv, $Var)
	================================================
	match-types($Var, $Etype, $Table, $Tenv) = match-types($Etype', $Etype, $Table, $Tenv)

[mt3]	$Etype' := lookup($Tenv, $Var)
	================================================
	match-types($Etype, $Var, $Table, $Tenv) = match-types($Etype, $Etype', $Table, $Tenv)

[mt4]	lookup($Table, $Var) == not-in-table
	================================================
	match-types(& $Var, $Etype, $Table, $Tenv) = <true, store($Table, $Var, $Etype)>

[mt5]	equal-type(lookup($Table, $Var), $Etype, $Tenv) == true
	================================================
	match-types(& $Var, $Etype, $Table, $Tenv) = <true, $Table>

[mt6]	<true, $Table'> := match-types($Etype1, $Etype2, $Table, $Tenv)
	===================================================
	match-types(bag[$Etype1], bag[$Etype2], $Table, $Tenv) =  <true, $Table'>

[mt6a]	match-types(bag[$Etype1], empty-bag-type, $Table, $Tenv) =  <true, $Table>

[mt7]	match-types(rel[$Etype+], $Etype, $Table, $Tenv) = match-types(bag[<$Etype+>], $Etype, $Table, $Tenv)

[mt8]	match-types($Etype, rel[$Etype+], $Table, $Tenv) = match-types($Etype, bag[<$Etype+>], $Table, $Tenv)

[mt9]	<true, $Table'> := match-types(<$Etype+>, <$Etype+'>, $Table, $Tenv)
	===================================================
	match-types(bag[<$Etype+>], bag[<$Etype+'>], $Table, $Tenv) =  <true, $Table'>

[mt9a]	match-types(bag[<$Etype+>], empty-bag-type, $Table, $Tenv) =  <true, $Table>

[mt10]	<true, $Table'> := match-types($Etype1, $Etype1', $Table, $Tenv),
	<true, $Table''> := match-types(<$Etype2, $Etype+>, <$Etype2', $Etype+'>, $Table', $Tenv)
	=========================================================
	match-types(<$Etype1, $Etype2, $Etype+>, <$Etype1', $Etype2', $Etype+'>, $Table, $Tenv) = <true, $Table''>

[mt11]	<true, $Table'> := match-types($Etype1, $Etype1', $Table, $Tenv),
	<true, $Table''> := match-types($Etype2, $Etype2', $Table', $Tenv)
	===================================================
	match-types(<$Etype1, $Etype2>, <$Etype1', $Etype2'>, $Table, $Tenv) =  <true, $Table''>

[mt12]	match-types(<$DclVar+>, $Etype, $Table, $Tenv) = 
	match-types(get-tuple-type(<$DclVar+>), $Etype, $Table, $Tenv)

[mt13]	match-types($Etype, <$DclVar+>, $Table, $Tenv) = 
	match-types($Etype, get-tuple-type(<$DclVar+>), $Table, $Tenv)

[mt14]	<true, $Table'> := match-types($Etype1, $Etype1', $Table, $Tenv),
	<true, $Table''> := match-types([$Etype*], [$Etype*'], $Table', $Tenv)
	===================================================
	match-types([$Etype1, $Etype*], [$Etype1', $Etype*'], $Table, $Tenv) = <true, $Table''>

[mt15]  match-types([], [], $Table, $Tenv) = <true, $Table>

[default-mt]
	match-types($Etype1, $Etype2, $Table, $Tenv) = <false, $Table>

%% ---- cover-empty

[ce1]	cover-empty(rel[$Etype*, undefined, $Etype*']) = empty-bag-type
[ce2]	cover-empty(bag[undefined]) = empty-bag-type
[default-ce]
	cover-empty($Etype) = $Etype

%% ---- Substitute type

[sb1]	$Etype := lookup($Table, $Var)
	======================================================
	substitute(& $Var, $Table, $Tenv) = 
	if equal-type($Etype, not-in-table, $Tenv) then <undefined, $Tenv + Undeclared $Var>
						   else <$Etype, $Tenv> fi

[sb2]   <$Etype', $Tenv'> := substitute($Etype, $Table, $Tenv)
	======================================================
	substitute(bag[$Etype], $Table, $Tenv) = <cover-empty(bag[$Etype']), $Tenv>

[sb3]	<<$Etype+'>, $Tenv'> := substitute(<$Etype+>, $Table, $Tenv)
	=======================================================
	substitute(rel[$Etype+], $Table, $Tenv) = <cover-empty(rel[$Etype+']), $Tenv'>

[sb4]	<$Etype1', $Tenv'> := substitute($Etype1, $Table, $Tenv),
	<$Etype2', $Tenv''> := substitute($Etype2, $Table, $Tenv)
	=======================================================
	substitute(<$Etype1,$Etype2>, $Table, $Tenv) = <<$Etype1', $Etype2'>, $Tenv''>

[sb5]	<$Etype1', $Tenv'> := substitute($Etype1, $Table, $Tenv),
	<<$Etype+'>, $Tenv''> := substitute(<$Etype2, $Etype+>, $Table, $Tenv')
	=========================================================
	substitute(<$Etype1, $Etype2, $Etype+>, $Table, $Tenv) = <<$Etype1', $Etype+'>, $Tenv''>

[default-sb]
	substitute($Etype, $Table, $Tenv) = <$Etype, $Tenv>

%% ---- The types of the built-in functions

[bi-1]  built-ins = [
		<id,      	fun [ bag[&T] ] 			to rel[&T,&T]>,
      		<domain,  	fun [ rel[&T1,&T2] ] 			to bag[&T1]>,
     		<range,   	fun [ rel[&T1,&T2] ] 			to bag[&T2]>,
       		<carrier, 	fun [ rel[&T,&T] ] 			to bag[&T]>,
		<top,     	fun [ rel[&T,&T] ] 			to bag[&T]>,
		<bottom,  	fun [ rel[&T,&T] ] 			to bag[&T]>,
       		<inv,     	fun [ rel[&T1,&T2] ] 			to rel[&T2,&T1]>,
		<compl,   	fun [ rel[&T1, &T2] ] 			to rel[&T1,&T2]>,

       		<domainR, 	fun [ rel[&T1,&T2], bag[&T1] ]		to rel[&T1,&T2]>,
       		<rangeR,    	fun [ rel[&T1,&T2], bag[&T2] ] 		to rel[&T1,&T2]>,
       		<carrierR,    	fun [ rel[&T,&T], bag[&T] ] 		to rel[&T,&T]>,

       		<domainX,    	fun [ rel[&T1,&T2], bag[&T1] ] 		to rel[&T1,&T2]>,
       		<rangeX,    	fun [ rel[&T1,&T2], bag[&T2] ] 		to rel[&T1,&T2]>,
       		<carrierX,    	fun [	rel[&T,&T], bag[&T] ] 		to rel[&T,&T]>,
                <first,     	fun [ <&T1,&T2>] 			to &T1>,
                <second,     	fun [ <&T1,&T2> ] 			to &T2>,

		<power0,	fun[ bag[&T] ]				to bag[bag[&T]]>,
		<power1,	fun[ bag[&T] ]				to bag[bag[&T]]>,

		<all-paths-from,fun[ rel[&T,&T], bag[&T] ]		to bag[rel[&T,&T]]>,

                <reachX,  	fun [ bag[&T], bag[&T], rel[&T,&T] ] 	to rel[&T,&T] >,
                <reachR,  	fun [ bag[&T], bag[&T], rel[&T,&T] ] 	to rel[&T,&T] >,

		<filename,	fun [ loc ]				to str >,
		<beginline,	fun [ loc ]				to int >,
		<begincol,	fun [ loc ]				to int >,

		<endline,	fun [ loc ]				to int >,
		<endcol,	fun [ loc ]				to int >,

		<sum,		fun [ bag[int] ]			to int >,
		<average,	fun [ bag[int] ]			to int >,
		<max,		fun [ bag[int] ]			to int >,
		<min,		fun [ bag[int] ]			to int >

        ]

%% ---- Where expressions

[WH1]	<$Table, $Errors> := $Tenv,
	$Tenv' := check-rscript($Stat+, $Tenv),
	<$Etype, <$Table', $Errors'>> := check($Exp, $Tenv')
	===================================================
	check($Exp where $Stat+ endwhere, $Tenv) = <$Etype, <$Table, $Errors'>>


%% ---- Check script

[crs]	$Stat* := $Rscript,
	<$Table, $Errors> := check-rscript($Stat*,  <built-ins, errors[]>)
	===============================================
	check-rscript($Rscript) = convert-errors($Errors)


[crs2]	check-rscript($Stat $Stat*, $Tenv) = check-rscript($Stat*, check-stat($Stat, $Tenv))
[crs3]	check-rscript( , $Tenv) = $Tenv


%% ---- Check script with rstore
 
[cwr1]	$Stat* := $Rscript,
       	$Tenv := check-rscript($Stat*,  <built-ins, errors[]>),
	<$Table, $Errors> := check-rstore($Stat*, $Rstore, $Tenv)
	=====================================================================
     	check-rscript-with-rstore($Rscript, $Rstore) = convert-errors($Errors)

%% ---- Check Rstore

[check-rstore1]
      	$Elem := value($Var, $Rstore),
      	$Tenv' := require-type($Elem, $Etype, $Tenv)
	=====================================================================
      	check-rstore($Etype $Var $Stat*, $Rstore, $Tenv) = check-rstore($Stat*, $Rstore, $Tenv')

[check-rstore2]
      	value($Var, $Rstore) == *undefined*
	=====================================================================
      	check-rstore($Etype $Var $Stat*, $Rstore, $Tenv) = 
	check-rstore($Stat*, $Rstore, $Tenv + $Var not initialized in Rstore)

[check-rstore3]
	value($Var, $Rstore) == *undefined*
	===================================================================== 
      	check-rstore($Etype $Var = $Exp, $Rstore, $Tenv) = $Tenv

[check-rstore4]
	value($Var, $Rstore) != *undefined*
	===================================================================== 
      	check-rstore($Etype $Var = $Exp $Stat*, $Rstore, $Tenv) = 
	check-rstore($Stat*, $Rstore,$Tenv + $Var conflicting initialization in Rscript and in Rstore)

[check-rstore7]
	check-rstore( , $Rstore, $Tenv) = $Tenv

[default-check-rstore]
	check-rstore($Stat $Stat*, $Rstore, $Tenv) = check-rstore($Stat*, $Rstore, $Tenv)



