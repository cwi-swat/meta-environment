equations

[empty]  EmptyRel = {}

[comp-1] compose({<E, E'>, Tuple*1}, {Tuple*2}) = 
         union(product(E, E' . {Tuple*2}), compose({Tuple*1}, {Tuple*2}))
[comp-2] compose({}, {Tuple*}) = {}

[x-1]    product(E, {E', E*}) = union( {<E, E'>}, product(E, {E*}))
[x-2]    product(E, {}) = {}

[bx-1]   product({E, E*1}, {E*2}) = union(product(E, {E*2}), product({E*1}, {E*2}))
[bx-2]   product({}, {E*2}) = {}

[dom-1]  domain({<E,E'>, Tuple*}) = union({E}, domain({Tuple*}))
[dom-2]  domain({}) = {}

[ran-1]  range({<E,E'>, Tuple*}) = union({E'}, range({Tuple*}))
[ran-2]  range({}) = {}

[car-1]  carrier({<E,E'>, Tuple*}) = union(union({E},{E'}), carrier({Tuple*}))
[car-2]  carrier({}) = {}

[domR-1] in(E, {E*}) = false
         ==================================================
         domR({Tuple*1, <E, E'>, Tuple*2}, {E*}) = domR({Tuple*1, Tuple*2}, {E*})

[default-domR]
	 domR({Tuple*}, {E*}) = {Tuple*}

[domX-1] in(E, {E*}) = true
         ==================================================
         domX({Tuple*1, <E, E'>, Tuple*2}, {E*}) = domX({Tuple*1, Tuple*2}, {E*})

[default-domX]
	 domX({Tuple*}, {E*}) = {Tuple*}

[ranR-1] in(E', {E*}) = false
         ==================================================
         ranR({Tuple*1, <E, E'>, Tuple*2}, {E*}) = ranR({Tuple*1, Tuple*2}, {E*})

[default-ranR]
	 ranR({Tuple*}, {E*}) = {Tuple*}

[ranX-1] in(E', {E*}) = true
         ==================================================
         ranX({Tuple*1, <E, E'>, Tuple*2}, {E*}) = ranR({Tuple*1, Tuple*2}, {E*})

[default-ranX]
	 ranX({Tuple*}, {E*}) = {Tuple*}


[carR-1] in(E, {E*}) & in(E', {E*}) = false
         ==================================================
         carR({Tuple*1, <E, E'>, Tuple*2}, {E*}) = carR({Tuple*1, Tuple*2}, {E*})

[default-carR]
	 carR({Tuple*}, {E*}) = {Tuple*}

[carX-1] in(E, {E*}) |  in(E', {E*}) = true
         ==================================================
         carX({Tuple*1, <E, E'>, Tuple*2}, {E*}) = carX({Tuple*1, Tuple*2}, {E*})

[default-carX]
	 carX({Tuple*}, {E*}) = {Tuple*}


[top-1]  top(Rel) = diff(domain(Rel), range(Rel))

[bot-1]  bottom(Rel) = diff(range(Rel), domain(Rel))

[rim-1]  E . {Tuple*1, Tuple*2} = {E*}
         =====================================
         E . {Tuple*1, <E, E'>, Tuple*2} = {E', E*}

[default-rim-2]
         E . {Tuple*} = {}

[brim-1] {E, E*} . Rel  = union(E . Rel,  {E*} . Rel)
[brim-2] {} . Rel = {}


[lim-1]  {Tuple*1, Tuple*2} . E'  = {E*}
         =====================================
         {Tuple*1, <E, E'>, Tuple*2} . E' = {E, E*}

[default-lim-2]
         {Tuple*} . E' = {}
 
[slim-1] Rel . {E, E*} = union(Rel . E, Rel . {E*})
[slim-2] Rel . {} = {}

[size-1] Rel = {Tuple*}
         ====================================
         size(Rel) = size({Tuple*})

[inv-1]  inv({<E,E'>, Tuple*}) = union({<E',E>}, inv({Tuple*}))
[inv-2]  inv({}) = {}

[cmp-1]  Bag = carrier(Rel)
         =====================================
         compl(Rel) = diff(product(Bag, Bag), Rel)


[id-1]   id({E, E*}) = union({<E, E>}, id({E*}))
[id-2]   id({}) ={}

[cl-1] 	closure(Rel, Rel1, Rel1) = Rel1

[cl-2] 	Rel1 != Rel2
       	=========================================
       	closure(Rel, Rel1, Rel2) = closure(Rel, Rel2, union(Rel2, compose(Rel2, Rel)))

[tcl-1]  Rel + = closure(Rel, {}, Rel)

[rtcl-1] Rel* = union(Rel+, id(carrier(Rel)))

%% --- reachX

[rX-3] Rel' = carX(Rel, Bag2),
       Rel''= domR(Rel', Bag1)
       =========================================
       reachX(Bag1, Bag2, Rel) = closure(Rel', {}, Rel'')

%% --- reachR

[rX-3] Rel' = carR(Rel, Bag2),
       Rel''= domR(Rel', Bag1)
       =========================================
       reachR(Bag1, Bag2, Rel) = closure(Rel', {}, Rel'')

%% --- if on Rel

[if-1]   if true then Rel1 else Rel2 fi  = Rel1
[if-2]   if false then Rel1 else Rel2 fi = Rel2
