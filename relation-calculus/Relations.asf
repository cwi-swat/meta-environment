equations

[st1]	$Elem+ = $Elem'
	=============================================================
	<$Elem1, $Elem2, $Elem+> = <$Elem1, <$Elem2, $Elem'>>

[st1]	$Elem+1 = $Elem', $Elem+2
	=============================================================
	<$Elem1, $Elem2, $Elem+1> = <$Elem1, <$Elem2, $Elem', $Elem+2>>

%% ---- is-rel

%%[ir1]	is-rel(bag($C, $Bag1, <$Elem1, $Elem2>, $Bag2)) = true

[ir1]	is-rel({<$Elem1, $Elem2>, $Elem*}) = true

[default-ir]
	is-rel($Bag) = false

%% ----	compose

[comp-0] compose($Bag1, $Bag2) = compose(mk-iterator($Bag1), $Bag2)

[comp-1]
	is-empty-iter($BagIter) = false,
	head($BagIter) = <$Elem, $Elem'>
	=======================================================
	compose($BagIter, $Bag) = union(product($Elem, rimage($Elem', $Bag)), compose(tail($BagIter), $Bag))

[comp-2]   
	is-empty-iter($BagIter) = true
	=============================================
	compose($BagIter, $Bag) = empty-bag

%% ----	product

[prode-0]
	product($Elem, $Bag) = product($Elem, mk-iterator($Bag))

[prode-1]   
	is-empty-iter($BagIter) = false,
	$Elem' = head($BagIter)
	=============================================
	product($Elem, $BagIter) = union1(<$Elem, $Elem'>, product($Elem, tail($BagIter)))

[prode-2]
	is-empty-iter($BagIter) = true
	=============================================
	product($Elem, $BagIter) = empty-bag

[prodb-0]
	product($Bag1, $Bag2) = product(mk-iterator($Bag1), $Bag2)

[prodb-1] 
	is-empty-iter($BagIter) = false,
	$Elem = head($BagIter)
	===============================================
	product($BagIter, $Bag) = union(product($Elem, $Bag), product(tail($BagIter), $Bag))

[prodb-2] 
	is-empty-iter($BagIter) = true
	================================================
	product($BagIter, $Bag) = empty-bag

%% ----	 domain

[dom-0]	 domain($Bag) = domain(mk-iterator($Bag))

[dom-1]  is-empty-iter($BagIter) = false,
	 <$Elem,$Elem'> = head($BagIter)
	 =================================================
	 domain($BagIter) = union1($Elem, domain(tail($BagIter)))

[dom-2]  is-empty-iter($BagIter) = true
	 =================================================
	 domain($BagIter) = empty-bag

%% ---- range

[ran-0]	 range($Bag) = range(mk-iterator($Bag))

[ran-1]  is-empty-iter($BagIter) = false, 
	 <$Elem,$Elem'> = head($BagIter)
	 =================================================
	 range($BagIter) = union1($Elem', range(tail($BagIter)))

[ran-2]  is-empty-iter($BagIter) = true
	 =================================================
	 range($BagIter) = empty-bag

%% ----	 carrier

[car-0]	 carrier($Bag) = carrier(mk-iterator($Bag))

[car-1]	 is-empty-iter($BagIter) = false,
	 <$Elem, $Elem'> = head($BagIter)
	 ==============================================
	 carrier($BagIter) = union(union1($Elem, insert($Elem', empty-bag)), carrier(tail($BagIter)))

[car-2]	is-empty-iter($BagIter) = true
	================================================
	carrier($BagIter) = empty-bag

%% ----	domR

[domR-0] domR($Bag1, $Bag2) = domR(mk-iterator($Bag1), $Bag2)

[domR-1] is-empty-iter($BagIter) = false,
	 <$Elem, $Elem'> = head($BagIter),
	 in($Elem, $Bag) = false
	 ===================================================
	 domR($BagIter, $Bag) = domR(tail($BagIter), $Bag)

[domR-2] is-empty-iter($BagIter) = false,
	 <$Elem, $Elem'> = head($BagIter),
	 in($Elem, $Bag) = true
	 ===================================================
	 domR($BagIter, $Bag) = union1(<$Elem, $Elem'>, domR(tail($BagIter),
	 $Bag))

[domR-3] is-empty-iter($BagIter) = true
	 ===================================================
	 domR($BagIter, $Bag) = empty-bag

%% ----	 domX

[domX-0] domX($Bag1, $Bag2) = domX(mk-iterator($Bag1), $Bag2)

[domX-1] is-empty-iter($BagIter) = false,
	 <$Elem, $Elem'> = head($BagIter),
	 in($Elem, $Bag) = true
	 ===================================================
	 domX($BagIter, $Bag) = domX(tail($BagIter), $Bag)

[domX-2] is-empty-iter($BagIter) = false,
	 <$Elem, $Elem'> = head($BagIter),
	 in($Elem, $Bag) = false
	 ===================================================
	 domX($BagIter, $Bag) = union1(<$Elem, $Elem'>, domX(tail($BagIter), $Bag))

[domX-3] is-empty-iter($BagIter) = true
	 ===================================================
	 domX($BagIter, $Bag) = empty-bag
	
%% ----	ranR

[ranR-0] ranR($Bag1, $Bag2) = ranR(mk-iterator($Bag1), $Bag2)

[ranR-1] is-empty-iter($BagIter) = false,
	 <$Elem, $Elem'> = head($BagIter),
	 in($Elem', $Bag) = false
	 ===================================================
	 ranR($BagIter, $Bag) = ranR(tail($BagIter), $Bag)

[ranR-2] is-empty-iter($BagIter) = false,
	 <$Elem, $Elem'> = head($BagIter),
	 in($Elem', $Bag) = true
	 ===================================================
	 ranR($BagIter, $Bag) = union1(<$Elem, $Elem'>, ranR(tail($BagIter), $Bag))

[ranR-3] is-empty-iter($BagIter) = true
	 ===================================================
	 ranR($BagIter, $Bag) = empty-bag

%% ----	 ranX

[ranX-0] ranX($Bag1, $Bag2) = ranX(mk-iterator($Bag1), $Bag2)

[ranX-1] is-empty-iter($BagIter) = false,
	 <$Elem, $Elem'> = head($BagIter),
	 in($Elem', $Bag) = true
	 ===================================================
	 ranX($BagIter, $Bag) = ranX(tail($BagIter), $Bag)

[ranX-2] is-empty-iter($BagIter) = false,
	 <$Elem, $Elem'> = head($BagIter),
	 in($Elem', $Bag) = false
	 ===================================================
	 ranX($BagIter, $Bag) = union1(<$Elem, $Elem'>, ranX(tail($BagIter), $Bag))

[ranX-3] is-empty-iter($BagIter) = true
	 ===================================================
	 ranX($BagIter, $Bag) = empty-bag

%% ----	 carR

[carR-0] carR($Bag1, $Bag2) = carR(mk-iterator($Bag1), $Bag2)

[carR-1] is-empty-iter($BagIter) = false,
	 <$Elem, $Elem'> = head($BagIter),
	 in($Elem, $Bag) & in($Elem', $Bag) = false
	 ===================================================
	 carR($BagIter, $Bag) = carR(tail($BagIter), $Bag)

[carR-2] is-empty-iter($BagIter) = false,
	 <$Elem, $Elem'> = head($BagIter),
	 in($Elem, $Bag) & in($Elem', $Bag) = true	 
	 ===================================================
	 carR($BagIter, $Bag) = union1(<$Elem, $Elem'>, carR(tail($BagIter), $Bag))

[carR-3] is-empty-iter($BagIter) = true
	 ===================================================
	 carR($BagIter, $Bag) = empty-bag

%% ----	 carX

[carX-0] carX($Bag1, $Bag2) = carX(mk-iterator($Bag1), $Bag2)

[carX-1] is-empty-iter($BagIter) = false,
	 <$Elem, $Elem'> = head($BagIter),
	 in($Elem, $Bag) | in($Elem', $Bag) = true
	 ===================================================
	 carX($BagIter, $Bag) = carX(tail($BagIter), $Bag)

[carX-2] is-empty-iter($BagIter) = false,
	 <$Elem, $Elem'> = head($BagIter),
	 in($Elem, $Bag) | in($Elem', $Bag) = false	 
	 ===================================================
	 carX($BagIter, $Bag) = union1(<$Elem, $Elem'>, carX(tail($BagIter), $Bag))

[carX-3] is-empty-iter($BagIter) = true
	 ===================================================
	 carX($BagIter, $Bag) = empty-bag

%% ---- bottom

[top-1]  top($Rel) = diff(domain($Rel), range($Rel))

%% ----	 bottom

[bot-1]  bottom($Rel) = diff(range($Rel), domain($Rel))

%% ----	 rimage

[rim-0]	 rimage($Elem, $Bag) = rimage($Elem, mk-iterator($Bag))

[rim-1]	 is-empty-iter($BagIter) = false,
	 <$Elem1, $Elem1'> = head($BagIter),
	 $Elem = $Elem1
	 ==================================================
	 rimage($Elem, $BagIter) = union1($Elem1', rimage($Elem, tail($BagIter)))

[rim-2]	 is-empty-iter($BagIter) = false,
	 <$Elem1, $Elem1'> = head($BagIter),
	 $Elem != $Elem1
	 ==================================================
	 rimage($Elem, $BagIter) = rimage($Elem, tail($BagIter))

[rim-2]	 is-empty-iter($BagIter) = true
	 ==================================================
	 rimage($Elem, $BagIter) = empty-bag

[brim-0] rimage($Bag1, $Bag2) = rimage(mk-iterator($Bag1), $Bag2)

[brim-1] is-empty-iter($BagIter) = false,
	 $Elem = head($BagIter)
	 ===================================================
	 rimage($BagIter, $Bag) = union(rimage($Elem, $Bag), rimage(tail($BagIter), $Bag))

[brim-2] is-empty-iter($BagIter) = true
	 ====================================================
	 rimage($BagIter, $Bag) = empty-bag

%% ----	 limage

[lim-0]	 limage($Bag, $Elem) = limage(mk-iterator($Bag), $Elem)

[lim-1]	 is-empty-iter($BagIter) = false,
	 <$Elem1, $Elem1'> = head($BagIter),
	 $Elem = $Elem1'
	 ==================================================
	 limage($BagIter, $Elem) = union1($Elem1, limage(tail($BagIter), $Elem))

[lim-2]	 is-empty-iter($BagIter) = false,
	 <$Elem1, $Elem1'> = head($BagIter),
	 $Elem != $Elem1'
	 ==================================================
	 limage($BagIter, $Elem) = limage(tail($BagIter), $Elem)

[lim-2]	 is-empty-iter($BagIter) = true
	 ==================================================
	 limage($BagIter, $Elem) = empty-bag

[blim-0] limage($Bag1, $Bag2) = limage($Bag1, mk-iterator($Bag2))

[blim-1] is-empty-iter($BagIter) = false,
	 $Elem = head($BagIter)
	 ===================================================
	 limage($Bag, $BagIter) = union(limage($Bag, $Elem), limage($Bag, tail($BagIter)))

[blim-2] is-empty-iter($BagIter) = true
	 ====================================================
	 limage($Bag, $BagIter) = empty-bag

%% ----	 inv

[inv-0]	 inv($Bag) = inv(mk-iterator($Bag))

[inv-1]	 is-empty-iter($BagIter) = false,
	 <$Elem, $Elem'> = head($BagIter)
	 ====================================================
	 inv($BagIter) = union1(<$Elem', $Elem>, inv(tail($BagIter)))

[inv-2]	 is-empty-iter($BagIter) = true
	 ===================================================
	 inv($BagIter) = empty-bag

%% ----	 compl

[cmp-1]  $Bag = carrier($Rel)
         =====================================
         compl($Rel) = diff(product($Bag, $Bag), $Rel)

%% ---- id

[id-0]	 id($Bag) = id(mk-iterator($Bag))

[id-1]	 is-empty-iter($BagIter) = false,
	 $Elem = head($BagIter)
	 ==================================================
	 id($BagIter) = union1(<$Elem, $Elem>, id(tail($BagIter)))

[id-2]	 is-empty-iter($BagIter) = true
	 ==================================================
	 id($BagIter) = empty-bag

%% ---- closure

%%[cl-1] equal($Rel1, $Rel2) = false
%%       =========================================
%%       closure($Rel, $Rel1, $Rel2) = closure($Rel, $Rel2, union($Rel2, compose($Rel2, $Rel)))

%%[default-cl]
%%	closure($Rel, $Rel1, $Rel2) = $Rel1

[cl-1]	$Rel1 != $Rel2,
	$Rel2' = closure1(mk-iterator($Rel2), $Rel, $Rel2) 
	==============================================	
	closure($Rel, $Rel1, $Rel2) = closure($Rel, $Rel2, $Rel2')

[default-cl]
	closure($Rel, $Rel1, $Rel2) = $Rel2

[cl1-1]	is-empty-iter($BagIter) = false,
	head($BagIter) = <$Elem1, $Elem1'>,
	$Rel2' = closure-comp(mk-iterator($Rel1), $Elem1, $Elem1', $Rel2)
	==============================================================
	closure1($BagIter, $Rel1, $Rel2) = closure1(tail($BagIter), $Rel1, $Rel2')

[cl1-2]	is-empty-iter($BagIter) = true
	==============================================================
	closure1($BagIter, $Rel1, $Rel2) = $Rel2

[cc-1]	is-empty-iter($BagIter) = false,
	head($BagIter) = <$Elem2, $Elem2'>,
	$Elem1' = $Elem2
	=======================================================
	closure-comp($BagIter, $Elem1, $Elem1', $Bag) = 
	closure-comp(tail($BagIter), $Elem1, $Elem1', union1(<$Elem1, $Elem2'>, $Bag))

[cc-2]	is-empty-iter($BagIter) = false,
	head($BagIter) = <$Elem2, $Elem2'>,
	$Elem1' != $Elem2					%% elem-equal?
	=======================================================
	closure-comp($BagIter, $Elem1, $Elem1', $Bag) = 
	closure-comp(tail($BagIter), $Elem1, $Elem1', $Bag)

[cc-3] 	is-empty-iter($BagIter) = true
	=============================================
	closure-comp($BagIter, $Elem1, $Elem1', $Bag) = $Bag

%% ---- trans-closure

[tcl-1]  trans-closure($Rel) = closure($Rel, empty-bag, $Rel)

%% ---- rtrans-closure

[rtcl-1] rtrans-closure($Rel) = union(trans-closure($Rel), id(carrier($Rel)))

%% ---- reachX

[rX-3]	$Rel' = carX($Rel, $Bag2),
	$Rel''= domR($Rel', $Bag1)
	=========================================
	reachX($Bag1, $Bag2, $Rel) = closure($Rel', empty-bag, $Rel'')

%% ---- reachR

[rX-3]	$Rel' = carR($Rel, $Bag2),
	$Rel''= domR($Rel', $Bag1)
	=========================================
	reachR($Bag1, $Bag2, $Rel) = closure($Rel', empty-bag, $Rel'')

