include ${top_srcdir}/templates/make_rules

# These makefile rules explain how a library should be installed
# they also explain how builtins should be compiled and registered

# Initially there are no builtin source files, the user should override this
# variable
PACKAGE_SRC=

# Determine installation directory
libpackagedir=${pkgdatadir}$(subst lib,,$(subdir))

# Collect built-in names from SDF2 source files
BUILTINS=$(shell grep "built-in" *.sdf | \
                 sed -e 's@.*built-in(\"\(.*\)\").*@\1@g' | \
                 sed -e 's@-@_@g')

# What gets installed, distributed, cleaned
MODULES=$(wildcard *.asf *.sdf) 
PREPARED=$(wildcard *.tbl)
EXTRA_DIST = $(MODULES) $(PREPARED) $(PACKAGE_SRC)
CLEANFILES+=link-test.c


# Build a stub to test if every built-in has an implementation
noinst_PROGRAMS=link-test
link_test_SOURCES= $(PACKAGE_SRC) link-test.c
link_test_LDADD=-L. -lasf-builtins \
                -L${PT_SUPPORT}/lib -lmept \
                -L${ATERM}/lib -lATerm
INCLUDES=-I$(ATERM)/include -I$(PT_SUPPORT)/include

# Register the source files for the built-in library
$(PACKAGE_SRC): Makefile
	echo "${subdir}:$*.o" >> $(top_builddir)/src/objects.lst

# create the stub and at the same time register the built-ins
link-test.c: $(PACKAGE_SRC) $(MODULES)
	echo "${subdir}:${BUILTINS}" >> $(top_builddir)/src/builtins.lst
	${top_srcdir}/utils/gen-link-test.sh "${BUILTINS}" > $@

# Installation hooks take care of modifying access bits and installing
# the files in the right order (time stamps are important here)

INSTALL_READONLY = ${INSTALL} -m 0444

install-data-hook: make-dir install-modules install-prepared make-read-only

make-dir:
	@if test -d $(DESTDIR)$(libpackagedir); then \
           echo " chmod u+w $(DESTDIR)$(libpackagedir)"; \
           chmod u+w $(DESTDIR)$(libpackagedir); \
        fi
	$(mkinstalldirs) $(DESTDIR)$(libpackagedir)

install-modules:
	@list='$(MODULES)'; for p in $$list; do \
          if test -f $(srcdir)/$$p; then \
            echo " $(INSTALL_READONLY) $(srcdir)/$$p $(DESTDIR)$(libpackagedir)/$$p"; \
            $(INSTALL_READONLY) $(srcdir)/$$p $(DESTDIR)$(libpackagedir)/$$p; \
          else if test -f $$p; then \
            echo " $(INSTALL_READONLY) $$p $(DESTDIR)$(libpackagedir)/$$p"; \
            $(INSTALL_READONLY) $$p $(DESTDIR)$(libpackagedir)/$$p; \
          fi; fi; \
        done; 

install-prepared:
	@list='$(PREPARED)'; for p in $$list; do \
          if test -f $(srcdir)/$$p; then \
            echo " $(INSTALL_READONLY) $(srcdir)/$$p $(DESTDIR)$(libpackagedir)/$$p"; \
            $(INSTALL_READONLY) $(srcdir)/$$p $(DESTDIR)$(libpackagedir)/$$p; \
          else if test -f $$p; then \
            echo " $(INSTALL_READONLY) $$p $(DESTDIR)$(libpackagedir)/$$p"; \
            $(INSTALL_READONLY) $$p $(DESTDIR)$(libpackagedir)/$$p; \
          fi; fi; \
        done;


make-read-only:
	chmod ugo-w $(DESTDIR)$(libpackagedir) 
