equations

[product-space-top]
	product-space(xsetset) = 
		relation-to-powerset(generalized-product(xsetset))

tests

[product-space-empty]
	product-space({}) == {}

[product-space-single]
	product-space({{1}}) == {{1}}

[product-space-double]
	equal(product-space({{1}, {2}}), {{1, 2}}) == true

[product-space-many]
	equal(product-space({{1, 2}, {3, 4}}), {{1, 3}, {1, 4}, {2, 3}, {2, 4}}) == true

equations

[generalized-product-empty]
	generalized-product({}) = {}

[generalized-product-single]
	generalized-product({xset}) = set-to-singleton-relation(xset)

[generalized-product-two]
	generalized-product({xset1, xset2}) = product(xset1, xset2)

[generalized-product-many]
	generalized-product({xset1, xset2, xset+}) = 
		product(xset1, generalized-product({xset2, xset+}))
			

equations

[set-to-singleton-relation-top]
	set-to-singleton-relation({x}) = {x}

[set-to-singleton-relation-cons]
	{xx} := set-to-singleton-relation({x+})
	===
	set-to-singleton-relation({x, x+}) = {<x, xx>}

equations

[n-tuple-to-set-nil]
	<x1, x2> !:= x'
	===
	n-tuple-to-set(<x, x'>) = {x, x'}

[n-tuple-to-set-cons]
	n-tuple-to-set(<x, <x1, x2>>) = insert(x, n-tuple-to-set(<x1, x2>))


[default-n-tuple-to-set-elem]
	n-tuple-to-set(x) = {x}

tests

[n-tuple-to-set-elem]
	n-tuple-to-set(1) == {1}

[n-tuple-to-set-base]
	equal(n-tuple-to-set(<1, 2>), {1, 2}) == true

[n-tuple-to-set-triple]
	equal(n-tuple-to-set(<1, 2, 3>), {1, 2, 3}) == true

[n-tuple-to-set-norm]
	equal(n-tuple-to-set(<1, <2, 3>>), {1, 2, 3}) == true


[n-tuple-to-set-not-norm]
	equal(n-tuple-to-set(<<1, 2>, <2, 3>>), {<1, 2>, 2, 3}) == true


equations

[relation-to-powerset-nil]
	relation-to-powerset({}) = {}

[relation-to-powerset-cons]
	relation-to-powerset({x, xx*}) =
		insert(n-tuple-to-set(x), relation-to-powerset({xx*}))
