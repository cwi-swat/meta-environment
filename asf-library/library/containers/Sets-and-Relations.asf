equations

[compose-nil]
	compose({}, yzrel) = {}

[compose-cons]
	compose({<x,y>, xy*}, yzrel) = 
		union(product({x}, image(yzrel, {y})), 
			compose({xy*}, yzrel))

tests

[compose-empty-empty]
	compose({}, {}) == {}

[compose-empty-non-empty]
	compose({}, {<1,2>}) == {}

[compose-non-empty-non-empty-disjoint]
	compose({<1,2>}, {<4,5>}) == {}

[compose-singletons]
	compose({<1,2>}, {<2,3>}) == {<1,3>}

tests

[equal-true]
	equal(<1, 2>, <1, 2>) == true

[equal-false-1]
	equal(<1, 2>, <1, 3>) == false

[equal-false-2]
	equal(<1, 2>, <3, 2>) == false

[equal-false-3]
	equal(<1, 2>, <3, 4>) == false

tests

[first-1]
	first(<1, 2>) == 1

tests

[second-2]
	second(<1, 2>) == 2



tests

[insert-empty]
	insert(1, {}) == {1}

[insert-many]
	insert(1, {2,3,4}) == {2,3,4,1}

[insert-duplicate]
	insert(1, {1,2,3}) == {1,2,3}

tests

[delete-from-empty]
	delete(1, {}) == {}

[delete-from-single-containing]
	delete(1, {1}) == {}

[delete-from-single-non-containing]
	delete(1, {2}) == {2}

[delete-from-many-containing]
	delete(1, {2, 3, 1}) == {2, 3}

[delete-from-many-non-containing]
	delete(1, {2, 3, 4}) == {2, 3, 4}

tests

[element-of-empty]
	element-of(1, {}) == false

[element-of-non-empty-false]
	element-of(1, {2,3,4}) == false

[element-of-singleton]
	element-of(1, {1}) == true

[element-of-many]
	element-of(1, {3,2,1}) == true

tests

[union-empty-empty]
	union({}, {}) == {}

[union-empty-non-empty]
	equal(union({}, {1,2,3}), {1,2,3}) == true

[union-non-empty-empty]
	equal(union({1,2,3}, {}), {1,2,3}) == true

[union-overlap]
	equal(union({1,2,3}, {2,3,4}), {1,2,3,4}) == true

tests

[difference-empty-empty]
	difference({}, {}) == {}

[difference-empty-some]
	difference({}, {1,2,3}) == {}

[difference-some-empty]
	equal(difference({1,2,3}, {}), {1,2,3}) == true

[difference-overlapping]
	equal(difference({1,2,3}, {3,4,5}), {1,2}) == true

[difference-disjoint]
	equal(difference({1,2,3}, {4,5,6}), {1,2,3}) == true

[diffrenece-same]
	difference({1,2,3}, {3,2,1}) == {}

tests

[intersection-empty-empty]
	intersection({}, {}) == {}

[intersection-some-empty]
	intersection({1,2,3}, {}) == {}

[intersection-empty-some]
	intersection({}, {1,2,3}) == {}

[intersection-overlap]
	intersection({1,2,3}, {3,4,5}) == {3}

[intersection-same]
	equal(intersection({1,2,3}, {3,2,1}), {1,2,3}) == true


tests

[unique-empty]
	unique({}) == {}

[unique-duplicates-single]
	equal(unique({1,2,3,3}), {1,2,3}) == true

[unique-duplicates-many]
	equal(unique({2,1,2,2,1,3,3}), {1,2,3}) == true




tests

[product-empty-empty]
	product({}, {}) == {}

[product-empty-non-empty]
	product({}, {1,2,3}) == {}

[product-square]
	equal(product({1,2}, {2,1}), {<1,2>,<2,1>,<1,1>,<2,2>}) == true

[product-singleton-some]
	equal(product({1}, {1,2,3}), {<1,1>,<1,2>,<1,3>}) == true

tests

[domain-single]
	domain({<1,2>}) == {1}

[domain-many-unique]
	equal(domain({<1,2>, <3,4>}), {1,3}) == true

[domain-many-duplicates]
	equal(domain({<3,2>, <3,4>}), {3}) == true


tests

[range-single]
	range({<1,2>}) == {2}

[range-many-unique]
	equal(range({<1,2>, <3,4>}), {2,4}) == true

[range-many-duplicates]
	equal(range({<1,4>, <3,4>}), {4}) == true


tests

[image-empty-empty]
	image({}, {}) == {}

[image-empty-many]
	image({}, {1,2,3}) == {}

[image-many-empty]
	image({<1,2>,<3,4>}, {}) == {}

[image-many-single-unique]
	image({<1,2>,<3,4>}, {1}) == {2}

[imange-many-many-unique]
	equal(image({<1,2>,<3,4>}, {1,3}), {2,4}) == true


tests

[inverse-empty]
	inverse({}) == {}

[inverse-singleton]
	inverse({<1, true>}) == {<true, 1>}

[inverse-many]
	equal(inverse({<1, true>, <3, false>}), {<true, 1>, <false, 3>}) == true

tests

[left-image-empty-empty]
	left-image({}, {}) == {}

[left-image-some-empty]
	left-image({<1, true>, <2, false>}, {}) == {}

[left-image-some-single]
	left-image({<1, true>, <2, false>}, {true}) == {1}

[left-image-some-some]
	equal(left-image({<1, true>, <2, false>, <3, false>}, {true, false}), {2, 1, 3}) == true

[left-image-some-some-duplicates]
	left-image({<1, true>, <1, true>, <2, false>}, {true}) == {1}

tests

[compose-empty-empty]
	compose({}, {}) == {}

[compose-empty-non-empty]
	compose({}, {<1,2>}) == {}

[compose-non-empty-non-empty-disjoint]
	compose({<1,2>}, {<4,5>}) == {}

[compose-singletons]
	compose({<1,2>}, {<2,3>}) == {<1,3>}


tests

[identity-empty]
	identity({}) == {}

[identity-single]
	identity({1}) == {<1,1>}

[identity-many]
	equal(identity({1, 2}), {<1,1>, <2,2>}) == true


tests

[total-empty]
	total({}) == {}

[total-single]
	total({1}) == {<1, 1>}

[total-many]
	equal(total({1, 2}), {<1, 2>, <1, 1>, <2, 2>, <2, 1>}) == true


tests

[complement-empty]
	complement({}) == {}

[complement-single]
	equal(complement({<1, 2>}), {<2, 1>, <1, 1>, <2, 2>}) == true

[complement-many]
	equal(complement({<1, 2>, <2, 3>}), {<1, 1>, <2, 1>, <3, 2>, <2, 2>, <3, 1>, <1, 3>, <3, 3>}) == true


tests

[reflexive-closure-empty]
	reflexive-closure({}) == {}

[reflexive-closure-single]
	equal(reflexive-closure({<1, 2>}), {<1, 2>, <1, 1>, <2, 2>}) == true

[reflexive-closure-many]
	equal(reflexive-closure({<1, 2>, <3, 4>}), {<1, 2>, <3, 4>, <1, 1>, <2, 2>, <3, 3>, <4, 4>}) == true

tests

[symmetric-closure-empty]
	symmetric-closure({}) == {}

[symmetric-closure-single]
	equal(symmetric-closure({<1, 2>}), {<1, 2>, <2, 1>}) == true

[symmetric-closure-many]
	equal(symmetric-closure({<1, 2>, <2, 3>}), {<1, 2>, <2, 1>, <2, 3>, <3, 2>}) == true

[symmetric-closure-duplicates]
	equal(symmetric-closure({<1, 2>, <2, 1>}), {<1, 2>, <2, 1>}) == true


tests

[transitive-closure-empty]
	transitive-closure({}) == {}

[transitive-closure-single]
	transitive-closure({<1, 2>}) == {<1, 2>}

[transitive-closure-many-disconnected]
	equal(transitive-closure({<1, 2>, <3, 4>}), {<1, 2>, <3, 4>}) == true

[transitive-closure-many-connected]
	equal(transitive-closure({<1, 2>, <2, 3>}), {<1, 2>, <2, 3>, <1, 3>}) == true

[transitive-closure-bigger]
	equal(transitive-closure({<1, 2>, <2, 3>, <3, 4>}), {<1, 2>, <2, 3>, <3, 4>, <1, 3>, <1, 4>, <2, 4>}) == true

[transitive-closure-cyclic]
	equal(transitive-closure({<1, 2>, <2, 1>, <2, 3>}), {<2, 2>, <1, 3>, <1, 1>, <2, 3>, <2, 1>, <1, 2>}) == true

tests

[transitive-reflexive-closure-empty]
	transitive-reflexive-closure({}) == {}

[transitive-reflexive-closure-single]
	equal(transitive-reflexive-closure({<1, 2>}), {<1, 2>, <1, 1>, <2, 2>}) == true

[transitive-reflexive-closure-many-disconnected]
	equal(transitive-reflexive-closure({<1, 2>, <3, 4>}), {<1, 2>, <3, 4>, <1, 1>, <2, 2>, <3, 3>, <4, 4>}) == true

[transitive-reflexive-closure-many-connected]
	equal(transitive-reflexive-closure({<1, 2>, <2, 3>}), {<1, 2>, <2, 3>, <1, 3>, <1, 1>, <2, 2>, <3, 3>}) == true

[transitive-reflexive-closure-bigger]
	equal(transitive-reflexive-closure({<1, 2>, <2, 3>, <3, 4>}), {<1, 2>, <2, 3>, <3, 4>, <1, 3>, <1, 4>, <2, 4>, <1, 1>, <2, 2>, <3, 3>, <4, 4>}) == true

[transitive-reflexive-closure-cyclic]
	equal(transitive-reflexive-closure({<1, 2>, <2, 1>, <2, 3>}), {<2, 2>, <1, 3>, <1, 1>, <2, 3>, <2, 1>, <1, 2>, <3, 3>}) == true


tests

[top-empty]
	top({}) == {}

[top-single]
	top({<1, 2>}) == {1}

[top-many-single]
	top({<1, 2>, <2, 3>}) == {1}

[top-many-many]
	equal(top({<1, 2>, <2, 3>, <4, 3>}), {1, 4}) == true

[top-cyclic]
	top({<1, 2>, <2, 3>, <3, 1>}) == {}


tests

[bottom-empty]
	bottom({}) == {}

[bottom-single]
	bottom({<1, 2>}) == {2}

[bottom-many-single]
	bottom({<1, 2>, <2, 3>}) == {3}

[bottom-many-many]
	equal(bottom({<1, 2>, <2, 3>, <2, 4>}), {3, 4}) == true

[bottom-cyclic]
	bottom({<1, 2>, <2, 3>, <3, 1>}) == {}


tests

[carrier-empty]
	carrier({}) == {}

[carrier-single-different]
	equal(carrier({<1, 2>}), {1, 2}) == true

[carrier-single-equal]
	carrier({<1, 1>}) == {1}

[carrier-many]
	equal(carrier({<1, 2>, <3, 4>}), {1, 2, 3, 4}) == true

[carrier-many-overlap]
	equal(carrier({<1, 2>, <2, 3>}), {1, 2, 3}) == true


tests

[power-empty]
	power({}) == {{}}

[power-singleton]
	equal(power({1}), {{}, {1}}) == true

[power-two-elements]
	equal(power({1, 2}), {{}, {1}, {2}, {1,2}}) == true

[power-three-elements]
	equal(power({1, 2, 3}), {{}, {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, {1, 2, 3}}) == true

equations

[default-equal-1]
	equal(x, x') = term-equal(x, x')
equations

[identity-nil]
	identity({}) = {}

[identity-cons]
	identity({x, x*}) = insert(<x,x>, identity({x*}))


equations

[total-top]
	total(xset) = product(xset, xset)

equations

[complement-top]
	complement(xrel) = difference(total(carrier(xrel)), xrel)


equations

[reflexive-closure-top]
	reflexive-closure(xrel) = union(xrel, identity(carrier(xrel)))

equations

[symmetric-closure-top]
	symmetric-closure(xrel) = union(xrel, inverse(xrel))


equations

[transitive-closure-top]
	transitive-closure(xrel) = least-fixpoint-union-compose(xrel, xrel)


[least-fixpoint-union-compose-base]
	xrel'' := union-compose(xrel, xrel'),
	equal(xrel, xrel'') == true
	===
	least-fixpoint-union-compose(xrel, xrel') = xrel

[default-least-fixpoint-union-compose-rest]
	least-fixpoint-union-compose(xrel, xrel') =
		least-fixpoint-union-compose(union-compose(xrel, xrel'), xrel')


[union-compose-top]
	union-compose(xrel, xrel') = union(xrel, compose(xrel, xrel'))

equations

[transitive-reflexive-closure-top]
	transitive-reflexive-closure(xrel) = union(reflexive-closure(xrel), transitive-closure(xrel))


equations

[top-top]
	top(xrel) = difference(domain(xrel), range(xrel))

equations

[bottom-top]
	bottom(xrel) = difference(range(xrel), domain(xrel))


equations

[carrier-top]
	carrier(xrel) = union(domain(xrel), range(xrel))


equations

[carrier-restriction-nil]
	carrier-restriction({}, xset) = {}

[carrier-restriction-cons]
	element-of(x, xset) == true,
	element-of(x', xset) == true
	===
	carrier-restriction({<x, x'>, xx*}, xset) = 
		insert(<x, x'>, carrier-restriction({xx*}, xset))

[default-carrier-restriction-cons]
	carrier-restriction({<x, x'>, xx*}, xset) =
		carrier-restriction({xx*}, xset)


equations

[carrier-exclusion-nil]
	carrier-exclusion({}, xset) = {}

[carrier-exclusion-cons-1]
	element-of(x, xset) == true
	===
	carrier-exclusion({<x, x'>, xx*}, xset) = 
		carrier-exclusion({xx*}, xset)

[carrier-exclusion-cons-2]
	element-of(x', xset) == true
	===
	carrier-exclusion({<x, x'>, xx*}, xset) = 
		carrier-exclusion({xx*}, xset)


[default-carrier-exclusion-cons]
	carrier-exclusion({<x, x'>, xx*}, xset) =
		insert(<x, x'>, carrier-exclusion({xx*}, xset))



equations

[default-reach-restriction-top]
	reach-restriction(xrel, xset1, xset2) = 
		image(transitive-closure(carrier-restriction(xrel, xset2)), xset1)

equations

[reach-exclusion-top]
	reach-exclusion(xrel, xset1, xset2) = 
		image(transitive-closure(carrier-exclusion(xrel, xset2)), xset1)


tests

[identity-empty]
	identity({}) == {}

[identity-single]
	identity({1}) == {<1,1>}

[identity-many]
	equal(identity({1, 2}), {<1,1>, <2,2>}) == true


tests

[total-empty]
	total({}) == {}

[total-single]
	total({1}) == {<1, 1>}

[total-many]
	equal(total({1, 2}), {<1, 2>, <1, 1>, <2, 2>, <2, 1>}) == true


tests

[complement-empty]
	complement({}) == {}

[complement-single]
	equal(complement({<1, 2>}), {<2, 1>, <1, 1>, <2, 2>}) == true

[complement-many]
	equal(complement({<1, 2>, <2, 3>}), {<1, 1>, <2, 1>, <3, 2>, <2, 2>, <3, 1>, <1, 3>, <3, 3>}) == true


tests

[reflexive-closure-empty]
	reflexive-closure({}) == {}

[reflexive-closure-single]
	equal(reflexive-closure({<1, 2>}), {<1, 2>, <1, 1>, <2, 2>}) == true

[reflexive-closure-many]
	equal(reflexive-closure({<1, 2>, <3, 4>}), {<1, 2>, <3, 4>, <1, 1>, <2, 2>, <3, 3>, <4, 4>}) == true

tests

[symmetric-closure-empty]
	symmetric-closure({}) == {}

[symmetric-closure-single]
	equal(symmetric-closure({<1, 2>}), {<1, 2>, <2, 1>}) == true

[symmetric-closure-many]
	equal(symmetric-closure({<1, 2>, <2, 3>}), {<1, 2>, <2, 1>, <2, 3>, <3, 2>}) == true

[symmetric-closure-duplicates]
	equal(symmetric-closure({<1, 2>, <2, 1>}), {<1, 2>, <2, 1>}) == true


tests

[transitive-closure-empty]
	transitive-closure({}) == {}

[transitive-closure-single]
	transitive-closure({<1, 2>}) == {<1, 2>}

[transitive-closure-many-disconnected]
	equal(transitive-closure({<1, 2>, <3, 4>}), {<1, 2>, <3, 4>}) == true

[transitive-closure-many-connected]
	equal(transitive-closure({<1, 2>, <2, 3>}), {<1, 2>, <2, 3>, <1, 3>}) == true

[transitive-closure-bigger]
	equal(transitive-closure({<1, 2>, <2, 3>, <3, 4>}), {<1, 2>, <2, 3>, <3, 4>, <1, 3>, <1, 4>, <2, 4>}) == true

[transitive-closure-cyclic]
	equal(transitive-closure({<1, 2>, <2, 1>, <2, 3>}), {<2, 2>, <1, 3>, <1, 1>, <2, 3>, <2, 1>, <1, 2>}) == true

tests

[transitive-reflexive-closure-empty]
	transitive-reflexive-closure({}) == {}

[transitive-reflexive-closure-single]
	equal(transitive-reflexive-closure({<1, 2>}), {<1, 2>, <1, 1>, <2, 2>}) == true

[transitive-reflexive-closure-many-disconnected]
	equal(transitive-reflexive-closure({<1, 2>, <3, 4>}), {<1, 2>, <3, 4>, <1, 1>, <2, 2>, <3, 3>, <4, 4>}) == true

[transitive-reflexive-closure-many-connected]
	equal(transitive-reflexive-closure({<1, 2>, <2, 3>}), {<1, 2>, <2, 3>, <1, 3>, <1, 1>, <2, 2>, <3, 3>}) == true

[transitive-reflexive-closure-bigger]
	equal(transitive-reflexive-closure({<1, 2>, <2, 3>, <3, 4>}), {<1, 2>, <2, 3>, <3, 4>, <1, 3>, <1, 4>, <2, 4>, <1, 1>, <2, 2>, <3, 3>, <4, 4>}) == true

[transitive-reflexive-closure-cyclic]
	equal(transitive-reflexive-closure({<1, 2>, <2, 1>, <2, 3>}), {<2, 2>, <1, 3>, <1, 1>, <2, 3>, <2, 1>, <1, 2>, <3, 3>}) == true


tests

[top-empty]
	top({}) == {}

[top-single]
	top({<1, 2>}) == {1}

[top-many-single]
	top({<1, 2>, <2, 3>}) == {1}

[top-many-many]
	equal(top({<1, 2>, <2, 3>, <4, 3>}), {1, 4}) == true

[top-cyclic]
	top({<1, 2>, <2, 3>, <3, 1>}) == {}


tests

[bottom-empty]
	bottom({}) == {}

[bottom-single]
	bottom({<1, 2>}) == {2}

[bottom-many-single]
	bottom({<1, 2>, <2, 3>}) == {3}

[bottom-many-many]
	equal(bottom({<1, 2>, <2, 3>, <2, 4>}), {3, 4}) == true

[bottom-cyclic]
	bottom({<1, 2>, <2, 3>, <3, 1>}) == {}


tests

[carrier-empty]
	carrier({}) == {}

[carrier-single-different]
	equal(carrier({<1, 2>}), {1, 2}) == true

[carrier-single-equal]
	carrier({<1, 1>}) == {1}

[carrier-many]
	equal(carrier({<1, 2>, <3, 4>}), {1, 2, 3, 4}) == true

[carrier-many-overlap]
	equal(carrier({<1, 2>, <2, 3>}), {1, 2, 3}) == true

tests

[carrier-restriction-empty-empty]
	carrier-restriction({}, {}) == {}

[carrier-restriction-nonempty-empty]
	carrier-restriction({<1, 2>, <3, 4>}, {}) == {}

[carrier-restriction-nonempty-nonempty]
	carrier-restriction({<1, 2>, <3, 4>}, {1, 2}) == {<1, 2>}

tests

[carrier-exclusion-empty-empty]
	carrier-exclusion({}, {}) == {}

[carrier-exclusion-nonempty-empty]
	equal(carrier-exclusion({<1, 2>, <3, 4>}, {}), {<1, 2>, <3, 4>}) == true

[carrier-exclusion-nonempty-nonempty]
	carrier-exclusion({<1, 2>, <3, 4>}, {1, 2}) == {<3, 4>}

[carrier-exclusion-one-included]
	carrier-exclusion({<1, 2>, <3, 4>}, {2}) == {<3, 4>}

[carrier-exclusion-tutorial]
	equal(carrier-exclusion({<1, 5>, <2, 6>, <3, 7>}, {5, 1, 6}), {<3, 7>}) == true


tests

[reach-restriction-tutorial]
	equal(reach-restriction({<1, 2>, <1, 3>, <2, 4>, <3, 4>}, {1}, {1, 2, 3}), {2, 3}) == true

[reach-restriction-1]
	reach-restriction({}, {}, {}) == {}

[reach-restriction-2]
	reach-restriction({<1,2>, <1,3>, <2,4>, <3,4>}, {1}, {}) == {}

[reach-restriction-3]
	reach-restriction({<1,2>, <1,3>, <2,4>, <3,4>}, {1}, {1, 2}) == {2}

[reach-restriction-4]
	equal(reach-restriction({<1,2>, <1,3>, <2,4>, <3,4>}, {1}, {1, 2, 3}), {2, 3}) == true

[reach-restriction-5]
	equal(reach-restriction({<1,2>, <1,3>, <2,4>, <3,4>}, {1}, {1, 2, 4}), {2, 4}) == true


[reach-restriction-tutorial]
	equal(reach-restriction({<1, 2>, <1, 3>, <2, 4>, <3, 4>}, {1}, {1, 2, 3}), {2, 3}) == true


tests

[reach-exclusion-tutorial]
	equal(reach-exclusion({<1, 2>, <1, 3>, <2, 4>, <3, 4>}, {1}, {2}), {3, 4}) == true

equations

[inverse-nil]
	inverse({}) = {}

[inverse-cons]
	inverse({<x, y>, xy*}) = insert(<y, x>, inverse({xy*}))

equations

[left-image-top]
	left-image(xyrel, yset) = image(inverse(xyrel), yset)

tests

[inverse-empty]
	inverse({}) == {}

[inverse-singleton]
	inverse({<1, true>}) == {<true, 1>}

[inverse-many]
	equal(inverse({<1, true>, <3, false>}), {<true, 1>, <false, 3>}) == true

tests

[left-image-empty-empty]
	left-image({}, {}) == {}

[left-image-some-empty]
	left-image({<1, true>, <2, false>}, {}) == {}

[left-image-some-single]
	left-image({<1, true>, <2, false>}, {true}) == {1}

[left-image-some-some]
	equal(left-image({<1, true>, <2, false>, <3, false>}, {true, false}), {2, 1, 3}) == true

[left-image-some-some-duplicates]
	left-image({<1, true>, <1, true>, <2, false>}, {true}) == {1}


equations

[n-ary-tuple-normalization-1]
	nary-as-binary(<elem1, elem2, elem3>) = <elem1, <elem2, elem3>>

[n-ary-tuple-normalization-2]
	<elem, elem'> := nary-as-binary(<elem2, elem3, elem+>)
	===
	nary-as-binary(<elem1, elem2, elem3, elem+>) = <elem1, <elem, elem'>>

tests

[normalize-triple]
	nary-as-binary(<1, 2, 3>) == <1, <2, 3>>

[normalize-quadruple]
	nary-as-binary(<1, 2, 3, 4>) == <1, <2, <3, 4>>>

equations

[equality-top]
	equal(<x, y>, <x', y'>) = equal(x, x') & equal(y, y')

equations

[default-equal-top]
	equal(x, y) = term-equal(x, y)

equations

[first-top]
	first(<x, y>) = x

equations

[second-top]
	second(<x, y>) = y

equations

[product-space-top]
	product-space(xsetset) = 
		relation-to-powerset(generalized-product(xsetset))

tests

[product-space-empty]
	product-space({}) == {}

[product-space-single]
	product-space({{1}}) == {{1}}

[product-space-double]
	equal(product-space({{1}, {2}}), {{1, 2}}) == true

[product-space-many]
	equal(product-space({{1, 2}, {3, 4}}), {{1, 3}, {1, 4}, {2, 3}, {2, 4}}) == true

equations

[generalized-product-empty]
	generalized-product({}) = {}

[generalized-product-single]
	generalized-product({xset}) = set-to-singleton-relation(xset)

[generalized-product-two]
	generalized-product({xset1, xset2}) = product(xset1, xset2)

[generalized-product-many]
	generalized-product({xset1, xset2, xset+}) = 
		product(xset1, generalized-product({xset2, xset+}))
			

equations

[set-to-singleton-relation-top]
	set-to-singleton-relation({x}) = {<x>}

[set-to-singleton-relation-cons]
	{xx} := set-to-singleton-relation({x+})
	===
	set-to-singleton-relation({x, x+}) = {<x, xx>}

equations

[n-tuple-to-set-top]
	n-tuple-to-set(<x+>) = {x+}

tests

[n-tuple-to-set-elem]
	n-tuple-to-set(<1>) == {1}

[n-tuple-to-set-base]
	equal(n-tuple-to-set(<1, 2>), {1, 2}) == true

[n-tuple-to-set-triple]
	equal(n-tuple-to-set(<1, 2, 3>), {1, 2, 3}) == true


[n-tuple-to-set-not-norm]
	equal(n-tuple-to-set(<<1, 2>, <2, 3>>), {<1, 2>, <2, 3>}) == true


equations

[relation-to-powerset-nil]
	relation-to-powerset({}) = {}

[relation-to-powerset-cons]
	relation-to-powerset({x, xx*}) =
		insert(n-tuple-to-set(x), relation-to-powerset({xx*}))
equations

[add-to-each-nil]
	add-to-each(x, {}) = {}

[add-to-each-cons]
	add-to-each(x, {xset, xset*}) = 
		union({insert(x, xset)}, 
			add-to-each(x, {xset*}))


equations

[power-nil]
	power({}) = {{}}

[power-cons]
	xsetset := power({x*})
	===
	power({x, x*}) = union(xsetset, add-to-each(x, xsetset))

equations

[generalized-union-nil]
	generalized-union({}) = {}

[generalized-union-cons]
	generalized-union({xset, xset*}) = union(xset, generalized-union({xset*}))

equations

[generalized-intersection-nil]
	generalized-intersection({}) = {}

[generalized-intersection-cons]
	generalized-intersection({xset, xset*}) = intersection(xset, generalized-intersection({xset*}))

tests

[power-empty]
	power({}) == {{}}

[power-singleton]
	equal(power({1}), {{}, {1}}) == true

[power-two-elements]
	equal(power({1, 2}), {{}, {1}, {2}, {1,2}}) == true

[power-three-elements]
	equal(power({1, 2, 3}), {{}, {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, {1, 2, 3}}) == trueequations

[product-nil-any]
	product({}, yset) = {}

[product-single-nil]
	product({x}, {}) = {}

[product-single-cons]
	product({x}, {y, y*}) = union({<x, y>}, product({x}, {y*}))

[product-many-nil]
	product({x, x+}, yset) = 
		union(product({x}, yset), product({x+}, yset))


equations

[domain-nil]
	domain({}) = {}

[domain-cons]
	domain({<x,y>, xy*}) = insert(x, domain({xy*}))

equations

[range-nil]
	range({}) = {}

[range-cons]
	range({<x,y>, xy*}) = insert(y, range({xy*}))

equations

[image-nil]
	image({}, xset) = {}

[image-cons-1]
	element-of(x, xset) == true
	===
	image({<x,y>, xy*}, xset) = insert(y, image({xy*}, xset))

[image-cons-2]
	element-of(x, xset) == false
	===
	image({<x,y>, xy*}, xset) = image({xy*}, xset)


equations

[domain-restriction-nil]
	domain-restriction({}, xset) = {}

[domain-restriction-cons-1]
	element-of(x, xset) == true
	===
	domain-restriction({<x,y>, xy*}, xset) =
		insert(<x, y>, domain-restriction({xy*}, xset))

[default-domain-restriction-cons-2]
	domain-restriction({<x,y>, xy*}, xset) =
		domain-restriction({xy*}, xset)

equations

[range-restriction-nil]
	range-restriction({}, yset) = {}

[range-restriction-cons-1]
	element-of(y, yset) == true
	===
	range-restriction({<x,y>, xy*}, yset) =
		insert(<x, y>, range-restriction({xy*}, yset))

[default-range-restriction-cons-2]
	range-restriction({<x,y>, xy*}, yset) =
		range-restriction({xy*}, yset)

equations

[domain-exclusion-nil]
	domain-exclusion({}, xset) = {}

[domain-exclusion-cons-1]
	element-of(x, xset) == true
	===
	domain-exclusion({<x, y>, xy*}, xset) =
		domain-exclusion({xy*}, xset)

[default-domain-exclusion-cons-2]
	domain-exclusion({<x, y>, xy*}, xset) =
		insert(<x, y>, domain-exclusion({xy*}, xset))

equations

[range-exclusion-nil]
	range-exclusion({}, yset) = {}

[range-exclusion-cons-1]
	element-of(y, yset) == true
	===
	range-exclusion({<x,y>, xy*}, yset) =
		range-exclusion({xy*}, yset)

[default-range-exclusion-cons-2]
	range-exclusion({<x,y>, xy*}, yset) =
		insert(<x, y>, range-exclusion({xy*}, yset))


tests

[product-empty-empty]
	product({}, {}) == {}

[product-empty-non-empty]
	product({}, {1,2,3}) == {}

[product-square]
	equal(product({1,2}, {2,1}), {<1,2>,<2,1>,<1,1>,<2,2>}) == true

[product-singleton-some]
	equal(product({1}, {1,2,3}), {<1,1>,<1,2>,<1,3>}) == true

tests

[domain-single]
	domain({<1,2>}) == {1}

[domain-many-unique]
	equal(domain({<1,2>, <3,4>}), {1,3}) == true

[domain-many-duplicates]
	equal(domain({<3,2>, <3,4>}), {3}) == true


tests

[range-single]
	range({<1,2>}) == {2}

[range-many-unique]
	equal(range({<1,2>, <3,4>}), {2,4}) == true

[range-many-duplicates]
	equal(range({<1,4>, <3,4>}), {4}) == true


tests

[image-empty-empty]
	image({}, {}) == {}

[image-empty-many]
	image({}, {1,2,3}) == {}

[image-many-empty]
	image({<1,2>,<3,4>}, {}) == {}

[image-many-single-unique]
	image({<1,2>,<3,4>}, {1}) == {2}

[imange-many-many-unique]
	equal(image({<1,2>,<3,4>}, {1,3}), {2,4}) == true


tests

[domain-restriction-empty-empty]
	domain-restriction({}, {}) == {}

[domain-restriction-nonempty-empty]
	domain-restriction({<1, 2>, <3, 4>}, {}) == {}

[domain-restriction-nonempty-nonempty]
	domain-restriction({<1, 2>, <3, 4>}, {3}) == {<3, 4>}

tests

[range-restriction-empty-empty]
	range-restriction({}, {}) == {}

[range-restriction-nonempty-empty]
	range-restriction({<1, 2>, <3, 4>}, {}) == {}

[range-restriction-nonempty-nonempty]
	range-restriction({<1, 2>, <3, 4>}, {4}) == {<3, 4>}

tests

[domain-exclusion-empty-empty]
	domain-exclusion({}, {}) == {}

[domain-exclusion-nonempty-empty]
	equal(domain-exclusion({<1, 2>, <3, 4>}, {}), {<1, 2>, <3, 4>}) == true

[domain-exclusion-nonempty-nonempty]
	domain-exclusion({<1, 2>, <3, 4>}, {3}) == {<1, 2>}

tests

[range-exclusion-empty-empty]
	range-exclusion({}, {}) == {}

[range-exclusion-nonempty-empty]
	equal(range-exclusion({<1, 2>, <3, 4>}, {}), {<1, 2>, <3, 4>}) == true

[range-exclusion-nonempty-nonempty]
	range-exclusion({<1, 2>, <3, 4>}, {4}) == {<1, 2>}

equations

[insert-nil]
	insert(x, {}) = {x}

[insert-cons-1]
	equal(x, x') == true
	===
	insert(x, {x', x*}) = {x', x*}

[insert-cons-2]
	equal(x, x') == false,
	{x*'} := insert(x, {x*})
	===
	insert(x, {x', x*}) = {x', x*'}

equations

[delete-nil]
	delete(x, {}) = {}

[delete-cons-1]
	equal(x, x') == true
	===
	delete(x, {x', x*}) = {x*}

[delete-cons-2]
	equal(x, x') == false,
	{x*'} := delete(x, {x*})
	===
	delete(x, {x', x*}) = {x', x*'}

equations

[element-of-nil]
	element-of(x, {}) = false

[element-of-cons-1]
	equal(x, x') == true
	===
	element-of(x, {x', x*}) = true

[element-of-cons-1]
	equal(x, x') == false
	===
	element-of(x, {x', x*}) = element-of(x, {x*})

equations

[subset-nil]
	subset({}, set) = true

[subset-cons]
	element-of(x, set) == true
	===
	subset({x, x*}, set) = subset({x*}, set)

[default-subset-rest]
	subset(set, set') = false

equations

[superset-top]
	superset(set, set') = subset(set', set)

equations

[equal-sets]
	set := {x*},
	set' := {x*'}
	===
	equal({x*},{x*'}) = subset(set, set') & subset(set', set)

equations

[strict-subsets]
	strict-subset(set, set') = subset(set, set') & not(equal(set, set'))

equations

[strict-supersets]
	strict-superset(set, set') = superset(set, set') & not(equal(set, set'))

equations

[union-empty-1]
	union(set, {}) = set

[union-empty-2]
	union({}, set) = set

[default-union-many-3]
	union({x, x*}, set) = insert(x, union({x*}, set))


equations

[difference-empty-1]
	difference(set, {}) = set

[difference-empty-2]
	difference({}, set) = {}

[default-difference-many-3]
	difference(set, {x, x*}) = delete(x, difference(set, {x*}))

equations

[intersection-empty-1]
	intersection(set, {}) = {}

[intersection-empty-2]
	intersection({}, set) = {}

[intersection-many-3]
	element-of(x, set) == true
	===
	intersection({x, x*}, set) = insert(x, intersection({x*}, set))

[intersection-many-4]
	element-of(x, set) == false
	===
	intersection({x, x*}, set) = intersection({x*}, set)

equations

[unique-nil]
	unique({}) = {}

[unique-cons-1]
	element-of(x, {x*}) == true
	===
	unique({x, x*}) = unique({x*})

[unique-cons-2]
	element-of(x, {x*}) == false,
	{x*'} := unique({x*})
	===
	unique({x, x*}) = {x, x*'}

equations

[size-nil]
	size({}) = 0

[size-cons]
	size({x, x*}) = 1 + size({x*})


tests

[insert-empty]
	insert(1, {}) == {1}

[insert-many]
	insert(1, {2,3,4}) == {2,3,4,1}

[insert-duplicate]
	insert(1, {1,2,3}) == {1,2,3}

tests

[delete-from-empty]
	delete(1, {}) == {}

[delete-from-single-containing]
	delete(1, {1}) == {}

[delete-from-single-non-containing]
	delete(1, {2}) == {2}

[delete-from-many-containing]
	delete(1, {2, 3, 1}) == {2, 3}

[delete-from-many-non-containing]
	delete(1, {2, 3, 4}) == {2, 3, 4}

tests

[element-of-empty]
	element-of(1, {}) == false

[element-of-non-empty-false]
	element-of(1, {2,3,4}) == false

[element-of-singleton]
	element-of(1, {1}) == true

[element-of-many]
	element-of(1, {3,2,1}) == true

tests

[union-empty-empty]
	union({}, {}) == {}

[union-empty-non-empty]
	equal(union({}, {1,2,3}), {1,2,3}) == true

[union-non-empty-empty]
	equal(union({1,2,3}, {}), {1,2,3}) == true

[union-overlap]
	equal(union({1,2,3}, {2,3,4}), {1,2,3,4}) == true

tests

[difference-empty-empty]
	difference({}, {}) == {}

[difference-empty-some]
	difference({}, {1,2,3}) == {}

[difference-some-empty]
	equal(difference({1,2,3}, {}), {1,2,3}) == true

[difference-overlapping]
	equal(difference({1,2,3}, {3,4,5}), {1,2}) == true

[difference-disjoint]
	equal(difference({1,2,3}, {4,5,6}), {1,2,3}) == true

[diffrenece-same]
	difference({1,2,3}, {3,2,1}) == {}

tests

[intersection-empty-empty]
	intersection({}, {}) == {}

[intersection-some-empty]
	intersection({1,2,3}, {}) == {}

[intersection-empty-some]
	intersection({}, {1,2,3}) == {}

[intersection-overlap]
	intersection({1,2,3}, {3,4,5}) == {3}

[intersection-same]
	equal(intersection({1,2,3}, {3,2,1}), {1,2,3}) == true


tests

[unique-empty]
	unique({}) == {}

[unique-duplicates-single]
	equal(unique({1,2,3,3}), {1,2,3}) == true

[unique-duplicates-many]
	equal(unique({2,1,2,2,1,3,3}), {1,2,3}) == trueequations

[term-equal-1]
	term-equal(x, x) = true

[default-term-equal-2]
	term-equal(x, x') = false


equations
%% ---- all-nodes-from

[chain-set-1]
	chain-set({}) = {}

[chain-set-2]
	chain-set({x}) = {}

[chain-set-3]
	chain-set({x1, x2, x*}) =
		union({<x1, x2>}, chain-set({x2,x*}))

[chain-each-nil]
	chain-each({}) = {}

[chain-each-cons]
	chain-each({{x*1}, x*2}) = 
		union({chain-set({x*1})}, chain-each({x*2}))
[all-nodes-nil]
	all-nodes-from(xrel, {}) = {{}}

[all-nodes-cons]
	xrel0 := domain-restriction(xrel, {x}),
	set1 := range(xrel0),
	set2 := add-to-each(x, all-nodes-from(xrel0, set1))
	===	
	all-nodes-from(xrel, {x, x*}) =
		union(set2, all-nodes-from(xrel, {x*}))

[all-paths-top]
	all-paths-from(xrel, set) = chain-each(all-nodes-from(xrel, set))
