equations

[lines-1] 
      state(Venv, FunctionDef*, Lines).lines       = Lines

[add-1]  
      state(Venv, FunctionDef*, Lines).add(FunctionDef) =
      state(Venv, FunctionDef* FunctionDef, Lines)

[default-lookup] 
     state(Venv, FunctionDef*, Lines)[Formal] = lookup(Venv, Formal)

[assign-1] 
     Venv' := store(Venv, Formal, Integer)
     =====================================================
     state(Venv, FunctionDef*, Lines)[Formal] := Integer =
     state(Venv', FunctionDef*, Lines)

[goto-1]
     lookup(Venv, :penup) == 0,
     Xcor1 := lookup(Venv, :xcor),
     Ycor1 := lookup(Venv, :ycor),
     Lines' := Lines line(Xcor1, Ycor1, Xcor2, Ycor2),
     Venv' := store(store(Venv, :xcor, Xcor2), :ycor, Ycor2)
     ========================================================================================
     state(Venv, FunctionDef*, Lines).goto(Xcor2, Ycor2) = state(Venv', FunctionDef*, Lines')

[goto-2]
     lookup(Venv, :penup) == 1,
     Xcor1 := lookup(Venv, :xcor),
     Ycor1 := lookup(Venv, :ycor),
     Venv' := store(store(Venv, :xcor, Xcor2), :ycor, Ycor2)
     =======================================================================================
     state(Venv, FunctionDef*, Lines).goto(Xcor2, Ycor2) = state(Venv', FunctionDef*, Lines)
 

[new-state-1]
     Venv := store(new-table, :xcor, 0),
     Venv' := store(Venv, :ycor, 0),
     Venv'' := store(Venv', :heading, 0),
     Venv''' := store(Venv'', :penup, 0)
     ======================================
     newLogoState = state(Venv''', , )

%% enter/leave a procedure
[enter-1]
     state(Venv, FunctionDef*, Lines) := LS,
     FunctionDef*1 to Id Formal* [ Cmds ] FunctionDef*2 := FunctionDef*,
     LS' := bind(Formal*, E*, LS)
     =============================================================================================
     LS.enter(Id, E*) = < Cmds, LS' >

[leave-1] 
     state(Venv, FunctionDef*, Lines) := LS,
     FunctionDef*1 to Id Formal* [ Cmds ] FunctionDef*2 := FunctionDef*,
     LS' := unbind(Formal*, LS)
     =============================================================================================
     LS.leave(Id, E*) = LS'

%% bind/unbind formals
[bind-1]
     bind( , , LS) = LS
[bind-2]
     state(Venv, FunctionDef*,Lines) := LS,
     Venv' := store(Venv, Formal, eval(E, LS)),
     LS' := state(Venv', FunctionDef*, Lines)
     =======================================================
     bind(Formal Formal*, E E*, LS) = bind(Formal*, E*, LS')

[unbind-1]
     unbind( , LS) = LS
[unbind-2]
     state(Venv, FunctionDef*,Lines) := LS,
     Venv' := delete(Venv, Formal),
     LS' := state(Venv', FunctionDef*, Lines)
     =================================================
     unbind(Formal Formal*, LS) = unbind(Formal*, LS')


     


