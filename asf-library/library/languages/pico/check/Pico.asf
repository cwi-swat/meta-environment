equations

[Main] start(PROGRAM, Program) = start(Boolean, tcp(Program))

equations

[Tc1]  tcp(begin Decls Series end) = tcs(Series, tcd(Decls))

[Tc2]  tcd(declare Id-type*;) = tcits(Id-type*,new-table)

[Tc3a] tcits(Id:Type, Id-type*, Tenv) = tcits(Id-type*, tcit(Id:Type, Tenv))

[Tc3b] tcits(,Tenv) = Tenv

[Tc4a] lookup(Tenv, Id) == not-in-table
       ===============================
       tcit(Id:Type, Tenv) = store(Tenv, Id, Type)

[Tc4b] lookup(Tenv, Id) != not-in-table
       ================================
       tcit(Id:Type, Tenv) = Tenv

[Tc5a] tcs(Stat ; Stat*, Tenv) =
       tcst(Stat,Tenv) & tcs(Stat*,Tenv)

[Tc5b] tcs(,Tenv) = true

[Tc6a] tcst(Id := Exp, Tenv) = compatible(tce(Id,Tenv), tce(Exp,Tenv))

[Tc6b]              tce(Exp,Tenv) == natural
        ======================================================
        tcst(if Exp then Series1 else Series2 fi, Tenv) =
        tcs(Series1, Tenv) & tcs(Series2, Tenv)

[Tc6c]   tce(Exp, Tenv) == natural
        =================================================
         tcst(while Exp do Series od, Tenv) = tcs(Series, Tenv)

[default-Tc6] tcst(Stat, Tenv) = false

[Tc7a]  tce(Id, Tenv) = lookup(Tenv, Id)
[Tc7b]  tce(Nat-con, Tenv) = natural
[Tc7c]  tce(Str-con, Tenv) = string

[Tc7d]  tce(Exp1, Tenv) == natural, tce(Exp2, Tenv) == natural
        ==================================================
           tce(Exp1 + Exp2, Tenv) = natural

[Tc7e]  tce(Exp1, Tenv) == natural, tce(Exp2, Tenv) == natural
        ==================================================
           tce(Exp1 - Exp2, Tenv) = natural

[Tc7f]  tce(Exp1, Tenv) == string, tce(Exp2, Tenv) == string
        ================================================
           tce(Exp1 || Exp2, Tenv) = string

[default-Tc7] tce(Exp,Tenv) = nil-type

