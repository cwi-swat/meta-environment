equations
[Ev1]  evp(begin Decls Series end) = evs(Series, evd(Decls))

[Ev2]  evd(declare Id-type*;) = evits(Id-type*)

[Ev3a] evits(Id:natural, Id-type*) = store(evits(Id-type*), Id, 0)

[Ev3b]  evits(Id:string, Id-type*) = store(evits(Id-type*), Id, "")

[Ev3c]  evits() = []

[Ev4a]   evst(Stat, Venv) = Venv', evs(Stat*, Venv') = Venv''
        =====================================================
           evs(Stat ; Stat*, Venv) =  Venv''

[Ev4b]  evs( , Venv) = Venv

[Ev5a]  evst(Id := Exp, Venv) = store(Venv, Id, eve(Exp, Venv))

[Ev5b]             eve(Exp, Venv) != 0
        ====================================================
        evst(if Exp then Series1 else Series2 fi, Venv) = evs(Series1, Venv)

[Ev5c]             eve(Exp, Venv) = 0
        ====================================================
        evst(if Exp then Series1 else Series2 fi, Venv) = evs(Series2, Venv)

[Ev5d]           eve(Exp, Venv) = 0
        ==========================================
        evst(while Exp do Series od, Venv) =  Venv

[Ev5e]  eve(Exp, Venv) != 0,  evs(Series, Venv) = Venv'
        ===============================================
        evst(while Exp do Series od, Venv) =
                           evst(while Exp do Series od, Venv')

[Ev6a]  eve(Id, Venv) = lookup(Venv, Id)
[Ev6b]  eve(Nat-con, Venv) = Nat-con
[Ev6c]  eve(Str-con, Venv) = Str-con

[Ev6d]  eve(Exp1, Venv) = Nat1,
        eve(Exp2, Venv) = Nat2
        ======================
        eve(Exp1 + Exp2, Venv) = Nat1 + Nat2

[Ev6e]  eve(Exp1, Venv) = Nat1,
        eve(Exp2, Venv) = Nat2
        ======================
        eve(Exp1 - Exp2, Venv) =  Nat1 -/ Nat2

[Ev6f]  eve(Exp1, Venv) = Str1,
        eve(Exp2, Venv) = Str2
        ======================
        eve(Exp1 || Exp2, Venv) = Str1 || Str2

[default-Ev6]  eve(Exp,Venv) = nil-value
