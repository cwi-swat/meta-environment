equations

[main] Store1 := create-store(),
       Store2 := statementHistogram(Program, Store1),
       Store3 := controlFlow(Program, Store2)
       ===>
       start(PROGRAM, Program) = start(RStore, Store3)

equations

[hist] statementHistogram(Program, Store) = countStatements(Program, declare(Store, StatementHistogram, rel[str,int]))

equations

[] countStatements(Id := Exp, Store)                         = inc(Store, StatementHistogram, "Assignment")
[] countStatements(if Exp then Stat*1 else Stat*2 fi, Store) = inc(Store, StatementHistogram, "Conditional")
[] countStatements(while Exp do Stat* od, Store)             = inc(Store, StatementHistogram, "Loop")

equations

[cfg] Store1 := declare(Store, ControlFlow, rel[<str,loc>,<str,loc>]),
      <Entry, Rel, Exit> := cflow(Stat*)
      ===>
      controlFlow(begin Decls Stat* end, Store) = set(Store1, ControlFlow, Rel)

equations

[cfg-1] 
  <Entry1, Rel1, Exit1> := cflow(Stat), 
  <Entry2, Rel2, Exit2> := cflow(Stat+)
  ===>
  cflow(Stat ; Stat+) = 
  < 
    Entry1, 
    union(Rel1, union(Rel2, product(Exit1, Entry2))), 
    Exit2
  >

[cfg-2] cflow() = <{}, {}, {}>

equations

[cfg-3]  
  <Entry, Rel, Exit> := cflow(Stat*),
  Control := <unparse-to-string(Exp), get-location(Exp)>
  ===>
  cflow(while Exp do Stat* od) = 
  < 
    {Control},
    union(product({Control}, Entry), union(Rel, product(Exit, {Control}))),
    {Control}
  >

[cfg-4]  
  <Entry1, Rel1, Exit1> := cflow(Stat*1), 
  <Entry2, Rel2, Exit2> := cflow(Stat*2),
  Control := <unparse-to-string(Exp), get-location(Exp)>
  ===>
  cflow(if Exp then Stat*1 else Stat*2 fi) =
  < 
    {Control},
    union(product({Control}, Entry1), union(product({Control}, Entry2), union(Rel1, Rel2))),
    union(Exit1, Exit2)
  > 

[default-cfg]
  Control := <unparse-to-string(Stat), get-location(Stat)>
  ===>
  cflow(Stat) = <{Control}, {}, {Control}>