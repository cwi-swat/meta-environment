equations 

[Tr1]  Instr*1 := trd(Decls),
       <Instr*2, Label> := trs(Series, x)
       =================================
       trp(begin Decls Series end) = Instr*1; Instr*2

[Tr2]  trd(declare Id-type*;) = trits(Id-type*)
 
[Tr3a] trits(Id:natural, Id-type*) = 
       dclnat Id;
       trits(Id-type*)
 
[Tr3b] trits(Id:string, Id-type*) = 
       dclstr Id; 
       trits(Id-type*)
 
[Tr3c] trits() = noop

[Tr4a] <Instr*1, Label'> := trst(Stat, Label), 
       <Instr*2, Label''> := trs(Stat*, Label')
       =======================================
       trs(Stat ; Stat*, Label) = 
       < Instr*1;
         Instr*2
       , 
         Label'' >

[Tr4b] trs( , Label) = <noop, Label>

[Tr5a] Instr* := tre(Exp)
       ================= 
       trst(Id := Exp, Label) = 
       < lvalue Id;
         Instr*; 
         assign
       , 
         Label >

[Tr5b] Instr* := tre(Exp), 
       <Instr*1, Label'> := trs(Series1, Label),
       <Instr*2, Label''> := trs(Series2, Label'),
       Label1 := nextlabel(Label''), 
       Label2 := nextlabel(Label1) 
       ========================================================== 
       trst(if Exp then Series1  else Series2 fi, Label) =
       < Instr*; 
         gofalse Label1; 
         Instr*1;
         goto Label2; 
         label Label1; 
         Instr*2;
 	 label Label2
       , 
         Label2 >

[Tr5c] Instr*1 := tre(Exp), <Instr*2, Label'> := trs(Series, Label),
       Label1 := nextlabel(Label'), Label2 := nextlabel(Label1) 
       =========================================================== 
       trst(while Exp do Series od, Label) =
       < label Label1; 
         Instr*1; 
         gofalse Label2; 
         Instr*2;
         goto Label1; 
         label Label2
       , 
         Label2 >

[Tr6a] tre(Nat-con) = push Nat-con

[Tr6b] tre(Str-con) = push Str-con

[Tr6c] tre(Id) = rvalue Id

[Trcd] Instr*1 := tre(Exp1), Instr*2 := tre(Exp2)
       ======================================== 
       tre(Exp1 + Exp2) = Instr*1; Instr*2; add

[Tr6e] Instr*1 := tre(Exp1), Instr*2 := tre(Exp2)
       ======================================== 
       tre(Exp1 - Exp2) = Instr*1; Instr*2; sub

[Tr6f] Instr*1 := tre(Exp1), Instr*2 := tre(Exp2)
       ========================================== 
       tre(Exp1 || Exp2) = Instr*1; Instr*2; conc

