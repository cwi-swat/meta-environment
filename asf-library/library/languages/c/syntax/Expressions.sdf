module languages/c/syntax/Expressions

imports languages/c/syntax/Constants
imports languages/c/syntax/Identifiers

exports 

sorts Expression

context-free syntax

Identifier 				-> Expression 
HexadecimalConstant 			-> Expression {category("Constant")}
IntegerConstant				-> Expression {category("Constant")}
CharacterConstant 			-> Expression {category("Constant")}
FloatingPointConstant 			-> Expression {category("Constant")}
StringConstant 				-> Expression {category("Constant")}
"(" Expression ")" 			-> Expression %%{bracket}
Expression ("["	Expression "]")	 	-> Expression
Expression ("("  {Expression ","}* ")")	-> Expression
Expression "." Identifier 		-> Expression 
Expression "->" Identifier 		-> Expression
Expression "++" 			-> Expression
Expression "--" 			-> Expression

context-free syntax

"++" Expression 		-> Expression
"--" Expression 		-> Expression
"&" Expression 			-> Expression
"*" Expression 			-> Expression
"+" Expression 			-> Expression
"-" Expression 			-> Expression
"~" Expression 			-> Expression
"!" Expression 			-> Expression
"sizeof" Expression 	  	-> Expression
"sizeof" "(" TypeName ")"	-> Expression

context-free restrictions
"&" -/- [\&]
"-" -/- [\-]
"+" -/- [\+]

context-free syntax

"(" TypeName ")" Expression -> Expression

context-free syntax

Expression "*" Expression	-> Expression {left}
Expression "/" Expression	-> Expression {left}
Expression "%" Expression	-> Expression {left}
Expression "+" Expression	-> Expression {left}
Expression "-" Expression 	-> Expression {left}
Expression "<<" Expression 	-> Expression {left}
Expression ">>" Expression 	-> Expression {left}
Expression "<" Expression 	-> Expression {left}
Expression ">" Expression 	-> Expression {left}
Expression "<=" Expression 	-> Expression {left}
Expression ">=" Expression 	-> Expression {left}
Expression "==" Expression 	-> Expression {left}
Expression "!=" Expression 	-> Expression {left}
Expression "&" Expression 	-> Expression {left}
Expression "^" Expression 	-> Expression {left}
Expression "|" Expression 	-> Expression {left}
Expression "&&" Expression 	-> Expression {left}
Expression "||" Expression 	-> Expression {left}

context-free syntax

Expression ("?" Expression ":") Expression   -> Expression {right}

context-free syntax

Expression "=" Expression 	-> Expression {right}
Expression "*=" Expression 	-> Expression {right}
Expression "/=" Expression 	-> Expression {right}
Expression "%=" Expression 	-> Expression {right}
Expression "+=" Expression 	-> Expression {right}
Expression "-=" Expression 	-> Expression {right}
Expression "<<=" Expression 	-> Expression {right}
Expression ">>=" Expression 	-> Expression {right}
Expression "&=" Expression 	-> Expression {right}
Expression "^=" Expression 	-> Expression {right}
Expression "|=" Expression 	-> Expression {right}

context-free syntax

Expression "," Expression 	-> Expression {left}

context-free priorities
{
Expression "." Identifier 	-> Expression 
Expression "->" Identifier 	-> Expression
Expression "++" 		-> Expression
Expression "--" 		-> Expression
Expression ( "(" {Expression ","}* ")" ) -> Expression %% haakjes gezet om prioriteit tot argument 0 te beperken
Expression ( "[" Expression "]"	       ) -> Expression %% idem

Expression "." Identifier 	-> Expression 
Expression "->" Identifier 	-> Expression
Expression "++" 		-> Expression
Expression "--" 		-> Expression
Expression ( "(" {Expression ","}* ")" ) -> Expression %% haakjes gezet om prioriteit tot argument 0 te beperken
Expression ( "[" Expression "]"	       ) -> Expression %% idem
} %% <0>
> 
{
"++" Expression 		-> Expression
"--" Expression 		-> Expression
"&" Expression 			-> Expression
"*" Expression 			-> Expression
"+" Expression 			-> Expression
"-" Expression 			-> Expression
"~" Expression 			-> Expression
"!" Expression 			-> Expression
"sizeof" Expression 	  	-> Expression
"(" TypeName ")" Expression -> Expression 
}
> { left:
Expression "*" Expression -> Expression {left}
Expression "/" Expression -> Expression {left}
Expression "%" Expression -> Expression {left}}
> { left:
Expression "+" Expression -> Expression {left}
Expression "-" Expression -> Expression {left}}
> { left:
Expression "<<" Expression -> Expression {left}
Expression ">>" Expression -> Expression {left}}
> { left:
Expression "<" Expression -> Expression {left}
Expression ">" Expression -> Expression {left}
Expression "<=" Expression -> Expression {left}
Expression ">=" Expression -> Expression {left}
} >
{left:
Expression "==" Expression -> Expression {left}
Expression "!=" Expression -> Expression {left}
}
> Expression "&" Expression -> Expression {left}
> Expression "^" Expression -> Expression {left}
> Expression "|" Expression -> Expression {left}
> Expression "&&" Expression -> Expression {left}
> Expression "||" Expression -> Expression {left}
> Expression ( "?" Expression ":" ) Expression -> Expression {right} %% haakjes gezet om prioriteit tot argumenten 0 en 4 te beperken
%% <0,4>
> {right:
Expression "=" Expression -> Expression {right}
Expression "*=" Expression -> Expression {right}
Expression "/=" Expression -> Expression {right}
Expression "%=" Expression -> Expression {right}
Expression "+=" Expression -> Expression {right}
Expression "-=" Expression -> Expression {right}
Expression "<<=" Expression -> Expression {right}
Expression ">>=" Expression -> Expression {right}
Expression "&=" Expression -> Expression {right}
Expression "^=" Expression -> Expression {right}
Expression "|=" Expression -> Expression {right}
}
>
Expression "," Expression -> Expression {left}


context-free priorities
Expression ( "?" Expression ":" ) Expression -> Expression {right} %% haakjes gezet om prioriteit tot argument 0 en 4 te beperken, en {right} toegevoegd.
%% <0>
>
Expression "?" Expression ":" Expression -> Expression

