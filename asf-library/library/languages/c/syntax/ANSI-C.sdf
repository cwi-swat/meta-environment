module languages/c/syntax/ANSI-C

%% This grammar is constructed from ANSI-C standard
%% URL: http://www.lysator.liu.se/c/ANSI-C-grammar-y.html
%%
%% - first a one-to-one translation from yacc to sdf
%% - replaced terminal identifiers (RETURN) by literal symbols ("return")
%% - renamed non-terminals from dash separated to CamelCase
%% - imported lexical definition of C comments from the CPP grammar
%% - then added follow restrictions on identifiers and some unary operators
%% - fixed an ambiguity in the lexical syntax IS*? was produced, changed to IS*
%% - refactored all right-associative lists using SDF2 list syntax
%% - renamed all non-terminals from LogicalAndExpression up-to and not
%%   including UnaryExpression to LogicalOrExpression. This was a single
%%   injection chain with left recursive binary operators. Each non-terminal
%%   up the chain introduced a higher priority. The priorities are now expressed
%%   using context-free priorities to cope with the dissappearance of the
%%   non-terminals. All trivial productions from LogicalOrExpression to
%%   LogicalOrExpression that were introduced by the previous actions have been
%%   removed to fix the obvious circularity.
%% - added lexical restriction on D+
%% - removed UnaryOperator non-terminal by inlining the alternative operators
%% - removed AssignmentOperator non-terminal by inlining the alternatives
%% - renamed LogicalOrExpression to BasicExpression
%% - renamed PostfixExpression to PrimaryExpression and removed the 
%%   trivial injection
%% - folded empty and non-empty use of ArgumentList in PrimaryExpression
%%
%% The grammar is intentionally left ambiguous and it should stay that way!
%%
%% Ambiguities:
%% int a; /* is 'a' an identifier or a typename? */
%% { int a; int *a; a = b } /* is int * a; a multiplication or a declaration? */
%% (print)("hallo"); /* is (print) a cast to type print or a function call? */
%%
%% Each of the above ambiguities can be solved by a type analysis. If an 
%% identifier is declared as a type using typedef, then it will be reserved
%% and can not be a simple identifier anymore.

exports

sorts 
	AbstractDeclarator
	ArgumentExpressionList
	AssignmentExpression
	BasicExpression
	CompoundStatement
	Constant
	ConstantExpression
	D
	Declaration
	DeclarationList
	DeclarationSpecifiers
	Declarator
	DirectAbstractDeclarator
	DirectDeclarator
	E
	EnumSpecifier
	Enumerator
	EnumeratorList
	Expression
	ExpressionStatement
	ExternalDeclaration
	FS
	FunctionDefinition
	H
	IS
	Identifier
	IdentifierList
	InitDeclarator
	InitDeclaratorList
	Initializer
	InitializerList
	IterationStatement
	JumpStatement
	Keyword
	L
	LabeledStatement
	ParameterDeclaration
	ParameterList
	ParameterTypeList
	Pointer
	PrimaryExpression
	SelectionStatement
	SpecifierQualifierList
	Statement
	StatementList
	StorageClassSpecifier
	StringLiteral
	StructDeclaration
	StructDeclarationList
	StructDeclarator
	StructDeclaratorList
	StructOrUnion
	StructOrUnionSpecifier
	TranslationUnit
	TypeName
	TypeQualifier
	TypeQualifierList
	TypeSpecifier
	UnaryExpression


lexical syntax

[0-9] -> D	
[a-zA-Z\_] -> L	
[a-fA-F0-9] -> H	
[Ee] [\+\-]? D+ -> E	
[fFlL] -> FS
[uUlL] -> IS

lexical syntax

"auto"			|
"break"			|
"case"			|
"char"			|
"const"			|
"continue"		|
"default"		|
"do"			|
"double"		|
"else"			|
"enum"			|
"extern"		|
"float"			|
"for"			|
"goto"			|
"if"			|
"int"			|
"long"		  	|
"register"		|
"return"		|
"short"			|
"signed"		|
"sizeof"		|
"static"		|
"struct"		|
"switch"		|
"typedef"		|
"union"			|
"unsigned"		|
"void"			|
"volatile"		|
"while"			-> Keyword

Keyword -> Identifier {reject}

lexical syntax

L ( L | D )*		-> Identifier

lexical restrictions

 Identifier -/- [0-9a-zA-Z\_] %% (L | D)
 D+ -/- [0-9]
 
lexical syntax
[0] [xX] H+ IS*		-> Constant
[0] D+ IS*		-> Constant
D+ IS*		        -> Constant
[L]? [\'] ( ([\\]~[]) | ~[\\\'] )+ [\']	-> Constant

D+ E FS?		-> Constant
D* [\.] D+ E? FS?	-> Constant
D+ [\.] D* E? FS?	-> Constant

[L]? [\"] ( ([\\]~[]) | ~[\\\"] )* [\"]	-> StringLiteral

lexical syntax

[\ \t\011\n\r\012] -> LAYOUT

context-free restrictions

LAYOUT? -/- [\ \t\011\n\r\012] 

imports languages/cpp/syntax/CommentsAsLayout


context-free syntax

{AssignmentExpression ","}* -> ArgumentExpressionList

context-free syntax

Identifier -> PrimaryExpression
Constant -> PrimaryExpression
StringLiteral -> PrimaryExpression
"(" Expression ")" -> PrimaryExpression
PrimaryExpression ("["|"<:")	Expression ("]"|":>")	 -> PrimaryExpression
PrimaryExpression "(" ArgumentExpressionList ")" -> PrimaryExpression
PrimaryExpression "." Identifier -> PrimaryExpression 
PrimaryExpression "->" Identifier -> PrimaryExpression
PrimaryExpression "++" -> PrimaryExpression
PrimaryExpression "--" -> PrimaryExpression

context-free syntax

PrimaryExpression -> UnaryExpression
"++" UnaryExpression -> UnaryExpression
"--" UnaryExpression -> UnaryExpression
"&" BasicExpression -> UnaryExpression
"*" BasicExpression -> UnaryExpression
"+" BasicExpression -> UnaryExpression
"-" BasicExpression -> UnaryExpression
"~" BasicExpression -> UnaryExpression
"!" BasicExpression -> UnaryExpression
"sizeof" UnaryExpression -> UnaryExpression
"sizeof" "(" TypeName ")" -> UnaryExpression

context-free restrictions
"&" -/- [\&]
"-" -/- [\-]
"+" -/- [\+]

context-free syntax

UnaryExpression -> BasicExpression
"(" TypeName ")" BasicExpression -> BasicExpression

context-free syntax
BasicExpression "*" BasicExpression -> BasicExpression {left}
BasicExpression "/" BasicExpression -> BasicExpression {left}
BasicExpression "%" BasicExpression -> BasicExpression {left}

context-free syntax
BasicExpression "+" BasicExpression -> BasicExpression {left}
BasicExpression "-" BasicExpression -> BasicExpression {left}

context-free syntax
BasicExpression "<<" BasicExpression -> BasicExpression {left}
BasicExpression ">>" BasicExpression -> BasicExpression {left}

context-free syntax
BasicExpression "<" BasicExpression -> BasicExpression {left}
BasicExpression ">" BasicExpression -> BasicExpression {left}
BasicExpression "<=" BasicExpression -> BasicExpression {left}
BasicExpression ">=" BasicExpression -> BasicExpression {left}

context-free syntax
BasicExpression "==" BasicExpression -> BasicExpression {left}
BasicExpression "!=" BasicExpression -> BasicExpression {left}

context-free syntax
BasicExpression "&" BasicExpression -> BasicExpression {left}

context-free syntax
BasicExpression "^" BasicExpression -> BasicExpression {left}

context-free syntax
BasicExpression "|" BasicExpression -> BasicExpression {left}

context-free syntax
BasicExpression "&&" BasicExpression -> BasicExpression {left}

context-free syntax

BasicExpression "||" BasicExpression -> BasicExpression {left}
BasicExpression -> ConstantExpression
BasicExpression "?" Expression ":" ConstantExpression -> ConstantExpression {right}

ConstantExpression -> AssignmentExpression
UnaryExpression "=" AssignmentExpression -> AssignmentExpression {right}
UnaryExpression "*=" AssignmentExpression -> AssignmentExpression {right}
UnaryExpression "/=" AssignmentExpression -> AssignmentExpression {right}
UnaryExpression "%=" AssignmentExpression -> AssignmentExpression {right}
UnaryExpression "+=" AssignmentExpression -> AssignmentExpression {right}
UnaryExpression "-=" AssignmentExpression -> AssignmentExpression {right}
UnaryExpression "<<=" AssignmentExpression -> AssignmentExpression {right}
UnaryExpression ">>=" AssignmentExpression -> AssignmentExpression {right}
UnaryExpression "&=" AssignmentExpression -> AssignmentExpression {right}
UnaryExpression "^=" AssignmentExpression -> AssignmentExpression {right}
UnaryExpression "|=" AssignmentExpression -> AssignmentExpression {right}

context-free syntax

AssignmentExpression -> Expression
Expression "," AssignmentExpression -> Expression {left}

context-free priorities
{
UnaryExpression -> BasicExpression
"(" TypeName ")" BasicExpression -> BasicExpression
}
>
{ left:
BasicExpression "*" BasicExpression -> BasicExpression {left}
BasicExpression "/" BasicExpression -> BasicExpression {left}
BasicExpression "%" BasicExpression -> BasicExpression {left}
}
>
{ left:
BasicExpression "+" BasicExpression -> BasicExpression {left}
BasicExpression "-" BasicExpression -> BasicExpression {left}
}
>
{ left:
BasicExpression "<<" BasicExpression -> BasicExpression {left}
BasicExpression ">>" BasicExpression -> BasicExpression {left}
}
>
{ left:
BasicExpression "<" BasicExpression -> BasicExpression {left}
BasicExpression ">" BasicExpression -> BasicExpression {left}
BasicExpression "<=" BasicExpression -> BasicExpression {left}
BasicExpression ">=" BasicExpression -> BasicExpression {left}
}
>
BasicExpression "&" BasicExpression -> BasicExpression {left}
>
BasicExpression "^" BasicExpression -> BasicExpression {left}
>
BasicExpression "|" BasicExpression -> BasicExpression {left}
>
BasicExpression "&&" BasicExpression -> BasicExpression {left}
>
BasicExpression "||" BasicExpression -> BasicExpression {left}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
context-free syntax
DeclarationSpecifiers ";" -> Declaration
DeclarationSpecifiers InitDeclaratorList ";" -> Declaration

context-free syntax
StorageClassSpecifier -> DeclarationSpecifiers
StorageClassSpecifier DeclarationSpecifiers -> DeclarationSpecifiers
TypeSpecifier -> DeclarationSpecifiers
TypeSpecifier DeclarationSpecifiers -> DeclarationSpecifiers
TypeQualifier -> DeclarationSpecifiers
TypeQualifier DeclarationSpecifiers -> DeclarationSpecifiers

context-free syntax

{InitDeclarator ","}+ -> InitDeclaratorList

context-free syntax
Declarator -> InitDeclarator
Declarator "=" Initializer -> InitDeclarator

context-free syntax
"typedef"
| "extern"
| "static"
| "auto"
| "register"
-> StorageClassSpecifier

context-free syntax
"void"
| "char"
| "short"
| "int"
| "long"
| "float"
| "double"
| "signed"
| "unsigned"
| StructOrUnionSpecifier
| EnumSpecifier
| Identifier
-> TypeSpecifier

context-free syntax
StructOrUnion Identifier ("{"|"<%") StructDeclarationList ("}"|"%>")	-> StructOrUnionSpecifier
StructOrUnion ("{"|"<%") StructDeclarationList  ("}"|"%>")	-> StructOrUnionSpecifier
StructOrUnion Identifier-> StructOrUnionSpecifier

context-free syntax
"struct"
| "union"
-> StructOrUnion

context-free syntax
StructDeclaration+ -> StructDeclarationList

context-free syntax
SpecifierQualifierList StructDeclaratorList ";" -> StructDeclaration

context-free syntax

(TypeSpecifier | TypeQualifier)+ -> SpecifierQualifierList

context-free syntax
{StructDeclarator ","}+ -> StructDeclaratorList

context-free syntax
Declarator -> StructDeclarator
":" ConstantExpression -> StructDeclarator
Declarator ":" ConstantExpression -> StructDeclarator

context-free syntax
"enum" ("{"|"<%") EnumeratorList  ("}"|"%>")	 -> EnumSpecifier
"enum" Identifier ("{"|"<%") EnumeratorList  ("}"|"%>")	 -> EnumSpecifier
"enum" Identifier -> EnumSpecifier

context-free syntax
{Enumerator ","}+ -> EnumeratorList

context-free syntax
Identifier -> Enumerator
Identifier "=" ConstantExpression -> Enumerator

context-free syntax
"const" -> TypeQualifier
"volatile" -> TypeQualifier

context-free syntax
Pointer DirectDeclarator -> Declarator
DirectDeclarator -> Declarator

context-free syntax
Identifier -> DirectDeclarator
"(" Declarator ")" -> DirectDeclarator
DirectDeclarator ("["|"<:")	 ConstantExpression ("]"|":>")	 -> DirectDeclarator
DirectDeclarator ("["|"<:")	 ("]"|":>")	 -> DirectDeclarator
DirectDeclarator "(" ParameterTypeList ")" -> DirectDeclarator
DirectDeclarator "(" IdentifierList ")" -> DirectDeclarator
DirectDeclarator "(" ")" -> DirectDeclarator

context-free syntax
"*" -> Pointer
"*" TypeQualifierList -> Pointer
"*" Pointer -> Pointer
"*" TypeQualifierList Pointer -> Pointer

context-free syntax
TypeQualifier+ -> TypeQualifierList

context-free syntax
ParameterList -> ParameterTypeList
ParameterList "," "..." -> ParameterTypeList

context-free syntax
{ParameterDeclaration ","}+ -> ParameterList

context-free syntax
DeclarationSpecifiers Declarator -> ParameterDeclaration
DeclarationSpecifiers AbstractDeclarator -> ParameterDeclaration
DeclarationSpecifiers -> ParameterDeclaration

context-free syntax
{Identifier ","}+ -> IdentifierList

context-free syntax
SpecifierQualifierList -> TypeName
SpecifierQualifierList AbstractDeclarator -> TypeName

context-free syntax
Pointer -> AbstractDeclarator
DirectAbstractDeclarator -> AbstractDeclarator
Pointer DirectAbstractDeclarator -> AbstractDeclarator

context-free syntax
"(" AbstractDeclarator ")" -> DirectAbstractDeclarator
("["|"<:")	 ("]"|":>")	 -> DirectAbstractDeclarator
("["|"<:")	 ConstantExpression ("]"|":>")	 -> DirectAbstractDeclarator
DirectAbstractDeclarator ("["|"<:")	 ("]"|":>")	 -> DirectAbstractDeclarator
DirectAbstractDeclarator ("["|"<:")	 ConstantExpression ("]"|":>")	 -> DirectAbstractDeclarator
"(" ")" -> DirectAbstractDeclarator
"(" ParameterTypeList ")" -> DirectAbstractDeclarator
DirectAbstractDeclarator "(" ")" -> DirectAbstractDeclarator
DirectAbstractDeclarator "(" ParameterTypeList ")" -> DirectAbstractDeclarator

context-free syntax
AssignmentExpression -> Initializer
("{"|"<%") InitializerList  ("}"|"%>")	 -> Initializer
("{"|"<%") InitializerList ","  ("}"|"%>")	 -> Initializer

context-free syntax
{Initializer ","}+ -> InitializerList

context-free syntax
LabeledStatement -> Statement
CompoundStatement -> Statement
ExpressionStatement -> Statement
SelectionStatement -> Statement
IterationStatement -> Statement
JumpStatement -> Statement

context-free syntax
Identifier ":" Statement -> LabeledStatement
"case" ConstantExpression ":" Statement -> LabeledStatement
"default" ":" Statement -> LabeledStatement

context-free syntax
("{"|"<%")  ("}"|"%>")	 -> CompoundStatement
("{"|"<%") StatementList  ("}"|"%>")	 -> CompoundStatement
("{"|"<%") DeclarationList  ("}"|"%>")	 -> CompoundStatement
("{"|"<%") DeclarationList StatementList  ("}"|"%>")	 -> CompoundStatement

context-free syntax
Declaration+ -> DeclarationList

context-free syntax
Statement+ -> StatementList

";" -> ExpressionStatement
Expression ";" -> ExpressionStatement

context-free syntax
"if" "(" Expression ")" Statement -> SelectionStatement
"if" "(" Expression ")" Statement "else" Statement -> SelectionStatement
"switch" "(" Expression ")" Statement -> SelectionStatement

context-free syntax
"while" "(" Expression ")" Statement -> IterationStatement
"do" Statement "while" "(" Expression ")" ";" -> IterationStatement
"for" "(" ExpressionStatement ExpressionStatement ")" Statement -> IterationStatement
"for" "(" ExpressionStatement ExpressionStatement Expression ")" Statement -> IterationStatement

context-free syntax
"goto" Identifier ";" -> JumpStatement
"continue" ";" -> JumpStatement
"break" ";" -> JumpStatement
"return" ";" -> JumpStatement
"return" Expression ";" -> JumpStatement

context-free syntax
ExternalDeclaration -> TranslationUnit
TranslationUnit ExternalDeclaration -> TranslationUnit

context-free syntax
FunctionDefinition -> ExternalDeclaration
Declaration -> ExternalDeclaration

context-free syntax
DeclarationSpecifiers Declarator DeclarationList CompoundStatement-> FunctionDefinition
DeclarationSpecifiers Declarator CompoundStatement-> FunctionDefinition
Declarator DeclarationList CompoundStatement-> FunctionDefinition
Declarator CompoundStatement-> FunctionDefinition


