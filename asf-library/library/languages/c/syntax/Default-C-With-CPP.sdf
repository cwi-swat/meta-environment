module languages/c/syntax/Default-C-With-CPP

imports languages/generic-cpp/syntax/Whitespace
imports languages/generic-cpp/syntax/CommentsAsLayout

imports languages/c/syntax/C

%% This module shows a typical C/CPP combination that may work for your C
%% files. There is no guarantee however, since one can not predict
%% in which ways the preprocessor statements are intertwined with the C
%% constructs. This module covers a lot of 'nice' uses of the preprocessor.

%% Conditional statements
imports languages/generic-cpp/syntax/Generic-Preprocessor[
	Identifier
	Expression
	StringConstant
	Statement+
	Statement
]

%% Conditional declarations
imports languages/generic-cpp/syntax/Generic-Preprocessor[
	Identifier
	Expression
	StringConstant
	Declaration+
	Declaration
]

%% Conditional functions
imports languages/generic-cpp/syntax/Generic-Preprocessor[
	Identifier
	{Expression ";"}+
	StringConstant
	ExternalDeclaration+
	ExternalDeclaration
]

%% Macros with bracketed statements as definitions
imports languages/generic-cpp/syntax/Generic-Preprocessor[
	Identifier
	( "(" Statement ")" )
	StringConstant
	ExternalDeclaration+
	ExternalDeclaration
]

%% Macros with normal statements as definitions
imports languages/generic-cpp/syntax/Generic-Preprocessor[
	Identifier
	Statement
	StringConstant
	ExternalDeclaration+
	ExternalDeclaration
]

%% Macro that yield a declaration without ; at the end
imports languages/generic-cpp/syntax/Generic-Preprocessor[
	Identifier
	( Specifier+ {InitDeclarator ","}+ )
	StringConstant
	ExternalDeclaration+
	ExternalDeclaration
]

exports

context-free syntax
	"va_arg" "(" Expression "," TypeName ")" -> Expression {prefer}

hiddens

context-free start-symbols
	TranslationUnit
