module Preprocessor
exports
  lexical syntax
    ~[\ \t\n\/]                           -> TokenChar
    [\/]                                  -> Slash
    Slash                                 -> TokenChar
    TokenChar+                            -> Token
    ( [\ \t] | ( [\\] [\n] ) | Comment )+ -> TokWS
    ( [\ \t] | Comment )*                 -> WS
    {Token TokWS}+                        -> TokenSeq
    ~[\"\ \t\n\>]+                        -> FileName

  lexical restrictions
    Slash    -/- [\*]
    Token    -/- ~[\ \t\n\/]	
    TokenSeq -/- ~[\ \t\n]
    WS       -/- [\ \t]

  lexical syntax
    "#" WS "define" WS Identifier WS ( "(" WS {( Identifier WS ) ( "," WS )}* ")" WS )? TokenSeq? WS [\n] -> ControlLine
    "#" WS "undef" WS Identifier WS [\n]                                                                 -> ControlLine
    "#" WS "include" WS "<" FileName ">" WS [\n]                                                         -> ControlLine
    "#" WS "include" WS "\"" FileName "\"" WS [\n]                                                       -> ControlLine
    "#" WS "include" WS TokenSeq WS [\n]                                                                 -> ControlLine
    "#" WS "line" WS [0-9]+ WS ( "\"" WS FileName WS "\"" )? WS [\n]                                      -> ControlLine
    "#" WS  Constant ( "\"" WS FileName WS "\"" )? WS [\n]                                      	 -> ControlLine
    "#" WS "error" WS TokenSeq? WS [\n]                                                                  -> ControlLine
    "#" WS "pragma" WS TokenSeq? WS [\n]                                                                 -> ControlLine
    "#" WS "if" WS Expression WS [\n]                                                            -> IfLine
    "#" WS "if" WS Identifier WS [\n]                                                                    -> IfLine
    "#" WS "if" WS Identifier WS "!=" WS [0-9]+ WS [\n]                                                     -> IfLine
    "#" WS "ifdef" WS Identifier WS [\n]                                                                 -> IfLine
    "#" WS "ifndef" WS Identifier WS [\n]                                                                -> IfLine
    "#" WS "elif" WS Expression WS [\n]                                                          -> ElifLine
    "#" WS "else" WS [\n]                                                                                -> ElseLine

  context-free syntax
    ControlLine -> ExternalDefinition
    ControlLine -> MemberDeclaration

  context-free syntax
    IfLine ExternalDefinition* ( ElifLine ExternalDefinition* )* ( ElseLine ExternalDefinition* )? "#" "endif" -> ExternalDefinition {cons("endif")}

