module languages/generic-cpp/syntax/Generic-Preprocessor[
  Identifier
  Expression
  String
  Body
  Result
]

exports
sorts Filename SystemInclude LocalInclude IncludeFile IfPart ElifPart ElsePart

lexical syntax
  %% What exactly makes up a valid C-Preprocessor filename?
  [A-Za-z0-9\/\_\.\,]* -> Filename
  [\<] Filename [\>] -> SystemInclude
  [\"] Filename [\"] -> LocalInclude

lexical syntax
  [\\][\n] -> LAYOUT

context-free restrictions
  LAYOUT? -/- [\\].[\n]

context-free syntax
  String String     -> String {left}
  Identifier String -> String 
  String Identifier -> String 

context-free syntax
  IfPart Body ElifPart[[Body]]* ElsePart[[Body]]? "#" "endif" -> Result
  
  "#" "if" Expression     -> IfPart
  "#" "ifdef" Identifier  -> IfPart
  "#" "ifndef" Identifier -> IfPart
  
  "#" "elif" Expression Body -> ElifPart[[Body]]
  "#" "else" Body            -> ElsePart[[Body]]
  
context-free syntax
  SystemInclude -> IncludeFile
  LocalInclude  -> IncludeFile

  "#" "include" IncludeFile -> Result

context-free syntax
  "#" "define" Identifier                                       -> Result
  "#" "define" Identifier Expression                            -> Result
  "#" "define" Identifier "(" {Identifier ","}* ")" Expression  -> Result
  "#" "undef" Expression                                        -> Result
  "#" "line" Expression Filename?                               -> Result
  "#" "error" Expression?                                       -> Result
  "#" "pragma" Expression?                                      -> Result
  "#"                                                           -> Result

context-free syntax
 "#" Identifier                                                 -> String
  Identifier "##" Identifier                                    -> Identifier {left}
  "defined" Identifier                                          -> Expression
  "defined"                                                     -> Identifier {reject}

context-free syntax
  "__LINE__" -> Expression
  "__LINE__" -> Identifier {reject}
  "__FILE__" -> Expression
  "__FILE__" -> Identifier {reject}
  "__DATE__" -> Expression
  "__DATE__" -> Identifier {reject}
  "__TIME__" -> Expression
  "__TIME__" -> Identifier {reject}
  "__STDC__" -> Expression
  "__STDC__" -> Identifier {reject}

syntax
  "??=" -> "#"
  "??/" -> "\\"
  "??'" -> "^"
  "??(" -> "["
  "??)" -> "]"
  "??!" -> "|"
  "??<" -> "{"
  "??>" -> "}"
  "??-" -> "~"

