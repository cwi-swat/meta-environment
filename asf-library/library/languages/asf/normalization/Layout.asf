equations

%% This function will:
%%	* replace all layout on matching positions by a variable
%%	* replace all layout on building positions by a space
%%
%% Except when the layout contains any lexical constructor functions:
%%	* they are lifted to top level such that they can either be
%%	  constructed, or matched.

[main]
	normalize-layout(Module) = fix-layout(Module)

equations

[fix-equation]
	fix-layout(Lhs = Rhs) = match-layout(Lhs) = build-layout(Rhs)

[fix-match-condition]
	fix-layout(Lhs := Rhs) = match-layout(Lhs) := build-layout(Rhs)

[fix-no-match-condition]
	fix-layout(Lhs !:= Rhs) = match-layout(Lhs) !:= build-layout(Rhs)

[fix-equality-condition]
	fix-layout(Lhs == Rhs) = build-layout(Lhs) == build-layout(Rhs)

[fix-inequality-condition]
	fix-layout(Lhs != Rhs) = build-layout(Lhs) != build-layout(Rhs)

equations

[replace-with-constructors]
	is-layout(Tree) == true,
	[Tree+] := find-layout(Tree, [])
	===>
	build-layout(Tree) = layout([Tree+])

[replace-fixed-layout]
	is-layout(Tree) == true,
	[] == find-layout(Tree, [])
	===>
	build-layout(Tree) = space()

equations
	
[replace-with-constructors]
	is-layout(Tree) == true,
	[Tree+] := find-layout(Tree, [])
	===>
	match-layout(Tree) = layout([Tree+])

[replace-without-constructors]
	is-layout(Tree) == true,
	[] == find-layout(Tree, [])
	===>
	match-layout(Tree) = variable-layout()

equations

[found-layout-constructor]
	is-lexical-constructor(Tree) == true
	===>
	find-layout(Tree, [Tree*]) = [Tree, Tree*]

[found-layout-variable]
	is-layout-variable(Tree) == true
	===>
	find-layout(Tree, [Tree*]) = [layout-to-list-variable(Tree), Tree*]

equations

[yes]
	is-lexical-constructor(
	appl(prod(_Symbols,
		lex(layout),
		attrs([_Attr*1,term(lexical-constructor),_Attr*2])),_Args))
	= true

[default-no]
	is-lexical-constructor(_Tree) = false

equations

[annotated]
	is-layout-variable(Tree _Ann) = is-layout-variable(Tree)

[yes]
	is-layout-variable(
	appl(prod(_Symbols,varsym(cf(parameterized-sort("CHARS",[layout]))),_Attrs),_Args)) = true

[default-no]
	is-layout-variable(_Tree) = false

equations

[annotated]
	layout-to-list-variable(Tree Ann) = Tree2 Ann
	when Tree2 := layout-to-list-variable(Tree)

[translate]
	layout-to-list-variable(
	appl(prod(Symbols,varsym(cf(parameterized-sort("CHARS",[layout]))),Attributes),Args)) =
	appl(prod(Symbols,varsym(lex(iter-star(layout))),Attributes),Args)

equations

[yes]
	is-layout(appl(prod(_Symbols,cf(opt(layout)),_Attrs),_Args)) = true

[annotated]
	is-layout(Tree _Ann) = is-layout(Tree)

[default-no]
	is-layout(_Tree) = false
	
equations

[define-space]
	space() =
	appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(iter(layout))],cf(layout),no-attrs),[appl(list(lex(iter(layout))),[appl(prod([char-class([range(9,10),13,32])],lex(layout),attrs([term(cons("whitespace"))])),[32])])])])

[define-layout]
	layout(Args) = 
	appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(iter(layout))],cf(layout),no-attrs),[appl(list(lex(iter(layout))),Args)])])


[define-variable-layout]
	variable-layout() = 
	appl(prod([varsym(opt(layout))],cf(opt(layout)),no-attrs),[appl(prod([lit("LAYOUT?")],varsym(opt(layout)),no-attrs),[appl(prod([char-class([63])],lit("?"),no-attrs),[63])])])
