equations

[bootstrap-convenience]
	constructors(Tree) = deconstruct(Tree)

[main]	
	constructors(Module) = deconstruct(Module)

equations

%% This function maps lexical constructor syntax back to normal syntax.
%% The resulting tree are ``as if the parser produced them''.

[deconstruct-lexical]
       attrs([_Attr*1, term(lexical-constructor), _Attr*2]) := Attributes,
         Symbols2      := get-cons-args(Symbols),
       Symbols3        := unwrap(Symbols2),
       Symbol2         := unwrap(Symbol),
       Attributes2     := remove-tag(Attributes),

       Args2           := get-cons-args(Args),
       Args3           := reconstruct(Args2)
       ===>
       deconstruct(
       appl(prod(Symbols,cf(parameterized-sort("CHARS",[Symbol])),Attributes),
               Args) Ann) =
       appl(prod(Symbols3,lex(Symbol2),Attributes2), Args3) Ann

[deconstruct-injection]
	deconstruct(
	appl(prod([cf(parameterized-sort("CHARS",[Symbol]))],cf(Symbol),
		no-attrs),
	[Tree]) Ann) = 
	appl(prod([lex(Symbol)],cf(Symbol),no-attrs),[Tree]) Ann

 %% The following is a parse tree of the character notation. There are
 %% two notations, NumChar and ShortChar. With numchar, we decode the number
 %% to an ASCII value. With ShortChar, we have regular characters and
 %% escaped characters, and the actual ASCII is buried somewhere in the
 %% parse tree. An exception is made for \n, \r and \t because there
 %% literal value should encode a different ASCII value.  
 %%
 %% The goal of this equation is to translate the parse tree of \34 to the
 %% parse tree '34', an actual AsFix representation of the quote. This works
 %% for all 256 ASCII values. Or the parse tree of \" to an actual 34.
 
 [deconstruct-numchars-to-real-chars]
	deconstruct(appl(prod([cf(sort("CHAR"))],cf(parameterized-sort("CHARS",[_Symbol])),_Attributes),[appl(prod([cf(sort("ASF-NumChar"))],cf(sort("CHAR")),attrs([term(cons("numeric"))])),[appl(prod([lex(sort("ASF-NumChar"))],cf(sort("ASF-NumChar")),no-attrs),[appl(prod([char-class([92]),lex(iter(char-class([range(48,57)])))],lex(sort("ASF-NumChar")),attrs([term(cons("digits"))])),[92,appl(list(lex(iter(char-class([range(48,57)])))),Digits)_Ann5])_Ann4])_Ann3])_Ann2])_Ann1)
= 
	digits(Digits)

 [deconstruct-regular-shortchars-to-real-chars]
	deconstruct(appl(prod([cf(sort("CHAR"))],cf(parameterized-sort("CHARS",[char-class([range(48,57)])])),no-attrs),[appl(prod([cf(sort("ASF-ShortChar"))],cf(sort("CHAR")),attrs([term(cons("short"))])),[appl(prod([lex(sort("ASF-ShortChar"))],cf(sort("ASF-ShortChar")),no-attrs),[appl(prod([char-class([range(48,57),range(65,90),range(97,122)])],lex(sort("ASF-ShortChar")),attrs([term(cons("regular"))])),[Tree])_Ann4])_Ann3])_Ann2])_Ann1) = Tree

 [deconstruct-escaped-char-to-real-char]
	deconstruct(appl(prod([cf(sort("CHAR"))],cf(parameterized-sort("CHARS",[char-class([range(48,57)])])),no-attrs),[appl(prod([cf(sort("ASF-ShortChar"))],cf(sort("CHAR")),attrs([term(cons("short"))])),[appl(prod([lex(sort("ASF-ShortChar"))],cf(sort("ASF-ShortChar")),no-attrs),[appl(prod([char-class([92]),char-class([range(32,47),range(58,64),range(91,96),110,114,116,range(123,255)])],lex(sort("ASF-ShortChar")),attrs([term(cons("escaped"))])),[92,Tree])_Ann4])_Ann3])_Ann2])_Ann1) = 
	reserved-chars(Tree)

[deconstruct-CHAR-variable-to-lexical-variable]
	deconstruct(appl(prod([cf(sort("CHAR"))],cf(parameterized-sort("CHARS",[Symbol])),no-attrs),[appl(prod([varsym(cf(sort("CHAR")))],cf(sort("CHAR")),no-attrs),[appl(prod(Symbols,varsym(cf(sort("CHAR"))),Attributes),Args)_Ann3])_Ann2]) Ann1)
=
	appl(prod([varsym(lex(Symbol))],lex(Symbol),no-attrs),[appl(prod(Symbols,varsym(lex(Symbol)),Attributes),Args)]) Ann1

equations

[list-reconstruction]
       Symbol2 := unwrap(Symbol),
       Args2 := remove-layout(Args)
       ===>
       reconstruct(appl(list(Symbol),Args)) = appl(list(Symbol2),Args2)

[prod-reconstruction]
       Symbols2 := remove-layout(Symbols),
       Symbols3 := unwrap(Symbols2),
       Symbol2 := unwrap(Symbol),
       Args2 := remove-layout(Args)
       ===>
       reconstruct(appl(prod(Symbols,Symbol,Attributes),Args)) =
       appl(prod(Symbols3,Symbol2,Attributes), Args2)

equations

%% here we mimick some of the sdf2-normalizers funny behaviour. Due to
%% deconstruct() and reconstruct the following illegal combinations can
%% be introduced, so we remove them again; similar equations, but on the
%% SDF2 Symbol level exist in the SDF2 normalizer.

[lex-cc]
        lex(char-class(CRs)) = char-class(CRs)

[cf-cc]
        cf(char-class(CRs)) = char-class(CRs)

[lex-lit]
        lex(lit(QLit)) = lit(QLit)

[cf-lit]
        cf(lit(QLit)) = lit(QLit)


equations

%% These functions are used to remove the prefix function notation of 
%% lexical constructor functions from the production and the arguments.

[symbols]
       get-cons-args([lit(_QLit),cf(opt(layout)),lit("("),cf(opt(layout)),
                       Symbol*,cf(opt(layout)),lit(")")])
       = remove-layout([Symbol*])

[trees]
       get-cons-args([_Name,_L1,_BO,_L2,Tree*,_L3,_BC])
       = remove-layout([Tree*])

equations

%% The essential work is done here, where the CHARS wrapper symbols are
%% remove to obtain an original AsFix lexical parse tree. We also translate
%% all cf symbols to lex.

[remove-chars-wrapper]
      unwrap(parameterized-sort("CHARS",[Symbol])) = Symbol

[put-cf-back-to-lex]
      unwrap(cf(Symbol)) = lex(Symbol)

equations

%% The digits after the \ in an ASF-NumChar are taken, and an ascii value
%% is computed from them. 

[one]
	NatCon2 := NatCon - 48
	===>
	digits([NatCon]) = NatCon2

[more]	
	NatCon2 := digits([Tree*]),
	NatCon3 := NatCon - 48,
	NatCon4 := 10*NatCon2 + NatCon3
	===>
	digits([Tree*, NatCon]) = NatCon4

equations

[newline]
	reserved-chars(110) = 10

[tab]
	reserved-chars(116) = 9

[return]
	reserved-chars(114) = 13

[default-otherwise]
	reserved-chars(Tree) = Tree

equations

[empty-after]
	remove-tag(attrs([term(lexical-constructor)])) = no-attrs

[non-empty-after-left]
	remove-tag(attrs([Attr*,term(lexical-constructor),Attr+])) =
		attrs([Attr*,Attr+])

[non-empty-after-right]
	remove-tag(attrs([Attr+,term(lexical-constructor),Attr*])) =
		attrs([Attr+,Attr*])

equations

[with-ann]
	is-layout-tree(Tree _Ann) = is-layout-tree(Tree)

[cf-tree]
	is-layout-tree(appl(prod(_Symbols,cf(opt(layout)),_Attributes),_Args))
	= true

[lex-tree]
	is-layout-tree(appl(prod(_Symbols,lex(opt(layout)),_Attributes),_Args))
	= true

[default]
	is-layout-tree(_Tree) = false

equations

%% Lexical constructor functions contain superfluous layout in both
%% productions and arguments. The following functions remove it.

[divide]
	is-layout-tree(Tree) == true
	===>
	remove-layout([Tree*1, Tree, Tree*2]) = remove-layout([Tree*1, Tree*2])

[default]
	remove-layout([Tree*]) = [Tree*]

equations

[cf-symbol]
	is-layout-symbol(cf(opt(layout))) = true

[lex-symbol]
	is-layout-symbol(lex(opt(layout))) = true

[default]
	is-layout-symbol(_Symbol) = false

equations

[divide]
	is-layout-symbol(Symbol) == true
	===>
	remove-layout([Symbol*1, Symbol, Symbol*2]) =
	remove-layout([Symbol*1, Symbol*2])

[default]
	remove-layout(Symbols) = Symbols
