equations

  [lcid-1'1] CConstant := modname2iname(Modid)
             ================================
             locate-constants-in-decls(Modid,) =
               void CConstant()
                 {
                 }

  [lcid-1'2] CConstant := modname2iname(Modid),
             (ce-pair*,Decl+2,Aint) :=
               locate-constants-in-decllist(Decl+1,(,0)),
             Decl+3 := make-init-function(Modid,ce-pair*)
             ===========================================
             locate-constants-in-decls(Modid,Decl+1) =
                 Decl+3 ++ Decl+2

equations

  [lcid-2'1] (ce-pair*2,Decl2,Aint2) :=
               locate-constants-in-decl(Decl1,(ce-pair*1,Aint1))
             =========================
             locate-constants-in-decllist(Decl1,(ce-pair*1,Aint1)) =
               (ce-pair*2,Decl2,Aint2)

  [lcid-2'2] (ce-pair*2,Decl+2,Aint2) :=
               locate-constants-in-decllist(Decl+1,(ce-pair*1,Aint1)),
             (ce-pair*3,Decl2,Aint3) :=
               locate-constants-in-decl(Decl1,(ce-pair*2,Aint2))
             =========================
             locate-constants-in-decllist(Decl+1 Decl1,(ce-pair*1,Aint1)) =
               (ce-pair*3,Decl+2 Decl2,Aint3)

equations

  [lcid-3'1] (ce-pair*2,Stat*2,Aint2) :=
               locate-constants-in-stats(Stat*1,(ce-pair*1,Aint1))
             ==========================
             locate-constants-in-decl(ATerm Ident() { Stat*1 },(ce-pair*1,Aint1)) =
               (ce-pair*2,ATerm Ident() { Stat*2 },Aint2)

  [lcid-3'2] (ce-pair*2,Stat*2,Aint2) :=
               locate-constants-in-stats(Stat*1,(ce-pair*1,Aint1))
             ==========================
             locate-constants-in-decl(ATerm Ident(FormalArgs) { Stat*1 },(ce-pair*1,Aint1)) =
               (ce-pair*2,ATerm Ident(FormalArgs) { Stat*2 },Aint2)

  [lcid-3'3] (ce-pair*2,Stat*2,Aint2) :=
               locate-constants-in-stats(Stat*1,(ce-pair*1,Aint1)),
             identifier(head tail) := Ident
             ==========================
             locate-constants-in-decl(ATerm Ident(FormalArgs) { Decl+ Stat*1 },(ce-pair*1,Aint1)) =
               ((identifier(table\_ head tail),NULL),ce-pair*2,
                ATerm Ident(FormalArgs) { Decl+ Stat*2 },Aint2)

  [default-0] locate-constants-in-decl(Decl,(ce-pair*,Aint)) = 
            (ce-pair*,Decl,Aint)

equations

  [lcis-1'1] locate-constants-in-stats(,(ce-pair*,Aint)) = (ce-pair*,,Aint)

  [lcis-1'2] (ce-pair*2,Stat+2,Aint2) :=
               locate-constants-in-statlist(Stat+1,(ce-pair*1,Aint1))
             ==========================
             locate-constants-in-stats(Stat+1,(ce-pair*1,Aint1)) = (ce-pair*2,Stat+2,Aint2)


equations

  [lcis-2'1] (ce-pair*2,Stat3,Aint2) :=
               locate-constants-in-stat(Stat1,(ce-pair*1,Aint1))
             =========================
             locate-constants-in-statlist(Stat1,(ce-pair*1,Aint1)) =
               (ce-pair*2,Stat3,Aint2)

  [lcis-2'2] (ce-pair*2,Stat+2,Aint2) :=
               locate-constants-in-statlist(Stat+1,(ce-pair*1,Aint1)),
             (ce-pair*3,Stat3,Aint3) :=
               locate-constants-in-stat(Stat1,(ce-pair*2,Aint2))
             =========================
             locate-constants-in-statlist(Stat+1 Stat1,(ce-pair*1,Aint1)) =
               (ce-pair*3,Stat+2 Stat3,Aint3)

equations

  [lcis-3'0] (ce-pair*2,$Expression2,Stat*, Aint2) := locate-constants-in-expression($Expression,(ce-pair*, Aint))
             ===>
             locate-constants-in-stat(FUNC_EXIT($Expression);, (ce-pair*,Aint)) = (ce-pair*2, {Stat* ++ FUNC_EXIT($Expression2);}, Aint2)

  [lcis-3'1] locate-constants-in-stat(FUNC_ENTRY($Expression1,$Expression2) ;,(ce-pair*,Aint)) =
               (ce-pair*,FUNC_ENTRY($Expression1,$Expression2) ;,Aint)

  [lcis-3'1] locate-constants-in-stat(CONS_ENTRY($Expression1,$Expression2) ;,(ce-pair*,Aint)) =
               (ce-pair*,CONS_ENTRY($Expression1,$Expression2) ;,Aint)

  [lcis-3'1] $Expression3 := flatten-list-of-chars($Expression2),
             (ce-pair*2,$Expression4,Stat*,Aint2) := locate-constants-in-expression($Expression3,(ce-pair*1,Aint1))
             ===>
             locate-constants-in-stat($Expression1 = $Expression2;, (ce-pair*1,Aint1) ) = (ce-pair*2, {Stat* ++ $Expression1 = $Expression4;}, Aint2)

  [lcis-3'1] $Expression3 := flatten-list-of-chars($Expression2),
             (ce-pair*2,$Expression4,Stat*,Aint2) := locate-constants-in-expression($Expression3,(ce-pair*1,Aint1))
             ===>
             locate-constants-in-stat(($Expression1 = $Expression2);, (ce-pair*1,Aint1) ) = (ce-pair*2, {Stat* ++ $Expression1 = $Expression4;}, Aint2)

             
  [default-lcis-3'1] $Expression2 := flatten-list-of-chars($Expression1),
                     (ce-pair*2,$Expression3,Stat*,Aint2) :=
                       locate-constants-in-expression($Expression2,(ce-pair*1,Aint1))
                     ===============================
                     locate-constants-in-stat($Expression1 ;,(ce-pair*1,Aint1)) =
                       (ce-pair*2,{Stat* ++ $Expression3 ;},Aint2)

  [lcis-3'2] (ce-pair*2,Stat*2,Aint2) :=
               locate-constants-in-stats(Stat*1,(ce-pair*1,Aint1))
             ==========================
             locate-constants-in-stat({Decl* Stat*1},(ce-pair*1,Aint1)) =
               (ce-pair*2,{Decl* Stat*2},Aint2)

  [lcis-3'3] $Expression2 := flatten-list-of-chars($Expression1),
             (ce-pair*2,$Expression3,Stat*,Aint2) :=
               locate-constants-in-expression($Expression2,(ce-pair*1,Aint1)),
             (ce-pair*3,Stat2,Aint3) :=
               locate-constants-in-stat(Stat1,(ce-pair*2,Aint2))
             =========================
             locate-constants-in-stat(if ($Expression1) Stat1,(ce-pair*1,Aint1)) =
               (ce-pair*3, {Stat* ++ if ($Expression3) Stat2},Aint3)

  [lcis-3'4] $Expression2 := flatten-list-of-chars($Expression1),
             (ce-pair*2,$Expression3,Stat*, Aint2) :=
               locate-constants-in-expression($Expression2,(ce-pair*1,Aint1)),
             (ce-pair*3,Stat3,Aint3) :=
               locate-constants-in-stat(Stat1,(ce-pair*2,Aint2)),
             (ce-pair*4,Stat4,Aint4) :=
               locate-constants-in-stat(Stat2,(ce-pair*3,Aint3))
             =========================
             locate-constants-in-stat(if ($Expression1) Stat1 else Stat2,
               (ce-pair*1,Aint1)) =
               (ce-pair*4,{Stat* ++ if ($Expression3) Stat3 else Stat4},Aint4)

  [lcis-3'5] $Expression2 := flatten-list-of-chars($Expression1),
             (ce-pair*2,$Expression3,Stat*,Aint2) :=
               locate-constants-in-expression($Expression2,(ce-pair*1,Aint1)),
             (ce-pair*3,Stat2,Aint3) :=
               locate-constants-in-stat(Stat1,(ce-pair*2,Aint2))
             =========================
             locate-constants-in-stat(while ($Expression1) Stat1,(ce-pair*1,Aint1)) =
               (ce-pair*3,{Stat* ++ while ($Expression3) Stat2},Aint3)

  [default-lcis-3'7] locate-constants-in-stat(Stat,(ce-pair*,Aint)) =
                       (ce-pair*,Stat,Aint)

equations

  [lcie-1'1] is-integer($Expression) == false,
             is-make-char-function-call($Expression) == false,
             expression-contains-variables($Expression) == false,
	     is-traversal-function($Expression) == false,
             is-sym-symbol($Expression) == false,
             (ce-pair*2,Ident, ,Aint2) := add-to-ce-pairs($Expression,ce-pair*1,Aint1)
             =====================================================================
             locate-constants-in-expression(FUNC_EXIT($Expression),(ce-pair*1,Aint1)) =
               (ce-pair*2,FUNC_EXIT_CONST(Ident,$Expression), ,Aint2)

  [lcie-1'1] is-integer($Expression) == false,
             is-make-char-function-call($Expression) == false,
             expression-contains-variables($Expression) == false,
	     is-traversal-function($Expression) == false,
             is-sym-symbol($Expression) == false,
             (ce-pair*2,Ident, ,Aint2) := add-to-ce-pairs($Expression,ce-pair*1,Aint1)
             =====================================================================
             locate-constants-in-expression(CONS_EXIT($Expression),(ce-pair*1,Aint1)) =
               (ce-pair*2,CONS_EXIT_CONST(Ident,$Expression), ,Aint2)

  [lcie-1'2] is-integer($Expression) == false,
             is-exit-func($Expression) == false,
             is-make-char-function-call($Expression) == false,
             expression-contains-variables($Expression) == false,
             is-sym-symbol($Expression) == false,
             (ce-pair*2,Ident, ,Aint2) := add-to-ce-pairs($Expression,ce-pair*1,Aint1),
             $Expression2 := flatten-list-of-chars($Expression)
             =====================================================================
             locate-constants-in-expression($Expression,(ce-pair*1,Aint1)) =
%%               (ce-pair*2,(Ident ? Ident : (Ident = ($Expression))),Aint2)
                 (ce-pair*2,Ident, if (!Ident) { Ident = $Expression2; }, Aint2) 	

  [lcie-1'3] Prime != make_char,
             Prime != check_sym,
             Prime != FUNC_EXIT,
             Prime != CONS_EXIT,
             Prime != ATmakeList,
             expression-contains-variables(Prime($ActualArg*1)) == true,
             (ce-pair*2,$ActualArg*2, Stat*, Aint2) :=
               locate-constants-in-expressions($ActualArg*1,(ce-pair*1,Aint1))
             ==============================
             locate-constants-in-expression(Prime($ActualArg*1),(ce-pair*1,Aint1)) =
               (ce-pair*2,Prime($ActualArg*2), Stat*, Aint2)

  [lcie-1'4] locate-constants-in-expression(ATmakeList(0),(ce-pair*1,Aint1)) = 
               (ce-pair*1,ATempty, ,Aint1)

  [lcie-1'3] (ce-pair*2,$Expression3, Stat*, Aint2) :=
               locate-constants-in-expression($Expression2,(ce-pair*1,Aint1))
             ===============================
             locate-constants-in-expression($Expression1 = $Expression2,(ce-pair*1,Aint1)) =
               (ce-pair*2,$Expression1 = $Expression3, Stat*, Aint2)

  [default-lcie-1'4] locate-constants-in-expression($Expression,(ce-pair*,Aint)) =
                       (ce-pair*,$Expression, ,Aint)

  [lcie-2'1] locate-constants-in-expressions(,(ce-pair*,Aint)) = (ce-pair*,,,Aint)

  [lcie-2'2] (ce-pair*2,$ActualArg2,Stat*1,Aint2) :=
               locate-constants-in-expression($ActualArg1,(ce-pair*1,Aint1)),
             (ce-pair*3,$ActualArg*2,Stat*2,Aint3) :=
               locate-constants-in-expressions($ActualArg*1,(ce-pair*2,Aint2))
             ===============================
             locate-constants-in-expressions($ActualArg1, $ActualArg*1,(ce-pair*1,Aint1)) =
               (ce-pair*3,$ActualArg2, $ActualArg*2, Stat*1 ++ Stat*2, Aint3)

equations

  [ecv-1'1] expression-contains-variables((ATerm) ATmakeList($ActualArg+)) = false

  [ecv-1'2] Bool := expressions-contain-variables($ActualArg*1)
            =================================================
            expression-contains-variables(Prime($ActualArg*1)) = 
	Bool

  [ecv-1'3] expression-contains-variables(integer-constant(d+)) = false

  [ecv-1'4] expression-contains-variables(identifier(head tail sym)) = false

  [ecv-1'5] expression-contains-variables(String) = false

  [default-ecv-1'5] expression-contains-variables($Expression) = true

  [escv-2'1] expressions-contain-variables() = false

  [escv-2'3] expression-contains-variables(($Expression)) = expression-contains-variables($Expression)

  [escv-2'2] Bool1 := expression-contains-variables($ActualArg1),
             Bool2 := expressions-contain-variables($ActualArg*1)
             ==================================================
             expressions-contain-variables($ActualArg1, $ActualArg*1) = 
		Bool1 | Bool2

equations

  [ifc-1'1] is-make-char-function-call(make_char(integer-constant(d+))) = true

  [default-ifc-1'1] is-make-char-function-call($Expression) = false

equations

  [ifc-2'1] is-function-call(Prime($ActualArg*)) = true

  [default-ifc-2'1] is-function-call($Expression) = false

equations

  [ifc-2'1] is-exit-func(FUNC_EXIT($Expression)) = true

  [ifc-2'1] is-exit-func(CONS_EXIT($Expression)) = true

  [default-ifc-2'1] is-exit-func($Expression) = false

equations

[lt-function]
	is-traversal-function(identifier(lt tail)(ActualArgs)) = true

[default-false]
	is-traversal-function($Expression) = false

equations

[side-effect]
	is-side-effect-function(identifier(lf\_side\_effect tail)(ActualArgs)) 
	= true

[default-no-se]
	is-side-effect-function($Expression) = false

equations

  [ii-1'1] is-integer(integer-constant(d+)) = true

  [default-ii-1'1] is-integer($Expression) = false

equations

  [iss-1'1] is-sym-symbol(identifier(head tail sym)) = true

  [default-iss-1'1] is-sym-symbol($Expression) = false

equations

  [mn2cn-1'1] 
	identifier(head tail) := make-call-id(IdCon)
	===>
	modname2iname(IdCon) = identifier(init\_ head tail)

equations

  [mif-1'1] CConstant := modname2iname(Modid),
            (,Decl*,Stat*) := make-statements-function(ce-pair*)
            ===================================================
            make-init-function(Modid,ce-pair*) =
              Decl* ++
              void CConstant()
              {
                 Stat*
              }

equations

  [msf-1'1] make-statements-function() = (,,)

  [msf-1'2] (,Decl+,Stat+) := make-stats-function(ce-pair+)
            ==============================================
            make-statements-function(ce-pair+) = (,Decl+,Stat+)

equations

  [msf-2'1] identifier(table tail) := Ident
            =========================================
            make-stats-function((Ident,$Expression)) =
              (,static ATermTable Ident;, create_table(Ident,0);)

  [default-msf-2'2] make-stats-function((Ident,$Expression)) =
              (,static ATerm Ident = NULL ;, ATprotect(&Ident);)

  [msf-2'3] identifier(table tail) := Ident,
            (,Decl+,Stat+) := make-stats-function(ce-pair+)
            ==============================================
            make-stats-function(ce-pair+,(Ident,$Expression)) =
              (,Decl+ ATermTable Ident;, Stat+ create_table(Ident,0);)

  [default-msf-2'4] (,Decl+,Stat+) := make-stats-function(ce-pair+)
                    ==============================================
                    make-stats-function(ce-pair+,(Ident,$Expression)) =
                    (,Decl+ static ATerm Ident  = NULL ;, Stat+ ATprotect(&Ident);)

equations

  [acep-1'1] 
             Aint2 := (1+Aint1),
             Ident := int2identifier(constant,Aint1)
             ==================================================
             add-to-ce-pairs($Expression,,Aint1) = ((Ident,$Expression),Ident,,Aint2)

  [acep-1'2] add-to-ce-pairs($Expression,(Ident,$Expression),ce-pair*,Aint) =
               ((Ident,$Expression),ce-pair*,Ident,,Aint)

  [acep-1'3] $Expression1 != $Expression2,
             (ce-pair*2,Ident2,,Aint2) :=
               add-to-ce-pairs($Expression1,ce-pair*1,Aint1)
             ===============================
             add-to-ce-pairs($Expression1,(Ident1,$Expression2),ce-pair*1,Aint1) =
               ((Ident1,$Expression2),ce-pair*2,Ident2,,Aint2)

equations

  [flc-1'1] $Arg3 := flatten-list-of-chars($Arg2)
            ==================================
            flatten-list-of-chars(cons(make_list(make_char($Arg1)),$Arg2)) =
              compose-list-of-chars($Arg1,$Arg3)

  [default-flc-1'2] $ActualArg*2 := flatten-arguments($ActualArg*1)
                    ============================================
                    flatten-list-of-chars(Prime($ActualArg*1)) = Prime($ActualArg*2)

  [flc-1'3] $Expression3 := flatten-list-of-chars($Expression2),
            $Expression4 := $Expression1 = $Expression3
            ================================================
            flatten-list-of-chars($Expression1 = $Expression2) = $Expression4

  [default-flc-1'4] is-function-call($Expression) == false
                    ====================================
                    flatten-list-of-chars($Expression) = $Expression

equations

  [fa-1'1] flatten-arguments() =

  [fa-1'2] $ActualArg2 := flatten-list-of-chars($ActualArg1),
           $ActualArg*2 := flatten-arguments($ActualArg*1)
           ============================================
           flatten-arguments($ActualArg1,$ActualArg*1) = $ActualArg2,$ActualArg*2

equations

  [clc-1'1] compose-list-of-chars($Arg1,make_list(make_char($Arg2))) =
              (ATerm) ATmakeList (2, char_table[$Arg1], char_table[$Arg2] )

  [clc-1'2] natcon(d+2) := natcon(d+1) + 1
            =====================================
            compose-list-of-chars($Arg1,
		(ATerm) ATmakeList(integer-constant(d+1), $ActualArg+)) =
              (ATerm) 
	ATmakeList (integer-constant(d+2), char_table[$Arg1], $ActualArg+)

  [default-clc-1'3] compose-list-of-chars($Arg1,$Arg2) = cons(make_list_char($Arg1),$Arg2)
