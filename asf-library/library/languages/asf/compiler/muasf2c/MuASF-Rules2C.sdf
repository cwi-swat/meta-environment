module languages/asf/compiler/muasf2c/MuASF-Rules2C

imports languages/asf/compiler/muasf2c/MuASF-List2C
imports languages/asf/compiler/muasf2c/MuASF-SepList2C
imports languages/asf/compiler/muasf2c/Add-Traversal-Code
imports languages/asf/compiler/muasf2c/Locate-Constants
imports languages/asf/compiler/muasf2c/Improve-C-code
%% TODO: these two modules operator solely on muASF, they should be

%% made part of the muasf2muasf phase:

imports languages/asf/compiler/muasf2c/Transform-Constructors
imports languages/asf/compiler/muasf/RenameVars

exports
context-free syntax
  rulesopt2cfuncs(ModId, {FuncDef ";"}*, RulesOpt, NameTable)                         -> FT-tuple                 {complete} 
  sigargs2cstats(FunId, {SigArg ","}*)                                                -> Statement-list-opt       {complete} 
  funargs2cstats(FunId, Argument-expression-list, TermList, {NamePair ","}*, Integer) -> SlI-tuple                {complete} 
  sigargs2actualargs({SigArg ","}*)                                                   -> Argument-expression-list {complete} 

context-free syntax
  restore-ignored-funids-in-nf(Argument-expression-list, TermList, {NamePair ","}*) -> Argument-expression-list  
  restore-ignored-funids-in-arg(Expression, Term, {NamePair ","}*)                  -> Expression                
  lookup-ignored-funid(FunId, {NamePair ","}*)                                      -> FunId                     

context-free syntax
  asfrules2cfuncs({FuncDef ";"}*, {Rule ";"}+, {NamePair ","}*)              -> FT-tuple    {complete} 
  asfrules2cfuncs({FuncDef ";"}*, {Rule ";"}*, {Rule ";"}*, {NamePair ","}*) -> FT-tuple    {complete} 
  asfrules2cfunc({Rule ";"}+, {NamePair ","}*)                               -> Declaration {complete} 
  funargs2cargs({Term ","}+, Integer)                                        -> PA-tuple    {complete} 
  "funargs2cargs"                                                            -> Identifier  {reject}   
  asfrules2cstats({Rule ";"}*, {NamePair ","}*)                              -> SlI-tuple   {complete} 
   
sorts MakeSelectStat
context-free syntax
  "make-select-stat" -> MakeSelectStat  
  "no-select-stat"   -> MakeSelectStat  

context-free syntax
  asfrules2cstats({C-Rule ";"}*, {C-Rule ";"}*, {NamePair ","}*, Integer, MakeSelectStat) -> SlI-tuple {complete} 
  asfrules2cstats1({C-Rule ";"}*, {NamePair ","}*, Integer)                               -> SlI-tuple {complete} 
  asfrules2cstats2({C-Rule ";"}*, {NamePair ","}*, Integer)                               -> SlI-tuple {complete} 

context-free syntax
  sigargs2cbuild({SigArg ","}+, Integer) -> ADS-tuple {complete} 

hiddens

context-free syntax
  "sigargs2actualargs" -> Identifier {reject} 

context-free start-symbols
   Declaration SlI-tuple ADSI-tuple

variables
  "Aint" [0-9]*           -> Integer                       
  "Aexp" [0-9]*           -> Expression                    
  "Cint" [0-9]*           -> Integer-constant              
  "Expression+" [0-9]*    -> {Expression ","}+             
  "$Expression" [0-9]*    -> Expression                    
  "MakeSelectStat" [0-9]* -> MakeSelectStat                
  "Identifier" [0-9]*     -> Identifier                    
  "Cond" [0-9]*           -> Cond                          
  "Cond*" [0-9]*          -> {Cond "&"}*                   
  "Sym"                   -> Identifier                    
  "Func"                  -> Identifier                    
  "IdCon"                 -> IdCon                         
  "Bool" [0-9]*           -> Boolean                       
  "Funid" [0-9]*          -> FunId                         
  "Namepair*" [0-9]*      -> {NamePair ","}*               
  "Nametable" [0-9]*      -> NameTable                     
  "Modid"                 -> ModId                         
  "$Ltest"                -> Expression                    
  "Decls" [0-9]*          -> Declaration-list              
  "Decl" [0-9]*           -> Declaration                   
  "Decl*" [0-9]*          -> Declaration-list-opt          
  "Decl+" [0-9]*          -> Declaration+                  
  "$ActualArg*" [0-9\']*  -> {Expression ","}*             
  "$ActualArgs" [0-9\']*  -> Argument-expression-list      
  "$ActualArg+" [0-9\']*  -> {Expression ","}+             
  "FormalArg+" [0-9\']*   -> {Parameter-declaration ","}+  
  "Tepair*" [0-9]*        -> {TE-pair ","}*                
  "Cenv" [0-9]*           -> C-env                         
  "Exp" [0-9]*            -> Expression                    
  "C-rule+" [0-9]*        -> {C-Rule ";"}+                 
  "C-rule*" [0-9]*        -> {C-Rule ";"}*                 
  "C-rule" [0-9]*         -> C-Rule                        
  "Aint+" [0-9]*          -> {Integer ","}+                
  "Fv-path+" [0-9]*       -> {FV-Path ","}+                
  "Fv-path*" [0-9]*       -> {FV-Path ","}* 
  "Seps"[0-9]*            -> NatCon               
