
equations

%% An auxilary function to construct the rule section of a
%% \muasf\ specification.
 [cnro-1'1] create-new-rulesopt() =

 [cnro-1'2] create-new-rulesopt(Rule+) = rules Rule+

equations

%% An auxilary function to add new created rules
%% to the (existing) rule option.
 [ats-1'1] addto-rulesopt(,) =

 [ats-2'3] addto-rulesopt(rules,) =

 [ats-1'2] addto-rulesopt(,Rule+) = rules Rule+

 [ats-1'2] addto-rulesopt(rules,Rule+) = rules Rule+

 [ats-1'3] addto-rulesopt(rules Rule+,) = rules Rule+

 [ats-1'4] addto-rulesopt(rules Rule+1,Rule+2) =
             rules Rule+1;Rule+2

equations

%% An auxilary function to get the function name of
%% a rewrite rule.
 [gfi-1'1] get-funid(Funid) = Funid

 [gfi-1'1] get-funid(Funid(Term+)) = Funid

 [gfi-2'1] get-funid(Term1 = Term2) = get-funid(Term1)

 [gfi-2'2] get-funid(Cond+ ==> Term1 = Term2) = get-funid(Term1)

 [gfi-2'3] get-funid(default:Term1 = Term2) = get-funid(Term1)

 [gfi-2'4] get-funid(default:Cond+ ==> Term1 = Term2) = get-funid(Term1)

  [gfi-1'1] TRANSLATE[{Funid}] := get-funid(Term)
            ===>
            get-funid(Term,Namepair*) = {Funid}

  [default-gfi] get-funid(Term,Namepair*) = get-funid(Term)

equations

%% An auxilary function to get the function args of
%% a rewrite rule.
 [gfa-1'1] get-funargs(Funid) =

 [gfa-1'2] get-funargs(Funid(Term+)) = Term+

 [gfa-2'1] get-funargs(Term1 = Term2) = get-funargs(Term1)

 [gfa-2'2] get-funargs(Cond+ ==> Term1 = Term2) = get-funargs(Term1)

 [gfa-2'3] get-funargs(default:Term1 = Term2) = get-funargs(Term1)

 [gfa-2'4] get-funargs(default:Cond+ ==> Term1 = Term2) = get-funargs(Term1)

equations

 [gfa-extra] get-funid(Rule; Rule*) = get-funid(Rule)

equations
 
%% The next rule adds conditions to a non-conditional rule
%% if this is needed.
 [mcr-1'1] make-conditional-rule(,Rule) = Rule

 [mcr-1'2] make-conditional-rule(Cond+,Term1 = Term2) =
             Cond+ ==> Term1 = Term2

 [mcr-1'3] make-conditional-rule(Cond+,default:Term1 = Term2) =
             default:Cond+ ==> Term1 = Term2

equations

  [mr-1'1] make-rule(true,Term1,Term2) = default: Term1 = Term2

  [mr-1'2] make-rule(false,Term1,Term2) = Term1 = Term2

  [mr-2'1] make-rule(true,Cond+,Term1,Term2) = default: Cond+ ==> Term1 = Term2

  [mr-2'2] make-rule(false,Cond+,Term1,Term2) = Cond+ ==> Term1 = Term2

  [mr-2'3] make-rule(true,,Term1,Term2) = default: Term1 = Term2

  [mr-2'4] make-rule(false,,Term1,Term2) = Term1 = Term2

%% 
equations

[isf]      is-string-funid(StrCon) = true
[default-isf] is-string-funid(Funid) = false

equations

[itfi-1] is-traversal-funid(| Funid Type Strategy Continuation|) = true
[itfi-1] is-traversal-funid([| Funid Type Strategy Continuation|]) = true
[default-itfi] is-traversal-funid(Funid) = false

equations
 
[type] 
	get-traversal-type(| Funid Type Strategy Continuation|) = Type

[strat] 
	get-traversal-strategy(| Funid Type Strategy Continuation|) = Strategy

[cont]
	get-traversal-continuation(| Funid Type Strategy Continuation|) = 
		Continuation

[list]
	get-traversal-type([Funid]) = get-traversal-type(Funid)

[strat] 
	get-traversal-strategy([Funid]) = get-traversal-strategy(Funid)

[cont]
	get-traversal-continuation([Funid]) = get-traversal-continuation(Funid)

equations

[] is-traversal-top-down(Funid) = true when 
	get-traversal-strategy(Funid) == top-down
[default-0] is-traversal-top-down(Funid) = false

[] is-traversal-bottom-up(Funid) = true when 
	get-traversal-strategy(Funid) == bottom-up
[default-0] is-traversal-bottom-up(Funid) = false

[] is-traversal-break(Funid) = true when 
	get-traversal-continuation(Funid) == break
[default-0] is-traversal-break(Funid) = false

[] is-traversal-continue(Funid) = true when 
	get-traversal-continuation(Funid) == continue
[default-0] is-traversal-continue(Funid) = false

[] is-traversal-trafo(Funid) = true when 
	get-traversal-type(Funid) == trafo
[default-0] is-traversal-trafo(Funid) = false

[] is-traversal-accu(Funid) = true when 
	get-traversal-type(Funid) == accu
[default-0] is-traversal-accu(Funid) = false

[] is-traversal-accutrafo(Funid) = true when 
	get-traversal-type(Funid) == accutrafo
[default-0] is-traversal-accutrafo(Funid) = false

equations

  [ilfi-1'1] is-list-funid({Funid}) = true
  [default-ilfi-1'1] is-list-funid(Funid) = false

  [ilfi-1'1] is-trans-list-funid({Funid}) = true
  [ilfi-1'1] is-trans-list-funid(TRANSLATE[{Funid}]) = true
  [default-ilfi-1'1] is-trans-list-funid(Funid) = false

  [mtli-1'1] make-trans-list-id({Funid}) =
               TRANSLATE[{Funid}]


  %% JURGEN: LETOP {} added to rhs
  [rtli-1'1] remove-trans-from-list-id({Funid}) = {Funid}

  [trli-1'2] remove-trans-from-list-id(TRANSLATE[{Funid}]) =
               {Funid}

equations
[it]
is-returns-list-funid([Funid]) = true

[default-it]
is-returns-list-funid(Funid) = false

[rt]
remove-returns-list([Funid]) = [Funid]

[default-rt]
remove-returns-list(Funid) = Funid

equations
  [mrli-1'1] make-ignored-funid(Funid) = IGNORE[Funid]

  [riff-1'1] remove-ignored-from-funid(IGNORE[Funid]) = Funid

  [irli-1'1] is-ignored-funid(IGNORE[Funid]) = true
  [default-irli] is-ignored-funid(Funid) = false

equations

  [ic-1'1] is-cons(cons) = true
  [default-ic-1'2] is-cons(Funid) = false

equations

  [ilvt-1'1] is-list-var-term($*Varid) = true

  [ilvt-1'2] is-list-var-term($+Varid) = true

  [default-ilvt-1'3] is-list-var-term(Term) = false

equations

  [asv-1'1] is-var-term(Term) == true,
            is-star-var(Term) == true
            ===>
            are-star-vars(Term) = true

  [asv-1'2] is-var-term(Term) == true,
            is-star-var(Term) == true
            ===>
            are-star-vars(Term, Term+) = 
              are-star-vars(Term+)

  [default-asv-1'3] are-star-vars(Term+) = false

  [default-asv-1'1] are-star-vars(Term) = false

equations

  [ic-1'1] is-quoted-funid(StrCon) = true

  [default-ic-1'2] is-quoted-funid(Funid) = false

equations

  [idr-1'1] is-default-rule(default:Term1 = Term2) = true

  [idr-1'2] is-default-rule(default:Cond* ==> Term1 = Term2) = true

  [default-idr-1'3] is-default-rule(Rule) = false

equations

  [ibt-1'1] is-boolean-term(t) = true

  [ibt-1'2] is-boolean-term(f) = true

  [default-ibt-1'3] is-boolean-term(Term) = false

equations

  [ivt-1'1] is-var-term($Varid) = true

  [ivt-1'2] is-var-term($*Varid) = true

  [ivt-1'3] is-var-term($+Varid) = true

  [default-ivt-1'4] is-var-term(Term) = false

equations

   [cv-1'1] is-var-term(Term) == true
            ========================
            term-contains-var(Term) = true

   [cv-1'1] is-var-term(Term) == false,
            Term* := get-funargs(Term)
            =========================
            term-contains-var(Term) = args-contain-var(Term*)

equations

   [cv-2'1] args-contain-var() = false

   [cv-2'2] args-contain-var(Term,Term*) =
              term-contains-var(Term) | args-contain-var(Term*)

equations

   [mf-1'1] make-func(Funid,) = Funid

   [mf-1'2] make-func(Funid,Term+)  = Funid(Term+)

equations

%% Constructor function for list functions. If the
%% list is a list of characters a different constructor
%% function for the arguments should be applied.
  [mlf-1'1] make-list-func(Funid,) = Funid(null)

  [mlf-1'2] make-list-func(Funid,Term+) = Funid(Term+)

equations

  [mla-1'1] make-list-args(Term) = Term

  [mla-1'2] Term2 := make-list-args(Term+)
            =============================
            make-list-args(Term1,Term+) = cons(Term1,Term2)

equations

  [iif-1'1] is-internal-funid(idcon(new\-\- h t)) =
              is-internal-funid-new(idcon(h t))

  [default-iif-1'7] is-internal-funid(Funid) = false

equations

  [iifn-1'1] is-internal-funid-new(idcon(h t1 \-\- t2)) = true

  [default-iifn-1'2] is-internal-funid-new(Funid) = false

equations

  [mdr-1'1] make-default-rule(Term1 = Term2) = default:Term1 = Term2

  [mdr-1'2] make-default-rule(Cond+ ==> Term1 = Term2) = default:Cond+ ==> Term1 = Term2

equations

  [ipv-1'1] is-plus-var($+ Varid) = true

  [default-ipv-1'2] is-plus-var(Term2) = false

equations

  [isv-1'1] is-star-var($* Varid) = true

  [default-isv-1'2] is-star-var(Term2) = false

equations

%% If there are no rewrite rules we are finished.
  [soo-1'1] select-on-ofs(Funid,) = (,)

%% If a rule has the same ofs it is added to the first set.
  [soo-1'2] get-funid(Rule) == Funid,
            (Rule*1,Rule*2) := select-on-ofs(Funid,Rule*)
            ============================================
            select-on-ofs(Funid,Rule; Rule*) =
              (Rule;Rule*1,Rule*2)

%% A rewrite rule with conditions is added to the set of conditional
%% rewrite rules.
  [soc-1'3] Funid2 := get-funid(Rule),
            Funid1 != Funid2,
            (Rule*1,Rule*2) := select-on-ofs(Funid1,Rule*)
            ============================================
            select-on-ofs(Funid1,Rule; Rule*) =
              (Rule*1,Rule;Rule*2)

equations

%% If there are no rewrite rules we are finished.
  [sod-1'1] select-on-defaults() = (,)

%% If a default rule with no conditions is added to the set of
%% default rules.
  [sod-1'2] (Rule*1,Rule*2) := select-on-defaults(Rule*)
            ===========================================
            select-on-defaults(Term1 = Term2; Rule*) =
              (Rule*1,Term1 = Term2;Rule*2)

  [sod-1'3] (Rule*1,Rule*2) := select-on-defaults(Rule*)
            ===========================================
            select-on-defaults(default:Term1 = Term2; Rule*) =
              (default:Term1 = Term2;Rule*1,Rule*2)

%% A default rewrite rule with conditions is added to the set of default
%% rewrite rules.
  [sod-1'4] (Rule*1,Rule*2) := select-on-defaults(Rule*)
            ===========================================
            select-on-defaults(Cond+ ==> Term1 = Term2; Rule*) =
              (Rule*1,Cond+ ==> Term1 = Term2;Rule*2)

  [sod-1'5] (Rule*1,Rule*2) := select-on-defaults(Rule*)
            ===========================================
            select-on-defaults(default:Cond+ ==> Term1 = Term2; Rule*) =
              (default:Cond+ ==> Term1 = Term2;Rule*1,Rule*2)

equations

%% Make a new argument list based on the arity of a function

[mal-0]
make-arg-list(Sigarg, Nat) = $ nat2id(V-, Nat)

[mal-1]
Natcon2 := Natcon + 1,
Natcon3 := Natcon2 + 1,
Term+1 := make-arg-list(Sigarg, Natcon2),
Term+2 := make-arg-list(Sigarg+, Natcon3)
===>
make-arg-list(Sigarg, Sigarg+, Natcon) = Term+1, Term+2 
