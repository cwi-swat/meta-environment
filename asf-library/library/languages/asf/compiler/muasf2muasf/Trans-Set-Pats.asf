equations

  [tll-1'1] is-like-rule("set",Cond+ ==> Term1 = Term2) == true,
            Funid1(Term+) := Term1,
            Funid2 := new-- ++ int2id(Funid1, Aint1)
            ========================================
            transform-special-rule(Cond+ ==> Term1 = Term2,Aint1) =
              transform-set-rule(Funid2,Cond+,Term1,1)

%% The function {\tt transform-lhs} transforms a list matching
%% pattern into a set of recursive functions.

  [tl-1'1] $Varid1 := newvar(Aint,New),
           $Varid2 := newvar(Aint,List),
           $Varid3 := newvar((1+Aint),New)
           ===============================
           transform-set-rule(Funid1,Cond+,
                              Funid3(Funid4(cons(Term1,
                                                 cons(Term2,
                                                      cons(Term3,
                                                           cons(Term4,Term5)))))),Aint) =
             (,
              Cond+ &
              Funid3(Funid4(cons(Term2,Term5))) =: Funid3(Funid4($Varid1,$*Varid2)) &
              Funid3(Funid4(cons(Term1,cons($Varid1,cons(Term3,$*Varid2))))) =: $Varid3
              ==>
              Funid3(Funid4(cons(Term1,
                                 cons(Term2,
                                      cons(Term3,
                                           cons(Term4,Term5)))))) =
                $ Varid3,
              Aint + 1)

