equations

%% Predicates to check whether a rewrite rule contains list variables.
  [rclv-1'1] rule-contains-list-vars(Term1 = Term2) =
               term-contains-list-vars(Term1) 

  [rclv-1'2] rule-contains-list-vars(Cond* ==> Term1 = Term2) =
               conds-contains-list-vars(Cond*) |
               term-contains-list-vars(Term1) 

  [rclv-1'3] rule-contains-list-vars(default:Term1 = Term2) =
               term-contains-list-vars(Term1) 

  [rclv-1'4] rule-contains-list-vars(default:Cond* ==> Term1 = Term2) =
               conds-contains-list-vars(Cond*) |
               term-contains-list-vars(Term1) 

%% The funtion {\tt term-contains-list-vars} checks whether one
%% of the terms is a list variable.
  [tclv-1'1] term-contains-list-vars($* Varid) = true

  [tclv-1'2] term-contains-list-vars($+ Varid) = true

  [tclv-1'3] term-contains-list-vars(cons(Term1,Term2)) = true

  [tclv-1'3] is-list-cons(Funid(Term+)) == false
             ==================================
             term-contains-list-vars(Funid(Term+)) =
               terms-contains-list-vars(Term+)

  [default-tclv-1'4] term-contains-list-vars(Term) = false

  [tsclv-1'1] terms-contains-list-vars() = false

  [tsclv-1'2] terms-contains-list-vars(Term,Term*) =
                term-contains-list-vars(Term) |
                terms-contains-list-vars(Term*)

  [cclv-1'1] cond-contains-list-vars(Term1 =: Term2) =
                %%%term-contains-list-vars(Term1) \/
                term-contains-list-vars(Term2)

  [csclv-1'1] conds-contains-list-vars() = false

  [csclv-1'2] conds-contains-list-vars(Cond & Cond*) =
                cond-contains-list-vars(Cond) |
                conds-contains-list-vars(Cond*)

%% Predicates to check whether a rewrite rule contains list variables.
  [rcl-1'1] rule-contains-lists(Term1 = Term2) =
               term-contains-lists(Term1) |
               term-contains-lists(Term2)

  [rcl-1'2] rule-contains-lists(default: Term1 = Term2) =
               term-contains-lists(Term1) |
               term-contains-lists(Term2)

  [rcl-1'3] rule-contains-lists(Cond* ==> Term1 = Term2) =
               conds-contains-lists(Cond*) |
               term-contains-lists(Term1) |
               term-contains-lists(Term2)

  [rcl-1'4] rule-contains-lists(default:Cond* ==> Term1 = Term2) =
               conds-contains-lists(Cond*) |
               term-contains-lists(Term1) |
               term-contains-lists(Term2)

%% The funtion {\tt term-contains-lists} checks whether one
%% of the terms is a list variable.
  [tcl-1'1] is-list-funid(Funid) == true
            ===========================
            term-contains-lists(Funid(Term+)) = true

  [tcl-1'2] is-list-funid(Funid) == false
            ============================
            term-contains-lists(Funid(Term+)) =
               terms-contains-lists(Term+)

  [default-tcl-1'3] term-contains-lists(Term) = false

  [tscl-1'1] terms-contains-lists() = false

  [tscl-1'2] terms-contains-lists(Term,Term*) =
                term-contains-lists(Term) |
                terms-contains-lists(Term*)

  [ccl-1'1] cond-contains-lists(Term1 =: Term2) =
                term-contains-lists(Term1) |
                term-contains-lists(Term2)

  [cscl-1'1] conds-contains-lists() = false

  [cscl-1'2] conds-contains-lists(Cond & Cond*) =
                cond-contains-lists(Cond) |
                conds-contains-lists(Cond*)

%% Equation to check if there is at least one list containing only
%% one list var or no list vars at all

  [czolvr-1'1] contains-zero-or-one-list-vars-in-rule(Term1 = Term2) =
                contains-zero-or-one-list-vars-in-term(Term1)

  [czolvr-1'2] contains-zero-or-one-list-vars-in-rule(default:Term1 = Term2) =
                 contains-zero-or-one-list-vars-in-term(Term1)

  [czolvr-1'3] contains-zero-or-one-list-vars-in-rule(Cond+ ==> Term1 = Term2) =
                 contains-zero-or-one-list-vars-in-conds(Cond+) |
                 contains-zero-or-one-list-vars-in-term(Term1)

  [czolvr-1'4] contains-zero-or-one-list-vars-in-rule(default:Cond+ ==> Term1 = Term2) =
                 contains-zero-or-one-list-vars-in-conds(Cond+) |
                 contains-zero-or-one-list-vars-in-term(Term1)

  [czolvt-1'1] is-cons(Funid) == false,
               is-list-funid(Funid) == false
               ============================
               contains-zero-or-one-list-vars-in-term(Funid(Term+)) =
                 contains-zero-or-one-list-vars-in-terms(Term+)

  [czolvt-1'2] is-cons(Funid) == false,
               is-list-funid(Funid) == true
               ===========================
               contains-zero-or-one-list-vars-in-term(Funid(Term)) =
                 contains-zero-or-one-list-vars-in-list(Term)

  [default-czolvt-1'3] contains-zero-or-one-list-vars-in-term(Term) = false

  [czolvl-1'1] is-list-var-term(Term1) == true
               ==============================
               contains-zero-or-one-list-vars-in-list(cons(Term1,Term2)) =
                 contains-no-list-var(Term2)

  [czolvl-1'2] is-list-var-term(Term1) == false
               ===============================
               contains-zero-or-one-list-vars-in-list(cons(Term1,Term2)) =
                 contains-zero-or-one-list-vars-in-list(Term2)

  [default-czolvl-1'3] contains-zero-or-one-list-vars-in-list(Term) = true

  [czolvts-1'1] contains-zero-or-one-list-vars-in-terms(Term) =
                  contains-zero-or-one-list-vars-in-term(Term)

  [czolvts-1'2] contains-zero-or-one-list-vars-in-terms(Term,Term+) =
                  contains-zero-or-one-list-vars-in-term(Term) |
                  contains-zero-or-one-list-vars-in-terms(Term+)

  [czolvcs-1'1] contains-zero-or-one-list-vars-in-conds(Cond) =
                  contains-zero-or-one-list-vars-in-cond(Cond)

  [czolvcs-1'2] contains-zero-or-one-list-vars-in-conds(Cond & Cond+) =
                  contains-zero-or-one-list-vars-in-cond(Cond) |
                  contains-zero-or-one-list-vars-in-conds(Cond+)

  [czolvc-1'1] contains-zero-or-one-list-vars-in-cond(Term1 =: Term2) =
                  contains-zero-or-one-list-vars-in-term(Term2)

  [cnlv-1'1] is-list-cons(Term) == false
             ==========================
             contains-no-list-var(Term) = not( is-list-var-term(Term))

  [cnlv-1'2] is-list-var-term(Term1) == true
             ==============================
             contains-no-list-var(cons(Term1,Term2)) = false

  [cnlv-1'3] is-list-var-term(Term1) == false
             ==============================
             contains-no-list-var(cons(Term1,Term2)) =
                contains-no-list-var(Term2)

%% First the left hand side of a rewrite rule
%% is checked. If it satisfies the ``set'' pattern,
%% the entire rule is a ``set'' like rule.



  [isr-1'2] is-like-rule("set",Rule) == true
            ===============================
            is-special-rule(Rule) = true

  [default-isr-1'3] is-special-rule(Rule) = false

  [islr-1'1] term-equal(Term3,Term4) =: t := Cond,
             Funid2 := get-funid(Term1),
             get-funid(Term2) == Funid2,
             is-lhs(Funid1,Term1) == true,
             is-rhs(Funid1,Term2) == true
             ===========================
             is-like-rule(Funid1,Cond ==> Term1 = Term2) = true

  [default-islr-1'4] is-like-rule(Funid,Rule) = false

  [isl-1'1] are-lhs-args(Funid1,Funid3(Term+)) == true
            ==========================================
            is-lhs(Funid1,Funid2(Funid3(Term+))) = true

  [default-isl-1'2] is-lhs(Funid,Term) = false

  [isr-1'1] are-rhs-args(Funid1,Term+) == true
            =================================
            is-rhs(Funid1,Funid2(Term+)) = true

  [default-isr-1'2] is-rhs(Funid,Term) = false

  [asla-1'1] contains-lhs-pattern(Funid,Term) == true,
             are-lhs-args(Funid,Term+) == false
             =================================
             are-lhs-args(Funid,Term,Term+) = true

  [asla-1'2] contains-lhs-pattern(Funid,Term) == false,
             are-lhs-args(Funid,Term+) == true
             ================================
             are-lhs-args(Funid,Term,Term+) = true

  [asla-1'3] are-lhs-args(Funid,Term) = contains-lhs-pattern(Funid,Term)

  [asra-1'1] contains-rhs-pattern(Funid,Term) == true,
             are-rhs-args(Funid,Term+) == false
             =================================
             are-rhs-args(Funid,Term,Term+) = true

  [asra-1'2] contains-rhs-pattern(Funid,Term) == false,
             are-rhs-args(Funid,Term+) == true
             ==============================
             are-rhs-args(Funid,Term,Term+) = true

  [asra-1'3] are-rhs-args(Funid,Term) = contains-rhs-pattern(Funid,Term)

%% This function checks whether the left-hand side contains
%% a set pattern.
  [csp-1'1] is-list-funid(Funid) == true
            ===========================
            contains-lhs-pattern("set",Funid(Term)) =
              is-list-elem-list-elem-list(Term)



  [csp-1'2] is-list-funid(Funid2) == false
            =============================
            contains-lhs-pattern(Funid1,Funid2(Term)) =
              contains-lhs-pattern(Funid1,Term)

  [default-csp-1'5] contains-lhs-pattern(Funid1,Term) = false

  [csp-1'1] is-list-funid(Funid) == true,
            is-list-elem-list-list(Term) == true
            ===================================
            contains-rhs-pattern("set",Funid(Term)) = true

  [csp-1'1] is-list-funid(Funid) == true,
            is-list-elem-list-list(Term) == true
            ===================================
            contains-rhs-pattern("set",Funid(Term)) = true



  [csp-1'2] is-list-funid(Funid2) == false
            =============================
            contains-rhs-pattern(Funid1,Funid2(Term)) =
              contains-rhs-pattern(Funid1,Term)

  [default-csp-1'5] contains-rhs-pattern(Funid1,Term) = false

  [ilelel-1'1] is-list-var-term(Term1) == true,
               is-list-var-term(Term2) == false,
               is-list-var-term(Term3) == true,
               is-list-var-term(Term4) == false,
               is-list-var-term(Term5) == true
               ==============================
               is-list-elem-list-elem-list(cons(Term1,
                                                cons(Term2,
                                                     cons(Term3,
                                                          cons(Term4,Term5))))) = true

  [default-ilelel-1'2] is-list-elem-list-elem-list(Term) = false

  [ilell-1'1] is-list-var-term(Term1) == true,
              is-list-var-term(Term2) == false,
              is-list-var-term(Term3) == true,
              is-list-var-term(Term4) == true
              ==============================
              is-list-elem-list-list(cons(Term1,
                                          cons(Term2,
                                               cons(Term3,Term4)))) = true

  [default-ilell-1'2] is-list-elem-list-list(Term) = false

  [illel-1'1] is-list-var-term(Term1) == true,
              is-list-var-term(Term2) == true,
              is-list-var-term(Term3) == false,
              is-list-var-term(Term4) == true
              ==============================
              is-list-list-elem-list(cons(Term1,
                                          cons(Term2,
                                               cons(Term3,Term4)))) = true

  [default-illel-1'2] is-list-list-elem-list(Term) = false
