equations

  [main] 
           normalize-conditions(Module) = normalize(Module)
            

equations

  [nr-2'1] (,Cond+2,Aint) := normalize-conds(Cond+1,1)
           ==========================================
           normalize(default:Cond+1 ==> Term1 = Term2) =
             default:Cond+2 ==> Term1 = Term2

  [nr-2'2] (,Cond+2,Aint) := normalize-conds(Cond+1,1)
           ==========================================
           normalize(Cond+1 ==> Term1 = Term2) =
             Cond+2 ==> Term1 = Term2

equations

  [nc-1'1] normalize-conds(Cond,Aint) = normalize-cond(Cond,Aint)

  [nc-1'2] (,Cond+2,Aint2) := normalize-cond(Cond1,Aint1),
           (,Cond+3,Aint3) := normalize-conds(Cond+1,Aint2)
           ===============================================
           normalize-conds(Cond1 & Cond+1,Aint1) =  (,Cond+2 & Cond+3,Aint3)

equations
  [nc-2'2] is-var-term(Term2) == true
           =========================
           normalize-cond(Term1 =: Term2,Aint) = (,Term1 =: Term2,Aint)

  [nc-2'3] is-list-funid(Funid) == false,
           is-seplist-funid(Funid) == false,
           (Term+2,Cond*,Aint2) := normalize-terms(Term+1,Aint1)
           ====================================================
           normalize-cond(Term1 =: Funid(Term+1),Aint1) =
             (,Term1 =: Funid(Term+2) & Cond*,Aint2)

  [nc-2'5] is-list-funid(Funid) == true,
           (Term+2,Cond*,Aint2) := normalize-list-args(Term+1,Aint1)
           ===================================================
           normalize-cond(Term1 =: Funid(Term+1),Aint1) =
              (,Term1 =: Funid(Term+2) & Cond* ,Aint2)

  [nc-2'5] is-seplist-funid(Funid) == true,
           (Term+2,Cond*,Aint2) := normalize-seplist-args(Term+1,Aint1)
           ===================================================
           normalize-cond(Term1 =: Funid(Term+1),Aint1) =
              (,Term1 =: Funid(Term+2) & Cond* ,Aint2)

  [default-nc-2'7] normalize-cond(Term1 =: Term2,Aint) = (,Term1 =: Term2,Aint)

equations

  [nt-1'1] normalize-terms(Term,Aint) = normalize-term(Term,Aint)

  [nt-1'2] (Term2,Cond*1,Aint2) := normalize-term(Term1,Aint1),
           (Term+2,Cond*2,Aint3) := normalize-terms(Term+1,Aint2)
           =====================================================
           normalize-terms(Term1, Term+1,Aint1) =  (Term2,Term+2,Cond*1 & Cond*2,Aint3)

equations

  [nt-2'1] is-var-term(Term) == true
           ========================
           normalize-term(Term,Aint) = (Term,,Aint)

  [nt-2'2] Term2 := $ int2id(CV, Aint),
           Cond := term-equal(Term2,Funid) =: t
           ===================================
           normalize-term(Funid,Aint) = (Term2,Cond,Aint+1)

  [nt-2'3] is-list-funid(Funid) == false,
           is-seplist-funid(Funid) == false,
           Term2 := $ int2id(CV, Aint),
           (Term+2,Cond*,Aint2) := normalize-terms(Term+1,Aint+1),
           Cond := Term2 =: Funid(Term+2)
           ===================================
           normalize-term(Funid(Term+1),Aint) = (Term2,Cond & Cond*,Aint2)

  [nt-2'4] is-list-funid(Funid) == true,
           Term2 := $ int2id(CV, Aint),
           Cond := Term2 =: Funid(Term+)
           ============================
           normalize-term(Funid(Term+),Aint) = (Term2,Cond,Aint+1)

[nt-2'4]   is-seplist-funid(Funid) == true,
           Term2 := $ int2id(CV, Aint),
           Cond := Term2 =: Funid(Term+)
           ============================
           normalize-term(Funid(Term+),Aint) = (Term2,Cond,Aint+1)
equations

  [nlir-1'1] (Term3,Cond*,Aint) := normalize-list-in-term(Term1,1),
             Rule1 := make-conditional-rule(Cond*,Term3 = Term2),
             Rule2 := make-default-rule(Rule1)
             ================================
             normalize-list-in-rule(default:Term1 = Term2) = Rule2

  [nlir-1'2] (Term3,Cond*,Aint) := normalize-list-in-term(Term1,1),
             Rule := make-conditional-rule(Cond*,Term3 = Term2)
             =================================================
             normalize-list-in-rule(Term1 = Term2) = Rule

  [nlir-1'3] (Term3,Cond*,Aint1) := normalize-list-in-term(Term1,1),
             (,Cond+2,Aint2) := normalize-list-in-conds(Cond+1,Aint1)
             =======================================================
             normalize-list-in-rule(default:Cond+1 ==> Term1 = Term2) =
               default:Cond* & Cond+2 ==> Term3 = Term2

  [nlir-1'4] (Term3,Cond*,Aint1) := normalize-list-in-term(Term1,1),
             (,Cond+2,Aint2) := normalize-list-in-conds(Cond+1,Aint1)
             =======================================================
             normalize-list-in-rule(Cond+1 ==> Term1 = Term2) =
               Cond* & Cond+2 ==> Term3 = Term2

equations

  [nlic-1'1] normalize-list-in-conds(Cond,Aint) = normalize-list-in-cond(Cond,Aint)

  [nlic-1'2] (,Cond+2,Aint2) := normalize-list-in-cond(Cond1,Aint1),
             (,Cond+3,Aint3) := normalize-list-in-conds(Cond+1,Aint2)
             =======================================================
             normalize-list-in-conds(Cond1 & Cond+1,Aint1) =  (,Cond+2 & Cond+3,Aint3)

equations

  [nlic-2'1] is-var-term(Term2) == true
             =========================
             normalize-list-in-cond(Term1 =: Term2,Aint) = (,Term1 =: Term2,Aint)

  [nlic-2'2] is-list-funid(Funid) == false,
             is-seplist-funid(Funid) == false,
             (Term+2,Cond*,Aint2) := normalize-list-in-terms(Term+1,Aint1)
             ============================================================
             normalize-list-in-cond(Term1 =: Funid(Term+1),Aint1) =
               (,Term1 =: Funid(Term+2) & Cond*,Aint2)

  [nlic-2'4] is-list-funid(Funid) == true,
             (Term+2,Cond*,Aint2) := normalize-list-args(Term+1,Aint1)
             ============================================================
             normalize-list-in-cond(Term1 =: Funid(Term+1),Aint1) =
               (,Term1 =: Funid(Term+2) & Cond*,Aint2)

  [nlic-2'5] is-seplist-funid(Funid) == true,
             (Term+2,Cond*,Aint2) := normalize-seplist-args(Term+1,Aint1)
             ============================================================
             normalize-list-in-cond(Term1 =: Funid(Term+1),Aint1) =
               (,Term1 =: Funid(Term+2) & Cond*,Aint2)

  [default-nlic-2'3] normalize-list-in-cond(Term1 =: Term2,Aint) = (,Term1 =: Term2,Aint)

equations

  [nlit-1'1] is-list-funid(Funid) == false,
             is-seplist-funid(Funid) == false,
             (Term+2,Cond*,Aint2) := normalize-list-in-terms(Term+1,Aint1)
             ============================================================
             normalize-list-in-term(Funid(Term+1),Aint1) = (Funid(Term+2),Cond*,Aint2)

  [nlit-1'2] is-list-funid(Funid) == true,
             (Term+2,Cond*,Aint2) := normalize-list-args(Term+1,Aint1)
             ========================================================
             normalize-list-in-term(Funid(Term+1),Aint1) = (Funid(Term+2),Cond*,Aint2)

   [nlit-1'2] is-seplist-funid(Funid) == true,
             (Term+2,Cond*,Aint2) := normalize-seplist-args(Term+1,Aint1)
             ========================================================
             normalize-list-in-term(Funid(Term+1),Aint1) = (Funid(Term+2),Cond*,Aint2)

  

  [default-nlit-1'4] normalize-list-in-term(Term,Aint) = (Term,,Aint)

equations

  [nlits-1'1] (Term2,Cond*1,Aint2) := normalize-list-in-term(Term1,Aint1),
              (Term+2,Cond*2,Aint3) := normalize-list-in-terms(Term+1,Aint2)
              =============================================================
              normalize-list-in-terms(Term1,Term+1,Aint1) =
                (Term2,Term+2,Cond*1 & Cond*2,Aint3)

  [nlits-1'2] normalize-list-in-terms(Term,Aint) =
                 normalize-list-in-term(Term,Aint)

equations

  [nlas-1'1] (Term3,Cond*1,Aint2) := normalize-list-arg(Term1,Aint1),
             (Term4,Cond*2,Aint3) := normalize-list-args(Term2,Aint2)
             =========================================================
             normalize-list-args(cons(Term1,Term2),Aint1) =
               (cons(Term3,Term4),Cond*1 & Cond*2,Aint3)

  [default-nlas-1'2] normalize-list-args(Term,Aint) = normalize-list-arg(Term,Aint)

equations

  [nla-2'1] Term2 := $ int2id(CLV,Aint),
            (Term+2,Cond*,Aint2) := normalize-list-in-terms(Term+1,Aint+1),
            Cond := Term2 =: Funid(Term+2)
            =============================
            normalize-list-arg(Funid(Term+1),Aint) = (Term2,Cond & Cond*,Aint2)

  [default-nla-2'2] normalize-list-arg(Term,Aint) = (Term,,Aint)

equations

  [nlas-1'1] (Term3,Cond*1,Aint2) := normalize-list-arg(Term1,Aint1),
             (Term+2,Cond*2,Aint3) := normalize-seplist-seps(Term+, Aint2),
             (Term4,Cond*3,Aint4) := normalize-seplist-args(Term2,Aint3)
             =========================================================
             normalize-seplist-args(scons(Term1,Term+,Term2),Aint1) =
               (scons(Term3,Term+2,Term4),Cond*1 & Cond*2 & Cond*3,Aint4)

  [default-nlas-1'2] normalize-seplist-args(Term,Aint) = normalize-list-arg(Term,Aint)

equations

[] normalize-seplist-seps(Term1, Aint1) =  normalize-list-arg(Term1,Aint1)
[] (Term3,Cond*1,Aint2) := normalize-list-arg(Term1,Aint1),
   (Term+2,Cond*2,Aint3) := normalize-seplist-seps(Term+, Aint2)
   ===>
   normalize-seplist-seps(Term1, Term+, Aint1) = (Term3, Term+2, Cond*1 & Cond*2, Aint3)

