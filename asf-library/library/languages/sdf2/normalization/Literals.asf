%%%% $Id$

equations

%% The function $\mfun{l}\sem{\_}$ generates a production for each literal symbol
%% in the grammar.
%% The production generated for a literal $L$ has the form $\alpha\to{}L$, where
%% $\alpha$ is a list of singleton character classes representing the characters
%% of $L$. This list is produced by the function \fun{chars}.

  [0]         l[[_G]]             = _G syntax literals(symbols(_G))
  [0]         literals({L})       = chars(L) -> L
  [0]         literals({l})       = ci-chars(l) -> l
  [default-0] literals({_A})      =
  [0]         literals({})        =
  [0]         literals({'a+ 'b+}) = literals({'a+}) ++ literals({'b+})

%% The function \fun{chars} scans the characters in the literal string,
%% translating them to short characters. These are then normalized to
%% numeric character codes by character normalization. 

equations
  [empty]   chars("")  =

  [loop]    chars(strcon(\" C C+ \")) = chars(strcon(\" C \")) ++ chars(strcon(\" C+ \"))

equations

  [newline] chars(strcon(\" strchar(\n) \")) = [shortchar(\\ n)]
  [tab]     chars(strcon(\" strchar(\t) \")) = [shortchar(\\ t)]

  [quote]   chars(strcon(\" strchar(\") \"))   = [shortchar(\\ \")] 
  [backslash] chars(strcon(\" strchar(\\) \")) = [shortchar(\\ \\)]

  [numbered] chars( strcon(\" strchar(\ d1 d2 d3) \") ) = [numchar(\\ d1 d2 d3)]

  [regular] chars(strcon(\" strchar(normal&regular) \")) = [shortchar(normal&regular)]
  [escaped] chars(strcon(\" strchar(normal&escaped) \")) = [shortchar(\\ normal&escaped)]

tests

%% The [regular] and [escaped] equations depend on the following fact:

[completeness]
	((~[\0-\31\n\t\"\\] /\ ~[\0-\31A-Za-mo-qsu-z0-9]) / [a-zA-Z0-9]) \/ (~[\0-\31\n\t\"\\] /\ [a-zA-Z0-9]) 
	== ~[\0-\31\n\t\"\\]


equations

  [forward-to-chars-and-extend-classes]
         L := convert-chars(l),
	'a+ := chars(L),
	'a+2 := extend('a+)
	======================================
	ci-chars(l) = 'a+2


equations

[empty] extend() = 

[loop] 	_A2  := extend(_A),
	'a+2 := extend('a+)
	=========================
	extend(_A 'a+) = _A2 'a+2

[lowercase] 
	[_c] := cc,
	a <= _c == true,
	_c <= z == true
	===>
	extend(cc) = [_c char(int(_c) - 32)]

[uppercase] 
	[_c] := cc,
	A <= _c == true,
	_c <= Z == true
	===>
	extend(cc) = [_c char(int(_c) + 32)]

[default] extend(_A) = _A

equations

[single]  convert-chars('\'')  = "'"
[newline] convert-chars('\n') = "\n"
[quote]   convert-chars('"')  = "\""
[tab]     convert-chars('\t')  = "\t"
[back]    convert-chars('\\')  = "\\"
[ddd]     convert-chars(singlequotedstrcon(\' singlequotedstrchar(\d1 d2 d3) \')) = strcon(\" strchar(\d1 d2 d3) \")
[normal]  convert-chars(singlequotedstrcon(\' singlequotedstrchar(notquote) \')) = strcon(\" strchar(notquote) \")

[done] 
	convert-chars('') = ""
[loop] 
	strcon(\" C+ \") := convert-chars(singlequotedstrcon(\' S+ \')),
	strcon(\" C  \") := convert-chars(singlequotedstrcon(\' S \'))
	===>
	convert-chars(singlequotedstrcon(\' S S+ \')) = strcon(\" C C+ \")

tests

[a] extend([a]) == [aA]  
[z] extend([z]) == [zZ]  
[A] extend([A]) == [Aa] 
[Z] extend([Z]) == [Zz]  
[d] extend([\$]) == [\$]

equations

%% Prefix function productions are translated to normal productions by 
%% enclosing the parentheses and commas in double quotes.

  [0] I ('g) -> _A!       = id2str(I) "(" ++ symbols('g) ++ ")" -> _A!
  [0] $L ('g) -> _A! 	  = $L "(" ++ symbols('g) ++ ")" -> _A!

  [0] symbols()           =
  [0] symbols(_A)         = _A
  [0] symbols('g+1, 'g+2) = symbols('g+1) ++ "," ++ symbols('g+2)

equations

  [0] id2str(idcon(h)) = strcon(\" strchar(h) \")
  [0] id2str(idcon(h m t)) = strcon(\" strchar(h) strchar(m) C* \")
	when strcon(\" strchar(h) C* \") := id2str(idcon(h t))
