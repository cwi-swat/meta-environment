%%%% $Id$

equations

%% \noindent
%% The function $\mfun{r}\sem{\_}$ adds defining
%% productions for each regular expresssion occurring
%% in one of the productions of the grammar.
%% Existing productions are not affected.

   [0] r[[ _G ]] = _G r[[ 'a ]] when {'a} := symbols(_G)

%% Recall that the function \fun{symbols}, defined in \Section{Mod:Kernel-Sdf-Projection},
%% gives the set of all symbols in a grammar. The function $\mfun{r}\sem{\_}$
%% generates a grammar for each of the regular expressions in the list of symbols.

   [0] r[[]]        = (/)
   [0] r[['a+ 'b+]] = r[['a+]] r[['b+]]

%% \paragraph{Concatenation}
%%
%% The regular expression $(\alpha)$ is a \emph{symbol}
%% that abbreviates the \emph{concatenation} of the symbols
%% $\alpha$.

   [0]
        r[[ () ]] = syntax  -> ()
   [0]
        p := _A 'a+ -> (_A 'a+)
        ======================================
        r[[ (_A 'a+) ]] = syntax p r[[_A 'a+]]

%% Note that $\mfun{r}\sem{\Sym{A}\;\alpha^+}$
%% recursively produces the productions for regular expressions in
%% the list of symbols $\Sym{A}\;\alpha^+$.
%%
%% \paragraph{Alternative}
%%
%% The \emph{alternative} $\Sym{A}|\Sym{B}$ denotes
%% either $\Sym{A}$ or $\Sym{B}$. We could thus define
%% $\mfun{r}\sem{\Sym{A}|\Sym{B}}$ to yield the productions
%% $\Sym{A}\to\Sym{A}|\Sym{B}$ and
%% $\Sym{B}\to\Sym{A}|\Sym{B}$.
%% However, if one of the alternatives
%% is again an alternative, an unnecessary chain
%% $
%%    \Sym{A} \to \Sym{A} | \Sym{B}
%% $
%% and
%% $
%%    \Sym{A} | \Sym{B} \to \Sym{A} | \Sym{B} | \Sym{C}
%% $
%% is created.
%% We would rather have
%% $
%%    \Sym{A} \to \Sym{A} | \Sym{B} | \Sym{C}
%% $.
%% Therefore, we define

   [0] r[[_A | _B]] = alt(_A | _B, _A | _B)

%% where the function \fun{alt} unpacks the alternative until
%% a symbol is reached that is not an alternative.

   [0]         alt(_B1 | _B2, _A) = alt(_B1, _A) alt(_B2, _A)
   [default-0] alt(_B, _A)        = syntax _B -> _A r[[_B]]

%% \paragraph{Optional}
%%
%% The \emph{optional construct} $\Sym{A}?$ is either empty or $\Sym{A}$.

   [0]
        p1 :=    -> _A?,
        p2 := _A -> _A?
        ==================================
        r[[ _A ? ]] = syntax p1 p2 r[[_A]]

%% \paragraph{Iteration}
%% \input{iteration.ltx}

   [0]
        p0 := _A      -> _A+,
        p1 := _A+ _A+ -> _A+ {left},
        p2 := _A+ _A* -> _A+,
        p3 := _A* _A+ -> _A+,
        p4 := _A* _A* -> _A* {left},
        p5 :=         -> _A*,
        p6 := _A+     -> _A*
        ====>
        r[[_A*]] = syntax p0 p1 p2 p3 p4 p5 p6
%%                  priorities {left: p1 p2 p3 p4} > {p5 p6}
%%                  priorities {right: p3 p4}
%%                   priorities p3 <0>> p4
		 p[[ 
                     priorities {p1 p2 p3 p4} > {p5 p6}
                     priorities p2 <1>> p4
                     priorities p3 <1>> p2
                     priorities p3 <1>> p1 
                     priorities p1 <1>> p2
                     priorities p1 <1>> p3
		 ]]
                              r[[ _A ]]
   [0]
        r[[ _A+ ]] = r[[ _A* ]]

%% \paragraph{Iteration with Separator}
%%
%% The \emph{iteration with separator} operators $\{\Sym{A}\;\Sym{B}\}+$ and
%% $\{\Sym{A}\;\Sym{B}\}*$ denote iteration of $\Sym{A}$'s separated by
%% $\Sym{B}$'s. Their meaning is defined analogously to $\Sym{A}+$ and
%% $\Sym{A}*$.

   [0]
        p0 := _A                   -> {_A _B}+,
        p1 := {_A _B}+ _B {_A _B}+ -> {_A _B}+ {left},
        p2 := {_A _B}+ _B {_A _B}* -> {_A _B}+,
        p3 := {_A _B}* _B {_A _B}+ -> {_A _B}+,
        p4 := {_A _B}* _B {_A _B}* -> {_A _B}* {left},
        p5 :=                      -> {_A _B}*,
        p6 := {_A _B}+             -> {_A _B}*
        ====>
        r[[{_A _B}*]] = syntax p0 p1 p2 p3 p4 p5 p6
%%                        priorities {left: p1 p2 p3 p4} > {p5 p6}
%%                        priorities {right: p3 p4}
%%                   priorities p3 <0>> p4 
		 p[[
                   priorities {p1 p2 p3 p4} > {p5 p6}
                   priorities p2 <2>> p4
                   priorities p3 <2>> p2
                   priorities p3 <2>> p1 
                   priorities p1 <2>> p2
                   priorities p1 <2>> p3
		 ]]
                   r[[ _A _B ]]
   [0]
        r[[ {_A _B}+ ]] = r[[ {_A _B}* ]]


%% \paragraph{Tuples}
%%
%% For the definition of functions that return a tuple of values,
%% new sorts have to be invented.
%% A tuple is written as $\langle{}T_1,\ldots,T_n\rangle$,
%% where the $T_i$ are expresions of type $\Sym{A}_i$.


  [0]
        'a := "<" ++ tups(_A) ++ "," ++ tups('a,+) ++ ">", 
        p := 'a ->  <_A , 'a,+>
        ==================================================
        r[[ <_A , 'a,+> ]] =  syntax p r[[ 'a ]]

%% The auxiliary function $\mfun{tups}\sem{\_}$ derives the syntax
%% of the body of the tuple by separating the symbols by commas.

  [0]         tups('a,+ , 'b,+) = tups('a,+) ++ "," ++ tups('b,+)
  [default-0] tups(_A) = _A

%% \paragraph{Functions}
%%
%% Sometimes it is convenient to pass functions around as data.
%% The operator $(\alpha\Rightarrow\Sym{B})$ can be used to give a type to functions.
%% It denotes the sort of functions from $\alpha$ to $\Sym{B}$.
%% The operator generates syntax for the prefix application of a
%% function to an argument.

   [0]
        p := ('a => _B) "(" 'a ")" -> _B
        =======================================
        r[[ ('a => _B) ]] = syntax p r[['a _B]]
