equations

  [ca-1'1] check-asf-attributes-definition(Definition, InfoMsgTuple) = check-attributes(Definition, InfoMsgTuple)

equations

  [ca-1'2] $ModuleId := get-module-name(Module),
           <InfoMsgTuple2, Production*> := 
             check-attributes-in-module(Module, <InfoMsgTuple1,>, $ModuleId)
           ======================
           check-attributes(Module, InfoMsgTuple1) = InfoMsgTuple2

  [ca-2'1] has-traversal-attribute(Production) == false
           ===========================================
           check-attributes-in-module(Production,
                                      <InfoMsgTuple, Production*>, $ModuleId) = <InfoMsgTuple, Production*>


  [ca-2'2] has-traversal-attribute(Production) == true,
           is-prefix-function(Production) == false,
           $Location := get-location(Production),
           $String1 := moduleid2str($ModuleId),
           $String2 := production2str(Production),
           $String3 := "traversal attributes in non-prefix-function"
           =====>
           check-attributes-in-module(Production,
                                      <InfoMsgTuple, Production*>, $ModuleId) = 
<put-messages($ModuleId, make-error($String3, $String2, $Location), InfoMsgTuple), Production*>

  [ca-2'3] has-traversal-attribute(Production) == true,
           is-prefix-function(Production) == true,
           consistent-defined(Production, Production*, $ModuleId) == <consistent,>,
           InfoMsgTuple2 := check-form-production(Production, InfoMsgTuple1, $ModuleId)
           ====>
           check-attributes-in-module(Production,
                                      <InfoMsgTuple1, Production*>, $ModuleId) = <InfoMsgTuple2, Production*>

  [ca-2'4] has-traversal-attribute(Production) == true,
           is-prefix-function(Production) == true,
           consistent-defined(Production, Production*, $ModuleId) == <not-found,>,
           InfoMsgTuple2 := check-form-production(Production, InfoMsgTuple1, $ModuleId),
           InfoMsgTuple3 := check-attributes-in-production(Production, InfoMsgTuple2, $ModuleId)
           ====>
           check-attributes-in-module(Production,
                                      <InfoMsgTuple1, Production*>, $ModuleId) = <InfoMsgTuple3, Production Production*>

  [ca-2'5] has-traversal-attribute(Production) == true,
           is-prefix-function(Production) == true,
           <inconsistent, $Msg> := consistent-defined(Production, Production*, $ModuleId) 
           ====>
           check-attributes-in-module(Production,
                                      <InfoMsgTuple, Production*>, $ModuleId) = 
                                      <put-messages($ModuleId, $Msg, InfoMsgTuple), Production*>

  [ca-3'1] Aterm+ := get-traversal-arguments(Production),
           contains-only-traversal-attributes(Aterm+) == false,
           $Location := get-location(Production),
           $String1 := moduleid2str($ModuleId),
           $String2 := production2str(Production),
           $String3 := "illegal traversal attribute"
           ====>
           check-attributes-in-production(Production, InfoMsgTuple, $ModuleId) = 
             put-messages($ModuleId, make-error($String3, $String2, $Location), InfoMsgTuple)

  [ca-3'2] Aterm+ := get-traversal-arguments(Production),
           contains-accu(Aterm+) | contains-trafo(Aterm+) == false,
           contains-break-or-continue(Aterm+) == true,
           contains-top-down-or-bottom-up(Aterm+) == true,
           $Location := get-location(Production),
           $String1 := moduleid2str($ModuleId),
           $String2 := production2str(Production),
           $String3 := "missing trafo and/or accu attribute"
           ====>
           check-attributes-in-production(Production, InfoMsgTuple, $ModuleId) = 
             put-messages($ModuleId, make-error($String3, $String2, $Location), InfoMsgTuple)

  [ca-3'3] Aterm+ := get-traversal-arguments(Production),
           contains-accu(Aterm+) | contains-trafo(Aterm+) == true,
           contains-break-or-continue(Aterm+) == false,
           contains-top-down-or-bottom-up(Aterm+) == true,
           $Location := get-location(Production),
           $String1 := moduleid2str($ModuleId),
           $String2 := production2str(Production),
           $String3 := "missing-break-or-continue-attribute"
           ====>
           check-attributes-in-production(Production, InfoMsgTuple, $ModuleId) = 
             put-messages($ModuleId, make-warning($String3, $String2, $Location), InfoMsgTuple)

  [ca-3'4] Aterm+ := get-traversal-arguments(Production),
           contains-accu(Aterm+) | contains-trafo(Aterm+) == true,
           contains-break-or-continue(Aterm+) == true,
           contains-top-down-or-bottom-up(Aterm+) == false,
           $Location := get-location(Production),
           $String1 := moduleid2str($ModuleId),
           $String2 := production2str(Production),
           $String3 := "missing bottom-up or top-down attribute"
           ====>
           check-attributes-in-production(Production, InfoMsgTuple, $ModuleId) = 
             put-messages($ModuleId, make-error($String3, $String2, $Location), InfoMsgTuple)

  [default-ca-2'5] check-attributes-in-production(Production, InfoMsgTuple, $ModuleId) = InfoMsgTuple

  [cf-1'1] Aterm+ := get-traversal-arguments(Production),
           contains-accu(Aterm+) == true,
           contains-trafo(Aterm+) == false,
           is-accu-definition(Production) == false,
           $Location := get-location(Production),
           $String1 := moduleid2str($ModuleId),
           $String2 := production2str(Production),
           $String3 := "accu should return accumulated type"
           ====>
           check-form-production(Production, InfoMsgTuple, $ModuleId) = 
             put-messages($ModuleId, make-error($String3, $String2, $Location), InfoMsgTuple)

  [cf-1'2] Aterm+ := get-traversal-arguments(Production),
           contains-trafo(Aterm+) == true,
           contains-accu(Aterm+) == false,
           is-trafo-definition(Production) == false,
           $Location := get-location(Production),
           $String1 := moduleid2str($ModuleId),
           $String2 := production2str(Production),
           $String3 := "trafo should return traversed type"
           ====>
           check-form-production(Production, InfoMsgTuple, $ModuleId) = 
             put-messages($ModuleId, make-error($String3, $String2, $Location), InfoMsgTuple)


  [cf-1'3] Aterm+ := get-traversal-arguments(Production),
           contains-trafo(Aterm+) == true,
           contains-accu(Aterm+) == true,
           is-accu-trafo-definition(Production) == false,
           $Location := get-location(Production),
           $String1 := moduleid2str($ModuleId),
           $String2 := production2str(Production),
           $String3 := "accutrafo should return tuple of correct types"
           ====>
           check-form-production(Production, InfoMsgTuple, $ModuleId) = 
             put-messages($ModuleId, make-error($String3, $String2, $Location), InfoMsgTuple)

  [default-cf-1'4] check-form-production(Production, InfoMsgTuple, $ModuleId) = InfoMsgTuple

  [iad-1'1] is-accu-definition($FuncName1 ( $Symbol1, $Symbol2, $Symbol,*) -> $Symbol2 Attributes) = true

  [default-iad-1'2] is-accu-definition(Production) = false

  [itd-1'1] is-trafo-definition($FuncName1 ( $Symbol, $Symbol,*) -> $Symbol Attributes) = true

  [default-itd-1'2] is-trafo-definition(Production) = false

  [iatd-1'1] is-accu-trafo-definition($FuncName1 ( $Symbol1, $Symbol2, $Symbol,*) -> <$Symbol1, $Symbol2> Attributes) = true

  [default-iatd-1'2] is-accu-trafo-definition(Production) = false

  [ca-3'1] contains-accu(Aterm*1, accu, Aterm*2) = true

  [default-ca-3'2] contains-accu(Aterm*) = false

  [ct-3'1] contains-trafo(Aterm*1, trafo, Aterm*2) = true

  [default-ct-3'2] contains-trafo(Aterm*) = false

  [cbc-1'1] contains-break-or-continue(Aterm*1, break, Aterm*2) = true

  [cbc-1'2] contains-break-or-continue(Aterm*1, continue, Aterm*2) = true

  [default-cbc-1'3] contains-break-or-continue(Aterm*) = false

  [ctdbu-1'1] contains-top-down-or-bottom-up(Aterm*1, top-down, Aterm*2) = true

  [ctdbu-1'2] contains-top-down-or-bottom-up(Aterm*1, bottom-up, Aterm*2) = true

  [default-ctdbu-1'2] contains-top-down-or-bottom-up(Aterm*) = false

  [cota-1'1] contains-only-traversal-attributes() = true

  [cota-1'2] contains-only-traversal-attributes(Aterm*1, accu, Aterm*2) =
               contains-only-traversal-attributes(Aterm*1, Aterm*2)

  [cota-1'3] contains-only-traversal-attributes(Aterm*1, trafo, Aterm*2) =
               contains-only-traversal-attributes(Aterm*1, Aterm*2)

  [cota-1'4] contains-only-traversal-attributes(Aterm*1, break, Aterm*2) =
               contains-only-traversal-attributes(Aterm*1, Aterm*2)

  [cota-1'5] contains-only-traversal-attributes(Aterm*1, continue, Aterm*2) =
               contains-only-traversal-attributes(Aterm*1, Aterm*2)

  [cota-1'6] contains-only-traversal-attributes(Aterm*1, top-down, Aterm*2) =
               contains-only-traversal-attributes(Aterm*1, Aterm*2)

  [cota-1'7] contains-only-traversal-attributes(Aterm*1, bottom-up, Aterm*2) =
               contains-only-traversal-attributes(Aterm*1, Aterm*2)

  [default-cota-1'8] contains-only-traversal-attributes(Aterm+) = false

  [ipf-1'1] is-prefix-function($FuncName($Symbol,*) -> $Symbol Attributes) = true 

  [default-ipf-1'2] is-prefix-function(Production) = false 

  [gta-1'1] get-traversal-arguments($FuncName($Symbol,*) -> $Symbol {Attr*1, traversal(Aterm+), Attr*2}) = Aterm+

  [hta-1'1] has-traversal-attribute($FuncName($Symbol,*) -> $Symbol {Attr*1, traversal(Aterm+), Attr*2}) = true

  [hta-1'2] has-traversal-attribute($Symbol* -> $Symbol {Attr*1, traversal(Aterm+), Attr*2}) = true

  [default-hta-1'3] has-traversal-attribute(Production) = false

  [hta-1'1] has-traversal-attribute({Attr*1, traversal(Aterm+), Attr*2}) = true

  [default-hta-1'1] has-traversal-attribute(Attributes) = false

  [cd-1'1] consistent-defined(Production, , $ModuleId) = <not-found, >

  [cd-1'2] consistent-defined($FuncName ( $Symbol1 , $Symbol,* ) -> $Symbol2 Attributes,
                              $FuncName ( $Symbol3 , $Symbol,* ) -> $Symbol4 Attributes, 
                              $ModuleId) = <consistent, >

  [cd-1'3] $FuncName ($Symbol1 , $Symbol,*1 ) -> $Symbol2 Attributes1 := Production,
           equal-arguments($Symbol,*1;$Symbol,*2) == false,
           $Location := get-location(Production),
           $String1 := moduleid2str($ModuleId),
           $String2 := production2str(Production),
           $String3 := production2str($FuncName ( $Symbol3 , $Symbol,*2 ) -> $Symbol4 Attributes2),
           $String4 := "inconsistent arguments of traversal productions",
           $String5 := $String2 || " vs. " || $String3,
           $Msg := make-error($String4, $String5, $Location)
           ====>
           consistent-defined(Production,
                              $FuncName ( $Symbol3 , $Symbol,*2 ) -> $Symbol4 Attributes2
                              Production*, 
                              $ModuleId) = <inconsistent, $Msg>

  [cd-1'3] $FuncName ( $Symbol1 , $Symbol,* ) -> $Symbol2 Attributes1 := Production,
           Attributes1 != Attributes2,
           $Location := get-location(Production),
           $String1 := moduleid2str($ModuleId),
           $String2 := production2str(Production),
           $String3 := production2str($FuncName ( $Symbol3 , $Symbol,* ) -> $Symbol4 Attributes2),
           $String4 := "inconsistent traversal attributes",
           $String5 := $String2 || " vs. " || $String3,
           $Msg := make-error($String4, $String5, $Location)
           ====>
           consistent-defined(Production,
                              $FuncName ( $Symbol3 , $Symbol,* ) -> $Symbol4 Attributes2
                              Production*, 
                              $ModuleId) =  <inconsistent, $Msg>

  [default-cd-1'4] consistent-defined(Production1, Production2 Production*, $ModuleId) =
                      consistent-defined(Production1, Production*, $ModuleId)

  [ea-1'1] equal-arguments($Symbol,*;$Symbol,*) = true

  [default-ea-1'1] equal-arguments($Symbol,*1;$Symbol,*2) = false
