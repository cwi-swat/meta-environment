equations

  [ca-1'1] check-sdf-attributes(Definition, InfoMsgTuple) =
             check-attributes(Definition, InfoMsgTuple)

  [ca-1'2] $ModuleId := get-module-name(Module)
           ====>
           check-attributes(Module, InfoMsgTuple) = 
             check-attributes2(Module, InfoMsgTuple, $ModuleId)

  [ca-2'1] $Symbol* -> $Symbol {Attr*1, bracket, Attr*2} := Production,
           $Location := get-location(Production),
           is-bracket-definition($Symbol* -> $Symbol) == false,
           $String := production2str(Production)
           ====>
           check-attributes2(Production, InfoMsgTuple, $ModuleId) = 
             put-messages($ModuleId, make-warning("bracket attribute should be applied to productions of the form '\"...\" X \"...\" -> X'", $String, $Location), InfoMsgTuple)

  [ca-2'2] $FuncName( $Symbol,* ) -> $Symbol {Attr*1, bracket, Attr*2} := Production,
           $Location := get-location(Production),
           $String := production2str(Production)
           ====>
           check-attributes2(Production, InfoMsgTuple, $ModuleId) =
             put-messages($ModuleId, make-warning("bracket attribute should not be applied to prefix function", $String, $Location), InfoMsgTuple)

  [ca-2'3] $Symbol* -> $Symbol {Attr*1, left, Attr*2} := Production,
           $Location := get-location(Production),
           is-binary-definition($Symbol* -> $Symbol) == false,
           $String := production2str(Production)
           ====>
           check-attributes2(Production, InfoMsgTuple, $ModuleId) = 
             put-messages($ModuleId,  make-warning("left attribute should be applied to productions of the form 'X ... X -> X'", $String, $Location), InfoMsgTuple)

  [ca-2'4] $FuncName ( $Symbol,* ) -> $Symbol {Attr*1, left, Attr*2} := Production,
           $Location := get-location(Production),
           $String := production2str(Production)
           ====>
           check-attributes2(Production, InfoMsgTuple, $ModuleId) = 
             put-messages($ModuleId, make-warning("left attribute has no effect on prefix production", $String, $Location), InfoMsgTuple)

  [ca-2'5] $Symbol* -> $Symbol {Attr*1, assoc, Attr*2} := Production,
           $Location := get-location(Production),
           is-binary-definition($Symbol* -> $Symbol) == false,
           $String := production2str(Production)
           =================================================
           check-attributes2(Production, InfoMsgTuple, $ModuleId) = 
             put-messages($ModuleId, make-warning("assoc attribute should be applied to productions of the form 'X ... X -> X'", $String, $Location), InfoMsgTuple)

  [ca-2'6] $FuncName ( $Symbol,* ) -> $Symbol {Attr*1, assoc, Attr*2} := Production,
           $Location := get-location(Production),
           $String := production2str(Production)
           ====>
           check-attributes2(Production, InfoMsgTuple, $ModuleId) = 
             put-messages($ModuleId, make-warning("assoc attribute has no effect on prefix production", $String, $Location), InfoMsgTuple)

  [ca-2'7] $Symbol* -> $Symbol {Attr*1, right, Attr*2} := Production,
           $Location := get-location(Production),
           is-binary-definition($Symbol* -> $Symbol) == false,
           $String := production2str(Production)
           =================================================
           check-attributes2(Production, InfoMsgTuple, $ModuleId) = 
             put-messages($ModuleId, make-warning("right attribute should be applied to productions of the form 'X ... X -> X'", $String, $Location), InfoMsgTuple)


  [ca-2'8] $FuncName ( $Symbol,* ) -> $Symbol {Attr*1, right, Attr*2} := Production,
           $Location := get-location(Production),
           $String := production2str(Production)
           ====>
           check-attributes2(Production, InfoMsgTuple, $ModuleId) = 
             put-messages($ModuleId, make-warning("right attribute should be applied to productions of the form 'X ... X -> X'", $String, $Location), InfoMsgTuple)

  [ca-2'8] $Symbol* -> $Symbol {Attr*1, non-assoc, Attr*2} := Production,
           $Location := get-location(Production),
           is-recursive-definition($Symbol* -> $Symbol) == false,
           $String := production2str(Production)
           ====>
           check-attributes2(Production, InfoMsgTuple, $ModuleId) = 
             put-messages($ModuleId, make-warning("non-assoc attribute has no effect on non-recursive production", $String, $Location), InfoMsgTuple)

  [ca-2'9] $FuncName ( $Symbol,* ) -> $Symbol {Attr*1, non-assoc, Attr*2} := Production,
           $Location := get-location(Production),
           $String := production2str(Production)
           ====>
           check-attributes2(Production, InfoMsgTuple, $ModuleId) = 
             put-messages($ModuleId, make-warning("non-assoc attribute should be applied to productions of the form 'X ... X -> X'", $String, $Location), InfoMsgTuple)

equations

  [ibd-1'1] is-binary-definition($Symbol1 $Symbol* $Symbol1 -> $Symbol1) = true  

  [default-ibd-1'3] is-binary-definition(Production) = false

equations

  [ird-1] is-recursive-definition($Symbol*1 $Symbol $Symbol*2 -> $Symbol) = true
  [default-ird]  is-recursive-definition(Production) = false

equations

  [ibd-2'1] is-bracket-definition($String1 $Symbol $String2 -> $Symbol) = true 

  [default-ibd-2'2] is-bracket-definition(Production) = false
