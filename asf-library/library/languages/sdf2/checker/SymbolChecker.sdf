module languages/sdf2/checker/SymbolChecker

imports basic/Booleans 
imports languages/sdf2/checker/ModuleOperations
imports languages/sdf2/checker/Sdf-Type-Environment
imports utilities/PosInfo[Symbol]

exports
  context-free start-symbols Info-Msg-Tuple
  context-free syntax
    check-symbols-definition(Definition, Info-Msg-Tuple) -> Info-Msg-Tuple

hiddens
  context-free syntax
    check-symbols(Definition, Info-Msg-Tuple)            -> Info-Msg-Tuple {traversal(accu, break, top-down)}
    check-symbols(Module, Info-Msg-Tuple)                -> Info-Msg-Tuple {traversal(accu, break, top-down)}
    check-symbols2(Module, Info-Msg-Tuple, ModuleId)      -> Info-Msg-Tuple {traversal(accu, break, top-down)}
    check-symbols2(Grammar, Info-Msg-Tuple, ModuleId)     -> Info-Msg-Tuple {traversal(accu, break, top-down)}
    check-symbols2(Production*, Info-Msg-Tuple, ModuleId) -> Info-Msg-Tuple {traversal(accu, break, top-down)}
    check-symbols2(Symbol, Info-Msg-Tuple, ModuleId)      -> Info-Msg-Tuple {traversal(accu, break, top-down)}

  context-free syntax
    check-charclass-symbols(Production*, Info-Msg-Tuple, ModuleId) -> Info-Msg-Tuple {traversal(accu, break, top-down)}
    check-charclass-symbols(Symbol, Info-Msg-Tuple, ModuleId)      -> Info-Msg-Tuple {traversal(accu, break, top-down)}

hiddens
  context-free syntax
    is-literal-symbol(Symbol)   -> Boolean
    is-list-symbol(Symbol)      -> Boolean
    is-charclass-symbol(Symbol) -> Boolean

hiddens
  variables
    "Module"[0-9]*     -> Module
    "$ModuleId"[0-9]*  -> ModuleId
    "Definition"[0-9]* -> Definition
    "InfoMsgTuple"[0-9]* -> Info-Msg-Tuple
    "Msgs"[0-9]*       -> {Error ","}*
    "$Symbol"[0-9]*    -> Symbol
    "$StrCon"[0-9]*   -> StrCon
    "NatCon"[0-9]*     -> NatCon
    "Prod*"[0-9]*      -> Production*
    "CC"[0-9]*         -> CharClass
   
    "$String"[0-9]* -> StrCon
    "$Location"[0-9]* -> Location
    
