equations

%% Type checking rules for an (expanded) SDF module

  [gps-1'1] get-parameter-symbols($ModuleId[$Symbols], SymbolsMsgs, $ModuleId) = 
              get-declared-symbol($Symbols, SymbolsMsgs, $ModuleId)

  [tc1] get-exported-declared-symbols(exports $Grammar, SymbolsMsgs, $ModuleId) =
       	  get-declared-symbols($Grammar, SymbolsMsgs, $ModuleId)

  [tc2] get-hidden-declared-symbols(hiddens $Grammar, SymbolsMsgs, $ModuleId) =
       	  get-declared-symbols($Grammar, SymbolsMsgs, $ModuleId)

  [tc3] get-declared-symbols(sorts $Symbol*1, SymbolsMsgs, $ModuleId) =
       	  get-declared-symbol($Symbol*1, SymbolsMsgs, $ModuleId)

  [tc4] $Location := get-location($Symbol),
        SymbolsMsgs2 := 
          check-symbol($Symbol, SymbolsMsgs1, $Location, $ModuleId)
        ====>
        get-declared-symbol($Symbol, SymbolsMsgs1, $ModuleId) =
          add-symbol($Symbol, SymbolsMsgs2, $Location, $ModuleId)

  [gss-1'1] get-start-symbols(context-free start-symbols $Symbol*1, SymbolsMsgs, $ModuleId) =
      	      get-start-symbol($Symbol*1, SymbolsMsgs, $ModuleId)

  [gss-1'2] get-start-symbols(lexical start-symbols $Symbol*1, SymbolsMsgs, $ModuleId) =
       	      get-start-symbol($Symbol*1, SymbolsMsgs, $ModuleId)

  [gss-1'3] get-start-symbols(start-symbols $Symbol*1, SymbolsMsgs, $ModuleId) =
       	      get-start-symbol($Symbol*1, SymbolsMsgs, $ModuleId)

  [gss-2'1] get-start-symbol($Symbol, SymbolsMsgs, $ModuleId) =
              add-start-symbol($Symbol, SymbolsMsgs, $ModuleId)

  [cs-1'1] check-symbol($Sort, SymbolsMsgs, $Location, $ModuleId) = SymbolsMsgs

  [default-cs-1'2] $String1 := moduleid2str($ModuleId),
                   $String2 := symbol2str($Symbol),
                   $String3 := "deprecated declaration of complex symbol"
                   ====>
                   check-symbol($Symbol, [SymbolPairsSet, $Msgs], $Location, $ModuleId) =
                     [SymbolPairsSet, $Msgs, make-warning($String3, $String2, $Location)]

  [as-1'1] contains($Symbol, symbols($Symbol*)) == false
           ====>
           add-symbol($Symbol, [symbols($Symbol*), $Msgs], $Location, $ModuleId) =
                     [symbols($Symbol $Symbol*), $Msgs]

  [default-as-1'2] $String1 := moduleid2str($ModuleId),
                   $String2 := symbol2str($Symbol),
                   $Symbol2 := get($Symbol, SymbolPairsSet)
                   ====>
                   add-symbol($Symbol,
                              [SymbolPairsSet, $Msgs], $Location, $ModuleId) =
                     [SymbolPairsSet, $Msgs,
                       warning("double declared sort",
                              [localized("first occurrence", $Location),
                               localized("second occurrence", get-location($Symbol2))])]

  [ass-1'1] contains($Symbol, symbols(SymbolPair*)) == false
            ====>
            add-start-symbol($Symbol, [symbols($Symbol*), $Msgs], $ModuleId) =
                             [symbols($Symbol $Symbol*), $Msgs]

  [default-ass-1'2] $Location := get-location($Symbol),
                    $String1 := moduleid2str($ModuleId),
                    $String2 := symbol2str($Symbol),
                    $Symbol2 := get($Symbol, SymbolPairsSet)
                    ====>
                    add-start-symbol($Symbol, [SymbolPairsSet, $Msgs], $ModuleId) =
                                     [SymbolPairsSet,
                                      $Msgs, 
		        warning("double declared start-symbol",
                                 [localized("first occurrence", $Location),
                                  localized("second occurrence", get-location($Symbol2))])]

  [geas-1'1] get-exported-aliased-symbols(exports $Grammar, SymbolsMsgs, 
                                          $ModuleId, SymbolPairsSet) =
       	       get-aliased-symbols($Grammar, SymbolsMsgs, $ModuleId, SymbolPairsSet)

  [ghas-1'1] get-hidden-aliased-symbols(hiddens $Grammar, SymbolsMsgs, 
                                        $ModuleId, SymbolPairsSet) =
       	       get-aliased-symbols($Grammar, SymbolsMsgs, $ModuleId, SymbolPairsSet)

  [gas-1'1] contains($Symbol2, SymbolPairsSet2) == true
            ====>
            get-aliased-symbols($Symbol1 -> $Symbol2,
                                [SymbolPairsSet1, $Msgs], $ModuleId, SymbolPairsSet2) =
             [SymbolPairsSet1, $Msgs]

  [gas-1'2] contains($Symbol2, SymbolPairsSet2) == false,
            contains($Symbol2, symbols($Symbol*)) == false
            ====>
            get-aliased-symbols($Symbol1 -> $Symbol2, 
                                [symbols($Symbol*), $Msgs], 
                                $ModuleId, SymbolPairsSet2) =
                     [symbols($Symbol2 $Symbol*), $Msgs]

  [default-gas-1'3] $Symbol3 -> $Symbol1 := $Alias,
                    $Location1 := get-location($Symbol1),
                    $String1 := symbol2str($Symbol1),
                    $Symbol2 := get($Symbol1, SymbolPairsSet1),
                    $String2 := symbol2str($Symbol2),
                    $Location2 := get-location($Symbol2)
                    ====>
                    get-aliased-symbols($Alias,
                                        [SymbolPairsSet1, $Msgs], 
                                        $ModuleId, SymbolPairsSet2) =
                       [SymbolPairsSet1,
                        $Msgs, 
                        warning("alias symbol declared more than once", 
                               [localized("first occurrence", $Location1),
                                localized("second occurrence", $Location2)])]
  
equations

  [tc1] get-used-symbols(CHAR, SymbolsSet) = SymbolsSet

  [tc2] get-used-symbols(sorts $Symbol*, SymbolsSet) = SymbolsSet
  
  [tc3] $Sort != CHAR
        ====>
        get-used-symbols($Sort, SymbolsSet) = add($Sort, SymbolsSet)

equations

  [tc4] get-defined-symbols(variables Prod*, SymbolsSet) = SymbolsSet

  [tc5] get-defined-symbols($Symbols -> $Symbol $Attributes, 
                            SymbolsSet) = add($Symbol, SymbolsSet)

  [tc6] get-defined-symbols($FuncName ( $Symbol,* ) -> $Symbol $Attributes, 
                            SymbolsSet) = add($Symbol, SymbolsSet)

equations

  [grs-1'1] get-renamed-symbols($Symbol1 => $Symbol2, 
                                SymbolsSet) = add($Symbol2, SymbolsSet)

equations

  [grsf-1'1] get-renamed-from-symbols($Symbol1 => $Symbol2, 
                                SymbolsSet) = add($Symbol1, SymbolsSet)

equations

%% Pre-check one module
	
  [cm1] $ModuleId := get-module-name($Module),

        [DeclaredSymbolPairSet, $Msgs1] := 
          get-exported-declared-symbols($Module, [symbols(),], $ModuleId),

        [AliasedSymbolPairSet, $Msgs2] := 
          get-exported-aliased-symbols($Module, [symbols(), ], $ModuleId, 
                                       symbols()),

        RenamedSymbolsSet := get-renamed-symbols($Module, symbols()),

        RenamedSymbolsSet2 := get-renamed-from-symbols($Module, symbols()),

        InfoMsgTuple2 := put-messages($ModuleId, $Msgs1, $Msgs2,
                                      InfoMsgTuple1),
        ModuleInfoTable1 := get-module-info(InfoMsgTuple2),
        ModuleInfoTable2 := put-declared-symbols-info($ModuleId, 
                                                      DeclaredSymbolPairSet, 
                                                      ModuleInfoTable1),
        ModuleInfoTable3 := put-aliased-symbols-info($ModuleId, 
                                                     AliasedSymbolPairSet, 
                                                     ModuleInfoTable2),

        ModuleInfoTable4 := put-renamed-symbols-info($ModuleId,
                                                     RenamedSymbolsSet,
                                                     ModuleInfoTable3),
        ModuleInfoTable5 := put-renamed-from-symbols-info($ModuleId,
					             RenamedSymbolsSet2,
						    ModuleInfoTable4),
        InfoMsgTuple3 :=  put-module-info(ModuleInfoTable5, InfoMsgTuple2)
        ====>
        pre-check-module-sorts($Module, InfoMsgTuple1) = InfoMsgTuple3

%% Check one module
	
  [cm1] $ModuleId := get-module-name($Module),

        imports(Import*) := get-imports($ModuleId, get-module-info(InfoMsgTuple1)),

        RenamedSymbolsSet := get-renamed-symbols($Module, symbols()),

        DeclaredSymbolPairSet1 := 
          get-declared-symbols(Import*, get-module-info(InfoMsgTuple1)),
        AliasedSymbolPairSet1 := 
          get-aliased-symbols(Import*, get-module-info(InfoMsgTuple1)),
        DefinedSymbolsSet := 
          get-defined-symbols(Import*, get-module-info(InfoMsgTuple1)),

        RenamedSymbolsSet2 :=
          get-renamed-symbols(Import*, get-module-info(InfoMsgTuple1)),

        [ParameterSymbolPairSet, $Msgs0] := 
          get-parameter-symbols($Module, [symbols(),], $ModuleId),

        [DeclaredSymbolPairSet2, $Msgs1] := 
          get-hidden-declared-symbols($Module, [ParameterSymbolPairSet, ], $ModuleId),
        [AliasedSymbolPairSet2, $Msgs2] := 
          get-hidden-aliased-symbols($Module, [symbols(), ], $ModuleId, AliasedSymbolPairSet1),

        [StartSymbolPairsSet, $Msgs3] := 
          get-start-symbols($Module, [symbols(), ], $ModuleId),

        $Msgs4 := check-CHAR-sort($Module, , $ModuleId),

        UsedSymbolsSet := get-used-symbols($Module, symbols()),
        DefinedSymbolsSet2 := get-defined-symbols($Module, symbols()),

        SymbolsSet := diff(UsedSymbolsSet,
                         merge( 
                           merge(
                             merge(
                               merge(
                                 merge(ParameterSymbolPairSet,
                                       AliasedSymbolPairSet2),
                                     DeclaredSymbolPairSet2),
                                    AliasedSymbolPairSet1),
                                  DeclaredSymbolPairSet1),
                                  RenamedSymbolsSet2)),

        SymbolsSet2 := SymbolsSet,

        SymbolsSet3 := diff(StartSymbolPairsSet,
                            merge(RenamedSymbolsSet,
                                  merge(DefinedSymbolsSet, 
                                        DefinedSymbolsSet2))),

        $String1 := moduleid2str($ModuleId),
        $String2 := "undeclared sort",
        $Msgs5 := make-symbol-warnings(SymbolsSet2, $String2),
        $String3 := "start-symbol not defined by any production",
        $Msgs6 := make-symbol-errors(SymbolsSet3, $String3),
                 
        InfoMsgTuple3 := put-messages($ModuleId, $Msgs1, $Msgs2, $Msgs3, 
                                      $Msgs4, $Msgs5, $Msgs6,
                                      InfoMsgTuple1),

        ModuleInfoTable3 := get-module-info(InfoMsgTuple3),
        ModuleInfoTable4 := 
          put-used-symbols-info($ModuleId, UsedSymbolsSet, ModuleInfoTable3),
        ModuleInfoTable5 := 
          put-defined-symbols-info($ModuleId, 
                                   merge(ParameterSymbolPairSet, 
                                         DefinedSymbolsSet2), 
                                   ModuleInfoTable4),
        ModuleInfoTable6 :=
          put-renamed-symbols-info($ModuleId,
                                   RenamedSymbolsSet, ModuleInfoTable5),
        InfoMsgTuple4 :=  put-module-info(ModuleInfoTable6, InfoMsgTuple3)
        ====>
        check-module-sorts($Module, InfoMsgTuple1) = InfoMsgTuple4

  [cSs-1'1] check-CHAR-sort(variables Prod*, $Msgs, $ModuleId) = $Msgs

  [cSs-1'2] check-CHAR-sort(Prod, $Msgs, $ModuleId) =
              check-CHAR-sort2(Prod, $Msgs, Prod, $ModuleId)

  [cSs-2'1] CHAR == $Sort,
            $Location := get-location($Sort),
            $String1 := moduleid2str($ModuleId),
            $String2 := production2str(Prod),
            $String3 := "illegal use of reserved sort CHAR in production"
            ====>
            check-CHAR-sort2($Sort, $Msgs, Prod, $ModuleId) =
              $Msgs, make-warning($String3, $String2, $Location)

  [musm-1'1] make-symbol-warnings(symbols(),$String1) = 

  [msum-1'2] $Location := get-location($Symbol),
             $String2 := symbol2str($Symbol),
             $Msg := make-warning($String1, $String2, $Location),
             $Msg* := make-symbol-warnings(symbols($Symbol*), $String1)
             ===>
             make-symbol-warnings(symbols($Symbol $Symbol*), $String1) = $Msg, $Msg*

  [msue-1'1] make-symbol-errors(symbols(),$String1) = 

  [msue-1'2] $Location := get-location($Symbol),
             $String2 := symbol2str($Symbol),
             $Msg := make-error($String1, $String2, $Location),
             $Msg* := make-symbol-errors(symbols($Symbol*), $String1)
             ===>
             make-symbol-errors(symbols($Symbol $Symbol*), $String1) = $Msg, $Msg*
