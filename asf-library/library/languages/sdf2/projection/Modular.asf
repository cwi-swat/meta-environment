equations

%% \noindent
%% Membership of a list of imports.

  [0] _i (- _i*1 _i _i*2 = true
  [default-0] _i (- _i* = false

%% Concatenation of section and imports lists.

 [0] s*1  ++ s*2  = s*1 s*2
 [0] _i*1 ++ _i*2 = _i*1 _i*2

%% Lookup of a module by its name in a list of modules.
%% If a module name matches the module name searched for, its list of sections
%% is yielded. If a parameterized module is imported without specifying any actual
%% parameters, the parameters are left uninstantiated.
%% If a list of actual paramters is given, these are used to rename the formal
%% parameters into the actual parameters.
%% The function $(\_\Rightarrow\_)$ constructs a renaming from the formal parameters
%% to the actual parameters of a parameterized module.
%% If no modules are found the empty list of sections is yielded.

  [0]         proj_M(module M s*  m*)             = s* ++ proj_M(m*)
  [0]         proj_Mid(module Mid['a] s*  m*)     = s* ++ proj_Mid(m*)
  [0]         proj_Mid['b](module Mid['a] s*  m*) = (s*)('a=>'b) ++ proj_Mid['b](m*)
  [default-0] proj_M(module M' s* m*)             = proj_M(m*)
  [0]         proj_M()                            =

%% Exported grammars from a list of sections.

  [0] Exp()           = (/)
  [0] Exp(s+1 s+2)    = Exp(s+1) Exp(s+2)
  [0] Exp(exports _G) = _G
  [0] Exp(hiddens _G) = (/)

%% Hidden grammars from a list of sections.

  [0] Hid()           = (/)
  [0] Hid(s+1 s+2)    = Hid(s+1) Hid(s+2)
  [0] Hid(exports _G) = (/)
  [0] Hid(hiddens _G) = _G
