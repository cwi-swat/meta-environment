%%%% $Id$

equations

%% \noindent
%% Concatenation of lists of productions, membership and subset of a list of productions.

  [0]         p*1 ++ p*2     = p*1 p*2
  [0]         p (- p*1 p p*2 = true
  [default-0] p (- p*        = false
  [0]         (= p*          = true
  [0]         p p*1 (= p*2   = p (- p*2 & p*1 (= p*2

%% Concatenation of attribute lists. Attributes ocurring in both lists are
%% added only once.

  [0]         {attr+1, attr+2} ++ {attr*}      = {attr+1} ++ {attr+2} ++ {attr*}
  [0]         {attr} ++ {attr*1, attr, attr*2} = {attr*1, attr, attr*2}
  [default-0] {attr} ++ {attr*}                = {attr, attr*}
  [0]         !        ++          = !
  [0]                  ++ !        = !
  [0]         {}                   =

%% The last equation states that an empty list
%% of attributes $\{\}$ is equal to no
%% attributes.
%%
%% Two productions are similar if they are the same up to their attributes

   [pr-leq2]        'a -> _A !1 ~= 'a -> _A !2 = true
   [default-pr-leq] p1 ~= p2                   = false

%% Function \fun{P} gives all productions of a grammar and function \fun{$\NonP$} gives
%% all non-syntax parts of a grammar. The function $\P_{\Sym{A}}$ gives all productions
%% defining the symbol $\Sym{A}$.

  [P0] P(_G) = nm-P(_G)

  [0]          nm-P(syntax p*)       = p*
  [0]          nm-P(_G1 _G2)         = nm-P(_G1) ++ nm-P(_G2)
  [default-0]  nm-P(_G)              =
%%%  [0]          P(syntax p*)       = p*
%%%  [0]          P(_G1 _G2)         = P(_G1) ++ P(_G2)
%%%  [default-0]  P(_G)              =
  [0]         ~P(syntax p*)       = (/)
  [0]         ~P(_G1 _G2)         = ~P(_G1) ~P(_G2)
  [default-0] ~P(_G)              = _G
  [0]          P__A(p*) = nm-P__A(p*)
  [nm-1]          nm-P__A()             =
  [nm-2]          nm-P__A('a -> _A! p*) = 'a -> _A! ++ nm-P__A(p*)
  [default-nm-3]  nm-P__A(p p*)         = nm-P__A(p*)

%% The function \fun{symbols} gives the set of symbols of a list of productions
%% or a grammar.

  [0]           symbols()               = {}
  [0]           symbols('a -> _A ! p*)  = {'a} || {_A} || symbols(p*)
  [0]           symbols(syntax p*)      = symbols(p*)
  [0]           symbols(_G1 _G2)        = symbols(_G1) || symbols(_G2)
  [default-0]   symbols(_G)             = {}

%% The function \fun{reachable} gives the subgrammar with those  productions
%% reachable from some set of symbols $\upsilon$. It is defined by applying the
%% auxiliary \fun{reachable} function to the productions of the grammar.
%% Observe how the resulting grammar is a composition of the reachable
%% productions and the non-production parts of a grammar.
%% The auxiliary function selects for each symbol in the original set the
%% productions for that symbol from the original grammar. This is applied
%% recursively to the symbols used
%% in the left-hand sides of those productions.
%% The first set argument of the auxiliary function represents the symbols
%% already handled. The second set contains the symbols for which the productions
%% still have to be looked up.

 [0]
        reachable('u, _G) = syntax reachable({}, 'u, P(_G)) ~P(_G)
 [0]
        reachable('u, {}, p*) =
 [0]
        _A (- 'u1 = false, P__A(p*1) = p*2, symbols(p*2) / 'u1 = 'u2
        ==============================================================================
        reachable('u1, {_A 'a}, p*1) = p*2 ++ reachable('u1 || {_A}, 'u2 || {'a}, p*1)
 [default-0]
        reachable('u1, {_A 'a}, p*) = reachable('u1, {'a}, p*)

%%%%
