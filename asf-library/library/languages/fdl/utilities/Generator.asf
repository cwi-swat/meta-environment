equations 

[] TypeEnv := construct-type-environment(FeatureModule),
   ValueEnv := construct-value-environment(FeatureModule),
   ParameterEnv := construct-parameter-environment(FeatureModule),
   C-Program1 := genHandleOptionsFunctions(FeatureModule, TypeEnv, ValueEnv, ParameterEnv),
   C-Program2 := generateGlobals(FeatureModule, C-Program1, ParameterEnv, TypeEnv),
   C-Program3 := addIncludeSection(C-Program2)
   ===
   generate(FeatureModule) = C-Program3


equations

[] module Modulename ImportSection* Section*1 features FeatureDefinition* Section*2 := FeatureModule,
   C-Program := genHandleOptionsFunction(FeatureDefinition*, , Modulename, TypeEnv, ValueEnv, ParameterEnv)
   ===
   genHandleOptionsFunctions(FeatureModule, TypeEnv, ValueEnv, ParameterEnv) = C-Program

[] unparse-to-string(Modulename) == unparse-to-string(CompositeFeature),
   Statement* := generateFunctionStatements(CompositeFeature: FeatureExpression, , ParameterEnv, TypeEnv)
   ===
   genHandleOptionsFunction(CompositeFeature: FeatureExpression, C-Program*, Modulename, TypeEnv, ValueEnv, ParameterEnv) = 

C-Program*

void handleOptions(int argc, char **argv) {
  int c;

  while ((c = getopt(argc, argv, myArguments)) != -1) {
    switch(c) {
      Statement*
    }
  }
} 

[default-genHandleOptionsFunction] 
   Statement* := generateFunctionStatements(FeatureDefinition, , ParameterEnv, TypeEnv)
   ===
   genHandleOptionsFunction(FeatureDefinition, C-Program*, Modulename, TypeEnv, ValueEnv, ParameterEnv) = 

C-Program*

void handleOptions(const char *arg) {
  if (strlen(arg) == 1) {
    switch(arg[0]) {
      Statement*
    }
  }
} 


equations

[] module Modulename ImportSection* Section*1 arguments Argument* Section*2 := FeatureModule,
   IdCon := Modulename,
   StringConstant := idcon2stringconstant(IdCon),
   StringConstant2 := generateArguments(Argument*, "", ParameterEnv, TypeEnv)
   ===
   generateGlobals(FeatureModule, C-Program1, ParameterEnv, TypeEnv) = 

static const char programname[] = StringConstant;
static const char myArguments[] = StringConstant2;
static const char myVersion[] = VERSION;
C-Program1


equations

[] addIncludeSection(C-Program) = 
     
#include <stdio.h> 
#include <stdlib.h> 
     
#include "options.h" 
     
C-Program


equations

[] generateFunctionDeclarations([], TypeEnv, ValueEnv) = 

[] lookup(TypeEnv, AtomicFeature) == boolean,
   Declaration := int af2id(AtomicFeature);
   ===
   generateFunctionDeclarations([AtomicFeature, AtomicFeature*], TypeEnv, ValueEnv) =
    Declaration generateFunctionDeclarations([AtomicFeature*], TypeEnv, ValueEnv)

[] lookup(TypeEnv, AtomicFeature) == string,
   Declaration := char* af2id(AtomicFeature) = NULL;
   ===
   generateFunctionDeclarations([AtomicFeature, AtomicFeature*], TypeEnv, ValueEnv) =
    Declaration generateFunctionDeclarations([AtomicFeature*], TypeEnv, ValueEnv)

[default-generateFunctionDeclarations] 
   Declaration := char* af2id(AtomicFeature) = "Value";
   ===
   generateFunctionDeclarations([AtomicFeature, AtomicFeature*], TypeEnv, ValueEnv) =
    Declaration generateFunctionDeclarations([AtomicFeature*], TypeEnv, ValueEnv)


equations

[] lookup(TypeEnv, AtomicFeature) == boolean,
   ArgumentChar := lookup(ParameterEnv, AtomicFeature),
   CharacterConstant := ac2cc(ArgumentChar),
   Identifier1 := af2cid(AtomicFeature),
   Identifier2 := af2cid(AtomicFeature)
   ===
   generateFunctionStatements(AtomicFeature, Statement*, ParameterEnv, TypeEnv) = 

Statement* 
case CharacterConstant:
  OPT_setFlag(Identifier1, !OPT_getFlag(Identifier2));
  break;

[default-generateFunctionStatements] 
   ArgumentChar := lookup(ParameterEnv, AtomicFeature),
   CharacterConstant := ac2cc(ArgumentChar),
   Identifier := af2cid(AtomicFeature)
   ===
   generateFunctionStatements(AtomicFeature, Statement*, ParameterEnv, TypeEnv) = 

Statement* 
case CharacterConstant:
  OPT_setStringValue(Identifier, optarg);
  break;

[] ArgumentChar := lookup(ParameterEnv, CompositeFeature),
   CharacterConstant := ac2cc(ArgumentChar),
   Identifier := cf2handleoptions(CompositeFeature)
   ===
   generateFunctionStatements(CompositeFeature, Statement*, ParameterEnv, TypeEnv) =

Statement*
case CharacterConstant:
  Identifier(optarg);
  break;

[] lookup(ParameterEnv, FeatureName) == not-in-table
   ===
   generateFunctionStatements(FeatureName, Statement*, ParameterEnv, TypeEnv) = Statement*

equations
[] lookup(TypeEnv, AtomicFeature) == boolean,
   argumentchar(argchar) := lookup(ParameterEnv, AtomicFeature)
   ===
   generateArguments(AtomicFeature, stringconstant(\" char* \"), ParameterEnv, TypeEnv) = stringconstant(\" char* stringchar(argchar) \")

[default-generateArguments] 
  argumentchar(argchar) := lookup(ParameterEnv, AtomicFeature),
  stringconstant(\" char*2 \") := ":"
  ===
  generateArguments(AtomicFeature, stringconstant(\" char*1 \"), ParameterEnv, TypeEnv) = stringconstant(\" char*1 stringchar(argchar) char*2 \")

[] argumentchar(argchar) := lookup(ParameterEnv, CompositeFeature),
   stringconstant(\" char*2 \") := ":"
   ===
   generateArguments(CompositeFeature, stringconstant(\" char*1 \"), ParameterEnv, TypeEnv) = stringconstant(\" char*1 stringchar(argchar) char*2 \")


equations

[] af2id(atomicfeature(head)) = identifier(head)
[] af2id(atomicfeature(head tail)) = identifier(head tail)


equations

[] ac2cc(argumentchar(argchar)) = characterconstant(\' argchar \')


equations

[] bytes(byte(caphead)) := capitalize(bytes(byte(head)))
   ===
   af2cid(atomicfeature(head tail)) = identifier(caphead tail)


equations

[] cf2handleoptions(compositefeature(caphead tail)) = identifier(handle caphead tail Options)


equations

[] idcon2stringconstant(idcon(idhead)) = stringconstant(\" stringchar(idhead) \")

[] stringconstant(\" stringchar(idhead) char* \") := idcon2stringconstant(idcon(idhead idtail))
   ===
   idcon2stringconstant(idcon(idhead idmiddle idtail)) = stringconstant(\" stringchar(idhead) stringchar(idmiddle) char* \")

