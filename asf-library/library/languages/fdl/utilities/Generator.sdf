module Generator

imports languages/fdl/syntax/Modular-FDL
imports languages/ansi-c/syntax/Default-C-With-CPP
imports languages/fdl/check/TypeEnvironment
imports languages/fdl/run/ValueEnvironment
imports languages/fdl/utilities/ParameterEnvironment

exports
sorts Keys

context-free start-symbols
  TranslationUnit

context-free syntax
  generate(FeatureModule) -> TranslationUnit  

hiddens
aliases
  List[[AtomicFeature]] -> Keys

context-free syntax
  af2id(AtomicFeature) -> Identifier        {complete} 
  ac2cc(ArgumentChar)  -> CharacterConstant {complete}

context-free syntax
  generateFunction(FeatureModule, TypeEnv, ValueEnv, ParameterEnv)    -> FunctionDefinition                                         
  generateFunctionDeclarations(Keys, TypeEnv, ValueEnv)               -> Declaration*                                               
  generateFunctionStatements(FeatureModule, Statement*, ParameterEnv) -> Statement*           {traversal(accu, bottom-up, break)} 
  generateFunctionStatements(AtomicFeature, Statement*, ParameterEnv) -> Statement*           {traversal(accu, bottom-up, break)} 
  generateGlobals(ExternalDeclaration+, ParameterEnv)                 -> ExternalDeclaration+                                       
  addIncludeSection(ExternalDeclaration+)                             -> ExternalDeclaration+                                       

variables
  "ArgumentChar" [0-9]*      -> ArgumentChar          
  "AtomicFeature" [0-9]*     -> AtomicFeature         
  "AtomicFeature*" [0-9]*    -> {AtomicFeature ","}*  
  "CharacterConstant" [0-9]* -> CharacterConstant     
  "C-Program" [0-9]*         -> ExternalDeclaration+  
  "Declaration" [0-9]*       -> Declaration           
  "Declaration*" [0-9]*      -> Declaration*          
  "FeatureModule" [0-9]*     -> FeatureModule         
  "Keys" [0-9]*              -> Keys                  
  "ParameterEnv" [0-9]*      -> ParameterEnv          
  "Statement*" [0-9]*        -> Statement*            
  "TypeEnv" [0-9]*           -> TypeEnv               
  "ValueEnv" [0-9]*          -> ValueEnv              

lexical variables
  "head" [0-9]*    -> [a-z]           
  "tail" [0-9]*    -> [a-zA-Z0-9\_]*  
  "argchar" [0-9]* -> [a-zA-Z0-9]     
