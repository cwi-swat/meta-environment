module Generator

imports languages/fdl/syntax/Modular-FDL
imports languages/ansi-c/syntax/Default-C-With-CPP
imports languages/fdl/check/TypeEnvironment
imports languages/fdl/run/ValueEnvironment

exports
context-free start-symbols
  TranslationUnit

aliases
  List[[AtomicFeature]] -> Keys

sorts Keys

context-free syntax
  af2id(AtomicFeature) -> Identifier  

context-free syntax
  generate(FeatureModule)                               -> TranslationUnit                                            
  generateFunction(FeatureModule, TypeEnv, ValueEnv)    -> FunctionDefinition                                         
  generateFunctionDeclarations(Keys, TypeEnv, ValueEnv) -> Declaration*                                               
  generateFunctionStatements(FeatureModule, Statement*) -> Statement*           {traversal(accu, top-down, continue)} 
  generateFunctionStatements(AtomicFeature, Statement*) -> Statement*           {traversal(accu, top-down, continue)} 
  addIncludeSection(ExternalDeclaration+)               -> ExternalDeclaration+                                       

hiddens
variables
  "AtomicFeature" [0-9]*  -> AtomicFeature         
  "AtomicFeature*" [0-9]* -> {AtomicFeature ","}*  
  "FeatureModule"         -> FeatureModule         
  "C-Program" [0-9]*      -> ExternalDeclaration+  
  "Statement*" [0-9]*     -> Statement*            
  "Declaration" [0-9]*    -> Declaration           
  "Declaration*" [0-9]*   -> Declaration*          
  "TypeEnv" [0-9]*        -> TypeEnv               
  "Keys" [0-9]*           -> Keys                  
  "ValueEnv" [0-9]*       -> ValueEnv              

lexical variables
  "head" [0-9]* -> [a-z]           
  "tail" [0-9]* -> [a-zA-Z0-9\_]*  
