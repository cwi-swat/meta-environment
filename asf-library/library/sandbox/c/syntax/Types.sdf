module Types
exports

  context-free syntax
    SueDeclarationSpecifier ";" -> Declaration 
    SueTypeSpecifier ";"        -> Declaration 
    DeclaringList ";"           -> Declaration 
    DefaultDeclaringList ";"    -> Declaration 

  context-free syntax
    DeclarationQualifierList 	IdentifierDeclarator InitializerOpt? -> DefaultDeclaringList 
    TypeQualifierList 		IdentifierDeclarator InitializerOpt? -> DefaultDeclaringList 
    DefaultDeclaringList "," 	IdentifierDeclarator InitializerOpt? -> DefaultDeclaringList 

  context-free syntax
    DeclarationSpecifier Declarator InitializerOpt? -> DeclaringList 
    TypeSpecifier 	 Declarator InitializerOpt? -> DeclaringList 
    DeclaringList "," 	 Declarator InitializerOpt? -> DeclaringList 

  context-free syntax
    BasicDeclarationSpecifier   -> DeclarationSpecifier
    SueDeclarationSpecifier     -> DeclarationSpecifier
    TypedefDeclarationSpecifier -> DeclarationSpecifier

  context-free syntax
    BasicTypeSpecifier   -> TypeSpecifier
    SueTypeSpecifier     -> TypeSpecifier
    TypedefTypeSpecifier -> TypeSpecifier

  context-free syntax
    StorageClass                                  -> DeclarationQualifierList
    TypeQualifierList StorageClass                -> DeclarationQualifierList 
    DeclarationQualifierList DeclarationQualifier -> DeclarationQualifierList 

  context-free syntax
    TypeQualifier+ -> TypeQualifierList

  context-free syntax
    StorageClass  -> DeclarationQualifier
    TypeQualifier -> DeclarationQualifier

  context-free syntax
    "const"    -> TypeQualifier 
    "volatile" -> TypeQualifier 

  context-free syntax
    DeclarationQualifierList BasicTypeName         -> BasicDeclarationSpecifier 
    BasicTypeSpecifier StorageClass                -> BasicDeclarationSpecifier 
    BasicDeclarationSpecifier DeclarationQualifier -> BasicDeclarationSpecifier 
    BasicDeclarationSpecifier BasicTypeName        -> BasicDeclarationSpecifier 

  context-free syntax
    BasicTypeName                    -> BasicTypeSpecifier 
    TypeQualifierList BasicTypeName  -> BasicTypeSpecifier 
    BasicTypeSpecifier TypeQualifier -> BasicTypeSpecifier 
    BasicTypeSpecifier BasicTypeName -> BasicTypeSpecifier 

  context-free syntax
    DeclarationQualifierList ElaboratedTypeName  -> SueDeclarationSpecifier 
    SueTypeSpecifier StorageClass                -> SueDeclarationSpecifier 
    SueDeclarationSpecifier DeclarationQualifier -> SueDeclarationSpecifier 

  context-free syntax
    ElaboratedTypeName                   -> SueTypeSpecifier 
    TypeQualifierList ElaboratedTypeName -> SueTypeSpecifier 
    SueTypeSpecifier TypeQualifier       -> SueTypeSpecifier 

  context-free syntax
    TypedefTypeSpecifier StorageClass                -> TypedefDeclarationSpecifier 
    DeclarationQualifierList TypedefName             -> TypedefDeclarationSpecifier 
    TypedefDeclarationSpecifier DeclarationQualifier -> TypedefDeclarationSpecifier 

  context-free syntax
    TypedefName                        -> TypedefTypeSpecifier 
    TypeQualifierList TypedefName      -> TypedefTypeSpecifier 
    TypedefTypeSpecifier TypeQualifier -> TypedefTypeSpecifier 

  context-free syntax
    "typedef"  -> StorageClass 
    "extern"   -> StorageClass 
    "static"   -> StorageClass 
    "auto"     -> StorageClass 
    "register" -> StorageClass 

  context-free syntax
    "int"      -> BasicTypeName 
    "char"     -> BasicTypeName 
    "short"    -> BasicTypeName 
    "long"     -> BasicTypeName 
    "float"    -> BasicTypeName 
    "double"   -> BasicTypeName 
    "signed"   -> BasicTypeName 
    "unsigned" -> BasicTypeName 
    "void"     -> BasicTypeName 

  context-free syntax
    StructSpecifier -> ElaboratedTypeName
    UnionSpecifier -> ElaboratedTypeName
    EnumSpecifier -> ElaboratedTypeName

  context-free syntax
    "struct" IdentifierOrTypedefName? "{" MemberDeclarationList "}" -> StructSpecifier 
    "struct" IdentifierOrTypedefName                                -> StructSpecifier 

  context-free syntax
    "union" IdentifierOrTypedefName? "{" MemberDeclarationList "}" -> UnionSpecifier 
    "union" IdentifierOrTypedefName                                -> UnionSpecifier 

  context-free syntax
    MemberDeclaration+ -> MemberDeclarationList

  context-free syntax
    TypeSpecifier {MemberDeclarator ","}+ ";" 		    -> MemberDeclaration 
    TypeQualifierList {MemberIdentifierDeclarator ","}+ ";" -> MemberDeclaration 

   %% MemberDeclaringList ";"        -> MemberDeclaration 
   %% MemberDefaultDeclaringList ";" -> MemberDeclaration 

  %%context-free syntax
  %%  TypeQualifierList MemberIdentifierDeclarator  -> MemberDefaultDeclaringList {cons("TypeQualifierList-MemberIdentifierDeclarator")}
  %%  MemberDefaultDeclaringList "," MemberIdentifierDeclarator -> MemberDefaultDeclaringList 

  %%context-free syntax
  %%  TypeSpecifier MemberDeclarator           -> MemberDeclaringList {cons("TypeSpecifier-MemberDeclarator")}
  %%  MemberDeclaringList "," MemberDeclarator -> MemberDeclaringList 

  context-free syntax
    IdentifierDeclarator BitFieldSizeOpt -> MemberDeclarator 
    BitFieldSize                         -> MemberDeclarator

   context-free syntax
    IdentifierDeclarator BitFieldSizeOpt -> MemberIdentifierDeclarator 
    BitFieldSize                         -> MemberIdentifierDeclarator

  context-free syntax
    BitFieldSize? -> BitFieldSizeOpt

  context-free syntax
    ":" Expression -> BitFieldSize 

  context-free syntax
    "enum" IdentifierOrTypedefName? "{" {Enumerator ","}+ "}" -> EnumSpecifier 
    "enum" IdentifierOrTypedefName                         -> EnumSpecifier 

  context-free syntax
    IdentifierOrTypedefName EnumeratorValue? -> Enumerator 


  context-free syntax
    "=" Expression -> EnumeratorValue 

  context-free syntax
    ParameterList           -> ParameterTypeList
    ParameterList "," "..." -> ParameterTypeList 

  context-free syntax
    {ParameterDeclaration ","}+ -> ParameterList

  context-free syntax
    (DeclarationSpecifier | TypeSpecifier)  
    (AbstractDeclarator | IdentifierDeclarator | ParameterTypedefDeclarator)?
		-> ParameterDeclaration 

    (DeclarationQualifierList | TypeQualifierList)
    (AbstractDeclarator | IdentifierDeclarator)? -> ParameterDeclaration 

  context-free syntax
    {IDENTIFIER ","}+ -> IdentifierList

  context-free syntax
    IDENTIFIER  -> IdentifierOrTypedefName
    TypedefName -> IdentifierOrTypedefName

  context-free syntax
    (TypeSpecifier | TypeQualifierList) AbstractDeclarator? -> TypeName 

  context-free syntax
    "=" Initializer -> InitializerOpt 

  context-free syntax
    "{" {Initializer ","}+ ","? "}" -> Initializer 
    Expression                      -> Initializer

