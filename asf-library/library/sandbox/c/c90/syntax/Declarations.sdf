%% ---------- ---------- ----------
%% ANSI X3.159-1989
%% ---------- ---------- ----------
%% page 58 line 16
%% A declaration shall declare at least a declarator, a tag, or the members of an enumeration
%% ---------- ---------- ----------
module languages/c90/syntax/Declarations

imports languages/c90/syntax/Expressions
exports
	sorts Declaration DeclarationSpecifiers Declarator TypeName

	sorts InitDeclarator StorageClassSpecifier TypeSpecifier TypeQualifier StructDeclaration
	sorts StructDeclarator Enumerator DirectDeclarator Pointer ParameterTypeList ParameterDeclaration 
	sorts IdentifierList AbstractDeclarator DirectAbstractDeclarator TypedefName Initializer

	context-free syntax
		DeclarationSpecifiers  ";"					-> Declaration
		DeclarationSpecifiers { InitDeclarator "," }+ ";"		-> Declaration {prefer}

	context-free syntax
		(StorageClassSpecifier | TypeSpecifier | TypeQualifier)+ 	-> DeclarationSpecifiers

	context-free syntax
		Declarator						-> InitDeclarator
		Declarator "=" Initializer					-> InitDeclarator

	context-free syntax
		"typedef" 						-> StorageClassSpecifier
		"extern" 						-> StorageClassSpecifier
		"static"							-> StorageClassSpecifier
		"auto"							-> StorageClassSpecifier
		"register" 						-> StorageClassSpecifier

	context-free syntax
		"void"							-> TypeSpecifier
		"char"							-> TypeSpecifier
		"short"							-> TypeSpecifier
		"int"							-> TypeSpecifier
		"long"							-> TypeSpecifier
		"float"							-> TypeSpecifier
		"double"							-> TypeSpecifier
		"signed"							-> TypeSpecifier
		"unsigned"						-> TypeSpecifier
%%		"struct"|"union" Identifier? "{" StructDeclaration+ "}"	-> TypeSpecifier {cons("struct-or-union-specifier-1")}
		"struct"|"union" Identifier "{" StructDeclaration+ "}"	-> TypeSpecifier {cons("struct-or-union-specifier-1")}
		"struct"|"union" "{" StructDeclaration+ "}"			-> TypeSpecifier {cons("struct-or-union-specifier-2")}
		"struct"|"union" Identifier				-> TypeSpecifier {cons("struct-or-union-specifier-3")}
%%		"enum" Identifier? "{" { Enumerator "," }+ "}" 		-> TypeSpecifier {cons("enum-specifier-1")}
		"enum" Identifier "{" { Enumerator "," }+ "}" 		-> TypeSpecifier {cons("enum-specifier-1")}
		"enum" "{" { Enumerator "," }+ "}" 				-> TypeSpecifier {cons("enum-specifier-2")}
		"enum" Identifier 					-> TypeSpecifier {cons("enum-specifier-3")}
		TypedefName						-> TypeSpecifier

	context-free syntax
		"const"							-> TypeQualifier
		"volatile" 						-> TypeQualifier

	context-free syntax
		(TypeSpecifier | TypeQualifier)+ { StructDeclarator "," }+ ";"	-> StructDeclaration

	context-free syntax
		Declarator						-> StructDeclarator
		":" ConstantExpression					-> StructDeclarator {cons("unnamed-bitfield")}
		Declarator ":" ConstantExpression				-> StructDeclarator {cons("bitfield")}

	context-free syntax
		EnumerationConstant 					-> Enumerator
		EnumerationConstant "=" ConstantExpression			-> Enumerator

	context-free syntax
		Pointer DirectDeclarator 					-> Declarator
		DirectDeclarator 						-> Declarator

	context-free syntax
		Identifier						-> DirectDeclarator {category("Identifier")}
		"(" Declarator ")"					-> DirectDeclarator
		DirectDeclarator "["  "]"					-> DirectDeclarator
		DirectDeclarator "[" ConstantExpression "]"			-> DirectDeclarator
		DirectDeclarator "(" ParameterTypeList ")"			-> DirectDeclarator
		DirectDeclarator "(" ")"					-> DirectDeclarator
		DirectDeclarator "(" IdentifierList ")"			-> DirectDeclarator

	context-free syntax
		("*" TypeQualifier*)+					-> Pointer

	context-free syntax
		{ParameterDeclaration ","}+				-> ParameterTypeList
		{ParameterDeclaration ","}+ "," "..." 			-> ParameterTypeList

	context-free syntax
		DeclarationSpecifiers Declarator 				-> ParameterDeclaration
		DeclarationSpecifiers AbstractDeclarator			-> ParameterDeclaration
		DeclarationSpecifiers 					-> ParameterDeclaration {cons("parameter-declaration-type")}

	context-free syntax
		{Identifier ","}+						-> IdentifierList

	context-free syntax
		(TypeSpecifier | TypeQualifier)+ AbstractDeclarator?		-> TypeName

	context-free syntax
		Pointer							-> AbstractDeclarator
		Pointer? DirectAbstractDeclarator				-> AbstractDeclarator

	context-free syntax
		"(" AbstractDeclarator ")"					-> DirectAbstractDeclarator
		DirectAbstractDeclarator? "[" ConstantExpression? "]" 	-> DirectAbstractDeclarator
		DirectAbstractDeclarator? "(" ParameterTypeList? ")" 		-> DirectAbstractDeclarator

	context-free syntax
		Identifier						-> TypedefName {category("MetaKeyword")}

	context-free syntax
		AssignmentExpression					-> Initializer
		"{" {Initializer ","}+ "}"					-> Initializer
		"{" {Initializer ","}+ "," "}"				-> Initializer
