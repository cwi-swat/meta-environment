equations

/* -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
	MAIN
   -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- */

/*
[Main]	start(TranslationUnit, $translationunit) = start(<TranslationUnit, BoolCon>, disambiguate($translationunit))

[]	<$translationunit1, <$symboltable1, $valid, $ambcnt> > := disambiguate($translationunit,<{},true, 0>, <{},get-location($translationunit),"",false>)
	====
	disambiguate($translationunit)	=  <$translationunit1,  $valid>
*/
[Main]	start(TranslationUnit, $translationunit) = start(<TranslationUnit, Result>, disambiguate($translationunit))

[]	disambiguate($translationunit)	= disambiguate($translationunit,<{},true, 0>, <{},get-location($translationunit),"object",false>)

/*
[Main]	<$translationunit1, $result> := disambiguate($translationunit,<{},{},true, 0>, <{},get-location($translationunit),"",false>)
	====
	start(TranslationUnit, $translationunit) = start(<TranslationUnit, Result>, <$translationunit1,<{},{},true, 0> >)


[]	<$translationunit1, $result> 	:= disambiguate($translationunit,<{},{},true, 0>, <{},get-location($translationunit),"",false>)
	====
	disambiguate($translationunit)	= <$translationunit
*/

/* -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
	SCOPES
   -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- */

/* functiondefinition */

[]	$declarationspecifiers? $declarator $declaration* $compoundstatement 				:= $functiondefinition,
	<$declarationspecifiers?1 $declarator1, <$symboltable3, true, $ambcnt1> >			:= disambiguate($declarationspecifiers? $declarator , <$symboltable1, true, $ambcnt>, <$symboltable, $scope, "object", true>),
	<$declaration*1 $compoundstatement1, <$symboltable5, $valid2, $ambcnt2> >			:= disambiguate($declaration* $compoundstatement, <$symboltable3, true, $ambcnt1>, <$symboltable, $scope, "object", false>)
	====
	disambiguate($functiondefinition, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = 
		<$declarationspecifiers?1 $declarator1 $declaration*1 $compoundstatement1, <$symboltable3, true, $ambcnt1> >

/* page 69 line 03 */
[]	$declarationspecifiers? ($declarator) $declaration* $compoundstatement 		:= $functiondefinition
	====
	disambiguate($functiondefinition, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = 
		<$functiondefinition, <$symboltable1, false, 2000> >

/* compoundstatement */

[c-02]	{ $declaration* $statement* }							:= $compoundstatement,
	<$declaration*1 $statement*1, <$symboltable3, $valid, $ambcnt1> >			:= disambiguate($declaration* $statement*, <{}, true, $ambcnt>, <merge-symboltables($symboltable, $symboltable1), get-location($compoundstatement), $decltype, $function>)
	====
	disambiguate($compoundstatement, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)=
		<{$declaration*1 $statement*1}, <$symboltable1, $valid, $ambcnt1 > >

/*
[c-02]	$directdeclarator1( $parametertypelist ) 				:= $directdeclarator,
	<$directdeclarator1, <$symboltable3, $valid1, $ambcnt1> >		:= disambiguate($directdeclarator1, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, false>),
	<$parametertypelist1, <$symboltable5, true, $ambcnt2> >		:= disambiguate($parametertypelist, <{}, true, $ambcnt1>, <merge-symboltables($symboltable, $symboltable3), get-location($parametertypelist), $decltype, false>)
	====
	disambiguate($directdeclarator, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, false>)=
		<$directdeclarator1( $parametertypelist1 ), <$symboltable3, true, $ambcnt2> >
*/
/* -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
	INFO
   -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- */

/* DECLARATION */
/* inform if the declaration is a typedef declaration or not */
/* ugly because you cannot choose to continue in a break traversal */
/* page 21 line 42: Any other identifier has scope that begins just after the completion of its declarator */


[c-01]	$declarationspecifiers $initdeclarator+ ;			:= $declaration,
	<$declarationspecifiers1 $initdeclarator+1, $result1>		:= disambiguate($declarationspecifiers $initdeclarator+, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, check-typedef($declarationspecifiers), $function>)
	====
	disambiguate($declaration, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <$declarationspecifiers1 $initdeclarator+1;, $result1>

[c-01]	$declarationspecifiers $declarator ;			:= $declaration,
	<$declarationspecifiers1 $declarator1, $result1>		:= disambiguate($declarationspecifiers $declarator, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, check-typedef($declarationspecifiers), $function>)
	====
	disambiguate($declaration, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <$declarationspecifiers1 $declarator1;, $result1>

/* -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
	GATHER
   -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- */

/* DIRECTDECLARATOR	- is a definition for either a typedefname or an objectname */

/* struct 	*/

[]	$identifier	:= $directdeclarator,
	$record		:= <unparse-to-string($identifier), get-location($identifier), "objectname", "def", "struct-member", $scope>
	====
	disambiguate($directdeclarator, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, "struct", $function>) = <$directdeclarator, <add-record($record, $symboltable1), true, $ambcnt> >

/* object	*/

[a]	$identifier	:= $directdeclarator,
	$record		:= <unparse-to-string($identifier), get-location($identifier), "objectname", "def", "ordinary-identifier", $scope>
	====
	disambiguate($directdeclarator, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, "object", $function>) = <$directdeclarator, <add-record($record, $symboltable1), true, $ambcnt> >

/* typedef 	*/

[b]	$identifier	:= $directdeclarator,
	$record		:= <unparse-to-string($identifier), get-location($identifier), "typedefname", "def", "ordinary-identifier", $scope>
	====
	disambiguate($directdeclarator, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, "typedef", $function>) = <$directdeclarator, <add-record($record, $symboltable1), true, $ambcnt> >

/* ENUMERATOR 		- add enumerationconstants */

[c]	$identifier 	:= $enumerator,
	$record 		:= <unparse-to-string($identifier), get-location($identifier), "enumerationconstant", "def", "ordinary-identifier", $scope>
	====
	disambiguate($enumerator, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <$enumerator, <add-record($record,$symboltable1), true, $ambcnt> >

/* ENUMERATOR		
	page 21 line 39: Each enumeration constant has scope that begins just after the appearance of the its defining enumerator in an enumerator list */

[d]	$identifier = $constantexpression	:= $enumerator,
	<$constantexpression1, <$symboltable3, $valid1, $ambcnt1> >:= disambiguate($constantexpression, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>),
	$record 		:= <unparse-to-string($identifier), get-location($identifier), "enumerationconstant", "def", "ordinary-identifier", $scope>
	====
	disambiguate($enumerator, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <$enumerator, <add-record($record,$symboltable3), $valid1, $ambcnt1> >


/* -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
	The 3 ambiguities
   -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- */

/* TYPEDEFNAME 	CORRECT */

[zz]	$identifier 		:= $typedefname,
	"typedefname"		== find-type(unparse-to-string($identifier), "ordinary-identifier", merge-symboltables($symboltable, $symboltable1)),
	$record 			:= <unparse-to-string($identifier), get-location($identifier), "typedefname", "use", "ordinary-identifier", $scope>
	====
	disambiguate($typedefname, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = 	<$typedefname, <add-record($record,$symboltable1), true, $ambcnt> >

/* TYPEDEFNAME 	FALSE NODE */

[za]	$identifier 		:= $typedefname,
	"typedefname"		!= find-type(unparse-to-string($identifier), "ordinary-identifier", merge-symboltables($symboltable, $symboltable1))
	====
	disambiguate($typedefname, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = 	<$typedefname, <$symboltable1, false, 20> >

/* UNARYEXPRESSION 	OBJECT			CORRECT*/

[zb]	$identifier 		:= $unaryexpression,
	"objectname"		== find-type(unparse-to-string($identifier), "ordinary-identifier", merge-symboltables($symboltable, $symboltable1)),
	$record 			:= <unparse-to-string($identifier), get-location($identifier), "objectname", "use", "ordinary-identifier", $scope>
	====
	disambiguate($unaryexpression, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <$unaryexpression, <add-record($record,$symboltable1), true, $ambcnt> >

/* UNARYEXPRESSION 	OBJECT			FALSE NODE*/

[zc]	$identifier 		:= $unaryexpression,
	"objectname"		!= find-type(unparse-to-string($identifier), "ordinary-identifier", merge-symboltables($symboltable, $symboltable1))
	====
	disambiguate($unaryexpression, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <$unaryexpression, <$symboltable1, false, 30> >

/* UNARYEXPRESSION 	ENUMERATIONCONSTANT	CORRECT*/

[zd]	$enumerationconstant	:= $unaryexpression,
	$identifier		:= $enumerationconstant,
	"enumerationconstant"	== find-type(unparse-to-string($identifier), "ordinary-identifier", merge-symboltables($symboltable, $symboltable1)),
	$record 			:= <unparse-to-string($identifier), get-location($identifier), "enumerationconstant", "use", "ordinary-identifier", $scope>
	====
	disambiguate($unaryexpression, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <$unaryexpression, <add-record($record,$symboltable1), true, $ambcnt> >

/* UNARYEXPRESSION 	ENUMERATIONCONSTANT	FALSE NODE*/

[]	$enumerationconstant	:= $unaryexpression,
	$identifier		:= $enumerationconstant,
	"enumerationconstant"	!= find-type(unparse-to-string($identifier), "ordinary-identifier", merge-symboltables($symboltable, $symboltable1))
	====
	disambiguate($unaryexpression, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <$unaryexpression, <$symboltable1, false, 40> >


/* PARAMETERS for a function				FALSE NODE*/
/*
[]	$directdeclarator1 ($parametertypelist)	:= $directdeclarator
	====
	disambiguate($directdeclarator, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, false>) = 
		<$directdeclarator, <$symboltable1, false, $ambcnt> >
*/
/*
[]	disambiguate($directdeclarator1 ($parametertypelist), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, false>) = 
		<$directdeclarator1 ($parametertypelist), <$symboltable1, false, $ambcnt> >
*/

/*
[]	$declarationspecifiers	:= $parameterdeclaration,
	void			!= $declarationspecifiers
	====
	disambiguate($parameterdeclaration, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, true>) = 
		<$parameterdeclaration, <$symboltable1, false, $ambcnt> >
*/

/* no IDENTIFIERLIST for a prototype				FALSE NODE*/
/* no PARAMETERTYPELIST for a function					*/

[]	disambiguate($directdeclarator ($parametertypelist), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, true>) = 
		<$directdeclarator ($parametertypelist), <$symboltable1, false, 1000> >

[]	disambiguate($directdeclarator ($identifierlist), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, false>) = 
		<$directdeclarator ($identifierlist), <$symboltable1, false, 10000> >

/*
[]	$directdeclarator1 ($identifierlist)	:= $directdeclarator
	====
	disambiguate($directdeclarator, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, true>) = 
		<$directdeclarator, <$symboltable1, false, $ambcnt> >
*/

/* structdeclaration					FALSE NODE*/
/*
[]	$typespecifierorqualifier+ $typedefname : $constantexpression, $structdeclarator* ; := $structdeclaration2,
	$identifier 			:= $typedefname,
	$idtype				:= find-type(unparse-to-string($identifier), "ordinary-identifier", merge-symboltables($symboltable, $symboltable1)),
	<$structdeclaration3, $error*1>	:= disambiguate-node(amb($structdeclaration1, $structdeclaration2), get-location($identifier), $idtype, $error*)
	====
	disambiguate(amb($structdeclaration1, $structdeclaration2), <$symboltable1, $error*>, <$symboltable, $scope, $decltype, $function>) =
		disambiguate($structdeclaration3, <$symboltable1, $error*1>, <$symboltable, $scope, $decltype, $function>)
*/
/* -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
	DISAMBIGUATE
   -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- */

/* constant expression */

[e1]	<$constantexpression1, <$symboltable2, true, $ambcnt1> > :=	disambiguate($constantexpression, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($constantexpression, $constantexpression*), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <$constantexpression1, <$symboltable2, true, $ambcnt1+1> >

[f]	<$constantexpression1, <$symboltable2, false, $ambcnt1> > :=	disambiguate($constantexpression, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($constantexpression, $constantexpression+), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = disambiguate(amb($constantexpression+), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)

[g]	<$constantexpression1, <$symboltable2, false, $ambcnt1> > :=	disambiguate($constantexpression, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($constantexpression), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <amb($constantexpression), <$symboltable1, false, $ambcnt> >


/* assignment expression */

[]	<$assignmentexpression1, <$symboltable2, true, $ambcnt1> > :=	disambiguate($assignmentexpression, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($assignmentexpression, $assignmentexpression*), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <$assignmentexpression1, <$symboltable2, true, $ambcnt1+1> >

[]	<$assignmentexpression1, <$symboltable2, false, $ambcnt1> > := disambiguate($assignmentexpression, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($assignmentexpression, $assignmentexpression+), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = disambiguate(amb($assignmentexpression+), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)

[]	<$assignmentexpression1, <$symboltable2, false, $ambcnt1> > := disambiguate($assignmentexpression, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($assignmentexpression), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <amb($assignmentexpression), <$symboltable1, false, $ambcnt> >

/* unary expression */

[]	<$unaryexpression1, <$symboltable2, true, $ambcnt1> > :=	disambiguate($unaryexpression, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($unaryexpression, $unaryexpression*), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <$unaryexpression1, <$symboltable2, true, $ambcnt1+1> >

[]	<$unaryexpression1, <$symboltable2, false, $ambcnt1> > :=	disambiguate($unaryexpression, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($unaryexpression, $unaryexpression+), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = disambiguate(amb($unaryexpression+), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)

[]	<$unaryexpression1, <$symboltable2, false, $ambcnt1> > :=	disambiguate($unaryexpression, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($unaryexpression), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <amb($unaryexpression), <$symboltable1, false, $ambcnt> >

/* directdeclarator */

[]	<$directdeclarator1, <$symboltable2, true, $ambcnt1> > := disambiguate($directdeclarator, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($directdeclarator, $directdeclarator*), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <$directdeclarator1, <$symboltable2, true, $ambcnt1+1> >

[]	<$directdeclarator1, <$symboltable2, false, $ambcnt> > := disambiguate($directdeclarator, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($directdeclarator, $directdeclarator+), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = disambiguate(amb($directdeclarator+), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)

[]	<$directdeclarator1, <$symboltable2, false, $ambcnt> > := disambiguate($directdeclarator, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($directdeclarator), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <amb($directdeclarator), <$symboltable1, false, $ambcnt> >

/* compoundstatement */

[h]	<$compoundstatement1, <$symboltable2, true, $ambcnt1> > :=	disambiguate($compoundstatement, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($compoundstatement, $compoundstatement*), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <$compoundstatement1, <$symboltable2, true, $ambcnt1+1> >

[i]	<$compoundstatement1, <$symboltable2, false, $ambcnt1> > :=	disambiguate($compoundstatement, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($compoundstatement, $compoundstatement+), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = disambiguate(amb($compoundstatement+), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)

[j]	<$compoundstatement1, <$symboltable2, false, $ambcnt1> > :=	disambiguate($compoundstatement, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($compoundstatement), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <amb($compoundstatement), <$symboltable1, false, $ambcnt> >

/* structdeclaration */

[k]	<$structdeclaration1, <$symboltable2, true, $ambcnt1> > := disambiguate($structdeclaration, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($structdeclaration, $structdeclaration*), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <$structdeclaration1, <$symboltable2, true, $ambcnt1+1> >

[l]	<$structdeclaration1, <$symboltable2, false, $ambcnt1> > := disambiguate($structdeclaration, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($structdeclaration, $structdeclaration+), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = disambiguate(amb($structdeclaration+), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)

[m]	<$structdeclaration1, <$symboltable2, false, $ambcnt1> > := disambiguate($structdeclaration, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($structdeclaration), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <amb($structdeclaration), <$symboltable1, false, $ambcnt> >

/* parameterdeclaration */

[n]	<$parameterdeclaration1, <$symboltable2, true, $ambcnt1> > :=	disambiguate($parameterdeclaration, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($parameterdeclaration, $parameterdeclaration*), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <$parameterdeclaration1, <$symboltable2, true, $ambcnt1+1> >

[o]	<$parameterdeclaration1, <$symboltable2, false, $ambcnt1> > :=	disambiguate($parameterdeclaration, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($parameterdeclaration, $parameterdeclaration+), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = disambiguate(amb($parameterdeclaration+), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)

[p]	<$parameterdeclaration1, <$symboltable2, false, $ambcnt1> > :=	disambiguate($parameterdeclaration, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($parameterdeclaration), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <amb($parameterdeclaration), <$symboltable1, false, $ambcnt> >

/* declaration */

[q]	<$declaration1, <$symboltable2, true, $ambcnt1> > :=	disambiguate($declaration, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($declaration, $declaration*), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <$declaration1, <$symboltable2, true, $ambcnt1+1> >

[r]	<$declaration1, <$symboltable2, false, $ambcnt1> > :=	disambiguate($declaration, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($declaration, $declaration+), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = disambiguate(amb($declaration+), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)

[s]	<$declaration1, <$symboltable2, false, $ambcnt1> > :=	disambiguate($declaration, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($declaration), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <amb($declaration), <$symboltable1, false, $ambcnt> >

/* functiondefinition */

[t]	<$functiondefinition1, <$symboltable2, true, $ambcnt1> > :=	disambiguate($functiondefinition, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($functiondefinition, $functiondefinition*), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <$functiondefinition1, <$symboltable2, true, $ambcnt1+1> >

[u]	<$functiondefinition1, <$symboltable2, false, $ambcnt1> > :=	disambiguate($functiondefinition, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($functiondefinition, $functiondefinition+), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = disambiguate(amb($functiondefinition+), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)

[v]	<$functiondefinition1, <$symboltable2, false, $ambcnt1> > :=	disambiguate($functiondefinition, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($functiondefinition), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <amb($functiondefinition), <$symboltable1, false, 3000> >

/* -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
	FUNCTION
   -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- */

[w]		check-typedef($specifiers*1 typedef $specifiers*2)		= "typedef"
[default-l]	check-typedef($specifiers+) 				= "object"
