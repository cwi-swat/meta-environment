equations

/* -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
	MAIN
   -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- */

[Main]	start(TranslationUnit, $translationunit) = start(<TranslationUnit, BoolCon>, disambiguate($translationunit))

[]	<$translationunit1, <$symboltable1, $valid, $ambcnt> > := disambiguate($translationunit,<{},true, 0>, <{},get-location($translationunit),"",false>)
	====
	disambiguate($translationunit)	=  <$translationunit1,  $valid>

/*
[Main]	<$translationunit1, $result> := disambiguate($translationunit,<{},{},true, 0>, <{},get-location($translationunit),"",false>)
	====
	start(TranslationUnit, $translationunit) = start(<TranslationUnit, Result>, <$translationunit1,<{},{},true, 0> >)
*/
/*
[]	<$translationunit1, $result> 	:= disambiguate($translationunit,<{},{},true, 0>, <{},get-location($translationunit),"",false>)
	====
	disambiguate($translationunit)	= $translationunit
*/

/* -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
	SCOPES
   -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- */

/* functiondefinition */

[]	$declarationspecifiers? $declarator $declaration* $compoundstatement 				:= $functiondefinition,
	<$declarationspecifiers?1 $declarator1, <$symboltable3, $valid1, $ambcnt1> >			:= disambiguate($declarationspecifiers? $declarator , <$symboltable1, true, $ambcnt>, <$symboltable, $scope, "object", true>),
	<$declaration*1 $compoundstatement1, <$symboltable5, $valid2, $ambcnt2> >		:= disambiguate($declaration* $compoundstatement, <$symboltable3, $valid1, $ambcnt1>, <$symboltable, $scope, "", false>)
	====
	disambiguate($functiondefinition, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = 
		<$declarationspecifiers?1 $declarator1 $declaration*1 $compoundstatement1, <$symboltable3, $valid1, $ambcnt1> >
/*
[]	$declarationspecifiers? $declarator $declaration* $compoundstatement 				:= $functiondefinition,
	<$declarationspecifiers?1 $declarator1, <$symboltable5, $symboltable6, $valid, $ambcnt1 > >	:= disambiguate($declarationspecifiers? $declarator, <{}, {}, true, $ambcnt>, <merge-symboltables($symboltable, $symboltable1), $scope, $decltype, true>),
	<$declaration*1 $compoundstatement1, <$symboltable7, $symboltable8, $valid1, $ambcnt2 > >		:= disambiguate($declaration* $compoundstatement, <$symboltable5, $symboltable6, true, $ambcnt1 >, <merge-symboltables($symboltable, $symboltable1), get-location($functiondefinition), $decltype, false>)
	====
	disambiguate($functiondefinition, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = 
		<$declarationspecifiers?1 $declarator1 $declaration*1 $compoundstatement1, <$symboltable1, merge-symboltables($symboltable2, merge-symboltables($symboltable7, $symboltable8)), $valid1, $ambcnt2 > >
*/
/* compoundstatement */
/*
[c-02]	{ $declaration* $statement* }							:= $compoundstatement,
	<$declaration*1 $statement*1, <$symboltable3, $valid, $ambcnt1> >		:= disambiguate($declaration* $statement*, <{}, {}, true, $ambcnt>, <merge-symboltables($symboltable, $symboltable1), get-location($compoundstatement), $decltype, $function>)
	====
	disambiguate($compoundstatement, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)=
		<{$declaration*1 $statement*1}, <$symboltable1, merge-symboltables($symboltable2, merge-symboltables($symboltable3, $symboltable4)), $valid, $ambcnt1 > >
*/
/* -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
	INFO
   -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- */

/* DECLARATION */
/* inform if the declaration is a typedef declaration or not */
/* ugly because you cannot choose to continue in a break traversal */
/* page 21 line 42: Any other identifier has scope that begins just after the completion of its declarator */


[c-01]	$declarationspecifiers $initdeclarator+ ;			:= $declaration,
	<$declarationspecifiers1 $initdeclarator+1, $result1>		:= disambiguate($declarationspecifiers $initdeclarator+, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, check-typedef($declarationspecifiers), $function>)
	====
	disambiguate($declaration, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <$declarationspecifiers1 $initdeclarator+1;, $result1>

[c-01]	$declarationspecifiers $declarator ;			:= $declaration,
	<$declarationspecifiers1 $declarator1, $result1>		:= disambiguate($declarationspecifiers $declarator, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, "object", $function>)
	====
	disambiguate($declaration, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <$declarationspecifiers1 $declarator1;, $result1>

/* -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
	GATHER
   -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- */

/* DIRECTDECLARATOR	- is a definition for either a typedefname or an objectname */

/* struct 	*/

[]	$identifier	:= $directdeclarator,
	$record		:= <unparse-to-string($identifier), get-location($identifier), "objectname", "def", "struct-member", $scope>
	====
	disambiguate($directdeclarator, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, "struct", $function>) = <$directdeclarator, <add-record($record, $symboltable1), true, $ambcnt> >

/* object	*/

[]	$identifier	:= $directdeclarator,
	$record		:= <unparse-to-string($identifier), get-location($identifier), "objectname", "def", "ordinary-identifier", $scope>
	====
	disambiguate($directdeclarator, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, "object", $function>) = <$directdeclarator, <add-record($record, $symboltable1), true, $ambcnt> >

/* typedef 	*/

[]	$identifier	:= $directdeclarator,
	$record		:= <unparse-to-string($identifier), get-location($identifier), "typedefname", "def", "ordinary-identifier", $scope>
	====
	disambiguate($directdeclarator, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, "typedef", $function>) = <$directdeclarator, <add-record($record, $symboltable1), true, $ambcnt> >

/* ENUMERATOR 		- add enumerationconstants */

[]	$identifier 	:= $enumerator,
	$record 		:= <unparse-to-string($identifier), get-location($identifier), "enumerationconstant", "def", "ordinary-identifier", $scope>
	====
	disambiguate($enumerator, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <$enumerator, <add-record($record,$symboltable1), true, $ambcnt> >

/* ENUMERATOR		
	page 21 line 39: Each enumeration constant has scope that begins just after the appearance of the its defining enumerator in an enumerator list */

[]	$identifier = $constantexpression	:= $enumerator,
	<$constantexpression1, <$symboltable3, $valid1, $ambcnt1> >:= disambiguate($constantexpression, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>),
	$record 		:= <unparse-to-string($identifier), get-location($identifier), "enumerationconstant", "def", "ordinary-identifier", $scope>
	====
	disambiguate($enumerator, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <$enumerator, <add-record($record,$symboltable3), $valid1, $ambcnt1> >


/* -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
	The 3 ambiguities
   -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- */

/* TYPEDEFNAME 	CORRECT */

[]	$identifier 		:= $typedefname,
	"typedefname"		== find-type(unparse-to-string($identifier), "ordinary-identifier", merge-symboltables($symboltable, $symboltable1)),
	$record 			:= <unparse-to-string($identifier), get-location($identifier), "typedefname", "use", "ordinary-identifier", $scope>
	====
	disambiguate($typedefname, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = 	<$typedefname, <add-record($record,$symboltable1), true, $ambcnt> >

/* TYPEDEFNAME 	FALSE NODE */

[]	$identifier 		:= $typedefname,
	"typedefname"		!= find-type(unparse-to-string($identifier), "ordinary-identifier", merge-symboltables($symboltable, $symboltable1))
	====
	disambiguate($typedefname, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = 	<$typedefname, <$symboltable1, false, $ambcnt> >

/* UNARYEXPRESSION 	OBJECT			CORRECT*/

[]	$identifier 		:= $unaryexpression,
	"objectname"		== find-type(unparse-to-string($identifier), "ordinary-identifier", merge-symboltables($symboltable, $symboltable1)),
	$record 			:= <unparse-to-string($identifier), get-location($identifier), "objectname", "use", "ordinary-identifier", $scope>
	====
	disambiguate($unaryexpression, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <$unaryexpression, <add-record($record,$symboltable1), true, $ambcnt> >

/* UNARYEXPRESSION 	OBJECT			FALSE NODE*/

[]	$identifier 		:= $unaryexpression,
	"objectname"		!= find-type(unparse-to-string($identifier), "ordinary-identifier", merge-symboltables($symboltable, $symboltable1))
	====
	disambiguate($unaryexpression, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <$unaryexpression, <$symboltable1, false, $ambcnt> >

/* UNARYEXPRESSION 	ENUMERATIONCONSTANT	CORRECT*/

[]	$enumerationconstant	:= $unaryexpression,
	$identifier		:= $enumerationconstant,
	"enumerationconstant"	== find-type(unparse-to-string($identifier), "ordinary-identifier", merge-symboltables($symboltable, $symboltable1)),
	$record 			:= <unparse-to-string($identifier), get-location($identifier), "enumerationconstant", "use", "ordinary-identifier", $scope>
	====
	disambiguate($unaryexpression, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <$unaryexpression, <add-record($record,$symboltable1), true, $ambcnt> >

/* UNARYEXPRESSION 	ENUMERATIONCONSTANT	FALSE NODE*/

[]	$enumerationconstant	:= $unaryexpression,
	$identifier		:= $enumerationconstant,
	"enumerationconstant"	!= find-type(unparse-to-string($identifier), "ordinary-identifier", merge-symboltables($symboltable, $symboltable1))
	====
	disambiguate($unaryexpression, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <$unaryexpression, <$symboltable1, false, $ambcnt> >


/* PARAMETERS for a function				FALSE NODE*/
/*
[]	$directdeclarator1 ($parametertypelist)	:= $directdeclarator
	====
	disambiguate($directdeclarator, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, false>) = 
		<$directdeclarator, <$symboltable1, false, $ambcnt> >
*/
/*
[]	disambiguate($directdeclarator1 ($parametertypelist), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, false>) = 
		<$directdeclarator1 ($parametertypelist), <$symboltable1, false, $ambcnt> >
*/

[]	$declarationspecifiers	:= $parameterdeclaration,
	void			!= $declarationspecifiers
	====
	disambiguate($parameterdeclaration, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, true>) = 
		<$parameterdeclaration, <$symboltable1, false, $ambcnt> >

/* IDENTIFIERLIST for a prototype				FALSE NODE*/

[]	disambiguate($directdeclarator1 ($identifierlist), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, true>) = 
		<$directdeclarator1 ($identifierlist), <$symboltable1, false, $ambcnt> >

/*
[]	$directdeclarator1 ($identifierlist)	:= $directdeclarator
	====
	disambiguate($directdeclarator, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, true>) = 
		<$directdeclarator, <$symboltable1, false, $ambcnt> >
*/

/* structdeclaration					FALSE NODE*/
/*
[]	$typespecifierorqualifier+ $typedefname : $constantexpression, $structdeclarator* ; := $structdeclaration2,
	$identifier 			:= $typedefname,
	$idtype				:= find-type(unparse-to-string($identifier), "ordinary-identifier", merge-symboltables($symboltable, $symboltable1)),
	<$structdeclaration3, $error*1>	:= disambiguate-node(amb($structdeclaration1, $structdeclaration2), get-location($identifier), $idtype, $error*)
	====
	disambiguate(amb($structdeclaration1, $structdeclaration2), <$symboltable1, $error*>, <$symboltable, $scope, $decltype, $function>) =
		disambiguate($structdeclaration3, <$symboltable1, $error*1>, <$symboltable, $scope, $decltype, $function>)
*/
/* -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
	DISAMBIGUATE
   -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- */

/* constant expression */

[]	<$constantexpression1, <$symboltable3, true, $ambcnt1> > :=	disambiguate($constantexpression, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($constantexpression, $constantexpression*), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <$constantexpression1, <$symboltable3, true, $ambcnt1+1> >

[]	<$constantexpression1, <$symboltable3, false, $ambcnt> > :=	disambiguate($constantexpression, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($constantexpression, $constantexpression+), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = disambiguate(amb($constantexpression+), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)

[]	<$constantexpression1, <$symboltable3, false, $ambcnt> > :=	disambiguate($constantexpression, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($constantexpression), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <amb($constantexpression), <$symboltable1, false, $ambcnt> >


/* unary expression */

[]	<$unaryexpression1, <$symboltable3, true, $ambcnt1> > :=	disambiguate($unaryexpression, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($unaryexpression, $unaryexpression*), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <$unaryexpression1, <$symboltable3, true, $ambcnt1+1> >

[]	<$unaryexpression1, <$symboltable3, false, $ambcnt> > :=	disambiguate($unaryexpression, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($unaryexpression, $unaryexpression+), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = disambiguate(amb($unaryexpression+), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)

[]	<$unaryexpression1, <$symboltable3, false, $ambcnt> > :=	disambiguate($unaryexpression, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($unaryexpression), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <amb($unaryexpression), <$symboltable1, false, $ambcnt> >

/* directdeclarator */

[]	<$directdeclarator1, <$symboltable3, true, $ambcnt1> > := disambiguate($directdeclarator, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($directdeclarator, $directdeclarator*), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <$directdeclarator1, <$symboltable3, true, $ambcnt1+1> >

[]	<$directdeclarator1, <$symboltable3, false, $ambcnt> > := disambiguate($directdeclarator, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($directdeclarator, $directdeclarator+), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = disambiguate(amb($directdeclarator+), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)

[]	<$directdeclarator1, <$symboltable3, false, $ambcnt> > := disambiguate($directdeclarator, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($directdeclarator), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <amb($directdeclarator), <$symboltable1, false, $ambcnt> >

/* compoundstatement */

[]	<$compoundstatement1, <$symboltable3, true, $ambcnt1> > :=	disambiguate($compoundstatement, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($compoundstatement, $compoundstatement*), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <$compoundstatement1, <$symboltable3, true, $ambcnt1+1> >

[]	<$compoundstatement1, <$symboltable3, false, $ambcnt> > :=	disambiguate($compoundstatement, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($compoundstatement, $compoundstatement+), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = disambiguate(amb($compoundstatement+), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)

[]	<$compoundstatement1, <$symboltable3, false, $ambcnt> > :=	disambiguate($compoundstatement, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($compoundstatement), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <amb($compoundstatement), <$symboltable1, false, $ambcnt> >

/* structdeclaration */

[]	<$structdeclaration1, <$symboltable3, true, $ambcnt1> > := disambiguate($structdeclaration, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($structdeclaration, $structdeclaration*), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <$structdeclaration1, <$symboltable3, true, $ambcnt1+1> >

[]	<$structdeclaration1, <$symboltable3, false, $ambcnt> > := disambiguate($structdeclaration, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($structdeclaration, $structdeclaration+), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = disambiguate(amb($structdeclaration+), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)

[]	<$structdeclaration1, <$symboltable3, false, $ambcnt> > := disambiguate($structdeclaration, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($structdeclaration), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <amb($structdeclaration), <$symboltable1, false, $ambcnt> >

/* parameterdeclaration */

[]	<$parameterdeclaration1, <$symboltable3, true, $ambcnt1> > :=	disambiguate($parameterdeclaration, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($parameterdeclaration, $parameterdeclaration*), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <$parameterdeclaration1, <$symboltable3, true, $ambcnt1+1> >

[]	<$parameterdeclaration1, <$symboltable3, false, $ambcnt> > :=	disambiguate($parameterdeclaration, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($parameterdeclaration, $parameterdeclaration+), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = disambiguate(amb($parameterdeclaration+), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)

[]	<$parameterdeclaration1, <$symboltable3, false, $ambcnt> > :=	disambiguate($parameterdeclaration, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($parameterdeclaration), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <amb($parameterdeclaration), <$symboltable1, false, $ambcnt> >

/* declaration */

[]	<$declaration1, <$symboltable3, true, $ambcnt1> > :=	disambiguate($declaration, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($declaration, $declaration*), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <$declaration1, <$symboltable3, true, $ambcnt1+1> >

[]	<$declaration1, <$symboltable3, false, $ambcnt> > :=	disambiguate($declaration, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($declaration, $declaration+), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = disambiguate(amb($declaration+), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)

[]	<$declaration1, <$symboltable3, false, $ambcnt> > :=	disambiguate($declaration, <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>)
	====
	disambiguate(amb($declaration), <$symboltable1, true, $ambcnt>, <$symboltable, $scope, $decltype, $function>) = <amb($declaration), <$symboltable1, false, $ambcnt> >


/* -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
	FUNCTION
   -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- */

[]		check-typedef($specifiers*1 typedef $specifiers*2)		= "typedef"
[default-l]	check-typedef($specifiers+) 				= "object"
