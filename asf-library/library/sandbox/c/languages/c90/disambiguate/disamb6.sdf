%% ---------- ---------- ---------- ----------
%% Part of the c89/c90 framework
%% ---------- ---------- ---------- ----------
module languages/c90/disambiguate/disamb6

%%----------
%% GRAMMARS
%%----------
imports languages/c90/syntax/TranslationUnit
imports languages/c90/disambiguate/symtable

%%----------
%% Utilities
%%----------
imports utilities/Parsing[Identifier]		%% for symboltable
imports utilities/PosInfo[Identifier]		%% for symboltable
imports utilities/PosInfo[TranslationUnit]		%% for symboltable (scoping)
imports utilities/PosInfo[FunctionDefinition]	%% for symboltable (scoping)
imports utilities/PosInfo[CompoundStatement]		%% for symboltable (scoping)
imports utilities/PosInfo[IdentifierList]		%% for symboltable (scoping)
imports utilities/PosInfo[ParameterTypeList]		%% for symboltable (scoping)

exports
	sorts Result Known Element
	context-free syntax
		"<" inscope:SymbolTable "," error:Error? ">"						-> Result
		"<" known:SymbolTable "," scope:Location "," decl-type:StrCon "," function:BoolCon ">"	-> Known
		"<" name:StrCon "," loc:Location ">"						-> Element

		dis-amb(TranslationUnit)		 			-> <TranslationUnit, Result>
		dis-amb(TranslationUnit, Result, Known) 			-> <TranslationUnit, Result>		{traversal(trafo, accu, break, top-down)}

		%% disamb
		dis-amb(ConstantExpression, Result, Known) 			-> <ConstantExpression, Result>		{traversal(trafo, accu, break, top-down)}
		dis-amb(AssignmentExpression, Result, Known) 		-> <AssignmentExpression, Result>		{traversal(trafo, accu, break, top-down)}
		dis-amb(UnaryExpression, Result, Known) 			-> <UnaryExpression, Result>		{traversal(trafo, accu, break, top-down)}
		dis-amb(DirectDeclarator, Result, Known) 			-> <DirectDeclarator, Result>		{traversal(trafo, accu, break, top-down)}
		dis-amb(CompoundStatement, Result, Known) 			-> <CompoundStatement, Result>		{traversal(trafo, accu, break, top-down)}
		dis-amb(StructDeclaration, Result, Known) 			-> <StructDeclaration, Result>		{traversal(trafo, accu, break, top-down)}
		dis-amb(ParameterDeclaration, Result, Known) 		-> <ParameterDeclaration, Result>		{traversal(trafo, accu, break, top-down)}
		dis-amb(Declaration, Result, Known) 			-> <Declaration, Result>			{traversal(trafo, accu, break, top-down)}
		dis-amb(FunctionDefinition, Result, Known) 			-> <FunctionDefinition, Result>		{traversal(trafo, accu, break, top-down)}

hiddens
	imports basic/Whitespace
	imports languages/generic-cpp/syntax/CommentsAsLayout

	context-free start-symbols TranslationUnit <TranslationUnit, Result>
	variables
		"$translationunit"		-> TranslationUnit

		%% dis-amb
		"$constantexpression+"		-> { ConstantExpression ","}+
		"$constantexpression*"		-> { ConstantExpression ","}*
		"$directdeclarator+"		-> { DirectDeclarator ","}+
		"$directdeclarator*"		-> { DirectDeclarator ","}*
		"$unaryexpression+"		-> { UnaryExpression ","}+
		"$unaryexpression*"		-> { UnaryExpression ","}*
		"$compoundstatement+"		-> { CompoundStatement ","}+
		"$compoundstatement*"		-> { CompoundStatement ","}*
		"$assignmentexpression+"		-> { AssignmentExpression ","}+
		"$assignmentexpression*"		-> { AssignmentExpression ","}*
		"$structdeclaration+"		-> { StructDeclaration ","}+
		"$structdeclaration*"		-> { StructDeclaration ","}*
		"$parameterdeclaration+"		-> { ParameterDeclaration ","}+
		"$parameterdeclaration*"		-> { ParameterDeclaration ","}*
		"$declaration+"			-> { Declaration ","}+
		"$declaration*"			-> { Declaration ","}*
		"$functiondefinition+"		-> { FunctionDefinition ","}+
		"$functiondefinition*"		-> { FunctionDefinition ","}*

		"$constantexpression"[0-9]*	-> ConstantExpression
		"$directdeclarator"[0-9]*		-> DirectDeclarator
		"$unaryexpression"[0-9]*		-> UnaryExpression
		"$compoundstatement"[0-9]*		-> CompoundStatement
		"$assignmentexpression"[0-9]*	-> AssignmentExpression
		"$structdeclaration"[0-9]*		-> StructDeclaration
		"$parameterdeclaration"[0-9]*	-> ParameterDeclaration
		"$declaration"[0-9]*		-> Declaration
		"$functiondefinition"[0-9]*	-> FunctionDefinition

		"$accu"[0-9]*			-> SymbolTable
		"$known"[0-9]*			-> SymbolTable
		"$record"			-> Record


		%% disamb
		"$scope"				-> Location
		"$decltype"			-> StrCon
		"$function"			-> BoolCon
		"$error"				-> Error
		"$error?"[0-9]*			-> Error?
		"$strcon"			-> StrCon
		"$location"			-> Location
		"$result"[0-9]*			-> Result
		"$known"[0-9]*			-> Known
