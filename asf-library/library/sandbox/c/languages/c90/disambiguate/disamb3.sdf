%% ---------- ---------- ---------- ----------
%% Part of the c89/c90 framework
%% ---------- ---------- ---------- ----------
module languages/c90/disambiguate/disamb3

%%----------
%% GRAMMARS
%%----------
imports languages/c90/syntax/TranslationUnit
imports languages/c90/disambiguate/symboltable

%%----------
%% Utilities
%%----------

imports utilities/Parsing[Identifier]		%% for symboltable
imports utilities/PosInfo[Identifier]		%% for symboltable
imports utilities/PosInfo[TranslationUnit]		%% for symboltable (scoping)
imports utilities/PosInfo[FunctionDefinition]	%% for symboltable (scoping)
imports utilities/PosInfo[CompoundStatement]		%% for symboltable (scoping)
imports utilities/PosInfo[IdentifierList]		%% for symboltable (scoping)
imports utilities/PosInfo[ParameterTypeList]		%% for symboltable (scoping)


exports
	sorts Result Known
	context-free syntax
		disambiguate1(TranslationUnit)					-> TranslationUnit
		disambiguate2(TranslationUnit)					-> (<TranslationUnit, BoolCon>)

		"<" inscope:SymbolTable "," notinscope:SymbolTable "," valid:BoolCon "," ambcnt:Integer ">"	-> Result
		"<" known:SymbolTable "," scope:Location "," decl-type:StrCon "," function:BoolCon ">"		-> Known

		disambiguate(TranslationUnit, Result, Known) 			-> <TranslationUnit, Result>			{traversal(trafo, accu, break, top-down)}
		disambiguate(FunctionDefinition, Result, Known) 			-> <FunctionDefinition, Result>			{traversal(trafo, accu, break, top-down)}
		disambiguate((DeclarationSpecifiers? Declarator), Result, Known) 	-> <(DeclarationSpecifiers? Declarator), Result>	{traversal(trafo, accu, break, top-down)}
		disambiguate((Declaration CompoundStatement), Result, Known) 		-> <(Declaration CompoundStatement), Result>	{traversal(trafo, accu, break, top-down)}

		%% INFO
		disambiguate(CompoundStatement, Result, Known) 			-> <CompoundStatement, Result>			{traversal(trafo, accu, break, top-down)}
		disambiguate((Declaration* Statement*), Result, Known) 		-> <(Declaration* Statement*), Result>		{traversal(trafo, accu, break, top-down)}
		disambiguate(ParameterDeclaration, Result, Known) 			-> <ParameterDeclaration, Result>			{traversal(trafo, accu, break, top-down)}

		%% INFO
		disambiguate(Declaration, Result, Known) 				-> <Declaration, Result>				{traversal(trafo, accu, break, top-down)}
		disambiguate(StructDeclaration, Result, Known) 			-> <StructDeclaration, Result>			{traversal(trafo, accu, break, top-down)}
		disambiguate((DeclarationSpecifiers { InitDeclarator "," }+), Result, Known) -> <(DeclarationSpecifiers { InitDeclarator "," }+), Result>	{traversal(trafo, accu, break, top-down)}


		%% DEFINITIONS
		disambiguate(DirectDeclarator, Result, Known) 	-> <DirectDeclarator, Result>	{traversal(trafo, accu, break, top-down)}
		disambiguate(Enumerator, Result, Known) 		-> <Enumerator, Result>		{traversal(trafo, accu, break, top-down)}
		disambiguate(ConstantExpression, Result, Known) 	-> <ConstantExpression, Result>	{traversal(trafo, accu, break, top-down)}

		%% USAGE		
		disambiguate(TypedefName, Result, Known) 		-> <TypedefName, Result>		{traversal(trafo, accu, break, top-down)}
		disambiguate(UnaryExpression, Result, Known) 	-> <UnaryExpression, Result>	{traversal(trafo, accu, break, top-down)}

		disambiguate(ParameterTypeList, Result, Known) 	-> <ParameterTypeList, Result>	{traversal(trafo, accu, break, top-down)}

		check-typedef(DeclarationSpecifiers)		-> StrCon

hiddens
	imports languages/c90/syntax/Whitespace
	imports languages/generic-cpp/syntax/CommentsAsLayout

	context-free start-symbols <TranslationUnit, Result> TranslationUnit <TranslationUnit, BoolCon>
	variables
		"$result"[0-9]*			-> Result
		"$known"				-> Known
		"$ambcnt"[0-9]*			-> Integer

		%% rstore
		"$location"[0-9]*			-> Location
		"$strcon"[0-9]*			-> StrCon

		%% symbol table
		"$record"			-> Record
		"$symboltable"[0-9]*		-> SymbolTable

		%% function arguments
		"$scope"				-> Location
		"$boolcon"[0-9]*			-> BoolCon
		"$function"			-> BoolCon
		"$decltype"			-> StrCon
		"$valid"[0-9]*			-> BoolCon

		%% scope
		"$translationunit"[0-9]*		-> TranslationUnit
		"$functiondefinition"[0-9]*	-> FunctionDefinition
		"$compoundstatement"[0-9]*		-> CompoundStatement
		"$declaration*"[0-9]*		-> Declaration*
		"$statement*"[0-9]*		-> Statement*

		"$identifier"			-> Identifier
		"$directdeclarator"[0-9]*		-> DirectDeclarator
		"$enumerator"			-> Enumerator
		"$constantexpression"[0-9]*	-> ConstantExpression

		%% definition
		"$declarationspecifiers"[0-9]*	-> DeclarationSpecifiers
		"$specifiers*"[0-9]*		-> (StorageClassSpecifier | TypeSpecifier | TypeQualifier)*
		"$specifier"			-> (StorageClassSpecifier | TypeSpecifier | TypeQualifier)
		"$specifiers+"[0-9]*		-> (StorageClassSpecifier | TypeSpecifier | TypeQualifier)+

		"$declaration"[0-9]*		-> Declaration
		"$initdeclarator+"[0-9]*		-> { InitDeclarator "," }+

		"$declarationspecifiers?"[0-9]*	-> DeclarationSpecifiers?
		"$declarator"[0-9]*		-> Declarator

		%% usage
		"$unaryexpression"[0-9]*		-> UnaryExpression
		"$typedefname"			-> TypedefName

		%% disambiguation
		"$constantexpression+"		-> { ConstantExpression ","}+
		"$constantexpression*"		-> { ConstantExpression ","}*
		"$directdeclarator+"		-> { DirectDeclarator ","}+
		"$directdeclarator*"		-> { DirectDeclarator ","}*
		"$unaryexpression+"		-> { UnaryExpression ","}+
		"$unaryexpression*"		-> { UnaryExpression ","}*
		"$compoundstatement+"		-> { CompoundStatement ","}+
		"$compoundstatement*"		-> { CompoundStatement ","}*
		"$structdeclaration+"		-> { StructDeclaration ","}+
		"$structdeclaration*"		-> { StructDeclaration ","}*
		"$parameterdeclaration+"		-> { ParameterDeclaration ","}+
		"$parameterdeclaration*"		-> { ParameterDeclaration ","}*
		"$declaration+"			-> { Declaration ","}+
		"$declaration*"			-> { Declaration ","}*
		"$functiondefinition+"		-> { FunctionDefinition ","}+
		"$functiondefinition*"		-> { FunctionDefinition ","}*

		"$structdeclaration"[0-9]*		-> StructDeclaration
		"$parameterdeclaration"[0-9]*	-> ParameterDeclaration

		%% 
		"$parametertypelist"[0-9]*		-> ParameterTypeList
		"$identifierlist"			-> IdentifierList

		"$enumerationconstant"		-> EnumerationConstant
