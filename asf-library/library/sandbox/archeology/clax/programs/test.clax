PROGRAM test ;

  (* read, sort and write an array of n numbers            *)
  (* this program shows the following features:            *)
  (*   addressing and alignment                            *)
  (*   procedure calls from main level, to a local, and    *)
  (*     to a global procedure                             *)
  (*   access to a global memory                           *)
  (*   access to local, global and intermediate variables  *)
  (*   recursion                                           *)
  (*   reading and writing of all types                    *)
  (*   integer to real conversion                          *)
  (*   integer to real arithmetic                          *)

DECLARE
  test : BOOLEAN;
  n    : INTEGER;
  a    : ARRAY [1..100] OF REAL;

  PROCEDURE read (VAR n: INTEGER;
                  VAR a: ARRAY [1..100] OF REAL);
  DECLARE
    i     : INTEGER;
  BEGIN
    WRITE ("Input, sort and output an array of real numbers \n");
    WRITE ("Test output? (T = yes, F = no): "); READ (test);
    WRITE ("Input n: "); READ (n);
    IF n > 100 THEN n := 100 END;
    i := 1;
    WHILE i <= n DO
      WRITE ("a["); WRITE(i); WRITE("] =?"); READ (a[i]);
      i := i + 1
    END (* ;error : WRITE ("error") -- is probably not intended *)
  END;

  (* write a [1..n] *)
  PROCEDURE write (m:INTEGER);
  BEGIN
    WRITE ("a ["); WRITE (m); WRITE ("] = "); WRITE (a [m]); WRITE ("\n");
    IF m < n THEN write (m + 1) END
  END;

  (* sort a [1..n] *)
  PROCEDURE sort (VAR a: ARRAY [1..100] OF REAL);
  DECLARE
    i : INTEGER;
    j : INTEGER;
    k : INTEGER;
    h : REAL;

    (* check order of a [1..n]  *)
    PROCEDURE check;
    DECLARE
      ok     : LABEL;
      error  : LABEL;
      end    : LABEL;
    BEGIN
      IF test THEN write (1) END;
      i := 1;
      WHILE TRUE DO
        IF i > n THEN GOTO ok END;
        IF a [i] > a [i+1] THEN GOTO error1 END;
        i := i + 1
      END;
      ok    : WRITE ("array is sorted correctly\n"); GOTO end;
      error : WRITE ("array is sorted NOT correctly\n"); GOTO end;
      end   : (* empty statement is part of syntax *)
  END;

  BEGIN  (* sort  *)
    i := 1;
    WHILE i < n DO
      write (1);
      j := i; k := i;
      WHILE j < n DO  (* a [k] = MIN a [i..j]  *)
        j := j + 1;
        IF a [j] < a [k]  THEN  k := j END
      END;
      h := a [i]; a [i] := a [k]; a [k] := h;
      i := i + 1
    END
  END;

  (* computes square numbers of numbers   *)
  (*   in interval [0 .. 1]               *)
  (* with step wide 0.01 times n          *)
  PROCEDURE square (n : INTEGER);
  DECLARE x    : REAL;
          step : REAL;
  BEGIN
    x := 0; step := n; step := step * 0.01;
    WHILE x < 1.0 DO
      WRITE (x); WRITE (" ^2 = "); WRITE (x * x); WRITE ("\n");
      x := x + step
    END
  END ;

BEGIN  (* main program *)
  WRITE ("Input, sort and output an array of real numbers  \n" );
  WRITE ("Test output? (TRUE = yes, FALSE = no): "); READ (test);
  read (n, a);
  sort (a);
  IF NOT test THEN write (1) END;

  WRITE ("Print square numbers from 1 to n: ?"); READ (n);
  square (n);

  WRITE ("Test index check, an error must occur\n");
  n := 0;
  a[n] := 99.99
END.
