%%  Initializations

imports EvalExpr

exports
  context-free syntax
    init ( BLOCK , { EXPR "," }* , { FORMAL ";" }* , D-STACK , PATH )   -> D-ELEMS
    init-decls ( DECL-LIST , STAT-SEQ , PATH )                          -> D-ELEMS
    init-params ( { EXPR "," }* , { FORMAL ";" }* , D-STACK )           -> D-ELEMS
  variables
    [_]Actual[*][']*                                                    -> { EXPR "," }*
    [_]Formal[*][']*                                                    -> { FORMAL ";" }*
    [_]Actual[+][']*                                                    -> { EXPR "," }+
    [_]Formal[+][']*                                                    -> { FORMAL ";" }+
    [_]LabDecl                                                          -> LABEL-DECL
    [_]Type                                                             -> TYPE
    [_]IntConst[*][']*                                                  -> INT-CONST*

hiddens
  sorts FL
  context-free syntax
    init-locals ( BLOCK , PATH )                                        -> D-ELEMS
    initial-value ( TYPE )                                              -> VALUE
    find-label ( LABEL, STAT-SEQ )                                      -> STAT-SEQ

    fl ( LABEL, STAT-SEQ )                                              -> FL
    "[" BOOL-CONST "," STAT-SEQ "]"                                     -> FL
  variables
     [_]Stat[*][']*                                                     -> { STAT ";" }*
     [_]Stat[+][']*                                                     -> { STAT ";" }+
