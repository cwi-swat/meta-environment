%%  Literals
%%
%%  In order to make " " behave as {bracket}s around literals
%%  as introduced in grammar: sections, for every literal
%%  an auxiliary sort needs to be introduced.
%%  In order to reduce the total number of sorts, and to
%%  produce  meaningful sort names, this module defines
%%  sort names for all kinds of often-occurring literals.
%%
%%  The constant standard-literals contains these standard
%%  definitions.
%%  The constant dump-standard-literals is equal to the full
%%  SDF module corresponding to these definitions. Its content
%%  is dumped on file ``StandardLiterals.syn''.
%%
%%  You can change these definitions, or add new ones, if you
%%  wish to.
%%  Be sure to redump the standard literals on file
%%  (open term-editor Literals.trm, enter term "dump-standard-literals"),
%%  press reduce, and paste the result (in the Lisp window) in file
%%  StandardLiterals.syn),
%%  and to recompile all MetaNotation modules.
%%
%%
%%  Author:  Arie van Deursen,
%%  Date:    May 1993.


imports SDF-Syntax-Operations Character-Operations

exports
  context-free syntax
    standard-literals                   -> SDF-SECTION
    "is-defined?"(STRING, CF-FUN* )     -> BOOL
    get-def-sort(STRING, CF-FUN*)       -> UPPER-ALPHA
    quote-brackets( SORT-LIST )         -> SECTION
    dump-standard-literals              -> SDF-DEFINITION
    is-standard-defined( STRING )       -> BOOL
    get-standard-sort( STRING )         -> UPPER-ALPHA

hiddens
  variables
    "#" Sort [0-9']*            -> UPPER-ALPHA
    "#" Sort [0-9']* "+"        -> { UPPER-ALPHA "," }+
    "#" String [0-9']*          -> STRING
    CF-Fun [0-9']*              -> CF-FUN
    CF-Fun [0-9']* "*"          -> CF-FUN*
    CF-Fun [0-9']* "+"          -> CF-FUN+
