%%  Module-to-SDF
%%
%%  The functions in this module take a MetaNotation module, and produce
%%  the ASF+SDF code for it. The main translation function "tr" takes
%%  a complete module, and produces a RESULT containg three parts:
%%  -o-  a "grammar:" containing SDF rules to be used when doing syntax-directed
%%       editing over MetaNotation "grammar:" sections;
%%  -o-  a "signature:" containing SDF rules representing the functionalities
%%       presented in MetaNotation descriptions;
%%  -o-  equations containing ASF+SDF equations.
%%
%%  The various dump functions can dump these results components on
%%  different files.
%%
%%  The functions in this module are rather straightforward; they just perform
%%  a (compositional) pass over the MetaNotation syntax.
%%
%%  Because of this simple shape,  the functions fit in the
%%  "primitive recursive scheme" class which allows incremental rewriting.
%%  See E.A. van der Meulen, CWI, 1990. This means that repeatedly rewriting
%%  similar terms can exploit the results for those parts that did not change.
%%  The execution details of this incremental rewriting are all invisible;
%%  one merely needs to indicate which functions are to be
%%  evaluated {incremental}ly.
%%
%%  Date: May 1993.
%%  Author: Arie van Deursen, CWI, Amsterdam,
%%          Peter D. Mosses, Aarhus, Denmark



imports Grammar-to-SDF
        MetaNotation
        Name-of-Module
        Introduces-to-SDF
        Functionality-to-SDF
        Variables-in-Terms

exports
  sorts RESULT
  context-free syntax
    tr( MODULE )                                -> RESULT  {incremental}
    "<" "grammar:" SDF-DEFINITION ","
        "signature:" SDF-DEFINITION ","
        "equations:" EQUATIONS
    ">"                                         -> RESULT
    RESULT "." grammar                          -> SDF-DEFINITION
    RESULT "." signature                        -> SDF-DEFINITION
    RESULT "." equations                        -> EQUATIONS
    RESULT "." sdf                              -> SDF-DEFINITION
    "imports"( RESULT )                         -> SORT-LIST

hiddens
  context-free syntax
    RESULT "." grammar ":=" SDF-DEFINITION      -> RESULT
    RESULT "." signature ":=" SDF-DEFINITION    -> RESULT
    RESULT "." equations ":=" EQUATIONS         -> RESULT
    empty-result                                -> RESULT
    RESULT "+" RESULT                           -> RESULT {left}

    tr-mods(MODULE+)                            -> RESULT  {incremental}
    tr-mod(MODULE)                              -> RESULT  {incremental}
    tr-spec(SPECIFICATION)                      -> RESULT  {incremental}
    tr-spec-basic(SPECIFICATION)                -> RESULT  {incremental}
    tr-basics(BASIC*)                           -> RESULT  {incremental}
    tr-basic(BASIC)                             -> RESULT  {incremental}
    tr-needed-refs( REFERENCES )                -> RESULT  {incremental}
    tr-needed-ref( REFERENCE )                  -> RESULT  {incremental}
    tr-tag-clause( TAGGED-CLAUSE )              -> RESULT  {incremental}

  variables
    Result                      -> RESULT
    "#" Path                    -> PATH
    "#" Name                    -> UPPER-ALPHA
    Spec                        -> SPECIFICATION
    Basic [']* "*"              -> BASIC*
    Basic [']* "+"              -> BASIC+
    Basic                       -> BASIC
    Module                      -> MODULE
    Module "+"                  -> MODULE+
    "#" Reference [']* "+"      -> { REFERENCE "," }+
    "#" Reference [']*          -> REFERENCE
    "#" References              -> REFERENCES
    "#" Symbols                 -> SYMBOLS
    Clause                      -> CLAUSE
    Tagged-clause               -> TAGGED-CLAUSE
    Tag                         -> TAG
    Num                         -> NUMBER
    Gram-Basics                 -> GRAM-BASICS
    Section [']* "*"            -> SECTION*
    "#" Translations            -> TRANSLATIONS
    SDF-Def [0-9']*             -> SDF-DEFINITION
    Eqs [0-9']*                 -> EQUATIONS
    Section                     -> SECTION
    VarResult                   -> VAR-RES
