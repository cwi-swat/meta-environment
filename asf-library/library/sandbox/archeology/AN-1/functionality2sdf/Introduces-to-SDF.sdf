module Introduces-to-SDF
module Introduces-to-SDF
%%  Introduces-to-SDF
%%
%%  The introduces section of a MetaNotation module merely indicates
%%  which symbols can be used.
%%  With the funcitonality descriptions declaring the functions
%%  in combination with the types already, for SDF generation only
%%  the sorts in the introduces sections are interesting.
%%
%%  Therefore, for every alphanumeric symbol S occurring an introduces
%%  section, the following is generated:
%%
%%  exports sorts S
%%  context-free syntax
%%    S "|" S                   -> S
%%    S "&" S                   -> S
%%    "(" { S "," }+ ")"        -> S
%%    "nothing"                 -> S
%%
%%  If S is lowercase, e.g. "aap", then also
%%  context-free syntax
%%    aap -> Aap
%%  is generated.
%%
%%
%%  N.B. The functionalities are used to generate sort-depended function
%%  declarations. Alternatively, one can use the symbol declarations to
%%  derive sort-independent (which is close to the unified-algebra approach)
%%  to rules. E.g. from `` _ [ _ ] '', one derives
%%   Entity "[" Entity "]" -> Entity,  where Entity is  the one and only sort.
%%
%%
%%  Authors: Arie van Deursen, Amsterdam, CWI
%%           Peter D. Mosses, Aarhus, Denmark




imports Character-Operations
        SDF-Syntax-Operations
        Allowed-Symbols

exports
  context-free syntax
    intro2sdf( SYMBOLS )        -> SECTION    {incremental}
    sym2sdf( SYMBOL )           -> SECTION    {incremental}
    do-sort( UPPER-ALPHA )      -> SECTION

hiddens
  variables
    "#" Sym [0-9']*             -> SYMBOL
    "#" Sym [0-9']* "+"         -> { SYMBOL "," }+
    "#" UpperAlpha [0-9']*      -> UPPER-ALPHA
    "#" LowerAlpha [0-9']*      -> LOWER-ALPHA
