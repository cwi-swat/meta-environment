equations

[processdef2box-0]
  process ProcessSignature is ProcessBody =
    box2processdef(V [H ["process" processsignature2box(ProcessSignature) "is"] 
                      processbody2box(ProcessBody)])

[processsignature2box-0]
  ProcessName ( FormalParam* ) =
    box2processsignature(H hs=0 [processname2box(ProcessName) "(" HVlist2box(FormalParam*) ")"])

[formalparam2box-0]
  Var : Term = box2formalparam(H hs=1 [H hs=0 [var2box(Var) ":"] term2box(Term)])

[formalparam2box-1]
  Var : Term ? = box2formalparam(H hs=1 [H hs=0 [var2box(Var) ":"] H hs=0 [term2box(Term) "?"]])

[vardecl2box-0]
  Var : Term = box2vardecl(H hs=1 [H hs=0 [var2box(Var) ":"] term2box(Term)])

[atom2box-snd-msg]
  snd-msg ( AtomArgs ) =
    box2atom(H hs=0 ["snd-msg" "(" atomargs2box(AtomArgs) ")"])

[atom2box-rec-msg]
  rec-msg ( AtomArgs ) =
    box2atom(H hs=0 ["rec-msg" "(" atomargs2box(AtomArgs) ")"])

[atom2box-snd-eval]
  snd-eval ( AtomArgs ) =
    box2atom(H hs=0 ["snd-eval" "(" atomargs2box(AtomArgs) ")"])

[atom2box-rec-value]
  rec-value ( AtomArgs ) =
    box2atom(H hs=0 ["rec-value" "(" atomargs2box(AtomArgs) ")"])

[atom2box-rec-event]
  rec-event ( Var , AtomArgs ) =
    box2atom(H hs=0 ["rec-event" "(" var2box(Var) "," atomargs2box(AtomArgs) ")"])

[atom2box-snd-ack-event]
  snd-ack-event ( Var , AtomArgs ) =
    box2atom(H hs=0 ["snd-ack-event" "(" var2box(Var) "," atomargs2box(AtomArgs) ")"])

[atom2box-snd-do]
  snd-do ( AtomArgs ) =
    box2atom(H hs=0 ["snd-do" "(" atomargs2box(AtomArgs) ")"])

[atom2box-subscribe]
  subscribe ( AtomArgs ) =
    box2atom(H hs=0 ["subscribe" "(" atomargs2box(AtomArgs) ")"])

[atom2box-unsubscribe]
  unsubscribe ( AtomArgs ) =
    box2atom(H hs=0 ["unsubscribe" "(" atomargs2box(AtomArgs) ")"])

[atom2box-snd-terminate]
  snd-terminate ( AtomArgs ) =
    box2atom(H hs=0 ["snd-terminate" "(" atomargs2box(AtomArgs) ")"])

[atom2box-rec-connect]
  rec-connect ( AtomArgs ) =
    box2atom(H hs=0 ["rec-connect" "(" atomargs2box(AtomArgs) ")"])

[atom2box-rec-disconnect]
  rec-disconnect ( AtomArgs ) =
    box2atom(H hs=0 ["rec-disconnect" "(" atomargs2box(AtomArgs) ")"])

[atom2box-execute]
  execute ( AtomArgs ) =
    box2atom(H hs=0 ["execute" "(" atomargs2box(AtomArgs) ")"])

[atom2box-shutdown]
  shutdown ( AtomArgs ) =
    box2atom(H hs=0 ["shutdown" "(" atomargs2box(AtomArgs) ")"])

[atom2box-snd-note]
  snd-note ( AtomArgs ) =
    box2atom(H hs=0 ["snd-note" "(" atomargs2box(AtomArgs) ")"])

[atom2box-rec-note]
  rec-note ( AtomArgs ) =
    box2atom(H hs=0 ["rec-note" "(" atomargs2box(AtomArgs) ")"])

[atom2box-printf]
  printf ( AtomArgs ) =
    box2atom(H hs=0 ["printf" "(" atomargs2box(AtomArgs) ")"])

[processbody-plain]
  processbody2box(ProcessExpr) = I [processexpr2box(ProcessExpr)]

[processcreation2box-0]
  create ( ProcessInvocation , GenVar ) =
    box2processcreation(H hs=0 ["create" "(" processinvocation2box(ProcessInvocation) H hs=1 ["," genvar2box(GenVar)] ")"])

[processinvocation2box-0]
  ProcessName ( Term* ) = box2processinvocation(H hs=0 [processname2box(ProcessName) "(" HVlist2box(Term*) ")"])

[term2box-id]
  Id ( Term* ) = box2term(H hs=0 [id2box(Id) "(" HVlist2box(Term*) ")"])

[term2box-list]
  [ Term* ] = box2term(H hs=0 ["[" HVlist2box(Term*) "]"])

[term2box-placeholder]
  < Term > = box2term(H hs=0 ["<" term2box(Term) ">"])

[genvar2box-result]
  Var ? = box2genvar(H hs=0 [var2box(Var) "?"])

[default-processexpr2box-seq]
  ProcessExpr1 . ProcessExpr2 = 
    box2processexpr(V vs=1 [processexpr2box(ProcessExpr1)
                            H hs=1 ["." processexpr2box(ProcessExpr2)]])

[processexpr2box-seq-bracket]
  box2processexpr(V vs=1 ["(" Box* ")"]) := ProcessExpr2
  ===>
  ProcessExpr1 . ProcessExpr2 =
    box2processexpr(V vs=1 [processexpr2box(ProcessExpr1)
                            "."
                            V vs=1 ["(" Box* ")"]])

[processexpr2box-seq-bracket]
  box2processexpr(V vs=1 [H hs=1 ["if" Box*1 ] Box*2]) := ProcessExpr2
  ===>
  ProcessExpr1 . ProcessExpr2 =
    box2processexpr(V vs=1 [processexpr2box(ProcessExpr1)
                            "."
                            V vs=1 [H hs=1 ["if" Box*1 ] Box*2]]) 

[processexpr2box-choice]
  ProcessExpr1 + ProcessExpr2 = 
    box2processexpr(V vs=1 [I [processexpr2box(ProcessExpr1)]
                            "+" 
                            I [processexpr2box(ProcessExpr2)]])

[processexpr2box-parallel]
  ProcessExpr1 || ProcessExpr2 = 
    box2processexpr(V vs=1 [I [processexpr2box(ProcessExpr1)]
                            "||" 
                            I [processexpr2box(ProcessExpr2)]])

[processexpr2box-star]
  ProcessExpr1 * ProcessExpr2 =
    box2processexpr(V vs=1 [processexpr2box(ProcessExpr1)
                            "*"
                            processexpr2box(ProcessExpr2)])

[processexpr2box-if]
  if Term then ProcessExpr fi =
    box2processexpr(V vs=1 [H hs=1 ["if" term2box(Term) "then"]
                            I [processexpr2box(ProcessExpr)]
                            "fi"])

[processexpr2box-ifelse]
  if Term then ProcessExpr1 else ProcessExpr2 fi =
    box2processexpr(V vs=1 [H hs=1 ["if" term2box(Term) "then"]
                            I [processexpr2box(ProcessExpr1)]
                            "else"
                            I [processexpr2box(ProcessExpr2)]
                            "fi"])

[processexpr2box-ifdef]
  #ifdef Vname ProcessExpr1 #else ProcessExpr2 #endif = 
    box2processexpr(V vs=1 [H ts=0 hs=1 ["#ifdef" vname2box(Vname)]
                            processexpr2box(ProcessExpr1)
                            H ts=2 ["#else"]
                            processexpr2box(ProcessExpr2)
                            H ts=4 ["#endif"]])

[atomargs2box-0]
   atomargs2box(Term+) = HVlist2box(Term+)

[tscript2box-0]
  TscriptDef* = box2tscript(Vlist2box(TscriptDef*)) 

[tscriptdef2box-0]
  toolbus ( ProcessInvocation+ ) =
    box2tscriptdef(H hs=0 ["toolbus" "(" Hlist2box(ProcessInvocation+) ")" ])

[bracket-context-choice]
  ( box2processexpr(V vs=1 [Box*1 "+" Box*2]) ) =
  box2processexpr(V vs=1 ["(" V vs=1 [ Box*1 "+" Box*2 ] ")" ])

[bracket-context-parallel]
  ( box2processexpr(V vs=1 [Box*1 "||" Box*2]) ) =
  box2processexpr(V vs=1 ["(" V vs=1 [ Box*1 "||" Box*2 ] ")" ])

[default-bracket]
  ( ProcessExpr ) = 
   box2processexpr(V vs=1 ["(" I [ processexpr2box(ProcessExpr)] ")"])
  
[flatten-choice]
  H[Box*5] := H[Box*1 Box*3],
  H[Box*6] := H[Box*4 Box*2]
  ===>
  V vs=1 [Box*1 I [V vs=1 [Box*3 I [Box1] "+" I [Box2] Box*4]] Box*2]
    = V vs=1 [Box*5 I [Box1] "+" I [Box2] Box*6]

[flatten-parallel]
  H[Box*5] := H[Box*1 Box*3],
  H[Box*6] := H[Box*4 Box*2]
  ===>
  V vs=1 [Box*1 I [V vs=1 [Box*3 I [Box1] "||" I [Box2] Box*4]] Box*2]
    = V vs=1 [Box*5 I [Box1] "||" I [Box2] Box*6]

[simplify]
  processexpr2box(box2processexpr(Box)) = Box

[get-vs-tscriptdef]
  get-vs(TscriptDef) = 2
