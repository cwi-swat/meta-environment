module strategies/Apply[X]

imports strategies/Operators

exports

context-free syntax
    (X->X) ":" X                     -> X          
    (X->X)                           -> Strategy
    (X=>X)                        	 -> Strategy   {cons("function")}
    "<" Strategy ">" X 				    	 -> X          {cons("apply")}

hiddens

context-free syntax
   "fail"             -> X {cons("fail")}    
   some(Strategy,X)   -> X {built-in("strategy-some")}
   all(Strategy,X)    -> X {built-in("strategy-all")}
   one(Strategy,X)    -> X {built-in("strategy-one")}
   choice(Strategy,Strategy,X) -> X
   sequence(Strategy,Strategy,X) -> X
   function((X=>X),X) -> X
   rule((X->X),X)     -> X

context-free syntax
   subst(Strategy,StrategyVar,Strategy) -> Strategy {traversal(trafo,bottom-up)}
 
variables

"f"[0-9\']* -> (X=>X)
"r"[0-9\']* -> (X->X)
"S"[0-9\']* -> Strategy
"T"[0-9\']* -> X
"x"[0-9\']* -> StrategyVar