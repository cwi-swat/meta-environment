equations %% Remove leading 0's on Integer constants
  [lz1] natcon(0 Ds) = Int when Int := natcon(Ds)

tests
  [tlz1] 7 == Nat when Nat := 007

equations %% -- Addition (add) for decimal natural numbers

%% -- Single digit addition table

  [a00] add(0,Nat) = Nat
  [a01] add(Nat,0) = Nat
  [a11] add(1,1)=2  [a12] add(1,2)=3  [a13] add(1,3)=4  [a14] add(1,4)=5  [a15] add(1,5)=6
  [a16] add(1,6)=7  [a17] add(1,7)=8  [a18] add(1,8)=9  [a19] add(1,9)=10

  [a21] add(2,1)=3  [a22] add(2,2)=4  [a23] add(2,3)=5  [a24] add(2,4)=6  [a25] add(2,5)=7     
  [a26] add(2,6)=8  [a27] add(2,7)=9  [a28] add(2,8)=10 [a29] add(2,9)=11

  [a31] add(3,1)=4  [a32] add(3,2)=5  [a33] add(3,3)=6  [a34] add(3,4)=7  [a35] add(3,5)=8
  [a36] add(3,6)=9  [a37] add(3,7)=10 [a38] add(3,8)=11 [a39] add(3,9)=12

  [a41] add(4,1)=5  [a42] add(4,2)=6  [a43] add(4,3)=7  [a44] add(4,4)=8  [a45] add(4,5)=9
  [a46] add(4,6)=10 [a47] add(4,7)=11 [a48] add(4,8)=12 [a49] add(4,9)=13 

  [a51] add(5,1)=6  [a52] add(5,2)=7  [a53] add(5,3)=8  [a54] add(5,4)=9  [a55] add(5,5)=10
  [a56] add(5,6)=11[ a57] add(5,7)=12 [a58] add(5,8)=13 [a59] add(5,9)=14

  [a61] add(6,1)=7  [a62] add(6,2)=8  [a63] add(6,3)=9  [a64] add(6,4)=10 [a65] add(6,5)=11
  [a66] add(6,6)=12 [a67] add(6,7)=13 [a68] add(6,8)=14 [a69] add(6,9)=15

  [a71] add(7,1)=8  [a72] add(7,2)=9  [a73] add(7,3)=10 [a74] add(7,4)=11 [a75] add(7,5)=12
  [a76] add(7,6)=13 [a77] add(7,7)=14 [a78] add(7,8)=15 [a79] add(7,9)=16

  [a81] add(8,1)=9  [a82] add(8,2)=10 [a83] add(8,3)=11 [a84] add(8,4)=12 [a85] add(8,5)=13
  [a86] add(8,6)=14 [a87] add(8,7)=15 [a88] add(8,8)=16 [a89] add(8,9)=17

  [a91] add(9,1)=10 [a92] add(9,2)=11 [a93] add(9,3)=12 [a94] add(9,4)=13 [a95] add(9,5)=14
  [a96] add(9,6)=15 [a97] add(9,7)=16 [a98] add(9,8)=17 [a99] add(9,9)=18

  [a1]  natcon(OptDs D) := add(natcon(D1), natcon(D2)),
        natcon(Ds) := add(natcon (Ds1),  add(natcon(Ds2), natcon(0 OptDs)))
        ============================================================
        add(natcon(Ds1 D1), natcon(Ds2 D2)) = natcon(Ds D)

  [a2] natcon(OptDs D) := add(natcon(D1), natcon(D2)),
       natcon(Ds) := add(natcon(Ds2), natcon(0 OptDs))
       ============================================
       add(natcon(D1), natcon(Ds2 D2)) = natcon(Ds D)

  [a3] natcon(OptDs D) := add(natcon(D1), natcon(D2)),
       natcon(Ds) := add(natcon(Ds1), natcon(0 OptDs))
       ============================================
       add(natcon(Ds1 D1), natcon(D2)) = natcon(Ds D)

tests
  [ta1] add(2, 3)    == 5
  [ta2] add(3, 2)    == 5
  [ta3] add(123, 5)  == 128
  [ta4] add(5, 123)  == 128
  [ta5] add(123, 8)  == 131
  [ta6] add(8, 123)  == 131
  [ta7] add(123, 45) == 168
  [ta8] add(45, 123) == 168

equations %% -- Greater than (gt) and Greater than or equal (ge) for decimal natural numbers

  [g10] gt(1,0)=true
  [g20] gt(2,0)=true [g21] gt(2,1)=true
  [g30] gt(3,0)=true [g31] gt(3,1)=true [g32] gt(3,2)=true
  [g40] gt(4,0)=true [g41] gt(4,1)=true [g42] gt(4,2)=true [g43] gt(4,3)=true
  [g50] gt(5,0)=true [g51] gt(5,1)=true [g52] gt(5,2)=true [g53] gt(5,3)=true [g54] gt(5,4)=true
  [g60] gt(6,0)=true [g61] gt(6,1)=true [g62] gt(6,2)=true [g63] gt(6,3)=true [g64] gt(6,4)=true
  [g65] gt(6,5)=true
  [g70] gt(7,0)=true [g71] gt(7,1)=true [g72] gt(7,2)=true [g73] gt(7,3)=true [g74] gt(7,4)=true
  [g75] gt(7,5)=true [g76] gt(7,6)=true
  [g80] gt(8,0)=true [g81] gt(8,1)=true [g82] gt(8,2)=true [g83] gt(8,3)=true [g84] gt(8,4)=true
  [g85] gt(8,5)=true [g86] gt(8,6)=true [g87] gt(8,7)=true
  [g90] gt(9,0)=true [g91] gt(9,1)=true [g92] gt(9,2)=true [g93] gt(9,3)=true [g94] gt(9,4)=true
  [g95] gt(9,5)=true [g96] gt(9,6)=true [g97] gt(9,7)=true [g98] gt(9,8)=true

  [default-g]
        gt(natcon(D1), natcon(D2)) = false

  [g1]  gt(natcon(Ds1 D1), natcon(D2)) = true

  [g2]  gt(natcon(D1), natcon(Ds2 D2)) = false

  [g3]  gt(natcon(Ds D1), natcon(Ds D2)) =gt(natcon(D1), natcon(D2))

  [default]  
        gt(natcon(Ds1 D1), natcon(Ds2 D2)) = gt(natcon(Ds1), natcon(Ds2))

  [ge1] ge(Nat, Nat) = true
  [default]
        ge(Nat1, Nat2) = gt(Nat1, Nat2)

tests
  [tg1]  gt(1, 1)     == false
  [tg2]  gt(2, 1)     == true
  [tg3]  gt(1, 2)     == false
  [tg4]  gt(123, 123) == false
  [tg5]  gt(123, 122) == true
  [tg6]  gt(123, 5)   == true
  [tg7]  gt(5, 123)   == false
  [tg8]  gt(123, 122) == true
  [tg9]  gt(123, 124) == false
  [tg10] gt(31, 123)  == false 

equations %% -- Subtraction for decimal natural numbers

%% -- Single digit subtraction table

  [86]   natcon(D) -// natcon(D) = 0
  [87]   natcon(D) -// 0 = natcon(D)
  [s21]   2 -// 1 = 1
  [s31]   3 -// 1 = 2  [s32]  3 -// 2 = 1
  [s41]   4 -// 1 = 3  [s42]  4 -// 2 = 2   [s43]  4 -// 3 = 1
  [s51]   5 -// 1 = 4  [s52]  5 -// 2 = 3   [s53]  5 -// 3 = 2 [s54]   5 -// 4 = 1
  [s61]   6 -// 1 = 5  [s62]  6 -// 2 = 4   [s63]  6 -// 3 = 3 [s64]   6 -// 4 = 2 [s65] 6 -// 5 = 1
  [s71]   7 -// 1 = 6  [s72]  7 -// 2 = 5   [s73]  7 -// 3 = 4 [s74]   7 -// 4 = 3 [s75] 7 -// 5 = 2  
  [s76]   7 -// 6 = 1
  [s81]   8 -// 1 = 7  [s82]  8 -// 2 = 6   [s83]  8 -// 3 = 5 [s84]   8 -// 4 = 4 [s85] 8 -// 5 = 3
  [s86]   8 -// 6 = 2  [s87]  8 -// 7 = 1 
  [s91]   9 -// 1 = 8  [s92]  9 -// 2 = 7   [s93]  9 -// 3 = 6 [s94]   9 -// 4 = 5 [s95] 9 -// 5 = 4 
  [s96]   9 -// 6 = 3  [s97]  9 -// 7 = 2   [s98]  9 -// 8 = 1
  [s101] 10 -// 1 = 9 [s102] 10 -// 2 = 8  [s103] 10 -// 3 = 7 [s104] 10 -// 4 = 6 [s105] 10 -// 5 = 5 
  [s106] 10 -// 6 = 4 [s107] 10 -// 7 = 3  [s108] 10 -// 8 = 2 [s109] 10 -// 9 = 1

%% -- auxiliary function >- , partial substraction

  [ps1]  Nat >- 0 = Nat

  [ps2]  natcon(D1) >- natcon(D2) = natcon(D1) -// natcon(D2)

  [ps3]  natcon(D3)    := natcon(D1)  -// natcon(D2),
         natcon(Ds) := natcon (Ds1) >- natcon(0 OptDs2)
         =============================================
         natcon(Ds1 D1) >- natcon(OptDs2 D2) = natcon(Ds D3)

  [ps4]  natcon(D3) := natcon(D2)  -// natcon(D1),
         natcon(D) := 10 -// natcon(D3),
         Nat := natcon (0 OptDs2) + 1,
         natcon(Ds) := natcon(Ds1) >- Nat
         ==============================================
         natcon(Ds1 D1) >- natcon(OptDs2 D2) = natcon(Ds D)

equations %% -- Cut off subtraction (-/) and (-) on naturals
  [cs1]  gt(Nat1, Nat2) == true   ====> Nat1 -/ Nat2 = Nat1 >- Nat2
  [cs2]  gt(Nat1, Nat2) == false  ====> Nat1 -/ Nat2 = 0

  [sb1]  gt(Nat1, Nat2) == true  ====> Nat1 - Nat2 = Nat1 >- Nat2
  [sb2]  gt(Nat1, Nat2) == false ====> Nat1 - Nat2 = -(Nat2 >- Nat1)

tests
  [ts1] 5 -/ 3 == 2
  [ts2] 3 -/ 5 == 0
  [ts3] 21 -/ 20 == 1
  [ts3] 123 -/ 31 == 92
  [ts4] 31 -/ 123 == 0

equations  %% -- Multiplication for decimal natural numbers

  [m1] Nat * 0 = 0
  [m2] 0 * Nat = 0
  [m3] Nat * 1 = Nat
  [m4] 1 * Nat = Nat
  [m5] gt(natcon(D), 1) == true
       =============================================
       Nat * natcon(D) = Nat + Nat * (natcon(D) -// 1)

  [m4] natcon(Ds) := natcon(Ds1) * natcon(Ds2)
       ===============================================================
       natcon(Ds1) * natcon(Ds2 D) = natcon(Ds 0) + natcon(Ds1) * natcon(D)

tests
  [tm1] 2 * 3 == 6
  [tm2] 9 * 4 == 36
  [tm3] 13 * 7 == 91
  [tm4] 7 * 13 == 91
  [tm5] 49 * 236 == 11564

equations %% Division (/) on decimal natural numbers

%% Auxiliary function xsub(Dividend, Divisor,  ResultSoFar) performs repeated substractions
%% of Divisor from Dividend. Returns the number of repetitions and the remainder

  [xsub1] gt(Nat1, Nat2) == true
          ===============================================================
          xsub(Nat1, Nat2, Nat3) = xsub(Nat1 >- Nat2, Nat2,  add(Nat3, 1))

  [xsub2] xsub(Nat, Nat, Nat3) = <add(Nat3, 1), 0>

  [default-xsub3]
          xsub(Nat1, Nat2, Nat3) = <Nat3, Nat1>

%% Auxiliary function split: splits a sequence of digits in a first digit and a tail.

  [split1] split(digits(D OptDs)) = <digits(D), digits(OptDs)>

%% The main function for long division (ldiv):

  [ldiv1] <digits(D), digits()> := split(digits(Dividend2)),
          <natcon(Iterations), natcon(Remainder)> := xsub(natcon(Dividend1 D), natcon(Divisor), 0)
          ==========================================================================================
          ldiv(digits(Dividend1), digits(Dividend2), natcon(Divisor), digits(Result)) = 
          <digits(Result Iterations), natcon(Remainder)>

  [ldiv4] <digits(D), digits(Tail)> := split(digits(Dividend2)),
          <natcon(Iterations), natcon(Remainder)> := xsub(natcon(Dividend1 D), natcon(Divisor), 0),
          natcon(Iterations) != 0
          ==========================================================================================
          ldiv(digits(Dividend1), digits(Dividend2),natcon(Divisor), digits(Result)) = 
          ldiv( digits(Remainder), digits(Tail), natcon(Divisor), digits(Result Iterations))

  [ldiv4] <digits(D), digits(Tail)> := split(digits(Dividend2)),
          <natcon(Iterations), natcon(Remainder)> := xsub(natcon(Dividend1 D), natcon(Divisor), 0),
          natcon(Iterations) == 0
          ==========================================================================================
          ldiv(digits(Dividend1), digits(Dividend2), natcon(Divisor), digits(Result)) = 
          ldiv(digits(Dividend1 D), digits(Tail), natcon(Divisor), digits(Result 0))

%% Define division operator (/) using ldiv

   [div1] <digits(Result), natcon(Remainder)> := ldiv(digits(), digits(Dividend), natcon(Divisor), 0)
          ===========================================================================================
          natcon(Dividend) / natcon(Divisor) = natcon(Result)

   [ndiv1] ndiv(Nat1, Nat2) = Nat1 / Nat2   %% Obsolete, but included for compatibility

%% Define the modulo function (mod) using ldiv

  [div1] <digits(Result), natcon(Remainder)> := ldiv(digits(), digits(Dividend), natcon(Divisor), 0)
         ============================================================================================
         mod(natcon(Dividend), natcon(Divisor)) = natcon(Remainder)
tests
  [td01] 2 / 1 == 2
  [td02] 1 / 2 == 0
  [td03] 8 / 2 == 4
  [td04] 9 / 2 == 4
  [td05] 10 / 1 == 10
  [td06] 100 / 1 == 100
  [td07] 1000 / 1 == 1000
  [td08] 44 / 2 == 22
  [td09] 2 / 22 == 0
  [td10] 44/22 == 2
  [td11] 70 / 353 == 0
  [td12] 7635 / 15 == 509
  [td13] 90 / 15 == 6
  [td14] 900 / 15 == 60
  [td15] 9000 / 15 == 600
  [td16] 54 / 15 == 3
  [td17] 540 / 15 ==36
  [td18] 5400 / 15 == 360
  [td19] 54000 / 15 == 3600
  [td20] 11578 / 49 == 236
  [td21] 212 / 204 == 1

  [tm1] mod(11578,49) == 14

equations %% Extension of addition, subtraction, multiplication and division to decimal integers

  [uz1] - 0 = 0    %% -- no minus zero

  [iu1] +Nat = Nat
  [ium] - (-Nat) = Nat

  [ia1] Nat1 + Nat2 = add(Nat1,Nat2)
  [ia2] Nat1 + -Nat2 = Nat1 - Nat2
  [ia3] -Nat1 + Nat2 = Nat2 - Nat1
  [ia4] Nat := Nat1 + Nat2  ====> -Nat1 + -Nat2 = -Nat

 %% [is1] Nat1 - Nat2 = Nat1 -/ Nat2
  [is2] Nat1 - -Nat2 = Nat1 + Nat2
  [is3] Nat := Nat1 + Nat2 ====> -Nat1 - Nat2 = -Nat
  [is4] -Nat1 - -Nat2 = Nat2 - Nat1

  [im1] Nat := Nat1 * Nat2  ====> Nat1 * -Nat2 = -Nat
  [im2] Nat := Nat1 * Nat2  ====> -Nat1 * Nat2 = -Nat
  [im3] -Nat1 * -Nat2 = Nat1 * Nat2

  [id1] (- Nat1) / Nat2 = - (Nat1 / Nat2)
  [id2] Nat1 / (- Nat2) = - (Nat1 / Nat2)
  [id3] (- Nat1) / (- Nat2) = Nat1 / Nat2


tests
  [tia1] 189 + 13 == 202
  [tia2] 13 + 189 == 202
  [tia3] 189 + (-13) == 176
  [tia4] -13 + 189  == 176
  [tia5] -189 + 13 == -176
  [tia6] 13 - 189 == -176
  [tia7] -189 + (-13) == -202

  [tmul1] 13 * 17   == 221
  [tmul2] -13 * 17  == -221
  [tmul3] -13 * -17 == 221
  [tmul4] 100 * - (-2) == 200
%%  [sanity] 0 != 1

  [priority-plus-star] 
            2 + 2 * 3 == 8
  [priority-minus-star] 
            2 - 2 * 3 == -4

  [td1] 1 / 1     == 1
  [td2] 2 / 1     == 2
  [td3] 22 / 1    == 22
  [td4] 22 / 2    == 11
  [td5] 44 / 22   == 2
  [td7] 900 / 22  == 40
  [td8] 900 / -22 == -40
  [td9] -900 / 22 == -40

equations %% Extension of relational operators to decimal integers

  [igt1] Nat1 > Nat2 = gt(Nat1, Nat2)

  [igt2] Nat1 > -Nat2 = true
  [igt3] -Nat1 > Nat2 = false
  [igt4] -Nat1 > -Nat2 = Nat2 > Nat1

  [ige1] Int1 != Int2 ====> Int1 >= Int2 = Int1 > Int2
  [ige2] Int >= Int = true

  [ilt1] Int1 < Int2 = not(Int1 >= Int2)
  [ile1] Int1 <= Int2 = not(Int1 > Int2)

  [ieq1] Int == Int = true
  [default] 
         Int1 == Int2 = false

tests

  [tlt1] -7 < 5 == true
  [tlt2] 7 < 5 == false
  [tlt3] 5 > 7 == false
  [tlt4] -5 > -7 == true

equations %% Absolute value (abs) on Integers

  [abs1] abs(- Nat) = Nat
  [abs2] abs(Nat)   = Nat
 
tests
  [tabs] abs(-123) == 123

equations %% Power function (pow)

  [pow1] pow(Int, 0) = 1
  [pow2] pow(Int, Nat) = Int * pow(Int, Nat -// 1)

tests
  [tpw1] pow(3,2) == 9
  [tpw2] pow(3,3) == 27
  [tpw3] pow(-3, 2) == 9

equations %% Maximum (max) and minimum (min) on integers

  [max1] max(Int1, Int2) = Int1 when Int1 > Int2 == true
  [default]
         max(Int1, Int2) = Int2

  [min1] min(Int1, Int2) = Int1 when Int1 < Int2 == true
  [default]
         min(Int1, Int2) = Int2

tests
  [tmax1] max(2,3)   == 3
  [tmax2] max(3,2)   == 3
  [tmin1] min(-2, 3) == -2
  [tmin2] min(3,-2)  == -2

equations %% Modulo on integers

  [mod1] mod(-Nat1, Nat2) = -mod(Nat1, Nat2)
  [mod2] mod(Nat1, -Nat2) = -mod(Nat1, Nat2)

tests
  [tm1] mod(4,2) == 0
  [tm2] mod(5,2) == 1
  [tm3] mod(6,4) == 2
  [tm4] mod(23, 3) == 2
  [tm5] mod(-23, 3) == -2

equations %% Greatest Common Divisor (gcd)

  [gcd1] gcd(-Nat1, Nat2) = gcd(Nat1, Nat2)
  [gcd2] gcd(Nat1, -Nat2) = gcd(Nat1, Nat2)
  [gcd3] gcd(0, Nat2) = Nat2
  [gcd4] gcd(Nat1, 0) = Nat1
  [gcd5] gcd(Nat, Nat) = Nat
  [gcd6] Nat2 != 0,
         Nat3 := mod(Nat1, Nat2)
         ===============================
         gcd(Nat1, Nat2) = gcd(Nat2, Nat3)

tests
  [tgcd1] gcd(4,  6) == 2
  [tgcd2] gcd(12, 8) == 4
  [tgcd3] gcd(42, 56) == 14
  [tgcd4] gcd(513, 513) == 513
  [tgcd5] gcd(204, 212) == 4




