module strategies/Operators

exports

sorts Strategy

context-free syntax


"fail" -> Strategy {cons("Fail")}
"id" -> Strategy {cons("Id")}
Id -> SVar {cons("SVar")}
"let" ( StrategyDef | RuleDef )* "in" Strategy -> Strategy {cons("Let")}
SVar -> Strategy {cons("CallNoArgs")}
SVar "(" {Strategy ","}* ")" -> Strategy {cons("Call")}
"?" Term -> Strategy {cons("Match")}
    "!" Term -> Strategy {cons("Build")}
    "{" Strategy "}" -> Strategy {cons("ScopeDefault")}
    "{" {Id ","}* ":" Strategy "}" -> Strategy {cons("Scope")}
    "<" Strategy ">" Term -> Strategy {cons("BA")}
    Strategy "=>" Term -> Strategy {cons("AM")}
    "<" Strategy ">" -> StrategyAngle {cons("AngleStrat")}
    "(" Strategy ")" -> StrategyParen {cons("ParenStrat")}
    "\\" Rule "\\" -> Strategy {cons("LRule")}
    Strategy ";" Strategy -> Strategy {cons("Seq"), right}
    Strategy "+" Strategy -> Strategy {cons("Choice"), right}
    Strategy "<+" Strategy -> Strategy {cons("LChoice"), right}
    "rec" Id "(" Strategy ")" -> Strategy {cons("Rec")}
    "not" "(" Strategy ")" -> Strategy {cons("Not")}
    "where" "(" Strategy ")" -> Strategy {cons("Where")}
    "test" "(" Strategy ")" -> Strategy {cons("Test")}

  context-free priorities
    Strategy "#" StrategyParen -> Strategy {cons("ExplodeCong")} >
    { "!" Term -> Strategy {cons("Build")}
      "?" Term -> Strategy {cons("Match")} } >
    Strategy "=>" Term -> Strategy {cons("AM")} >
    Strategy ";" Strategy -> Strategy {cons("Seq"), right} >
    { right : Strategy "+" Strategy -> Strategy {cons("Choice"), right} Strategy "<+" Strategy -> Strategy {cons("LChoice"), right} }