definition

module Syntax

exports

   sorts
    Abbreviated-combined-relation-conditions
    Accept-statement
    Add-statement
    Alter-statement
    Altered-goto
    Basis-statement
    Blank-when-zero-clause
    Call-statement
    Cancel-statement
    Cbl-process-statement
    Class-condition
    Close-statement
    Cobol-source-program
    Cobol-source-program-nested-source-program
    Combined-conditions
    Compute-statement
    Condition-name-condition
    Condition-name-reference
    Configuration-section-in-context
    Configuration-section-in-context-paragraphs
    Continue-statement
    Control-cbl-statement
    Copy-statement
    Data-description-entry
    Data-division
    Delete-compiler-directing-statement
    Delete-statement
    Display-statement
    Divide-statement
    Eject-statement
    Enter-statement
    Entry-statement
    Evaluate-statement
    Evaluate-statement-phrase-1
    Evaluate-statement-phrase-2
    Exit-program-statement
    Exit-statement
    File-and-sort-description-entry
    File-and-sort-description-entry-clause-1
    File-and-sort-description-entry-clause-2
    File-control-paragraph
    Go-to-statement
    Goback-statement
    I-o-control-paragraph
    Identification-division
    Identifier
    If-statement
    Initialize-statement
    Input-output-section
    Insert-statement
    Inspect-statement
    Inspect-statement-phrase-1
    Justified-clause
    Merge-statement
    Move-statement
    Multiply-statement
    Negated-simple-conditions
    Object-computer-paragraph
    Object-computer-paragraph-entry-1
    Occurs-clause
    Open-statement
    Perform-statement
    Perform-statement-after-phrase
    Perform-statement-phrase-1
    Perform-statement-varying-phrase
    Picture-clause
    Procedure-division
    Procedure-division-para
    Procedure-division-sect
    Procedure-name
    Qsam-or-sam-i-o-control-entries
    Qsam-sam-vsam-sequential-file-control-entries
    Read-statement
    Ready-or-reset-trace-statement
    Redefines-clause
    Reference-modification
    References-to-copy-libraries
    Relation-condition
    Release-statement
    Renames-clause
    Replace-statement
    Return-statement
    Rewrite-statement
    Search-statement
    Sequence-of-cobol-source-programs
    Service-label-statement
    Service-reload-statement
    Set-statement
    Sign-clause
    Sign-condition
    Simple-data-reference
    Skip1-2-3-statement
    Sort-merge-i-o-control-entries
    Sort-statement
    Source-computer-paragraph
    Special-names-paragraph
    Special-names-paragraph-entry-1
    Start-statement
    Stop-statement
    String-statement
    Subscripting
    Subtract-statement
    Switch-status-condition
    Synchronized-clause
    Title-statement
    Unstring-statement
    Usage-clause
    Use-statement
    Value-clause
    Vsam-i-o-control-entries
    Vsam-indexed-file-control-entries
    Vsam-indexed-file-control-entries-entry-1
    Vsam-relative-file-control-entries
    Write-statement
    Write-statement-phrase

   context-free syntax
    Text-name ("IN" | "OF" Library-name)? -> References-to-copy-libraries

    Paragraph-name ("IN" | "OF" Section-name)? -> Procedure-name

    Section-name -> Procedure-name

    Data-name -> Simple-data-reference

    Data-name ("IN" | "OF" Data-name)* //
    ("IN" | "OF" File-name)? ("(" Subscript ")")* //
    ("(" Leftmost-character-position ":" Length? ")")?
	-> Identifier

    "LINAGE-COUNTER" ("IN" | "OF" File-name)? -> Identifier

    Condition-name ("IN" | "OF" Data-name)* //
    ("IN" | "OF" File-name)? ("(" Subscript ")")*
	-> Condition-name-reference

    Condition-name ("IN" | "OF" Mnemonic-name)* -> Condition-name-reference

    Condition-name | Data-name //
    "(" (Integer | (Data-name ("+" | "-" Integer)?) | (Index-name ("+" | "-" Integer)?))+ ")"
	-> Subscripting

    Data-name "(" Leftmost-character-position ":" Length? //
    ")"
	-> Reference-modification

    "IDENTIFICATION" | "ID" "DIVISION" "." "PROGRAM-ID" "." Program-name //
    ("IS"? "INITIAL" "PROGRAM"?)? "." //
    Identification-division-content? //
    ("ENVIRONMENT" "DIVISION" "." Environment-division-content)? //
    ("DATA" "DIVISION" "." Data-division-content)? //
    ("PROCEDURE" "DIVISION" "." Procedure-division-content)? //
    (Cobol-source-program-nested-source-program* "END" "PROGRAM" Program-name ".")?
	-> Cobol-source-program

    "IDENTIFICATION" | "ID" "DIVISION" "." "PROGRAM-ID" "." Program-name //
    ("IS"? ("COMMON" "INITIAL"?) | ("INITIAL" "COMMON"?) "PROGRAM"?)? "." //
    Identification-division-content? //
    ("ENVIRONMENT" "DIVISION" "." Environment-division-content)? //
    ("DATA" "DIVISION" "." Data-division-content)? //
    ("PROCEDURE" "DIVISION" "." Procedure-division-content)? //
    Cobol-source-program-nested-source-program* "END" "PROGRAM" Program-name "."
	-> Cobol-source-program-nested-source-program

    Cobol-source-program+ -> Sequence-of-cobol-source-programs

    "IDENTIFICATION" | "ID" "DIVISION" "." "PROGRAM-ID" "." Program-name //
    ("IS"? ("COMMON" "INITIAL"?) | ("INITIAL" "COMMON"?) "PROGRAM"?)? "." //
    ("AUTHOR" "." Comment-entry*)? //
    ("INSTALLATION" "." Comment-entry*)? //
    ("DATE-WRITTEN" "." Comment-entry*)? //
    ("DATE-COMPILED" "." Comment-entry*)? //
    ("SECURITY" "." Comment-entry*)?
	-> Identification-division

    "ENVIRONMENT" "DIVISION" "." //
    ("CONFIGURATION" "SECTION" "." Configuration-section-in-context-paragraphs)?
	-> Configuration-section-in-context

    Source-computer-paragraph? Object-computer-paragraph? //
    Special-names-paragraph?
	-> Configuration-section-in-context-paragraphs

    "SOURCE-COMPUTER" "." //
    (Computer-name ("WITH"? "DEBUGGING" "MODE")? ".")?
	-> Source-computer-paragraph

    "OBJECT-COMPUTER" "." //
    (Computer-name ("MEMORY" "SIZE"? Integer "WORDS" | "CHARACTERS" | "MODULES")? Object-computer-paragraph-entry-1 ".")?
	-> Object-computer-paragraph

    ("PROGRAM"? "COLLATING"? "SEQUENCE" "IS"? Alphabet-name)? //
    ("SEGMENT-LIMIT" "IS"? Priority-number)?
	-> Object-computer-paragraph-entry-1

    "SPECIAL-NAMES" "." ((Environment-name "IS"? Mnemonic-name) | (Environment-name ("IS"? Mnemonic-name Special-names-paragraph-entry-1?) | Special-names-paragraph-entry-1))* //
    ("ALPHABET" Alphabet-name "IS"? "STANDARD-1" | "STANDARD-2" | "NATIVE" | "EBCDIC" | (Literal (("THROUGH" | "THRU" Literal) | ("ALSO" Literal)+)?)+)* //
    ("SYMBOLIC" "CHARACTERS"? (Symbolic-character+ "ARE" | "IS" Integer+)+ ("IN" Alphabet-name)?)* //
    ("CLASS" Class-name "IS"? (Literal ("THROUGH" | "THRU" Literal)?)+)* //
    ("CURRENCY" "SIGN"? "IS"? Literal)? ("DECIMAL-POINT" "IS"? "COMMA")? "."?
	-> Special-names-paragraph

    ("ON" "STATUS"? "IS"? Condition ("OFF" "STATUS"? "IS"? Condition)?) | ("OFF" "STATUS"? "IS"? Condition ("ON" "STATUS"? "IS"? Condition)?) -> Special-names-paragraph-entry-1

    "INPUT-OUTPUT" "SECTION" "." File-control-paragraph //
    I-o-control-paragraph?
	-> Input-output-section

    "FILE-CONTROL" "." //
    (Qsam-sam-vsam-sequential-file-control-entries | Vsam-indexed-file-control-entries | Vsam-relative-file-control-entries)+
	-> File-control-paragraph

    "SELECT" "OPTIONAL"? File-name "ASSIGN" "TO"? //
    (Assignment-name | Literal)+ ("RESERVE" Integer ("AREA" | "AREAS")?)? //
    (("ORGANIZATION" "IS"?)? "SEQUENTIAL")? //
    ("PADDING" "CHARACTER"? "IS"? Data-name | Literal)? //
    ("RECORD" "DELIMITER" "IS"? "STANDARD-1" | Assignment-name)? //
    ("ACCESS" "MODE"? "IS"? "SEQUENTIAL")? //
    ("PASSWORD" "IS"? Data-name)? //
    ("FILE"? "STATUS" "IS"? Data-name Data-name?)? "."
	-> Qsam-sam-vsam-sequential-file-control-entries

    "SELECT" "OPTIONAL"? File-name "ASSIGN" "TO"? //
    (Assignment-name | Literal)+ ("RESERVE" Integer ("AREA" | "AREAS")?)? //
    ("ORGANIZATION" "IS"?)? "INDEXED" //
    ("ACCESS" "MODE"? "IS"? "SEQUENTIAL" | "RANDOM" | "DYNAMIC")? "RECORD" "KEY"? //
    "IS"? Data-name ("PASSWORD" "IS"? Data-name)? //
    Vsam-indexed-file-control-entries-entry-1* //
    ("FILE"? "STATUS" "IS"? Data-name Data-name?)? "."
	-> Vsam-indexed-file-control-entries

    "ALTERNATE" "RECORD" "KEY"? "IS"? Data-name //
    ("PASSWORD" "IS"? Data-name)? ("WITH"? "DUPLICATES")?
	-> Vsam-indexed-file-control-entries-entry-1

    "SELECT" "OPTIONAL"? File-name "ASSIGN" "TO"? (Assignment-name | Literal)+ //
    ("RESERVE" Integer ("AREA" | "AREAS")?)? ("ORGANIZATION" "IS"?)? "RELATIVE" //
    ("ACCESS" "MODE"? "IS"? ("SEQUENTIAL" ("RELATIVE" "KEY"? "IS"? Data-name)?) | ("RANDOM" | "DYNAMIC" "RELATIVE" "KEY"? "IS"? Data-name))? //
    ("PASSWORD" "IS"? Data-name)? ("FILE"? "STATUS" "IS"? Data-name Data-name?)? "."
	-> Vsam-relative-file-control-entries

    "I-O-CONTROL" "." ((Qsam-or-sam-i-o-control-entries | Vsam-i-o-control-entries)+ ".")? //
    (Sort-merge-i-o-control-entries ".")?
	-> I-o-control-paragraph

    ("RERUN" "ON" Assignment-name | File-name "EVERY"? (Integer "RECORDS") | ("END" "OF"? "REEL" | "UNIT") "OF"? File-name) | ("SAME" "RECORD"? "AREA"? "FOR"? File-name File-name+) | ("MULTIPLE" "FILE" "TAPE"? "CONTAINS"? (File-name ("POSITION" Integer)?)+) | ("APPLY" "WRITE-ONLY" "ON"? File-name+) -> Qsam-or-sam-i-o-control-entries

    ("RERUN" "ON" Assignment-name | File-name "EVERY"? Integer "RECORDS" "OF"? File-name) | ("SAME" "RECORD"? "AREA"? "FOR"? File-name File-name+) -> Vsam-i-o-control-entries

    ("RERUN" "ON" Assignment-name)? //
    ("SAME" "RECORD" | "SORT" | "SORT-MERGE" "AREA"? "FOR"? File-name File-name+)+
	-> Sort-merge-i-o-control-entries

    "DATA" "DIVISION" "." //
    ("FILE" "SECTION" "." (File-description-entry Record-description-entry+)*)? //
    ("WORKING-STORAGE" "SECTION" "." (Record-description-entry | Data-item-description-entry)*)? //
    ("LINKAGE" "SECTION" "." (Record-description-entry | Data-item-description-entry)*)?
	-> Data-division

    "FD" File-name ("IS"? "EXTERNAL")? ("IS"? "GLOBAL")? ("BLOCK" "CONTAINS"? (Integer "TO")? Integer "CHARACTERS" | "RECORDS")? //
    ("RECORD" ("CONTAINS"? Integer "CHARACTERS"?) | ("CONTAINS"? Integer "TO" Integer "CHARACTERS"?) | (File-and-sort-description-entry-clause-1 ("DEPENDING" "ON"? Data-name)?))? ("LABEL" ("RECORD" "IS"?) | ("RECORDS" "ARE"?) "STANDARD" | "OMITTED" | Data-name+)? //
    ("VALUE" "OF" (System-name "IS"? Data-name | Literal)+)? ("DATA" ("RECORD" "IS"?) | ("RECORDS" "ARE"?) Data-name+)? //
    ("LINAGE" "IS"? Data-name | Integer "LINES"? File-and-sort-description-entry-clause-2)? ("RECORDING" "MODE"? "IS"? Mode)? //
    ("CODE-SET" "IS"? Alphabet-name)? "."
	-> File-and-sort-description-entry

    "SD" File-name //
    ("RECORD" ("CONTAINS"? Integer "CHARACTERS"?) | ("CONTAINS"? Integer "TO" Integer "CHARACTERS"?) | (File-and-sort-description-entry-clause-1 ("DEPENDING" "ON"? Data-name)?))? //
    ("DATA" ("RECORD" "IS"?) | ("RECORDS" "ARE"?) Data-name+)? //
    ("BLOCK" "CONTAINS"? (Integer "TO")? Integer "CHARACTERS" | "RECORDS")? //
    ("LABEL" ("RECORD" "IS"?) | ("RECORDS" "ARE"?) "STANDARD" | "OMITTED" | Data-name+)? //
    ("VALUE" "OF" (System-name "IS"? Data-name | Literal)+)? //
    ("LINAGE" "IS"? Data-name | Integer "LINES"? File-and-sort-description-entry-clause-2)? //
    ("CODE-SET" "IS"? Alphabet-name)? "."
	-> File-and-sort-description-entry

    "FD" File-name ("IS"? "EXTERNAL")? ("IS"? "GLOBAL")? //
    ("BLOCK" "CONTAINS"? (Integer "TO")? Integer "CHARACTERS" | "RECORDS")? //
    ("RECORD" ("CONTAINS"? Integer "CHARACTERS"?) | ("CONTAINS"? Integer "TO" Integer "CHARACTERS"?) | (File-and-sort-description-entry-clause-1 ("DEPENDING" "ON"? Data-name)?))? //
    ("LABEL" ("RECORD" "IS"?) | ("RECORDS" "ARE"?) "STANDARD" | "OMITTED")? //
    ("VALUE" "OF" (System-name "IS"? Data-name | Literal)+)? //
    ("DATA" ("RECORD" "IS"?) | ("RECORDS" "ARE"?) Data-name+)? "."
	-> File-and-sort-description-entry

    "IS"? "VARYING" "IN"? "SIZE"? ("FROM"? Integer)? ("TO" Integer)? "CHARACTERS"? -> File-and-sort-description-entry-clause-1

    ("WITH"? "FOOTING" "AT"? Data-name | Integer)? ("LINES"? "AT"? "TOP" Data-name | Integer)? //
    ("LINES"? "AT"? "BOTTOM" Data-name | Integer)?
	-> File-and-sort-description-entry-clause-2

    Level-number (Data-name | "FILLER")? Redefines-clause? //
    Blank-when-zero-clause? External-clause? //
    Global-clause? Justified-clause? Occurs-clause? //
    Picture-clause? Sign-clause? Synchronized-clause? //
    Usage-clause? Value-clause?
	-> Data-description-entry

    "66" Data-name Renames-clause "." -> Data-description-entry

    "88" Condition-name Value-clause "." -> Data-description-entry

    "BLANK" "WHEN"? "ZERO" | "ZEROS" | "ZEROES" -> Blank-when-zero-clause

    "JUSTIFIED" | "JUST" "RIGHT"? -> Justified-clause

    "OCCURS" Integer "TIMES"? //
    ("ASCENDING" | "DESCENDING" "KEY"? "IS"? Data-name+)* //
    ("INDEXED" "BY"? Index-name+)?
	-> Occurs-clause

    "OCCURS" Integer "TO" Integer "TIMES"? "DEPENDING" //
    "ON"? Data-name //
    ("ASCENDING" | "DESCENDING" "KEY"? "IS"? Data-name+)* //
    ("INDEXED" "BY"? Index-name+)?
	-> Occurs-clause

    "PICTURE" | "PIC" "IS"? Character-string -> Picture-clause

    Level-number (Data-name | "FILLER")? "REDEFINES" Data-name -> Redefines-clause

    "66" Data-name "RENAMES" Data-name //
    ("THROUGH" | "THRU" Data-name)? "."
	-> Renames-clause

    ("SIGN" "IS"?)? "LEADING" | "TRAILING" ("SEPARATE" "CHARACTER"?)? -> Sign-clause

    "SYNCHRONIZED" | "SYNC" ("LEFT" | "RIGHT")? -> Synchronized-clause

    ("USAGE" "IS"?)? "BINARY" | "COMP" | "COMP-1" | "COMP-2" | "COMP-3" | "COMP-4" | "COMPUTATIONAL" | "COMPUTATIONAL-1" | "COMPUTATIONAL-2" | "COMPUTATIONAL-3" | "COMPUTATIONAL-4" | "DISPLAY" | "DISPLAY-1" | "INDEX" | "PACKED-DECIMAL" | "POINTER" -> Usage-clause

    "VALUE" "IS"? Literal -> Value-clause

    "88" Condition-name ("VALUE" "IS"?) | ("VALUES" "ARE"?) //
    (Literal ("THROUGH" | "THRU" Literal)?)+ "."
	-> Value-clause

    "VALUE" "IS"? "NULL" | "NULLS" -> Value-clause

    "PROCEDURE" "DIVISION" ("USING" Data-name+)? "." //
    ("DECLARATIVES" "." (Procedure-division-sect "." Use-statement "." Procedure-division-para)+ "END" "DECLARATIVES" ".")? //
    (Section-name "SECTION" Priority-number? "." Procedure-division-para)+
	-> Procedure-division

    "PROCEDURE" "DIVISION" ("USING" Data-name+)? "." //
    (Paragraph-name "." Sentence*)+
	-> Procedure-division

    Section-name "SECTION" Priority-number? -> Procedure-division-sect

    (Paragraph-name "." Sentence*)* -> Procedure-division-para

    Identifier "IS"? "NOT"? "NUMERIC" | "ALPHABETIC" | "ALPHABETIC-LOWER" | "ALPHABETIC-UPPER" | Class-name | "DBCS" | "KANJI" -> Class-condition

    Condition-name -> Condition-name-condition

    Operand "IS"? ("NOT"? ("GREATER" "THAN"?) | ">" | ("LESS" "THAN"?) | "<" | ("EQUAL" "TO"?) | "=") | ("GREATER" "THAN"? "OR" "EQUAL" "TO"?) | ">=" | ("LESS" "THAN"? "OR" "EQUAL" "TO"?) | ("<" "=") //
    Operand
	-> Relation-condition

    Operand "IS"? "NOT"? "POSITIVE" | "NEGATIVE" | "ZERO" -> Sign-condition

    Condition-name -> Switch-status-condition

    "NOT" Condition -> Negated-simple-conditions

    Condition ("AND" | "OR" Condition)+ -> Combined-conditions

    Relation-condition //
    ("AND" | "OR" "NOT"? Relational-operator? Object)+
	-> Abbreviated-combined-relation-conditions

    "ACCEPT" Identifier ("FROM" Mnemonic-name | Environment-name)? -> Accept-statement

    "ACCEPT" Identifier "FROM" "DATE" | "DAY" | "DAY-OF-WEEK" | "TIME" -> Accept-statement

    "ADD" (Identifier | Literal)+ "TO" (Identifier "ROUNDED"?)+ //
    ("ON"? "SIZE" "ERROR" Imperative-statement)? //
    ("NOT" "ON"? "SIZE" "ERROR" Imperative-statement)? //
    "END-ADD"?
	-> Add-statement

    "ADD" (Identifier | Literal)+ "TO"? Identifier | Literal //
    "GIVING" (Identifier "ROUNDED"?)+ //
    ("ON"? "SIZE" "ERROR" Imperative-statement)? //
    ("NOT" "ON"? "SIZE" "ERROR" Imperative-statement)? //
    "END-ADD"?
	-> Add-statement

    "ADD" "CORRESPONDING" | "CORR" Identifier "TO" Identifier //
    "ROUNDED"? ("ON"? "SIZE" "ERROR" Imperative-statement)? //
    ("NOT" "ON"? "SIZE" "ERROR" Imperative-statement)? //
    "END-ADD"?
	-> Add-statement

    "ALTER" //
    (Procedure-name "TO" ("PROCEED" "TO")? Procedure-name)+
	-> Alter-statement

    "CALL" Identifier | Literal //
    ("USING" ((("BY"? "REFERENCE")? (Identifier | ("ADDRESS" "OF" Identifier) | File-name)+) | ("BY"? "CONTENT" ((("LENGTH" "OF")? Identifier) | ("ADDRESS" "OF" Identifier) | Literal)+))+)? //
    ("ON"? "OVERFLOW" Imperative-statement)? "END-CALL"?
	-> Call-statement

    "CALL" Identifier | Literal //
    ("USING" ((("BY"? "REFERENCE")? (Identifier | ("ADDRESS" "OF" Identifier) | File-name)+) | ("BY"? "CONTENT" ((("LENGTH" "OF")? Identifier) | ("ADDRESS" "OF" Identifier) | Literal)+))+)? //
    ("ON"? "EXCEPTION" Imperative-statement)? //
    ("NOT" "ON"? "EXCEPTION" Imperative-statement)? "END-CALL"?
	-> Call-statement

    "CANCEL" (Identifier | Literal)+ -> Cancel-statement

    "CLOSE" //
    (File-name (("REEL" | "UNIT" (("FOR"? "REMOVAL") | ("WITH"? "NO" "REWIND"))?) | ("WITH"? ("NO" "REWIND") | "LOCK"))?)+
	-> Close-statement

    "CLOSE" (File-name ("WITH"? "LOCK")?)+ -> Close-statement

    "COMPUTE" (Identifier "ROUNDED"?)+ "=" | "EQUAL" //
    Arithmetic-expression //
    ("ON"? "SIZE" "ERROR" Imperative-statement)? //
    ("NOT" "ON"? "SIZE" "ERROR" Imperative-statement)? //
    "END-COMPUTE"?
	-> Compute-statement

    "CONTINUE" -> Continue-statement

    "DELETE" File-name "RECORD"? //
    ("INVALID" "KEY"? Imperative-statement)? //
    ("NOT" "INVALID" "KEY"? Imperative-statement)? //
    "END-DELETE"?
	-> Delete-statement

    "DISPLAY" (Identifier | Literal)+ //
    ("UPON" Mnemonic-name | Environment-name)? //
    ("WITH"? "NO" "ADVANCING")?
	-> Display-statement

    "DIVIDE" Identifier | Literal "INTO" (Identifier "ROUNDED"?)+ //
    ("ON"? "SIZE" "ERROR" Imperative-statement)? //
    ("NOT" "ON"? "SIZE" "ERROR" Imperative-statement)? //
    "END-DIVIDE"?
	-> Divide-statement

    "DIVIDE" Identifier | Literal "INTO" Identifier | Literal //
    "GIVING" (Identifier "ROUNDED"?)+ //
    ("ON"? "SIZE" "ERROR" Imperative-statement)? //
    ("NOT" "ON"? "SIZE" "ERROR" Imperative-statement)? //
    "END-DIVIDE"?
	-> Divide-statement

    "DIVIDE" Identifier | Literal "BY" Identifier | Literal //
    "GIVING" (Identifier "ROUNDED"?)+ //
    ("ON"? "SIZE" "ERROR" Imperative-statement)? //
    ("NOT" "ON"? "SIZE" "ERROR" Imperative-statement)? //
    "END-DIVIDE"?
	-> Divide-statement

    "DIVIDE" Identifier | Literal "INTO" Identifier | Literal //
    "GIVING" Identifier "ROUNDED"? "REMAINDER" Identifier //
    ("ON"? "SIZE" "ERROR" Imperative-statement)? //
    ("NOT" "ON"? "SIZE" "ERROR" Imperative-statement)? //
    "END-DIVIDE"?
	-> Divide-statement

    "DIVIDE" Identifier | Literal "BY" Identifier | Literal //
    "GIVING" Identifier "ROUNDED"? "REMAINDER" Identifier //
    ("ON"? "SIZE" "ERROR" Imperative-statement)? //
    ("NOT" "ON"? "SIZE" "ERROR" Imperative-statement)? //
    "END-DIVIDE"?
	-> Divide-statement

    "ENTRY" Literal ("USING" Data-name+)? -> Entry-statement

    "EVALUATE" Identifier | Literal | Expression | "TRUE" | "FALSE" ("ALSO" Identifier | Literal | Expression | "TRUE" | "FALSE")* //
    (("WHEN" Evaluate-statement-phrase-1 ("ALSO" Evaluate-statement-phrase-2)*)+ Imperative-statement)+ //
    ("WHEN" "OTHER" Imperative-statement)? "END-EVALUATE"?
	-> Evaluate-statement

    "ANY" | Condition | "TRUE" | "FALSE" | ("NOT"? Identifier | Literal | Arithmetic-expression ("THROUGH" | "THRU" Identifier | Literal | Arithmetic-expression)?) -> Evaluate-statement-phrase-1

    "ANY" | Condition | "TRUE" | "FALSE" | ("NOT"? Identifier | Literal | Arithmetic-expression ("THROUGH" | "THRU" Identifier | Literal | Arithmetic-expression)?) -> Evaluate-statement-phrase-2

    Paragraph-name "." "EXIT" "." -> Exit-statement

    "EXIT" "PROGRAM" "." -> Exit-program-statement

    "GOBACK" -> Goback-statement

    "GO" "TO"? Procedure-name -> Go-to-statement

    "GO" "TO"? "MORE-LABELS" -> Go-to-statement

    "GO" "TO"? Procedure-name+ "DEPENDING" "ON"? //
    Identifier
	-> Go-to-statement

    Paragraph-name "." "GO" "TO"? "." -> Altered-goto

    "IF" Condition "THEN"? Statement+ | ("NEXT" "SENTENCE") //
    ("ELSE" Statement+ | ("NEXT" "SENTENCE"))? "END-IF"?
	-> If-statement

    "INITIALIZE" Identifier+ //
    ("REPLACING" ("ALPHABETIC" | "ALPHANUMERIC" | "NUMERIC" | "ALPHANUMERIC-EDITED" | "NUMERIC-EDITED" | "DBCS" | "EGCS" "DATA"? "BY" Identifier | Literal)+)?
	-> Initialize-statement

    "INSPECT" Identifier "TALLYING" //
    (Identifier "FOR" (("CHARACTERS" Inspect-statement-phrase-1*) | ("ALL" | "LEADING" (Identifier | Literal Inspect-statement-phrase-1*)+))+)+
	-> Inspect-statement

    "INSPECT" Identifier "CONVERTING" Identifier | Literal "TO" //
    Identifier | Literal Inspect-statement-phrase-1*
	-> Inspect-statement

    "INSPECT" Identifier "TALLYING" //
    (Identifier "FOR" (("CHARACTERS" Inspect-statement-phrase-1*) | ("ALL" | "LEADING" (Identifier | Literal Inspect-statement-phrase-1*)+))+)+ "REPLACING" //
    (("CHARACTERS" "BY" Identifier | Literal Inspect-statement-phrase-1*) | ("ALL" | "LEADING" | "FIRST" (Identifier | Literal "BY" Identifier | Literal Inspect-statement-phrase-1*)+))+
	-> Inspect-statement

    "INSPECT" Identifier "REPLACING" //
    (("CHARACTERS" "BY" Identifier | Literal Inspect-statement-phrase-1*) | ("ALL" | "LEADING" | "FIRST" (Identifier | Literal "BY" Identifier | Literal Inspect-statement-phrase-1*)+))+
	-> Inspect-statement

    "BEFORE" | "AFTER" "INITIAL"? Identifier | Literal -> Inspect-statement-phrase-1

    "MERGE" File-name ("ON"? "ASCENDING" | "DESCENDING" "KEY"? Data-name+)+ //
    ("COLLATING"? "SEQUENCE" "IS"? Alphabet-name)? "USING" File-name File-name+ //
    ("OUTPUT" "PROCEDURE" "IS"? Procedure-name ("THROUGH" | "THRU" Procedure-name)?) | ("GIVING" File-name+)
	-> Merge-statement

    "MOVE" Identifier | Literal "TO" Identifier+ -> Move-statement

    "MOVE" "CORRESPONDING" | "CORR" Identifier "TO" Identifier -> Move-statement

    "MULTIPLY" Identifier | Literal "BY" (Identifier "ROUNDED"?)+ //
    ("ON"? "SIZE" "ERROR" Imperative-statement)? //
    ("NOT" "ON"? "SIZE" "ERROR" Imperative-statement)? //
    "END-MULTIPLY"?
	-> Multiply-statement

    "MULTIPLY" Identifier | Literal "BY" Identifier | Literal //
    "GIVING" (Identifier "ROUNDED"?)+ //
    ("ON"? "SIZE" "ERROR" Imperative-statement)? //
    ("NOT" "ON"? "SIZE" "ERROR" Imperative-statement)? //
    "END-MULTIPLY"?
	-> Multiply-statement

    "OPEN" (("INPUT" (File-name ("REVERSED" | ("WITH"? "NO" "REWIND"))?)+) | ("OUTPUT" (File-name ("WITH"? "NO" "REWIND")?)+) | ("I-O" File-name+) | ("EXTEND" File-name+))+ -> Open-statement

    "OPEN" (("INPUT" File-name+) | ("OUTPUT" File-name+) | ("I-O" File-name+) | ("EXTEND" File-name+))+ -> Open-statement

    "PERFORM" //
    (Procedure-name ("THROUGH" | "THRU" Procedure-name)?) | (Imperative-statement "END-PERFORM")
	-> Perform-statement

    "PERFORM" (Procedure-name ("THROUGH" | "THRU" Procedure-name)? Perform-statement-varying-phrase Perform-statement-after-phrase) | (Perform-statement-varying-phrase Imperative-statement "END-PERFORM") -> Perform-statement

    "PERFORM" (Procedure-name ("THROUGH" | "THRU" Procedure-name)? Identifier | Integer "TIMES") | (Identifier | Integer "TIMES" Imperative-statement "END-PERFORM") -> Perform-statement

    "PERFORM" //
    (Procedure-name ("THROUGH" | "THRU" Procedure-name)? Perform-statement-phrase-1) | (Perform-statement-phrase-1 Imperative-statement "END-PERFORM")
	-> Perform-statement

    ("WITH"? "TEST" "BEFORE" | "AFTER")? "UNTIL" Condition -> Perform-statement-phrase-1

    ("WITH"? "TEST" "BEFORE" | "AFTER")? "VARYING" Identifier | Index-name "FROM" Identifier | Index-name | Literal "BY" Identifier | Literal "UNTIL" //
    Condition
	-> Perform-statement-varying-phrase

    ("AFTER" Identifier | Index-name "FROM" Identifier | Index-name | Literal "BY" Identifier | Literal "UNTIL" Condition)* -> Perform-statement-after-phrase

    "READ" File-name "NEXT"? "RECORD"? //
    ("INTO" Identifier)? //
    ("AT"? "END" Imperative-statement)? //
    ("NOT" "AT"? "END" Imperative-statement)? "END-READ"?
	-> Read-statement

    "READ" File-name "RECORD"? ("INTO" Identifier)? //
    ("KEY" "IS"? Data-name)? //
    ("INVALID" "KEY"? Imperative-statement)? //
    ("NOT" "INVALID" "KEY"? Imperative-statement)? "END-READ"?
	-> Read-statement

    "RELEASE" Record-name ("FROM" Identifier)? -> Release-statement

    "RETURN" File-name "RECORD"? ("INTO" Identifier)? //
    "AT"? "END" Imperative-statement //
    ("NOT" "AT"? "END" Imperative-statement)? "END-RETURN"?
	-> Return-statement

    "REWRITE" Record-name ("FROM" Identifier)? //
    ("INVALID" "KEY"? Imperative-statement)? //
    ("NOT" "INVALID" "KEY"? Imperative-statement)? //
    "END-REWRITE"?
	-> Rewrite-statement

    "SEARCH" Identifier ("VARYING" Identifier | Index-name)? //
    ("AT"? "END" Imperative-statement)? //
    ("WHEN" Condition Imperative-statement | "NEXT-SENTENCE")+ //
    "END-SEARCH"?
	-> Search-statement

    "SEARCH" "ALL" Identifier ("AT"? "END" Imperative-statement)? //
    "WHEN" (Data-name "IS"? ("EQUAL" "TO"?) | "=" Identifier | Literal | Arithmetic-expression) | Condition-name //
    ("AND" (Data-name "IS"? ("EQUAL" "TO"?) | "=" Identifier | Literal | Arithmetic-expression) | Condition-name)* //
    Imperative-statement | ("NEXT" "SENTENCE") "END-SEARCH"?
	-> Search-statement

    "SET" (Index-name | Identifier)+ "TO" Index-name | Identifier | Integer -> Set-statement

    "SET" Index-name+ ("UP" "BY") | ("DOWN" "BY") Identifier | Integer -> Set-statement

    "SET" (Mnemonic-name+ "TO" "ON" | "OFF")+ -> Set-statement

    "SET" Condition-name+ "TO" "TRUE" -> Set-statement

    "SET" (Identifier | ("ADDRESS" "OF" Identifier))+ //
    "TO" Identifier | ("ADDRESS" "OF" Identifier) | "NULL" | "NULLS"
	-> Set-statement

    "SORT" File-name ("ON"? "ASCENDING" | "DESCENDING" "KEY"? Data-name+)+ //
    ("WITH"? "DUPLICATES" "IN"? "ORDER"?)? //
    ("COLLATING"? "SEQUENCE" "IS"? Alphabet-name)? //
    ("USING" File-name+) | ("INPUT" "PROCEDURE" "IS"? Procedure-name ("THROUGH" | "THRU" Procedure-name)?) //
    ("GIVING" File-name+) | ("OUTPUT" "PROCEDURE" "IS"? Procedure-name ("THROUGH" | "THRU" Procedure-name)?)
	-> Sort-statement

    "START" File-name //
    ("KEY" "IS"? ("EQUAL" "TO"?) | "=" | ("GREATER" "THAN"?) | ">" | ("NOT" "LESS" "THAN"?) | ("NOT" "<") | ("GREATER" "THAN"? "OR" "EQUAL" "TO"?) | ">=" Data-name)? //
    ("INVALID" "KEY"? Imperative-statement)? //
    ("NOT" "INVALID" "KEY"? Imperative-statement)? "END-START"?
	-> Start-statement

    "STOP" "RUN" | Literal -> Stop-statement

    "STRING" //
    ((Identifier | Literal)+ "DELIMITED" "BY"? Identifier | Literal | "SIZE")+ //
    "INTO" Identifier ("WITH"? "POINTER" Identifier)? //
    ("ON"? "OVERFLOW" Imperative-statement)? //
    ("NOT" "ON"? "OVERFLOW" Imperative-statement)? //
    "END-STRING"?
	-> String-statement

    "SUBTRACT" (Identifier | Literal)+ "FROM" //
    (Identifier "ROUNDED"?)+ //
    ("ON"? "SIZE" "ERROR" Imperative-statement)? //
    ("NOT" "ON"? "SIZE" "ERROR" Imperative-statement)? //
    "END-SUBTRACT"?
	-> Subtract-statement

    "SUBTRACT" (Identifier | Literal)+ "FROM" Identifier | Literal //
    "GIVING" (Identifier "ROUNDED"?)+ //
    ("ON"? "SIZE" "ERROR" Imperative-statement)? //
    ("NOT" "ON"? "SIZE" "ERROR" Imperative-statement)? //
    "END-SUBTRACT"?
	-> Subtract-statement

    "SUBTRACT" "CORRESPONDING" | "CORR" Identifier "FROM" //
    Identifier "ROUNDED"? //
    ("ON"? "SIZE" "ERROR" Imperative-statement)? //
    ("NOT" "ON"? "SIZE" "ERROR" Imperative-statement)? //
    "END-SUBTRACT"?
	-> Subtract-statement

    "UNSTRING" Identifier //
    ("DELIMITED" "BY"? "ALL"? Identifier | Literal ("OR" "ALL"? Identifier | Literal)*)? "INTO" //
    (Identifier ("DELIMITER" "IN"? Identifier)? ("COUNT" "IN"? Identifier)?)+ //
    ("WITH"? "POINTER" Identifier)? ("TALLYING" "IN"? Identifier)? //
    ("ON"? "OVERFLOW" Imperative-statement)? ("NOT" "ON"? "OVERFLOW" Imperative-statement)? //
    "END-UNSTRING"?
	-> Unstring-statement

    "WRITE" Record-name ("FROM" Identifier)? //
    (("BEFORE" | "AFTER" "ADVANCING"? (Identifier | Integer ("LINE" | "LINES")?) | Mnemonic-name | "PAGE")? Write-statement-phrase) | (("INVALID" "KEY"? Imperative-statement)? ("NOT" "INVALID" "KEY"? Imperative-statement)?) "END-WRITE"?
	-> Write-statement

    "WRITE" Record-name ("FROM" Identifier)? //
    ("INVALID" "KEY"? Imperative-statement)? //
    ("NOT" "INVALID" "KEY"? Imperative-statement)? //
    "END-WRITE"?
	-> Write-statement

    "WRITE" Record-name ("FROM" Identifier)? "END-WRITE"? -> Write-statement

    ("AT"? "END-OF-PAGE" | "EOP" Imperative-statement)? ("NOT" "AT"? "END-OF-PAGE" | "EOP" Imperative-statement)? -> Write-statement-phrase

    Sequence-number? "BASIS" Basis-name | Literal -> Basis-statement

    "CBL" | "PROCESS" Options-list? -> Cbl-process-statement

    "*CONTROL" | "*CBL" ("SOURCE" | "NOSOURCE" | "LIST" | "NOLIST" | "MAP" | "NOMAP")+ "."? -> Control-cbl-statement

    "COPY" Text-name | Literal ("OF" | "IN" Library-name | Literal)? //
    "SUPPRESS"? //
    ("REPLACING" (Operand "BY" Operand)+)? "."
	-> Copy-statement

    Sequence-number? "DELETE" Sequence-number-field -> Delete-compiler-directing-statement

    "EJECT" "."? -> Eject-statement

    "ENTER" Language-name Routine-name? "." -> Enter-statement

    Sequence-number? "INSERT" Sequence-number-field -> Insert-statement

    "READY" | "RESET" "TRACE" "." -> Ready-or-reset-trace-statement

    "REPLACE" ("=" "=" Pseudo-text "=" "=" "BY" "=" "=" Pseudo-text "=" "=")+ "." -> Replace-statement

    "REPLACE" "OFF" "." -> Replace-statement

    "SERVICE" "LABEL" -> Service-label-statement

    "SERVICE" "RELOAD" Identifier -> Service-reload-statement

    "SKIP1" | "SKIP2" | "SKIP3" "."? -> Skip1-2-3-statement

    "TITLE" Literal "."? -> Title-statement

    "USE" "GLOBAL"? "AFTER" "STANDARD"? "EXCEPTION" | "ERROR" "PROCEDURE" //
    "ON"? File-name+ | "INPUT" | "OUTPUT" | "I-O" | "EXTEND"
	-> Use-statement

    "USE" "GLOBAL"? "AFTER" "STANDARD"? ("BEGINNING" | "ENDING")? //
    ("FILE" | "REEL" | "UNIT")? "LABEL" "PROCEDURE" "ON"? File-name+ | "INPUT" | "OUTPUT" | "I-O" | "EXTEND"
	-> Use-statement

    "USE" "FOR"? "DEGUGGING" "ON"? Procedure-name+ | ("ALL" "PROCEDURES") -> Use-statement






