%%
%% Classification of user-defined words.
%% Encoding Table 3. in Section 1.3.
%%

resolve
 Alphabet-name
as
 Alphabetic-user-defined-word
;

resolve
 Class-name 
as
 Alphabetic-user-defined-word
;

resolve
 Condition-name 
as 
 Alphabetic-user-defined-word
;

resolve
 Data-name
as
 Alphabetic-user-defined-word
;

resolve
 File-name 
as
 Alphabetic-user-defined-word
;

resolve
 Index-name 
as 
 Alphabetic-user-defined-word
;

resolve
 Mnemonic-name 
as
 Alphabetic-user-defined-word
;

resolve
 Record-name 
as
 Alphabetic-user-defined-word
;

resolve
 Routine-name 
as
 Alphabetic-user-defined-word
;

resolve
 Symbolic-character 
as
 Alphabetic-user-defined-word
;

resolve
 Library-name 
as
 User-defined-word
;

resolve
 Program-name 
as
 User-defined-word
;

resolve
 Text-name 
as
 User-defined-word
;

resolve
 Paragraph-name 
as
 User-defined-word
;

resolve
 Section-name 
as
 User-defined-word
;

%%
%% It turns out that record-names can be qualified data names rather
%% than user-defined words. Are there any other classes like this?
%% Thus, the explanation of the WRITE statement is in conflict with the
%% table classifying user-defined words. This a serious semantic error.
%% Note that this problem is not equivalent to the problem with data-name
%% versus qualified-data-name because data-name and record-name are
%% uncomparable bottom sorts.
%%

%%redirect
focus on
 sort Record-name
do
 (
 seperate
  Alphabetic-user-defined-word
 as
  Qualified-data-name-2
 ;

 unify
  Qualified-data-name-2
 to
  Qualified-data-name
 )
;

%%
%% Identify all kinds of system names as enumerated in the reference.
%%

resolve
 Computer-name 
as 
 System-name
;

resolve
 Language-name 
as
 System-name
;

resolve
 Environment-name 
as
 System-name
;

resolve
 Assignment-name 
as
 System-name
;


%%
%% Define some other kinds of names not covered so far.
%%

resolve
 Basis-name 
as
 Program-name
;


%%
%% Figurative constants are defined in accordance to the description
%% given in the reference. However, we do not cope with symbolic characters.
%%

introduce
 Figurative-constant
as
   "ZERO" | "ZEROS" | "ZEROES" //
   | "SPACE" | "SPACES" //
   | "HIGH-VALUE" | "HIGH-VALUES" // 
   | "LOW-VALUE" | "LOW-VALUES" //
   | "QUOTE" | "QUOTES" //
   | ( "ALL" Literal ) //
   | "NULL" | "NULLS"
;

%%
%% From the reference:
%%      A literal is a character-string whose value is specified either by the 
%%      characters of which it is composed, or by the use of a figurative 
%%      constant.  (See "Figurative Constants" in topic 1.1.1.8.)  There are
%%      three types of literals:  nonnumeric, numeric, and DBCS.  
%%

resolve
 Literal
as
  Nonnumeric
   | Numeric
   | Dbcs
   | Figurative-constant
;


%%
%% Special registers are not defined by diagrams but in text.
%%
%% From the reference:
%%  Special registers are reserved words that name storage areas generated by 
%%| the compiler.  Their primary use is to store information produced through 
%%| specific COBOL features.  Each such storage area has a fixed name, and 
%%| need not be defined within the program. 
%%
%%| In the general formats of this specification, a special register can be 
%%| used wherever a data-name or identifier is specified, provided that the 
%%| special register is the same category as the data-name or identifier, and 
%%| the use of a special register is not explicitly prohibited.  If 
%%| qualification is allowed, special registers can be qualified as necessary 
%%| to provide uniqueness.  (For more information, see "Qualification" in 
%%| topic 1.5.1.1.) 
%%
%% ...
%%
%%| o   ADDRESS OF 
%%| o   DEBUG-ITEM 
%%| o   LENGTH OF 
%%| o   LINAGE-COUNTER 
%%| o   RETURN-CODE 
%%| o   SHIFT-OUT and SHIFT-IN 
%%| o   SORT-CONTROL 
%%| o   SORT-CORE-SIZE 
%%| o   SORT-FILE-SIZE 
%%| o   SORT-MESSAGE 
%%| o   SORT-MODE-SIZE 
%%| o   SORT-RETURN 
%%| o   TALLY 
%%| o   WHEN-COMPILED 
%%
%%There is already a form of identifier related to LINAGE-COUNTER.
%%The syntax (IN vs. OF) used there is not clear from the description
%%of the special register. Note also that certain phrases are part of
%%the CALL statement which explore ADDRESS OF and LENGTH OF.
%%

introduce
 Special-register 
as
 ( "ADDRESS" "OF" Data-name ) //
 | "DEBUG-ITEM" //
 | ( "LENGTH" "OF" Identifier ) //
 | "RETURN-CODE" //
 | "SHIFT-OUT" //
 | "SHIFT-IN" //
 | "SORT-CONTROL" // 
 | "SORT-CORE-SIZE" //
 | "SORT-FILE-SIZE" //
 | "SORT-MESSAGE" //
 | "SORT-MODE-SIZE" //
 | "SORT-RETURN" //
 | "TALLY" //
 | "WHEN-COMPILED"
;


%%
%% Changed in Version 1.0.1:
%%  identifier -> qualified-data-name
%%

include
 Special-register
in
 Qualified-data-name

%% next: Modularisation




