#! /bin/sh

#    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, The Netherlands.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

# $Id$
#
# Author: Merijn de Jonge (mdejonge@cwi.nl)

# normalize-sdf -- normalizes an SDF2 module to kernel SDF2
# 
# usage:
#    normalize-sdf [-h] [-i file] [-m name] [-o file] [-u] [-V]
# 
# where
#    -h display usage information
#    -i file read input from file (standard input when unspecified)
#    -m use name as top module (defaults to Main)
#    -o write output to file (standard output when unspecified)
#    -u don't unparse the output
#    -V print version information

PT_SUPPORT=__PT_SUPPORT__
BINDIR=__BINDIR__
SGLR=__SGLR__

PKGDATA=__PKGDATADIR__

PATH=${BINDIR}:${PT_SUPPORT}/bin:${SGLR}/bin:${PATH}

SGLR=sglr
ASOURCE=asource
NORMALIZER=normalizer
SDF2TABLE=${PKGDATA}/Sdf2.baf

TOPMODULE=Main
INPUT=-
OUTPUT=-
UNPARSE=true

tmp=/tmp/normalize-sdf.$$
trap "rm -f $tmp.*" 0 1 2 3 4 5 6 7 8 9 10

usage() {
   cat <<ENDCAT >&2
normalize-sdf -- normalizes an SDF2 module to kernel SDF2

usage:
   normalize-sdf [-h] [-i file] [-m name] [-o file] [-u] [-V]

where
   -h display usage information
   -i file read input from file (standard input when unspecified)
   -m use name as top module (defaults to Main)
   -o write output to file (standard output when unspecified)
   -u don't unparse the output
   -V print version information
ENDCAT
}

version () {
   echo "$0 $VERSION" >&2
}

while getopts hi:m:o:uV c
do
   case  $c in
      h) usage ; exit 0 ;;
      i) INPUT=${OPTARG};;
      m) TOPMODULE=${OPTARG};;
      o) OUTPUT=${OPTARG} ;;
      u) UNPARSE=false;;
      V) version; exit 0;;
      \?) usage; exit 1;;
   esac
done

cat ${INPUT} | ${SGLR} -p ${SDF2TABLE} -1 > $tmp.parsed || exit 1

CMD="${NORMALIZER} -m ${TOPMODULE} -i $tmp.parsed -o -"


if [ "a${UNPARSE}" = "atrue" ]; then
   CMD="$CMD | asource"
fi

if [ "a${OUTPUT}" != "a-" -a "a${OUTPUT}" != "a" ]; then
   CMD="$CMD > $OUTPUT"
fi

eval ${CMD}


