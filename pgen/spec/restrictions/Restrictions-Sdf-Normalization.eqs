equations

%% \noindent
%% Merging and ordering of grammars.

  [] restrictions restr*1  <> restrictions restr*2 = <restrictions restr*1 restr*2, (/)>
  [] restrictions restr* <> syntax p* = <syntax p*, restrictions restr*>

  [] restr*1 'a1 _A 'a2 -/- las1 restr*2 'b1 _A 'b2 -/- las2 restr*3 =
     restr*1 _A -/- las1 | las2 'a1 'a2 -/- las1 restr*2 'b1 'b2 -/- las2 restr*3

  [] restr*1 -/- las restr*2 = restr*1 restr*2

%% Converting binary union to lists of lookaheads.

  []    'a -/- cc            = 'a -/- [[ cc ]]
  []    'a -/- cc . las      = 'a -/- [[ cc . las]]

  [las-1'1]    cc . cc'             = cc . [[cc']]

  [las-1'2]    cc . cc'. las             = cc . [[cc' . las]]

  []    cc       | las       = [[cc]] | las
  []    las      | cc        = las | [[cc]]
  []    cc . las | las'      = [[cc . las]] | las'
  []    las      | cc . las' = las | [[cc . las']]

  []    [[la*1]] | [[la*2]] = [[la*1, la*2]]

%% Normalizing lookaheads

  []    [] . las   = []
  []    cc . cc'   = cc when cc' = ~[]
  []    cc . [[ ]] = cc

  []    [[la*1, [], la*2]] = [[la*1, la*2]]

  []    [[cc2 . las, la*1, cc1, la*2]] =
        [[cc1, cc2 . las, la*1, la*2]]

  []    [[la*1, cc1, la*2, cc2, la*3]] =
        [[la*1, cc1 \/ cc2, la*2, la*3]]

  []    cc1 /\ cc2 = cc3, cc3 != []
        ==================================
        [[cc1, la*2, cc2 . las, la*3]] =
        [[cc1, la*2, cc2 / cc3 . las, la*3]]

  []    cc1 /\ cc2 = cc3, cc3 != []
        =======================================================================
        [[la*1, cc1 . las1, la*2, cc2 . las2, la*3]] =
        [[la*1, cc1 / cc3 . las1, cc3 . (las1 | las2), la*2, cc2 / cc3 . las2, la*3]]

%% Filter attributes removes the attributes except for the prefer and avoid attributes.

  [fa-1] filter-attributes({attr*1, prefer, attr*2}) = {prefer}

  [fa-2] filter-attributes({attr*1, avoid, attr*2}) = {avoid}
