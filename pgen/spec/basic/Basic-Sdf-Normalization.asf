%%%% $Id$

equations

%% \noindent
%% The normalization function $\mfun{b}\sem{\_}$ integrates
%% lexical and context-free syntax. It applies the auxiliary function
%% $\mfun{b}_{\mfun{aux}}$ to each subgrammar
%% of a grammar to transform lexical and context-free sections
%% into normal production sections by renaming symbols and
%% separating context-free symbols by $\cfsort{{\tt LAYOUT}?}$, which
%% entails that two tokens can optionally be separated by $\cfsort{{\tt LAYOUT}?}$.
%% Context-free layout is a list of lexical layout. Concatenation of layout
%% is defined by the production added by the function $\mfun{b}\sem{\_}$.

   [0]
        p = <LAYOUT-CF> <LAYOUT-CF> -> <LAYOUT-CF> {left}
        =================================================
        b[[_G]] = syntax p b-aux[[_G]]

%% The default rule declares that unless otherwise stated
%% $\mfun{b}_{\mfun{aux}}$ does not
%% affect a grammar. Below we deal with the exceptions.

   [0] b-aux[[(/)]]        = (/)
   [0] b-aux[[_G1 _G2]]    = b-aux[[_G1]] b-aux[[_G2]]
   [default-0] b-aux[[_G]] = _G

%% \subsubsection{Lexical Syntax}

%% Lexical syntax grammars are translated to normal syntax grammars by encoding
%% the symbols of the grammar to $\lexsort{\Sym{A}}$ symbols.
%% Furthermore, for each symbol appearing in a lexical syntax section an
%% injection from the lexical into the context-free symbol is added.

   [0] b-aux[[lexical syntax p*]] = <syntax p* -LEX>

   [0] <'a      -LEXs>   =            when 'a =
   [0] <_A      -LEXs>   = <_A -LEX>
   [0] <'a+ 'b+ -LEXs>   = <'a+ -LEXs> ++ <'b+ -LEXs>
   [0] <'a -> _A! -LEX>   = <'a -LEXs> -> <_A-LEX> !
   [0] <'a -> _A! -LEXs> = <'a -> _A! -LEX> <_A -LEXs> -> <_A-CF>
   [0] <p*        -LEXs> =   when p* =
   [0] <p+1 p+2   -LEXs> = <p+1 -LEXs> ++ <p+2 -LEXs>
   [0] <syntax p* -LEX>  = syntax <p* -LEXs>
   [0] <_G1 _G2-LEX>     = <_G1-LEX> <_G2-LEX>
   [0] <(/)-LEX>         = (/)

%% \subsubsection{Context-free Syntax}
%%
%% Context-free syntax is treated similarly to lexical syntax. All symbols
%% in the production are mapped to $\cfsort{\Sym{A}}$ symbols. The important
%% difference is that each adjacent pair of symbols in the left-hand side
%% of a production is separated by the symbol $\cfsort{{\tt LAYOUT}?}$.
   [0] b-aux[[context-free syntax p*]] = <syntax p* -CF>

   [0] <'a      -CFs>  =         when 'a =
   [0] <_A      -CFs>  = <_A-CF>
   [0] <'a+ 'b+ -CFs>  = <'a+ -CFs> ++ <LAYOUT?-CF> ++ <'b+ -CFs>
   [0] <'a -> _A!-CF>   = <'a -CFs> -> <_A-CF>!
   [0] < p      -CFs>   = <p -CF>
   [0] <p*      -CFs>   =                        when p* =
   [0] <p+1 p+2 -CFs>   = <p+1 -CFs> ++ <p+2 -CFs>
   [0] <syntax p*-CF>   = syntax <p* -CFs>
   [0] <_G1 _G2-CF>     = <_G1-CF> <_G2-CF>
   [0] <(/)-CF>         = (/)

%% \subsubsection{Variables}
%%
%% Variables and lexical variables grammars introduce tokens that have the status
%% of variables. The symbol constructor $\varsort{\Sym{A}}$ is used to denote
%% variables over the symbol $\Sym{A}$. The left-hand sides
%% of variable productions are interpreted as lexical syntax. The lexical value
%% produced by such a left-hand side is given the type of a variable over the
%% symbol in the right-hand side of the production.
%% For each production in a variables grammar, two productions are generated.
%% The first interprets the left-hand side of the production as a lexical pattern, i.e.,
%% the symbols on the left-hand side are lexical symbols and no layout between symbols
%% can occur. The right-hand side is $\varsort{\cfsort{\Sym{A}}}$ indicating that the pattern
%% is a variable over the context-free symbols $\Sym{A}$. The second production injects
%% $\cfsort{\Sym{A}}$ variables into $\cfsort{\Sym{A}}$ such that a variable can occur
%% whereever an $\cfsort{\Sym{A}}$ can occur.

   [0] b-aux[[variables p*]]     = syntax <p* -VARs>
   [0] < -VARs>                  =
   [0] <p+1 p+2-VARs>            = <p+1-VARs> ++ <p+2-VARs>
   [0] <'a -> _A !-VARs>         = <'a-LEXs> -> <<_A-CF>-VAR> !
                                    <<_A-CF>-VAR> -> <_A-CF>

%% Lexical variables are treated similarly, but their
%% result sort is the corresponding lexical sort.

   [0] b-aux[[lexical variables p*]] = syntax <p* -LEXVARs>
   [0] < -LEXVARs>               =
   [0] <p+1 p+2-LEXVARs>         = <p+1-LEXVARs> ++ <p+2-LEXVARs>
   [0] <'a -> _A !-LEXVARs>      = <'a-LEXs> -> <<_A-LEX>-VAR> !
                                    <<_A-LEX>-VAR> -> <_A-LEX> !

%% \subsubsection{Ordering Grammars}

%% The following equations specify the ordering of grammars, where the following order
%% is obtained:
%% lexical syntax, context-free syntax, lexical variables, and variables.
%% We only show two of the equations, the other cases are similar.

   [0]
        _G1 = context-free syntax p*1, _G2 = context-free syntax p*2
        ============================================================
        _G1 <> _G2 = <context-free syntax p*1 p*2, (/)>
   [0]
        _G1 = context-free syntax p*1, _G2 = lexical syntax p*2
        ==========================================================
        _G1 <> _G2 = <lexical syntax p*2, context-free syntax p*1>

%% \def\FORGET{

   [0]
        _G1 = lexical syntax p*1, _G2 = lexical syntax p*2
        ==================================================
        _G1 <> _G2 = <lexical syntax p*1 p*2, (/)>
   [0]
        _G1 = lexical variables p*1, _G2 = lexical variables p*2
        ========================================================
        _G1 <> _G2 = <lexical variables p*1 p*2, (/)>
   [0]
        _G1 = variables p*1, _G2 = variables p*2
        ========================================
        _G1 <> _G2 = <variables p*1 p*2, (/)>
%%}



%%\def\FORGET{
   [0]
        _G1 = lexical variables p*1, _G2 = context-free syntax p*2
        =============================================================
        _G1 <> _G2 = <context-free syntax p*2, lexical variables p*1>
   [0]
        _G1 = variables p*1, _G2 = context-free syntax p*2
        =====================================================
        _G1 <> _G2 = <context-free syntax p*2, variables p*1>
   [0]
        _G1 = lexical variables p*1, _G2 = lexical syntax p*2
        ========================================================
        _G1 <> _G2 = <lexical syntax p*2, lexical variables p*1>
   [0]
        _G1 = variables p*1, _G2 = lexical variables p*2
        ===================================================
        _G1 <> _G2 = <lexical variables p*2, variables p*1>

%%}

%%
