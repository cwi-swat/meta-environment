module Modular-Sdf-Normalization
imports
        Modular-Sdf-Projection
        Kernel-Sdf-Normalization
        Grammar-Projection
exports
  context-free syntax
    "m[[" Definition "]]" "(" ModuleName ")" -> Grammar


    annotate(ModuleName, Sections)              -> Sections
    annotate(ModuleName, Section)               -> Section
    annotate(ModuleName, Grammar)               -> Grammar
    annotateprods(ModuleName, Productions)      -> Productions

    annotated(Attributes)                       -> Bool

  sorts ICL Ipair
  context-free syntax
    "<" ModuleName "," Imports ">" -> Ipair
    Ipair*                         -> ICL

    "tcl[[" Definition "]]" "(" ModuleName ")" -> ICL

hiddens
  sorts IG
  context-free syntax
    "<" Imports "," Grammar ">"                         -> IG
    imp"[[" Definition "]]" "(" Imports "," Import  ")" -> IG
    ims"[[" Definition "]]" "(" Imports "," Imports ")" -> IG
    gra"[[" Definition "]]" "(" Imports "," Grammar ")" -> IG

hiddens 
  variables
    "Mid"[0-9\']*   -> ModuleId
    "M"[0-9\']*     -> ModuleName
    "s"[0-9\']*     -> Section
    "s""*"[0-9\']*  -> Section*
    "s""+"[0-9\']*  -> Section+
    "m"[0-9\']*     -> Module
    "m*"[0-9\']*    -> Module*
    "m+"[0-9\']*    -> Module+
    "d"[0-9\']*     -> Definition
    "_i"[0-9\']*    -> Import
    "_i""*"[0-9\']* -> Import*
    "_i""+"[0-9\']* -> Import+
    "is"[0-9\']*    -> ImpSection
    "is*"[0-9\']*   -> ImpSection*
    [p][0-9\']*     -> Production
    [p]"*"[0-9\']*  -> Production*
    [p]"+"[0-9\']*  -> Production+
    "_G"[0-9\']*    -> Grammar
    "_"[ABC][0-9\']*    -> Symbol
    "'"[abc][0-9\']*    -> Symbol*
    "'"[abc]"+"[0-9\']* -> Symbol+ 
    "!"[0-9\']*         -> Attributes
    "attr""*"[0-9\']*   -> {Attribute ","}* 
    "'r"[0-9\']*        -> Renamings   