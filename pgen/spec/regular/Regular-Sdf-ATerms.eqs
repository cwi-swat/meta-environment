%%%% $Id$

equations

%% Encoding regular expressions.

  [] aterm( ()         ) = empty
  [] aterm( (_A 'a+)   ) = seq( atermlist(_A 'a+)  )
  [] aterm( _A ?       ) = opt( aterm(_A) )
  [] aterm( _A +       ) = iter( aterm(_A) )
  [] aterm( _A *       ) = iter-star( aterm(_A) )
  [] aterm( {_A _B}+   ) = iter-sep( aterm(_A), aterm(_B) )
  [] aterm( {_A _B}*   ) = iter-star-sep( aterm(_A), aterm(_B) )
  [] aterm( {_A} n +   ) = iter-n( aterm(_A), con(n) )
  [] aterm( {_A _B} n +) = iter-sep-n( aterm(_A), aterm(_B), con(n) )
  [] aterm( Set[_A]    ) = set( aterm(_A) )
  [] aterm( _A # _B    ) = pair( aterm(_A), aterm(_B) )
  [] aterm( ('a => _B) ) = func( atermlist('a), aterm(_B) )
  [] aterm( _A | _B    ) = alt(aterm(_A) , aterm(_B) )
  [] aterm( <<'a>>     ) = perm( atermlist('a) )

%% Decoding regular expressions.

  [] symbol(empty)                  = ()
  [] symbol(seq(Tl))                =  (_A 'a+) when symbols(Tl) = _A 'a+
  [] symbol(opt(T1))                = symbol(T1) ?
  [] symbol(iter(T1))               = symbol(T1) +
  [] symbol(iter-star(T1))          = symbol(T1) *
  [] symbol(iter-sep(T1, T2))       = {symbol(T1) symbol(T2)}+
  [] symbol(iter-star-sep(T1, T2))  = {symbol(T1) symbol(T2)}*
  [] symbol(iter-n( T1, n))         = {symbol(T1)} n +
  [] symbol(iter-sep-n(T1, T2, n))  = {symbol(T1) symbol(T2)} n +
  [] symbol(set(T1))                = Set[symbol(T1)]
  [] symbol(pair(T1, T2))           = symbol(T1) # symbol(T2)
  [] symbol(func(Tl1, T2))          = (symbols(Tl1) => symbol(T2))
  [] symbol(alt(T1, T2))            = symbol(T1) | symbol(T2)
  [] symbol(perm(Tl))               = << symbols(Tl) >>
