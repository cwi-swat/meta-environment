module CountProds

imports
  sdf2/syntax/Sdf2-Syntax basic/Integers

exports
  sorts IntPair
  context-free syntax
    "kernel" "functions"       Integer 
    "lexical" "functions"      Integer 
    "context-free" "functions" Integer 
    "reject" "functions"       Integer  
    "follow" "restrictions"    Integer 
    "priorities"               Integer
    "number" "of" "lhs"        Integer 
    "total" "lhs" "size"       Integer 
    "maximum" "lhs" "size"     Integer 
    "lists" "in" "lhs"         Integer
    "literals" "in" "lhs"      Integer -> IntPair

    "count-prods" "(" SDF ")" -> IntPair

hiddens
  sorts LhsInfo
  context-free syntax
    "(" Integer "," Integer "," Integer "," Integer "," Integer ")" -> LhsInfo 
  context-free syntax
    "count-kernel-prods" (Definition, Integer)      -> Integer {traversal(accu, top-down)}
    "count-kernel-prods" (Grammar, Integer)         -> Integer {traversal(accu, top-down)}
    "count-kernel-prods" (Production, Integer)      -> Integer {traversal(accu, top-down)}
    "count-lex-prods" (Definition, Integer)         -> Integer {traversal(accu, top-down)}
    "count-lex-prods" (Grammar, Integer)            -> Integer {traversal(accu, top-down)}
    "count-lex-prods" (Production, Integer)         -> Integer {traversal(accu, top-down)}
    "count-cf-prods" (Definition, Integer)          -> Integer {traversal(accu, top-down)}
    "count-cf-prods" (Grammar, Integer)             -> Integer {traversal(accu, top-down)}
    "count-cf-prods" (Production, Integer)          -> Integer {traversal(accu, top-down)}
    "count-reject-prods" (Definition, Integer)      -> Integer {traversal(accu, top-down)}
    "count-reject-prods" (Production, Integer)      -> Integer {traversal(accu, top-down)}
    "count-follow-restricts" (Definition, Integer)  -> Integer {traversal(accu, top-down)}
    "count-follow-restricts" (Restriction, Integer) -> Integer {traversal(accu, top-down)}
    "count-priorities" (Definition, Integer)        -> Integer {traversal(accu, top-down)}
    "count-priorities" (Grammar, Integer)           -> Integer {traversal(accu, top-down)}
    "count-priorities" (Production, Integer)        -> Integer {traversal(accu, top-down)}
    "count-associativities" (Definition, Integer)   -> Integer {traversal(accu, top-down)}
    "count-associativities" (Grammar, Integer)      -> Integer {traversal(accu, top-down)}
    "count-associativities" (Production, Integer)   -> Integer {traversal(accu, top-down)}
    "lhs-size-info" (Definition, LhsInfo)       -> LhsInfo {traversal(accu, top-down)}
    "lhs-size-info" (Grammar, LhsInfo)          -> LhsInfo {traversal(accu, top-down)}
    "lhs-size-info" (Production, LhsInfo)       -> LhsInfo {traversal(accu, top-down)}
    "calc-lhs-size" (Production)                -> Integer
    "nr-of-symbols" (Symbol*)                   -> Integer
    "nr-of-sep-symbols" ({Symbol ","}*)         -> Integer
    "maximum" (Integer, Integer)                        -> Integer
    "count-lists" (Production, Integer)             -> Integer {traversal(accu, top-down)}
    "count-lists" (Symbol, Integer)                 -> Integer {traversal(accu, top-down)}
    "count-literals" (Production, Integer)          -> Integer {traversal(accu, top-down)}
    "count-literals" (Symbol, Integer)          -> Integer {traversal(accu, top-down)}

  variables
    "Attributes"[0-9]*  -> Attributes
    "Definition"[0-9]*  -> Definition
    "Int"[0-9]*         -> Integer
    "Lhsinfo"[0-9]*     -> LhsInfo
    "Literal"[0-9]*     -> Literal
    "Lookaheads"[0-9]*  -> Lookaheads
    "Productions"[0-9]* -> Productions
    "Production"[0-9]*  -> Production
    "Priorities"[0-9]*  -> Priorities
    "Priority"[0-9]*    -> Priority
    "Symbol"[0-9]*      -> Symbol
    "Symbols"[0-9]*     -> Symbols
    "Symbol*"[0-9]*     -> Symbol*
    "Symbol,*"[0-9]*    -> {Symbol ","}*
    "Symbol,+"[0-9]*    -> {Symbol ","}+
    "NatCon"[0-9]*      -> NatCon