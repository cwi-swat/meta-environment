%% Do not edit!!!

definition
module Main
imports sdf2/syntax/Sdf2
%%% $Id$
           
module sdf2/syntax/Character-Class
imports sdf2/syntax/Character
hiddens
  sorts CharRange CharRanges OptCharRanges 
exports
  sorts CharClass
  context-free syntax
    Character                 -> CharRange
    Character "-" Character   -> CharRange

    CharRange                 -> CharRanges
    CharRanges CharRanges     -> CharRanges {right,memo}
    "(" CharRanges ")"        -> CharRanges {bracket}
                              -> OptCharRanges
    CharRanges                -> OptCharRanges
    "[" OptCharRanges "]"     -> CharClass
    "~" CharClass             -> CharClass
    CharClass "/" CharClass   -> CharClass {left,memo}
    CharClass "/\\" CharClass -> CharClass {left,memo}
    CharClass "\\/" CharClass -> CharClass {left}
   "(" CharClass ")"          -> CharClass {bracket}  
  context-free priorities
    "~" CharClass             -> CharClass >
    CharClass "/" CharClass   -> CharClass >
    CharClass "/\\" CharClass -> CharClass >
    CharClass "\\/" CharClass -> CharClass           
%%% $Id$
                  
module sdf2/syntax/Aliases
imports sdf2/syntax/Kernel
exports
  sorts Alias Aliases
  context-free syntax
    "aliases" Aliases  -> Grammar
    Symbol "->" Symbol -> Alias
    Alias*             -> Aliases  
%%% $Id$
                
module sdf2/syntax/Basic
imports sdf2/syntax/Kernel
exports
  context-free syntax
    "lexical" "syntax"      Productions -> Grammar
    "context-free" "syntax" Productions -> Grammar
    "variables"             Productions -> Grammar
    "lexical" "variables"   Productions -> Grammar

    "<" Symbol "-CF"  ">"               -> Symbol
    "<" Symbol "-LEX" ">"               -> Symbol
    "<" Symbol "-VAR" ">"               -> Symbol

    "LAYOUT"                            -> Symbol 
%%% $Id$
                  
module sdf2/syntax/CC
imports sdf2/syntax/Character-Class sdf2/syntax/Kernel
exports
  context-free syntax
    CharClass -> Symbol     
%%% $Id$
               
module sdf2/syntax/Restrictions
imports sdf2/syntax/CC
exports
  sorts Lookahead Lookaheads Restriction Restrictions
  context-free syntax
    CharClass                    -> Lookahead
    CharClass "." Lookaheads     -> Lookahead
    Lookahead                    -> Lookaheads
    Lookaheads "|" Lookaheads    -> Lookaheads {right}
    "(" Lookaheads ")"           -> Lookaheads {bracket}
    "[[" {Lookahead ","}* "]]"   -> Lookaheads

    Symbols "-/-" Lookaheads     -> Restriction

    Restriction*                 -> Restrictions
    "restrictions" Restrictions  -> Grammar
    "reject"                     -> Attribute
    "prefer"                     -> Attribute
    "avoid"                      -> Attribute 

  context-free priorities    
    CharClass "." Lookaheads    -> Lookahead >
    Lookaheads "|" Lookaheads   -> Lookaheads
%%% $Id$
                     
module sdf2/syntax/Character
imports aterm/Layout
exports
  sorts Character NumChar ShortChar
  lexical syntax
    [\\] [0-9]+                    -> NumChar
    [a-zA-Z0-9]                    -> ShortChar
    [\\] ~[\0-\31A-Za-mo-qsu-z0-9]  -> ShortChar
  context-free syntax
    NumChar         -> Character
    ShortChar       -> Character
    "\\TOP"         -> Character
    "\\EOF"         -> Character 
    "\\BOT"         -> Character
    "\\LABEL_START" -> Character
   
%%% $Id$
                    
module sdf2/syntax/Grammars
imports aterm/Layout
exports
  sorts Grammar
  context-free syntax
    "(/)"                 -> Grammar
    Grammar Grammar       -> Grammar {assoc}
    "(" Grammar ")"       -> Grammar {bracket}    
%%% $Id$
                                                            
module sdf2/syntax/Kernel
imports aterm/ATerms sdf2/syntax/Symbols sdf2/syntax/Grammars
exports
  sorts Attribute Attributes Production Productions
  context-free syntax
   ATerm                           -> Attribute  {avoid}
    "{" {Attribute ","}* "}"       -> Attributes
                                   -> Attributes
    Symbols "->" Symbol Attributes -> Production
    Production*                    -> Productions
    "syntax" Productions           -> Grammar  
%%% $Id$
                               
module sdf2/syntax/Labels
imports sdf2/syntax/Kernel sdf2/syntax/Literals aterm/ATerms
exports
  context-free syntax
    Literal ":" Symbol   -> Symbol
module sdf2/syntax/Lifting

imports sdf2/syntax/Kernel

exports

context-free syntax

"\`" Symbol "\`"                 -> Symbol
%%% $Id$
                                                  
module sdf2/syntax/Literals
imports sdf2/syntax/Kernel aterm/Literals
exports
  sorts UQLiteral
  lexical syntax
    [a-z]                          -> UQLiteral
    [a-z][A-Za-z0-9\-]*[A-Za-z0-9] -> UQLiteral
  context-free syntax
    UQLiteral                                            -> Literal
    Literal                                              -> Symbol
    Literal "(" {Symbol ","}* ")" "->" Symbol Attributes -> Production {avoid}
%%% $Id$
                 
module sdf2/syntax/Modules
imports sdf2/syntax/Kernel sdf2/syntax/Renaming
hiddens
  sorts ModuleWord
exports
  sorts ModuleId ModuleName Import Imports
        Section Sections Module Definition ImpSection
  lexical syntax
    [A-Za-z0-9\_\-]+        -> ModuleWord
    ModuleWord              -> ModuleId
    "/" ModuleId            -> ModuleId
    ModuleWord "/" ModuleId -> ModuleId             
  context-free syntax
    Module*                                  -> Definition
    "module" ModuleName ImpSection* Sections -> Module
    "exports" Grammar            -> Section
    "hiddens" Grammar            -> Section
    Section*                     -> Sections
    ModuleId                     -> ModuleName
    ModuleId "[" Symbols "]"     -> ModuleName
    "imports" Imports            -> ImpSection
    ImpSection                   -> Grammar
    Import*                      -> Imports
    ModuleName                   -> Import
    ModuleName Renamings         -> Import
    "(" Import ")"               -> Import {bracket}   

    "id" "(" ModuleName ")"      -> Attribute 

  lexical restrictions
    ModuleWord -/- [A-Za-z0-9\_\-]
    ModuleId -/- [\/]
%%% $Id$   

module sdf2/syntax/Priority
imports sdf2/syntax/Kernel
exports
  sorts Associativity Group Priority Priorities
  context-free syntax
    "left"                                -> Associativity
    "right"                               -> Associativity
    "non-assoc"                           -> Associativity
    "assoc"                               -> Associativity
    "bracket"                             -> Attribute
    Associativity                         -> Attribute
    Production                            -> Group
    "{" Productions "}"                   -> Group
    "{" Associativity ":" Productions "}" -> Group
    {Group ">"}+                          -> Priority
    Group Associativity Group             -> Priority
    {Priority  ","}*                      -> Priorities
    "priorities"  Priorities              -> Grammar 
%%% $Id$  

module sdf2/syntax/Regular
imports sdf2/syntax/Kernel aterm/IntCon
exports
  context-free syntax
    "(" ")"                          -> Symbol
    "(" Symbol Symbol+ ")"           -> Symbol
    Symbol "?"                       -> Symbol
    Symbol "+"                       -> Symbol
    Symbol "*"                       -> Symbol
    "{" Symbol Symbol "}" "+"        -> Symbol
    "{" Symbol Symbol "}" "*"        -> Symbol
    Symbol NatCon "+"                -> Symbol
    "{" Symbol Symbol "}" NatCon "+" -> Symbol
    "Set" "[" Symbol "]"             -> Symbol
    Symbol "#" Symbol                -> Symbol {right}
    "(" Symbols "=>" Symbol ")"      -> Symbol
    Symbol "|" Symbol                -> Symbol {right}
    "<<" Symbols ">>"                -> Symbol 
    "(" Symbol "->" Symbol ")"       -> Symbol %% ELAN specific extension.
  context-free priorities
    {Symbol "?"               -> Symbol
    Symbol "*"                -> Symbol
    Symbol "+"                -> Symbol
    Symbol NatCon "+"         -> Symbol} >
    Symbol "#" Symbol         -> Symbol  >
    Symbol "|" Symbol         -> Symbol       
%%% $Id$
                                                              
module sdf2/syntax/Renaming
imports sdf2/syntax/Kernel
exports
  sorts Renaming Renamings
  context-free syntax
    "[" Renaming* "]"     -> Renamings
    Symbol     "=>" Symbol      -> Renaming
    Production "=>" Production  -> Renaming 
module sdf2/syntax/Sdf2-Syntax
imports sdf2/syntax/Kernel
        sdf2/syntax/Basic
module sdf2/syntax/Sdf2-Syntax
imports sdf2/syntax/Kernel
        sdf2/syntax/Basic
        sdf2/syntax/Modules
        sdf2/syntax/Regular
        sdf2/syntax/Lifting
        sdf2/syntax/Priority
        sdf2/syntax/CC
        sdf2/syntax/Sorts
        sdf2/syntax/Literals
        sdf2/syntax/Labels
        sdf2/syntax/Restrictions
        sdf2/syntax/Aliases
exports
  sorts SDF
  context-free syntax
    "<START>"                                   -> Symbol
    "<Start>"                                   -> Symbol
    "lexical"      "priorities" Priorities      -> Grammar
    "context-free" "priorities" Priorities      -> Grammar
    "lexical"      "restrictions" Restrictions  -> Grammar
    "context-free" "restrictions" Restrictions  -> Grammar
    "definition" Definition                     -> SDF  
  context-free priorities
    Symbol "|" Symbol  -> Symbol >
    Literal ":" Symbol -> Symbol                  
%%% $Id$

module sdf2/syntax/Sdf2

imports sdf2/syntax/Sdf2-Syntax
exports
  lexical syntax
    "LAYOUT"            -> Sort    {reject}

  context-free syntax
    "aliases"           -> UQLiteral {reject}
    "lexical"           -> UQLiteral {reject}
    "priorities"        -> UQLiteral {reject}
    "context-free"      -> UQLiteral {reject}
    "definition"        -> UQLiteral {reject}
    "syntax"            -> UQLiteral {reject}
    "variables"         -> UQLiteral {reject}
    "module"            -> UQLiteral {reject}
    "imports"           -> UQLiteral {reject}
    "exports"           -> UQLiteral {reject}
    "hiddens"           -> UQLiteral {reject}
    "left"              -> UQLiteral {reject}
    "right"             -> UQLiteral {reject}
    "assoc"             -> UQLiteral {reject}
    "non-assoc"         -> UQLiteral {reject}
    "bracket"           -> UQLiteral {reject}
    "sorts"             -> UQLiteral {reject}
    "restrictions"      -> UQLiteral {reject}

    "aliases"           -> ModuleName {reject}
    "lexical"           -> ModuleName {reject}
    "priorities"        -> ModuleName {reject}
    "context-free"      -> ModuleName {reject}
    "definition"        -> ModuleName {reject}
    "syntax"            -> ModuleName {reject}
    "variables"         -> ModuleName {reject}
    "module"            -> ModuleName {reject}
    "imports"           -> ModuleName {reject}
    "exports"           -> ModuleName {reject}
    "hiddens"           -> ModuleName {reject}
    "left"              -> ModuleName {reject}
    "right"             -> ModuleName {reject}
    "assoc"             -> ModuleName {reject}
    "non-assoc"         -> ModuleName {reject}
    "bracket"           -> ModuleName {reject}
    "sorts"             -> ModuleName {reject}
    "bracket"           -> ModuleName {reject}
    "sorts"             -> ModuleName {reject}
    "restrictions"      -> ModuleName {reject}

    Literal "(" {Symbol ","}* ")" -> Symbols {reject}
  restrictions
    <Sort -CF>
    <UQLiteral -CF>
    "aliases"
    "lexical"
    "priorities"
    "context-free"
    "definition"
    "syntax"
    "variables"
    "module"
    "imports"
    "exports"
    "hiddens"
    "left"
    "right"
    "assoc"
    "non-assoc"
    "bracket"
    "sorts"             -/- [A-Za-z0-9]
    <NatCon -CF>        -/- [0-9]
    <LAYOUT?-CF>        -/- [\ \t\n\%]
    <NumChar -CF>       -/- [0-9]
    <ModuleName -CF>    -/- [A-Za-z0-9\_\-]
%%% $Id$
                       
module sdf2/syntax/Sorts
imports sdf2/syntax/Kernel
exports
  sorts Sort
  lexical syntax
    [A-Z]                          -> Sort
    [A-Z][A-Za-z0-9\-]*[A-Za-z0-9] -> Sort
  context-free syntax
    Sort                         -> Symbol
    Sort "[[" {Symbol ","}+ "]]" -> Symbol
    "sorts" Symbols              -> Grammar  

%%% $Id$
                     
module sdf2/syntax/Symbols
imports aterm/Layout
exports
  sorts Symbol Symbols
  context-free syntax
    "(" Symbol ")"       -> Symbol {bracket}
    Symbol*              -> Symbols 
%%% $Id$
                                  
module aterm/Literals
imports aterm/Layout

hiddens
  sorts AlphaNumericalEscChar DecimalEscChar EscChar L-Char

exports
  sorts Literal
  lexical syntax
    "\\" ~[012]                    -> AlphaNumericalEscChar

    "\\" [01] [0-9] [0-9]          -> DecimalEscChar
    "\\" "2" [0-4] [0-9]           -> DecimalEscChar
    "\\" "2" "5" [0-5]             -> DecimalEscChar

    AlphaNumericalEscChar          -> EscChar
    DecimalEscChar                 -> EscChar

    %% fixme: replace \013 by \r when Character definition allows it.
    ~[\000-\031\"\\] \/ [\t\n\013] -> L-Char
    EscChar                        -> L-Char

    "\"" L-Char* "\""              -> Literal
%%% $Id$
               
module aterm/ATerms
imports aterm/Literals aterm/IntCon aterm/RealCon
exports
  sorts ATermList ACon AFun ATerm Ann
  context-free syntax

    "[" { ATerm ","}* "]"             -> ATermList
    IntCon                            -> ACon
    RealCon                           -> ACon
    Literal                           -> AFun
    ACon                              -> ATerm
    ATermList                         -> ATerm
    AFun                              -> ATerm
    AFun "(" { ATerm ","}+  ")"       -> ATerm
    "{" { ATerm ","}+  "}"            -> Ann
    ACon                 Ann          -> ATerm
    ATermList            Ann          -> ATerm
    AFun                 Ann          -> ATerm
    AFun "(" { ATerm ","}+  ")"  Ann  -> ATerm 
%%% $Id$
                                  
module aterm/IntCon
imports aterm/Layout
exports
  sorts NatCon IntCon
  lexical syntax
    [0-9]+ -> NatCon
  context-free syntax
    NatCon     -> IntCon
    "+" NatCon -> IntCon
    "-" NatCon -> IntCon       

hiddens
  variables
    "c+"[0-9]*            -> CHAR+
module aterm/Layout
exports
  lexical syntax
    [\ \t\n]           -> LAYOUT
    "%%" ~[\n]* [\n]   -> LAYOUT
    "%" ~[\n\%]+ "%"   -> LAYOUT

  context-free restrictions
    LAYOUT? -/- [\ \t\n\%]

%%% $Id$
                                                   
module aterm/RealCon
imports aterm/IntCon
exports
  sorts OptExp RealCon
  context-free syntax
    "e" IntCon                -> OptExp
                              -> OptExp
    IntCon "." NatCon OptExp  -> RealCon   
