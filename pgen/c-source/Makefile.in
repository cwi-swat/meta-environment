#
# Makefile.in for target "ParseTable-Generator" 
# generated automagically on Tue Jan  4 17:02:08 MET 2000
#
#
# $Id$
#
# Template for Makefile(.in) for use with genmakefile.sh
#
# You might want to change some of the variables below:
#	STD_CC_FLAGS: default compiler flags
#	STD_LD_FLAGS: default linker flags

STD_CC_FLAGS	:=
STD_LD_FLAGS	:=

#	FLAGS_$(CC): Compiler dependent settings

FLAGS_cc	:= -O
FLAGS_gcc	:= -Wall -O4

# DEBUG-CC-FLAGS: compiler flags to store debugging information in object files
# DEBUG-LD-FLAGS: optional flags for linking with debugging information

DEBUG_CC_FLAGS	:= -g
DEBUG_LD_FLAGS	:=

# PROFILE_CC_FLAGS: compiler flags to store profile information in object files
# PROFILE_LD_FLAGS: optional flags for linking profiled object code

PROFILE_CC_FLAGS:= -pg
PROFILE_LD_FLAGS:= -pg

LOCALLIBS	:= -lasc-support -lATB -lAsFix -lATerm -lParseTable-Generator

VPATH		:= @srcdir@
srcdir		:= @srcdir@
top_srcdir	:= @top_srcdir@

# Default compiler to use
CC=@CC@
# Building libraries: ar and ranlib
AR=@AR@
AR_FLAGS=cr
RANLIB=@RANLIB@

# DEBUG-LIBS: libraries containing debugging information
DEBUG-LIBS	 = $(LOCALLIBS:=-dbg) $(LIBS)
DEBUG-CC-FLAGS	:= ${DEBUG_CC_FLAGS}
DEBUG-LD-FLAGS	:= ${DEBUG_LD_FLAGS}

# PROFILE-LIBS: libraries containing profile information
# PROFILE-CC-FLAGS: compiler flags to store profile information in object files
# PROFILE-LD-FLAGS: optional flags for linking profiled object code
PROFILE-LIBS	 = $(LOCALLIBS:=-prof) $(LIBS)
PROFILE-CC-FLAGS:= ${PROFILE_CC_FLAGS}
PROFILE-LD-FLAGS:= ${PROFILE_LD_FLAGS}

# STD-LIBS: normal libraries
# STD-CC-FLAGS: normal compiler flags
# STD-LD-FLAGS: optional flags
STD-LIBS	 = $(LOCALLIBS:=-$(CC)) $(LIBS)
STD-CC-FLAGS	:= ${STD_CC_FLAGS}
STD-LD-FLAG	:= ${STD_LD_FLAGS}

# FLAGS_$(CC): compiler dependent flags (e.g., FLAGS-gcc=-Wall)
FLAGS-cc	:= ${FLAGS_cc}
FLAGS-gcc	:= ${FLAGS_gcc}

# There should be no need to change anything below

prefix		:= @prefix@
exec_prefix	:= @exec_prefix@
bindir		:= @bindir@
libdir		:= @libdir@
includedir	:= @includedir@

ATERM		:= @ATERM@
NEW_META	:= @exec_prefix@


SOCKLIBS	:= @SOCKLIBS@
XINCLUDES	:= -I$(top_srcdir)/asc-support -I$(ATERM)/include -I$(NEW_META)/include -I$(includedir)
XLIBS		:= -L$(srcdir) -L$(top_srcdir)/asc-support -L$(ATERM)/lib -L$(NEW_META)/lib -L$(libdir) $(SOCKLIBS)

DEFS		:= @DEFS@
INCLUDES	:= @INCLUDES@ $(XINCLUDES)
LIBS		:= @LIBS@ $(XLIBS)

SPEC_SRCS	:= $(shell grep -v '^\#' $(srcdir)/ParseTable-Generator.module-list)
SRCS		:= $(SPEC_SRCS) init.c

STD-OBJS	:= $(SRCS:.c=-$(CC).o)
DEBUG-OBJS	:= $(SRCS:.c=-dbg.o)
PROFILE-OBJS	:= $(SRCS:.c=-prof.o)

BINFILES	:= ParseTable-Generator
LIBFILES	:= libParseTable-Generator-$(CC).a
INCLUDEFILES	:=

# Make rules

all:	${BINFILES}

libs:	${LIBFILES}

install:	${BINFILES}
	$(foreach tool, $^, cp $(tool) $(bindir); chmod 755 $(bindir)/$(tool);)

%-$(CC).o:	%.c
	$(CC) $(FLAGS-$(CC)) $(STD-CC-FLAGS) $(DEFS) $(INCLUDES) -c $< -o $@

%-dbg.o:	%.c
	$(CC) $(FLAGS-$(CC)) $(DEBUG-CC-FLAGS) $(DEFS) $(INCLUDES) -c $< -o $@

%-prof.o:	%.c
	$(CC) $(FLAGS-$(CC)) $(PROFILE-CC-FLAGS) $(DEFS) $(INCLUDES) -c $< -o $@

libParseTable-Generator-$(CC).a:	$(STD-OBJS)
	$(AR) $(AR_FLAGS) $@ $(STD-OBJS)
	$(RANLIB) $@

ParseTable-Generator:	$(LIBFILES)
	$(CC) $(STD-LD-FLAGS) -o $@ $(LIBDIR) $(STD-LIBS)

ParseTable-Generator-debug:	$(DEBUG-OBJS)
	$(CC) $(DEBUG-LD-FLAGS) -o $@ $(DEBUG-OBJS) $(LIBDIR) $(DEBUG-LIBS)

ParseTable-Generator-prof:	$(PROFILE-OBJS)
	$(CC) $(PROFILE-LD-FLAGS) -o $@ $(PROFILE-OBJS) $(LIBDIR) $(PROFILE-LIBS)

debug:	ParseTable-Generator-debug

profile: ParseTable-Generator-prof

init.c: $(SPEC_SRCS)
	@(echo "/*GENERATED AUTOMATICALLY, DO NOT MODIFY */" ;\
	SPEC_SRCS="$(SPEC_SRCS)" ;\
	for file in $$SPEC_SRCS; do \
		echo "extern void register_$$file();" ;\
		echo "extern void resolve_$$file();" ;\
		echo "extern void init_$$file();" ;\
	done ;\
	echo "void register_all() {" ;\
	for file in $$SPEC_SRCS; do \
		echo "  register_$$file();" ;\
	done ;\
	echo "}" ;\
	echo "void resolve_all() {" ;\
	for file in $$SPEC_SRCS; do \
		echo "  resolve_$$file();" ;\
	done ;\
	echo "}" ;\
	echo "void init_all() {" ;\
	for file in $$SPEC_SRCS; do \
		echo "  init_$$file();" ;\
	done ;\
	echo "}" ) | sed 's/.c()/()/g;s/-/_/g;' > $@

clean:
	$(RM) *.asfix *.o init.c ParseTable-Generator ParseTable-Generator-db ParseTable-Generator-prof

realclean spotless distclean:	clean
	$(RM) Makefile
