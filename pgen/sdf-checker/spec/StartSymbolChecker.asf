equations
 
  [cvs-1'1] collect-visible-startsymbols($Definition, false, $ModuleId) == true
            ====>
            contains-visible-startsymbols($Definition, $ModuleId) = 
 
  [cvs-1'2] collect-visible-startsymbols($Definition, false, $ModuleId) == false,
            $String := moduleid2str($ModuleId)
            ====>
            contains-visible-startsymbols($Definition, $ModuleId) = 
              make-error("syntax definition contains no start symbols", $String)

  [cvs-2'1] $ModuleId2 := get-module-name($Module),
            $ModuleId1 != $ModuleId2
            ====>
            collect-visible-startsymbols($Module, $Boolean, $ModuleId1) =
               collect-only-visible-startsymbols($Module, $Boolean)

  [cvs-2'1] $ModuleId2 := get-module-name($Module),
            $ModuleId1 == $ModuleId2
            ====>
            collect-visible-startsymbols($Module, $Boolean, $ModuleId1) =
               collect-all-visible-startsymbols($Module, $Boolean)

  [covs-1'1] collect-only-visible-startsymbols(hiddens $Grammar, $Boolean) = $Boolean

  [covs-1'2] collect-only-visible-startsymbols(exports $Grammar, $Boolean) = 
               collect-only-visible-startsymbols($Grammar, $Boolean)

  [covs-1'3] collect-only-visible-startsymbols(start-symbols $Symbol*1, $Boolean) = true 

  [covs-1'4] collect-only-visible-startsymbols(lexical start-symbols $Symbol*, $Boolean) = true

  [cavs-1'5] collect-only-visible-startsymbols(context-free start-symbols $Symbol*, $Boolean) = true

  [cavs-1'1] collect-all-visible-startsymbols(start-symbols $Symbol*1, $Boolean) = true 

  [cavs-1'2] collect-all-visible-startsymbols(lexical start-symbols $Symbol*, $Boolean) = true

  [cavs-1'3] collect-all-visible-startsymbols(context-free start-symbols $Symbol*, $Boolean) = true 
