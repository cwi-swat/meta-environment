equations

  [gep-1'1] get-exported-cf-prods(exports Grammar, ProductionsSet) =
              get-cf-prods(Grammar, ProductionsSet)

  [ghp-1'1] get-hidden-cf-prods(hiddens Grammar, ProductionsSet) =
              get-cf-prods(Grammar, ProductionsSet)

  [gp-1'1] get-cf-prods(context-free syntax Prod*, ProductionsSet) =
              get-prods(Prod*, ProductionsSet)

  [gp-2'1] get-prods(Prod, productions(Prod*2)) =
             productions(Prod Prod*2)

  [gpp-1'1] get-prods-in-prios(syntax Prod*, 
                               ProductionsSet) = ProductionsSet

  [gpp-1'2] get-prods-in-prios(lexical syntax Prod*, 
                               ProductionsSet) = ProductionsSet

  [gpp-1'3] get-prods-in-prios(context-free syntax Prod*, 
                               ProductionsSet) = ProductionsSet

  [gpp-1'4] get-prods-in-prios(variables Prod*, 
                               ProductionsSet) = ProductionsSet

  [gpp-1'5] get-prods-in-prios(lexical variables Prod*, 
                               ProductionsSet) = ProductionsSet

  [gpp-1'6] get-prods-in-prios(context-free priorities Priorities, 
                               ProductionsSet) =
              get-prods-in-prios(Priorities, ProductionsSet)

  [gpp-1'7] get-prods-in-prios(Prod, productions(Prod*)) = productions(Prod Prod*)
	
  [cm1] $ModuleId := get-module-name(Module),
        productions(Prod*1) := get-exported-cf-prods(Module, productions()),
        productions(Prod*2) := get-hidden-cf-prods(Module, productions()),
        productions(Prod*3) := get-prods-in-prios(Module, productions()),
       
        imports(Import*) := get-all-imports(Module),

        productions(Prod*4) := 
          get-defined-productions(Import*, get-module-info(InfoMsgTuple1)),

        productions(Prod*5) := productions(Prod*1) ++ productions(Prod*4),
        productions(Prod*6) := productions(Prod*2) ++ productions(Prod*5),

        Msgs1 := check-priorities(Module, , $ModuleId, productions(Prod*6)),
        Msgs2 := check-right-hand-sides(Module, , $ModuleId),
        Msgs3 := check-right-hand-side-lexical-prod(Module, , $ModuleId),

        productions(Prod*7) := diff-modulo-attrs(productions(Prod*3), 
                                                 productions(Prod*6)),

        $String1 := moduleid2str($ModuleId),
        $String2 := "undefined production used in priorities",
        Msgs4 := make-production-warnings(Prod*7, $String2),
        Msgs5 := get-messages($ModuleId, InfoMsgTuple1), 
        InfoMsgTuple3 := put-messages($ModuleId, Msgs1, Msgs2, Msgs3, Msgs4, Msgs5, InfoMsgTuple1),

        ModuleInfoTable1 := get-module-info(InfoMsgTuple3),
        ModuleInfoTable2 := put-production-info($ModuleId, 
                            productions(Prod*5), 
                            ModuleInfoTable1),
        InfoMsgTuple4 :=  put-module-info(ModuleInfoTable2, InfoMsgTuple3)
        =================================================================
        check-module-prods(Module, InfoMsgTuple1) = InfoMsgTuple4

  [cp-1'1] symbols(Symbol) := get-rhs-production(Group, symbols()),
           Msgs2 := check-priorities-given-symbol(Group, Msgs1, $ModuleId, Symbol, ProductionsSet),
           Msgs3 := check-priorities-given-symbol(Group+, Msgs2, $ModuleId, Symbol, ProductionsSet)
           =======================================================================================
           check-priorities(Group > Group+, Msgs1, $ModuleId, ProductionsSet) = Msgs3

  [cp-1'2] symbols(Symbol) := get-rhs-production(Group, symbols()),
           Msgs2 := check-priorities-given-symbol(Group, Msgs1, $ModuleId, Symbol, ProductionsSet)
           ======================================================================================
           check-priorities(Group, Msgs1, $ModuleId, ProductionsSet) = Msgs2

  [cp-1'3] symbols(Symbol) := get-rhs-production(Group1, symbols()),
           Msgs2 := check-priorities-given-symbol(Group1, Msgs1, $ModuleId, Symbol, ProductionsSet),
           Msgs3 := check-priorities-given-symbol(Group2, Msgs2, $ModuleId, Symbol, ProductionsSet)
           =======================================================================================
           check-priorities(Group1 Assoc Group2, Msgs1, $ModuleId, ProductionsSet) = Msgs3 

  [cp-2'1] Symbol* -> Symbol1 Attrs := Prod,
           Symbol1 != Symbol2,
           is-injection-production(Symbol1, Symbol2, ProductionsSet) |
           is-injection-production(Symbol2, Symbol1, ProductionsSet) == false,
           $Location := get-location(Prod),
           $String1 := moduleid2str($ModuleId),
           $String2 := production2str(Symbol* -> Symbol1 Attrs),
           $String3 := "inconsistent right-hand side in priorities"
           ====>
           check-priorities-given-symbol(Prod, 
                                         Msgs, $ModuleId, Symbol2, ProductionsSet) =
             Msgs, make-warning($String3, $String2, $Location) 

  [cp-2'2] $FuncName (Symbol,*) -> Symbol1 Attrs := Prod,
           Symbol1 != Symbol2,
           is-injection-production(Symbol1, Symbol2, ProductionsSet) |
           is-injection-production(Symbol2, Symbol1, ProductionsSet) == false,
           $Location := get-location(Prod),
           $String1 := moduleid2str($ModuleId),
           $String2 := production2str($FuncName (Symbol,*) -> Symbol1 Attrs),
           $String3 := "inconsistent right-hand side in priorities"
           ====>
           check-priorities-given-symbol(Prod, 
                                         Msgs, $ModuleId, Symbol2, ProductionsSet) =
             Msgs, make-warning($String3, $String2, $Location)

  [grp-2'1] get-rhs-production(Symbol* -> Symbol Attrs, symbols()) = 
              symbols(Symbol)

  [grp-2'2] get-rhs-production($FuncName (Symbol,*) -> Symbol Attrs, 
                               symbols()) = symbols(Symbol)

  [iip-1'1] is-injection-production(Symbol1, Symbol2, 
                                    productions(Prod*1 Symbol1 -> Symbol2 Attrs Prod*2)) = true

  [iip-1'2] is-injection-production(Symbol3, Symbol2, productions(Prod*1 Prod*2)) == true
            ====>
            is-injection-production(Symbol1, Symbol2, 
              productions(Prod*1 Symbol1 -> Symbol3 Attrs Prod*2)) = true

  [default-iip-1'3] is-injection-production(Symbol1, Symbol2, ProductionsSet) = false

  [crhs-1'1] Symbol* -> $StrCon Attrs := Prod,
             $Location := get-location(Prod),
             $String1 := moduleid2str($ModuleId),
             $String2 := production2str(Symbol* -> $StrCon Attrs),
             $String3 := "illegal literal in right-hand-side of production"
             ====>
             check-right-hand-sides(Prod, Msgs, $ModuleId) =
               Msgs, make-error($String3, $String2, $Location)

  [crhs-1'2] $FuncName (Symbol,*) -> $StrCon Attrs := Prod,
             $Location := get-location(Prod),
             $String1 := moduleid2str($ModuleId),
             $String2 := production2str($FuncName (Symbol,*) -> $StrCon Attrs),
             $String3 := "illegal literal in right-hand side of production"
             ====>
             check-right-hand-sides(Prod, Msgs, $ModuleId) =
               Msgs, make-error($String3, $String2, $Location)

  [crl-1'1] check-right-hand-side-lexical-prod(lexical syntax Prod*, Msgs, $ModuleId) =
              check-right-hand-side-lexical-prod(Prod*, Msgs, $ModuleId)

  [default-crl-1'1] check-right-hand-side-lexical-prod(Grammar, Msgs, $ModuleId) = Msgs

  [crl-1'2] check-right-hand-side-lexical-prod(Symbol* -> $Sort Attrs, Msgs, $ModuleId) = Msgs

  [crl-1'3] check-right-hand-side-lexical-prod(Symbol* -> LAYOUT Attrs, Msgs, $ModuleId) = Msgs

  [default-crl-1'1] Symbol* -> Symbol Attrs := Prod,
                    $Location := get-location(Prod),
                    $String1 := moduleid2str($ModuleId),
                    $String2 := production2str(Symbol* -> Symbol Attrs),
                    $String3 := "only sort allowed in right-hand-side of lexical production"
                    ====>
                    check-right-hand-side-lexical-prod(Prod, Msgs, $ModuleId) =
                      Msgs, make-error($String3, $String2, $Location)

  [crl-1'2] check-right-hand-side-lexical-prod($StrCon (Symbol,*) -> $Sort Attrs, 
                                               Msgs, $ModuleId) = Msgs

  [crl-1'3] check-right-hand-side-lexical-prod($IdCon (Symbol,*) -> $Sort Attrs, 
                                               Msgs, $ModuleId) = Msgs

  [default-crl-1'2] $FuncName (Symbol,*) -> Symbol Attrs := Prod,
                    $Location := get-location(Prod),
                    $String1 := moduleid2str($ModuleId),
                    $String2 := production2str($FuncName (Symbol,*) -> Symbol Attrs),
                    $String3 := "only sort allowed in right-hand side of lexical production"
                    ====>
                    check-right-hand-side-lexical-prod(Prod, Msgs, $ModuleId) =
                      Msgs, make-error($String3, $String2, $Location)

  [musm-1'1] make-production-warnings(,$String1) = 

  [msum-1'2] $Location := get-location(Prod),
             $String2 := production2str(Prod),
             Msg := make-warning($String1, $String2, $Location),
             Msg* := make-production-warnings(Prod*, $String1)
             ===>
             make-production-warnings(Prod Prod*, $String1) = Msg, Msg*
 
