equations

  [gep-1'1] get-exported-cf-prods(exports Grammar, ProductionsSet) =
              get-cf-prods(Grammar, ProductionsSet)

  [ghp-1'1] get-hidden-cf-prods(exports Grammar, ProductionsSet) =
              get-cf-prods(Grammar, ProductionsSet)

  [gp-1'1] get-cf-prods(context-free syntax Prod*, ProductionsSet) =
              get-prods(Prod*, ProductionsSet)

  [gp-2'1] get-prods(Symbol* -> Symbol Attrs, productions(Prod*2)) =
             productions(Symbol* -> Symbol Prod*2)

  [gp-2'1] get-prods($Literal ( Symbol,* ) -> Symbol Attrs, 
                     productions(Prod*2)) =
             productions($Literal ( Symbol,* ) -> Symbol Prod*2)

  [gpp-1'1] get-prods-in-prios(lexical syntax Prod*, 
                               ProductionsSet) = ProductionsSet

  [gpp-1'1] get-prods-in-prios(context-free syntax Prod*, 
                               ProductionsSet) = ProductionsSet

  [gpp-1'1] get-prods-in-prios(variables Prod*, 
                               ProductionsSet) = ProductionsSet

  [gpp-1'1] get-prods-in-prios(lexical variables Prod*, 
                               ProductionsSet) = ProductionsSet

  [gpp-1'1] get-prods-in-prios(context-free priorities Priorities, 
                               ProductionsSet) =
              get-prods-in-prios(Priorities, ProductionsSet)

  [gpp-1'1] get-prods-in-prios(Symbol* -> Symbol Attrs, productions(Prod*)) =
              productions(Symbol* -> Symbol Prod*)

  [gpp-1'1] get-prods-in-prios($Literal ( Symbol,* ) -> Symbol Attrs,
                               productions(Prod*)) =
              productions($Literal ( Symbol,* ) -> Symbol Prod*)
	
  [cm1] get-module-name(Module) = $ModuleId,
        get-exported-cf-prods(Module, productions()) = productions(Prod*1),
        get-hidden-cf-prods(Module, productions()) =  productions(Prod*2),
        get-prods-in-prios(Module, productions()) = productions(Prod*3),
       
        get-all-imports(Module) = ImportsSet,

        get-defined-productions(ImportsSet, get-module-info(InfoMsgTuple1)) = 
          productions(Prod*4),

        productions(Prod*1) ++ productions(Prod*4) = productions(Prod*5),
        productions(Prod*2) ++ productions(Prod*5) = productions(Prod*6),

        check-priorities(Module, {}, $ModuleId, productions(Prod*6)) = Msgs1,
        check-right-hand-sides(Module, {}, $ModuleId) = Msgs2,
        check-right-hand-side-lexical-prod(Module, {}, $ModuleId) = Msgs3,

        Msgs4 = get-messages(InfoMsgTuple1),
        Msgs5 = Msgs4 + 
used-in-priorities-but-undefined($ModuleId, diff(productions(Prod*3), 
                                                 productions(Prod*6))),
        Msgs6 = Msgs5 ++ Msgs1,
        Msgs7 = Msgs6 ++ Msgs2,
        Msgs8 = Msgs7 ++ Msgs3,
        InfoMsgTuple3 = put-messages(Msgs8, InfoMsgTuple1),

        get-module-info(InfoMsgTuple3) = ModuleInfoTable1,
        put-production-info($ModuleId, 
                            productions(Prod*5), 
                            ModuleInfoTable1) = ModuleInfoTable2,
        put-module-info(ModuleInfoTable2, InfoMsgTuple3) =  InfoMsgTuple4
        =================================================================
        check-module-prods(Module, InfoMsgTuple1) = InfoMsgTuple4

  [cp-1'1] get-rhs-production(Group, symbols()) = symbols(Symbol),
           check-priorities-given-symbol(Group, Msgs1, $ModuleId, Symbol, ProductionsSet) = Msgs2,
           check-priorities-given-symbol(Group+, Msgs2, $ModuleId, Symbol, ProductionsSet) = Msgs3
           =======================================================================================
           check-priorities(Group > Group+, Msgs1, $ModuleId, ProductionsSet) = Msgs3

  [cp-1'2] get-rhs-production(Group, symbols()) = symbols(Symbol),
           check-priorities-given-symbol(Group, Msgs1, $ModuleId, Symbol, ProductionsSet) = Msgs2
           ======================================================================================
           check-priorities(Group, Msgs1, $ModuleId, ProductionsSet) = Msgs2

  [cp-1'3] get-rhs-production(Group1, symbols()) = symbols(Symbol),
           check-priorities-given-symbol(Group1, Msgs1, $ModuleId, Symbol, ProductionsSet) = Msgs2,
           check-priorities-given-symbol(Group2, Msgs2, $ModuleId, Symbol, ProductionsSet) = Msgs3
           =======================================================================================
           check-priorities(Group1 Assoc Group2, Msgs1, $ModuleId, ProductionsSet) = Msgs3 

  [cp-2'1] Symbol1 != Symbol2,
           is-injection-production(Symbol1, Symbol2, ProductionsSet) |
           is-injection-production(Symbol2, Symbol1, ProductionsSet) = false
           =================================================================
           check-priorities-given-symbol(Symbol* -> Symbol1 Attrs, 
                                         Msgs, $ModuleId, Symbol2, ProductionsSet) =
             Msgs + 
inconsistent-rhs-in-priorities($ModuleId, Symbol2, Symbol* -> Symbol1 Attrs)

  [cp-2'2] Symbol1 != Symbol2,
           is-injection-production(Symbol1, Symbol2, ProductionsSet) |
           is-injection-production(Symbol2, Symbol1, ProductionsSet) = false
           =================================================================
           check-priorities-given-symbol($Literal (Symbol,*) -> Symbol1 Attrs, 
                                         Msgs, $ModuleId, Symbol2, ProductionsSet) =
             Msgs + 
inconsistent-rhs-in-priorities($ModuleId, Symbol2, $Literal (Symbol,*) -> Symbol1 Attrs)

  [grp-2'1] get-rhs-production(Symbol* -> Symbol Attrs, symbols()) = 
              symbols(Symbol)

  [grp-2'2] get-rhs-production($Literal (Symbol,*) -> Symbol Attrs, 
                               symbols()) = symbols(Symbol)

  [iip-1'1] is-injection-production(Symbol1, Symbol2, productions(Prod*1 Symbol1 -> Symbol2 Prod*2)) = true

  [iip-1'1] is-injection-production(Symbol3, Symbol2, productions(Prod*1 Symbol1 -> Symbol3 Prod*2)) = true
            ===============================================================================================
            is-injection-production(Symbol1, Symbol2, productions(Prod*1 Symbol1 -> Symbol3 Prod*2)) = true

  [default-iip-1'2] is-injection-production(Symbol1, Symbol2, ProductionsSet) = false

  [crhs-1'1] check-right-hand-sides(Symbol* -> $Literal Attrs, Msgs, $ModuleId) =
               Msgs +
literal-in-right-hand-side-not-allowed($ModuleId, Symbol* -> $Literal Attrs)

  [crhs-1'2] check-right-hand-sides($Literal1 (Symbol,*) -> $Literal2 Attrs, Msgs, $ModuleId) =
               Msgs +
literal-in-right-hand-side-not-allowed($ModuleId, $Literal1 (Symbol,*) -> $Literal2 Attrs)

  [crl-1'1] check-right-hand-side-lexical-prod(lexical syntax Prod*, Msgs, $ModuleId) =
              check-right-hand-side-lexical-prod(Prod*, Msgs, $ModuleId)

  [default-crl-1'1] check-right-hand-side-lexical-prod(Grammar, Msgs, $ModuleId) = Msgs

  [crl-1'2] check-right-hand-side-lexical-prod(Symbol* -> $Sort Attrs, Msgs, $ModuleId) = Msgs

  [crl-1'3] check-right-hand-side-lexical-prod(Symbol* -> LAYOUT Attrs, Msgs, $ModuleId) = Msgs

  [default-crl-1'1] check-right-hand-side-lexical-prod(Symbol* -> Symbol Attrs, Msgs, $ModuleId) =
               Msgs +
only-sort-allowed-in-right-hand-side-of-lexical-function($ModuleId, Symbol* -> Symbol Attrs)

  [crl-1'2] check-right-hand-side-lexical-prod($Literal (Symbol,*) -> $Sort Attrs, Msgs, $ModuleId) = Msgs

  [crl-1'2] check-right-hand-side-lexical-prod($Literal (Symbol,*) -> Symbol Attrs, Msgs, $ModuleId) =
               Msgs +
only-sort-allowed-in-right-hand-side-of-lexical-function($ModuleId, $Literal (Symbol,*) -> Symbol Attrs)
 
