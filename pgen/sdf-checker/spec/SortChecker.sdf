module SortChecker

imports Sdf-Type-Environment
exports
  context-free syntax
    pre-check-module-sorts(Module, Info-Msg-Tuple) -> Info-Msg-Tuple
    check-module-sorts(Module, Info-Msg-Tuple)     -> Info-Msg-Tuple

hiddens
  sorts Symbols-Msg-Tuple

  context-free syntax
    "[" SymbolPairsSet "," Messages "]" -> Symbols-Msg-Tuple

  context-free syntax
    get-parameter-symbols(Module, 
                          Symbols-Msg-Tuple, 
                          ModuleId, 
                          SymbolPairsSet)  -> Symbols-Msg-Tuple {traversal(accu, break, top-down)}
    get-parameter-symbols(ModuleName, 
                          Symbols-Msg-Tuple, 
                          ModuleId, 
                          SymbolPairsSet)  -> Symbols-Msg-Tuple {traversal(accu, break, top-down)}
    get-exported-declared-symbols(Module, 
                                  Symbols-Msg-Tuple, 
                                  ModuleId, 
                                  SymbolPairsSet)  -> Symbols-Msg-Tuple {traversal(accu, break, top-down)}
    get-exported-declared-symbols(Section, 
                                  Symbols-Msg-Tuple, 
                                  ModuleId, 
                                  SymbolPairsSet)  -> Symbols-Msg-Tuple {traversal(accu, break, top-down)}
    get-hidden-declared-symbols(Module, 
                                Symbols-Msg-Tuple, 
                                ModuleId, 
                                SymbolPairsSet)    -> Symbols-Msg-Tuple {traversal(accu, break, top-down)}
    get-hidden-declared-symbols(Section, 
                                Symbols-Msg-Tuple, 
                                ModuleId, 
                                SymbolPairsSet)    -> Symbols-Msg-Tuple {traversal(accu, break, top-down)}
    get-declared-symbols(Section, 
                         Symbols-Msg-Tuple, 
                         ModuleId, 
                         SymbolPairsSet)   	       -> Symbols-Msg-Tuple {traversal(accu, break, top-down)}
    get-declared-symbols(Grammar, 
                         Symbols-Msg-Tuple, 
                         ModuleId, 
                         SymbolPairsSet)  	       -> Symbols-Msg-Tuple {traversal(accu, break, top-down)}
    get-declared-symbol(Symbols, 
                        Symbols-Msg-Tuple, 
                        ModuleId, 
                        SymbolPairsSet)  	       -> Symbols-Msg-Tuple {traversal(accu, break, top-down)}
    get-declared-symbol(Symbol*, 
                        Symbols-Msg-Tuple, 
                        ModuleId, 
                        SymbolPairsSet)  	       -> Symbols-Msg-Tuple {traversal(accu, break, top-down)}
    get-declared-symbol(Symbol, 
                        Symbols-Msg-Tuple, 
                        ModuleId, 
                        SymbolPairsSet)  	       -> Symbols-Msg-Tuple {traversal(accu, break, top-down)}

  context-free syntax
    get-exported-aliased-symbols(Module, 
                                 Symbols-Msg-Tuple, 
                                 ModuleId, 
                                 SymbolPairsSet)    -> Symbols-Msg-Tuple {traversal(accu, break, top-down)}
    get-exported-aliased-symbols(Section, 
                                 Symbols-Msg-Tuple, 
                                 ModuleId, 
                                 SymbolPairsSet)    -> Symbols-Msg-Tuple {traversal(accu, break, top-down)}
    get-hidden-aliased-symbols(Module, 
                               Symbols-Msg-Tuple, 
                               ModuleId, 
                               SymbolPairsSet)    -> Symbols-Msg-Tuple {traversal(accu, break, top-down)}
    get-hidden-aliased-symbols(Section, 
                               Symbols-Msg-Tuple, 
                               ModuleId, 
                               SymbolPairsSet)    -> Symbols-Msg-Tuple {traversal(accu, break, top-down)}
    get-aliased-symbols(Grammar, 
                        Symbols-Msg-Tuple, 
                        ModuleId, 
                        SymbolPairsSet)    -> Symbols-Msg-Tuple {traversal(accu, break, top-down)}
    get-aliased-symbols(Alias, 
                        Symbols-Msg-Tuple, 
                        ModuleId, 
                        SymbolPairsSet)    -> Symbols-Msg-Tuple {traversal(accu, break, top-down)}

  context-free syntax
    get-used-symbols(Module, SymbolsSet)	-> SymbolsSet {traversal(accu, break, top-down)}
    get-used-symbols(Symbol, SymbolsSet)	-> SymbolsSet {traversal(accu, break, top-down)}
    get-defined-symbols(Module, SymbolsSet)  	-> SymbolsSet {traversal(accu, break, top-down)}
    get-defined-symbols(Grammar, SymbolsSet)    -> SymbolsSet {traversal(accu, break, top-down)}
    get-defined-symbols(Production, SymbolsSet) -> SymbolsSet {traversal(accu, break, top-down)}

  context-free syntax
    add-symbol(Symbol, Symbols-Msg-Tuple, ModuleId, SymbolPairsSet) -> Symbols-Msg-Tuple

hiddens
  variables
    "$Attributes"[0-9]* -> Attributes
    "$Definition"[0-9]*	-> Definition

    "$Module"[0-9]*     -> Module
    "$Module*"[0-9]*    -> Module*
    "$ModuleId"[0-9]*   -> ModuleId

    "$Sort"[0-9]*           -> Sort
    "$Symbol*"[0-9]*        -> Symbol*
    "SymbolPair*"[0-9]*     -> SymbolPair*
    "ParameterSymbolPair*"[0-9]* -> SymbolPair*
    "ParameterSymbol*"[0-9]*     -> Symbol*
    "DeclaredSymbolPair*"[0-9]* -> SymbolPair*
    "DeclaredSymbol*"[0-9]*     -> Symbol*
    "AliasedSymbolPair*"[0-9]*  -> SymbolPair*
    "AliasedSymbol*"[0-9]*  -> Symbol*
    "$Symbol,*"[0-9]*       -> {Symbol ","}*
    "$Symbol"[0-9]*         -> Symbol
    "$Symbols"[0-9]*        -> Symbols
    "SymbolPairsSet"[0-9]*  -> SymbolPairsSet
    "SymbolsSet"[0-9]*      -> SymbolsSet
    "SymbolsMsgs"[0-9]*     -> Symbols-Msg-Tuple
    "$Literal"[0-9]*        -> Literal

    "Import*"[0-9]*         -> Import*
  
    "Prod*"[0-9]*           -> Production*

    "$Grammar"[0-9]*        -> Grammar

    "$Msg"[0-9]*            -> Message
    "$Msg*"[0-9]*           -> Message*
    "$Msgs"[0-9]*           -> Messages
    
    "InfoMsgTuple"[0-9]*    -> Info-Msg-Tuple
    "ModuleInfoTable"[0-9]* -> Module-Info-Table
