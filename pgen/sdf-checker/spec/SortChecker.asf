equations

%% Type checking rules for an (expanded) SDF module

  [gps-1'1] get-parameter-symbols($ModuleId[$Symbols], SymbolsMsgs, $ModuleId) = 
              get-declared-symbol($Symbols, SymbolsMsgs, $ModuleId)

  [tc1] get-exported-declared-symbols(exports $Grammar, SymbolsMsgs, $ModuleId) =
       	  get-declared-symbols($Grammar, SymbolsMsgs, $ModuleId)

  [tc2] get-hidden-declared-symbols(hiddens $Grammar, SymbolsMsgs, $ModuleId) =
       	  get-declared-symbols($Grammar, SymbolsMsgs, $ModuleId)

  [tc3] get-declared-symbols(sorts $Symbol*1, SymbolsMsgs, $ModuleId) =
       	  get-declared-symbol($Symbol*1, SymbolsMsgs, $ModuleId)

  [tc4] SymbolsMsgs2 := check-symbol($Symbol, SymbolsMsgs1, $ModuleId)
        ==============================================================
        get-declared-symbol($Symbol, SymbolsMsgs1, $ModuleId) =
          add-symbol($Symbol, SymbolsMsgs2, $ModuleId)

  [gss-1'1] get-start-symbols(context-free start-symbols $Symbol*1, SymbolsMsgs, $ModuleId) =
      	      get-start-symbol($Symbol*1, SymbolsMsgs, $ModuleId)

  [gss-1'2] get-start-symbols(lexical start-symbols $Symbol*1, SymbolsMsgs, $ModuleId) =
       	      get-start-symbol($Symbol*1, SymbolsMsgs, $ModuleId)

  [gss-1'3] get-start-symbols(start-symbols $Symbol*1, SymbolsMsgs, $ModuleId) =
       	      get-start-symbol($Symbol*1, SymbolsMsgs, $ModuleId)

  [gss-2'1] get-start-symbol($Symbol, SymbolsMsgs, $ModuleId) =
              add-start-symbol($Symbol, SymbolsMsgs, $ModuleId)

  [cs-1'1] check-symbol($Sort, SymbolsMsgs, $ModuleId) = SymbolsMsgs

  [default-cs-1'2] check-symbol($Symbol, [SymbolPairsSet, $Msgs], $ModuleId) =
                     [SymbolPairsSet,
                      $Msgs + deprecated-non-plain-sort-definition($ModuleId, $Symbol)]

  [as-1'1] contains($Symbol, symbolpairs(SymbolPair*)) == false
           ====>
           add-symbol($Symbol, [symbolpairs(SymbolPair*), $Msgs], $ModuleId) =
                     [symbolpairs(($ModuleId, $Symbol) SymbolPair*), $Msgs]

  [default-as-1'2] add-symbol($Symbol,
                              [SymbolPairsSet, $Msgs], $ModuleId) =
                     [SymbolPairsSet,
                      $Msgs + double-declared-sort($ModuleId, $Symbol)]

  [ass-1'1] contains($Symbol, symbolpairs(SymbolPair*)) == false
            ====>
            add-start-symbol($Symbol, [symbolpairs(SymbolPair*), $Msgs], $ModuleId) =
                             [symbolpairs(($ModuleId, $Symbol) SymbolPair*), $Msgs]

  [default-ass-1'2] add-start-symbol($Symbol, [SymbolPairsSet, $Msgs], $ModuleId) =
                                     [SymbolPairsSet,
                                      $Msgs + double-declared-start-symbol($ModuleId, $Symbol)]

  [geas-1'1] get-exported-aliased-symbols(exports $Grammar, SymbolsMsgs, 
                                          $ModuleId, SymbolPairsSet) =
       	       get-aliased-symbols($Grammar, SymbolsMsgs, $ModuleId, SymbolPairsSet)

  [ghas-1'1] get-hidden-aliased-symbols(hiddens $Grammar, SymbolsMsgs, 
                                        $ModuleId, SymbolPairsSet) =
       	       get-aliased-symbols($Grammar, SymbolsMsgs, $ModuleId, SymbolPairsSet)

  [gas-1'1] contains($Symbol2, SymbolPairsSet2) == true,
            contains($ModuleId, $Symbol, SymbolPairsSet2) := true,
            contains($Symbol, SymbolPairsSet1) == false
            ==========================================
            get-aliased-symbols($Symbol1 -> $Symbol2,
                                [SymbolPairsSet1, $Msgs], $ModuleId, SymbolPairsSet2) =
             [SymbolPairsSet1, $Msgs]

  [gas-1'2] contains($Symbol2, SymbolPairsSet2) == false,
            contains($Symbol2, symbolpairs(SymbolPair*)) == false
            ====================================================
            get-aliased-symbols($Symbol1 -> $Symbol2, 
                                [symbolpairs(SymbolPair*), $Msgs], 
                                $ModuleId, SymbolPairsSet2) =
                     [symbolpairs(($ModuleId, $Symbol2) SymbolPair*), $Msgs]

  [default-gas-1'3]  get-aliased-symbols($Symbol1 -> $Symbol2,
                                         [SymbolPairsSet1, $Msgs], 
                                         $ModuleId, SymbolPairsSet2) =
                       [SymbolPairsSet1,
                        $Msgs + 
aliased-symbol-already-declared($ModuleId, $Symbol2)]
  
  [tc2] get-used-symbols(CHAR, SymbolsSet) = SymbolsSet

  [tc2] get-used-symbols(sorts $Symbol*, SymbolsSet) = SymbolsSet
  
  [tc2] $Sort != CHAR
        =============
        get-used-symbols($Sort, symbols($Symbol*)) = symbols($Sort $Symbol*)

  [tc3] get-defined-symbols(variables Prod*, SymbolsSet) = SymbolsSet

  [tc4] get-defined-symbols($Symbols -> $Symbol $Attributes, 
                            symbols($Symbol*)) =
	  symbols($Symbol $Symbol*)

  [tc5] get-defined-symbols($Literal ( $Symbol,* ) -> $Symbol $Attributes, 
                            symbols($Symbol*)) =
	  symbols($Symbol $Symbol*)

%% Pre-check one module
	
  [cm1] $ModuleId := get-module-name($Module),

        [symbolpairs(DeclaredSymbolPair*1), $Msgs1] := 
          get-exported-declared-symbols($Module, [symbolpairs(),{}], $ModuleId),
        [symbolpairs(DeclaredSymbolPair*2), $Msgs2] := 
          get-hidden-declared-symbols($Module, [symbolpairs(), {}], $ModuleId),

        [symbolpairs(AliasedSymbolPair*1), $Msgs3] := 
          get-exported-aliased-symbols($Module, [symbolpairs(), {}], $ModuleId, 
                                     symbolpairs()),
        [symbolpairs(AliasedSymbolPair*2), $Msgs4] := 
          get-hidden-aliased-symbols($Module, [symbolpairs(), {}], $ModuleId, 
                                   symbolpairs()),

        ModuleInfoTable1 := get-module-info(InfoMsgTuple1),
        ModuleInfoTable2 := put-declared-symbols-info($ModuleId, 
                                  symbolpairs(DeclaredSymbolPair*2 DeclaredSymbolPair*1), 
                                  ModuleInfoTable1),
        ModuleInfoTable3 := put-aliased-symbols-info($ModuleId, 
                                 symbolpairs(AliasedSymbolPair*2 AliasedSymbolPair*1), 
                                 ModuleInfoTable2),
        InfoMsgTuple2 :=  put-module-info(ModuleInfoTable3, InfoMsgTuple1)
        =================================================================
        pre-check-module-sorts($Module, InfoMsgTuple1) = InfoMsgTuple2

%% Check one module
	
  [cm1] $ModuleId := get-module-name($Module),

        imports(Import*) := get-all-imports($Module),
        symbolpairs(DeclaredSymbolPair*1) := 
          get-declared-symbols(Import*, get-module-info(InfoMsgTuple1)),
        symbolpairs(AliasedSymbolPair*1) := 
          get-aliased-symbols(Import*, get-module-info(InfoMsgTuple1)),

        [symbolpairs(ParameterSymbolPair*), $Msgs0] := 
          get-parameter-symbols($Module, [symbolpairs(),{}], $ModuleId),

        [symbolpairs(DeclaredSymbolPair*2), $Msgs1] := 
          get-exported-declared-symbols($Module, [symbolpairs(ParameterSymbolPair*),{}], $ModuleId),
        [symbolpairs(DeclaredSymbolPair*3), $Msgs2] := 
          get-hidden-declared-symbols($Module, [symbolpairs(ParameterSymbolPair*), {}], $ModuleId),

        [symbolpairs(AliasedSymbolPair*2), $Msgs3] := 
          get-exported-aliased-symbols($Module, [symbolpairs(), {}], $ModuleId, 
                                     symbolpairs(AliasedSymbolPair*1)),
        [symbolpairs(AliasedSymbolPair*3), $Msgs4] := 
          get-hidden-aliased-symbols($Module, [symbolpairs(), {}], $ModuleId, 
                                   symbolpairs(AliasedSymbolPair*2
                                               AliasedSymbolPair*1)),
        [StartSymbolPairsSet, $Msgs5] := 
          get-start-symbols($Module, [symbolpairs(), {}], $ModuleId),

        symbols($Symbol*3) := get-used-symbols($Module, symbols()),
        symbols($Symbol*4) := get-defined-symbols($Module, symbols()),

        $Msgs6 := get-messages(InfoMsgTuple1),
        $Msgs7 := $Msgs6 + 
undeclared-sorts($ModuleId, diff(symbols($Symbol*3), 
                                 de-modularize(symbolpairs(ParameterSymbolPair*
                                                           AliasedSymbolPair*3
                                                           DeclaredSymbolPair*3 
                                                           AliasedSymbolPair*2
                                                           DeclaredSymbolPair*2
                                                           AliasedSymbolPair*1
                                                           DeclaredSymbolPair*1)))) +
undeclared-start-symbols($ModuleId, diff(de-modularize(StartSymbolPairsSet),
                                         symbols($Symbol*4))),
        InfoMsgTuple3 := put-messages($Msgs1 ++ $Msgs2 ++ $Msgs3 ++ 
                                      $Msgs4 ++ $Msgs5 ++ $Msgs7, 
                                      InfoMsgTuple1),

        ModuleInfoTable3 := get-module-info(InfoMsgTuple3),
        ModuleInfoTable4 := put-declared-symbols-info($ModuleId, 
                                  symbolpairs(DeclaredSymbolPair*2 DeclaredSymbolPair*1), 
                                  ModuleInfoTable3),
        ModuleInfoTable5 := put-aliased-symbols-info($ModuleId, 
                                 symbolpairs(AliasedSymbolPair*2 AliasedSymbolPair*1), 
                                 ModuleInfoTable4),
        ModuleInfoTable6 := put-used-symbols-info($ModuleId, symbols($Symbol*3), ModuleInfoTable5),
        InfoMsgTuple4 :=  put-module-info(ModuleInfoTable6, InfoMsgTuple3)
        ====>
        check-module-sorts($Module, InfoMsgTuple1) = InfoMsgTuple4
