equations

%% Type checking rules for an (expanded) SDF module

  [gps-1'1] get-parameter-symbols($ModuleId[$Symbols], SymbolsMsgs, $ModuleId) = 
              get-declared-symbol($Symbols, SymbolsMsgs, $ModuleId)

  [tc1] get-exported-declared-symbols(exports $Grammar, SymbolsMsgs, $ModuleId) =
       	  get-declared-symbols($Grammar, SymbolsMsgs, $ModuleId)

  [tc2] get-hidden-declared-symbols(hiddens $Grammar, SymbolsMsgs, $ModuleId) =
       	  get-declared-symbols($Grammar, SymbolsMsgs, $ModuleId)

  [tc3] get-declared-symbols(sorts $Symbol*1, SymbolsMsgs, $ModuleId) =
       	  get-declared-symbol($Symbol*1, SymbolsMsgs, $ModuleId)

  [tc4] $Location := get-location($Symbol),
        SymbolsMsgs2 := 
          check-symbol($Symbol, SymbolsMsgs1, $Location, $ModuleId)
        ====>
        get-declared-symbol($Symbol, SymbolsMsgs1, $ModuleId) =
          add-symbol($Symbol, SymbolsMsgs2, $Location, $ModuleId)

  [gss-1'1] get-start-symbols(context-free start-symbols $Symbol*1, SymbolsMsgs, $ModuleId) =
      	      get-start-symbol($Symbol*1, SymbolsMsgs, $ModuleId)

  [gss-1'2] get-start-symbols(lexical start-symbols $Symbol*1, SymbolsMsgs, $ModuleId) =
       	      get-start-symbol($Symbol*1, SymbolsMsgs, $ModuleId)

  [gss-1'3] get-start-symbols(start-symbols $Symbol*1, SymbolsMsgs, $ModuleId) =
       	      get-start-symbol($Symbol*1, SymbolsMsgs, $ModuleId)

  [gss-2'1] get-start-symbol($Symbol, SymbolsMsgs, $ModuleId) =
              add-start-symbol($Symbol, SymbolsMsgs, $ModuleId)

  [cs-1'1] check-symbol($Sort, SymbolsMsgs, $Location, $ModuleId) = SymbolsMsgs

  [default-cs-1'2] $String1 := moduleid2str($ModuleId),
                   $String2 := symbol2str($Symbol),
                   $String3 := "deprecated non-plain sort definition in " || $String1
                   ====>
                   check-symbol($Symbol, [SymbolPairsSet, $Msgs], $Location, $ModuleId) =
                     [SymbolPairsSet, $Msgs, make-warning($String3, $String2, $Location)]

  [as-1'1] contains($Symbol, symbolpairs(SymbolPair*)) == false
           ====>
           add-symbol($Symbol, [symbolpairs(SymbolPair*), $Msgs], $Location, $ModuleId) =
                     [symbolpairs(($ModuleId, $Symbol) SymbolPair*), $Msgs]

  [default-as-1'2] $String1 := moduleid2str($ModuleId),
                   $String2 := symbol2str($Symbol),
                   $String3 := "double declared sort in " || $String1
                   ====>
                   add-symbol($Symbol,
                              [SymbolPairsSet, $Msgs], $Location, $ModuleId) =
                     [SymbolPairsSet, $Msgs, make-warning($String3, $String2, $Location)]

  [ass-1'1] contains($Symbol, symbolpairs(SymbolPair*)) == false
            ====>
            add-start-symbol($Symbol, [symbolpairs(SymbolPair*), $Msgs], $ModuleId) =
                             [symbolpairs(($ModuleId, $Symbol) SymbolPair*), $Msgs]

  [default-ass-1'2] $Location := get-location($Symbol),
                    $String1 := moduleid2str($ModuleId),
                    $String2 := symbol2str($Symbol),
                    $String3 := "double declared start-symbol in " || $String1
                    ====>
                    add-start-symbol($Symbol, [SymbolPairsSet, $Msgs], $ModuleId) =
                                     [SymbolPairsSet,
                                      $Msgs, make-warning($String3, $String2, $Location)]

  [geas-1'1] get-exported-aliased-symbols(exports $Grammar, SymbolsMsgs, 
                                          $ModuleId, SymbolPairsSet) =
       	       get-aliased-symbols($Grammar, SymbolsMsgs, $ModuleId, SymbolPairsSet)

  [ghas-1'1] get-hidden-aliased-symbols(hiddens $Grammar, SymbolsMsgs, 
                                        $ModuleId, SymbolPairsSet) =
       	       get-aliased-symbols($Grammar, SymbolsMsgs, $ModuleId, SymbolPairsSet)

  [gas-1'1] contains($Symbol2, SymbolPairsSet2) == true,
            contains($ModuleId, $Symbol, SymbolPairsSet2) := true,
            contains($Symbol, SymbolPairsSet1) == false
            ==========================================
            get-aliased-symbols($Symbol1 -> $Symbol2,
                                [SymbolPairsSet1, $Msgs], $ModuleId, SymbolPairsSet2) =
             [SymbolPairsSet1, $Msgs]

  [gas-1'2] contains($Symbol2, SymbolPairsSet2) == false,
            contains($Symbol2, symbolpairs(SymbolPair*)) == false
            ====================================================
            get-aliased-symbols($Symbol1 -> $Symbol2, 
                                [symbolpairs(SymbolPair*), $Msgs], 
                                $ModuleId, SymbolPairsSet2) =
                     [symbolpairs(($ModuleId, $Symbol2) SymbolPair*), $Msgs]

  [default-gas-1'3] $Symbol1 -> $Symbol2 := $Alias,
                    $Location := get-location($Alias),
                    $String1 := moduleid2str($ModuleId),
                    $String2 := symbol2str($Symbol2),
                    $String3 := "aliased symbol already declared in " || $String1
                    ====>
                    get-aliased-symbols($Alias,
                                        [SymbolPairsSet1, $Msgs], 
                                        $ModuleId, SymbolPairsSet2) =
                       [SymbolPairsSet1,
                        $Msgs, make-warning($String3, $String2, $Location)]
  
  [tc2] get-used-symbols(CHAR, SymbolsSet) = SymbolsSet

  [tc2] get-used-symbols(sorts $Symbol*, SymbolsSet) = SymbolsSet
  
  [tc2] $Sort != CHAR
        =============
        get-used-symbols($Sort, symbols($Symbol*)) = symbols($Sort $Symbol*)

  [tc3] get-defined-symbols(variables Prod*, SymbolsSet) = SymbolsSet

  [tc4] get-defined-symbols($Symbols -> $Symbol $Attributes, 
                            symbols($Symbol*)) =
	  symbols($Symbol $Symbol*)

  [tc5] get-defined-symbols($Literal ( $Symbol,* ) -> $Symbol $Attributes, 
                            symbols($Symbol*)) =
	  symbols($Symbol $Symbol*)

%% Pre-check one module
	
  [cm1] $ModuleId := get-module-name($Module),

        [symbolpairs(DeclaredSymbolPair*), $Msgs1] := 
          get-exported-declared-symbols($Module, [symbolpairs(),], $ModuleId),

        [symbolpairs(AliasedSymbolPair*), $Msgs2] := 
          get-exported-aliased-symbols($Module, [symbolpairs(), ], $ModuleId, 
                                     symbolpairs()),

        $Msgs3 := get-messages(InfoMsgTuple1),
        InfoMsgTuple2 := put-messages($Msgs1, $Msgs2, $Msgs3, 
                                      InfoMsgTuple1),
        ModuleInfoTable1 := get-module-info(InfoMsgTuple2),
        ModuleInfoTable2 := put-declared-symbols-info($ModuleId, 
                                  symbolpairs(DeclaredSymbolPair*), 
                                  ModuleInfoTable1),
        ModuleInfoTable3 := put-aliased-symbols-info($ModuleId, 
                                 symbolpairs(AliasedSymbolPair*), 
                                 ModuleInfoTable2),
        InfoMsgTuple3 :=  put-module-info(ModuleInfoTable3, InfoMsgTuple2)
        ====>
        pre-check-module-sorts($Module, InfoMsgTuple1) = InfoMsgTuple3

%% Check one module
	
  [cm1] $ModuleId := get-module-name($Module),

        imports(Import*) := get-imports($ModuleId, get-module-info(InfoMsgTuple1)),

        symbolpairs(DeclaredSymbolPair*1) := 
          get-declared-symbols(Import*, get-module-info(InfoMsgTuple1)),
        symbolpairs(AliasedSymbolPair*1) := 
          get-aliased-symbols(Import*, get-module-info(InfoMsgTuple1)),
        symbols($Symbol*1) := 
          get-defined-symbols(Import*, get-module-info(InfoMsgTuple1)),

        [symbolpairs(ParameterSymbolPair*), $Msgs0] := 
          get-parameter-symbols($Module, [symbolpairs(),], $ModuleId),

        [symbolpairs(DeclaredSymbolPair*2), $Msgs1] := 
          get-hidden-declared-symbols($Module, [symbolpairs(ParameterSymbolPair*), ], $ModuleId),
        [symbolpairs(AliasedSymbolPair*2), $Msgs2] := 
          get-hidden-aliased-symbols($Module, [symbolpairs(), ], $ModuleId, 
                                   symbolpairs(AliasedSymbolPair*1)),

        [StartSymbolPairsSet, $Msgs3] := 
          get-start-symbols($Module, [symbolpairs(), ], $ModuleId),

        $Msgs4 := check-CHAR-sort($Module, , $ModuleId),

        symbols($Symbol*3) := get-used-symbols($Module, symbols()),
        symbols($Symbol*4) := get-defined-symbols($Module, symbols()),

        symbols($Symbol*5) := diff(symbols($Symbol*3), 
                                   de-modularize(symbolpairs(ParameterSymbolPair*
                                                             AliasedSymbolPair*2
                                                             DeclaredSymbolPair*2
                                                             AliasedSymbolPair*1
                                                             DeclaredSymbolPair*1))),
        symbols($Symbol*6) := diff(de-modularize(StartSymbolPairsSet),
                                   symbols($Symbol*1 $Symbol*4)),

        $String1 := moduleid2str($ModuleId),
        $String2 := "undeclared sorts in " || $String1,
        $Msgs5 := make-symbol-warnings($Symbol*5, $String2),
        $String3 := "start-symbols in " || $String1 || " not defined in any right-hand",
        $Msgs6 := make-symbol-warnings($Symbol*6, $String3),

        $Msgs7 := get-messages(InfoMsgTuple1),                  
        InfoMsgTuple3 := put-messages($Msgs1, $Msgs2, $Msgs3, 
                                      $Msgs4, $Msgs5, $Msgs6, $Msgs7,
                                      InfoMsgTuple1),

        ModuleInfoTable3 := get-module-info(InfoMsgTuple3),
        ModuleInfoTable4 := 
          put-used-symbols-info($ModuleId, symbols($Symbol*3), ModuleInfoTable3),
        ModuleInfoTable5 := 
          put-defined-symbols-info($ModuleId, symbols($Symbol*4), ModuleInfoTable4),
        InfoMsgTuple4 :=  put-module-info(ModuleInfoTable5, InfoMsgTuple3)
        ====>
        check-module-sorts($Module, InfoMsgTuple1) = InfoMsgTuple4

  [cSs-1'1] check-CHAR-sort(variables Prod*, $Msgs, $ModuleId) = $Msgs

  [cSs-1'2] check-CHAR-sort(Prod, $Msgs, $ModuleId) =
              check-CHAR-sort2(Prod, $Msgs, Prod, $ModuleId)

  [cSs-2'1] CHAR == $Sort,
            $Location := get-location($Sort),
            $String1 := moduleid2str($ModuleId),
            $String2 := production2str(Prod),
            $String3 := "sort CHAR used in production rule in " || $String1
            ====>
            check-CHAR-sort2($Sort, $Msgs, Prod, $ModuleId) =
              $Msgs, make-warning($String3, $String2, $Location)

  [musm-1'1] make-symbol-warnings(,$String1) = 

  [msum-1'2] $Location := get-location($Symbol),
             $String2 := symbol2str($Symbol),
             $Msg := make-warning($String1, $String2, $Location),
             $Msg* := make-symbol-warnings($Symbol*, $String1)
             ===>
             make-symbol-warnings($Symbol $Symbol*, $String1) = $Msg, $Msg*
