module ProductionChecker

imports Sdf-Type-Environment
exports
  context-free syntax
    check-module-prods(Module, Info-Msg-Tuple) -> Info-Msg-Tuple

hiddens
  context-free syntax
    get-exported-cf-prods(Module, ProductionsSet)  -> ProductionsSet {traversal(accu, break, top-down)}
    get-exported-cf-prods(Section, ProductionsSet) -> ProductionsSet {traversal(accu, break, top-down)}
    get-hidden-cf-prods(Module, ProductionsSet)    -> ProductionsSet {traversal(accu, break, top-down)}
    get-hidden-cf-prods(Section, ProductionsSet)   -> ProductionsSet {traversal(accu, break, top-down)}
    get-cf-prods(Grammar, ProductionsSet)          -> ProductionsSet {traversal(accu, break, top-down)}
    get-prods(Production*, ProductionsSet)         -> ProductionsSet {traversal(accu, break, top-down)}
    get-prods(Production, ProductionsSet)          -> ProductionsSet {traversal(accu, break, top-down)}
    get-prods-in-prios(Module, ProductionsSet)     -> ProductionsSet {traversal(accu, break, top-down)}
    get-prods-in-prios(Grammar, ProductionsSet)    -> ProductionsSet {traversal(accu, break, top-down)}
    get-prods-in-prios(Priorities, ProductionsSet) -> ProductionsSet {traversal(accu, break, top-down)}
    get-prods-in-prios(Production, ProductionsSet) -> ProductionsSet {traversal(accu, break, top-down)}

hiddens
  context-free syntax
    check-priorities(Module, {Feedback ","}*, ModuleId, ProductionsSet)               -> {Feedback ","}* {traversal(accu, break, top-down)}
    check-priorities(Priority, {Feedback ","}*, ModuleId, ProductionsSet)             -> {Feedback ","}* {traversal(accu, break, top-down)}

  context-free syntax
    check-priorities-given-symbol(Group, {Feedback ","}*, ModuleId, Symbol, ProductionsSet) -> {Feedback ","}* {traversal(accu, break, top-down)}
    check-priorities-given-symbol({Group ">"}+, {Feedback ","}*, ModuleId, Symbol, ProductionsSet) ->{Feedback ","}* {traversal(accu, break, top-down)}
    check-priorities-given-symbol(Production, {Feedback ","}*, ModuleId, Symbol, ProductionsSet)   ->{Feedback ","}* {traversal(accu, break, top-down)}

  context-free syntax
    get-rhs-production(Group, SymbolsSet)                                      -> SymbolsSet {traversal(accu, break, top-down)}
    get-rhs-production(Production, SymbolsSet)                                 -> SymbolsSet {traversal(accu, break, top-down)}

  context-free syntax
    is-injection-production(Symbol, Symbol, ProductionsSet)                    -> Boolean

  context-free syntax
    check-right-hand-sides(Module, {Feedback ","}*, ModuleId)     -> {Feedback ","}* {traversal(accu, break, top-down)}
    check-right-hand-sides(Production, {Feedback ","}*, ModuleId) -> {Feedback ","}* {traversal(accu, break, top-down)}

  context-free syntax
    check-right-hand-side-lexical-prod(Module, {Feedback ","}*, ModuleId)      -> {Feedback ","}* {traversal(accu, break, top-down)}
    check-right-hand-side-lexical-prod(Grammar, {Feedback ","}*, ModuleId)     -> {Feedback ","}* {traversal(accu, break, top-down)}
    check-right-hand-side-lexical-prod(Production*, {Feedback ","}*, ModuleId) -> {Feedback ","}* {traversal(accu, break, top-down)}
    check-right-hand-side-lexical-prod(Production, {Feedback ","}*, ModuleId)  -> {Feedback ","}* {traversal(accu, break, top-down)}


hiddens
  variables
    "Grammar"[0-9]*         -> Grammar
    "Prod"[0-9]*            -> Production
    "Prod*"[0-9]*           -> Production*
    "ProductionsSet"[0-9]*  -> ProductionsSet

    "Priorities"[0-9]*      -> Priorities

    "Module"[0-9]*          -> Module
    "Module*"[0-9]*         -> Module*
    "$ModuleId"[0-9]*       -> ModuleId

    "Msg"[0-9]*             -> Feedback
    "Msg*"[0-9]*            -> {Feedback ","}*
    "Msgs"[0-9]*            -> {Feedback ","}*

    "Import*"[0-9]*         -> Import*
    
    "InfoMsgTuple"[0-9]*    -> Info-Msg-Tuple
    "ModuleInfoTable"[0-9]* -> Module-Info-Table

    "Attrs"[0-9]*           -> Attributes
    "Assoc"[0-9]*           -> Associativity
    "$Literal"[0-9]*        -> Literal
    "$Sort"[0-9]*           -> Sort
    "Symbol"[0-9]*          -> Symbol
    "Symbol*"[0-9]*         -> Symbol*
    "Symbol,*"[0-9]*        -> {Symbol ","}*
    "Group"[0-9]*           -> Group
    "Group+"[0-9]*          -> {Group ">"}+

    "$String"[0-9]*         -> StrCon
