equations

  [cimt-1'1] create-info-msg-tuple() = [{}]

  [cme-1'1] create-module-entry($ModuleId,{ModuleInfoEntry*}) =
              {[$ModuleId, true, 
                [imports(), symbols(), symbols(), symbols(), symbols(), symbols(), productions(), constructors()], ] ModuleInfoEntry*}

  [gmi-1'1] get-module-info([ModuleInfoTable]) = ModuleInfoTable

equations

  [gm-1'1] get-messages($ModuleId, [ModuleInfoTable]) = get-messages($ModuleId, ModuleInfoTable)

equations

  [default-gam-1'0]  get-all-messages([{}]) =

  [gam-1'1]  get-all-messages([{[$ModuleId, Bool, ModuleInfo, Messages]
                                   ModuleInfoEntry*2}]) = 
Messages, get-all-messages([{ModuleInfoEntry*2}])

equations

  [pmi-1'1] put-module-info(ModuleInfoTable1,
                            [ModuleInfoTable2]) = 
              [ModuleInfoTable1]

equations

  [pm-1'1] put-messages($ModuleId, Messages1, 
                          [{ModuleInfoEntry*1
                           [$ModuleId, Bool, ModuleInfo, Messages]
                           ModuleInfoEntry*2}]) =
             [{ModuleInfoEntry*1
                           [$ModuleId, Bool, ModuleInfo, Messages1]
                           ModuleInfoEntry*2}]

  [default-pm-1'2] put-messages($ModuleId, Messages, [ModuleInfoTable]) =
                     [put-messages-info($ModuleId, Messages, ModuleInfoTable)]

equations

  [mmau-1'1] mark-modules-as-unchecked({}) = {}

  [mmau-1'1] {ModuleInfoEntry*2} := 
               mark-modules-as-unchecked({ModuleInfoEntry*1})
             =====================
             mark-modules-as-unchecked({[$ModuleId, Bool, ModuleInfo, Messages]
                                        ModuleInfoEntry*1}) = 
               {[$ModuleId, false,  ModuleInfo, Messages] ModuleInfoEntry*2}
    
  [smc-1'1] set-module-as-checked($ModuleId,
                                  {ModuleInfoEntry*1
                                  [$ModuleId, Bool, ModuleInfo, Messages]
                                   ModuleInfoEntry*2}) =
              {ModuleInfoEntry*1
               [$ModuleId, true, ModuleInfo, Messages]
               ModuleInfoEntry*2}

  [default-smc-1'2] set-module-as-checked($ModuleId,
                                          {ModuleInfoEntry*}) = 
                      {[$ModuleId, 
                        true, 
                        [imports(), symbols(), symbols(), symbols(), symbols(), symbols(), productions(), constructors()], ] 
                       ModuleInfoEntry*}
    
  [mic-1'1] module-is-checked($ModuleId,
                              {ModuleInfoEntry*1
                               [$ModuleId, Bool, ModuleInfo, Messages]
                               ModuleInfoEntry*2}) = Bool

  [default-mic-1'2] module-is-checked($ModuleId,
                                      {ModuleInfoEntry*}) = false

  [pii-1'1] put-imports-info($ModuleId, 
                             ImportsSet1,
                             {ModuleInfoEntry*1 
                              [$ModuleId, Bool, 
                               [ImportsSet2,
                                SymbolPairsSet1, SymbolPairsSet2, 
                                SymbolsSet1, SymbolsSet2, SymbolsSet3,
                                ProductionsSet, ConstructorSet], Messages]
                              ModuleInfoEntry*2}) =
               {ModuleInfoEntry*1
                [$ModuleId, true, 
                 [ImportsSet1, SymbolPairsSet1, SymbolPairsSet2, SymbolsSet1, SymbolsSet2, SymbolsSet3, ProductionsSet, ConstructorSet], Messages] 
                ModuleInfoEntry*2}

  [default-pii-1'1] put-imports-info($ModuleId, 
                                     ImportsSet,
                                     {ModuleInfoEntry*}) =
                       {[$ModuleId, true, 
                         [ImportsSet, symbols(), symbols(), 
                          symbols(), symbols(), symbols(),
                          productions(), constructors()], ] 
                         ModuleInfoEntry*}

  [gds-1'1] get-imports($ModuleId,
                        {ModuleInfoEntry*1
                         [$ModuleId, Bool, 
                          [ImportsSet, SymbolPairsSet1, SymbolPairsSet2, 
                           SymbolsSet1, SymbolsSet2, SymbolsSet3,
                           ProductionsSet, ConstructorSet], Messages]
                         ModuleInfoEntry*2}) = ImportsSet

  [pdsi-1'1] put-declared-symbols-info($ModuleId, 
                                       SymbolPairsSet1,
                                       {ModuleInfoEntry*1 
                                        [$ModuleId, Bool, 
                                         [ImportsSet,
                                          SymbolPairsSet2, SymbolPairsSet3, 
                                          SymbolsSet1,  SymbolsSet2, SymbolsSet3,
                                          ProductionsSet, ConstructorSet], Messages]
                                        ModuleInfoEntry*2}) =
               {ModuleInfoEntry*1
                [$ModuleId, true, 
                 [ImportsSet, SymbolPairsSet1, SymbolPairsSet3, SymbolsSet1, SymbolsSet2, SymbolsSet3, ProductionsSet, ConstructorSet], Messages] 
                ModuleInfoEntry*2}

  [default-pdsi-1'1] put-declared-symbols-info($ModuleId, 
                                               SymbolPairsSet,
                                               {ModuleInfoEntry*}) =
                       {[$ModuleId, true, 
                         [imports(), SymbolPairsSet, symbols(), 
                          symbols(), symbols(), symbols(),
                          productions(), constructors()], ] 
                         ModuleInfoEntry*}

  [gds-1'1] get-declared-symbols($ModuleId,
                                 {ModuleInfoEntry*1
                                  [$ModuleId, Bool, 
                                   [ImportsSet, SymbolPairsSet1, SymbolPairsSet2, 
                                    SymbolsSet1, SymbolsSet2, SymbolsSet3,
                                    ProductionsSet, ConstructorSet], Messages]
                                  ModuleInfoEntry*2}) = SymbolPairsSet1

  [default-gds-1'2] get-declared-symbols($ModuleId, ModuleInfoTable) = symbols()

  [gds-2'1] get-declared-symbols(, ModuleInfoTable) = symbols()

  [gds-2'2] $ModuleName := get-modulename(Import),
            $ModuleId := get-module-id($ModuleName),
            SymbolPairsSet1 := 
               get-declared-symbols($ModuleId, ModuleInfoTable),
            SymbolPairsSet2 := get-declared-symbols(Import*, ModuleInfoTable)
            =============================================================
            get-declared-symbols(Import Import*, 
                                 ModuleInfoTable) = merge(SymbolPairsSet1, SymbolPairsSet2)



  [pasi-1'1] put-aliased-symbols-info($ModuleId, 
                                      SymbolPairsSet1,
                                      {ModuleInfoEntry*1 
                                       [$ModuleId, Bool, 
                                        [ImportsSet, SymbolPairsSet2, SymbolPairsSet3,
                                         SymbolsSet1, SymbolsSet2, SymbolsSet3,
                                         ProductionsSet, ConstructorSet], Messages]
                                       ModuleInfoEntry*2}) =
              {ModuleInfoEntry*1
               [$ModuleId, true, 
                [ImportsSet, SymbolPairsSet2, SymbolPairsSet1, 
                 SymbolsSet1, SymbolsSet2, SymbolsSet3,
                  ProductionsSet, ConstructorSet], Messages] 
               ModuleInfoEntry*2}

  [default-pasi-1'1] put-aliased-symbols-info($ModuleId, 
                                              SymbolPairsSet,
                                              {ModuleInfoEntry*}) =
                      {[$ModuleId, true, 
                        [imports(), symbols(), SymbolPairsSet, 
                         symbols(), symbols(), symbols(),
                         productions(), constructors()], ] 
                        ModuleInfoEntry*}

  [gas-1'1] get-aliased-symbols($ModuleId,
                                 {ModuleInfoEntry*1
                                  [$ModuleId, Bool, 
                                   [ImportsSet, SymbolPairsSet1, SymbolPairsSet2,
                                    SymbolsSet1, SymbolsSet2, SymbolsSet3,
                                    ProductionsSet, ConstructorSet], Messages]
                                  ModuleInfoEntry*2}) = SymbolPairsSet2

  [default-gas-1'2] get-aliased-symbols($ModuleId, ModuleInfoTable) = symbols()

  [gas-2'2] get-aliased-symbols(, ModuleInfoTable) = symbols()



  [gas-2'3] $ModuleName := get-modulename(Import),
            $ModuleId := get-module-id($ModuleName),
            SymbolPairsSet1 := 
               get-aliased-symbols($ModuleId, ModuleInfoTable),
            SymbolPairsSet2 := get-aliased-symbols(Import*, ModuleInfoTable)
            ============================================================
            get-aliased-symbols(Import Import*, ModuleInfoTable) = 
              merge(SymbolPairsSet1, SymbolPairsSet2)

equations

  [pdsi-1'1] put-defined-symbols-info($ModuleId, 
                                      SymbolsSet1,
                                      {ModuleInfoEntry*1 
                                       [$ModuleId, Bool, 
                                        [ImportsSet, SymbolPairsSet2, SymbolPairsSet3, 
                                         SymbolsSet2, SymbolsSet3, SymbolsSet4,
                                         ProductionsSet, ConstructorSet], Messages]
                                       ModuleInfoEntry*2}) =
              {ModuleInfoEntry*1
               [$ModuleId, true, 
                [ImportsSet, SymbolPairsSet2, SymbolPairsSet2, 
                 SymbolsSet1, SymbolsSet3, SymbolsSet4,
                 ProductionsSet, ConstructorSet], Messages] 
               ModuleInfoEntry*2}

  [default-pdsi-1'1] put-defined-symbols-info($ModuleId, 
                                              SymbolsSet,
                                              {ModuleInfoEntry*}) =
                      {[$ModuleId, true, 
                        [imports(), symbols(), symbols(), 
                         SymbolsSet, symbols(), symbols(),
                         productions(), constructors()], ] 
                        ModuleInfoEntry*}

  [gds-1'1] get-defined-symbols($ModuleId,
                                 {ModuleInfoEntry*1
                                  [$ModuleId, Bool, 
                                   [ImportsSet, SymbolPairsSet1, SymbolPairsSet2, 
                                    SymbolsSet1, SymbolsSet2, SymbolsSet3,
                                    ProductionsSet, ConstructorSet], Messages]
                                  ModuleInfoEntry*2}) = SymbolsSet1

  [default-gds-1'2] get-defined-symbols($ModuleId, ModuleInfoTable) = symbols()

  [gds-2'1] get-defined-symbols(, ModuleInfoTable) = symbols()

  [gds-2'2] $ModuleName := get-modulename(Import),
            $ModuleId := get-module-id($ModuleName),
            SymbolsSet1 := 
               get-defined-symbols($ModuleId, ModuleInfoTable),
            SymbolsSet2 := get-defined-symbols(Import*, ModuleInfoTable)
            ====>
            get-defined-symbols(Import Import*, ModuleInfoTable) = 
              merge(SymbolsSet1, SymbolsSet2)

equations

  [pdsi-1'1] put-renamed-symbols-info($ModuleId, 
                                      SymbolsSet1,
                                      {ModuleInfoEntry*1 
                                       [$ModuleId, Bool, 
                                        [ImportsSet, SymbolPairsSet2, SymbolPairsSet3, 
                                         SymbolsSet2, SymbolsSet3, SymbolsSet4,
                                         ProductionsSet, ConstructorSet], Messages]
                                       ModuleInfoEntry*2}) =
              {ModuleInfoEntry*1
               [$ModuleId, true, 
                [ImportsSet, SymbolPairsSet2, SymbolPairsSet2, 
                 SymbolsSet2, SymbolsSet3, SymbolsSet1,
                 ProductionsSet, ConstructorSet], Messages] 
               ModuleInfoEntry*2}

  [default-pdsi-1'1] put-renamed-symbols-info($ModuleId, 
                                              SymbolsSet,
                                              {ModuleInfoEntry*}) =
                      {[$ModuleId, true, 
                        [imports(), symbols(), symbols(), 
                         symbols(), symbols(), SymbolsSet,
                         productions(), constructors()], ] 
                        ModuleInfoEntry*}

  [gds-1'1] get-renamed-symbols($ModuleId,
                                 {ModuleInfoEntry*1
                                  [$ModuleId, Bool, 
                                   [ImportsSet, SymbolPairsSet1, SymbolPairsSet2, 
                                    SymbolsSet1, SymbolsSet2, SymbolsSet3,
                                    ProductionsSet, ConstructorSet], Messages]
                                  ModuleInfoEntry*2}) = SymbolsSet3

  [default-gds-1'2] get-renamed-symbols($ModuleId, ModuleInfoTable) = symbols()

  [gds-2'1] get-renamed-symbols(, ModuleInfoTable) = symbols()

  [gds-2'2] $ModuleName := get-modulename(Import),
            $ModuleId := get-module-id($ModuleName),
            SymbolsSet1 := 
               get-renamed-symbols($ModuleId, ModuleInfoTable),
            SymbolsSet2 := get-renamed-symbols(Import*, ModuleInfoTable)
            ====>
            get-renamed-symbols(Import Import*, ModuleInfoTable) = 
              merge(SymbolsSet1, SymbolsSet2)

equations

  [pusi-1'1] put-used-symbols-info($ModuleId, 
                                      SymbolsSet1,
                                      {ModuleInfoEntry*1 
                                       [$ModuleId, Bool, 
                                        [ImportsSet, SymbolPairsSet2, SymbolPairsSet3, 
                                         SymbolsSet2, SymbolsSet3, SymbolsSet4,
                                         ProductionsSet, ConstructorSet], Messages]
                                       ModuleInfoEntry*2}) =
              {ModuleInfoEntry*1
               [$ModuleId, true, 
                [ImportsSet, SymbolPairsSet2, SymbolPairsSet2, 
                 SymbolsSet2, SymbolsSet1, SymbolsSet4,
                 ProductionsSet, ConstructorSet], Messages] 
               ModuleInfoEntry*2}

  [default-pusi-1'1] put-used-symbols-info($ModuleId, 
                                           SymbolsSet,
                                           {ModuleInfoEntry*}) =
                      {[$ModuleId, true, 
                        [imports(), symbols(), symbols(), 
                         symbols(), SymbolsSet, symbols(),
                         productions(), constructors()], ] 
                        ModuleInfoEntry*}

  [gus-1'1] get-used-symbols($ModuleId,
                                 {ModuleInfoEntry*1
                                  [$ModuleId, Bool, 
                                   [ImportsSet, SymbolPairsSet1, SymbolPairsSet2, 
                                    SymbolsSet1, SymbolsSet2, SymbolsSet3,
                                    ProductionsSet, ConstructorSet], Messages]
                                  ModuleInfoEntry*2}) = SymbolsSet2

  [default-gus-1'2] get-used-symbols($ModuleId, ModuleInfoTable) = symbols()

  [gus-2'1] get-used-symbols(, ModuleInfoTable) = symbols() 

  [gus-2'2] $ModuleName := get-modulename(Import),
            $ModuleId := get-module-id($ModuleName),
            SymbolsSet1 := 
               get-used-symbols($ModuleId, ModuleInfoTable),
            SymbolsSet2 := get-used-symbols(Import*, ModuleInfoTable)
            ======================================================
            get-used-symbols(Import Import*, ModuleInfoTable) = 
              merge(SymbolsSet1, SymbolsSet2)

  [ppi-1'1] put-production-info($ModuleId, 
                                ProductionsSet1,
                                {ModuleInfoEntry*1 
                                 [$ModuleId, Bool, 
                                  [ImportsSet, SymbolPairsSet1, SymbolPairsSet2, 
                                   SymbolsSet1, SymbolsSet2, SymbolsSet3,
                                   ProductionsSet2, ConstructorSet], Messages]
                                 ModuleInfoEntry*2}) =
              {ModuleInfoEntry*1
               [$ModuleId, true, 
                [ImportsSet, SymbolPairsSet1, SymbolPairsSet2, 
                 SymbolsSet1, SymbolsSet2, SymbolsSet3,
                 ProductionsSet1, ConstructorSet], Messages] 
               ModuleInfoEntry*2}

  [default-ppi-1'1] put-production-info($ModuleId, 
                                        ProductionsSet,
                                        {ModuleInfoEntry*}) =
                      {[$ModuleId, true, 
                        [imports(), symbols(), symbols(), 
                         symbols(), symbols(), symbols(),
                         ProductionsSet, constructors()], ] 
                        ModuleInfoEntry*}

  [gdp-1'1] get-defined-productions($ModuleId,
                                    {ModuleInfoEntry*1
                                     [$ModuleId, Bool, 
                                      [ImportsSet, SymbolPairsSet1, SymbolPairsSet2, 
                                       SymbolsSet1, SymbolsSet2, SymbolsSet3,
                                       ProductionsSet, ConstructorSet], Messages]
                                     ModuleInfoEntry*2}) = ProductionsSet

  [default-gdp-1'2] get-defined-productions($ModuleId, ModuleInfoTable) = productions()

  [gdp-2'1] get-defined-productions(, ModuleInfoTable) = productions()

  [gdp-2'2] $ModuleName := get-modulename(Import),
            $ModuleId := get-module-id($ModuleName),
            productions(Production*1) := 
               get-defined-productions($ModuleId, ModuleInfoTable),
            productions(Production*2) :=
               get-defined-productions(Import*, ModuleInfoTable)
            ====================================================
            get-defined-productions(Import Import*, 
                                    ModuleInfoTable) = 
              productions(Production*1) ++ productions(Production*2)

equations

  [pci-1'1] put-constructor-info($ModuleId, 
                                 ConstructorSet1,
                                 {ModuleInfoEntry*1 
                                 [$ModuleId, Bool, 
                                  [ImportsSet, SymbolPairsSet1, SymbolPairsSet2, 
                                   SymbolsSet1, SymbolsSet2, SymbolsSet3,
                                   ProductionsSet, ConstructorSet2], Messages]
                                 ModuleInfoEntry*2}) =
              {ModuleInfoEntry*1
               [$ModuleId, true, 
                [ImportsSet, SymbolPairsSet1, SymbolPairsSet2, 
                 SymbolsSet1, SymbolsSet2, SymbolsSet3,
                 ProductionsSet, ConstructorSet1], Messages] 
               ModuleInfoEntry*2}

  [default-pci-1'2] put-constructor-info($ModuleId, 
                                         ConstructorSet,
                                         {ModuleInfoEntry*}) =
                      {[$ModuleId, true, 
                        [imports(), symbols(), symbols(), 
                         symbols(), symbols(), symbols(),
                         productions(), ConstructorSet], ] 
                        ModuleInfoEntry*}

  [gc-1'1] get-constructors($ModuleId,
                            {ModuleInfoEntry*1
                             [$ModuleId, Bool, 
                              [ImportsSet, SymbolPairsSet1, SymbolPairsSet2, 
                               SymbolsSet1, SymbolsSet2, SymbolsSet3,
                               ProductionsSet, ConstructorSet], Messages]
                             ModuleInfoEntry*2}) = ConstructorSet

  [default-gc-1'2] get-constructors($ModuleId, ModuleInfoTable) = constructors()

  [gc-1'1] get-constructors(, ModuleInfoTable) = constructors()

  [gc-1'2] $ModuleName := get-modulename(Import),
            $ModuleId := get-module-id($ModuleName),
           constructors(SymbolCons*1) := 
              get-constructors($ModuleId, ModuleInfoTable),
           constructors(SymbolCons*2) :=
              get-constructors(Import*, ModuleInfoTable)
           =====================================================
           get-constructors(Import Import*,  ModuleInfoTable) = 
              constructors(SymbolCons*1 SymbolCons*2)

equations

  [pci-1'1] put-messages-info($ModuleId, 
                                 Messages1,
                                 {ModuleInfoEntry*1 
                                 [$ModuleId, Bool, 
                                  [ImportsSet, SymbolPairsSet1, SymbolPairsSet2, 
                                   SymbolsSet1, SymbolsSet2, SymbolsSet3,
                                   ProductionsSet, ConstructorSet], Messages]
                                 ModuleInfoEntry*2}) =
              {ModuleInfoEntry*1
               [$ModuleId, true, 
                [ImportsSet, SymbolPairsSet1, SymbolPairsSet2, 
                 SymbolsSet1, SymbolsSet2, SymbolsSet3,
                 ProductionsSet, ConstructorSet], Messages1] 
               ModuleInfoEntry*2}

  [default-pci-1'2] put-messages-info($ModuleId, 
                                         Messages,
                                         {ModuleInfoEntry*}) =
                      {[$ModuleId, true, 
                        [imports(), symbols(), symbols(), 
                         symbols(), symbols(), symbols(),
                         productions(), constructors()], Messages ] 
                        ModuleInfoEntry*}

  [gc-1'1] get-messages($ModuleId,
                            {ModuleInfoEntry*1
                             [$ModuleId, Bool, 
                              [ImportsSet, SymbolPairsSet1, SymbolPairsSet2, 
                               SymbolsSet1, SymbolsSet2, SymbolsSet3,
                               ProductionsSet, ConstructorSet], Messages]
                             ModuleInfoEntry*2}) = Messages

  [default-gc-1'2] get-messages($ModuleId, ModuleInfoTable) = 

  [gc-1'1] get-messages(, ModuleInfoTable) = 

  [gc-1'2] $ModuleName := get-modulename(Import),
            $ModuleId := get-module-id($ModuleName),
           Messages1 := 
              get-messages($ModuleId, ModuleInfoTable),
           Messages2 :=
              get-messages(Import*, ModuleInfoTable)
           =====================================================
           get-messages(Import Import*,  ModuleInfoTable) = 
              Messages1, Messages2
