equations

  [cs-1'1] check-labels(Definition) = check-labels(Definition, )

  [cs-1'2] check-labels(Module, Msgs) = 
             check-labels2(Module, Msgs, get-module-name(Module))

  [cl-1'3] [LabelsSet, Msgs2] := 
             check-labels3(Symbol*, [labels(), Msgs1], 
                        $ModuleId, Symbol* -> $Symbol Attrs)
           ====>
           check-labels2(Symbol* -> $Symbol Attrs, 
                        Msgs1, $ModuleId) = Msgs2

  [cl-1'3] [LabelsSet, Msgs2] := 
             check-labels3(Symbol,*, [labels(), Msgs1], 
                         $ModuleId, $Literal(Symbol,*) -> $Symbol Attrs)
           ====>
           check-labels2($Literal(Symbol,*) -> $Symbol Attrs, 
                         Msgs1, $ModuleId) = Msgs2

  [cl-1'4] contains($Literal, LabelsSet) == true,
           %%$Location := get-location($Literal)
           $String := production2str(Prod)
           ====>
           check-labels3($Literal:$Symbol, [LabelsSet, Msgs], $ModuleId, Prod) =
             [LabelsSet, 
              Msgs, make-warning("double-used-label", $String)]

  [cl-1'4] contains($Literal, LabelsSet) == false
           ====>
           check-labels3($Literal:$Symbol, [LabelsSet, Msgs], $ModuleId, Prod) =
             [$Literal ++ LabelsSet, Msgs]
             

  [c-1'1] contains($Literal, labels($Literal*1 $Literal $Literal*2)) = true

  [default-c-1'2] contains($Literal, LabelsSet) = false

  [c-2'1] $Literal ++ labels($Literal*) = labels($Literal $Literal*)
