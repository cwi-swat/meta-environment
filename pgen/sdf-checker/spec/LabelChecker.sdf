module LabelChecker

%%imports utilities/PosInfo[Literal]
imports SdfCheckerFeedback
imports ModuleOperations

exports
  context-free start-symbols {Error ","}*
  context-free syntax
    check-labels(Definition) -> {Error ","}*

hiddens
  sorts LabelsSet Labels-Msgs-Tuple

  context-free syntax
    labels(Literal*)               -> LabelsSet
    "[" LabelsSet "," {Error ","}* "]" -> Labels-Msgs-Tuple

  context-free syntax
    contains(Literal, LabelsSet) -> Boolean
    Literal "++" LabelsSet       -> LabelsSet

  context-free syntax
    check-labels(Definition, {Error ","}*)            -> {Error ","}* {traversal(accu, break, top-down)}
    check-labels(Module, {Error ","}*)                -> {Error ","}* {traversal(accu, break, top-down)}
    check-labels2(Module, {Error ","}*, ModuleId)      -> {Error ","}* {traversal(accu, break, top-down)}
    check-labels2(Production, {Error ","}*, ModuleId)  -> {Error ","}* {traversal(accu, break, top-down)}
    check-labels3(Symbol*, Labels-Msgs-Tuple, 
                  ModuleId, Production)            -> Labels-Msgs-Tuple {traversal(accu, break, top-down)}
    check-labels3({Symbol ","}*, Labels-Msgs-Tuple, 
                  ModuleId, Production)            -> Labels-Msgs-Tuple {traversal(accu, break, top-down)}
    check-labels3(Symbol, Labels-Msgs-Tuple, 
                 ModuleId, Production)            -> Labels-Msgs-Tuple {traversal(accu, break, top-down)}

hiddens
  variables
    "Prod"[0-9]*       -> Production
    "Module"[0-9]*     -> Module
    "$ModuleId"[0-9]*  -> ModuleId
    "Definition"[0-9]* -> Definition
    "Msgs"[0-9]*       -> {Error ","}*
    "$Symbol"[0-9]*    -> Symbol
    "$Literal"[0-9]*   -> Literal
    "$Literal*"[0-9]*  -> Literal*
    "Symbol*"[0-9]*    -> Symbol*
    "Symbol,*"[0-9]*   -> {Symbol ","}*
    "Attrs"[0-9]*      -> Attributes

    "LabelsSet"[0-9]*  -> LabelsSet

%%    "$Location"[0-9]* -> Location
    "$String"[0-9]*   -> StrCon


