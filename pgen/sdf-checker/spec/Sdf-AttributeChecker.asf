equations

  [ca-1'1] check-sdf-attributes(Definition) =
             check-attributes(Definition, )

  [ca-1'2] $ModuleId := get-module-name(Module)
           ====>
           check-attributes(Module, Msgs) = 
             check-attributes2(Module, Msgs, $ModuleId)

  [ca-2'1] $Symbol* -> $Symbol {Attr*1, bracket, Attr*2} := Production,
           $Location := get-location(Production),
           is-bracket-definition($Symbol* -> $Symbol) == false
           ====>
           check-attributes2(Production, Msgs, $ModuleId) = 
             Msgs, warning("", "", "", "illegal-attribute: bracket", [subject("", $Location)])

  [ca-2'2] $Literal ( $Symbol,* ) -> $Symbol {Attr*1, bracket, Attr*2} := Production,
           $Location := get-location(Production)
           ====>
           check-attributes2(Production, Msgs, $ModuleId) =
             Msgs, warning("", "", "", "illegal-attribute: bracket", [subject("", $Location)])

  [ca-2'3] $Symbol* -> $Symbol {Attr*1, left, Attr*2} := Production,
           $Location := get-location(Production),
           is-binary-definition($Symbol* -> $Symbol) == false
           ====>
           check-attributes2(Production, Msgs, $ModuleId) = 
             Msgs, warning("", "", "", "illegal-attribute: left", [subject("", $Location)])

  [ca-2'4] $Literal ( $Symbol,* ) -> $Symbol {Attr*1, left, Attr*2} := Production,
           $Location := get-location(Production)
           ====>
           check-attributes2(Production, Msgs, $ModuleId) = 
             Msgs, warning("", "", "", "illegal-attribute: left", [subject("", $Location)])

  [ca-2'5] $Symbol* -> $Symbol {Attr*1, assoc, Attr*2} := Production,
           $Location := get-location(Production),
           is-binary-definition($Symbol* -> $Symbol) == false
           =================================================
           check-attributes2(Production, Msgs, $ModuleId) = 
             Msgs, warning("", "", "", "illegal-attribute: assoc", [subject("", $Location)])

  [ca-2'6] $Literal ( $Symbol,* ) -> $Symbol {Attr*1, assoc, Attr*2} := Production,
           $Location := get-location(Production)
           ====>
           check-attributes2(Production, Msgs, $ModuleId) = 
             Msgs, warning("", "", "", "illegal-attribute: assoc", [subject("", $Location)])

  [ca-2'7] $Symbol* -> $Symbol {Attr*1, right, Attr*2} := Production,
           $Location := get-location(Production),
           is-binary-definition($Symbol* -> $Symbol) == false
           =================================================
           check-attributes2(Production, Msgs, $ModuleId) = 
             Msgs, warning("", "", "", "illegal-attribute: right", [subject("", $Location)])


  [ca-2'8] $Literal ( $Symbol,* ) -> $Symbol {Attr*1, right, Attr*2} := Production,
           $Location := get-location(Production)
           ====>
           check-attributes2(Production, Msgs, $ModuleId) = 
             Msgs, warning("", "", "", "illegal-attribute: right", [subject("", $Location)])

  [ca-2'8] $Symbol* -> $Symbol {Attr*1, non-assoc, Attr*2} := Production,
           $Location := get-location(Production),
           is-binary-definition($Symbol* -> $Symbol) == false
           =================================================
           check-attributes2(Production, Msgs, $ModuleId) = 
             Msgs, warning("", "", "", "illegal-attribute: non-assoc", [subject("", $Location)])

  [ca-2'9] $Literal ( $Symbol,* ) -> $Symbol {Attr*1, non-assoc, Attr*2} := Production,
           $Location := get-location(Production)
           ====>
           check-attributes2(Production, Msgs, $ModuleId) = 
             Msgs, warning("", "", "", "illegal-attribute: non-assoc", [subject("", $Location)])

  [ibd-1'1] is-binary-definition($Symbol1 $Symbol2 $Symbol1 -> $Symbol1) = true 

  [ibd-1'2] is-binary-definition($Symbol $Symbol -> $Symbol) = true 

  [default-ibd-1'3] is-binary-definition(Production) = false

  [ibd-2'1] is-bracket-definition($Literal1 $Symbol $Literal2 -> $Symbol) = true 

  [default-ibd-2'2] is-bracket-definition(Production) = false
