equations

  [ca-1'1] check-sdf-attributes(Definition) =
             check-attributes(Definition, )

  [ca-1'2] $ModuleId := get-module-name(Module)
           ====>
           check-attributes(Module, Msgs) = 
             check-attributes2(Module, Msgs, $ModuleId)

  [ca-2'1] $Symbol* -> $Symbol {Attr*1, bracket, Attr*2} := Production,
           $Location := get-location(Production),
           is-bracket-definition($Symbol* -> $Symbol) == false,
           $String := production2str(Production)
           ====>
           check-attributes2(Production, Msgs, $ModuleId) = 
             Msgs, make-warning("illegal attribute: bracket", $String, $Location)

  [ca-2'2] $FuncName( $Symbol,* ) -> $Symbol {Attr*1, bracket, Attr*2} := Production,
           $Location := get-location(Production),
           $String := production2str(Production)
           ====>
           check-attributes2(Production, Msgs, $ModuleId) =
             Msgs, make-warning("illegal attribute: bracket", $String, $Location)

  [ca-2'3] $Symbol* -> $Symbol {Attr*1, left, Attr*2} := Production,
           $Location := get-location(Production),
           is-binary-definition($Symbol* -> $Symbol) == false,
           $String := production2str(Production)
           ====>
           check-attributes2(Production, Msgs, $ModuleId) = 
             Msgs, make-warning("illegal attribute: left", $String, $Location)

  [ca-2'4] $FuncName ( $Symbol,* ) -> $Symbol {Attr*1, left, Attr*2} := Production,
           $Location := get-location(Production),
           $String := production2str(Production)
           ====>
           check-attributes2(Production, Msgs, $ModuleId) = 
             Msgs, make-warning("illegal attribute: left", $String, $Location)

  [ca-2'5] $Symbol* -> $Symbol {Attr*1, assoc, Attr*2} := Production,
           $Location := get-location(Production),
           is-binary-definition($Symbol* -> $Symbol) == false,
           $String := production2str(Production)
           =================================================
           check-attributes2(Production, Msgs, $ModuleId) = 
             Msgs, make-warning("illegal attribute: assoc", $String, $Location)

  [ca-2'6] $FuncName ( $Symbol,* ) -> $Symbol {Attr*1, assoc, Attr*2} := Production,
           $Location := get-location(Production),
           $String := production2str(Production)
           ====>
           check-attributes2(Production, Msgs, $ModuleId) = 
             Msgs, make-warning("illegal attribute: assoc", $String, $Location)

  [ca-2'7] $Symbol* -> $Symbol {Attr*1, right, Attr*2} := Production,
           $Location := get-location(Production),
           is-binary-definition($Symbol* -> $Symbol) == false,
           $String := production2str(Production)
           =================================================
           check-attributes2(Production, Msgs, $ModuleId) = 
             Msgs, make-warning("illegal attribute: right", $String, $Location)


  [ca-2'8] $FuncName ( $Symbol,* ) -> $Symbol {Attr*1, right, Attr*2} := Production,
           $Location := get-location(Production),
           $String := production2str(Production)
           ====>
           check-attributes2(Production, Msgs, $ModuleId) = 
             Msgs, make-warning("illegal attribute: right", $String, $Location)

  [ca-2'8] $Symbol* -> $Symbol {Attr*1, non-assoc, Attr*2} := Production,
           $Location := get-location(Production),
           is-binary-definition($Symbol* -> $Symbol) == false,
           $String := production2str(Production)
           ====>
           check-attributes2(Production, Msgs, $ModuleId) = 
             Msgs, make-warning("illegal attribute: non-assoc", $String, $Location)

  [ca-2'9] $FuncName ( $Symbol,* ) -> $Symbol {Attr*1, non-assoc, Attr*2} := Production,
           $Location := get-location(Production),
           $String := production2str(Production)
           ====>
           check-attributes2(Production, Msgs, $ModuleId) = 
             Msgs, make-warning("illegal attribute: non-assoc", $String, $Location)

  [ibd-1'1] is-binary-definition($Symbol1 $Symbol* $Symbol1 -> $Symbol1) = true  

  [default-ibd-1'3] is-binary-definition(Production) = false

  [ibd-2'1] is-bracket-definition($String1 $Symbol $String2 -> $Symbol) = true 

  [default-ibd-2'2] is-bracket-definition(Production) = false
