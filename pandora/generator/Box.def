 definition module basic/Whitespace

exports
  lexical syntax
    [\ \t\n\r]	-> LAYOUT
  context-free restrictions
    LAYOUT? -/- [\ \t\n\r] module basic/Comments

imports
  basic/Whitespace

exports
  lexical syntax
    "%%" ~[\n]* "\n"	-> LAYOUT
    "%" ~[\%\n]+ "%"	-> LAYOUT
  context-free restrictions
    LAYOUT? -/- [\%] module basic/NatCon

exports

sorts NatCon

lexical syntax
  
 [0-9]+ -> NatCon {cons("default")}

lexical restrictions

 NatCon -/- [0-9] module basic/StrCon

exports

sorts StrCon Normal Escaped


lexical syntax
    ~[\0-\31\"\\\n] -> Normal {cons("default")}

    "\\n" | "\\t" |  "\\\"" | "\\\\" -> Escaped {cons("special-character")}
    "\\" [0-7][0-7][0-7]             -> Escaped {cons("octal")}

    "\"" (Normal | Escaped)* ("\\\n" (Normal | Escaped)*)* "\"" -> StrCon {cons("default")} module languages/box/syntax/Basic
%% This module describes the most elementary box
%% operators and their options. The box language
%% can be extended in a very simple way. We will
%% give several extensions.
%%\smallskip

imports basic/Comments
imports basic/StrCon
imports basic/NatCon

        
exports
  sorts SpaceSymbol SpaceOption

%%\smallskip\noindent
%% Space options are used to adapt the amount
%% of layout between the boxes. The horizontal,
%% vertical, and indentation offset between boxes
%% can be adapted. Not every combination of
%% space option and box operator makes sense.
%% E.g.\ the modification of the vertical offset
%% in combination of the {\sf H} operator does
%% not make any sense.
%%\smallskip

  context-free syntax
    "hs"                    -> SpaceSymbol {cons("horizontal")}
    "vs"                    -> SpaceSymbol {cons("vertical")}
    "is"                    -> SpaceSymbol {cons("indentation")}
    SpaceSymbol "=" NatCon  -> SpaceOption     

%% We distinguish 6 basic operators in the box
%% language: {\sf H} (horizontal composition),
%% {\sf V} (vertical composition), {\sf HV}
%% (horizontal and/or vertical composition),
%% {\sf HOV} (horizontal or vertical composition),
%% {\sf I} (indentation), and {\sf WD}
%% (invisible box with the same width as some
%% visible box). The most elementary box is a
%% plain string, enclosed by double quotes.
%% A box term consists of a box operator, zero
%% or more space options, and followed by zero or
%% more boxes. The kernel box language is simple
%% but can be easily extended. A specification
%% writer can easily define a new module which
%% imports this kernel box language. For each
%% extension the text formatter and the
%% tex formatter have to be adapted, but because
%% of the strong modularity of ASF+SDF this can
%% be done in a clean manner.
%%\smallskip

exports
  sorts Box

  context-free syntax
    StrCon                                       -> Box {cons("string")}
    "H" options:SpaceOption* "[" list:Box* "]"   -> Box {cons("h")}
    "V" options:SpaceOption* "[" list:Box* "]"   -> Box {cons("v")}
    "HV" options:SpaceOption* "[" list:Box* "]"  -> Box {cons("hv")}
    "HOV" options:SpaceOption* "[" list:Box* "]" -> Box {cons("hov")}
    "I" options:SpaceOption* "[" Box "]"         -> Box {cons("i")}
    "WD" "[" Box "]"                             -> Box {cons("wd")} module languages/box/syntax/Fonts

imports languages/box/syntax/Basic
imports basic/Comments

exports
  sorts FontId
  lexical syntax
    [A-Za-z]+ -> FontId {cons("default")}

exports
  sorts FontParam FontOption FontValue FontOperator
  context-free syntax
    NatCon                   -> FontValue {cons("natural")}
    FontId                   -> FontValue {cons("font-id")}
    FontParam "=" FontValue  -> FontOption
    "F" FontOption*          -> FontOperator
    FontOperator "[" Box "]" -> Box {cons("font-operator")}

    "fn" -> FontParam {cons("name")}
    "fm" -> FontParam {cons("family")}
    "se" -> FontParam {cons("series")}
    "sh" -> FontParam {cons("shape")}
    "sz" -> FontParam {cons("size")}
    "cl" -> FontParam {cons("color")}

    "KW"      -> FontOperator {cons("keyword")}
    "VAR"     -> FontOperator {cons("variable")}
    "NUM"     -> FontOperator {cons("number")}
    "MATH"    -> FontOperator {cons("math")}
    "ESC"     -> FontOperator {cons("escape")}
    "COMM"    -> FontOperator {cons("comment")}
    "STRING"  -> FontOperator {cons("string")} module languages/box/syntax/Box

imports languages/box/syntax/Fonts
 