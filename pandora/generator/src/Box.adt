[ constructor ( NatCon , default , appl ( prod ( [ lex ( sort ( "NatCon" ) ) ] , cf ( sort ( "NatCon" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < string ( chars ) > ) ] ) ) , constructor ( Normal , default , appl ( prod ( [ lex ( sort ( "Normal" ) ) ] , cf ( sort ( "Normal" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < string ( chars ) > ) ] ) ) , constructor ( Escaped , special-character , appl ( prod ( [ lex ( sort ( "Escaped" ) ) ] , cf ( sort ( "Escaped" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < string ( chars ) > ) ] ) ) , constructor ( Escaped , octal , appl ( prod ( [ lex ( sort ( "Escaped" ) ) ] , cf ( sort ( "Escaped" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < string ( chars ) > ) ] ) ) , constructor ( StrCon , default , appl ( prod ( [ lex ( sort ( "StrCon" ) ) ] , cf ( sort ( "StrCon" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < string ( chars ) > ) ] ) ) , constructor ( SpaceSymbol , hs , appl ( prod ( [ lit ( "hs" ) ] , cf ( sort ( "SpaceSymbol" ) ) , attrs ( [ term ( cons ( "hs" ) ) ] ) ) , [ lit ( "hs" ) ] ) ) , constructor ( SpaceSymbol , vs , appl ( prod ( [ lit ( "vs" ) ] , cf ( sort ( "SpaceSymbol" ) ) , attrs ( [ term ( cons ( "vs" ) ) ] ) ) , [ lit ( "vs" ) ] ) ) , constructor ( SpaceSymbol , is , appl ( prod ( [ lit ( "is" ) ] , cf ( sort ( "SpaceSymbol" ) ) , attrs ( [ term ( cons ( "is" ) ) ] ) ) , [ lit ( "is" ) ] ) ) , constructor ( SOption , Default , appl ( prod ( [ cf ( sort ( "SpaceSymbol" ) ) , cf ( opt ( layout ) ) , lit ( "=" ) , cf ( opt ( layout ) ) , cf ( sort ( "NatCon" ) ) ] , cf ( sort ( "SOption" ) ) , no-attrs ) , [ < "SpaceSymbol" ( SpaceSymbol ) > , < "ws-after-SpaceSymbol" ( OptLayout ) > , lit ( "=" ) , < "ws-after-=" ( OptLayout ) > , < "NatCon" ( NatCon ) > ] ) ) , constructor ( SOptions , Default , appl ( prod ( [ cf ( iter-star ( sort ( "SOption" ) ) ) ] , cf ( sort ( "SOptions" ) ) , no-attrs ) , [ appl ( list ( cf ( iter-star ( sort ( "SOption" ) ) ) ) , < "list" ( "SOption-list" ) > ) ] ) ) , separated-list ( "SOption-list" , SOption , [ < ws-after-head ( OptLayout ) > ] ) , constructor ( BoxList , Default , appl ( prod ( [ cf ( iter-star ( sort ( "Box" ) ) ) ] , cf ( sort ( "BoxList" ) ) , no-attrs ) , [ appl ( list ( cf ( iter-star ( sort ( "Box" ) ) ) ) , < "list" ( "Box-list" ) > ) ] ) ) , separated-list ( "Box-list" , Box , [ < ws-after-head ( OptLayout ) > ] ) , constructor ( Box , string , appl ( prod ( [ cf ( sort ( "StrCon" ) ) ] , cf ( sort ( "Box" ) ) , attrs ( [ term ( cons ( "string" ) ) ] ) ) , [ < "StrCon" ( StrCon ) > ] ) ) , constructor ( Box , H , appl ( prod ( [ lit ( "H" ) , cf ( opt ( layout ) ) , cf ( sort ( "SOptions" ) ) , cf ( opt ( layout ) ) , lit ( "[" ) , cf ( opt ( layout ) ) , cf ( sort ( "BoxList" ) ) , cf ( opt ( layout ) ) , lit ( "]" ) ] , cf ( sort ( "Box" ) ) , attrs ( [ term ( cons ( "H" ) ) ] ) ) , [ lit ( "H" ) , < "ws-after-H" ( OptLayout ) > , < "SOptions" ( SOptions ) > , < "ws-after-SOptions" ( OptLayout ) > , lit ( "[" ) , < "ws-after-[" ( OptLayout ) > , < "BoxList" ( BoxList ) > , < "ws-after-BoxList" ( OptLayout ) > , lit ( "]" ) ] ) ) , constructor ( Box , V , appl ( prod ( [ lit ( "V" ) , cf ( opt ( layout ) ) , cf ( sort ( "SOptions" ) ) , cf ( opt ( layout ) ) , lit ( "[" ) , cf ( opt ( layout ) ) , cf ( sort ( "BoxList" ) ) , cf ( opt ( layout ) ) , lit ( "]" ) ] , cf ( sort ( "Box" ) ) , attrs ( [ term ( cons ( "V" ) ) ] ) ) , [ lit ( "V" ) , < "ws-after-V" ( OptLayout ) > , < "SOptions" ( SOptions ) > , < "ws-after-SOptions" ( OptLayout ) > , lit ( "[" ) , < "ws-after-[" ( OptLayout ) > , < "BoxList" ( BoxList ) > , < "ws-after-BoxList" ( OptLayout ) > , lit ( "]" ) ] ) ) , constructor ( Box , HV , appl ( prod ( [ lit ( "HV" ) , cf ( opt ( layout ) ) , cf ( sort ( "SOptions" ) ) , cf ( opt ( layout ) ) , lit ( "[" ) , cf ( opt ( layout ) ) , cf ( sort ( "BoxList" ) ) , cf ( opt ( layout ) ) , lit ( "]" ) ] , cf ( sort ( "Box" ) ) , attrs ( [ term ( cons ( "HV" ) ) ] ) ) , [ lit ( "HV" ) , < "ws-after-HV" ( OptLayout ) > , < "SOptions" ( SOptions ) > , < "ws-after-SOptions" ( OptLayout ) > , lit ( "[" ) , < "ws-after-[" ( OptLayout ) > , < "BoxList" ( BoxList ) > , < "ws-after-BoxList" ( OptLayout ) > , lit ( "]" ) ] ) ) , constructor ( Box , HOV , appl ( prod ( [ lit ( "HOV" ) , cf ( opt ( layout ) ) , cf ( sort ( "SOptions" ) ) , cf ( opt ( layout ) ) , lit ( "[" ) , cf ( opt ( layout ) ) , cf ( sort ( "BoxList" ) ) , cf ( opt ( layout ) ) , lit ( "]" ) ] , cf ( sort ( "Box" ) ) , attrs ( [ term ( cons ( "HOV" ) ) ] ) ) , [ lit ( "HOV" ) , < "ws-after-HOV" ( OptLayout ) > , < "SOptions" ( SOptions ) > , < "ws-after-SOptions" ( OptLayout ) > , lit ( "[" ) , < "ws-after-[" ( OptLayout ) > , < "BoxList" ( BoxList ) > , < "ws-after-BoxList" ( OptLayout ) > , lit ( "]" ) ] ) ) , constructor ( Box , I , appl ( prod ( [ lit ( "I" ) , cf ( opt ( layout ) ) , cf ( sort ( "SOptions" ) ) , cf ( opt ( layout ) ) , lit ( "[" ) , cf ( opt ( layout ) ) , cf ( sort ( "Box" ) ) , cf ( opt ( layout ) ) , lit ( "]" ) ] , cf ( sort ( "Box" ) ) , attrs ( [ term ( cons ( "I" ) ) ] ) ) , [ lit ( "I" ) , < "ws-after-I" ( OptLayout ) > , < "SOptions" ( SOptions ) > , < "ws-after-SOptions" ( OptLayout ) > , lit ( "[" ) , < "ws-after-[" ( OptLayout ) > , < "Box" ( Box ) > , < "ws-after-Box" ( OptLayout ) > , lit ( "]" ) ] ) ) , constructor ( Box , WD , appl ( prod ( [ lit ( "WD" ) , cf ( opt ( layout ) ) , lit ( "[" ) , cf ( opt ( layout ) ) , cf ( sort ( "Box" ) ) , cf ( opt ( layout ) ) , lit ( "]" ) ] , cf ( sort ( "Box" ) ) , attrs ( [ term ( cons ( "WD" ) ) ] ) ) , [ lit ( "WD" ) , < "ws-after-WD" ( OptLayout ) > , lit ( "[" ) , < "ws-after-[" ( OptLayout ) > , < "Box" ( Box ) > , < "ws-after-Box" ( OptLayout ) > , lit ( "]" ) ] ) ) , constructor ( BoxList , Istar , appl ( prod ( [ lit ( "I*" ) , cf ( opt ( layout ) ) , cf ( sort ( "SOptions" ) ) , cf ( opt ( layout ) ) , lit ( "[" ) , cf ( opt ( layout ) ) , cf ( sort ( "BoxList" ) ) , cf ( opt ( layout ) ) , lit ( "]" ) ] , cf ( sort ( "BoxList" ) ) , attrs ( [ term ( cons ( "Istar" ) ) ] ) ) , [ lit ( "I*" ) , < "ws-after-I*" ( OptLayout ) > , < "SOptions" ( SOptions ) > , < "ws-after-SOptions" ( OptLayout ) > , lit ( "[" ) , < "ws-after-[" ( OptLayout ) > , < "BoxList" ( BoxList ) > , < "ws-after-BoxList" ( OptLayout ) > , lit ( "]" ) ] ) ) , constructor ( Box , LST , appl ( prod ( [ lit ( "LST" ) , cf ( opt ( layout ) ) , lit ( "[" ) , cf ( opt ( layout ) ) , cf ( sort ( "BoxList" ) ) , cf ( opt ( layout ) ) , lit ( "]" ) ] , cf ( sort ( "Box" ) ) , attrs ( [ term ( cons ( "LST" ) ) ] ) ) , [ lit ( "LST" ) , < "ws-after-LST" ( OptLayout ) > , lit ( "[" ) , < "ws-after-[" ( OptLayout ) > , < "BoxList" ( BoxList ) > , < "ws-after-BoxList" ( OptLayout ) > , lit ( "]" ) ] ) ) , constructor ( Start , SOptions , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "SOptions" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-SOptions ( SOptions ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , SOption , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "SOption" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-SOption ( SOption ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , SpaceSymbol , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "SpaceSymbol" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-SpaceSymbol ( SpaceSymbol ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , BoxList , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "BoxList" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-BoxList ( BoxList ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , Box , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Box" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Box ( Box ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( OptLayout , Absent , appl ( prod ( [  ] , cf ( opt ( layout ) ) , no-attrs ) , [  ] ) ) , constructor ( OptLayout , Present , appl ( prod ( [ cf ( layout ) ] , cf ( opt ( layout ) ) , no-attrs ) , < string ( chars ) > ) ) , constructor ( Start , Escaped , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Escaped" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Escaped ( Escaped ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , Normal , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Normal" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Normal ( Normal ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , StrCon , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "StrCon" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-StrCon ( StrCon ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , NatCon , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "NatCon" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-NatCon ( NatCon ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) ]