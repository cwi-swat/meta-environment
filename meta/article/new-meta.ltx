\documentclass[twoside]{article}
\usepackage{amsmath}
\usepackage{latexsym}
\usepackage{ASF+SDF,ASF+SDF-options}
\usepackage{epsfig}
\usepackage{cmbcsc,alltt}
\usepackage{url}
\urlstyle{rm}

\title{Design and Implementation of a New \metaenv}

\author{Mark van den Brand$^{^1}$, Tobias Kuipers$^{^2}$, \\
        Leon Moonen$^{^1}$, Pieter Olivier$^{^1}$\\
        {\small\sl $^1$University of Amsterdam,
        Programming Research Group\vspace{-.2cm}}\\
        {\small\sl Kruislaan 403, NL-1098 SJ Amsterdam, The Netherlands}
        \vspace{.1cm}\\
        {\small\sl $^2$CWI,
        Department of Software Engineering\vspace{-.2cm}}\\
        {\small\sl P.O. Box 94079, NL-1090 GB Amsterdam, The Netherlands}
        \vspace{.1cm}\\
        {\small \sl\tt markvdb@wins.uva.nl,Tobias.Kuipers@cwi.nl,\vspace{-.2cm}}\\
        {\small \sl\tt leon@wins.uva.nl,olivierp@wins.uva.nl}
}

\def\aterms{\mbox{ATerms}}
\def\asfix{\mbox{\textsc AsFix}}
\def\sdf{\textsc{Sdf}}
\def\asf{\textsc{Asf}}
\def\asdf{\textsc{Asf+Sdf}}
\def\metaenv{\asdf\ Meta-En\-vir\-on\-ment}

\def\TB{\textsc{ToolBus}}
\def\centaur{\textsc{centaur}}
\def\seal{\textsc{seal}}
\def\epic{\textsc{Epic}}
\def\lelisp{\textsc{LeLisp}}
\def\T{\textbf{T}}

\def\tcl{Tcl}
\def\tk{Tk}
\def\dot{\textit{dot}}
\def\tcltk{Tcl/Tk}
\def\tcldot{TclDot}
\def\tcldg{TclDG}
\def\ui{user interface}
\def\java{Java}
\newcommand{\gse}{\textsc{gse}}

\makeatletter
\def\up@case#1{\expandafter\uppercase{#1}}
\def\upcase#1{\expandafter\up@case#1}
\makeatother   

\date{}

\setlength{\textwidth}{140mm}
\setlength{\textheight}{210mm}
\setlength{\topmargin}{5mm}
\setlength{\headsep}{7mm}
\setlength{\marginparsep}{2mm}
\setlength{\marginparwidth}{22mm}
%
\if@twoside
\setlength{\oddsidemargin}{15mm}
\setlength{\evensidemargin}{4.1mm}
\else
\setlength{\oddsidemargin}{10.5mm}
\setlength{\evensidemargin}{10.5mm}
\fi

%% define separator macro for proofreading 
%% (puts each part on separate page)
%%\def\separator{}
\def\separator{\cleardoublepage}

\begin{document}

\maketitle

\begin{abstract}
The \metaenv\ has become a legacy system over the last few years.
This paper describes the first steps towards a new implementation
of this system. This implementation is based on the latest techniques
concerning the coupling of software components, construction
of \ui s and modern programming languages. Special
care has been taken to ensure the flexibility and extensibility of
the system, both now and in the future.

The general architecture of the new environment is discussed as
well as the components which are currently implemented and 
operational in the environment. Each component is independent
of the other components and communicates using the \TB.
\end{abstract}

\section{Introduction}

In the beginning of the eighties the design and implementation of the
current version of the \metaenv~\cite{Kli93.meta} was started.  On top
of \centaur~\cite{BCDIKLP89} a programming environment (generator) for
writing language definitions in \asdf~\cite{HHKR89.update,BHK89,DHK96}
was developed.  An overview of
these activities can be found in~\cite{HK95}.

The implementation could be considered a test case for all
kinds of ideas concerning the lazy and incremental generation of
scanners, parsers, and term rewriting machines.  The development of
advanced hybrid editing techniques~\cite{Koo94.thesis}, origin
tracking techniques~\cite{Deu94.thesis}, incremental
rewriting~\cite{Meu94.thesis}, automatic generation of
unparsers~\cite{BV96}, debugging facilities of term rewriting~\cite{Tip91},
and the
generation of \LaTeX\ code~\cite{Vis95.tolatex} were performed in or with this
implementation as well.

The current implementation of the \metaenv\ has a number of drawbacks
and shortcomings, the most important ones are listed in
Table~\ref{short}.  This table shows that the system has all the signs
of a \emph{legacy system}, mainly because most of the coding has been
done by Ph.D. researchers, and consequently the project has had a
large turnover of staff.

These complaints initiated a redesign and re-implementation of the
\metaenv.  Initially it was believed that an incremental
re-implementation of the \metaenv\ was feasible, and therefore a
number of people started working on the design and implementation of a
new \ui{} and the replacement of the text editing facilities of
\gse~\cite{Koo94.thesis} by Emacs and Epoch in 1992~\cite{KB93}.
%%However, it turned out that the resulting implementation was not
%%deadlock free. 
However, it proved that is was impossible to manage the interaction
between the different tools.
This initiated the development of the \TB, a software
interconnection architecture~\cite{BK96a,TB-AMAST96} which takes care
of the communication of software components.
This \TB\ will be the backbone of the implementation of the new \metaenv.

\begin{table}
\centering
\begin{tabular}{|p{13cm}|} \hline
  Complaints or shortcomings
  \\ \hline\hline 
  The \ui{} is old-fashioned and badly organised: reduced terms not in
  term-editor and long flat lists of modules for deleting and editing
  of modules and terms.
  \\ \hline
  An often heard complaint was: ``The editor is too restricted, why is
  it not emacs- or vi-like?''
  \\ \hline
  The creation of stand-alone environments is not possible.
  \\ \hline
  It is impossible to port to different architectures.  Limited
  availability of \lelisp\ on various platforms.  Our version of
  \lelisp\ is becoming obsolete.
  \\ \hline 
  The tree formalism VTP is not easy to use, connection \lelisp/VTP is
  complicated.
  \\ \hline
  The current monolithic system is hard to maintain. New research
  ideas are hard to implement.
  \\ \hline 
  Bugs are not fixed anymore, because the knowledge about the
  intrinsics of the system needed to fix these bugs is no longer
  present.
  \\ \hline \hline
\end{tabular}
\caption{\label{short} Drawbacks of the current version of the \metaenv.}
\end{table}

Based on the experiences gained with the Epoch-\gse-UI coupling the
decision was made
to design and implement the new \metaenv\ from scratch.  The
fact that the version of \lelisp\ on which the \metaenv\ is based
may become obsolete in the near future makes a ``from scratch'' approach even
more urgent.  In this paper we discuss the first prototype of the
new \metaenv\ based on the \TB.  This prototype has very restricted
functionality but offers an extendible infrastructure to experiment
with various designs.

In the rest of this paper the most important components of the
new \metaenv\ are presented.
In Section \ref{garch} the architecture of the new \metaenv\ is discussed.
Section \ref{repos} describes various repository to store information
on \asdf\ modules, furthermore the tree representation format
is briefly discussed.
The \ui\ is discussed in Section \ref{userin},
the structure editor in Section \ref{edit}, and the
interpreter in Section \ref{interpreter}.


\separator
\input{toolbus.ltx}

%%\separator
%%\input{treerepr.ltx}     %% moved to repos

\separator
\input{repos.ltx}

\separator
\input{ui.ltx}

\separator
\input{editors.ltx}

\separator
\input{interpreter.ltx}

\separator
\section{Conclusions}

In this paper the first prototype of the new \metaenv\ is discussed.
This version of the prototype should be considered as a test case
to see whether for instance the \TB\ is suited as backbone for
the new \metaenv.
One of the lessons we learned from the implementation of the
old \metaenv\ is that it is essential to have a flexible and
extendible implementation.
The \metaenv\ is first of all a research tool, which means that
it should facilitate the testing all kind of new ideas.

Although all sections conclude with a short discussion in which
some the future work is described.
We left out some general remarks about future work. The \metaenv\ should
provide facilities to compile specifications in order to generate
stand-alone environments.  Finally, the new \metaenv\ should provide
sophisticated help facilities and demonstration modes with WWW support.

%%\begin{small}
\bibliographystyle{alpha}
\bibliography{metabib}
%%\end{small}

\end{document}
