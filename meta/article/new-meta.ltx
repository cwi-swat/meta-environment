\documentclass{article}
\usepackage{amsmath}
\usepackage{latexsym}
\usepackage{ASF+SDF,ASF+SDF-options}
\usepackage{epsfig}
\usepackage{cmbcsc,alltt}

\title{Design and Implementation of a New {\textsc Asf+Sdf} Meta-Environment}

\author{Mark van den Brand$^{^1}$, Tobias Kuipers$^{^2}$, \\
        Leon Moonen$^{^1}$, Pieter Olivier$^{^1}$\\
        {\small\sl $^1$University of Amsterdam,
        Programming Research Group\vspace{-.2cm}}\\
        {\small\sl Kruislaan 403, NL-1098 SJ Amsterdam, The Netherlands}
        \vspace{.1cm}\\
        {\small\sl $^2$CWI,
        Department of Software Engineering\vspace{-.2cm}}\\
        {\small\sl P.O. Box 94079, NL-1090 GB Amsterdam, The Netherlands}
        \vspace{.1cm}\\
        {\small \sl\tt markvdb@wins.uva.nl,Tobias.Kuipers@cwi.nl,\vspace{-.2cm}}\\
        {\small \sl\tt leon@wins.uva.nl,olivierp@wins.uva.nl}
}

\def\aterms{\mbox{ATerms}}
\def\asfix{\mbox{\textsc AsFix}}
\def\sdf{\textsc{Sdf}}
\def\asf{\textsc{Asf}}
\def\asdf{\textsc{Asf+Sdf}}
\def\metaenv{\asdf\ Meta-En\-vir\-on\-ment}

\def\TB{\textsc{ToolBus}}
\def\centaur{\textsc{centaur}}
\def\seal{\textsc{seal}}
\def\epic{\textsc{Epic}}
\def\lelisp{\textsc{LeLisp}}
\def\T{\textbf{T}}

\def\tcl{\textsf{Tcl}}
\def\tk{\textsf{Tk}}
\def\dot{\textsf{Dot}}
\def\tcltk{\textsf{Tcl/Tk}}
\def\tcldot{\textsf{TclDot}}
\def\tcldg{\textsf{TclDG}}
\def\ui{user interface}

\makeatletter
\def\up@case#1{\expandafter\uppercase{#1}}
\def\upcase#1{\expandafter\up@case#1}
\makeatother   

%\input{psfig}

\begin{document}

\maketitle

\begin{abstract}
To be written.
\end{abstract}

\section{Introduction}

In the beginning of the eighties the design and implementation of the
current version of the \metaenv~\cite{Kli93.meta} was started.  On top
of \centaur~\cite{BCDIKLP89} a programming environment (generator) for
writing language definitions in \asdf\ was developed.  An overview of
these activities can be found in \cite{HK95}.

The implementation could be considered a test environment for all
kinds of ideas concerning the lazy and incremental generation of
scanners, parsers, and term rewriting machines.  The development of
advanced hybrid editing techniques \cite{Koo94.thesis}, origin
tracking techniques \cite{Deu94.thesis}, incremental rewriting
\cite{Meu94.thesis}, automatic generation of unparsers \cite{BV96},
debugging facilities of term rewriting, and the generation of \LaTeX\ 
code were performed within or with this implementation as well.

The current implementation of the \metaenv\ has a number of drawbacks
and shortcomings, the most important ones are listed in
Table~\ref{short}.  This table shows that the system has all the signs
of a \emph{legacy system}, mainly because most of the coding has been
done by Ph.D. researchers, and consequently the project has had a
large turnover of staff.

These complaints initiated a redesign and re-implementation of the
\metaenv.  Initially we believed that an incremental re-implementation
of the \metaenv\ was feasible, and therefore a number of people
started working on the design and implementation of a new \ui{} and
the replacement of the text editing facilities of GSE
\cite{Koo94.thesis} by Emacs and Epoch in 1992 \cite{KB93}.  However,
it turned out that the resulting implementation was not deadlock free.
This initiated the development of the \TB, a software interconnection
architecture \cite{COORD96.toolbus,TB-AMAST96} which takes care of the
communication of software components.

\begin{table}
\begin{center}
\begin{tabular}{|l|} \hline
Complaints or shortcomings \\ \hline\hline
The \ui{} is old-fashioned and badly organised: \\
reduced terms not in term-editor and long flat lists of  \\
modules for deleting and editing of modules and terms.   \\ \hline
An often heard complaint was: ``The editor is too        \\
restricted, why is it not emacs- or vi-like?''            \\ \hline
The creation of stand-alone environments is not possible. \\ \hline
It is impossible to port to different architectures.      \\
Limited availability of \lelisp\ on various platforms.      \\
Our version of \lelisp\ is becoming obsolete.               \\ \hline 
The tree formalism VTP is not easy to use, connection     \\
\lelisp/VTP is complicated.                                \\ \hline
The current monolithic system is hard to maintain. New    \\
research ideas are hard to implement.                     \\ \hline 
Bugs are not fixed anymore, because the knowledge about \\
the intrinsics of the system needed to fix these bugs \\
is no longer present.                                   \\ \hline \hline
\end{tabular}
\end{center}
\caption{\label{short} Drawbacks of the current version of the \metaenv.}
\end{table}

Based on the experiences gained with the Epoch-GSE-UI coupling it was
decided to design and implement the new \metaenv\ from scratch.  The
problems concerning \lelisp\ makes a ``from scratch'' approach even
more pressing.  In this paper we discuss the first prototype of the
new \metaenv\ based on the \TB.  This prototype has a very restricted
functionality but offers an extendible infrastructure to experiment
with various designs.

\input{toolbus.ltx}

\input{treerepr.ltx}

\input{ui.ltx}

\input{repos.ltx}

\input{editors.ltx}

\input{interpreter.ltx}

\section{Conclusions}

There is a huge bulk of future work to be done.  The \metaenv\ should
provided facilities to compile specifications in order to generate
stand-alone environments.  Finally, the new \metaenv\ should provide
sophisticated help facilities and demonstration modes based on
internet facilities.

\bibliographystyle{alpha}
\bibliography{metabib}

\end{document}
