/*
   $Id$
*/

tool se is {
  command = "se"
}

process SE is
let
  EditorId     : term,
  Focus        : term,
  Error        : list,
  Focuses      : list,
  FocusList    : list,
  StartSymbols : list,
  Location     : int,
  SE           : se,
  Text         : str,
  Move         : term,
  Number       : int,
  Nonterminal  : str,
  Tree         : term,
  ModifiedStatus : term,
  Msg            : term
in 
  execute(se, SE?) .
  (
    rec-msg(initialize-structure-editor(EditorId?, Text?)) .
    snd-eval(SE, new-editor-given-text(EditorId, Text)) .
    rec-value(SE, initial-focus(Focus?)) .       
    snd-msg(initial-focus(Focus))
  +
    rec-msg(initialize-structure-editor-with-tree(EditorId?, Tree?)) .
    snd-eval(SE, new-editor-given-tree(EditorId, Tree)) .
    rec-value(SE, initial-focus(Focus?)) .       
    snd-msg(initial-focus(Focus))
  +
    rec-msg(insert-chars(EditorId?, Location?, Text?)) .
    snd-eval(SE, insert-chars(EditorId, Location, Text)) .
    rec-value(SE, focus(Focus?)) .       
    snd-msg(ack-insert-chars(EditorId)).
    snd-msg(set-focus(EditorId, Focus))
  +
    rec-msg(delete-chars(EditorId?, Location?, Number?)).
    snd-eval(SE, delete-chars(EditorId, Location, Number)) .
    rec-value(SE, focus(Focus?)) .
    snd-msg(ack-delete-chars(EditorId)).
    snd-msg(set-focus(EditorId, Focus))
  +
    rec-msg(replace-focus(EditorId?, Focus?, Tree?)) .
    snd-do(SE, replace-focus(EditorId, Focus, Tree))
  +
    rec-msg(set-focus(EditorId?, Focuses?)) .
    snd-do(SE, set-multiple-focus(EditorId, Focuses))
  +
    rec-msg(move-focus(EditorId?, Move?)) .
    snd-eval(SE, move-focus(EditorId, Move)) .
    rec-value(SE, focus(Focus?)) .
    snd-msg(set-focus(EditorId, Focus))
  +
    rec-msg(invalidate-tree(EditorId?)) .
    snd-eval(SE, invalidate-tree(EditorId)) .
    ( rec-value(SE, focus(Focus?)) .
      snd-msg(set-focus(EditorId, Focus))
      +
      rec-value(SE, no-such-editor(editorId))
    )
  +
    rec-msg(set-current-location(EditorId?, Location?)) .
    snd-eval(SE, set-focus(EditorId, Location)) .
    rec-value(SE, focus(Focus?)) .  
    snd-msg(set-focus(EditorId, Focus)) 
  +
    rec-msg(get-tree(EditorId?)) .
    snd-eval(SE, get-parse-tree(EditorId)) .
    rec-value(SE, parse-tree(Tree?)) .
    snd-msg(tree(Tree))
  +
    rec-msg(get-focussed-tree(EditorId?)) .
    snd-eval(SE, get-focussed-tree(EditorId)) .
    ( 
      rec-value(SE, parse-tree(Tree?)) .
      snd-msg(tree(Tree))
    +
      rec-value(SE, no-parse-tree) .
      snd-msg(no-tree)
    )
  +
    rec-msg(replace-focussed-tree(EditorId?, Tree?)) .
    snd-eval(SE, replace-focussed-tree(EditorId, Tree)) .
    rec-value(SE, focus(Focus?)) .
    snd-msg(focus(Focus))
  +
    rec-msg(check-tree-sort(Nonterminal?, Tree?)) .
    snd-eval(SE, check-tree-sort(Nonterminal, Tree)) .
    rec-value(SE, msg(Msg?)) .
    snd-msg(Msg)
  +
    rec-msg(get-focus-sort(Nonterminal?, Focus?)) .
    snd-eval(SE, get-focus-sort(Nonterminal, Focus)) .
    rec-value(SE, focus-sort(Nonterminal?)) .
    snd-msg(focus-sort(Nonterminal))
  +
    rec-msg(get-dirty-focuses(EditorId?)) .
    snd-eval(SE, get-dirty-focuses(EditorId)) .
    (
      rec-value(SE, foci(FocusList?))
      +
      rec-value(SE, no-such-editor(EditorId)) .
      FocusList := []
    ) .
    snd-msg(dirty-focuses(FocusList))
  +
    rec-msg(get-error-position(Focus?, Error?)) .
    snd-eval(SE, calc-error-location(Focus, Error)) .
    rec-value(SE, error-position(Location?)) .
    snd-msg(error-position(Location))
  +
    rec-msg(delete-structure-editor(EditorId?)).
    snd-do(SE, remove-tree(EditorId))
  +
    rec-msg(set-modified(EditorId?)) .
    snd-do(SE, modify(EditorId))
  +
    rec-msg(get-modified-status(EditorId?)).
    snd-eval(SE, get-modification-status(EditorId)).
    rec-value(SE, modification-status(ModifiedStatus?)).
    snd-msg(modified-status(EditorId, ModifiedStatus))
  ) *
  delta
endlet
