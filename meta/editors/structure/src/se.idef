/* $Id$ */

tool se is {
  command = "se"
}

/* Because EditorIds can dissappear suddenly, the structure editor
 * should always be robust against non-existing EditorIds. If possible
 * a default answer should be returned, otherwise an error message to
 * ensure that normal operation can continue even if an editor is missing.
 */

process StructureEditor is
let
  EditorId : term,
  Focus : term,
  Error : list,
  Focuses : list,
  FocusList : list,
  Location : int,
  SE : se,
  Text : str,
  Move : term,
  Nonterminal : str,
  Tree : term,
  Modified : term,
  Msg : term,
  PosInfo : term
in 
  execute(se, SE?) .
  (
    rec-msg(initialize-structure-editor(EditorId?, Text?, Tree?)) .
    if equal(Tree, none) then
      snd-do(SE, new-editor-given-text(EditorId, Text)) 
    else 
      snd-do(SE, new-editor-given-tree(EditorId, Tree)) 
    fi
  +
    rec-msg(replace-focus(EditorId?, Focus?, Tree?)) .
    snd-do(SE, replace-focus(EditorId, Focus, Tree))
  +
    rec-msg(move-focus-to-root(EditorId?)) .
    snd-eval(SE, move-focus-to-root(EditorId)) .
    rec-value(SE, focus(Focus?)) .
    snd-msg(focus-moved(EditorId, Focus))
  +
    rec-msg(move-focus(EditorId?, Move?)) .
    snd-eval(SE, move-focus(EditorId, Move)) .
    rec-value(SE, focus(Focus?)) .
    snd-msg(set-focus(EditorId, Focus))
  +
    rec-msg(invalidate-tree(EditorId?)) .
    snd-eval(SE, invalidate-tree(EditorId)) .
    rec-value(SE, focus(Focus?)) .
    snd-msg(invalidation-done(EditorId, Focus))
  +
    rec-msg(set-location(EditorId?, Location?)) .
    snd-eval(SE, set-focus(EditorId, Location)) .
    rec-value(SE, focus(Focus?)) .  
    snd-msg(set-focus(EditorId, Focus)) 
  +
    rec-msg(get-focus-at-posinfo(EditorId?, PosInfo?)) .
    snd-eval(SE, get-focus-at-posinfo(EditorId, PosInfo)) .
    rec-value(SE, focus(Focus?)) .  
    snd-msg(focus-at-posinfo(EditorId, PosInfo, Focus)) 
  +
    rec-msg(get-tree(EditorId?)) .
    snd-eval(SE, get-parse-tree(EditorId)) .
    (
      rec-value(SE, parse-tree(Tree?)) .
      snd-msg(tree(Tree))
    +
      rec-value(SE, no-such-editor) .
      snd-msg(no-tree)
    )
  +
    rec-msg(get-focussed-tree(EditorId?)) .
    snd-eval(SE, get-focussed-tree(EditorId)) .
    ( 
      rec-value(SE, parse-tree(Tree?)) .
      snd-msg(tree(Tree))
    +
      rec-value(SE, no-parse-tree) .
      snd-msg(no-tree)
    )
  +
    rec-msg(replace-focussed-tree(EditorId?, Tree?)) .
    snd-eval(SE, replace-focussed-tree(EditorId, Tree)) .
    rec-value(SE, focus(Focus?)) .
    snd-msg(focus(Focus))
  +
    rec-msg(check-tree-sort(Nonterminal?, Tree?)) .
    snd-eval(SE, check-tree-sort(Nonterminal, Tree)) .
    rec-value(SE, msg(Msg?)) .
    snd-msg(Msg)
  +
    rec-msg(get-focus-sort(EditorId?)) .
    snd-eval(SE, get-focus-sort(EditorId)) .
    (
      rec-value(SE, focus-sort(Nonterminal?)) .
      snd-msg(focus-sort(Nonterminal))
    +
      rec-value(SE, no-focus) .
      snd-msg(no-focus)
    )
  +
    rec-msg(get-dirty-focuses(EditorId?)) .
    snd-eval(SE, get-dirty-focuses(EditorId)) .
    (
      rec-value(SE, foci(FocusList?))
      +
      rec-value(SE, no-such-editor) .
      FocusList := []
    ) .
    snd-msg(dirty-focuses(FocusList))
  +
    rec-msg(get-error-position(Focus?, Error?)) .
    snd-eval(SE, calc-error-location(Focus, Error)) .
    rec-value(SE, error-position(Location?)) .
    snd-msg(error-position(Location))
  +
    rec-msg(delete-structure-editor(EditorId?)).
    snd-do(SE, remove-tree(EditorId)) 
  +
    rec-msg(editor-contents-changed(EditorId?)) .
    snd-do(SE, modify(EditorId))
  +
    rec-msg(is-editor-modified(EditorId?)) .
    snd-eval(SE, is-editor-modified(EditorId)) .
    rec-value(SE, editor-modified(Modified?)) .
    snd-msg(editor-modified(EditorId, Modified))
  ) *
  delta
endlet

toolbus(StructureEditor)
