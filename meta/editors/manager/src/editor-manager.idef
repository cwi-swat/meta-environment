/*
 *
 * $Id$
 *
 */

process EditorManager is
let
  EM : editor-manager,
  Name : str,
  ModuleName: str,
  Editors: list,
  EditorId : term
in
  execute(editor-manager, EM?) .
  subscribe(delete-editor(<term>)) .
  (
    rec-msg(get-editor-id(Name?, ModuleName?)) .
    snd-eval(EM, get-editor-id(Name, ModuleName)) .
    (
      rec-value(EM, new-editor(EditorId?)) .
      snd-msg(new-editor(Name, EditorId))
    +
      rec-value(EM, existing-editor(EditorId?)) .
      snd-msg(existing-editor(Name, EditorId))
    )
  +
    rec-msg(check-editor-id(Name?, ModuleName?)) .
    snd-eval(EM, check-editor-id(Name, ModuleName)) .
    (
      rec-value(EM, existing-editor(EditorId?)) .
      snd-msg(existing-editor(Name, EditorId))
    +
      rec-value(EM, non-existing-editor) .
      snd-msg(non-existing-editor(Name))
    )
  +
    rec-msg(get-editor-name(EditorId?)) .
    snd-eval(EM, get-editor-name(EditorId)).
    rec-value(EM, editor-name(Name?)).
    snd-msg(editor-name(Name))
  +
    rec-msg(get-editors-by-module(Name?)) .
    snd-eval(EM, get-editors-by-module(Name)) .
    rec-value(EM, editors-by-module(Editors?)) .
    snd-msg(editors-by-module(Editors))
  +
    rec-note(delete-editor(EditorId?)) .
    snd-do(EM, delete-editor(EditorId))
  ) * delta
endlet

tool editor-manager is {
  command = "editor-manager"
}
