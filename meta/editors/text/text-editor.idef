/* $Id$ */

tool text-editor is {
  command = EDITOR
}

process TextEditor(EditorId: term, FileName : str, ButtonList : list) is
let
  TE         : text-editor,
  Path       : term,
  Sort       : term,
  Dirty      : int,
  Fid        : str,
  Location   : int,
  SortName   : str,
  Direction  : str,
  StartPos   : int,
  Length     : int,
  FocusText  : str,
  Focus      : term,
  QueryList : list,
  QueryName : str,
  ActionName : str,
  ButtonName : list,
  ButtonItem : str,
  ButtonMenu : str,
  ButtonWalker : list,
  FileName2  : str
in
  execute(text-editor, TE?) .
  snd-eval(TE, edit-file(FileName)) .
  rec-value(TE, file-id(Fid?)) .
  /* The following code should be internal to the meta.el script, but my
   * Lisp is so bad that I did not succeed in doing this.
   */
  ButtonWalker := ButtonList .
  (
    if not-equal(ButtonWalker, []) then
      ButtonName := first(ButtonWalker) .
      ButtonItem := index(ButtonName,size(ButtonName)).
      ButtonMenu := first(diff(ButtonName,[ButtonItem])).
      snd-do(TE, tb-add-menu-item(ButtonMenu, ButtonItem)) .
      ButtonWalker := next(ButtonWalker)
    fi
  )*
  if equal(ButtonWalker, []) then
    tau
  fi .
  /* We receive only 'notes' never messages because this tool can
   * dissappear during anything due to user interaction.
   */
  subscribe(set-focus(<term>,<term>)).
  subscribe(clear-focus(<term>)).
  subscribe(get-focus-text(<term>,<term>)).
  subscribe(display-error(<term>,<int>)) .
  subscribe(move-editor-to-front(<term>)) .
  subscribe(reload-file(<term>,<term>)) .
  subscribe(kill-text-editor(<term>)) .
  (
    rec-note(set-focus(EditorId,
      focus(Path?, SortName?, area(StartPos?, Length?),Dirty?))) .
    snd-do(TE, tb-set-focus(Fid, SortName, StartPos, Length))
  +
    rec-note(clear-focus(EditorId)) .
    snd-do(TE, tb-unset-focus(Fid))
  +
    /* This is the only place where the text editor is supposed to
     * return data, a deadlock might occur when this editor suddenly
     * dissappears! Processes that use this note, should deal with this
     * fact.
     */
    rec-note(get-focus-text(EditorId,
      focus(Path?, Sort?, area(StartPos?,Length?),Dirty?))) .
    snd-eval(TE, tb-get-focus-text(Fid, StartPos, Length)) .
    rec-value(TE, focus-text(Fid, FocusText?)) .
    snd-msg(focus-text(EditorId, FocusText))
  +
    rec-note(display-error(EditorId, StartPos?)) .
    snd-do(TE, tb-set-char-pos(Fid, StartPos)).
    snd-do(TE, tb-set-msg("Parse error near cursor"))
  +
    rec-note(move-editor-to-front(EditorId)) .
    snd-do(TE, move-editor-to-front(Fid))
  +
    rec-note(reload-file(EditorId, FileName2?)) .
    snd-do(TE, reload-file(FileName2))
  +
    rec-event(TE, set-current-location(Fid, Location?)) .
    snd-msg(set-current-location(EditorId, Location)) .
    snd-ack-event(TE, set-current-location(Fid, Location))
  +
    rec-event(TE, modified(Fid)) .
    snd-msg(set-modified(EditorId)) .
    snd-ack-event(TE, modified(Fid))
  +
    rec-event(TE, menu-event(ButtonMenu?, ButtonItem?, Fid)) .
    snd-msg(extra-button-action(EditorId, [ButtonMenu,ButtonItem])) .
    snd-ack-event(TE, menu-event(ButtonMenu, ButtonItem, Fid))
  ) *
  (
    rec-disconnect(TE).
    snd-msg(text-editor-disconnected(EditorId)) 
  +
    rec-note(kill-text-editor(EditorId)) .
    snd-terminate(TE, "You have been zapped!") .
    snd-msg(text-editor-killed(EditorId))
  )
endlet
