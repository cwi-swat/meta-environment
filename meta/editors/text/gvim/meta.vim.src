" $Id$

let meta_dlso = "__LIBDIR__/lib_gvim.so"

func! Handshake()
  call libcallnr(g:meta_dlso, "handshake", g:tb_pipe)
endfunc

func! EnableModificationDetection()
  autocmd BufWritePost * :call SetModified()
endfunc

func! DisableModificationDetection()
  exe ':autocmd!'
endfunc

func! WritePendingChanges()
  exe ':update'
endfunc

func! AddMenu(vim_fd, menu, item, action)
  let cmd = a:vim_fd
  let cmd = cmd . '#' . a:action
  let cmd = '"' . cmd . '"'

  " build call to add menu entry
  let menu = ':silent amenu <silent> ' . a:menu . '.' . a:item . ' '

  " add menu, binding menu-item to callback using encoded menu-item
  exe menu . ':silent call libcallnr(meta_dlso, "send", ' . cmd . ')<CR>'

  call Handshake()
endfunc

func! SetLocation()
  call WritePendingChanges()
  let pos=line2byte(".") + col(".") - 1
  let desc=g:tb_pipe . '#' . pos
  call libcallnr(g:meta_dlso, "send", desc)
endfunc

func! SetModified()
  let desc=g:tb_pipe . '#modified'
  call libcallnr(g:meta_dlso, "send", desc)
endfunc

func! IsModified()
  let desc=g:tb_pipe . '#modified#' . getbufvar("%", "&mod")
  call Handshake()
  call libcallnr(g:meta_dlso, "send", desc)
endfunc

func! ContentsWritten()
  let desc=g:tb_pipe . '#contents-written'
  call libcallnr(g:meta_dlso, "send", desc)
endfun

func! WriteContents()
  call DisableModificationDetection()
  call WritePendingChanges()
  call Handshake()
  call EnableModificationDetection()
  call ContentsWritten()
endfunc

func! RereadContents()
  call DisableModificationDetection()
  exe ':e!'
  call Handshake()
  call EnableModificationDetection()
endfunc

" Remap <CTRL-]> to update focus around current location
map <silent> <C-]> :call SetLocation()<CR>

call EnableModificationDetection()
call Handshake()
