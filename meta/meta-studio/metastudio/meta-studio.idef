tool user-interface is {
  command = "meta-studio"
}

process Status-display(UI: user-interface)  is
let
  Lst : list,
  Str : str,
  Id  : term
in
  subscribe(ui-status(<term>)) .
  ( rec-note(ui-status(stat(Id?, Str?))) .
    snd-do(UI, add-status(Id, Str))
    +
    rec-note(ui-status(statf(Id?, Str?, Lst?))) .
    snd-do(UI, add-statusf(Id, Str, Lst))
    +
    rec-note(ui-status(endstat(Id?))) .
    snd-do(UI, end-status(Id))
    +
    rec-note(ui-status(error(Str?))) .
    snd-do(UI, error(Str))
    +
    rec-note(ui-status(errorf(Str?, Lst?))) .
    snd-do(UI, errorf(Str, Lst))
  ) *
  delta
endlet

process Ui is
let
  SD      : int,
  Om      : int,
  EM      : int,
  ET      : int,
  UI      : user-interface,
  Id      : term,
  Name    : term,
  Str     : term,
  Str1    : term,
  Mod     : term,
  Pairs   : list,
  Mods    : list,
  ModName : str,
  FileName : str,
  OutputFile : str,
  T       : str,
  FT      : str,
  Path    : str,
  PathWithExt    : str,
  ErrMsg  : str,
  On      : term,
  Graph   : term,
  Info	  : list,
  LayoutedGraph : term,
   ModuleName : str,
  RealModuleName : str,
  LibraryPath : str,
  SyntaxExt : str,
  SemanticsExt : str,
  TermExt : str,
  EnvironmentName : str
in
  Id := process-id.
  subscribe(import-graph(<term>,<term>)).
  subscribe(finished-opening-initial-module) .
  execute(user-interface,UI?).
  create(Status-display(UI),SD?).

  snd-msg(library-location-hook).
  rec-msg(library-location-hook-result(LibraryPath?)).
  snd-msg(file-extensions-hook).
  rec-msg(file-extensions-hook-result(SyntaxExt?,SemanticsExt?,TermExt?)).
  snd-msg(environment-name-hook).
  rec-msg(environment-name-hook-result(EnvironmentName?)).

  snd-do(UI, initialize-ui(EnvironmentName, LibraryPath, SyntaxExt, 
                           SemanticsExt, TermExt)).
  ( 
    /* Create a completely new module by a user */
    (
      rec-event(UI, new-module(Path?, Str?)).
      snd-msg(create-new-module(Path, Str)).
      (
        rec-msg(new-module-not-created(ErrMsg?)).
	snd-note(ui-status(errorf("%s",[ErrMsg])))
      +
        rec-msg(new-module-created(PathWithExt?, RealModuleName?)).
	snd-msg(open-initial-module(PathWithExt, RealModuleName)).
        ( rec-note(import-graph(Mods?, Pairs?)) .
          snd-do(UI,new-graph(Mods,Pairs))
        ) *
        rec-msg(finished-opening-initial-module).
	snd-do(UI,finished-opening-modules(Str))
      ).
      snd-ack-event(UI, new-module(Path, Str))
    )
    +
    /* Add a new module by a user */
    ( rec-event(UI, open-module(Path?, Str?)).
      snd-note(online-help(open-module)).
      snd-msg(open-initial-module(Path, Str)). 
      snd-ack-event(UI, open-module(Path, Str)) .
      ( rec-note(import-graph(Mods?,Pairs?))
        +
        rec-msg(cannot-open-module(ModName?)).
	snd-note(ui-status(errorf("cannot open module %s",[ModName])))
      )*
      rec-msg(finished-opening-initial-module) .
      snd-do(UI,finished-opening-modules(Str)) .
      snd-do(UI,new-graph(Mods,Pairs))
    ) +
    ( rec-msg(cannot-open-module(ModName?)).
      snd-note(ui-status(errorf("cannot open module %s",[ModName])))
    ) +
    ( rec-event(UI, delete-module(ModName?)) .
      snd-msg(close-module(ModName)) .
      rec-msg(module-closed(ModName)) .
      snd-do(UI, delete-module(ModName)) .
      snd-ack-event(UI, delete-module(ModName))
    ) +
    ( rec-msg(delete-module(ModName?)).
      snd-do(UI, delete-module(ModName))
    ) +
    ( rec-event(UI,save-module(Str?)).
      snd-msg(save-module(Str)).
      rec-msg(saved-module(Str)).
      snd-ack-event(UI,save-module(Str))
    ) +
    ( rec-event(UI, edit-module(ModName?)) .
      snd-msg(edit-syntax(ModName)) .
      snd-ack-event(UI, edit-module(ModName))
    ) +
    ( rec-event(UI, edit-eqs-module(ModName?)).
      snd-msg(edit-equations(ModName)) .
      snd-ack-event(UI, edit-eqs-module(ModName))
    ) +
   ( rec-event(UI, edit-term(ModName?, FileName?)).
     snd-msg(edit-term-file(ModName, FileName)) .
     snd-ack-event(UI, edit-term(ModName, FileName))
   ) +
    ( rec-event(UI, revert-module(ModName?)) .
      snd-msg(revert-module(ModName)) .           
      rec-msg(module-reverted(ModName?)) .
      snd-ack-event(UI, revert-module(ModName))
    ) +
    ( rec-event(UI, print-module(ModName?)) .
      snd-msg(print-module(ModName)) .           
      rec-msg(module-printed(ModName?)) .
      snd-ack-event(UI, print-module(ModName))
    ) +
    ( rec-event(UI,get-module-info(ModName?)).
      snd-msg(get-module-info(ModName)) .           
      rec-msg(module-info(ModName, Info?)) .
      snd-do(UI,module-info(ModName,Info)) .
      snd-ack-event(UI,get-module-info(ModName))
    ) +
    ( rec-event(UI,save-all).                 
      snd-msg(save-all).
      rec-msg(saved).
      snd-ack-event(UI,save-all)
    ) +
    ( rec-event(UI,clear-all).
      snd-msg(clear-all).
      rec-msg(cleared-all).
      snd-ack-event(UI,clear-all)
    ) +
    ( rec-event(UI, refresh-buttons) .
      snd-msg(refresh-buttons) .
      rec-msg(buttons-refreshed) .
      snd-ack-event(UI, refresh-buttons)
    ) +
   ( rec-event(UI, compile-module(Str?)).
     snd-msg(compile-module(Str)).
     rec-msg(compilation-ready(Str)).
     snd-ack-event(UI, compile-module(Str))
   ) +
   ( rec-event(UI, import-module(Str?, Str1?, Path?)) .
     snd-msg(import-module(Str, Str1, Path)) .
     snd-ack-event(UI, import-module(Str, Str1, Path))
   ) +
   ( rec-event(UI, rename-module(Str?, Str1?, Path?)) .
     snd-msg(rename-module(Str, Str1, Path)) .
     snd-ack-event(UI, rename-module(Str, Str1, Path))
   ) +
   ( rec-event(UI, copy-module(Str?, Str1?, Path?)) .
     snd-msg(copy-module(Str, Str1, Path)) .
     snd-ack-event(UI, copy-module(Str, Str1, Path))
   ) +
   ( rec-event(UI, dump-equations(Str?)).
     snd-msg(dump-equations(Str)).
     rec-msg(equations-dumped).
     snd-ack-event(UI, dump-equations(Str))
   )+
   ( rec-event(UI, dump-parse-table(Str?)).
     snd-msg(dump-parse-table(Str)).
     rec-msg(parse-table-dumped) .
     snd-ack-event(UI, dump-parse-table(Str))
   )+
   ( rec-event(UI,parse-equations(Str?)).
     snd-msg(process-eqs(Str)).
     rec-msg(eqs-processed(Str)).
     snd-ack-event(UI,parse-equations(Str))
   ) +
   ( rec-event(UI,jitterbug-wanted).
     snd-msg(jitterbug-wanted).
     rec-msg(jitterbug-activated).
     snd-ack-event(UI,jitterbug-wanted)
   ) +
   ( rec-event(UI,online-help).
     snd-msg(online-help-wanted).
     rec-msg(done).
     snd-ack-event(UI,online-help)
   ) +
   ( rec-event(UI,no-online-help).
     snd-msg(no-online-help-wanted).
     rec-msg(done).
     snd-ack-event(UI,no-online-help)
   ) +
   ( rec-event(UI,debugging(On?)) .
     snd-msg(debugging(On)) .
     snd-ack-event(UI,debugging(On))
   ) +
   ( rec-note(import-graph(Mods?,Pairs?)).
     snd-do(UI,new-graph(Mods,Pairs))
   )
   +
   ( rec-event(UI, layout-graph(Graph?)) .
     snd-msg(layout-graph(Graph)) .
     rec-msg(graph-layouted(LayoutedGraph?)) .
     snd-do(UI, graph-layouted(LayoutedGraph)) .
     snd-ack-event(UI, layout-graph(Graph))
   )
  ) *
  ( rec-event(UI,quit)
  + rec-disconnect(UI)) .
  shutdown("MetaStudio exiting\n")
endlet
