#include "navigator.idef"
#include "graph-painter.idef"
#include "configuration-manager.idef"

process HandleModuleEvent(Type: term, Event: term, Module: str) is
let
  Actions: list
in
  snd-msg(cm-get-module-actions(Type, Event, Module))
  . rec-msg(cm-module-actions(Actions?))
  . snd-msg(ai-perform-actions(ui-id, Actions, [str(Module)]))
  . rec-msg(ai-actions-performed(ui-id, Actions))
endlet

process HandleModulePopup is
let
  Module: str,
  GraphId: str,
  NodeId: str,
  Menu: term,
  PopupMenu: list,
  Type: term
in
  (
    NAV-RequestPopup(Module?)
    . snd-msg(cm-get-module-events(module-popup, Module))
    . rec-msg(cm-module-events(PopupMenu?))
    . NAV-ShowPopup(Module, PopupMenu)
  +
    NAV-PopupEvent(Module?, Menu?)
    . HandleModuleEvent(module-popup, Menu, Module)
  +
    GP-RequestPopup(GraphId?, NodeId?)
    .
    if equal(GraphId, "import-graph") then
      snd-msg(cm-get-module-events(module-popup, NodeId))
      . rec-msg(cm-module-events(PopupMenu?))
      . GP-ShowPopup("import-graph", NodeId, PopupMenu)
    else
      tau
    fi
  +
    GP-PopupEvent(GraphId?, NodeId?, Menu?)
    .
    if equal(GraphId, "import-graph") then
      HandleModuleEvent(module-popup, Menu, NodeId)
    else
      tau
    fi
  )
  *
  delta
endlet

toolbus(HandleModulePopup)
