/*
  $Id$
*/       

process GetText (EditorId : term, Text : str?, Focus : term?, Status : term?) is
let
  DirtyFoci    : list
in
  snd-msg(get-dirty-focuses(EditorId)) .
  rec-msg(dirty-focuses(DirtyFoci?)) . 
  if not-equal(DirtyFoci, []) then
    Focus := first(DirtyFoci).
    DirtyFoci := next(DirtyFoci).
    snd-note(get-focus-text(EditorId, Focus)).
    (
      rec-msg(focus-text(EditorId, Text?)) .
      Status := parse-needed 
    +
      /* If the editor suddenly dissappears were done */
      rec-note(delete-editor(EditorId)) .
      Text := "" .
      Status := no-parse-needed
    )
  else
    Text := "" .
    Status := no-parse-needed
  fi
endlet

process ParseFocusses is
let
  Id           : term,
  Focus        : term,
  Text         : str,
  Type         : str,
  ModuleName   : str,
  EditorId     : term,
  Nonterminal  : str,
  Tree         : term,
  Errors       : term,
  ModuleId     : term,
  Status       : term
in                     
  Id := process-id .     
  (
    rec-msg(parse-focusses(EditorId?, ModuleId?)) .
    subscribe(delete-editor(EditorId)) .
    Type := fun(ModuleId) .
    ModuleName := first(args(ModuleId)).
    if equal(Type, "eqs") then
      snd-msg(get-rules-top-sort) .
      rec-msg(set-rules-top-sort(sort(Nonterminal?)))
    else
      Nonterminal := ""
    fi . 
    GetText(EditorId, Text?, Focus?, Status?) .
    if equal(Status, parse-needed) then
      UpdateTextInModuleDb(Type, ModuleName, Text).
      ParseString(ModuleId, Nonterminal, Text, Tree?, Errors?) .
      PrepareParseErrorForEditor(ModuleId, EditorId, Focus, Errors) .
      ProcessTree(ModuleId, EditorId, Focus, Tree) .
      Tree := no-tree
    else
      snd-msg(parse-ok(ModuleId))
    fi .
    unsubscribe(delete-editor(EditorId))
  )
  *
  delta
endlet

process UpdateTextInModuleDb(Type : str, ModuleName : str, Text : str) is
  if equal(Type, "eqs") then
    snd-msg(update-eqs-text-in-db(ModuleName, text(Text))) .
    rec-msg(eqs-text-updated(ModuleName))
  else
    tau
  fi
