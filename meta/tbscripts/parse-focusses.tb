/* $Id$ */       

/*{{{  process GetText(EditorId: term, Text: str?) */

process GetText(EditorId: term, Text: str?) is
  snd-msg(te-get-contents(EditorId))
  . rec-msg(te-contents(EditorId, Text?))

/*}}}  */
/*{{{  process AnnotateTree(Sid: term, Tree: term, AnnotateTree: term?) */

process AnnotateTree(Sid: term, Tree: term, AnnotatedTree: term?) is
let
  Filename: str
in
  GetFilename(Sid, Filename?)
  . snd-msg(add-posinfo-packed(Filename, Tree))
  . rec-msg(tree-with-pos-info(AnnotatedTree?))
endlet

/*}}}  */

process ParseEditorCreator is
let
  Nonterminal: term,
  Pid: int,
  Sid: term,
  Table: term
in
  (
    rec-msg(parse-editor(Sid?, Table?, Nonterminal?))
    . create(ParseEditor(Sid, Table, Nonterminal), Pid?)
  )
  * delta
endlet

process ParseEditor(Sid: term, Table: term, Nonterminal: term) is
let
  AnnotatedTree: term,
  Error: term,
  ParseResult: term,
  Registered: bool,
  Text: str
in 
  IsStructureEditorRegistered(Sid, Registered?)
  .
  if equal(Registered, true)
  then
    snd-msg(parse-ok(Sid))
  else
    GetText(Sid, Text?)
    . snd-msg(sglr-parse(Text, Table, Nonterminal))
    .
    (
      rec-msg(sglr-parse-tree(ParseResult?))
      . printf("ParseEditor: ok\n")
      . AnnotateTree(Sid, ParseResult, AnnotatedTree?)
      . EditStructure(Sid, AnnotatedTree)
      . snd-msg(parse-ok(Sid))
    +
      rec-msg(sglr-parse-forest(ParseResult?, Error?))
      . printf("ParseEditor: ambiguous: %t\n", Error)
      . AnnotateTree(Sid, ParseResult, AnnotatedTree?)
      . EditStructure(Sid, AnnotatedTree)
      . HandleParseError(Sid, Error)
      . snd-msg(parse-failed(Sid))
    +
      rec-msg(sglr-parse-error(Error?))
      . printf("ParseEditor: error: %t\n", Error)
      . HandleParseError(Sid, Error)
      . snd-msg(parse-failed(Sid))
    )
  fi
endlet
