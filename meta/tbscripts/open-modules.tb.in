/*
   $Id$
 */

process Open-modules(Eval: evaluator) is
let
  Id      : term,
  Name    : str,
  Name2   : str,
  Str     : str,
  Path    : str,
  Table   : str,
  FT      : str,
  T       : term,
  M1s     : list,
  M2s     : list,
  Ms      : list,
  Pairs   : list,
  I       : int,
  T1      : term,
  Time    : term,
  Ch      : int,
  Li      : int,
  Co      : int,
  Char    : term,
  ErrList : list,
  Cycle   : list
in
  Id := process-id. 
  (
    rec-msg(open-modules(Ms?)).
    M2s := Ms.
    snd-note(ui-status(stat(Id,"Opening Modules"))). (
      if not-equal(Ms, []) then
        Name := first(Ms).
        Ms   := next(Ms).
       /* First we should check here whether this module has already been 
        * opened..
        */
        snd-msg(is-module-in-db(Name)). ( 
          rec-msg(exists-in-module-db(Name))
          +
          /* If it is not open, open it. */
          rec-msg(not-exists-in-module-db(Name?)). ( 
            snd-msg(Id, open-file(Name)). ( 
              rec-msg(Id, opened-file(asfix,Name2?,T?,Path?,Time?)).
             /* Tell UI we added module Name */
              snd-msg(ui,open-module(Name2)).
             /* Tell mdb we add module Name containing term T */
              snd-msg(add-module-to-db(T,Time)).
             /* mdb returns the imports section of Name as well as the
              * list of modules which have to be still opened M1s */
              rec-msg(need-modules(M1s?)).
             /* Add those modules to the list */
              Ms := join(Ms,M1s)
              +
              rec-msg(Id, opened-file(baf,Name2?,T?,Path?,Time?)).
              snd-msg(ui, open-module(Name2)).
              snd-msg(add-sdf2-module-to-db(Path,T,Time,"unchanged")).
              rec-msg(need-modules(M1s?)).
              Ms := join(Ms,M1s).
              snd-msg(Id, read-parse-table(Name)).
              ( 
                rec-msg(Id, table-on-disk(Table?, Time?)).
                snd-msg(add-table-to-db(Name,Table,Time)).
                rec-msg(done).
                snd-msg(Id,open-eqs-asfix-file(Name)).
                (
                  rec-msg(Id?,opened-file(baf,Name2?,T?,Path?,Time?)).
                  snd-msg(add-eqs-to-db(Name2,Path,T,Time,"unchanged")).
                  rec-msg(done)
                +
                  rec-msg(Id?,error-opening(Name2?))
                )
              +
                rec-msg(Id, no-table-on-disk)
              )
              +
              rec-msg(Id, opened-file(raw,Name2?,FT?,Path?,Time?)). 
              snd-msg(open-language("Sdf2", "@datadir@/Sdf2.baf")).
              snd-msg(Id,parse-string-as-asfix1("Sdf2","",FT)).
              ( rec-msg(parse-result-asfix1(Id?,parse-tree(T?))).
                snd-msg(ui,open-module(Name2)). 
                snd-msg(add-sdf2-module-to-db(Path,T,Time,"changed")).
                rec-msg(need-modules(M1s?)).
                Ms := join(Ms,M1s) 
              + 
                rec-msg(parse-result-asfix1(Id?,parse-error(ErrList?,
                                                ambiguities(I?)))).
                snd-msg(add-empty-module-to-db(Name2)).
                rec-msg(done).
                printf("Parse of ts returned %d ambiguities", Name2, I) 
              + rec-msg(parse-result-asfix1(Id?,parse-error(ErrList?,
                                                cycle(Cycle?)))).
                snd-msg(add-empty-module-to-db(Name2)).
                rec-msg(done).
                printf("Parse returned a cycle\nCycle is: %t\n",Cycle)
              +
                rec-msg(parse-result-asfix1(Id?,parse-error(ErrList?,eof))).
                snd-msg(add-empty-module-to-db(Name2)).
                rec-msg(done). 
                printf("EOF unexpected while parsing %s\n", Name2)
              +
                rec-msg(parse-result-asfix1(Id?,
                                            parse-error([character(Ch?),
                                                         line(Li?),
                                                         col(Co?),
                                                         char(Char?)],plain))).
                snd-msg(add-empty-module-to-db(Name2)).
                rec-msg(done).
                printf("Character %d unexpected in line %d, column %d\n",
                       Ch, Li, Co)
              )
              +
             /* File would not open (unreadable, not exist, wrong path...) */
              rec-msg(Id, error-opening(Str?)).
              snd-msg(cannot-open-module(Str)).
              snd-msg(add-empty-module-to-db(id(Str))).
              rec-msg(done). 
              snd-note(ui-status(endstat(Id)))
            )
          )
        )
      fi
    ) *
    if equal(Ms,[]) then
printf("Check tables for modules %l\n", M2s).
      (
        if not-equal(M2s, []) then
          Name := first(M2s).
          M2s   := next(M2s).
          snd-msg(is-module-in-db(Name)).
          (
            rec-msg(exists-in-module-db(Name2?)).
            snd-msg(validate-parse-tables(Name)).
            rec-msg(validation-done)
          +
            rec-msg(not-exists-in-module-db(Name2?))
          )
        fi
      ) *
      if equal(M2s, []) then
        tau
      fi
    fi.
/* We are finished. Inform UI */
    snd-msg(finished-opening-modules).
    snd-note(ui-status(endstat(Id)))
  ) *
  delta
endlet
