#! /bin/sh
#
#    Meta-Environment - An environment for language prototyping.
#    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, 
#                        The Netherlands. 
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
#

# $Id$

toolbus=__TOOLBUSBIN__/toolbus
datadir=__DATADIR__

tests=0
failed=0    

call_toolbus () {
  script=$1
  tests=`expr $tests + 1`   
  result=`${toolbus} -I${datadir} ${script} 2>&1`
  toolbus_exit=$?
  if [ $toolbus_exit != 0 ]; then
    echo "Failed: " $script ": " ${result}
    failed=`expr $failed + 1`
  elif echo $result | grep -i failed >/dev/null ; then
    echo "Failed: " $script ": " ${result}
    failed=`expr $failed + 1`
  else
    printf .
  fi             
}

# Test 1. Attempt to create a non-existing module.
rm -f NonExistingModule.sdf
call_toolbus new-module-test-1.tb
rm -f NonExistingModule.sdf

# Test 2. Attempt to create a module that would overwrite an existing file.
rm -f ./ExistingModule.sdf
echo "module ExistingModule" > ./ExistingModule.sdf
call_toolbus new-module-test-2.tb
rm -f ./ExistingModule.sdf

# Test 3. Attempt to create a module that already exists in the module-db.
call_toolbus new-module-test-3.tb

echo ""


if [ $failed != 0 ]; then
        echo "FAILED:" $failed "out of" $tests "tests"
        exit 1
else
  echo "All" $tests "tests succeeded"
fi          
