/*
  $Id$
 */
process Revert-module is
let 
  Str   : term,
  Id    : term,
  Name2 : term,
  T     : term,
  Path  : str,
  M1s   : list,
  FT    : str,
  I     : int,
  T1    : term,
  Ch    : int,
  Li    : int,
  Co    : int,
  Char  : term,
  Time  : term,
  ErrList : list,
  Cycle   : list
in 
  Id := process-id. (
    rec-msg(revert-module(Str?)).
    snd-note(ui-status(stat(Id,"Reverting ..."))).
    snd-msg(revert-module-in-db(Str)).
    rec-msg(done).
    snd-msg(Id,open-file(id(Str))). 
    (
      rec-msg(Id, opened-file(asfix,Name2?,T?,Path?,Time?)).
      snd-msg(add-module-to-db(T,Time)).
      rec-msg(need-modules(M1s?))
    +
      rec-msg(Id, opened-file(baf,Name2?,T?,Path?,Time?)).
      snd-msg(add-sdf2-module-to-db(Path,T,Time,"unchanged")).
      rec-msg(need-modules(M1s?))
    +
      rec-msg(Id, opened-file(raw,Name2?,FT?,Path?,Time?)). 
      snd-msg(open-sdf2-language).
      rec-msg(sdf2-language-opened). /* Beware here may occur a bug, brrr */
      snd-msg(Id,parse-string-as-asfix1("Sdf2","Module",FT)).
      ( rec-msg(parse-result-asfix1(Id?,parse-tree(T?))).
        snd-msg(add-sdf2-module-to-db(Path,T1,Time,"changed")).
        rec-msg(need-modules(M1s?)) 
      +
        rec-msg(parse-result-asfix1(Id?,parse-error(ErrList?,
                                                    ambiguities(I?)))).
        snd-msg(add-empty-module-to-db(Name2)).
        rec-msg(done).
        printf("Parse of ts returned %d ambiguities", Name2, I)
      +
        rec-msg(parse-result-asfix1(Id?,parse-error(ErrList?,
                                                    cycle(Cycle?)))).
        snd-msg(add-empty-module-to-db(Name2)).
        rec-msg(done).
        printf("Parse returned a cycle\nCycle is: %t\n",Cycle)
      +
        rec-msg(parse-result-asfix1(Id?,parse-error(ErrList?,eof))).
        snd-msg(add-empty-module-to-db(Name2)).
        rec-msg(done). 
        printf("EOF unexpected while parsing %s\n", Name2)
      +
        rec-msg(parse-result-asfix1(Id?,
                                    parse-error([character(Ch?),
                                                 line(Li?),
                                                 col(Co?),
                                                 char(Char?)],plain))).
        snd-msg(add-empty-module-to-db(Name2)).
        rec-msg(done).
        printf("Character %d unexpected in line %d, column %d\n", Ch, Li, Co)
      )
    ).
    snd-note(ui-status(endstat(Id))).
    snd-msg(reverted-module(Str))
  ) *
  delta
endlet
