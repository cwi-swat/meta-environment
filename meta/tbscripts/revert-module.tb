process Revert-module is
let 
  Str   : term,
  Id    : term,
  Name2 : term,
  T     : term,
  Path  : str,
  M1s   : list,
  FT    : str,
  I     : int,
  T1    : term,
  Ch    : int,
  Li    : int,
  Co    : int,
  Char  : term
in 
  Id := process-id. (
    rec-msg(revert-module(Str?)).
    snd-note(ui-status(stat(Id,"Reverting ..."))).
    snd-msg(revert-module-in-db(Str)).
    rec-msg(done).
    snd-msg(Id,open-file(id(Str))). 
    (
      rec-msg(Id, opened-file(asfix,Name2?,T?,Path?)).
      snd-msg(add-module-to-db(T)).
      rec-msg(need-modules(M1s?))
    +
      rec-msg(Id, opened-file(baf,Name2?,T?,Path?)).
      snd-msg(add-sdf2-module-to-db(Path,T)).
      rec-msg(need-modules(M1s?))
    +
      rec-msg(Id, opened-file(raw,Name2?,FT?,Path?)). 
      snd-msg(open-language("Sdf2",
                            "/home/markvdb/NEW-META/lib/Sdf2.baf")).
      snd-msg(Id,parse-string("Sdf2","",FT)).
      ((
        rec-msg(Id,parse-result(parsetree(T?,I?))).
        if equal(I,0) then
         snd-msg(Id,a2toa1(T)).
         rec-msg(Id,converted(T1?)).
         snd-msg(ui,open-module(Name2)).
         snd-msg(add-sdf2-module-to-db(Path,T1)).
         rec-msg(need-modules(M1s?))
        else
         printf("Parse of %s returned %d ambiguities",Str,I).
         printf("Term is: %t\n",T)
        fi
       )
       +
       (
        rec-msg(Id, parse-result(eof-error)). 
        printf("EOF unexpected while parsing %s\n",Str)
       )
       +
       (
        rec-msg(Id, parse-result(parse-error([character(Ch?),line(Li?),col(Co?),char(Char?)]))).
        printf("Character %d unexpected in line %d, column %d\n",Ch,Li,Co)
       )
      )
    ).
    snd-note(ui-status(endstat(Id))).
    snd-msg(reverted-module(Str))
  ) *
  delta
endlet