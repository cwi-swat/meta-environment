/* $Id$
 */

tool in-output is {
  command = "in-output"
}

process Io is
let
IO    : in-output,
Id    : term,
Name  : str,
Path  : str,
Type  : str,
T     : term,
Asfix : term,
Text  : str
in
  execute(in-output,IO?).
  ( rec-msg(Id?,open-file(id(Name?))).
    snd-eval(IO, open-old-asfix-file(Name)).
    ( rec-value(IO,opened-file(Name,T?,Path?)).
      snd-msg(Id,opened-file(asfix,id(Name),T,Path))
    + rec-value(IO,error-opening(Name?)).
      snd-eval(IO,open-sdf2-file(Name)).
      ( rec-value(IO,opened-file(Name,Text?,Path?)).
        snd-msg(Id,opened-file(raw,id(Name),Text,Path))
        +
        rec-value(IO,opened-asfix-file(Name,T?,Path?)).
        snd-msg(Id,opened-file(baf,id(Name),T,Path))
        + 
        rec-value(IO,error-opening(Name?)).
        snd-msg(Id, error-opening(Name))
      )
    )
  + 
    rec-msg(Id?,open-eqs2-file(id(Name?))).
    snd-eval(IO,open-eqs2-file(Name)).
    ( rec-value(IO,opened-file(Name,Text?,Path?)).
      snd-msg(Id,opened-file(raw,id(Name),Text,Path))
      + 
      rec-value(IO,error-opening(Name?)).
      snd-msg(Id, error-opening(Name))
    )
  + 
    rec-msg(Id?,open-trm-file(id(Name?))).
    snd-eval(IO,open-trm-file(Name)).
    ( rec-value(IO,opened-file(Name,Text?,Path?)).
      snd-msg(Id,opened-file(raw,id(Name),Text,Path))
      +
      rec-value(IO,error-opening(Name?)).
      snd-msg(Id, error-opening(Name))
    )
  +
    rec-msg(save-sdf2-asfix(id(Name?),Path?,Asfix?)).
    snd-eval(IO,save-sdf2-asfix(Name,Path,Asfix)).
    rec-value(IO,save-done(Name?)).
    snd-msg(save-done)
  +
    rec-msg(save-eqs-asfix(id(Name?),Path?,Asfix?)).
    snd-eval(IO,save-eqs-asfix(Name,Path,Asfix)).
    rec-value(IO,save-done(Name?)).
    snd-msg(save-done)
  )*
  delta 
endlet
