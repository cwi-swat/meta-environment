/*
  $Id$
 */
process ProcessEqs is
let
  Id      : term,
  ModName : str,
  Module  : term,
  Modules : list,
  Table   : str,
  Path    : str,
  FT      : str,
  I       : int,
  T1      : term,
  T2      : term,
  Ch      : int,
  Li      : int,
  Co      : int,
  Char    : term,
  Time1   : term,
  Time2   : term,
  ErrList : list,
  Cycle   : list,
  EqsText : str,
  EqsTree : term
in
  Id := process-id.
  ( rec-msg(process-eqs(ModName?)).
    snd-msg(eqs-available-for-modules(ModName)).
    rec-msg(eqs-for-modules(Modules?)).
    ( if not-equal(Modules, []) then
       Module  := first(Modules).
       Modules := next(Modules).
       /* Get the text representation of the unparsed equations section. 
        */
       snd-msg(get-eqs-text(Module)).
       ( rec-msg(eqs-text(Module?, EqsText?)).
         snd-msg(set-parsetable(Module)).
         (
	   rec-msg(parsetable-set(Module)).
           snd-note(ui-status(stat(Id,"Parsing Equations ..."))).
           snd-msg(Id,parse-string-as-asfix1(Module, "Equations", EqsText)).
           ( rec-msg(parse-result-asfix1(Id?, parse-tree(EqsTree?))).
             snd-note(ui-status(endstat(Id))). 
             snd-msg(update-eqs-tree-in-db(Module, tree(EqsTree))) .
             rec-msg(eqs-updated)
           + 
             rec-msg(parse-result-asfix1(Id?,parse-error(ErrList?,
                                                         ambiguities(I?)))).
             printf("Parse of %s returned %d ambiguities",Module,I). 
             snd-msg(add-eqs-to-db(Module,Path,error,Time1,"unchanged")).
             rec-msg(done)  
           + 
             rec-msg(parse-result-asfix1(Id?,parse-error(ErrList?,
                                                         cycle(Cycle?)))).
             printf("Parse returned a cycle\n").
             printf("Cycle is: %t\n",Cycle).
             rec-msg(done)  
           +
             rec-msg(parse-result-asfix1(Id?,parse-error(ErrList?,eof))). 
             printf("EOF unexpected while parsing %s\n",Module).
             snd-msg(add-eqs-to-db(Module,Path,error,Time1,"unchanged")).
             rec-msg(done) 
           +
             rec-msg(parse-result-asfix1(Id?,
                                         parse-error([character(Ch?),
                                                      line(Li?),
                                                      col(Co?),
                                                      char(Char?)],plain))).
             printf("Character %d unexpected in %s, line %d, column %d\n",Ch,Module,Li,Co).
             snd-msg(add-eqs-to-db(Module,Path,error,Time1,"unchanged")).
             rec-msg(done) 
           ).
           snd-note(ui-status(endstat(Id)))
         +
	   rec-msg(parsetable-not-set(Module)).
	   snd-note(ui-status(errorf("Unable to open parse table for \"%s\"",
				     [Module])))
         )
       +
       rec-msg(error-opening(Module)).
       snd-msg(add-eqs-to-db(Module,"",no-equations,timestamp(0),"unchanged")).
       rec-msg(done)
      )
      fi
    )*
    if equal(Modules,[]) then 
      snd-msg(eqs-processed(ModName))
    fi 
  )* delta
endlet
