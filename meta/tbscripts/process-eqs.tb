process BuildEquationsFilename(ModuleId: str, Filename: str?) is
let
  Directory: str,
  Extension: str
in
  snd-msg(ts-get-str-value("module-path", ModuleId))
  . rec-msg(ts-value(Directory?))
  . snd-msg(file-extension-hook(asf))
  . rec-msg(file-extension-hook-result(Extension?))
  . snd-msg(io-get-filename(Directory, ModuleId, Extension))
  . rec-msg(io-filename(Filename?))
endlet

process ParseEquationsText(ModuleId: term, Text: str) is
let
  Nonterminal: term,
  Pid: int,
  Table: term
in
  GetParseTable(ModuleId, eqs, Table?)
  . snd-msg(get-rules-top-sort)
  . rec-msg(set-rules-top-sort(sort(Nonterminal?)))
  . create(ParseEquationsHandler(ModuleId), Pid?)
  . ParseText(Pid, Text, Table, Nonterminal)
endlet

process ParseEquationsHandler(ModuleId: term) is
let
  Equations: term,
  Modulename: str,
  ParseError: term,
  Pid: int,
  ParseResult: term
in
  Pid := process-id
  .
  (
    rec-msg(parse-tree(Pid, ParseResult?))
    . MDB-AddEquationsPosInfo(ModuleId, ParseResult, Equations?)
    . MM-GetAttribute(ModuleId, SDF_NAMESPACE, "name", Modulename?)
    . snd-msg(postprocess-semantics-hook(Modulename, Equations))
    . rec-msg(postprocess-semantics-hook-result(Modulename, Equations?))
    . snd-msg(parse-equations-ok(ModuleId, Equations))
  +
    (
      rec-msg(parse-forest(Pid, ParseResult?, ParseError?))
    +
      rec-msg(parse-error(Pid, ParseError?))
    )
    . snd-msg(parse-equations-failed(ModuleId, ParseError))
  )
endlet

process GetAsfModule(ModuleId: term) is
let
  AsfExt: str,
  AsfPath: str,
  Error: term,
  Equations: term,
  Modulename: str,
  ParseError: term,
  SdfPath: str,
  Summary: term,
  Text: str
in
  snd-msg(ts-get-term-value("asf-tree", ModuleId))
  .
  (
    rec-msg(ts-value(Equations?))
    . snd-msg(equations(ModuleId, Equations))
  +
    rec-msg(ts-no-value)
    . TODO("codeclone with EditEquationsAction")
    . GetModulePath(ModuleId, SDF_NAMESPACE, SdfPath?)
    .  
    if equal(SdfPath, "") then
      snd-msg(no-equations(ModuleId))
    else
      snd-msg(file-extension-hook(asf))
      . rec-msg(file-extension-hook-result(AsfExt?))
      . ReplaceExtension(SdfPath, AsfExt, AsfPath?)
      . MM-SetAttribute(ModuleId, ASF_NAMESPACE, "status", unknown)
      . SetModulePath(ModuleId, ASF_NAMESPACE, AsfPath)
      . ReadFile(AsfPath, Text?)
      .
      if equal(Text, "") then
        snd-msg(no-equations(ModuleId))
      else
        ParseEquationsText(ModuleId, Text)
        .
        (
          rec-msg(parse-equations-ok(ModuleId, Equations?))
          . snd-msg(ts-put-term-value("asf-tree", ModuleId, Equations))
          . snd-msg(equations(ModuleId, Equations))
        +
          rec-msg(parse-equations-failed(ModuleId, Error?))
	  . MM-GetAttribute(ModuleId, SDF_NAMESPACE, "name", Modulename?)
          . AddFilenameToParseError(Error, Modulename, ParseError?)
          . snd-msg(es-make-summary("sglr", Modulename, [ParseError]))
          . rec-msg(es-summary(Summary?))
          . snd-msg(error-in-equations(ModuleId, Summary))
        )
      fi
    fi
  )
endlet

process GetImportsForRenaming(ModuleId: term, ModuleNames: list, Imports: term?) is
let
  Modulename: str,
  Modules: list
in
  snd-msg(get-modules(ModuleNames))
  .
  (
    rec-msg(modules(Modules?))
    . MM-GetAttribute(ModuleId, SDF_NAMESPACE, "name", Modulename?)
    . snd-msg(sm-get-all-needed-imports(Modules, Modulename))
    . rec-msg(sm-all-needed-imports(Imports?))
  +
    rec-msg(no-modules)
    . Imports := []
  )
endlet

process GetSpecification(ModuleId: term) is
let
  Error: term,
  CurModule: term,
  Equations: term,
  Imports: list,
  Modulename: str,
  Modules: list,
  Pid: int,
  Specification: term,
  Id : int,
  Count : int,
  Done : int
in
  Id := process-id
  . snd-note(ui-status(start(Id, "Get Specification")))
  . MM-GetAllModuleDependencies(ModuleId, Modules?)
  . GetImportsForRenaming(ModuleId, Modules, Imports?)
  . Count := size(Modules)
  . Specification := []
  . TODO("remove computation by using listeners?")
  . 
  if and(not-equal(Modules, []), equal(Error, undefined)) then
    CurModule := first(Modules)
    . create(GetAsfModule(CurModule), Pid?)
    .
    (
      rec-msg(no-equations(CurModule))
    +
      rec-msg(equations(CurModule, Equations?))
      /* normalization should occur BEFORE renaming 
       * proposal: merge the renaming and normalization tools,
       * possibly including the get-imports tool. 
       */
      . MM-GetAttribute(CurModule, SDF_NAMESPACE, "name", Modulename?)
      . snd-note(ui-status(statf(Id, "Normalizing %s",[Modulename])))
      . snd-msg(normalize-module(Equations)) 
      . rec-msg(normalize-module-result(Equations?))
      . snd-note(ui-status(statf(Id, "Renaming %s",[Modulename])))
      . snd-msg(sr-rename-module(Imports, Modulename, Equations))
      . rec-msg(sr-renamed-module(Equations?))
      . Specification := join(Specification, Equations)
    +
      rec-msg(error-in-equations(CurModule, Error?))
    )
    . Modules := next(Modules)
    . Done := sub(Count, size(Modules))
    . printf("\rDone %d/%d\n", Done, Count )
  fi
  *
  (
    if not-equal(Error, undefined) then
      snd-msg(specification-incomplete(Error))
    fi
  +
    if equal(Modules, []) then
      snd-msg(specification(Specification)) 
    fi
  )
  . snd-note(ui-status(stop(Id)))
endlet

process GetSpecificationEquations(Specification: term, Equations: term?) is
  snd-msg(extract-equations(Specification))
  . rec-msg(extract-equations-result(Equations?))

process GetSpecificationTests(Specification: term, Tests: term?) is
  snd-msg(extract-tests(Specification))
  . rec-msg(extract-tests-result(Tests?))
