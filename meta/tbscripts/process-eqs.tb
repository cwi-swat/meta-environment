/*
  $Id$
 */
process ProcessEqs is
let
  Id      : term,
  Mod     : str,
  Module  : term,
  Modules : list,
  Mname   : str,
  Table   : str,
  Path    : str,
  FT      : str,
  I       : int,
  T1      : term,
  T2      : term,
  Ch      : int,
  Li      : int,
  Co      : int,
  Char    : term,
  Time1   : term,
  Time2   : term,
  ErrList : list,
  Cycle   : list
in
  Id := process-id.
  ( rec-msg(process-eqs(Mod?)).
    snd-msg(update-eqs-for-modules(Mod)).
    rec-msg(eqs-for-modules(Modules?)).
    ( if not-equal(Modules, []) then
       Module  := first(Modules).
       Modules := next(Modules).
       snd-msg(Id,open-eqs-text-file(Module)).
       ( rec-msg(Id, opened-file(raw,Mname?,FT?,Path?,Time1?)).
         snd-msg(set-parsetable(Mname)).
         rec-msg(parsetable-set(Mname)).
         snd-note(ui-status(stat(Id,"Parsing Equations ..."))).
         snd-msg(Id,parse-string-as-asfix1(Mname,"Equations",FT)).
         ( rec-msg(parse-result-asfix1(Id?,parse-tree(T1?))).
           snd-note(ui-status(endstat(Id))). 
           snd-msg(add-eqs-to-db(Mname,Path,T1,Time1,"changed")).
           rec-msg(done) 
         + 
           rec-msg(parse-result-asfix1(Id?,parse-error(ErrList?,
                                                       ambiguities(I?)))).
           printf("Parse of %s returned %d ambiguities",Mname,I). 
           snd-msg(add-eqs-to-db(Mname,Path,error,Time1,"unchanged")).
           rec-msg(done)  
         + 
           rec-msg(parse-result-asfix1(Id?,parse-error(ErrList?,
                                                       cycle(Cycle?)))).
           printf("Parse returned a cycle\n").
           printf("Cycle is: %t\n",Cycle).
           rec-msg(done)  
         +
           rec-msg(parse-result-asfix1(Id?,parse-error(ErrList?,eof))). 
           printf("EOF unexpected while parsing %s\n",Mname).
           snd-msg(add-eqs-to-db(Mname,Path,error,Time1,"unchanged")).
           rec-msg(done) 
         +
           rec-msg(parse-result-asfix1(Id?,
                                       parse-error([character(Ch?),
                                                    line(Li?),
                                                    col(Co?),
                                                    char(Char?)],plain))).
           printf("Character %d unexpected in line %d, column %d\n",Ch,Li,Co).
           snd-msg(add-eqs-to-db(Mname,Path,error,Time1,"unchanged")).
           rec-msg(done) 
         ).
         snd-note(ui-status(endstat(Id)))
       +
       rec-msg(Id, error-opening(Mod?)).
       snd-msg(add-eqs-to-db(Module,"",no-equations,timestamp(0),"unchanged")).
       rec-msg(done)
      )
      fi
    )*
    if equal(Modules,[]) then 
      snd-msg(eqs-processed(Mod))
    fi 
  )* delta
endlet
