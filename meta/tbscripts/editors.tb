/*
 * This file contains editor processes. There are three types of editors
 * now, so there are three main process definitions. The idea is that
 * these three will collaps to one GENERIC editor process in the near
 * future!
 */

/* First the process that creates one of the three processes */

process EditorCreator is
let
  Id         : int,
  Pid1       : int,
  Pid2       : int,
  Path       : term,
  Time       : term,
  Tree       : term,
  EditorId   : term,
  Text       : str,
  ModuleName : str,
  FileName   : str
in
  create(EditorManager, Id?) .
  (
    %% Edit a Syntax file
    rec-msg(edit-syntax(ModuleName?)) .
    snd-msg(get-sdf2-path-from-db(ModuleName)) .
    rec-msg(path(FileName?)) .
    snd-msg(get-editor-id(FileName, ModuleName)) .
    (
      rec-msg(new-editor(FileName, EditorId?)) .
      create(TextEditor("syntax", EditorId, ModuleName), Pid1?) .
      snd-msg(set-filename(EditorId, FileName)) .
      create(EditSyntax(EditorId, ModuleName), Pid2?) .
      rec-msg(initialization-done(EditorId))
    +
      rec-msg(existing-editor(FileName, EditorId?)) .
      snd-msg(move-editor-to-front(EditorId))
    ) .
    snd-msg(edit-syntax(ModuleName, EditorId))
  +
    %% Edit an Equations file
    rec-msg(edit-equations(ModuleName?)) .
    snd-msg(get-eqs-path-from-db(ModuleName)) .
    rec-msg(path(FileName?)) .
    snd-msg(get-editor-id(FileName, ModuleName)) .
    (
      rec-msg(new-editor(FileName, EditorId?)) .
      create(TextEditor("equations", EditorId, ModuleName), Pid1?) .
      snd-msg(set-filename(EditorId, FileName)) .
      create(EditEquations(EditorId, ModuleName), Pid2?) .
      rec-msg(initialization-done(EditorId))
    +
      rec-msg(existing-editor(FileName, EditorId?)) .
      snd-msg(move-editor-to-front(EditorId))
    ) .
    snd-msg(edit-equations(ModuleName, EditorId))
  +
    %% Edit a Term from file
    (
      rec-msg(edit-term-file(ModuleName?, FileName?)).
      Tree := none
    +
      rec-msg(edit-term-file-with-tree(ModuleName?, FileName?, Tree?)) 
    ).
    snd-msg(get-editor-id(FileName, ModuleName)) .
    (
      rec-msg(new-editor(FileName, EditorId?))
    +
      rec-msg(existing-editor(FileName, EditorId?)) .
      DeleteAndKillEditor(EditorId) .
      snd-msg(get-editor-id(FileName, ModuleName)) .
      rec-msg(new-editor(FileName, EditorId?)) 
    ) .
    create(TextEditor("term", EditorId, ModuleName), Pid1?) .
    snd-msg(open-trm-file(FileName)) .
    (
      rec-msg(opened-file(FileName, text(Text?), Path?, Time?)) .
      snd-msg(set-filename(EditorId, Path)) .
      create(EditTerm(EditorId, ModuleName, Text, Tree), Pid2?)
      +
      rec-msg(error-opening(FileName)) .
      snd-msg(set-filename(EditorId, FileName)) .
      create(EditTerm(EditorId, ModuleName, "", Tree), Pid2?)
    ) .
    snd-msg(edit-term-file(ModuleName, EditorId))
  +
    rec-msg(text-editor-disconnected(EditorId?)) .
    DeleteAndKillEditor(EditorId) 
  +
    rec-msg(delete-editors-for-module(ModuleName?)) .
    DeleteEditorsForModule(ModuleName)
  )
  * delta
endlet
/* Below are the three editor processes */
process EditSyntax(EditorId: term, ModuleName: str) is
let
  Path      : str,
  Focus     : term,
  Tree      : term, 
  RTree          : term,
  STree          : term,
  Time      : term,
  Modules   : term,
  ErrorFoci : term,
  Text      : str,
  DirtyFoci : list,
  ModifiedStatus : term,
  Killed    : term,
  ButtonName     : str
in
  Text := "" .
  snd-msg(get-sdf2-asfix(ModuleName)).
  (
    rec-msg(syntax(Tree?)) .
    snd-msg(initialize-structure-editor-with-tree(EditorId, Tree)) .
    rec-msg(initial-focus(Focus?))
  +
    rec-msg(unavailable).
    snd-msg(open-syntax-file(ModuleName)) .
    (
      rec-msg(opened-file(ModuleName, text(Text?), Path?, Time?))
    +
      rec-msg(error-opening(ModuleName))
    ) .
    snd-msg(initialize-structure-editor(EditorId, Text)) .
    rec-msg(initial-focus(Focus?))
  ) .
  snd-msg(initialization-done(EditorId)) .
  Killed := false .
  (
    (   
      rec-msg(extra-button-action(EditorId, ButtonName?)) .
      snd-msg(extra-button-action(ButtonName, "Syntax", ModuleName, EditorId))
    ) *
    if equal(Killed, true) then
      tau
    fi
  ) 
  ||
  rec-msg(kill-editor(EditorId)).
  Killed := true .
  snd-msg(get-modified-status(EditorId)) .
  rec-msg(modified-status(EditorId, ModifiedStatus?)) .
  snd-msg(kill-editor-done(EditorId)).
  if equal(ModifiedStatus, modified) then
    snd-msg(revert-module(ModuleName)).
    rec-msg(module-reverted(ModuleName)).
    snd-note(ui-status(errorf("Dirty module %s is reread from disk",
                       [ModuleName])))
  else
    tau
  fi
  
endlet

process EditEquations(EditorId: term, ModuleName: str) is
let
  Path           : str,
  Focus          : term,
  Tree           : term,
  RTree          : term,
  STree          : term,
  ErrMsg         : str,
  ErrorFoci      : term,
  Text           : str,
  DirtyFoci      : list,
  ModifiedStatus : term,
  Killed         : term,
  Msgs           : list,
  ButtonName     : str
in
  Text := "" .
  subscribe(syntax-changed(ModuleName)) . 
  snd-msg(get-eqs-tree(ModuleName)) .
  (
    rec-msg(tree(Tree?)) .
    snd-msg(initialize-structure-editor-with-tree(EditorId, Tree))
  +
    rec-msg(unavailable) .
    snd-msg(get-eqs-text(ModuleName)) .
    (
      rec-msg(eqs-text(ModuleName, Text?))
    +
      %% If there are no equations in the module-db, assume we
      %% want to create a new equations section.
      rec-msg(no-eqs-text(ModuleName)) .
      snd-msg(create-new-equations(ModuleName)) .
      (
        rec-msg(new-equations-created(ModuleName, Path?))
      +
        rec-msg(new-equations-not-created(ErrMsg?)) .
        snd-note(ui-status(errorf(
          "Could not create empty equations: %s", [ErrMsg])))
      )
    ) .
    snd-msg(initialize-structure-editor(EditorId, Text))
  ) .
  rec-msg(initial-focus(Focus?)) .
  snd-msg(initialization-done(EditorId)) .
  Killed := false .
  (
    (
        rec-note(syntax-changed(ModuleName)) .
	snd-msg(invalidate-tree(EditorId)).
	rec-msg(invalidation-done(EditorId))
      + 
        rec-msg(extra-button-action(EditorId, ButtonName?)) .
        snd-msg(extra-button-action(ButtonName, "Equations", ModuleName, EditorId))
    ) *
    if equal(Killed, true) then
      tau
    fi
  )
  ||
  rec-msg(kill-editor(EditorId)).
  Killed := true .
  snd-msg(get-modified-status(EditorId)) .
  rec-msg(modified-status(EditorId, ModifiedStatus?)) .
  snd-msg(kill-editor-done(EditorId)) .
  if equal(ModifiedStatus, modified) then
    snd-msg(revert-module([ModuleName])).
    rec-msg(module-reverted([ModuleName])).
    snd-note(ui-status(errorf("Module %s is reread from disk",[ModuleName])))
  else
    tau
  fi
endlet

process EditTerm(EditorId: term, ModuleName: str, Text: str, Tree : term) is
let
  Focus      : term,
  ButtonName : str
in
  subscribe(syntax-changed(ModuleName)) . 
  if equal(quote(Tree), none) then 
    snd-msg(initialize-structure-editor(EditorId, Text)) 
  else 
    snd-msg(initialize-structure-editor-with-tree(EditorId, Tree)) 
  fi  . 
  rec-msg(initial-focus(Focus?)) .
  snd-msg(set-focus(EditorId, Focus)) .
  (
    rec-note(syntax-changed(ModuleName)) .
    snd-msg(invalidate-tree(EditorId)).
    rec-msg(invalidation-done(EditorId))
  +
    rec-msg(extra-button-action(EditorId, ButtonName?)) .
    snd-msg(extra-button-action(ButtonName, "Term", ModuleName, EditorId)) 
  ) *
  rec-msg(kill-editor(EditorId)).
  snd-msg(kill-editor-done(EditorId))
endlet

/* Some general editor utilities */

process DeleteAndKillEditor(EditorId : term) is
  snd-msg(kill-editor(EditorId)) .
  rec-msg(kill-editor-done(EditorId)) .
  snd-msg(delete-text-editor(EditorId)) .
  snd-msg(delete-structure-editor(EditorId)) .
  snd-note(delete-editor(EditorId))

process DeleteEditorsForModule(ModuleName: str) is
let
  EditorId   : term,
  EditorList : list
in
  snd-msg(get-editors-by-module(ModuleName)) .
  rec-msg(editors-by-module(EditorList?)) .
  (
    if not-equal(EditorList, []) then
      EditorId := first(EditorList) .
      DeleteAndKillEditor(EditorId) .
      EditorList := next(EditorList)
    fi
  ) *
  if equal(EditorList, []) then
    tau
  fi
endlet
