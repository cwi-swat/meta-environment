/* This file contains everything related to xemacs editors */

process Editors is
let
  Pid : int
in
  create(EditorManager,Pid?) .
  create(EditorCreator,Pid?) .
  create(SE, Pid?) /* Structure Editor */
endlet

process EditorCreator is
let
  EditorId   : term,
  ModuleName : str,
  FileName   : str,
  Tree       : term
in
  (
    rec-msg(edit-syntax(ModuleName?)) .
    SyntaxEditorCreator(ModuleName)
  +
    rec-msg(edit-equations(ModuleName?)) .
    EquationsEditorCreator(ModuleName)
  +
    rec-msg(edit-term-file(ModuleName?, FileName?)).
    TermEditorCreator(ModuleName,FileName,none)
  +
    rec-msg(edit-term-file-with-tree(ModuleName?, FileName?, Tree?)) .
    TermEditorCreator(ModuleName,FileName,Tree)
  +
    rec-msg(delete-editors-for-module(ModuleName?)) .
    KillEditorsForModule(ModuleName)
  )
  * delta
endlet

process SyntaxEditorCreator (ModuleName : str) is
let
  Tree : term,
  Text : str,
  FileName : str,
  Path : str,
  Time : term
in
  Tree := none.
  Text := "".
  snd-msg(get-sdf2-path-from-db(ModuleName)) .
  rec-msg(path(FileName?)) .
  snd-msg(get-sdf2-asfix(ModuleName)).
  (
    rec-msg(syntax(Tree?))
  +
    rec-msg(unavailable).
    snd-msg(open-syntax-file(ModuleName)) .
    (
      rec-msg(opened-file(ModuleName, text(Text?), Path?, Time?))
    +
      rec-msg(error-opening(ModuleName))
    )
  ) .
  CreateEditor(ModuleName,"syntax",FileName,Text,Tree)
endlet

process EquationsEditorCreator (ModuleName : str) is
let
  Tree : term,
  Text : str,
  FileName : str,
  Path : str,
  Time : int
in
  Tree := none .
  Text := "" .
  snd-msg(get-eqs-path-from-db(ModuleName)) .
  rec-msg(path(FileName?)) .
  snd-msg(get-eqs-tree(ModuleName)) .
  (
    rec-msg(tree(Tree?)) 
  +
    rec-msg(unavailable) .
    snd-msg(get-eqs-text(ModuleName)) .
    (
      rec-msg(eqs-text(ModuleName, Text?))
    +
      rec-msg(no-eqs-text(ModuleName)) .
      CreateNewEquations(ModuleName)
    )
  ) .
  CreateEditor(ModuleName, "equations", FileName, Text, Tree)
endlet

process TermEditorCreator (ModuleName : str, FileName : str, Tree : term) is
let
  Text : str,
  Path : str,
  Time : term
in
  Text := "".
  snd-msg(open-trm-file(FileName)) .
  (
    rec-msg(opened-file(FileName, text(Text?), Path?, Time?)) 
    +
    rec-msg(error-opening(FileName)) 
  ).
  CreateEditor(ModuleName,"term",FileName,Text,Tree)
endlet

process CreateEditor(ModuleName : str, Type : str,
                   FileName : str, Text : str, Tree : term) is
let
  EditorId   : term,
  ButtonList : list,
  Pid        : int,
  Focus      : term
in
    /* The 'creates' in the following process are essential to 
     * spawn the actual editors and make the editor creation 
     * process available to the next request.
     */
    snd-msg(get-auxilary-buttons(Type, ModuleName)) .
    rec-msg(button-list(ModuleName,ButtonList?)).
    snd-msg(get-editor-id(FileName, ModuleName)) .
    (
      rec-msg(new-editor(FileName, EditorId?)) .
      snd-msg(initialize-structure-editor(EditorId, Text, Tree)) .
      rec-msg(initial-focus(Focus?)) .
      create(EditorActionsLoop(EditorId, Type, ModuleName), Pid?) .
      create(TextEditor(EditorId, FileName, ButtonList), Pid?) .
      snd-msg(editor-opened(ModuleName))
    +
      rec-msg(existing-editor(FileName, EditorId?)) .
      create(EditorExists(EditorId,ModuleName,Type,FileName,Text,Tree), Pid?)
    )
endlet

process EditorExists(EditorId : term, ModuleName : str, Type : str,
                     FileName : str, Text : str, Tree : term) is
  if equal(Type,"term") then
    snd-msg(kill-editor(EditorId)).
    snd-msg(edit-term-file-with-tree(ModuleName, FileName, Tree)) 
  else 
    snd-note(move-editor-to-front(EditorId)) .
    snd-msg(editor-opened(ModuleName))
  fi

process EditorActionsLoop(EditorId: term, Type : str, ModuleName: str) is
let
  ButtonName : list,
  Pid : int,
  Command : term
in
  subscribe(delete-editor(<term>)) .
  subscribe(syntax-changed(ModuleName)) .
  (
    rec-msg(extra-button-action(EditorId, ButtonName?)) .
    snd-msg(extra-button-action(ButtonName, Type, ModuleName, EditorId)) 
  +
    rec-msg(text-editor-disconnected(EditorId)) .
    create(KillEditor(EditorId, Type, ModuleName), Pid?)
  +
    rec-msg(kill-editor(EditorId)) .
    snd-note(kill-text-editor(EditorId)) .
    rec-msg(text-editor-killed(EditorId)) .
    create(KillEditor(EditorId, Type, ModuleName), Pid?)
  +
    rec-note(syntax-changed(ModuleName)).
    InvalidateDependendEditor(EditorId,Type)
  +
    rec-msg(get-editor-modulename(EditorId)) .
    snd-msg(editor-modulename(EditorId,ModuleName))
  ) *
  rec-note(delete-editor(EditorId)) 
endlet

process InvalidateDependendEditor(EditorId : term, Type : str) is
  if not(equal(Type,"syntax")) then
    InvalidateEditor(EditorId)
  else
    tau
  fi

process InvalidateEditor(EditorId : term) is
let
  Focus : term
in
  snd-msg(invalidate-tree(EditorId)) .
  rec-msg(invalidation-done(EditorId,Focus?)) .
  snd-note(set-focus(EditorId, Focus))
endlet

process KillEditor(EditorId : term, Type : str, ModuleName : str) is
  snd-note(delete-editor(EditorId)) .
  if not(equal(type, "term")) then
    KillModuleEditor(EditorId, ModuleName)
  else
    tau
  fi.
  snd-msg(delete-structure-editor(EditorId)) 

process KillModuleEditor(EditorId : term, ModuleName : str) is
let
  ModifiedStatus : term
in
  snd-msg(get-modified-status(EditorId)) .
  rec-msg(modified-status(EditorId, ModifiedStatus?)) .
  if equal(ModifiedStatus, modified) then
    snd-msg(revert-module(ModuleName)).
    rec-msg(module-reverted(ModuleName)).
    snd-note(ui-status(errorf("Dirty module %s is reread from disk",
                       [ModuleName])))
  else
    tau
  fi
endlet

process KillEditorsForModule(ModuleName: str) is
let
  EditorId   : term,
  EditorList : list
in
  snd-msg(get-editors-by-module(ModuleName)) .
  rec-msg(editors-by-module(EditorList?)) .
  (
    if not-equal(EditorList, []) then
      EditorId := first(EditorList) .
      snd-msg(kill-editor(EditorId)) .
      EditorList := next(EditorList)
    fi
  ) *
  if equal(EditorList, []) then
    tau
  fi
endlet

process CreateNewEquations(ModuleName : str) is
let
  ErrMsg : str,
  Path   : str
in
  snd-msg(create-new-equations(ModuleName)) .
  (
  	rec-msg(new-equations-created(ModuleName, Path?))
  +
  	rec-msg(new-equations-not-created(ErrMsg?)) .
  	snd-note(ui-status(errorf(
  		"Could not create empty equations: %s", [ErrMsg])))
  )
endlet
