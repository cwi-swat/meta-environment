/* $Id$ */

process EditorCreator is
let
  EditorId   : term,
  ModuleName : str,
  FileName   : str,
  Tree       : term
in
  (
    rec-msg(edit-general(FileName?)) .
    GeneralEditorCreator(FileName)
  +
    rec-msg(edit-syntax(ModuleName?)) .
    SyntaxEditorCreator(ModuleName)
  +
    rec-msg(edit-equations(ModuleName?)) .
    EquationsEditorCreator(ModuleName)
  +
    rec-msg(edit-term-file(ModuleName?, FileName?)).
    TermEditorCreator(ModuleName,FileName,none)
  +
    rec-msg(edit-term-file-with-tree(ModuleName?, FileName?, Tree?)) .
    TermEditorCreator(ModuleName,FileName,Tree)
  +
    rec-msg(delete-editors-for-module(ModuleName?)) .
    KillEditorsForModule(ModuleName)
  )
  * delta
endlet

process GeneralEditorCreator (FullFileName : str) is
let
  Path : str,
  FileName : str,
  Extension : str,
  AskedExtension : str,
  ModuleName : str
in
  snd-msg(file-extension-hook(sdf)) .
  rec-msg(file-extension-hook-result(AskedExtension?)) .
  snd-msg(io-decons-file-name(FullFileName, AskedExtension)) .
  rec-msg(io-decons-file-name-result(Path?, FileName?, Extension?)) .
  if equal(Extension, AskedExtension) then
    MDB-GetModuleName(Path, FileName, ModuleName?) .
    SyntaxEditorCreator(ModuleName)
  else
    snd-msg(file-extension-hook(asf)) .
    rec-msg(file-extension-hook-result(AskedExtension?)) .
    snd-msg(io-decons-file-name(FullFileName, AskedExtension)) .
    rec-msg(io-decons-file-name-result(Path?, FileName?, Extension?)) .
    if equal(Extension, AskedExtension) then
      MDB-GetModuleName(Path, FileName, ModuleName?) .
      EquationsEditorCreator(ModuleName)
    else
      ExtensionBasedTermEditorCreator(FullFileName)
    fi
  fi
endlet

process SyntaxEditorCreator (ModuleName : str) is
let
  Tree : term,
  Text : str,
  FileName : str,
  Message : str,
  Path : str,
  Extension : str
in
  Tree := none.
  Text := "".
  snd-msg(get-path-from-db(ModuleName)) .
  (
    rec-msg(path(Path?)) .
    snd-msg(file-extension-hook(sdf)) .
    rec-msg(file-extension-hook-result(Extension?)) .
    snd-msg(io-get-filename(Path, ModuleName, Extension)) .
    rec-msg(io-filename(FileName?)) .
    snd-msg(get-sdf2-asfix(ModuleName)).
    (
      rec-msg(syntax(Tree?))
    +
      rec-msg(unavailable).
      snd-msg(io-read-file(FileName)) .
      (
	rec-msg(io-file-contents(Text?))
      +
	rec-msg(io-error-reading(Message?))
      )
    ) .
    CreateEditor(syntax-editor, ModuleName, FileName, Text, Tree)
  +
    rec-msg(no-path) .
    snd-note(ui-status(errorf("Internal error, could not open editor for %s",
                       [ModuleName]))) .
    snd-msg(editor-opened(ModuleName, no-editor))
  )
endlet

process EquationsEditorCreator (ModuleName : str) is
let
  Tree : term,
  Text : str,
  FileName : str,
  Path : str,
  Time : int,
  Status : term,
  Extension : str
in
  Status := success .
  Tree := none .
  Text := "" .
  snd-msg(get-path-from-db(ModuleName)) .
  (
    rec-msg(path(Path?)) .
    snd-msg(file-extension-hook(asf)) .
    rec-msg(file-extension-hook-result(Extension?)) .
    snd-msg(io-get-filename(Path, ModuleName, Extension)) .
    rec-msg(io-filename(FileName?)) .
    snd-msg(get-eqs-tree(ModuleName)) .
    (
      rec-msg(tree(Tree?)) 
    +
      rec-msg(unavailable) .
      snd-msg(get-eqs-text(ModuleName)) .
      (
	rec-msg(eqs-text(ModuleName, Text?)) 
      +
	rec-msg(no-eqs-text(ModuleName)) .
	snd-msg(create-new-equations(ModuleName))  .
	(
	  rec-msg(new-equations-created)
	+
	  rec-msg(new-equations-not-created) .
	  Status := failure
	)
      )
    ) .
    if equal(Status, success) then
      CreateEditor(equations-editor, ModuleName, FileName, Text, Tree)
    else
      tau
    fi
  +
    rec-msg(no-path) .
    snd-note(ui-status(errorf("Internal error, could not open editor for %s",
                       [ModuleName]))) .
    snd-msg(editor-opened(ModuleName, no-editor))
  )
endlet

process ExtensionBasedTermEditorCreator (FileName : str) is
let
  Extension : str,
  ModuleName : str
in
  snd-msg(io-get-extension(FileName)) .
  rec-msg(io-extension(FileName, Extension?)) .
  snd-msg(get-extension-modulename(Extension)) .
  (
    rec-msg(extension-modulename(Extension, ModuleName?)) .
    TermEditorCreator(ModuleName, FileName, none)
  +
    rec-msg(no-extension-modulename(Extension)) .
    snd-note(ui-status(errorf("Extension %s is not registered. Please edit your meta.buttons. For example: configuration([extension(\"MyModuleName\",\"%s\")])",
                       [Extension, Extension]))) .
    snd-msg(editor-opened("", no-editor))
  )
endlet

process TermEditorCreator (ModuleName : str, FileName : str, Tree : term) is
let
  Text : str,
  ErrorMessage : str
in
  Text := "".
  snd-msg(io-read-file(FileName)) .
  (
    rec-msg(io-file-contents(Text?))
    +
    rec-msg(io-error-reading(ErrorMessage?)) 
  ) .
  CreateEditor(term-editor, ModuleName, FileName, Text, Tree)
endlet

process CreateEditor(Type : term, ModuleName : str, 
                     FileName : str, 
		     Text : str, Tree : term) is
let
  EditorId : term,
  ButtonList : list,
  Pid : int,
  CurrentModuleName : str
in
    /* The 'create' in the following process are essential to 
     * spawn the actual editors and make the editor creation 
     * process available to the next request.
     */
    snd-msg(get-auxiliary-buttons(Type, ModuleName)) .
    rec-msg(button-list(ModuleName, ButtonList?)).
    snd-msg(get-editor-id(FileName, ModuleName)) .
    (
      rec-msg(new-editor(EditorId?)) .
      snd-msg(se-initialize-structure-editor(EditorId, Text, Tree)) .
      create(EditorActionsLoop(EditorId, Type, ModuleName), Pid?) .
      snd-msg(te-edit-text(EditorId, EDITOR, FileName, ButtonList))
    +
      rec-msg(existing-editor(EditorId?)) .
      snd-msg(get-editor-modulename(EditorId)) .
      rec-msg(editor-modulename(EditorId, CurrentModuleName?)) .
      if equal(CurrentModuleName, ModuleName) then
	snd-msg(te-editor-to-front(EditorId))
      else
	Error("Term %s is already being edited for a different module",
	      [FileName])
      fi
    ) .
    snd-msg(editor-opened(ModuleName, EditorId))
endlet

process CloseEditor(ModuleName : str, FileName : str) is
let
  EditorId   : term
in
  snd-msg(check-editor-id(FileName, ModuleName)) .
  (
    rec-msg(existing-editor(EditorId?)) .
    snd-msg(kill-editor(EditorId))
  +
    rec-msg(non-existing-editor(FileName))
  )
endlet

process EditorActionsLoop(EditorId: term, Type : term, ModuleName: str) is
let
  ActionEvent : term,
  Pid : int,
  Command : term
in
  subscribe(delete-editor(<term>)) .
  subscribe(syntax-changed(ModuleName)) .
  (
    rec-msg(te-menu-event(EditorId, ActionEvent?)) .
    snd-msg(extra-button-action(ActionEvent, [], Type, ModuleName, EditorId)) 
  +
    rec-msg(te-text-editor-disconnected(EditorId)) .
    create(KillEditor(EditorId, Type, ModuleName), Pid?)
  +
    rec-msg(kill-editor(EditorId)) .
    snd-msg(te-kill-text-editor(EditorId)) .
    create(KillEditor(EditorId, Type, ModuleName), Pid?)
  +
    rec-note(syntax-changed(ModuleName)).
    InvalidateDependendEditor(EditorId, Type)
  +
    rec-msg(get-editor-modulename(EditorId)) .
    snd-msg(editor-modulename(EditorId,ModuleName))
  ) *
  rec-note(delete-editor(EditorId)) 
endlet

process InvalidateDependendEditor(EditorId : term, Type : term) is
  if not(equal(Type, syntax-editor)) then
    InvalidateEditor(EditorId)
  else
    tau
  fi

process InvalidateEditor(EditorId : term) is
let
  Focus : term
in
  snd-msg(se-invalidate-tree(EditorId)) .
  rec-msg(se-invalidation-done(EditorId,Focus?))
endlet

process KillEditor(EditorId : term, Type : term, ModuleName : str) is
  snd-note(delete-editor(EditorId)) .
  if or(equal(Type, syntax-editor), 
        equal(Type, equations-editor)) then
    KillModuleEditor(EditorId, ModuleName, Type) 
  else	
    if not(equal(Type, term-editor)) then
      snd-msg(kill-editor-unknown-type-hook(EditorId, Type, ModuleName)) .
      rec-msg(kill-editor-unknown-type-hook-result)
    else
      tau
    fi
  fi.
  snd-msg(se-delete-structure-editor(EditorId)) 

process KillModuleEditor(EditorId : term, ModuleName : str, Type : term) is
let
  EditorIsModified : term
in
  snd-msg(se-is-editor-modified(EditorId)) .
  rec-msg(se-editor-modified(EditorId, EditorIsModified?)) .
  if equal(EditorIsModified, quote(true)) then
    snd-msg(revert-module(ModuleName, Type)).
    rec-msg(module-reverted(ModuleName)).
    snd-note(ui-status(errorf("Dirty module %s is reread from disk",
                       [ModuleName])))
  else
    tau
  fi
endlet

process KillEditorsForModule(ModuleName: str) is
let
  EditorId   : term,
  EditorList : list
in
  snd-msg(get-editors-by-module(ModuleName)) .
  rec-msg(editors-by-module(EditorList?)) .
  (
    if not-equal(EditorList, []) then
      EditorId := first(EditorList) .
      snd-msg(kill-editor(EditorId)) .
      EditorList := next(EditorList)
    fi
  ) *
  if equal(EditorList, []) then
    tau
  fi
endlet
