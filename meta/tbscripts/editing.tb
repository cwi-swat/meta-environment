/* $Id$ */

/*{{{  process FindModuleFilename(Modulename: str, Type: term, Filename: str?) */

process FindModuleFilename(Modulename: str, Type: term, Filename: str?) is
let
  Extension: str,
  Path: str
in
  snd-msg(get-path-from-db(Modulename))
  . rec-msg(path(Path?))
  . snd-msg(file-extension-hook(Type))
  . rec-msg(file-extension-hook-result(Extension?))
  . snd-msg(io-get-filename(Path, Modulename, Extension))
  . rec-msg(io-filename(Filename?))
endlet

/*}}}  */

/*{{{  process AssertModuleSanity(Sid: term, Modulename: str) */

process AssertModuleSanity(Sid: term, Modulename: str) is
let
  CurrentModulename: str
in
  GetModulename(Sid, CurrentModulename?)
  . if not(equal(CurrentModulename, Modulename)) then
    Error("Term is already being edited over module: %s", [Modulename])
  else tau fi
endlet

/*}}}  */
/*{{{  process GetFilename(Sid: term, Filename: str?) */

process GetFilename(Sid: term, Filename: str?) is
  snd-msg(em-get-filename(Sid))
  . rec-msg(em-filename(Sid, Filename?))

/*}}}  */
/*{{{  process GetModulename(Sid: term, Modulename: str?) */

process GetModulename(Sid: term, Modulename: str?) is
  snd-msg(em-get-modulename(Sid))
  . rec-msg(em-modulename(Sid, Modulename?))

/*}}}  */

/*{{{  process Edit(Filename: str, Modulename: str, Sid: term?) */

process Edit(Filename: str, Modulename: str, Sid: term?) is
  snd-msg(em-get-session(Filename, Modulename))
  . rec-msg(em-session(Filename, Modulename, Sid?))

/*}}}  */

/*{{{  process IsStructureEditorRegistered(Sid: term Registered: bool?) */

process IsStructureEditorRegistered(Sid: term, Registered: bool?) is
  snd-msg(em-is-editor-registered(Sid, structure))
  .
  (
    rec-msg(em-editor-registered(Sid, structure))
    . Registered := true
  +
    rec-msg(em-editor-not-registered(Sid, structure))
    . Registered := false
  )

/*}}}  */
/*{{{  process IsTextEditorRegistered(Sid: term Registered: bool?) */

process IsTextEditorRegistered(Sid: term, Registered: bool?) is
  snd-msg(em-is-editor-registered(Sid, text))
  .
  (
    rec-msg(em-editor-registered(Sid, text))
    . Registered := true
  +
    rec-msg(em-editor-not-registered(Sid, text))
    . Registered := false
  )

/*}}}  */

/*{{{  process EditText(Sid: term, Type: term) */

process EditText(Sid: term, Type: term) is
let
  Actions: list,
  Filename: str,
  Modulename: str,
  Registered: bool
in
  IsTextEditorRegistered(Sid, Registered?)
  .
  if equal(Registered, true)
  then
    snd-msg(te-editor-to-front(Sid))
  else
    snd-msg(em-register-editor(Sid, text))
    . GetModulename(Sid, Modulename?)
    . snd-msg(get-auxiliary-buttons(Type, Modulename))
    . rec-msg(button-list(Modulename, Actions?))
    . GetFilename(Sid, Filename?)
    . snd-msg(te-edit-text(Sid, EDITOR, Filename, Actions))
    /*. snd-msg(te-set-actions(Sid, Actions))*/
  fi
endlet

/*}}}  */
/*{{{  process EditStructure(Sid: term) */

process EditStructure(Sid: term, Tree: term) is
let
  Registered: bool
in
  IsStructureEditorRegistered(Sid, Registered?)
  .
  if equal(Registered, true)
  then
    snd-msg(se-delete(Sid))
  else
    snd-msg(em-register-editor(Sid, structure))
  fi
  . snd-msg(se-create(Sid, Tree))
endlet

/*}}}  */

/*{{{  process MenuSelected(Sid: term, EditorType: term) */

process MenuSelected(Sid: term, EditorType: term) is
let
  Action: term,
  Args: list,
  Modulename: str
in
  rec-msg(te-menu-event(Sid, Action?))
  . Args := []
  . GetModulename(Sid, Modulename?)
  . printf("Action: %t, EditorType: %t, Modulename: %s, Sid: %t\n",
  Action, EditorType, Modulename, Sid)
  . snd-msg(extra-button-action(Action, Args, EditorType, Modulename, Sid))
endlet

/*}}}  */
/*{{{  process MouseClicked(Sid: term) */

process MouseClicked(Sid: term) is
let
  Focus: term,
  Offset: int,
  Registered: bool,
  Sortname: str
in
  rec-msg(te-mouse-click-at-offset(Sid, Offset?))
  . IsStructureEditorRegistered(Sid, Registered?)
  .
  if equal(Registered, true)
  then
    snd-msg(se-set-cursor-at-offset(Sid, Offset))
    . snd-msg(se-get-focus-at-cursor(Sid))
    . rec-msg(se-focus-at-cursor(Sid, Focus?))
    . snd-msg(se-get-sort-at-cursor(Sid))
    . rec-msg(se-sort-at-cursor(Sid, Sortname?))
    . snd-msg(te-set-focus(Sid, Focus, Sortname))
  else
    tau
  fi
endlet

/*}}}  */
/*{{{  process TextChanged(Sid: term) */

process TextChanged(Sid: term) is
let
  Registered: bool
in
  rec-msg(te-contents-changed(Sid))
  . IsStructureEditorRegistered(Sid, Registered?)
  .
  if equal(Registered, true)
  then
    DeleteStructureEditor(Sid)
    . snd-msg(te-clear-focus(Sid))
    . snd-msg(te-display-message(Sid,
      "Editor contents have changed, focus is unavailable until next parse."))
  else
    tau
  fi
endlet

/*}}}  */

/*{{{  process EditorDisconnected(Sid: term) */

process EditorDisconnected(Sid: term) is
  (
    rec-msg(te-text-editor-disconnected(Sid))
  +
    rec-msg(kill-editor(Sid))
  )

/*}}}  */

/*{{{  process DeleteTextEditor(Sid: term) */

process DeleteTextEditor(Sid: term) is
  snd-msg(te-kill-text-editor(Sid))
  . printf("Deleting text editor: %t\n", Sid)
  . snd-msg(em-unregister-editor(Sid, text))

/*}}}  */
/*{{{  process DeleteStructureEditor(Sid: term) */

process DeleteStructureEditor(Sid: term) is
  snd-msg(se-delete(Sid))
  . printf("Deleting structure editor: %t\n", Sid)
  . snd-msg(em-unregister-editor(Sid, structure))

/*}}}  */
/*{{{  process DeleteSession(Sid: term) */

process DeleteSession(Sid: term) is
let
  Registered: bool
in
  IsTextEditorRegistered(Sid, Registered?)
  .
  if equal(Registered, true)
  then
    DeleteTextEditor(Sid)
  else
    tau
  fi

  . IsStructureEditorRegistered(Sid, Registered?)
  .
  if equal(Registered, true)
  then
    DeleteStructureEditor(Sid)
  else
    tau
  fi

  . snd-msg(em-delete-session(Sid))
endlet

/*}}}  */
/*{{{  process DeleteSessions(Modulename: str) */

process DeleteSessions(Modulename: str) is
let
  Sid: term,
  Sids: list
in
  snd-msg(em-get-session-ids(Modulename))
  . rec-msg(em-session-ids(Modulename, Sids?))
  . printf("session ids: %t\n", Sids)
  .
  (
    if not-equal(Sids, []) then
      Sid := first(Sids)
      . DeleteSession(Sid)
      . Sids := next(Sids)
    fi
  ) *
  if equal(Sids, []) then
    tau
  fi
endlet

/*}}}  */

/*{{{  process GetPendingChanges(Sid: term, HasChanges: bool?) */

process GetPendingChanges(Sid: term, HasChanges: bool?) is
let
  HasText: bool,
  HasStructure: bool
in
  IsTextEditorRegistered(Sid, HasText?)
  . IsStructureEditorRegistered(Sid, HasStructure?)
  . HasChanges := and(HasText, not(HasStructure))
endlet

/*}}}  */
/*{{{  process CommitPendingChanges(Modulename: str, HasChanges: bool) */

process CommitPendingChanges(Modulename: str, HasChanges: bool) is
  if equal(HasChanges, true) then
    snd-msg(revert-module(Modulename))
    . rec-msg(module-reverted(Modulename))
  else tau fi

/*}}}  */

/*{{{  process GetSyntaxTree(Modulename: str, Tree: term?, Available: bool?) */

process GetSyntaxTree(Modulename: str, Tree: term?, Available: bool?) is
  snd-msg(get-syntax-tree(Modulename))
  .
  (
    rec-msg(syntax(Tree?))
    . Available := true
  +
    rec-msg(unavailable)
    . Available := false
  )

/*}}}  */
/*{{{  process EditSyntax(Modulename: str) */

process EditSyntax(Modulename: str) is
let
  Available: bool,
  EditorType: term,
  Filename: str,
  HasChanges: bool,
  Sid: term,
  Tree: term
in
  EditorType := syntax-editor
  . FindModuleFilename(Modulename, sdf, Filename?)
  . Edit(Filename, Modulename, Sid?)
  . AssertModuleSanity(Sid, Modulename)
  . EditText(Sid, EditorType)
  . GetSyntaxTree(Modulename, Tree?, Available?)
  .
  if equal(Available, true)
  then
    EditStructure(Sid, Tree)
  else
    tau
  fi
  .
  (
    MenuSelected(Sid, EditorType)
  +
    MouseClicked(Sid)
  +
    TextChanged(Sid)
  +
    rec-msg(replace-focus(Sid, Tree?))
    . EditStructure(Sid, Tree)
  )
  *
  EditorDisconnected(Sid)
  . GetPendingChanges(Sid, HasChanges?)
  . DeleteSession(Sid)
  . CommitPendingChanges(Modulename, HasChanges)
endlet

/*}}}  */

/*{{{  process GetEquationsTree(Modulename: str, Tree: term?, Available: bool?) */

process GetEquationsTree(Modulename: str, Tree: term?, Available: bool?) is
  snd-msg(get-eqs-tree(Modulename))
  .
  (
    rec-msg(tree(Tree?))
    . Available := true
  +
    rec-msg(unavailable)
    . Available := false
  )

/*}}}  */
/*{{{ process EditEquations(Modulename: str) */

process EditEquations(Modulename: str) is
let
  Available: bool,
  EditorType: term,
  Filename: str,
  Sid: term,
  Tree: term
in
  EditorType := equations-editor
  . FindModuleFilename(Modulename, asf, Filename?)
  . Edit(Filename, Modulename, Sid?)
  . EditText(Sid, EditorType)
  . GetEquationsTree(Modulename, Tree?, Available?)
  .
  if equal(Available, true)
  then
    EditStructure(Sid, Tree)
  else
    tau
  fi
  .
  (
    MenuSelected(Sid, EditorType)
  +
    MouseClicked(Sid)
  +
    TextChanged(Sid)
  +
    rec-msg(replace-focus(Sid, Tree?))
    . EditStructure(Sid, Tree)
  )
  *
  EditorDisconnected(Sid)
  . DeleteSession(Sid)
endlet

/*}}}  */

/*{{{  process EditorCreator */

process EditorCreator is
let
  Modulename: str,
  Pid: int
in
  (
    rec-msg(edit-syntax(Modulename?))
    . create(EditSyntax(Modulename), Pid?)
  +
    rec-msg(edit-equations(Modulename?))
    . create(EditEquations(Modulename), Pid?)
  )
  * delta
endlet

/*}}}  */
