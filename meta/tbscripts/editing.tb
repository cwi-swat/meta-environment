#ifndef __EDITING__
#define __EDITING__

#include <editor-manager.idef>
#include <editor-plugin.idef>
#include <structure-editor.idef>

#include <module-manager.tb>
#include <io-utils.tb>
#include <config-utils.tb>
#include <editor-error-display.tb>
#include <text-utils.tb>

process DisplayMessage(EditorId : term, Message : str) is
  snd-msg(te-display-message(EditorId, Message))

process GetModuleId(Sid: term, ModuleId: term?) is
  snd-msg(em-get-moduleid(Sid))
  .
  (
    rec-msg(em-moduleid(Sid, ModuleId?))
  +
    rec-msg(em-no-such-session(Sid))
    . printf("FIX ME: PushActiveModule: No such session\n")
    . ModuleId := UNDEFINED
  +
    rec-msg(em-session-not-bound(Sid))
    . printf("FIX ME: PushActiveModule: Session not bound\n")
    . ModuleId := UNDEFINED
  )
 
process GetFocus(Sid: term, Tree: term?) is
let
  Registered: bool
in
  IsStructureEditorRegistered(Sid, Registered?)
  .
  if equal(Registered, true) then
    snd-msg(se-get-cursor(Sid))
    .
    (
      rec-msg(se-cursor(Sid, Tree?))
    +
      rec-msg(se-no-cursor(Sid))
      . Tree := UNDEFINED
    )
  else
    Tree := UNDEFINED
  fi
endlet

process ReplaceFocus(Sid: term, Tree: term) is
let
  Text: str,
  Filename: str,
  Error: str
in
  snd-msg(unparse(Tree))
  . rec-msg(unparsed-text(Text?))
  . snd-msg(te-set-contents(Sid, Text))
  . UpdateTextRepository(Sid)
  . SE-UpdateTree(Sid, Tree)
  . snd-msg(te-clear-focus(Sid))
endlet

process CheckTreeSort(Tree: term, Sort: str, RTree: term?) is
let
  TreeSort: str
in
/*
  snd-msg(se-check-tree-sort(Sort, Tree))
  .
  (
    rec-msg(se-wrong-sort(TreeSort?))
    . snd-note(ui-status(errorf("Top sort %s of tree does not match %s",
                                [TreeSort, Sort])))
    . RTree := UNDEFINED
  +
    rec-msg(se-sort-ok)
    . RTree := Tree
  )
*/
  TODO("NYI: checkTreeSort\n")
  . RTree := Tree
endlet

process GetPath(Sid: term, Path: str?) is
  snd-msg(em-get-path(Sid))
  . rec-msg(em-path(Sid, Path?))

process Edit(Path: str, Sid: term?) is
  snd-msg(em-create-session(Path))
  . rec-msg(em-session(Path, Sid?))

process IsStructureEditorRegistered(Sid: term, Registered: bool?) is
  snd-msg(em-is-editor-registered(Sid, structure))
  .
  (
    rec-msg(em-editor-registered(Sid, structure))
    . Registered := true
  +
    rec-msg(em-editor-not-registered(Sid, structure))
    . Registered := false
  )

process IsTextEditorRegistered(Sid: term, Registered: bool?) is
  snd-msg(em-is-editor-registered(Sid, text))
  .
  (
    rec-msg(em-editor-registered(Sid, text))
    . Registered := true
  +
    rec-msg(em-editor-not-registered(Sid, text))
    . Registered := false
  )

process EditText(Sid: term, Type: term, AlreadyExists: bool?) is
let
  Path: str,
  Categories: term,
  ModuleId: term
in
  IsTextEditorRegistered(Sid, AlreadyExists?)
  .
  if equal(AlreadyExists, true) then
    snd-msg(te-editor-to-front(Sid))
  else
    snd-msg(em-register-editor(Sid, text))
    . GetPath(Sid, Path?)
    . snd-msg(te-edit-text(Sid, Path))
    . SetEditActions(Sid, Type)
    . snd-msg(get-text-categories)
    . rec-msg(text-categories(Categories?)) 
    . snd-msg(te-register-text-categories(Sid, Categories))
  fi
endlet

process SetEditActions(Sid: term, Type: term) is
let
  Events: list
in
  snd-msg(cm-get-events(Type))
  . rec-msg(cm-events(Events?))
  . snd-msg(te-add-actions(Sid, Events))
endlet

process SE-UpdateTree(Sid: term, Tree: term) is
let
  Registered: bool,
  Slices: term
in
  if not-equal(Tree, UNDEFINED) then
    IsStructureEditorRegistered(Sid, Registered?)
    .
    if equal(Registered, true) then
      snd-msg(se-update(Sid, Tree))
    else
      snd-msg(em-register-editor(Sid, structure))
      . snd-msg(se-create(Sid, Tree))
    fi
    . AddJob("Highlighting")
    . snd-msg(se-get-tree-slices(Sid))
    .
    (
      rec-msg(se-tree-slices(Sid, Slices?))
      . JobDone("Highlighting")
      . snd-msg(te-highlight-slices(Sid, Slices))
    +
      rec-msg(se-no-tree-slices(Sid))
    )
  else
    tau 
  fi
endlet

process SynchronizeFocus(Sid: term) is
let
  Focus: term,
  Sortname: str
in
  snd-msg(se-get-sort-at-cursor(Sid))
  .
  (
    rec-msg(se-sort-at-cursor(Sid, Sortname?))
    . snd-msg(se-get-focus-at-cursor(Sid))
    . rec-msg(se-focus-at-cursor(Sid, Focus?))
    . snd-msg(te-set-focus(Sid, Focus))
    . snd-msg(te-display-message(Sid, Sortname))
  +
    rec-msg(se-no-cursor(Sid))
  )
endlet

process GetFocusSort(Sid: term, Sort: str?) is
  Sort := ""
  . snd-msg(se-get-sort-at-cursor(Sid))
  .
  (
    rec-msg(se-sort-at-cursor(Sid, Sort?))
  +
    rec-msg(se-no-cursor(Sid))
  )

process UpdateTextRepository(Sid: term) is
let
  Contents: str,
  ModuleId: term,
  Path: str
in
  snd-msg(te-get-contents(Sid))
  . rec-msg(te-contents(Sid, Contents?))
  . GetPath(Sid, Path?)
  . PutCachedValue(TEXT_REPOSITORY, Path, Contents)
endlet

process MenuSelected(Sid: term, EditorType: term) is
let
  Action: str,
  Event: term,
  ModuleId: term,
  Modulename: str,
  Sort: str
in
  rec-msg(te-event(Sid, Event?))
  . snd-msg(em-request-transaction(Sid))
  .
  (
    rec-msg(em-no-transaction(Sid))
  +
    rec-msg(em-transaction-started(Sid))
    . GetModuleId(Sid, ModuleId?)
    . GetFocusSort(Sid, Sort?)
    . snd-msg(cm-get-action(EditorType, Sort, Event))
    . rec-msg(cm-action(Action?))
    . UpdateTextRepository(Sid)
    . 
    (
      printf("Warning: process %s was not found\n", Action)
    +>
      Action(Sid, EditorType, Sort)
    +>
      Action(Sid)
    )
    . snd-msg(em-end-transaction(Sid))
  )
endlet

process MouseClicked(Sid: term) is
let
  Column: int,
  Line: int,
  Offset: int,
  Pid: int,
  Registered: bool
in
  (
    rec-msg(te-mouse-click-at-offset(Sid, Offset?))
    . create(OffsetHandler(Sid, Offset), Pid?)
  +
    rec-msg(te-mouse-click-at-line-column(Sid, Line?, Column?))
    . create(LineColumnHandler(Sid, Line, Column), Pid?)
  ) 
  . snd-msg(em-request-transaction(Sid))
  .
  (
    rec-msg(em-no-transaction(Sid))
  +
    rec-msg(em-transaction-started(Sid))
    . IsStructureEditorRegistered(Sid, Registered?)
    .
    if equal(Registered, true) then
      snd-msg(handle-mouse-event(Pid))
      . SynchronizeFocus(Sid)
    else
      tau
    fi
    . snd-msg(em-end-transaction(Sid))
  )
endlet

process OffsetHandler(Sid: term, Offset: int) is
let
  Pid: int
in
  Pid := process-id
  . rec-msg(handle-mouse-event(Pid))
  . snd-msg(se-set-cursor-at-offset(Sid, Offset))
endlet

process LineColumnHandler(Sid: term, Line: int, Column: int) is
let
  Pid: int
in
  Pid := process-id
  . rec-msg(handle-mouse-event(Pid))
  . snd-msg(se-set-cursor-at-line-column(Sid, Line, Column))
endlet

process EditorDisconnected(Sid: term) is
  (
    rec-msg(te-text-editor-disconnected(Sid))
  +
    rec-msg(kill-editor(Sid))
  )

process DeleteTextEditor(Sid: term) is
  snd-msg(te-kill-text-editor(Sid))
  . snd-msg(em-unregister-editor(Sid, text))

process DeleteStructureEditor(Sid: term) is
let
  Registered: bool
in
  snd-msg(se-delete(Sid))
endlet

process DeleteSession(Sid: term) is
let
  Registered: bool
in
  snd-msg(em-request-transaction(Sid))
  .
  (
    rec-msg(em-no-transaction(Sid))
  +
    rec-msg(em-transaction-started(Sid))
    . IsTextEditorRegistered(Sid, Registered?)
    .
    if equal(Registered, true) then
      DeleteTextEditor(Sid)
    else
      tau
    fi
    . IsStructureEditorRegistered(Sid, Registered?)
    .
    if equal(Registered, true) then
      DeleteStructureEditor(Sid)
    else
      tau
    fi
    . snd-msg(em-delete-session(Sid))
    . snd-msg(em-end-transaction(Sid))
  )
endlet

process DeleteSessions(ModuleId: term) is
let
  Sid: term,
  Sids: list
in
  snd-msg(em-get-sessions-by-moduleid(ModuleId))
  .
  (
    rec-msg(em-sessions(ModuleId, Sids?))
    .
    (
      if not-equal(Sids, []) then
        Sid := first(Sids)
        . DeleteSession(Sid)
        . Sids := next(Sids)
      fi
    )
    *
    if equal(Sids, []) then
      tau
    fi
  +
    rec-msg(em-no-such-session(ModuleId))
  )
endlet

process GetModuleByPath(Path: str, ModuleId: term?) is
let
  Sid: term
in
  GetEditorByPath(Path, Sid?)
  .
  if not-equal(Sid, UNDEFINED) then
    snd-msg(em-get-moduleid(Sid))
    . rec-msg(em-moduleid(Sid, ModuleId?))
  else
    ModuleId := UNDEFINED
  fi
endlet

process GetEditorByPath(Path: str, Sid: term?) is
  snd-msg(em-get-session-by-path(Path))
  .
  (
    rec-msg(em-session(Path, Sid?))
  +
    rec-msg(em-no-such-session(Path))
    . Sid := UNDEFINED
  )

process CheckSanity(Path: str, RequestedModuleId: term, Valid: bool?) is
let
  Available: bool,
  CurrentModuleId: term
in
  GetModuleByPath(Path, CurrentModuleId?)
  . 
  if equal(CurrentModuleId, UNDEFINED) then
    Valid := true
  else
    Valid := equal(CurrentModuleId, RequestedModuleId)
  fi
endlet

process GetModuleByExtension(Path: str, ModuleId: term?) is
let
  Extension: str
in
  snd-msg(io-get-path-extension(Path))
  . rec-msg(io-extension(Path, Extension?))
  . snd-msg(get-extension-modulename(Extension))
  .
  (
    rec-msg(extension-modulename(Extension, ModuleId?))
  +
    rec-msg(no-extension-modulename(Extension))
    . ModuleId := UNDEFINED
  )
endlet

process MoveCursorLeftAction(EditorId : term) is
  MoveCursor(EditorId, left)

process MoveCursorRightAction(EditorId : term) is
  MoveCursor(EditorId, right)

process MoveCursorUpAction(EditorId : term) is
  MoveCursor(EditorId, up)

process MoveCursorDownAction(EditorId : term) is
  MoveCursor(EditorId, down)

process MoveCursor(Sid: term, Direction: term) is
let
  Registered: bool
in
  IsStructureEditorRegistered(Sid, Registered?)
  .
  if equal(Registered, true) then
    snd-msg(se-move-cursor(Sid, Direction))
    . SynchronizeFocus(Sid)
  else
    tau
  fi
endlet

process EditLocation(Pid: int, Location: term) is
let
  Extension: str,
  Filename: str,
  Path: str,
  Prefix: str,
  Sid: term
in
  snd-msg(get-location-filename(Location))
  . rec-msg(location-filename(Path?))
  . snd-msg(em-get-session-by-path(Path))
  .
  (
    rec-msg(em-session(Path, Sid?))
    . snd-msg(te-editor-to-front(Sid))
    . snd-msg(session(Pid, Sid))
  +
    rec-msg(em-no-such-session(Path))
    . SplitFilename(Path, Filename?, Prefix?, Extension?)
    . snd-msg(start-editor(Extension, Path))
    . rec-msg(editor-started(Extension, Path))
    . snd-msg(em-get-session-by-path(Path))
    .
    (
      rec-msg(em-session(Path, Sid?))
      . snd-msg(session(Pid, Sid))
    +
      rec-msg(em-no-such-session(Path))
      . snd-msg(no-such-session(Pid))
    )
  )
endlet

process ShowOriginAction(EditorId : term) is
let
  Origin: term
in
  GetFocusOrigin(EditorId, Origin?)
  . if equal(Origin, no-origin) then
      DisplayMessage(EditorId, "No origin information available")
    else
      ShowAreaAction("Origin", Origin)
    fi
endlet
    
process ShowAreaAction(Message : str, Location : term) is
let
  Pid: int,
  Subject : term
in
  snd-msg(es-make-subject(Message, Location))
  . rec-msg(es-subject(Subject?))
  . create(ShowSubjectHandler(Subject), Pid?)
  . EditLocation(Pid, Location)
endlet

process ShowFeedbackLocation(Location : term) is
let
  Pid: int
in
  create(ShowErrorHandler(Location), Pid?)
  . EditLocation(Pid, Location)
endlet

process ShowSubjectHandler(Subject: term) is
let
  Pid: int,
  Sid: term
in
  Pid := process-id
  .
  (
    rec-msg(session(Pid, Sid?))
    . ShowSubject(Sid, Subject)
  +
    rec-msg(no-such-session(Pid))
  )
endlet

process ShowErrorHandler(Location: term) is
let
  Pid: int,
  Sid: term
in
  Pid := process-id
  .
  (
    rec-msg(session(Pid, Sid?))
    . ShowLocation(Sid, Location)
  +
    rec-msg(no-such-session(Pid))
  )
endlet

process CleanupEditTerm(Sid: term, ModuleId : term) is
  subscribe(em-session-deleted(Sid))
  . rec-note(em-session-deleted(Sid))
  /*. RemoveSummary("sglr", ModuleId)*/

process GetFocusOrigin(EditorId : term, Origin: term?) is
let
  Cursor : term
in
  snd-msg(se-get-cursor(EditorId))
  . rec-msg(se-cursor(EditorId, Cursor?))
  . snd-msg(pa-get-origin(Cursor))
  .
  (
    rec-msg(pa-origin(Origin?))
  +
    rec-msg(pa-no-origin)
    . Origin := no-origin
  )
endlet

process EditorPopup(Sid : term, EditorType: term, FocusSort: term) is
let
  MenuList : list
in
  snd-msg(cm-get-events(EditorType, FocusSort))
  . rec-msg(cm-events(MenuList?))
  . snd-msg(te-show-popup(Sid, MenuList)) 
endlet

#endif /* __EDITING__ */
