/*
  $Id$
 */

#include "sglr.idef"
#include "in-output.idef"
#include "open-modules.tb"
#include "file-creator.tb"
#include "module-db.idef"
#include "unparsePT.idef"
#include "get-parsetable.tb"
#include "set-parsetable.tb"
#include "dump-parsetable.tb"
#include "sdf2-language.tb"
#include "notification.tb"
#include "parsetablegen.idef"
#include "semantics-interface.tb"
#include "configmanager.idef"
#include "error-display.tb"
#include "standalone-pt-dumper.tb"
#include "standalone-status-display.tb"
#include "save-module.tb"

process META is
let
  Id      : term
in
  Id := process-id.
  (
    rec-msg(get-file-extensions) .
    snd-msg(set-file-extensions(syntax(".sdf"),rules(".asf"),term(".trm")))
  +
    rec-msg(get-rules-top-sort) .
    snd-msg(set-rules-top-sort(sort("Equations")))
  )*delta
endlet

toolbus(META, Parser, Unparser, Io, ConfigManager, StandalonePtDumper,
        ModuleDB, File-creator, AsfSdfChecker, DisplayErrors,
	Set-parsetable, GetParseTable, Open-Sdf2-Language, 
	Asf-Syntax, RemoveVars, Open-modules, PGen, DumpParseTable, 
        Status-display, AddAPISyn, Save-modules) 

