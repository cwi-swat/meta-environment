/*
  $Id$
 */

#include "abort.tb"
#include "sglr.idef"
#include "in-output.idef"
#include "open-modules.tb"
#include "file-creator.tb"
#include "module-db.idef"
#include "unparsePT.idef"
#include "get-parsetable.tb"
#include "set-parsetable.tb"
#include "dump-parsetable.tb"
#include "sdf2-language.tb"
#include "notification.tb"
#include "parsetablegen.idef"
#include "meta-interface.tb"
#include "configmanager.idef"
#include "standalone-pt-dumper.tb"
#include "standalone-status-display.tb"
#include "save-module.tb"

process META is
let
  Id      : term,
  Syntax  : str,
  Semantics : str,
  Term : str,
  Sort : term
in
  Id := process-id.
  (
    rec-msg(get-file-extensions) .
    snd-msg(file-extensions-hook).
    rec-msg(file-extensions-hook-result(Syntax?, Semantics?, Term?)).
    snd-msg(set-file-extensions(syntax(Syntax),rules(Semantics),term(Term)))
  +
    rec-msg(get-rules-top-sort) .
    snd-msg(semantics-top-sort-hook).
    rec-msg(semantics-top-sort-hook-result(Sort?)).
    snd-msg(set-rules-top-sort(Sort))
  )*delta
endlet

toolbus(META, Parser, Unparser, Io, ConfigManager, StandalonePtDumper,
        ModuleDB, File-creator, Meta-Interface,
	Set-parsetable, GetParseTable, Open-Sdf2-Language, 
	Open-modules, PGen, DumpParseTable, 
        Status-display, Save-modules 
#ifdef TIMEOUT
        , AbortMetaEnvironment
#endif
)
