/* $Id$ */       

/*{{{  process GetText(EditorId: term, Text: str?) */

process GetText(EditorId: term, Text: str?) is
  snd-msg(te-write-contents(EditorId))
  . snd-msg(te-get-contents(EditorId))
  . rec-msg(te-contents(EditorId, Text?))

/*}}}  */
/*{{{  process AnnotateTree(Tree: term, Filename: str, AnnotateTree: term?) */

process AnnotateTree(Tree: term, Filename: str, AnnotatedTree: term?) is
  snd-msg(add-posinfo-packed(Filename, Tree))
  . rec-msg(tree-with-pos-info(AnnotatedTree?))

/*}}}  */
process HasTextChanged(Sid: term, TextChanged: bool?) is
  snd-msg(te-is-modified(Sid))
  . rec-msg(te-is-modified(Sid, TextChanged?))

process ParseErrorToSummary(Error: term, Filename: str, Summary: term?) is
let
  Result: term
in
  snd-msg(es-add-filename-in-error(Filename, Error))
  . rec-msg(es-filename-in-error(Filename, Result?))
  . snd-msg(es-make-summary("sglr", Filename, [Result]))
  . rec-msg(es-summary(Summary?))
endlet

process ParseEditor(Sid: term, Table: term, Nonterminal: term) is
let
  Filename: str,
  Pid: int,
  StructureEditor: bool,
  Text: str,
  TextChanged: bool
in 
  IsStructureEditorRegistered(Sid, StructureEditor?)
  . HasTextChanged(Sid, TextChanged?)
  .
  if and(StructureEditor, not-equal(TextChanged, quote(true)))
  then
    snd-msg(parse-editor-ok(Sid))
  else
    GetFilename(Sid, Filename?)
    . snd-msg(ui-remove-feedback-summary("sglr", Filename))
    . GetText(Sid, Text?)
    . create(EditorParseHandler(Sid), Pid?)
    . ParseText(Pid, Text, Table, Nonterminal)
  fi
endlet

process EditorParseHandler(Sid: term) is
let
  AnnotatedTree: term,
  Error: term,
  Filename: str,
  Pid: int,
  ParseResult: term,
  Summary: term
in
  Pid := process-id
  . GetFilename(Sid, Filename?)
  .
  (
    rec-msg(parse-tree(Pid, ParseResult?))
    . AnnotateTree(ParseResult, Filename, AnnotatedTree?)
    . EditStructure(Sid, AnnotatedTree)
    . snd-msg(parse-editor-ok(Sid))
  +
    rec-msg(parse-forest(Pid, ParseResult?, Error?))
    . AnnotateTree(ParseResult, Filename, AnnotatedTree?)
    . EditStructure(Sid, AnnotatedTree)
    . ParseErrorToSummary(Error, Filename, Summary?)
    . ShowSummary(Sid, Summary)
    . snd-msg(ui-show-feedback-summary(Summary)) 
    . snd-msg(parse-editor-failed(Sid))
  +
    rec-msg(parse-error(Pid, Error?))
    . ParseErrorToSummary(Error, Filename, Summary?)
    . ShowSummary(Sid, Summary)
    . snd-msg(ui-show-feedback-summary(Summary)) 
    . snd-msg(parse-editor-failed(Sid))
  )
endlet

process ParseText(Pid: int, Text: str, Table: term, Nonterminal: term) is
let
  Error: term,
  ParseResult: term
in 
  snd-msg(sglr-parse(Text, Table, Nonterminal))
  .
  (
    rec-msg(sglr-parse-tree(ParseResult?))
    . snd-msg(parse-tree(Pid, ParseResult))
  +
    rec-msg(sglr-parse-forest(ParseResult?, Error?))
    . snd-msg(parse-forest(Pid, ParseResult, Error))
  +
    rec-msg(sglr-parse-error(Error?))
    . snd-msg(parse-error(Pid, Error))
  )
endlet
