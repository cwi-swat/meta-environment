/* $Id$ */

tool se is {
  command = "java-adapter -TB_HOST localhost -class nl.cwi.gipe.stred.SeTool -program 'java -ms32m -mx64m'"
}

process Structure-editor(TE: text-edit, Fid: str, Text: str, Language: str) is
let
  Id: term, SE: se, Fl: list, Foc: term, Loc: int, Str: str, FF: list,
  I: int, T: term, T1: term, Ch: int, Li: int, Co: int,
  Char: term, G: str, ErrList: list, Cycle: list
in
  Id := process-id.
/* We're not selective about start symbols yet */
  G := "" .
  snd-note(ui-status(stat(Id,"Starting structure editor..."))).
  execute(se, SE?).
  snd-eval(SE, newEditor(Fid, Text)).
  rec-value(SE,Fl?).
  Foc := first(Fl).
  snd-msg(TE,set-focus(Fid,Foc)).
  snd-note(ui-status(endstat(Id))). ( ( 
      rec-event(TE,insert(Fid, Loc?, Str?)).
      snd-eval(SE,insertChars(Fid, Loc, Str)).
      snd-ack-event(TE,insert(Fid, Loc, Str))
      +
      rec-event(TE,delete(Fid,Loc?)).
      snd-eval(SE,deleteChars(Fid, Loc)).
      snd-ack-event(TE,delete(Fid,Loc))
    ).
    rec-value(SE,Fl?).
    Foc := first(Fl).
    snd-msg(TE,set-focus(Fid, Foc))
    +
    rec-event(TE,parse(Fid)).
    snd-note(ui-status(stat(Id,"Parsing..."))).
    FF := []. (
      if not-equal(Fl,[]) then
        Foc:= first(Fl).
        snd-msg(TE,get-focus-text(Foc)).
        rec-msg(TE,focus-text(Str?)).
        snd-msg(Id,parse-string-as-asfix1(Language, G, Str)).(
          rec-msg(parse-result-asfix1(Id,parse-tree(T?))).
/*        printf("Replacement term: %t\n",T).*/
          snd-eval(SE,replaceFocus(Fid, T)).
          rec-value(SE,Fl?)
        + rec-msg(parse-result-asfix1(Id,parse-error(ErrList?,ambiguities(I?)))).
          printf("Parse of %s returned %d ambiguities",Str,I).
          printf("Term is: %t\n",T).
          FF :=join(FF,Foc)
        + rec-msg(parse-result-asfix1(Id,parse-error(ErrList?,cycle(Cycle?)))).
          printf("Parse of %s returned a cycle\n",Str).
          printf("Cycle is: %t\n",Cycle).
          FF :=join(FF,Foc)
        + rec-msg(parse-result-asfix1(Id,parse-error([ErrList?]))).
          printf("Error parsing %s\n",Str).
          printf("Error: %l\n", ErrList).
          FF := join(FF,Foc)
        )
        .
        snd-eval(SE,nextFocus(Fid)).
        rec-value(SE,Fl?)
      fi
    ) *
    if equal(Fl,[]) then
      if equal(FF,[]) then
        /* All parses succeeded */
        snd-msg(TE,clear-focus)
      else
        /* Some parses were ambiguous */
        snd-eval(SE,setFocus(Fid, FF)).
        rec-value(SE,Fl?).
        Foc := first(Fl).
        snd-msg(TE,set-focus(Fid,Foc))
      fi
    fi.
    /* Finished parsing operations */
    snd-note(ui-status(endstat(Id))).
    snd-ack-event(TE,parse(Fid))
    +
    rec-event(TE,get-focus(Fid,I?)).
    snd-eval(SE,getFocus(Fid, I)).
    rec-value(SE,Foc?).
    snd-msg(TE,set-focus(Fid,Foc)).
    snd-ack-event(TE,get-focus(Fid,I))
  ) *
  delta
endlet
