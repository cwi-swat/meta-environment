/* $Id$ */

tool se is {
/*  command = "java-adapter -class nl.cwi.gipe.stred.SeTool"*/
    command = "aap"
}

process Structure-editor(TE: text-edit, Fid: str, Text: str) is
let
Id: term, SE: se, Fl: list, Foc: term, Loc: int, Str: str, FF: list,
L: str, I: int, T: term, T1: term, Ch: int, Li: int, Co: int,
Char: term, G: str
in
  Id := process-id.
/* Only one language can currently be edited. It is: */
  L := "Pico".
/* We're not selective about start symbols yet */
  G := "" .
/* And here we'll tell the parser to open it */
  snd-msg(open-language(L,"/ufs/markvdb/Research/new-meta/sglr/tables/Risla.tbl")).
  execute(se, SE?).
  snd-eval(SE, newEditor(Fid, Text)).
  rec-value(SE,Fl?).
  Foc := first(Fl).
  snd-msg(TE,set-focus(Fid,Foc)). ( ( 
      rec-event(TE,insert(Fid, Loc?, Str?)).
      snd-eval(SE,insertChars(Fid, Loc, Str)).
      snd-ack-event(TE,insert(Fid, Loc, Str))
      +
      rec-event(TE,delete(Fid,Loc?)).
      snd-eval(SE,deleteChars(Fid, Loc)).
      snd-ack-event(TE,delete(Fid,Loc))
    ).
    rec-value(SE,Fl?).
    Foc := first(Fl).
    snd-msg(TE,set-focus(Fid, Foc))
    +
    rec-event(TE,parse(Fid)).
    FF := []. (
      if not-equal(Fl,[]) then
        Foc:= first(Fl).
        snd-msg(TE,get-focus-text(Foc)).
        rec-msg(TE,focus-text(Str?)).
        snd-msg(Id,parse-string(L, G, Str)).(( 
            rec-msg(Id,parse-result(parsetree(T?,I?))).
            if equal(I,0) then
              snd-msg(Id,a2toa1(T)).
              rec-msg(Id,converted(T1?)).
/*              printf("Replacement term: %t\n",T1).*/
              snd-eval(SE,replaceFocus(Fid, T1)).
              rec-value(SE,Fl?)
            else
              printf("Parse of %s returned %d ambiguities",Str,I).
              printf("Term is: %t\n",T).
              FF :=join(FF,Foc)
            fi
          ) 
          + ( 
            rec-msg(Id, parse-result(eof-error)).
            printf("EOF unexpected while parsing %s\n",Str).
            FF := join(FF,Foc)
          )
          + ( 
            rec-msg(Id, parse-result(parse-error([character(Ch?),line(Li?),col(Co?),char(Char?)]))).
            printf("Character %d unexpected in line %d, column %d\n",Ch,Li,Co).
            FF := join(FF,Foc)
          )
        ).
        snd-eval(SE,nextFocus(Fid)).
        rec-value(SE,Fl?)
      fi
    ) *
    if equal(Fl,[]) then
      if equal(FF,[]) then
        /* All parses succeeded */
        snd-msg(TE,clear-focus)
      else
        /* Some parses were ambiguous */
        snd-eval(SE,setFocus(Fid, FF)).
        rec-value(SE,Fl?).
        Foc := first(Fl).
        snd-msg(TE,set-focus(Fid,Foc))
      fi
    fi.
    /* Finished parsing operations */
    snd-ack-event(TE,parse(Fid))
    +
    rec-event(TE,get-focus(Fid,I?)).
    snd-eval(SE,getFocus(Fid, I)).
    rec-value(SE,Foc?).
    snd-msg(TE,set-focus(Fid,Foc)).
    snd-ack-event(TE,get-focus(Fid,I))
  ) *
  delta
endlet
