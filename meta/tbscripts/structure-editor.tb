/*

    Meta-Environment - An environment for language prototyping.
    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, 
                        The Netherlands. 

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

*/
/*
  $Id$
 */



process Structure-editor(TE: text-edit, Fid: str, Text: str, 
                         Language: str, IsTerm: str) is
let
  Id: term, 
  Fl: list, Foc: term, Loc: int, Str: str, FF: list,
  I: int, T: term, Ch: int, Li: int, Co: int,
  SdfTree : term,
  EqsTree : term,
  TrmTree : term,
  NormalFormTree : term,
  Char: term, 
  Nonterminal: str, 
  ErrList: list, Cycle: list, Src:str,
  Fun: str, Args: list, 
  Modules: list,
  LangOK: term
in
  Id := process-id.
  subscribe(disconnected(<term>)).
  subscribe(syntax-changed(Language)).
  snd-note(ui-status(stat(Id,"Starting structure editor..."))).
  snd-msg(start-se) .
  snd-msg(start-anno) .
  snd-msg(new-editor(Fid, Text)) .
  rec-msg(focus-list(Fl?)) .
  Foc := first(Fl).
  snd-msg(TE,set-focus(Fid,Foc)).
  snd-note(ui-status(endstat(Id))). 
  (
    ( 
      rec-event(TE,insert(Fid, Loc?, Str?)) .
      snd-msg(insert-chars(Fid, Loc, Str)) .
      snd-ack-event(TE,insert(Fid, Loc, Str))
      +
      rec-event(TE,delete(Fid, Loc?)) .
      snd-msg(delete-chars(Fid, Loc)) .
      snd-ack-event(TE,delete(Fid,Loc))
    ) .
    rec-msg(focus-list(Fl?)) .
    Foc := first(Fl).
    snd-msg(TE,set-focus(Fid, Foc))
    +
    rec-event(TE,menu-event("Meta-Environment", "Parse", Fid)) .
    /* If the language is Sdf2 then NO new parse table may be 
     * generated!
     * If the parse table can not be opened for some reason
     * we are unable to parse the text.
     * This code needs restructuring.
     */
    if equal(IsTerm,"sdf") then
      snd-msg(open-sdf2-language).
      (
        rec-msg(sdf2-language-opened).
        Nonterminal := "Module" .
	LangOK := true
      +
        rec-msg(sdf2-language-not-opened).
	LangOK := false
      )
    else
      if equal(IsTerm,"eqs") then
        snd-msg(set-parsetable(Language, eqs))
      else
        snd-msg(set-parsetable(Language, trm))
      fi .
      (
        rec-msg(parsetable-set(Language)).
        if equal(IsTerm,"eqs") then
          Nonterminal := "Equations"
        else
          Nonterminal := ""
        fi. 
	LangOK := true
      +
        rec-msg(parsetable-not-set(Language)).
	LangOK := false
      )
    fi.
    if equal(LangOK, true) then
	snd-note(ui-status(stat(Id,"Parsing..."))).
	FF := []. (
	  if not-equal(Fl,[]) then
	    Foc:= first(Fl).
	    snd-msg(get-anno("focusstatus", Foc)) .
	    rec-msg(annotation(T?)) .
	    if equal(dirty,T) then
	      snd-msg(TE,get-focus-text(Fid, Foc)).
	      rec-msg(TE,focus-text(Fid, Str?)).
	      snd-msg(Id,parse-string-as-asfix1(Language, Nonterminal, Str)).
              (
		rec-msg(parse-result-asfix1(Id,parse-tree(T?))).
		snd-msg(replace-focus(Fid, T)).
		rec-msg(focus-list(Fl?))
	      + (
                  rec-msg(parse-result-asfix1(Id,parse-error(ErrList?,plain))) 
                +
		  rec-msg(parse-result-asfix1(Id,parse-error(ErrList?,eof)))
                ).
		snd-msg(set-error-focus(Fid,Foc,ErrList)).
		FF := join(FF,Foc)
	      + rec-msg(parse-result-asfix1(Id,parse-error(ErrList?,
							   ambiguities(I?)))).
		printf("Parse of %s returned %d ambiguities",Str,I).
		printf("Term is: %t\n",T).
		FF :=join(FF,Foc)
	      + rec-msg(parse-result-asfix1(Id,parse-error(ErrList?,cycle(Cycle?)))).
		printf("Parse of %s returned a cycle\n",Str).
		printf("Cycle is: %t\n",Cycle).
		FF :=join(FF,Foc)
	      )
	    else 
	      tau
	    fi.
	    snd-msg(next-focus(Fid)) .
	    rec-msg(focus-list(Fl?))
	  fi
	) *
	if equal(Fl,[]) then
	  if equal(FF,[]) then
	    /* All parses succeeded */
	    if equal(IsTerm,"sdf") then
	      snd-msg(get-tree(Fid)) .
	      rec-msg(tree(SdfTree?)) .
	      snd-msg(update-module-in-db(SdfTree, Language)).
	      rec-msg(extra-modules(Modules?)).
	      snd-msg(open-modules(Modules)).
	      rec-msg(finished-opening-modules)
	    else
              if equal(IsTerm, "eqs") then
	        snd-msg(get-tree(Fid)) .
	        rec-msg(tree(EqsTree?)) .
	        snd-msg(update-eqs-tree-in-db(Language, tree(EqsTree))) .
		rec-msg(eqs-updated)
              else
	        /* Module-db needs no update in case of term. */
	        tau
              fi
	    fi .
	    snd-msg(TE,clear-focus(Fid))
	  else
	    /* Some parses were ambiguous */
	    snd-msg(set-focus(Fid, FF)) .
	    rec-msg(focus-list(Fl?))
	  fi
	fi.
	/* Finished parsing operations */
	snd-note(ui-status(endstat(Id)))
      else
        /* If parse table could not be opened, an error message is 
	 * generated.
	 */
        snd-note(ui-status(errorf("Unable to open parse table for \"%s\"",
				  [Language])))
      fi.
      snd-ack-event(TE,menu-event("Meta-Environment","Parse",Fid))
    +

    rec-event(TE,menu-event("Meta-Environment","Reduce",Fid)) .
    if equal(IsTerm, "term") then
      if equal(FF,[]) then
        snd-note(ui-status(stat(Id,"Rewriting..."))).
        snd-msg(get-tree(Fid)) .
        rec-msg(tree(TrmTree?)) .
        snd-msg(rewrite(Language, TrmTree)).
        (
          rec-msg(rewrite-result(NormalFormTree?)) .
	  snd-msg(unparse(NormalFormTree)).
	  rec-msg(unparsed-text(Src?)).
	  printf("\nNormal form is:\n%s\n", Src)
        +
          rec-msg(rewrite-errors(ErrList?)) .
	  snd-msg(display-rewrite-errors(ErrList))
        )
      else
        snd-note(ui-status(error("Please parse term before reducing")))
      fi .
      snd-note(ui-status(endstat(Id)))
    else
      tau
    fi .
    snd-ack-event(TE,menu-event("Meta-Environment","Reduce",Fid))
    +
    rec-event(TE,get-focus(Fid,I?)).
    snd-msg(get-focus(Fid, I)) .
    rec-msg(focus(Foc?)) .
    snd-msg(TE,set-focus(Fid, Foc)) .
    snd-msg(set-focus(Fid, Foc)) .
    rec-msg(focus-list(Fl?)) .
    snd-ack-event(TE,get-focus(Fid,I))
    +
    rec-event(TE,menu-event("Meta-Environment","Show Tree", Fid)).
    printf("Tree display not yet implemented\n").
    snd-ack-event(TE,menu-event("Meta-Environment","Show Tree",Fid))
    +
    /*
    rec-event(TE,menu-event("Meta-Environment","Generate ParseTable", Fid)).
    snd-msg(set-parsetable(Language)).
    rec-msg(parsetable-set(Language)).
    snd-ack-event(TE,menu-event("Meta-Environment","Generate ParseTable", Fid))
    +
    */
    rec-event(TE,menu-event("Move", Str?, Fid)).
    snd-msg(move-focus(Fid, Str)) .
    rec-msg(focus-list(Fl?)) .
    Foc := first(Fl).
    snd-msg(TE,set-focus(Fid,Foc)).
    snd-ack-event(TE,menu-event("Move",Str,Fid))
    +
    rec-note(syntax-changed(Language)).
    snd-msg(invalidate-tree(Fid)) .
    rec-msg(focus-list(Fl?)) .
    Foc := first(Fl).
    snd-msg(TE,clear-focus(Fid)).
    snd-msg(TE,set-focus(Fid,Foc))
  ) *
  rec-note(disconnected(TE))
endlet
