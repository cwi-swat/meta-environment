/*

    Meta-Environment - An environment for language prototyping.
    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, The Netherlands. 

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

*/
/* $Id$
   Get a parsetable for language X
*/

process Set-parsetable is
let
  Module: str, Table: str, 
  Time: term, Id: term,
  NoTable : term
in
Id := process-id.

( 
  rec-msg(set-parsetable(Module?)) .
  NoTable := false.
  snd-msg(get-table-from-db(Module)) .
  (
    rec-msg(table(Table?))
  +
    rec-msg(no-table) .
    snd-msg(generate-parsetable(Module)) .
    (
	rec-msg(parsetable(Table?)) .
    	snd-msg(get-table-timestamp(Module)) .
    	rec-msg(table-timestamp(Time?)) .
    	snd-msg(add-table-to-db(Module,Table,Time)) .
    	rec-msg(done)
     +
	rec-msg(no-parsetable(Module)).
        NoTable := true
    )
  ).
  if equal(NoTable, true) then
    	snd-msg(parsetable-not-set(Module))
  else
  	snd-msg(reopen-language(Module,Table)) .
  	(
    	    rec-msg(language-opened(Module)) .
	    snd-msg(parsetable-set(Module))
	  +
	    rec-msg(language-not-opened(Module)) .
	    snd-msg(parsetable-not-set(Module))
  	)
  fi
) *
delta
endlet
