/*

    Meta-Environment - An environment for language prototyping.
    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, 
                        The Netherlands. 

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

*/
/* $Id$
   Get a parsetable for language X
*/


/* get the table from the database or create a new table */
process Set-parsetable is
let
  ModuleName : str, 
  TableType  : term,
  Table      : str,
  Id         : int
in
Id := process-id.
( 
  rec-msg(set-parsetable(ModuleName?, TableType?)) .
  snd-msg(get-table-from-db(ModuleName, TableType)) .
  (
    rec-msg(table(Table?)).
    ReopenLanguage(ModuleName, Table)
  +
    rec-msg(no-table) .
    snd-note(ui-status(stat(Id, "Generating parsetable..."))).
    MakeTable(ModuleName, TableType).
    snd-note(ui-status(endstat(Id)))
  )
) *
delta
endlet

/* add asf syntax and generate a parse table */
process MakeTable(ModuleName : str, TableType : term) is
let
  Syntax    : term,
  Table     : str,
  Extension : str,
  TimeStamp : term
in
  snd-msg(get-all-sdf2-definitions(ModuleName)).
  (
    rec-msg(syntax(Syntax?)).

    snd-msg(make-asf-syntax(ModuleName, Syntax, TableType)).
    rec-msg(asf-syntax(Syntax?)).

    if equal(TableType, eqs) then
       Extension := "eqs.tbl"
    else
       Extension := "trm.tbl"
    fi.
    
    snd-msg(generate-parsetable(Syntax, ModuleName, Extension)).
    rec-msg(parsetable(Table?)).

    snd-msg(get-table-timestamp(ModuleName)).
    rec-msg(table-timestamp(TimeStamp?)).
    snd-msg(add-parse-table-to-db(ModuleName, Table, TableType, TimeStamp)).
    rec-msg(parse-table-added).

    ReopenLanguage(ModuleName, Table)
    +
    rec-msg(no-syntax).
    snd-msg(parsetable-not-set(ModuleName))
  )
endlet

/* Ask the parser to reopen the language */
process ReopenLanguage(ModuleName : str, Table : str) is
  snd-msg(reopen-language(ModuleName, Table)).
  (
    rec-msg(language-opened(ModuleName)).
    snd-msg(parsetable-set(ModuleName))
    +
    rec-msg(language-not-opened(ModuleName)).
    snd-msg(parsetable-not-set(ModuleName))
  )
