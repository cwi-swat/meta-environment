/*
  $Id$
 */

#include "abort.tb"
#include "sglr.idef"
#include "in-output.idef"
#include "open-modules.tb"
#include "file-creator.tb"
#include "module-db.idef"
#include "unparsePT.idef"
#include "se.idef"
#include "gen.tb"
#include "get-parsetable.tb"
#include "set-parsetable.tb"
#include "dump-parsetable.tb"
#include "sdf2-language.tb"
#include "notification.tb"
#include "parsetablegen.idef"
#include "meta-interface.tb"
#include "configmanager.idef"
#include "standalone-term-editor.tb"
#include "standalone-status-display.tb"
#include "save-module.tb"
#include "text-editor.idef"
#include "editor-creator.tb"
#include "editor-manager.idef"
#include "edit-syntax.tb"
#include "edit-equations.tb"
#include "edit-term.tb"
#include "parse-focusses.tb"
#include "parse-utils.tb"
#include "query.tb"
#include "query-tool.idef"
#include "apply-function.idef"
#include "process-eqs.tb"
#include "restorebrackets.idef"
#include "restore-term-brackets.tb"
#include "addPosInfo.idef" 

process META is
let
  Id      : term,
  Syntax  : str,
  Semantics : str,
  Term : str,
  Sort : term
in
  Id := process-id.
  (
    rec-msg(get-file-extensions) .
    snd-msg(file-extensions-hook).
    rec-msg(file-extensions-hook-result(Syntax?, Semantics?, Term?)).
    snd-msg(set-file-extensions(syntax(Syntax),rules(Semantics),term(Term)))
  +
    rec-msg(get-rules-top-sort) .
    snd-msg(semantics-top-sort-hook).
    rec-msg(semantics-top-sort-hook-result(Sort?)).
    snd-msg(set-rules-top-sort(Sort))
  +
    rec-msg(get-application-status) .
    snd-msg(status(standalone))
  )*delta
endlet

toolbus(META, Parser, Unparser, Io, AddPosInfo,
        ConfigManager, StandAloneAsfEditor,
        ParseFocusses, EditorCreator, ModuleDB, ProcessEqs, GetEquations,
	File-creator, Meta-Interface,
	SE, Set-parsetable, GetParseTable, Open-Sdf2-Language, 
	Open-modules, PGen, Notify-about-changed-modules, ApplyFunc,
	GenAdapt, Status-display, Save-modules, Query, QueryTool,
	RestoreTermBrackets, RestoreBrackets
#ifdef TIMEOUT
        , AbortMetaEnvironment
#endif
)
