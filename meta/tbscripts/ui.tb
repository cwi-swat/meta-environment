/*

    Meta-Environment - An environment for language prototyping.
    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, The Netherlands. 

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

*/
/*
  $Id$
 */

tool user-interface is {
  command = "graph-browser"
}

process Ui is
let
  SD      : int,
  Om      : int,
  EM      : int,
  ET      : int,
  UI      : user-interface,
  Id      : term,
  Name    : term,
  Str     : term,
  Str1    : term,
  Mod     : term,
  Pairs   : list,
  Mods    : list,
  ModName : str,
  T       : str,
  FT      : str,
  Path    : str,
  ErrMsg  : str
in
  Id := process-id.
  subscribe(import-graph(<term>,<term>)).
  execute(user-interface,UI?).
  create(Status-display(UI),SD?).
  ( 
    /* Create a completely new module by a user */
    (
      rec-event(UI, new-module(Str?)).
      snd-msg(create-new-module(Str)).
      (
        rec-msg(module-not-created(ErrMsg?)).
	snd-note(ui-status(errorf("%s",[ErrMsg])))
      +
        rec-msg(module-created).
	snd-msg(open-modules([Str])). 
	( rec-note(import-graph(Mods?,Pairs?)).
          snd-do(UI,new-graph(Mods,Pairs))
        + rec-msg(cannot-open-module(ModName?)).
	  snd-note(ui-status(errorf("cannot open module \"%s\"",[ModName])))
        )*
        rec-msg(finished-opening-modules).
	snd-do(UI,finished-opening-modules(Str))
      ).
      snd-ack-event(UI, new-module(Str))
    )
    +
    /* Add a new module by a user */
    ( rec-event(UI, open-module(Str?)).
      snd-note(online-help(open-module)).
      snd-msg(open-modules([Str])).
      ( rec-note(import-graph(Mods?,Pairs?)).
        snd-do(UI,new-graph(Mods,Pairs))
      + rec-msg(cannot-open-module(ModName?)).
	snd-note(ui-status(errorf("cannot open module \"%s\"",[ModName])))
      )*
      rec-msg(finished-opening-modules).
      snd-do(UI,finished-opening-modules(Str)).
      snd-ack-event(UI, open-module(Str))
    ) +
    ( rec-msg(cannot-open-module(ModName?)).
      snd-note(ui-status(errorf("cannot open module \"%s\"",[ModName])))
    ) +
    ( rec-event(UI,delete-module(Str?)).
      snd-msg(close-module(Str)).
      rec-msg(closed-module(Str)).
      snd-do(UI,delete-module(Str)) .
      snd-ack-event(UI, delete-module(Str))
    ) +
    ( rec-event(UI,save-module(Str?)).
      snd-msg(save-module(Str)).
      rec-msg(saved-module(Str)).
      snd-ack-event(UI,save-module(Str))
    ) +
    ( rec-event(UI,edit-module(ModName?)).
      create(Edit-module(ModName),EM?).
      snd-ack-event(UI,edit-module(ModName))
    ) +
    ( rec-event(UI,edit-eqs-module(ModName?)).
      create(Edit-equations(ModName),EM?).
      snd-ack-event(UI,edit-eqs-module(ModName))
    ) +
    ( rec-event(UI,revert-module(ModName?)).
      snd-msg(revert-module(ModName)).           
      rec-msg(reverted-module(ModName?)).
      snd-ack-event(UI,revert-module(ModName))
    ) +
    ( rec-event(UI,get-module-info(Str?)).          /* Not yet implemented */ 
      snd-do(UI,module-info(Str,[["sorry","not implemented"],
          ["example",""],["dir","/home/leon/asf+sdf/spec/"],["size","10kb"]])).
      snd-ack-event(UI,get-module-info(Str))
    ) +
    ( rec-event(UI,save-all).                 
      snd-msg(save-all).
      rec-msg(saved).
      snd-ack-event(UI,save-all)
    ) +
    ( rec-event(UI,revert-all).                     /* Not yet implemented */
      snd-note(ui-status(error("TB: not implemented: revert-all"))).
      snd-ack-event(UI,revert-all)
    ) +
    ( rec-event(UI,clear-all).
      snd-msg(clear-all).
      rec-msg(cleared-all).
      snd-ack-event(UI,clear-all)
   ) +
   ( rec-event(UI,compile-module(Str?)).
     snd-note(ui-status(stat(Id,"Compiling ..."))).
     snd-msg(compile-module(Str)).
     rec-msg(compile-done).
     snd-note(ui-status(endstat(Id))).
     snd-ack-event(UI,compile-module(Str))
   ) +
   ( rec-event(UI,parse-equations(Str?)).
     snd-msg(process-eqs(Str)).
     rec-msg(eqs-processed(Str1?)).
     snd-ack-event(UI,parse-equations(Str))
   ) +
   ( rec-event(UI,edit-term(ModName?,Str?)).
     create(Edit-term(ModName,Str),ET?).
     snd-ack-event(UI,edit-term(ModName,Str))
   ) +
   ( rec-event(UI,online-help).
     snd-msg(online-help-wanted).
     rec-msg(done).
     snd-ack-event(UI,online-help)
   ) +
   ( rec-event(UI,no-online-help).
     snd-msg(no-online-help-wanted).
     rec-msg(done).
     snd-ack-event(UI,no-online-help)
   ) +
   ( rec-note(import-graph(Mods?,Pairs?)).
     snd-do(UI,new-graph(Mods,Pairs))
   )
  ) *
  ( rec-event(UI,button(quit))
  + rec-disconnect(UI)) .
  shutdown("Asf+Sdf Meta-Environment exiting")
endlet
