/* This file contains the implementation of a small stack language.
 *
 * The stack operations are retrieved from the configuration manager,
 * then for each primitive Meta-Environment operation in the button
 * language there is a handler. Arguments are popped of the stack before
 * calling Meta-Environment functionality, the result is sometimes pushed
 * back on the stack. 
 *
 * The interpreter stops when all actions are performed or an error has
 * occurred.
 */

process ButtonActionReceiver is
let
  ActionEvent : term,
  EditorType : term,
  ModuleName : str,
  Actions    : list,
  EditorId   : term,
  Arguments  : list
in
  (
    rec-msg(extra-button-action(ActionEvent?, Arguments?, 
                                EditorType?, ModuleName?,
                                EditorId?)) .
    snd-msg(get-button-actions(ActionEvent, EditorType, ModuleName)).
    rec-msg(button-actions(ActionEvent, EditorType, ModuleName, Actions?)).
    PerformButtonActions(EditorId, Arguments, Actions) 
  )* delta
endlet

process PerformButtonActions(EditorId : term, StackArgs : list, Actions : list) is
let
  ButtonActions : list,
  ButtonAction  : term,
  FunName       : str,
  Stack         : list
in
  ButtonActions := quote(Actions) .
  Stack := quote(StackArgs) .
  (
    if not-equal(ButtonActions, []) then
      ButtonAction := first(ButtonActions) .
      ButtonActions := next(ButtonActions) .
      FunName := fun(ButtonAction) .
      if equal(FunName, "if-equal") then
        IfEqual(ButtonAction, Stack, ButtonActions, Stack?, ButtonActions?)
      else
        snd-msg(ButtonAction, Stack, EditorId) .
        (
          rec-msg(stack(Stack?), EditorId)
        +
          rec-msg(empty-stack, EditorId) .
          ButtonActions := []
        +
          rec-msg(error-stack, EditorId) .
          ButtonActions := [].
          snd-note(ui-status(
            errorf("An error occurred while processing the action: %t",
                   [ButtonAction])))
        )
      fi
    fi
  )*
  if equal(ButtonActions, []) then
    tau
  fi
endlet

process StackIsEmpty(Stack : list, Empty : term?) is
  if equal(Stack, []) then
    Empty := true
  else
    Empty := false
  fi

process StackPopTerm(Stack : list, NewStack : list?, Top : term?) is
  Top := first(Stack).
  NewStack := next(Stack)

process StackPopString(Stack : list, NewStack : list?, Top : str?) is
let
  TopTerm : term
in
  StackPopTerm(Stack,NewStack?,TopTerm?).
  Top := first(args(TopTerm))
endlet

process StackPushTerm(Stack : list, NewStack : list?, Top : term) is
  NewStack := join(Top, Stack)

process StackPushString(Stack : list, NewStack : list?, Top : str) is
  StackPushTerm(Stack,NewStack?,quote(str(Top)))
 
process StackPushInt(Stack : list, NewStack : list?, Top : int) is
  StackPushTerm(Stack,NewStack?, quote(int(Top)))

process StackPushFile(Stack : list, NewStack : list?, Top : str) is
  StackPushTerm(Stack,NewStack?, quote(file(Top)))
 
process StackPushPath(Stack : list, NewStack : list?, Top : str) is
  StackPushTerm(Stack,NewStack?, quote(path(Top)))

process ReturnSuccess(EditorId : term, Stack : list) is
  snd-msg(stack(Stack), EditorId)

process ReturnFailed(EditorId : term, Stack : list) is
  snd-msg(error-stack, EditorId)

process ReturnAbort(EditorId : term, Stack : list) is
  snd-msg(empty-stack, EditorId)

process ButtonActionExecutor is
let
  ModuleName : str,
  ArgList : list,
  Stack : list,
  EditorId : term,
  EditorId2 : term,
  STree : term,
  Focus : term,
  SList	: list,
  RTree : term,
  Error : term,
  Trees : list,
  ActionEvent : term,
  PosInfo : term,
  SortName : str,
  FilePath : str,
  NewModuleName : str,
  FileName : str,
  EditorName : str,
  FuncName : str,
  FunSym : str,
  String : str,
  NrOfArgs : int,
  Location : int,
  Integer : int,
  Query : str,
  Action : str,
  OutStr : str,
  InStr : str,
  Name : str,
  ExecName : str,
  Path : str,
  Tree : term,
  Text : str,
  TimeStamp : int,
  ErrorMessage : str,
  Mode : term,
  Empty : term,
  Ext : str
in
   (
      rec-msg(apply(FuncName?, SortName?, NrOfArgs?), Stack?, EditorId?) .
      ArgList := [] .
      (
        if greater(NrOfArgs, 0) then
          StackPopTerm(Stack,Stack?,STree?).
          NrOfArgs := sub(NrOfArgs, 1) .
          ArgList := join(ArgList, STree)
        fi 
      ) *
      if equal(NrOfArgs, 0) then
        tau
      fi .
      snd-msg(apply-function(FuncName, SortName, ArgList)) .
      rec-msg(tree(RTree?)) .
      if not-equal(RTree, error-tree) then
        StackPushTerm(Stack,Stack?,RTree).
        ReturnSuccess(EditorId,Stack)
      else
        ReturnFailed(EditorId, Stack)
      fi
      +
      rec-msg(rewrite(ExecName?), Stack?, EditorId?) .
      StackPopTerm(Stack,Stack?,STree?).
      snd-msg(rewrite(ExecName, STree)) .
      rec-msg(normalform(ExecName, RTree?)) .
      StackPushTerm(Stack,Stack?,RTree).
      ReturnSuccess(EditorId,Stack)
      +
      rec-msg(activate(Action?), Stack?, EditorId?) .
      snd-msg(gen-adapter-activate(EditorId, Action)).
      rec-msg(gen-adapter-result(EditorId, OutStr?)).
      if not-equal(OutStr, "") then
        StackPushString(Stack,Stack?,OutStr)
      else
        tau
      fi.
      ReturnSuccess(EditorId,Stack)
    +
      rec-msg(activate-given-tree(Action?), Stack?, EditorId?) .
      StackPopTerm(Stack,Stack?,STree?).
      FunSym := fun(STree) .
      if not-equal(FunSym, "str") then
        snd-msg(gen-adapter-term-to-string-evaluate(EditorId,Action,STree)).
        rec-msg(gen-adapter-term-to-string-result(EditorId,OutStr?))
      else
        InStr := first(args(STree)) .
        snd-msg(gen-adapter-string-to-string-evaluate(EditorId,Action,InStr)).
        rec-msg(gen-adapter-string-to-string-result(EditorId,OutStr?))
      fi.
      if not-equal(OutStr, "") then
          StackPushString(Stack,Stack?,OutStr)
      else
          tau
      fi.
      ReturnSuccess(EditorId,Stack)
    +
      rec-msg(execute-action(Action?), Stack?, EditorId?) .
      StackPopTerm(Stack,Stack?,STree?).
      snd-msg(gen-adapter-term-evaluate(EditorId,Action, STree)).
      rec-msg(gen-adapter-term-result(EditorId,RTree?)).
      if not-equal(RTree, error-tree) then
        StackPushTerm(Stack,Stack?,RTree).
        ReturnSuccess(EditorId,Stack)
      else
        ReturnFailed(EditorId,Stack)
      fi
    +
    rec-msg(move-left, Stack?, EditorId?).
    snd-msg(move-focus(EditorId,"Left")) .
    ReturnSuccess(EditorId,Stack)
    +
    rec-msg(move-right, Stack?, EditorId?).
    snd-msg(move-focus(EditorId,"Right")) .
    ReturnSuccess(EditorId,Stack)
    +
    rec-msg(move-up, Stack?, EditorId?).
    snd-msg(move-focus(EditorId,"Up")) .
    ReturnSuccess(EditorId,Stack)
    +
    rec-msg(move-down, Stack?, EditorId?).
    snd-msg(move-focus(EditorId,"Down")) .
    ReturnSuccess(EditorId,Stack)
    +
    rec-msg(parse-action, Stack?, EditorId?) .
    StackPopString(Stack,Stack?,ModuleName?) .
    ParseTerm(EditorId, ModuleName) .
    ReturnSuccess(EditorId,Stack)
    +
    rec-msg(parse-syntax-action, Stack?, EditorId?).
    StackPopString(Stack,Stack?,ModuleName?) .
    ParseSyntax(EditorId,ModuleName,sdf).
    ReturnSuccess(EditorId,Stack)
    +
    rec-msg(parse-equations-action, Stack?, EditorId?).
    StackPopString(Stack,Stack?,ModuleName?) .
    ParseEquations(EditorId,ModuleName).
    ReturnSuccess(EditorId,Stack)
    +
    rec-msg(unparse, Stack?, EditorId?) .
    StackPopTerm(Stack,Stack?,STree?) .
    UnParseTerm(STree, String?) .
    StackPushString(Stack, Stack?, String) .
    ReturnSuccess(EditorId,Stack)
    +
    rec-msg(get-root, Stack?, EditorId?) .
    StackPopString(Stack, Stack?, ModuleName?) .
    GetTree(EditorId, ModuleName, RTree?) .
    if not-equal(RTree, error-tree) then
      StackPushTerm(Stack,Stack?,RTree).
      ReturnSuccess(EditorId,Stack)
    else
      ReturnFailed(EditorId,Stack)
    fi
      +
        rec-msg(set-root, Stack?, EditorId?) .
        StackPopTerm(Stack,Stack?,STree?) .
        ReplaceRoot(EditorId, STree) .
        ReturnSuccess(EditorId,Stack)
      +
        rec-msg(get-focus, Stack?, EditorId?) .
        GetFocus(EditorId, RTree?) .
        if not-equal(RTree, error-tree) then
          StackPushTerm(Stack,Stack?,RTree) .
          ReturnSuccess(EditorId,Stack)
        else
          ReturnFailed(EditorId,Stack)
        fi
      +
        rec-msg(set-focus, Stack?, EditorId?) .
        StackPopTerm(Stack,Stack?,STree?).
        ReplaceFocus(EditorId, STree) .
        ReturnSuccess(EditorId,Stack)
      +
        rec-msg(check-sort, Stack?, EditorId?) .
        StackPopString(Stack, Stack?, SortName?) .
        StackPopTerm(Stack, Stack?, STree?).
        CheckTreeSort(STree, SortName, RTree?) .
        if not-equal(RTree, error-tree) then
          StackPushTerm(Stack, Stack?, RTree) .
          StackPushTerm(Stack, Stack?, quote(true)) .
          ReturnSuccess(EditorId, Stack)
        else
          StackPushTerm(Stack, Stack?, STree) .
          StackPushTerm(Stack, Stack?, quote(false)) .
          ReturnSuccess(EditorId, Stack)
        fi
      +
        rec-msg(reduce, Stack?, EditorId?) .
        StackPopString(Stack,Stack?,ModuleName?) .
        StackPopTerm(Stack,Stack?,STree?) .
        ReduceTerm(STree, ModuleName, RTree?) .
        if not-equal(RTree, error-tree) then
          StackPushTerm(Stack,Stack?,RTree) .
          ReturnSuccess(EditorId,Stack)
        else
          ReturnAbort(EditorId,Stack)
        fi
      +
        rec-msg(run-asf-tests, Stack?, EditorId?) .
	StackIsEmpty(Stack, Empty?) .
	if equal(Empty, true) then
	  ReturnSuccess(EditorId, Stack)
        else
          StackPopString(Stack,Stack?,ModuleName?) .
          StackPopTerm(Stack,Stack?,STree?) .
          snd-msg(run-asf-tests(ModuleName)) .
          ReturnSuccess(EditorId,Stack)
        fi
      +
        rec-msg(pretty-print, Stack?, EditorId?) .
        StackPopString(Stack,Stack?,ModuleName?) .
        StackPopTerm(Stack,Stack?,STree?) .
	PrettyPrintTerm(ModuleName, STree, RTree?) .
        if not-equal(RTree, error-tree) then
          StackPushTerm(Stack,Stack?,RTree) .
          ReturnSuccess(EditorId,Stack)
        else
          ReturnAbort(EditorId,Stack)
        fi
      +
        rec-msg(get-other-focus(ModuleName?), Stack?, EditorId?) .
        StackPopTerm(Stack,Stack?,STree?).
        FunSym := fun(STree) .
        if equal(FunSym, "path") then
          FilePath := first(args(STree)) .
          snd-msg(check-editor-id(FilePath, ModuleName)) .
          (
            rec-msg(existing-editor(EditorId2?)).
            GetFocus(EditorId2, RTree?) .
            if not-equal(RTree, error-tree) then
              StackPushTerm(Stack,Stack?,RTree) .
              ReturnSuccess(EditorId,Stack)
            else
              snd-note(ui-status(messagef("please set a focus %s", 
                                          [FilePath]))) .
              ReturnAbort(EditorId,Stack)
            fi
          +
            rec-msg(non-existing-editor(FilePath?)).
            snd-note(ui-status(messagef("editor for %s not active", 
                                        [FilePath]))) .
            ReturnAbort(EditorId,Stack)
          )
        else
          ReturnFailed(EditorId,Stack)
        fi
      +
        rec-msg(push-editor-name, Stack?, EditorId?) .
        snd-msg(get-editor-filename(EditorId)) .
        rec-msg(editor-filename(FileName?)) .
        StackPushString(Stack,Stack?,FileName) .
        ReturnSuccess(EditorId,Stack)
      +
        rec-msg(activate-editor, Stack?, EditorId?) .
        StackPopString(Stack,Stack?,ModuleName?) .
        StackPopString(Stack,Stack?,FileName?) .
        StackPopTerm(Stack,Stack?,STree?) .
        FunSym := fun(STree) .
        if equal(FunSym, "str") then
          String := first(args(STree)) .
          ActivateEditorWithString(String, ModuleName, FileName)
        else
          ActivateEditorWithTree(STree, ModuleName, FileName) 
        fi .    
        ReturnSuccess(EditorId,Stack)
      +
	rec-msg(close-editor, Stack?, EditorId?) .
        StackPopString(Stack,Stack?,ModuleName?) .
        StackPopString(Stack,Stack?,FileName?) .
	CloseEditor(ModuleName, FileName) .
	ReturnSuccess(EditorId, Stack)
      + 
        rec-msg(send, Stack?, EditorId?) .
        StackPopTerm(Stack,Stack?,STree?) .
        snd-msg(tree-send(STree)) .
        snd-msg(stack(Stack), EditorId?)
      +
        rec-msg(receive, Stack?, EditorId?) .
        rec-msg(tree-send(RTree?)) .
        StackPushTerm(Stack,Stack?,RTree) .
        ReturnSuccess(EditorId,Stack)
      +
        rec-msg(parse(ModuleName?, SortName?), Stack?, EditorId?) .
        StackPopTerm(Stack,Stack?,STree?) .
          FunSym := fun(STree) .
          if or(equal(FunSym, "file"), equal(FunSym, "path")) then
            FilePath := first(args(STree)) .
            GetTextFromFile(FilePath, String?) .
            ParseText(String, ModuleName, SortName, RTree?, Error?) .
            ProcessParseError(FilePath, Error, "")
          else 
            if equal(FunSym, "str") then
              String := first(args(STree)) .
              ParseText(String, ModuleName, SortName, RTree?, Error?) .
              ProcessParseError(String, Error, "")
            else
              RTree := error-tree
            fi
          fi .
        if not-equal(RTree, error-tree) then
          StackPushTerm(Stack,Stack?,RTree) .
          ReturnSuccess(EditorId,Stack)
        else
          ReturnAbort(EditorId,Stack)
        fi
      +
        rec-msg(get-argument(NrOfArgs?), Stack?, EditorId?) .
        StackPopTerm(Stack,Stack?,STree?) .
        StackPushTerm(Stack,Stack?,STree) .
        snd-msg(get-argument-given-number(STree, NrOfArgs)) .
        rec-msg(tree(RTree?)) .
        if not-equal(RTree, error-tree) then
          StackPushTerm(Stack,Stack?,RTree) .
          ReturnSuccess(EditorId,Stack)
        else
          ReturnFailed(EditorId,Stack)
        fi
      +
        rec-msg(exists(FileName?), Stack?, EditorId?) .
        snd-msg(io-exists-file(FileName)) .
        (
          rec-msg(io-file-exists) .
          ReturnSuccess(EditorId,Stack)
        +
          rec-msg(io-file-not-exists) .
          snd-note(ui-status(errorf("%s does not exist", 
                                    [FileName]))) .
          ReturnAbort(EditorId,Stack)
        )
      +
        rec-msg(locate(FileName?), Stack?, EditorId?) .
        snd-msg(locate-file(FileName)) .
        (
          rec-msg(file-location(FileName, FilePath?)) .
          StackPushPath(Stack,Stack?,FilePath) .
          ReturnSuccess(EditorId,Stack)
        +
          rec-msg(file-not-exists(FileName)) .
          snd-note(ui-status(errorf("%s does not exist", 
                                    [FileName]))) .
          ReturnAbort(EditorId,Stack)
        )
      +
        rec-msg(push-active-module, Stack?, EditorId?) .
        subscribe(delete-editor(EditorId)) .
        snd-msg(get-editor-modulename(EditorId)) .
        (
          rec-msg(editor-modulename(EditorId,ModuleName?)) .
          StackPushString(Stack,Stack?,ModuleName) .
          ReturnSuccess(EditorId,Stack)
        +
          rec-note(delete-editor(EditorId)) .
          ReturnFailed(EditorId, Stack)
        )
      +
        rec-msg(push-modulename(String?), Stack?, EditorId?) .
        StackPushString(Stack,Stack?,String) .
        ReturnSuccess(EditorId,Stack)
      +
        rec-msg(push-filename(FileName?), Stack?, EditorId?) .
        StackPushFile(Stack,Stack?,FileName) .
        ReturnSuccess(EditorId,Stack)
      +
        rec-msg(push-string(String?), Stack?, EditorId?) .
        StackPushString(Stack,Stack?,String) .
        ReturnSuccess(EditorId,Stack)
      +
        rec-msg(push-integer(Integer?), Stack?, EditorId?) .
        StackPushInt(Stack,Stack?,Integer) .
        ReturnSuccess(EditorId,Stack)
      +
        rec-msg(push-term(Tree?), Stack?, EditorId?) .
        StackPushTerm(Stack,Stack?, Tree) .
        ReturnSuccess(EditorId,Stack)
      +
        rec-msg(message(String?), Stack?, EditorId?) .
        snd-note(ui-status(messagef("%s", [String]))) .
        ReturnSuccess(EditorId,Stack)
      +
        rec-msg(unpack-tree, Stack?, EditorId?) .
        StackPopTerm(Stack,Stack?,STree?).
        snd-msg(io-unpack-term(STree)) .
	rec-msg(io-term(RTree?)) .
        StackPushTerm(Stack, Stack?, RTree) .
        ReturnSuccess(EditorId,Stack)
      +
        rec-msg(pack-tree, Stack?, EditorId?) .
        StackPopTerm(Stack,Stack?,STree?).
        snd-msg(io-pack-term(STree)) .
	rec-msg(io-term(RTree?)) .
        StackPushTerm(Stack, Stack?, RTree) .
        ReturnSuccess(EditorId,Stack)
      +
        rec-msg(show-tree, Stack?, EditorId?) .
        StackPopTerm(Stack,Stack?,STree?).
        StackPopString(Stack,Stack?, ModuleName?) .
        ShowTree(ModuleName, STree) .
        ReturnSuccess(EditorId,Stack)
      +
        rec-msg(show-area, Stack?, EditorId?) .
        StackPopTerm(Stack, Stack?, PosInfo?) .
        StackPopString(Stack,Stack?, ModuleName?) .
        FileName := first(args(PosInfo)) .
        snd-msg(edit-general(FileName)) .
        rec-msg(editor-opened(ModuleName, EditorId2?)).
        GetTree(EditorId2, ModuleName, Tree?) .
        snd-msg(get-focus-at-posinfo(EditorId2, PosInfo)) .
        rec-msg(focus-at-posinfo(EditorId2, PosInfo, Focus?)) .
	snd-msg(set-cursor-at-focus(EditorId2, Focus)) .
	snd-msg(set-focus(EditorId2, Focus)) .
        ReturnSuccess(EditorId,Stack)        
      +
        rec-msg(show-feedback-location, Stack?, EditorId?) .
	StackPopTerm(Stack, Stack?, STree?) .
	ShowFeedbackLocation(STree) .
	ReturnSuccess(EditorId, Stack)
      +
        rec-msg(show-list, Stack?, EditorId?) .
        StackPopString(Stack, Stack?, ModuleName?) .
        StackPopString(Stack, Stack?, Text?) .
	snd-msg(update-list-view(ModuleName, Text)) .
        ReturnSuccess(EditorId,Stack)        
      +
        rec-msg(display-feedback, Stack?, EditorId?) .
	StackPopTerm(Stack, Stack?, Feedback?) .
	snd-note(display-feedback-summary(Feedback)) .
	ReturnSuccess(EditorId, Stack)
      +
        rec-msg(save-tree, Stack?, EditorId?) .
        StackPopString(Stack,Stack?,FileName?) .
        StackPopTerm(Stack,Stack?,Tree?) .
        snd-msg(io-write-term-file(FileName,Tree)) .
	(
          rec-msg(io-file-written) .
          ReturnSuccess(EditorId, Stack)
        +
          rec-msg(io-file-not-written(ErrorMessage?)) .
          snd-note(ui-status(errorf("%s: %s",[FileName, ErrorMessage]))) .
	  ReturnAbort(EditorId, Stack)
        )
      +
        rec-msg(save-text, Stack?, EditorId?) .
        StackPopString(Stack,Stack?,FileName?) .
        StackPopString(Stack,Stack?,String?) .
        snd-msg(io-write-text-file(FileName,[String])) .
	(
          rec-msg(io-file-written) .
          ReturnSuccess(EditorId, Stack)
        +
          rec-msg(io-file-not-written(ErrorMessage?)) .
          snd-note(ui-status(errorf("%s: %s",[FileName, ErrorMessage]))) .
	  ReturnAbort(EditorId, Stack)
        )
      +
        rec-msg(read-tree, Stack?, EditorId?) . 
        StackPopString(Stack,Stack?,FileName?) .
        snd-msg(io-read-term-file(FileName)) .
        (
          rec-msg(io-file-contents(Tree?)) .
          StackPushTerm(Stack,Stack?,Tree) .
          ReturnSuccess(EditorId, Stack)
        +
          rec-msg(io-error-reading(ErrorMessage?)) .
          snd-note(ui-status(errorf("%s: %s",[FileName, ErrorMessage]))) .
	  ReturnAbort(EditorId, Stack)
        )
      +
	rec-msg(edit-syntax, Stack?, EditorId?) .
	StackIsEmpty(Stack, Empty?) .
	if equal(Empty, true) then
	  ReturnSuccess(EditorId, Stack)
        else
          StackPopString(Stack,Stack?,ModuleName?) .
	  snd-msg(edit-syntax(ModuleName)) .
	  rec-msg(editor-opened(ModuleName,EditorId2?)) .
	  ReturnSuccess(EditorId, Stack)
	fi   
      +
	rec-msg(edit-equations, Stack?, EditorId?) .
	StackIsEmpty(Stack, Empty?) .
	if equal(Empty, true) then
	  ReturnSuccess(EditorId, Stack)
        else
          StackPopString(Stack,Stack?,ModuleName?) .
	  snd-msg(edit-equations(ModuleName)) .
          rec-msg(editor-opened(ModuleName,EditorId2?)) .
	  ReturnSuccess(EditorId, Stack)
	fi   
      +
	rec-msg(dump-module, Stack?, EditorId?) .
	StackIsEmpty(Stack, Empty?) .
	if equal(Empty, true) then
	  ReturnSuccess(EditorId, Stack)
        else
          StackPopString(Stack,Stack?,ModuleName?) .
	  snd-msg(save-asfsdf-module(ModuleName)).
          rec-msg(saved-asfsdf-module(ModuleName)).
	  ReturnSuccess(EditorId, Stack)	
	fi   
      + 
	rec-msg(revert-module, Stack?, EditorId?) .
	StackIsEmpty(Stack, Empty?) .
	if equal(Empty, true) then
	  ReturnSuccess(EditorId, Stack)
        else
          StackPopString(Stack, Stack?, ModuleName?) .
          snd-msg(revert-module(ModuleName, syntax-editor)) .           
          rec-msg(module-reverted(ModuleName)) .
	  ReturnSuccess(EditorId, Stack)	
        fi
      + 
	rec-msg(close-module(Mode?), Stack?, EditorId?) .
	StackIsEmpty(Stack, Empty?) .
	if equal(Empty, true) then
	  ReturnSuccess(EditorId, Stack)
        else
          StackPopString(Stack,Stack?,ModuleName?) .
          snd-msg(close-module(ModuleName, Mode)) .           
	  ReturnSuccess(EditorId, Stack)	
        fi
      + 
	rec-msg(delete-module, Stack?, EditorId?) .
	StackIsEmpty(Stack, Empty?) .
	if equal(Empty, true) then
	  ReturnSuccess(EditorId, Stack)
        else
          StackPopString(Stack,Stack?,ModuleName?) .
          snd-msg(delete-module(ModuleName)) .           
	  ReturnSuccess(EditorId, Stack)	
        fi
      + 
	rec-msg(open-module, Stack?, EditorId?) .
       	StackPopString(Stack, Stack?, Ext?) .
       	StackPopString(Stack, Stack?, Path?) .
       	StackPopString(Stack, Stack?, ModuleName?) .
        snd-msg(open-initial-module(Path, ModuleName, Ext)) .           
	ReturnSuccess(EditorId, Stack)	
      +
	rec-msg(new-module, Stack?, EditorId?) .
       	StackPopString(Stack, Stack?, Ext?) .
       	StackPopString(Stack, Stack?, Path?) .
       	StackPopString(Stack, Stack?, ModuleName?) .
        snd-msg(create-new-module(Path, ModuleName, sdf)) .           
	ReturnSuccess(EditorId, Stack)	
      +
	rec-msg(create-module, Stack?, EditorId?) .
       	StackPopString(Stack, Stack?, ModuleName?) .
	snd-msg(io-relative-to-absolute(["."])) .
	rec-msg(io-absolute-directories([Path?])) .
        snd-msg(create-new-module(Path, ModuleName, sdf)) .           
	ReturnSuccess(EditorId, Stack)	
      +
	rec-msg(prompt-for-file(String?, Path?, Ext?), Stack?, EditorId?) .
	snd-msg(ask-for-file(String, Path, Ext)) .
	rec-msg(ask-for-file-result(FileName?)) .
        StackPushString(Stack, Stack?, FileName) .
	ReturnSuccess(EditorId, Stack)
      +
        rec-msg(str-to-filename, Stack?, EditorId?) .
	StackPopString(Stack, Stack?, FileName?) .
	StackPushFile(Stack, Stack?, FileName) .
	ReturnSuccess(EditorId, Stack)
      +
	rec-msg(edit-term, Stack?, EditorId?) .
        StackPopString(Stack,Stack?,FileName?) .
	StackIsEmpty(Stack, Empty?) .
	if equal(Empty, true) then
	  ReturnSuccess(EditorId, Stack)
        else
          StackPopString(Stack,Stack?,ModuleName?) .
          snd-msg(edit-term-file(ModuleName, FileName)) .
          rec-msg(editor-opened(ModuleName, EditorId2?)).
	  ReturnSuccess(EditorId, Stack)	
        fi
      +
	rec-msg(ask-question(String?), Stack?, EditorId?) .
	snd-msg(ask-question(String)) .
	rec-msg(ask-question-result(Tree?)) .
        StackPushTerm(Stack,Stack?,Tree) .
	ReturnSuccess(EditorId, Stack)
      +
        rec-msg(split-file-name(Ext?), Stack?, EditorId?) .   
	StackPopString(Stack, Stack?, FileName?) .
	snd-msg(decons-file-name(FileName, Ext)) .
        rec-msg(decons-file-name-result(Path?, FileName?, Ext?)) .
	StackPushString(Stack, Stack?, FileName) .	
	StackPushString(Stack, Stack?, Path) .	
	StackPushString(Stack, Stack?, Ext) .	
	ReturnSuccess(EditorId, Stack)	
      +
        rec-msg(copy-module, Stack?, EditorId?) .
       	StackPopString(Stack, Stack?, Ext?) .
       	StackPopString(Stack, Stack?, Path?) .
       	StackPopString(Stack, Stack?, NewModuleName?) .
	StackIsEmpty(Stack, Empty?) .
	if equal(Empty, true) then
	  ReturnSuccess(EditorId, Stack)
        else
       	  StackPopString(Stack, Stack?, ModuleName?) .
	  snd-msg(copy-module(ModuleName, NewModuleName, Path)) .
	  ReturnSuccess(EditorId, Stack)	
	fi
      +
        rec-msg(rename-module, Stack?, EditorId?) .
       	StackPopString(Stack, Stack?, Ext?) .
       	StackPopString(Stack, Stack?, Path?) .
       	StackPopString(Stack, Stack?, NewModuleName?) .
	StackIsEmpty(Stack, Empty?) .
	if equal(Empty, true) then
	  ReturnSuccess(EditorId, Stack)
        else
       	  StackPopString(Stack, Stack?, ModuleName?) .
	  snd-msg(rename-module(ModuleName, NewModuleName, Path)) .
	  ReturnSuccess(EditorId, Stack)	
	fi
      +
        rec-msg(import-module, Stack?, EditorId?) .
       	StackPopString(Stack, Stack?, ModuleName?) .
	ImportModule(ModuleName) .
	ReturnSuccess(EditorId, Stack)
      +
        rec-msg(unimport-module, Stack?, EditorId?) .
       	StackPopString(Stack, Stack?, ModuleName?) .
	UnImportModule(ModuleName) .
	ReturnSuccess(EditorId, Stack)
      +
	rec-msg(compile-module, Stack?, EditorId?) .
	StackIsEmpty(Stack, Empty?) .
	if equal(Empty, true) then
	  ReturnSuccess(EditorId, Stack)
        else
          StackPopString(Stack,Stack?,ModuleName?) .
	  snd-msg(compile-module(ModuleName)) .
	  rec-msg(compilation-ready(ModuleName)) .
	  ReturnSuccess(EditorId, Stack)	
        fi
      +
	rec-msg(dump-equations, Stack?, EditorId?) .
	StackIsEmpty(Stack, Empty?) .
	if equal(Empty, true) then
	  ReturnSuccess(EditorId, Stack)
        else
          StackPopString(Stack,Stack?,ModuleName?) .
	  snd-msg(dump-equations(ModuleName)) .
	  rec-msg(equations-dumped) .
	  ReturnSuccess(EditorId, Stack)	
        fi
      +
        rec-msg(dump-sdf-definition, Stack?, EditorId?) .
	StackIsEmpty(Stack, Empty?) .
	if equal(Empty, true) then
	  ReturnSuccess(EditorId, Stack)
        else
          StackPopString(Stack,Stack?,ModuleName?) .
	  snd-msg(dump-sdf-definition(ModuleName)) .
	  rec-msg(sdf-definition-dumped) .
	  ReturnSuccess(EditorId, Stack)
        fi
      +
	rec-msg(dump-parse-table, Stack?, EditorId?) .
	StackIsEmpty(Stack, Empty?) .
	if equal(Empty, true) then
	  ReturnSuccess(EditorId, Stack)
        else
          StackPopString(Stack,Stack?,ModuleName?) .
	  snd-msg(dump-parse-table(ModuleName, trm)) .
	  rec-msg(parse-table-dumped) .
	  ReturnSuccess(EditorId, Stack)	
        fi
      +
	rec-msg(dump-eqs-parse-table, Stack?, EditorId?) .
	StackIsEmpty(Stack, Empty?) .
	if equal(Empty, true) then
	  ReturnSuccess(EditorId, Stack)
        else
          StackPopString(Stack,Stack?,ModuleName?) .
	  snd-msg(dump-parse-table(ModuleName, eqs)) .
	  rec-msg(parse-table-dumped) .
	  ReturnSuccess(EditorId, Stack)	
        fi
      +
	rec-msg(print-module, Stack?, EditorId?) .
	StackIsEmpty(Stack, Empty?) .
	if equal(Empty, true) then
	  ReturnSuccess(EditorId, Stack)
        else
          StackPopString(Stack,Stack?,ModuleName?) .
	  snd-msg(print-module(ModuleName)) .
	  rec-msg(module-printed(ModuleName)) .
	  ReturnSuccess(EditorId, Stack)	
	fi
      +
        rec-msg(clear-all, Stack?, EditorId?) .
	CloseAll .
	ReturnSuccess(EditorId, Stack)		
      +
        rec-msg(read-termstore, Stack?, EditorId?) .
	CloseAll .
	TermStoreActivation .
	ReturnSuccess(EditorId, Stack)		
      +
        rec-msg(save-termstore, Stack?, EditorId?) .
	snd-msg(save-termstore) .
	( 
	  rec-msg(saved) .
	  ReturnSuccess(EditorId, Stack)		
	+
	  rec-msg(not-saved(ErrorMessage?)) .
	  snd-note(ui-status(errorf("Saving failed: %s", [ErrorMessage]))) .
	  ReturnFailed(EditorId, Stack)
        )
      +
        rec-msg(clear-history-list, Stack?, EditorId?) .
	snd-msg(clear-history) .
	ReturnSuccess(EditorId, Stack)		
      +
        rec-msg(refresh-buttons, Stack?, EditorId?) .
	snd-msg(refresh-buttons) .
	rec-msg(buttons-refreshed) .
	ReturnSuccess(EditorId, Stack)		
      +
        rec-msg(exit, Stack?, EditorId?) .
	shutdown("MetaStudio exiting\n") .
	ReturnSuccess(EditorId, Stack)		
      +
	rec-msg(dup, Stack?, EditorId?) .
        StackPopTerm(Stack,Stack?,Tree?) .
        StackPushTerm(Stack,Stack?,Tree) .
        StackPushTerm(Stack,Stack?,Tree) .
	ReturnSuccess(EditorId, Stack)
      +
	rec-msg(pop, Stack?, EditorId?) .
        StackPopTerm(Stack,Stack?,Tree?) .
	ReturnSuccess(EditorId, Stack)
  ) * delta
endlet

process IfEqual(ButtonAction : term,
                Stack : list,
                ButtonActions : list,
                RStack : list?,
                RButtonActions : list?) is
let
  Tree1       : term,
  Tree2       : term,
  ThenActions : list,
  ElseActions : list,
  IStack      : list
in
  Tree1 := first(Stack) .
  IStack := next(Stack) .
  Tree2 := first(IStack) .
  IStack := next(IStack) .
  snd-msg(equal-trees(Tree1, Tree2)) .
  (
    rec-msg(true) .
    ThenActions := first(args(ButtonAction)) .
    RButtonActions := join(ThenActions, ButtonActions)
  +
    rec-msg(false) .
    ElseActions := first(next(args(ButtonAction))) .
    RButtonActions := join(ElseActions, ButtonActions)
  ) .
  RStack := IStack
endlet

/****************************************************/
/* below here are implementations of button actions */
/****************************************************/

process ShowTree(ModuleName: str, Tree: term) is
let
  Graph : term,
  Id : int
in
  Id := process-id.
  snd-note(ui-status(stat(Id,"Computing graph layout..."))) .
  snd-msg(tree2graph(ModuleName, Tree)) .
  rec-msg(graph(Graph?)) .
  snd-msg(display-graph("parsetree", Graph)).
  snd-note(ui-status(endstat(Id)))
endlet

process UnParseTerm(Tree : term, Text : str?) is
  snd-msg(unparse(Tree)) .
  rec-msg(unparsed-text(Text?))

process ParseTerm(EditorId: term, ModuleName: str) is
let
  Focus  : term
in
  InvalidateEditor(EditorId).
  snd-msg(parse-focusses(EditorId, ModuleName, trm)) .
  (
    rec-msg(parse-ok(ModuleName)) .
    snd-msg(clear-focus(EditorId))
  +
    rec-msg(parse-failed(ModuleName, Focus?))
  )
endlet

process GetTextFromFile(FileName: str, Text: str?) is
let
  ErrorMessage      : str
in
  snd-msg(io-read-file(FileName)).
  (
    rec-msg(io-file-contents(Text?)) 
  +
    rec-msg(io-error-reading(ErrorMessage?)) .
    Text := error-text
  )
endlet

process ParseText(Text: str, ModuleName: str, Nonterminal: str, 
                  Tree: term?, ParseError: term?) is
let
  Id         : term,
  ErrList    : list,
  ErrContent : term,
  ModuleId   : term
in
  Id := process-id . 
  snd-msg(open-modules([ModuleName], sdf)) .
  rec-msg(finished-opening-modules) .
  ParseString(ModuleName, trm, Nonterminal, Text, Tree?, ParseError?)
endlet
 
process ParseSyntax(EditorId : term, ModuleName : str, Type : term) is
let
  Tree             : term,
  Text             : str,
  Focus            : term,
  NewModules       : list,
  DependingModules : list,
  ModuleId	   : str
in
  InvalidateEditor(EditorId).
  snd-msg(get-module-id-hook(Type)) .
  rec-msg(get-module-id-hook-result(ModuleId?)) .
  snd-msg(notify-about-changed-modules([ModuleName], Type)) .
  rec-msg(notify-about-changed-modules-done) .
  snd-msg(parse-focusses(EditorId, ModuleId, trm)) .
  (
    rec-msg(parse-ok(ModuleId)) .
    snd-msg(get-tree(EditorId)) .
    (
      rec-msg(tree(Tree?)) .
      snd-msg(unparse(Tree)) .
      rec-msg(unparsed-text(Text?)) .
      snd-msg(update-module-text-in-db(ModuleName, Text, Tree, Type)) .
      (
	rec-msg(no-updating-needed) .
        snd-note(clear-focus(EditorId))
      +
        rec-msg(updating-succeeded(DependingModules?)).
        snd-msg(update-module-in-db(ModuleName, Tree, Type)) .
	(
          rec-msg(updating-succeeded(NewModules?)).
	  snd-msg(notify-about-changed-modules(DependingModules, Type)) .
	  rec-msg(notify-about-changed-modules-done) .
          snd-msg(open-modules(NewModules, Type)).
          rec-msg(finished-opening-modules) .
          snd-msg(clear-focus(EditorId))
        +
          rec-msg(error-opening(ModuleName, name-inconsistent)).
          snd-msg(invalidate-sdf-in-db(ModuleName)).
          InvalidateEditor(EditorId).
          snd-note(ui-status(
            errorf("Changing the name of %s is not permitted.",[ModuleName])))
        )
      +
        rec-msg(error-opening(ModuleName, name-inconsistent)) .
	snd-msg(invalidate-sdf-in-db(ModuleName)).
	InvalidateEditor(EditorId).
        snd-note(ui-status(
          errorf("Changing the name of %s is not permitted.",[ModuleName])))
      )
    +
      rec-msg(no-tree) /* editor dissappeared */
    )
  +
    rec-msg(parse-failed(ModuleId, Focus?)) .
    snd-msg(invalidate-sdf-in-db(ModuleName))
  ) 
endlet

process ParseEquations(EditorId : term, ModuleName : str) is
let
  Tree : term,
  Focus : term
in
  InvalidateEditor(EditorId).
  snd-msg(parse-focusses(EditorId, ModuleName, eqs)) .
  (
    rec-msg(parse-ok(ModuleName)) .
    snd-msg(get-tree(EditorId)) .
    (
      rec-msg(tree(Tree?)) .
      snd-msg(postprocess-semantics-hook(ModuleName, Tree)).
      rec-msg(postprocess-semantics-hook-result(ModuleName, Tree?)).
      snd-msg(update-eqs-tree-in-db(ModuleName, tree(Tree))) .
      rec-msg(eqs-updated) .
      snd-msg(clear-focus(EditorId))
    +
      rec-msg(no-tree)
    )
  +
    rec-msg(parse-failed(ModuleName, Focus?))
  )
endlet

process GetTree(EditorId: term, ModuleName: str, Tree: term?) is
let
  DirtyFoci  : term
in
  Tree := error-tree.
  snd-msg(get-dirty-focuses(EditorId)) .
  rec-msg(dirty-focuses(DirtyFoci?)) .
  if equal(DirtyFoci, []) then
    snd-msg(get-tree(EditorId)) .
    (
      rec-msg(tree(Tree?))
    +
      rec-msg(no-tree)
    )
  else
    ParseTerm(EditorId, ModuleName) .
    snd-msg(get-dirty-focuses(EditorId)) .
    rec-msg(dirty-focuses(DirtyFoci?)) . 
    if equal(DirtyFoci, []) then
      snd-msg(get-tree(EditorId)) .
      (
        rec-msg(tree(Tree?))
      +
        rec-msg(no-tree)
      )
    else 
      tau
    fi
  fi
endlet

process ReplaceRoot(EditorId: term, Tree: term) is
let
  Focus : term
in
  snd-msg(move-focus-to-root(EditorId)) .
  rec-msg(focus-moved(EditorId, Focus?)) .
  ReplaceFocus(EditorId, Tree)
endlet


process GetFocus(EditorId: term, Tree: term?) is
  snd-msg(get-focussed-tree(EditorId)) .
  (
    rec-msg(tree(Tree?))
  +
    rec-msg(no-tree) .
    Tree := error-tree
  )

process ReplaceFocus(EditorId: term, Tree: term) is
let
  TotalTree : term,
  Text : str,
  Focus : term,
  FileName : str,
  ErrorMessage : str
in
  snd-msg(replace-focussed-tree(EditorId, Tree)) .
  rec-msg(focus(Focus?)) .
  snd-msg(get-tree(EditorId)) .
  (
    rec-msg(tree(TotalTree?)) .
    snd-msg(unparse(TotalTree)) .
    rec-msg(unparsed-text(Text?)) .
    snd-msg(get-editor-filename(EditorId)) .
    rec-msg(editor-filename(FileName?)) .
    snd-msg(io-write-text-file(FileName,[Text])) .
    (
      rec-msg(io-file-written) . 
      snd-msg(reread-contents(EditorId)) .
      snd-msg(set-cursor-at-focus(EditorId, Focus)) .
      snd-msg(set-focus(EditorId, Focus))
    +
      rec-msg(io-file-not-written(ErrorMessage?)) .
      snd-note(ui-status(errorf("%s: %s",[FileName, ErrorMessage])))
    )
  +
    rec-msg(no-tree)
  )
endlet

process CheckTreeSort(Tree: term, Sort: str, RTree: term?) is
let 
  TreeSort : str 
in
  snd-msg(check-tree-sort(Sort, Tree)) .
  ( 
    rec-msg(wrong-sort(TreeSort?)) .
    snd-note(ui-status(errorf("Top sort %s of tree does not match %s", 
                              [TreeSort, Sort]))) .
    RTree := error-tree
  +
    rec-msg(sort-ok) .
    RTree := Tree
  )
endlet

process ReduceTerm(Tree: term, ModuleName: str, NormalForm: term?) is
let
  Id          : int,
  ErrList     : list,
  Equations   : term
in
  Id := process-id .
  snd-msg(open-modules([ModuleName], sdf)) .
  rec-msg(finished-opening-modules) .
  snd-note(ui-status(stat(Id, "Retrieving equations"))) .
  snd-msg(get-all-equations(ModuleName)) .
  (
    rec-msg(all-equations(Equations?)) .
    snd-note(ui-status(endstat(Id))).
    snd-msg(interpret-term-hook(ModuleName, Equations, Tree)).
    rec-msg(interpret-term-hook-result(NormalForm?))
  +
    rec-msg(equations-incomplete) .
    NormalForm := error-tree .
    snd-note(ui-status(endstat(Id))) .
    snd-note(ui-status(errorf("Equations incomplete for %s", [ModuleName])))
  )
endlet

process ActivateEditorWithTree(Tree: term, ModuleName: str, FileName: str) is
let
  Text        : str,
  EditorId    : term,
  NewModuleName : str,
  ErrorMessage : str
in
  if not-equal(Tree, error-tree) then
    snd-msg(unparse(Tree)) . 
    rec-msg(unparsed-text(Text?)) .
    snd-msg(io-write-text-file(FileName,[Text])) .
    (
      rec-msg(io-file-written) .
      snd-msg(edit-term-file-with-tree(ModuleName, FileName, Tree)) .
      rec-msg(editor-opened(ModuleName, EditorId?))
    +
      rec-msg(io-file-not-written(ErrorMessage?)) .
      snd-note(ui-status(errorf("%s: %s",[FileName, ErrorMessage])))
    )
  fi
endlet

process ActivateEditorWithString(Text: str, ModuleName: str, FileName: str) is
let
  EditorId    : term,
  NewModuleName : str,
  ErrorMessage : str
in
  snd-msg(io-write-text-file(FileName,[Text])) .
  (
    rec-msg(io-file-written) .
    snd-msg(edit-term-file(ModuleName, FileName)) .
    rec-msg(editor-opened(ModuleName, EditorId?))
  +
    rec-msg(io-file-not-written(ErrorMessage?)) .
    snd-note(ui-status(errorf("%s: %s",[FileName, ErrorMessage])))
  )

endlet

process ImportModule(ModuleName : str) is
let
  Choices : list,
  Chosen : str
in
  snd-msg(get-all-module-names) .
  rec-msg(all-module-names(Choices?)) .
  snd-msg(show-list-choice(ModuleName, "Choose a module to import", Choices)) .
  (
    rec-msg(list-choice(ModuleName, Chosen?)) .
    snd-msg(import-module(ModuleName, Chosen))
  +
    rec-msg(cancel-list-choice(ModuleName)) 
  )
endlet  

process UnImportModule(ModuleName : str) is
let
  Choices : list,
  Chosen : str
in
  snd-msg(get-imported-modules(ModuleName)) .
  rec-msg(imported-modules(Choices?)) .
  snd-msg(show-list-choice(ModuleName, "Choose a module to remove from the imports", Choices)) .
  (
    rec-msg(list-choice(ModuleName, Chosen?)) .
    snd-msg(unimport-module(ModuleName, Chosen)) 
  +
    rec-msg(cancel-list-choice(ModuleName)) 
  )
endlet  
