/* This file contains the implementation of a small stack language.
 *
 * The stack operations are retrieved from the configuration manager,
 * then for each primitive Meta-Environment operation in the button
 * language there is a handler. Arguments are popped of the stack before
 * calling Meta-Environment functionality, the result is sometimes pushed
 * back on the stack. 
 *
 * The interpreter stops when all actions are performed or an error has
 * occurred.
 */

process MetaActions is
let
  Actions: list,
  Arguments: list,
  Sid: term
in
  (
    (
      rec-msg(perform-actions(Sid?, Actions?))
      . Arguments := []
    +
      rec-msg(perform-actions(Sid?, Actions?, Arguments?))
    )
    . PerformActions(Sid, Actions, Arguments)
    . snd-msg(actions-performed(Sid, Actions))
  )
  * delta
endlet

process PerformActions(EditorId: term, Actions: list, Arguments: list) is
let
  ButtonActions: list,
  ButtonAction: term,
  FunName: str,
  Stack: list
in
  ButtonActions := quote(Actions)
  . Stack := Arguments
  .
  (
    if not-equal(ButtonActions, []) then
      ButtonAction := first(ButtonActions) .
      ButtonActions := next(ButtonActions) .
      FunName := fun(ButtonAction) .
      if equal(FunName, "if-equal") then
        IfEqual(ButtonAction, Stack, ButtonActions, Stack?, ButtonActions?)
      else
        snd-msg(ButtonAction, Stack, EditorId)
	.
        (
          rec-msg(stack(Stack?), EditorId)
        +
          rec-msg(empty-stack, EditorId)
          . ButtonActions := []
        +
          rec-msg(error-stack, EditorId)
          . ButtonActions := []
          . snd-note(ui-status(
            errorf("An error occurred while processing the action: %t",
                   [ButtonAction])))
        )
      fi
    fi
  )
  *
  if equal(ButtonActions, []) then
    tau
  fi
endlet

process StackIsEmpty(Stack : list, Empty : term?) is
  if equal(Stack, []) then
    Empty := true
  else
    Empty := false
  fi

process StackPopTerm(Stack : list, NewStack : list?, Top : term?) is
  Top := first(Stack).
  NewStack := next(Stack)

process StackPopString(Stack : list, NewStack : list?, Top : str?) is
let
  TopTerm : term
in
  StackPopTerm(Stack,NewStack?,TopTerm?).
  Top := first(args(TopTerm))
endlet

process StackPopInt(Stack : list, NewStack : list?, Top : int?) is
let
  TopTerm : term
in
  StackPopTerm(Stack, NewStack?, TopTerm?) .
  Top := first(args(TopTerm))
endlet

process StackPushTerm(Stack : list, NewStack : list?, Top : term) is
  NewStack := join(Top, Stack)

process StackPushString(Stack : list, NewStack : list?, Top : str) is
  StackPushTerm(Stack,NewStack?,quote(str(Top)))
 
process StackPushInt(Stack : list, NewStack : list?, Top : int) is
  StackPushTerm(Stack,NewStack?, quote(int(Top)))

process StackPushPath(Stack : list, NewStack : list?, Top : str) is
  StackPushTerm(Stack,NewStack?, quote(path(Top)))

process ReturnSuccess(EditorId : term, Stack : list) is
  snd-msg(stack(Stack), EditorId)

process ReturnFailed(EditorId : term, Stack : list) is
  snd-msg(error-stack, EditorId)

process ReturnAbort(EditorId : term, Stack : list) is
  snd-msg(empty-stack, EditorId)

process ButtonActionExecutor is
let
  Action : str,
  ActionEvent : term,
  Available: bool,
  ArgList : list,
  Cursor: term,
  Direction: term,
  Directory: str,
  EditorId : term,
  EditorId2 : term,
  EditorName : str,
  EditorType : term,
  Empty : term,
  Error : term,
  ErrorMessage : str,
  ExecName : str,
  Extension : str,
  Feedback : term,
  Filename : str,
  FilePath : str,
  Focus : term,
  FunSym : str,
  FuncName : str,
  InStr : str,
  Integer : int,
  Location : term,
  Message : str,
  Mode : term,
  Modulename : str,
  Name : str,
  NewModulename : str,
  NrOfArgs : int,
  Origin: term,
  OutStr : str,
  Path : str,
  Pid: int,
  PosInfo : term,
  Query : str,
  RTree : term,
  Sid: term,
  SList	: list,
  STree : term,
  SortName : str,
  Stack : list,
  String : str,
  Subject: term,
  Subjects: list,
  Text : str,
  TimeStamp : int,
  Tree : term,
  Trees : list
in
   (
      rec-msg(apply(FuncName?, SortName?, NrOfArgs?), Stack?, EditorId?) .
      ArgList := [] .
      (
        if greater(NrOfArgs, 0) then
          StackPopTerm(Stack,Stack?,STree?).
          NrOfArgs := sub(NrOfArgs, 1) .
          ArgList := join(ArgList, STree)
        fi 
      ) *
      if equal(NrOfArgs, 0) then
        tau
      fi .
      snd-msg(apply-function(FuncName, SortName, ArgList)) .
      rec-msg(tree(RTree?)) .
      if not-equal(RTree, error-tree) then
        StackPushTerm(Stack,Stack?,RTree).
        ReturnSuccess(EditorId,Stack)
      else
        ReturnFailed(EditorId, Stack)
      fi
      +
      /* TODO: use stack arguments instead of function arguments */
      rec-msg(rewrite(ExecName?), Stack?, EditorId?) .
      StackPopTerm(Stack,Stack?,STree?).
      snd-msg(rewrite(ExecName, STree)) .
      rec-msg(normalform(ExecName, RTree?)) .
      StackPushTerm(Stack,Stack?,RTree).
      ReturnSuccess(EditorId,Stack)
      +
      rec-msg(apply-rewrite, Stack?, EditorId?) .
      StackPopInt(Stack,Stack?,NrOfArgs?) .
      StackPopString(Stack,Stack?,SortName?) .
      StackPopString(Stack,Stack?,FuncName?) .
      StackPopString(Stack,Stack?,ExecName?) .
      ArgList := [] .
      (
        if greater(NrOfArgs, 0) then
          StackPopTerm(Stack,Stack?,STree?).
	  if equal(fun(STree), "str") then
	    STree := first(args(STree))
          else 
	    tau
          fi .
          NrOfArgs := sub(NrOfArgs, 1) .
          ArgList := join(ArgList, STree)
        fi 
      ) *
      if equal(NrOfArgs, 0) then
        tau
      fi .
      snd-msg(apply-rewrite(ExecName, FuncName, SortName, ArgList)) .
      rec-msg(normalform(ExecName, RTree?)) .
      StackPushTerm(Stack,Stack?,RTree).
      ReturnSuccess(EditorId,Stack)
      +
      rec-msg(activate(Action?), Stack?, EditorId?) .
      snd-msg(gen-adapter-activate(EditorId, Action)).
      rec-msg(gen-adapter-result(EditorId, OutStr?)).
      if not-equal(OutStr, "") then
        StackPushString(Stack,Stack?,OutStr)
      else
        tau
      fi.
      ReturnSuccess(EditorId,Stack)
    +
      rec-msg(activate-given-tree(Action?), Stack?, EditorId?) .
      StackPopTerm(Stack,Stack?,STree?).
      FunSym := fun(STree) .
      if not-equal(FunSym, "str") then
        snd-msg(gen-adapter-term-to-string-evaluate(EditorId,Action,STree)).
        rec-msg(gen-adapter-term-to-string-result(EditorId,OutStr?))
      else
        InStr := first(args(STree)) .
        snd-msg(gen-adapter-string-to-string-evaluate(EditorId,Action,InStr)).
        rec-msg(gen-adapter-string-to-string-result(EditorId,OutStr?))
      fi.
      if not-equal(OutStr, "") then
          StackPushString(Stack,Stack?,OutStr)
      else
          tau
      fi.
      ReturnSuccess(EditorId,Stack)
    +
      rec-msg(execute-action(Action?), Stack?, EditorId?) .
      StackPopTerm(Stack,Stack?,STree?).
      snd-msg(gen-adapter-term-evaluate(EditorId,Action, STree)).
      rec-msg(gen-adapter-term-result(EditorId,RTree?)).
      if not-equal(RTree, error-tree) then
        StackPushTerm(Stack,Stack?,RTree).
        ReturnSuccess(EditorId,Stack)
      else
        ReturnFailed(EditorId,Stack)
      fi
    +
      rec-msg(move-cursor, Stack?, EditorId?) .
      StackPopTerm(Stack, Stack?, Direction?) .
      snd-msg(se-move-cursor(EditorId, Direction)) .
      SynchronizeFocus(EditorId) .
      ReturnSuccess(EditorId, Stack)
    +
    rec-msg(convert-feedback, Stack?, EditorId?) .
    StackPopTerm(Stack, Stack?, Feedback?) .
    snd-msg(convert-feedback(Feedback)) .
    rec-msg(converted-feedback(Feedback?)) .
    StackPushTerm(Stack, Stack?, Feedback) .
    ReturnSuccess(EditorId, Stack)
    +
    rec-msg(parse-action, Stack?, EditorId?) .
    StackPopString(Stack,Stack?,Modulename?) .
    ParseTerm(EditorId, Modulename) .
    ReturnSuccess(EditorId,Stack)
    +
    rec-msg(parse-syntax-action, Stack?, EditorId?).
    ParseSyntax(EditorId, sdf).
    ReturnSuccess(EditorId,Stack)
    +
    rec-msg(parse-equations-action, Stack?, EditorId?).
    StackPopString(Stack,Stack?,Modulename?) .
    ParseEquations(EditorId,Modulename).
    ReturnSuccess(EditorId,Stack)
    +
    rec-msg(unparse, Stack?, EditorId?) .
    StackPopTerm(Stack,Stack?,STree?) .
    UnParseTerm(STree, String?) .
    StackPushString(Stack, Stack?, String) .
    ReturnSuccess(EditorId,Stack)
    +
    rec-msg(get-root, Stack?, EditorId?)
    . StackPopString(Stack, Stack?, Modulename?)
    . GetTree(EditorId, Modulename, RTree?, Available?)
    .
    if equal(Available, true)
    then
      StackPushTerm(Stack, Stack?, RTree)
      . ReturnSuccess(EditorId, Stack)
    else
      ReturnAbort(EditorId, Stack)
    fi
      +
        rec-msg(set-root, Stack?, EditorId?) .
        StackPopTerm(Stack,Stack?,STree?) .
        ReplaceRoot(EditorId, STree) .
        ReturnSuccess(EditorId,Stack)
      +
        rec-msg(get-focus, Stack?, EditorId?) .
        GetFocus(EditorId, RTree?) .
        StackPushTerm(Stack,Stack?,RTree) .
        ReturnSuccess(EditorId,Stack)
      +
        rec-msg(get-focus-location, Stack?, EditorId?) .
	snd-msg(se-get-focus-location(EditorId)) .
	rec-msg(se-focus-location(EditorId, PosInfo?)) .
	StackPushTerm(Stack, Stack?, PosInfo) .
	ReturnSuccess(EditorId, Stack)
      +
        rec-msg(get-focus-origin, Stack?, EditorId?)
	. snd-msg(se-get-cursor(EditorId))
	. rec-msg(se-cursor(EditorId, Cursor?))
	. snd-msg(pa-get-origin(Cursor))
	.
	(
	  rec-msg(pa-origin(Origin?))
	  . StackPushTerm(Stack, Stack?, Origin)
	+
	  rec-msg(pa-no-origin)
	  . StackPushTerm(Stack, Stack?, no-origin)
	)
	. ReturnSuccess(EditorId, Stack)
      +
        rec-msg(display-message, Stack?, EditorId?)
	. StackPopString(Stack, Stack?, Message?)
	. snd-msg(te-display-message(EditorId, Message))
	. ReturnSuccess(EditorId, Stack)
      +
        rec-msg(set-focus, Stack?, EditorId?) .
        StackPopTerm(Stack,Stack?,STree?).
        ReplaceFocus(EditorId, STree) .
        ReturnSuccess(EditorId,Stack)
      +
        rec-msg(check-sort, Stack?, EditorId?) .
        StackPopString(Stack, Stack?, SortName?) .
        StackPopTerm(Stack, Stack?, STree?).
        CheckTreeSort(STree, SortName, RTree?) .
        if not-equal(RTree, error-tree) then
          StackPushTerm(Stack, Stack?, RTree) .
          StackPushTerm(Stack, Stack?, quote(true)) .
          ReturnSuccess(EditorId, Stack)
        else
          StackPushTerm(Stack, Stack?, STree) .
          StackPushTerm(Stack, Stack?, quote(false)) .
          ReturnSuccess(EditorId, Stack)
        fi
      +
        rec-msg(reduce, Stack?, EditorId?)
        . StackPopString(Stack, Stack?, Modulename?)
        . StackPopTerm(Stack, Stack?, STree?)
        . ReduceTerm(STree, Modulename, RTree?)
        .
	if not-equal(RTree, error-tree)
	then
	  snd-msg(promote-posinfo-to-origin(RTree))
	  . rec-msg(promoted-posinfo-to-origin(RTree?))
	  . AnnotateTree(RTree, "reduct.out", RTree?)
	  . snd-msg(put-term-tree("reduct.out", RTree))
          . StackPushTerm(Stack, Stack?, RTree)
          . ReturnSuccess(EditorId, Stack)
        else
          ReturnAbort(EditorId, Stack)
        fi
      +
        rec-msg(run-asf-tests, Stack?, EditorId?) .
	StackIsEmpty(Stack, Empty?) .
	if equal(Empty, true) then
	  ReturnSuccess(EditorId, Stack)
        else
          StackPopString(Stack,Stack?,Modulename?) .
          StackPopTerm(Stack,Stack?,STree?) .
          snd-msg(run-asf-tests(Modulename)) .
          ReturnSuccess(EditorId,Stack)
        fi
      +
        rec-msg(pretty-print, Stack?, EditorId?) .
        StackPopString(Stack,Stack?,Modulename?) .
        StackPopTerm(Stack,Stack?,STree?) .
	PrettyPrintTerm(Modulename, STree, RTree?) .
        if not-equal(RTree, error-tree) then
          StackPushTerm(Stack,Stack?,RTree) .
          ReturnSuccess(EditorId,Stack)
        else
          ReturnAbort(EditorId,Stack)
        fi
      +
        rec-msg(get-other-focus(Modulename?), Stack?, EditorId?) .
        StackPopTerm(Stack,Stack?,STree?).
        FunSym := fun(STree) .
        if equal(FunSym, "path") then
          FilePath := first(args(STree)) .
          snd-msg(check-editor-id(FilePath, Modulename)) .
          (
            rec-msg(existing-editor(EditorId2?)).
            GetFocus(EditorId2, RTree?) .
            StackPushTerm(Stack,Stack?,RTree) .
            ReturnSuccess(EditorId,Stack)
          +
            rec-msg(non-existing-editor(FilePath?)).
            snd-note(ui-status(messagef("editor for %s not active", 
                                        [FilePath]))) .
            ReturnAbort(EditorId,Stack)
          )
        else
          ReturnFailed(EditorId,Stack)
        fi
      +
        rec-msg(push-editor-name, Stack?, EditorId?) .
        snd-msg(get-editor-filename(EditorId)) .
        rec-msg(editor-filename(Filename?)) .
        StackPushString(Stack,Stack?,Filename) .
        ReturnSuccess(EditorId,Stack)
      +
        rec-msg(activate-editor, Stack?, Sid?) .
        StackPopString(Stack, Stack?, Modulename?) .
        StackPopString(Stack, Stack?, Filename?) .
        StackPopTerm(Stack, Stack?, STree?) .
        FunSym := fun(STree) .
        if equal(FunSym, "str") then
          String := first(args(STree)) .
          ActivateEditorWithString(String, Modulename, Filename)
        else
          ActivateEditorWithTree(STree, Modulename, Filename) 
        fi .    
        ReturnSuccess(Sid, Stack)
      +
	rec-msg(close-editor, Stack?, Sid?)
	. DeleteSession(Sid)
	. ReturnSuccess(Sid, Stack)
      +
        rec-msg(debug-print-stack, Stack?, EditorId?) .
	StackPopString(Stack, Stack?, ErrorMessage?) .
	printf("%s: %t\n", ErrorMessage, Stack) .
	ReturnSuccess(EditorId, Stack)
      +
        rec-msg(send, Stack?, EditorId?) .
        StackPopTerm(Stack,Stack?,STree?) .
        snd-msg(tree-send(STree)) .
        snd-msg(stack(Stack), EditorId?)
      +
        rec-msg(receive, Stack?, EditorId?) .
        rec-msg(tree-send(RTree?)) .
        StackPushTerm(Stack,Stack?,RTree) .
        ReturnSuccess(EditorId,Stack)
      +
        rec-msg(parse(Modulename?, SortName?), Stack?, EditorId?) .
        StackPopTerm(Stack,Stack?,STree?) .
          FunSym := fun(STree) .
          if or(equal(FunSym, "file"), equal(FunSym, "path")) then
            FilePath := first(args(STree)) .
            GetTextFromFile(FilePath, String?) .
            /*ParseText(String, FilePath, Modulename, SortName, RTree?, Error?) .*/
            printf("button-actions.tb:parse error ignored: %t\n", Error)
          else 
            if equal(FunSym, "str") then
              String := first(args(STree)) .
              /*ParseText(String, "Unknown", Modulename, SortName, RTree?, Error?) .*/
	      printf("button-actions.tb:parse error ignored: %t\n", Error)
            else
              RTree := error-tree
            fi
          fi .
        if not-equal(RTree, error-tree) then
          StackPushTerm(Stack,Stack?,RTree) .
          ReturnSuccess(EditorId,Stack)
        else
          ReturnAbort(EditorId,Stack)
        fi
      +
        rec-msg(get-argument(NrOfArgs?), Stack?, EditorId?) .
        StackPopTerm(Stack,Stack?,STree?) .
        StackPushTerm(Stack,Stack?,STree) .
        snd-msg(get-argument-given-number(STree, NrOfArgs)) .
        rec-msg(tree(RTree?)) .
        if not-equal(RTree, error-tree) then
          StackPushTerm(Stack,Stack?,RTree) .
          ReturnSuccess(EditorId,Stack)
        else
          ReturnFailed(EditorId,Stack)
        fi
      +
        rec-msg(exists(Filename?), Stack?, EditorId?) .
        snd-msg(io-exists-file(Filename)) .
        (
          rec-msg(io-file-exists) .
          ReturnSuccess(EditorId,Stack)
        +
          rec-msg(io-file-not-exists) .
          snd-note(ui-status(errorf("%s does not exist", 
                                    [Filename]))) .
          ReturnAbort(EditorId,Stack)
        )
      +
        rec-msg(locate(Filename?), Stack?, EditorId?) .
        snd-msg(locate-file(Filename)) .
        (
          rec-msg(file-location(Filename, FilePath?)) .
          StackPushPath(Stack,Stack?,FilePath) .
          ReturnSuccess(EditorId,Stack)
        +
          rec-msg(file-not-exists(Filename)) .
          snd-note(ui-status(errorf("%s does not exist", 
                                    [Filename]))) .
          ReturnAbort(EditorId,Stack)
        )
      +
        rec-msg(push-active-module, Stack?, EditorId?) .
        subscribe(delete-editor(EditorId)) .
        snd-msg(em-get-modulename(EditorId)) .
	rec-msg(em-modulename(EditorId, Modulename?)) .
	StackPushString(Stack, Stack?, Modulename) .
	ReturnSuccess(EditorId, Stack)
      +
        rec-msg(push-modulename(String?), Stack?, EditorId?) .
        StackPushString(Stack,Stack?,String) .
        ReturnSuccess(EditorId,Stack)
      +
        rec-msg(push-filename(Filename?), Stack?, EditorId?) .
        StackPushString(Stack,Stack?,Filename) .
        ReturnSuccess(EditorId,Stack)
      +
        rec-msg(push-string(String?), Stack?, EditorId?) .
        StackPushString(Stack,Stack?,String) .
        ReturnSuccess(EditorId,Stack)
      +
        rec-msg(push-integer(Integer?), Stack?, EditorId?) .
        StackPushInt(Stack,Stack?,Integer) .
        ReturnSuccess(EditorId,Stack)
      +
        rec-msg(push-term(Tree?), Stack?, EditorId?) .
        StackPushTerm(Stack,Stack?, Tree) .
        ReturnSuccess(EditorId,Stack)
      +
        rec-msg(message(String?), Stack?, EditorId?) .
        snd-note(ui-status(messagef("%s", [String]))) .
        ReturnSuccess(EditorId,Stack)
      +
        rec-msg(unpack-tree, Stack?, EditorId?) .
        StackPopTerm(Stack,Stack?,STree?).
        snd-msg(io-unpack-term(STree)) .
	rec-msg(io-term(RTree?)) .
        StackPushTerm(Stack, Stack?, RTree) .
        ReturnSuccess(EditorId,Stack)
      +
        rec-msg(pack-tree, Stack?, EditorId?) .
        StackPopTerm(Stack,Stack?,STree?).
        snd-msg(io-pack-term(STree)) .
	rec-msg(io-term(RTree?)) .
        StackPushTerm(Stack, Stack?, RTree) .
        ReturnSuccess(EditorId,Stack)
      +
        rec-msg(show-tree, Stack?, EditorId?) .
        StackPopTerm(Stack,Stack?,STree?).
        StackPopString(Stack,Stack?, Modulename?) .
        ShowTree(Modulename, STree, false) .
        ReturnSuccess(EditorId,Stack)
      +
        rec-msg(show-full-tree, Stack?, EditorId?) .
        StackPopTerm(Stack,Stack?,STree?).
        StackPopString(Stack,Stack?, Modulename?) .
        ShowTree(Modulename, STree, true) .
        ReturnSuccess(EditorId,Stack)
      +

        rec-msg(show-area, Stack?, EditorId?)
        . StackPopString(Stack, Stack?, Message?)
        . StackPopTerm(Stack, Stack?, Location?)
	. create(ShowAreaHandler(Location, Message), Pid?)
	. EditLocation(Pid, Location)
	. ReturnSuccess(EditorId, Stack)
      +
        rec-msg(show-feedback-location, Stack?, EditorId?)
	. StackPopTerm(Stack, Stack?, Error?)
	. snd-msg(get-error-subjects(Error))
	. rec-msg(error-subjects(Subjects?))
	. Subject := first(Subjects)
	. snd-msg(get-subject-location(Subject))
	. rec-msg(subject-location(Location?))
	. create(ShowErrorHandler(Error), Pid?)
	. EditLocation(Pid, Location)
	. ReturnSuccess(EditorId, Stack)
      +
        rec-msg(show-feedback, Stack?, EditorId?) .
	StackPopTerm(Stack, Stack?, Feedback?) .
	snd-note(show-feedback-summary(Feedback)) .
	ReturnSuccess(EditorId, Stack)
      +
        rec-msg(save-tree, Stack?, EditorId?) .
        StackPopString(Stack,Stack?,Filename?) .
        StackPopTerm(Stack,Stack?,Tree?) .
        snd-msg(io-write-term-file(Filename,Tree)) .
	(
          rec-msg(io-file-written) .
          ReturnSuccess(EditorId, Stack)
        +
          rec-msg(io-file-not-written(ErrorMessage?)) .
          snd-note(ui-status(errorf("%s: %s",[Filename, ErrorMessage]))) .
	  ReturnAbort(EditorId, Stack)
        )
      +
        rec-msg(save-text, Stack?, EditorId?) .
        StackPopString(Stack,Stack?,Filename?) .
        StackPopString(Stack,Stack?,String?) .
        snd-msg(io-write-text-file(Filename,[String])) .
	(
          rec-msg(io-file-written) .
          ReturnSuccess(EditorId, Stack)
        +
          rec-msg(io-file-not-written(ErrorMessage?)) .
          snd-note(ui-status(errorf("%s: %s",[Filename, ErrorMessage]))) .
	  ReturnAbort(EditorId, Stack)
        )
      +
        rec-msg(read-tree, Stack?, EditorId?) . 
        StackPopString(Stack,Stack?,Filename?) .
        snd-msg(io-read-term-file(Filename)) .
        (
          rec-msg(io-file-contents(Tree?)) .
          StackPushTerm(Stack,Stack?,Tree) .
          ReturnSuccess(EditorId, Stack)
        +
          rec-msg(io-error-reading(ErrorMessage?)) .
          snd-note(ui-status(errorf("%s: %s",[Filename, ErrorMessage]))) .
	  ReturnAbort(EditorId, Stack)
        )
      +
	rec-msg(edit-syntax, Stack?, EditorId?)
	. StackIsEmpty(Stack, Empty?)
	.
	if equal(Empty, true) then
	  ReturnSuccess(EditorId, Stack)
        else
          StackPopString(Stack,Stack?,Modulename?)
	  . create(EditSyntax(Modulename), Pid?)
	  . rec-msg(syntax-editor-started(Modulename, Sid?))
	  . ReturnSuccess(EditorId, Stack)
	fi   
      +
	rec-msg(edit-equations, Stack?, EditorId?)
	. StackIsEmpty(Stack, Empty?)
	.
	if equal(Empty, true) then
	  ReturnSuccess(EditorId, Stack)
        else
          StackPopString(Stack, Stack?, Modulename?)
	  . create(EditEquations(Modulename), Pid?)
	  . rec-msg(equations-editor-started(Modulename, Sid?))
	  . ReturnSuccess(EditorId, Stack)
	fi   
      +
	rec-msg(dump-module, Stack?, EditorId?) .
	StackIsEmpty(Stack, Empty?) .
	if equal(Empty, true) then
	  ReturnSuccess(EditorId, Stack)
        else
          StackPopString(Stack,Stack?,Modulename?) .
	  snd-msg(save-asfsdf-module(Modulename)).
          rec-msg(saved-asfsdf-module(Modulename)).
	  ReturnSuccess(EditorId, Stack)	
	fi   
      + 
	rec-msg(revert-module, Stack?, EditorId?)
	. StackIsEmpty(Stack, Empty?)
	.
	if equal(Empty, true) then
	  ReturnSuccess(EditorId, Stack)
        else
          StackPopString(Stack, Stack?, Modulename?)
          . snd-msg(revert-module(Modulename))
          . rec-msg(module-reverted(Modulename))
	  . ReturnSuccess(EditorId, Stack)	
        fi
      + 
	rec-msg(close-module(Mode?), Stack?, EditorId?) .
	StackIsEmpty(Stack, Empty?) .
	if equal(Empty, true) then
	  ReturnSuccess(EditorId, Stack)
        else
          StackPopString(Stack,Stack?,Modulename?) .
          snd-msg(close-module(Modulename, Mode)) .           
	  ReturnSuccess(EditorId, Stack)	
        fi
      + 
	rec-msg(delete-module, Stack?, EditorId?) .
	StackIsEmpty(Stack, Empty?) .
	if equal(Empty, true) then
	  ReturnSuccess(EditorId, Stack)
        else
          StackPopString(Stack,Stack?,Modulename?) .
          snd-msg(delete-module(Modulename)) .           
	  ReturnSuccess(EditorId, Stack)	
        fi
      + 
	rec-msg(open-module, Stack?, EditorId?) .
       	StackPopString(Stack, Stack?, Extension?) .
       	StackPopString(Stack, Stack?, Path?) .
       	StackPopString(Stack, Stack?, Modulename?) .
        snd-msg(open-initial-module(Path, Modulename, Extension)) .           
	ReturnSuccess(EditorId, Stack)	
      +
	rec-msg(new-module, Stack?, EditorId?) .
       	StackPopString(Stack, Stack?, Extension?) .
       	StackPopString(Stack, Stack?, Path?) .
       	StackPopString(Stack, Stack?, Modulename?) .
        snd-msg(create-new-module(Path, Modulename, sdf)) .           
	rec-msg(new-module-created(Path?, Modulename?)) .
	ReturnSuccess(EditorId, Stack)	
      +
	rec-msg(create-module, Stack?, EditorId?) .
       	StackPopString(Stack, Stack?, Modulename?) .
	snd-msg(io-relative-to-absolute(["."])) .
	rec-msg(io-absolute-directories([Path?])) .
        snd-msg(create-new-module(Path, Modulename, sdf)) .           
	rec-msg(new-module-created(Path?, Modulename?)) .
	ReturnSuccess(EditorId, Stack)	
      +
	rec-msg(prompt-for-file(String?, Path?, Extension?), Stack?, EditorId?) .
	snd-msg(ask-for-file(String, Path, Extension)) .
	rec-msg(ask-for-file-result(Filename?)) .
        StackPushString(Stack, Stack?, Filename) .
	ReturnSuccess(EditorId, Stack)
      +
        rec-msg(prompt-for-file(String?,Path?), Stack?, EditorId?) .
	StackPopString(Stack, Stack?, Modulename?) .
	snd-msg(get-modulename-extension(Modulename)) .
	(
	  rec-msg(modulename-extension(Modulename, Extension?)) 
	+
	  rec-msg(no-modulename-extension(Modulename)) .
	  snd-msg(file-extension-hook(trm)) .
	  rec-msg(file-extension-hook-result(Extension?))
        ) .
	snd-msg(ask-for-file(String, Path, Extension)) .
	rec-msg(ask-for-file-result(Filename?)) .
        StackPushString(Stack, Stack?, Filename) .
	ReturnSuccess(EditorId, Stack)
      +
        rec-msg(str-to-filename, Stack?, EditorId?) .
	StackPopString(Stack, Stack?, Filename?) .
	StackPushString(Stack, Stack?, Filename) .
	ReturnSuccess(EditorId, Stack)
      +
	rec-msg(edit-term, Stack?, EditorId?)
        . StackPopString(Stack,Stack?,Filename?)
	. StackIsEmpty(Stack, Empty?)
	.
	if equal(Empty, true)
	then
	  snd-msg(edit-general(Filename))
	  . ReturnSuccess(EditorId, Stack)
        else
          StackPopString(Stack,Stack?,Modulename?)
	  . create(EditTerm(Filename, Modulename), Pid?)
	  . rec-msg(term-editor-started(Filename, Modulename, Sid?))
	  . ReturnSuccess(EditorId, Stack)	
        fi
      +
	rec-msg(ask-question(String?), Stack?, EditorId?) .
	snd-msg(ask-question(String)) .
	rec-msg(ask-question-result(Tree?)) .
        StackPushTerm(Stack,Stack?,Tree) .
	ReturnSuccess(EditorId, Stack)
      +
        rec-msg(split-file-name, Stack?, EditorId?)
	. StackPopString(Stack, Stack?, Path?)
	. snd-msg(io-get-path-filename(Path))
	. rec-msg(io-filename(Path, Filename?))
	. StackPushString(Stack, Stack?, Filename)
	. snd-msg(io-get-path-directory(Path))
	. rec-msg(io-directory(Path, Directory?))
	. StackPushString(Stack, Stack?, Directory)
	. snd-msg(io-get-path-extension(Path))
	. rec-msg(io-extension(Path, Extension?))
	. StackPushString(Stack, Stack?, Extension)
	. ReturnSuccess(EditorId, Stack)
      +
        rec-msg(copy-module, Stack?, EditorId?) .
       	StackPopString(Stack, Stack?, Extension?) .
       	StackPopString(Stack, Stack?, Path?) .
       	StackPopString(Stack, Stack?, NewModulename?) .
	StackIsEmpty(Stack, Empty?) .
	if equal(Empty, true) then
	  ReturnSuccess(EditorId, Stack)
        else
       	  StackPopString(Stack, Stack?, Modulename?) .
	  snd-msg(copy-module(Modulename, NewModulename, Path)) .
	  ReturnSuccess(EditorId, Stack)	
	fi
      +
        rec-msg(rename-module, Stack?, EditorId?) .
       	StackPopString(Stack, Stack?, Extension?) .
       	StackPopString(Stack, Stack?, Path?) .
       	StackPopString(Stack, Stack?, NewModulename?) .
	StackIsEmpty(Stack, Empty?) .
	if equal(Empty, true) then
	  ReturnSuccess(EditorId, Stack)
        else
       	  StackPopString(Stack, Stack?, Modulename?) .
	  snd-msg(rename-module(Modulename, NewModulename, Path)) .
	  ReturnSuccess(EditorId, Stack)	
	fi
      +
        rec-msg(import-module, Stack?, EditorId?) .
       	StackPopString(Stack, Stack?, Modulename?) .
	ImportModule(Modulename) .
	ReturnSuccess(EditorId, Stack)
      +
        rec-msg(unimport-module, Stack?, EditorId?) .
       	StackPopString(Stack, Stack?, Modulename?) .
	UnImportModule(Modulename) .
	ReturnSuccess(EditorId, Stack)
      +
	rec-msg(compile-module, Stack?, EditorId?) .
	StackIsEmpty(Stack, Empty?) .
	if equal(Empty, true) then
	  ReturnSuccess(EditorId, Stack)
        else
          StackPopString(Stack,Stack?,Modulename?) .
	  snd-msg(compile-module(Modulename)) .
	  rec-msg(compilation-ready(Modulename)) .
	  ReturnSuccess(EditorId, Stack)	
        fi
      +
	rec-msg(dump-equations, Stack?, EditorId?) .
	StackIsEmpty(Stack, Empty?) .
	if equal(Empty, true) then
	  ReturnSuccess(EditorId, Stack)
        else
          StackPopString(Stack,Stack?,Path?) .
          StackPopString(Stack,Stack?,Modulename?) .
	  snd-msg(dump-equations-given-file(Modulename, Path)) .
	  rec-msg(equations-dumped) .
	  ReturnSuccess(EditorId, Stack)	
        fi
      +
        rec-msg(dump-sdf-definition, Stack?, EditorId?) .
	StackIsEmpty(Stack, Empty?) .
	if equal(Empty, true) then
	  ReturnSuccess(EditorId, Stack)
        else
          StackPopString(Stack,Stack?,Path?) .
          StackPopString(Stack,Stack?,Modulename?) .
	  snd-msg(dump-sdf-definition(Modulename, Path)) .
	  rec-msg(sdf-definition-dumped) .
	  ReturnSuccess(EditorId, Stack)
        fi
      +
	rec-msg(dump-parse-table, Stack?, EditorId?) .
	StackIsEmpty(Stack, Empty?) .
	if equal(Empty, true) then
	  ReturnSuccess(EditorId, Stack)
        else
          StackPopString(Stack,Stack?,Path?) .
          StackPopString(Stack,Stack?,Modulename?) .
	  snd-msg(dump-parse-table-given-file(Modulename, Path, trm)) .
	  rec-msg(parse-table-dumped) .
	  ReturnSuccess(EditorId, Stack)	
        fi
      +
	rec-msg(dump-eqs-parse-table, Stack?, EditorId?) .
	StackIsEmpty(Stack, Empty?) .
	if equal(Empty, true) then
	  ReturnSuccess(EditorId, Stack)
        else
          StackPopString(Stack,Stack?,Path?) .
          StackPopString(Stack,Stack?,Modulename?) .
	  snd-msg(dump-parse-table-given-file(Modulename, Path, eqs)) .
	  rec-msg(parse-table-dumped) .
	  ReturnSuccess(EditorId, Stack)	
        fi
      +
	rec-msg(print-module, Stack?, EditorId?) .
	StackIsEmpty(Stack, Empty?) .
	if equal(Empty, true) then
	  ReturnSuccess(EditorId, Stack)
        else
          StackPopString(Stack,Stack?,Path?) .
          StackPopString(Stack,Stack?,Modulename?) .
	  snd-msg(print-module(Modulename, Path)) .
	  rec-msg(module-printed(Modulename)) .
	  ReturnSuccess(EditorId, Stack)	
	fi
      +
        rec-msg(clear-all, Stack?, EditorId?) .
	CloseAll .
	ReturnSuccess(EditorId, Stack)		
      +
        rec-msg(read-termstore, Stack?, EditorId?) .
	CloseAll .
	TermStoreActivation .
	ReturnSuccess(EditorId, Stack)		
      +
        rec-msg(save-termstore, Stack?, EditorId?) .
	snd-msg(save-termstore) .
	( 
	  rec-msg(saved) .
	  ReturnSuccess(EditorId, Stack)		
	+
	  rec-msg(not-saved(ErrorMessage?)) .
	  snd-note(ui-status(errorf("Saving failed: %s", [ErrorMessage]))) .
	  ReturnFailed(EditorId, Stack)
        )
      +
        rec-msg(clear-history-list, Stack?, EditorId?) .
	snd-msg(clear-history) .
	ReturnSuccess(EditorId, Stack)		
      +
        /* NOTE: in fact, all actions like this one are now hard coded
	   in buttons.tb. We would like to have a separate stack machine
	   action interpreter, and implement new actions without having
	   to adapt the interpreter itself. We have some ideas about how
	   to do this, but for now I will have to add this action...
         */
        rec-msg(asfsdfapigen, Stack?, EditorId?) .
	StackPopString(Stack, Stack?, Path?) .
	StackPopString(Stack, Stack?, Modulename?) .
	snd-msg(asfsdfapigen(Modulename, Path)) .
	rec-msg(asfsdfapigen-done) .
	ReturnSuccess(EditorId, Stack)
      +
        rec-msg(refresh-buttons, Stack?, EditorId?) .
	snd-msg(refresh-buttons) .
	rec-msg(buttons-refreshed) .
	ReturnSuccess(EditorId, Stack)		
      +
        rec-msg(exit, Stack?, EditorId?) .
	shutdown("MetaStudio exiting\n") .
	ReturnSuccess(EditorId, Stack)		
      +
	rec-msg(dup, Stack?, EditorId?) .
        StackPopTerm(Stack,Stack?,Tree?) .
        StackPushTerm(Stack,Stack?,Tree) .
        StackPushTerm(Stack,Stack?,Tree) .
	ReturnSuccess(EditorId, Stack)
      +
	rec-msg(pop, Stack?, EditorId?) .
        StackPopTerm(Stack,Stack?,Tree?) .
	ReturnSuccess(EditorId, Stack)
  ) * delta
endlet

process IfEqual(ButtonAction : term,
                Stack : list,
                ButtonActions : list,
                RStack : list?,
                RButtonActions : list?) is
let
  Tree1       : term,
  Tree2       : term,
  ThenActions : list,
  ElseActions : list,
  IStack      : list
in
  Tree1 := first(Stack) .
  IStack := next(Stack) .
  Tree2 := first(IStack) .
  IStack := next(IStack) .
  snd-msg(equal-trees(Tree1, Tree2)) .
  (
    rec-msg(true) .
    ThenActions := first(args(ButtonAction)) .
    RButtonActions := join(ThenActions, ButtonActions)
  +
    rec-msg(false) .
    ElseActions := first(next(args(ButtonAction))) .
    RButtonActions := join(ElseActions, ButtonActions)
  ) .
  RStack := IStack
endlet

/****************************************************/
/* below here are implementations of button actions */
/****************************************************/

process ShowTree(Modulename: str, Tree: term, ShowLeafs : term) is
let
  Graph : term,
  Id : int
in
  Id := process-id.
  snd-note(ui-status(stat(Id,"Computing graph layout..."))) .
  snd-msg(tree2graph(Modulename, Tree, ShowLeafs)) .
  rec-msg(graph(Graph?)) .
  snd-msg(display-graph("parsetree", Graph)).
  snd-note(ui-status(endstat(Id)))
endlet

process UnParseTerm(Tree : term, Text : str?) is
  snd-msg(unparse(Tree)) .
  rec-msg(unparsed-text(Text?))

process ParseTerm(Sid: term, Modulename: str) is
let
  Id: int,
  Nonterminal: term,
  Pid: int,
  Table: term
in
  Id := process-id
  . snd-note(ui-status(statf(Id, "Parsing term %s", [Modulename])))
  . GetParseTable(Modulename, trm, false, Table?)
  . snd-msg(other-top-sort-hook(trm))
  . rec-msg(other-top-sort-hook-result(sort(Nonterminal?)))
  . create(ParseEditor(Sid, Table, Nonterminal), Pid?)
  .
  (
    rec-msg(parse-editor-ok(Sid))
    . snd-msg(te-clear-focus(Sid))
    . snd-msg(te-display-message(Sid, "Parse OK"))
  +
    rec-msg(parse-editor-failed(Sid))
  )
  . snd-note(ui-status(endstat(Id)))
endlet

process GetTextFromFile(Filename: str, Text: str?) is
let
  ErrorMessage: str
in
  snd-msg(io-read-file(Filename)).
  (
    rec-msg(io-file-contents(Text?)) 
  +
    rec-msg(io-error-reading(ErrorMessage?)) .
    Text := error-text
  )
endlet

process ParseSyntax(Sid: term, Type: term) is
let
  DependingModules: list,
  Id: int,
  ModuleId: str, /* module to be parsed over */
  Modulename: str, /* name of module whose syntax is to be parsed */
  NewModules: list,
  Nonterminal: term,
  Pid: int,
  Table: term,
  Text: str,
  Tree: term
in
  Id := process-id
  . snd-msg(em-get-modulename(Sid))
  . rec-msg(em-modulename(Sid, Modulename?))
  . snd-note(ui-status(statf(Id, "Parsing syntax of %s", [Modulename])))
  . snd-msg(notify-about-changed-modules([Modulename], Type))
  . rec-msg(notify-about-changed-modules-done)
  . snd-msg(get-module-id-hook(Type))
  . rec-msg(get-module-id-hook-result(ModuleId?))
  . GetParseTable(ModuleId, sdf, true, Table?)
  . snd-msg(syntax-top-sort-hook(sdf))
  . rec-msg(syntax-top-sort-hook-result(sort(Nonterminal?)))
  . create(ParseEditor(Sid, Table, Nonterminal), Pid?)
  .
  (
    rec-msg(parse-editor-ok(Sid)) .
    snd-msg(se-get-parse-tree(Sid)) .
    rec-msg(se-parse-tree(Sid, Tree?)) .
    snd-msg(unparse(Tree)) .
    rec-msg(unparsed-text(Text?)) .
    snd-msg(update-module-text-in-db(Modulename, Text, Tree, Type)) .
    (
      rec-msg(no-updating-needed)
      . snd-msg(te-clear-focus(Sid))
      . snd-msg(te-display-message(Sid, "Parse successful"))
    +
      rec-msg(updating-succeeded(DependingModules?)).
      snd-msg(update-module-in-db(Modulename, Tree, Type)) .
      (
	rec-msg(updating-succeeded(NewModules?)).
	snd-msg(notify-about-changed-modules(DependingModules, Type)) .
	rec-msg(notify-about-changed-modules-done) .
	snd-msg(open-modules(NewModules, Type)).
	rec-msg(finished-opening-modules) .
	snd-msg(te-clear-focus(Sid)) .
	snd-msg(te-display-message(Sid, "Parse successful"))
      +
	rec-msg(error-opening(Modulename, name-inconsistent)).
	snd-msg(invalidate-sdf-in-db(Modulename)).
	snd-note(ui-status(
	  errorf("Changing the name of %s is not permitted.",[Modulename])))
      )
    +
      rec-msg(error-opening(Modulename, name-inconsistent)) .
      snd-msg(invalidate-sdf-in-db(Modulename)).
      snd-note(ui-status(
	errorf("Changing the name of %s is not permitted.",[Modulename])))
    )
  +
    rec-msg(parse-editor-failed(Sid)) .
    snd-msg(invalidate-sdf-in-db(Modulename))
  )
  . snd-note(ui-status(endstat(Id)))
endlet

process ParseEquations(Sid: term, Modulename: str) is
let
  Id: int,
  Nonterminal: term,
  Pid: int,
  Table: term,
  Text: str,
  Tree: term
in
  Id := process-id
  . snd-note(ui-status(statf(Id, "Parsing equations of %s", [Modulename])))
  . GetText(Sid, Text?)
  . GetParseTable(Modulename, eqs, true, Table?)
  . snd-msg(get-rules-top-sort)
  . rec-msg(set-rules-top-sort(sort(Nonterminal?)))
  . create(ParseEditor(Sid, Table, Nonterminal), Pid?)
  .
  (
    rec-msg(parse-editor-ok(Sid))
    . snd-msg(se-get-parse-tree(Sid))
    . rec-msg(se-parse-tree(Sid, Tree?))
    . snd-msg(postprocess-semantics-hook(Modulename, Tree))
    . rec-msg(postprocess-semantics-hook-result(Modulename, Tree?))
    . snd-msg(update-eqs-tree-in-db(Modulename, tree(Tree)))
    . rec-msg(eqs-updated)
    . snd-msg(te-clear-focus(Sid))
    . snd-msg(te-display-message(Sid, "Parse successful"))
  +
    rec-msg(parse-editor-failed(Sid))
  )
  . snd-note(ui-status(endstat(Id)))
endlet

/*{{{  process ParseTermIfNecessary(Sid: term, Modulename: str) */

process ParseTermIfNecessary(Sid: term, Modulename: str) is
let
  Registered: bool
in
  IsStructureEditorRegistered(Sid, Registered?)
  .
  if equal(Registered, false)
  then
    ParseTerm(Sid, Modulename)
  else
    tau
  fi
endlet

/*}}}  */
/*{{{  process GetTree(Sid: term, Modulename: str, Tree: term?, Available: bool?) */

process GetTree(Sid: term, Modulename: str, Tree: term?, Available: bool?) is
let
  Registered: bool
in
  ParseTermIfNecessary(Sid, Modulename)
  . IsStructureEditorRegistered(Sid, Registered?)
  .
  if equal(Registered, true)
  then
    snd-msg(se-get-parse-tree(Sid))
    . rec-msg(se-parse-tree(Sid, Tree?))
    . Available := true
  else
    Available := false
  fi
endlet

/*}}}  */

process ReplaceRoot(EditorId: term, Tree: term) is
let
  Focus : term
in
  snd-msg(se-move-focus-to-root(EditorId)) .
  rec-msg(se-focus-moved(EditorId, Focus?)) .
  ReplaceFocus(EditorId, Tree)
endlet


process GetFocus(Sid: term, Tree: term?) is
  snd-msg(se-get-cursor(Sid))
  . rec-msg(se-cursor(Sid, Tree?))

process ReplaceFocus(Sid: term, Tree: term) is
let
  TotalTree : term,
  Text : str,
  Focus : term,
  Filename : str,
  ErrorMessage : str
in
  printf("button-actions.tb:ReplaceFocus is stuk!\n")
#if 0
  snd-msg(se-replace-focussed-tree(Sid, Tree)) .
  rec-msg(se-focus(Focus?)) .
  snd-msg(se-get-parse-tree(Sid)) .
  rec-msg(se-parse-tree(Sid, TotalTree?)) .
  snd-msg(unparse(TotalTree)) .
  rec-msg(unparsed-text(Text?)) .
  snd-msg(get-editor-filename(Sid)) .
  rec-msg(editor-filename(Filename?)) .
  snd-msg(io-write-text-file(Filename,[Text])) .
  (
    rec-msg(io-file-written) . 
    snd-msg(te-reread-contents(Sid)) .
    printf("snd-msg(te-set-cursor-at-focus(Sid, Focus))\n") .
    snd-msg(te-set-focus(Sid, Focus))
  +
    rec-msg(io-file-not-written(ErrorMessage?)) .
    snd-note(ui-status(errorf("%s: %s",[Filename, ErrorMessage])))
  )
#endif
endlet

process CheckTreeSort(Tree: term, Sort: str, RTree: term?) is
let 
  TreeSort : str 
in
  snd-msg(se-check-tree-sort(Sort, Tree)) .
  ( 
    rec-msg(se-wrong-sort(TreeSort?)) .
    snd-note(ui-status(errorf("Top sort %s of tree does not match %s", 
                              [TreeSort, Sort]))) .
    RTree := error-tree
  +
    rec-msg(se-sort-ok) .
    RTree := Tree
  )
endlet

process ReduceTerm(Tree: term, Modulename: str, NormalForm: term?) is
let
  Summary: term,
  Equations: term,
  Id: int,
  Pid: int,
  Specification: term
in
  Id := process-id .
  snd-msg(open-modules([Modulename], sdf)) .
  rec-msg(finished-opening-modules) .
  snd-note(ui-status(stat(Id, "Retrieving equations"))) .
  create(GetSpecification(Modulename), Pid?)
  .
  (
    rec-msg(specification(Specification?)) .
    GetSpecificationEquations(Specification, Equations?) .
    snd-note(ui-status(endstat(Id))).
    snd-msg(interpret-term-hook(Modulename, Equations, Tree)).
    rec-msg(interpret-term-hook-result(NormalForm?))
  +
    rec-msg(specification-incomplete(Summary?)) .
    snd-note(ui-status(endstat(Id))) .
    ShowSummaryInGUI(Summary) .
    NormalForm := error-tree
  )
endlet

process ActivateEditorWithTree(Tree: term, Modulename: str, Filename: str) is
let
  ErrorMessage: str,
  NewModulename: str,
  Pid: int,
  Sid: term,
  Text: str
in
  if not-equal(Tree, error-tree)
  then
    snd-msg(unparse(Tree)) . 
    rec-msg(unparsed-text(Text?)) .
    snd-msg(io-write-text-file(Filename, [Text])) .
    (
      rec-msg(io-file-written) .
      create(EditTerm(Filename, Modulename), Pid?)
      . rec-msg(term-editor-started(Filename, Modulename, Sid?))
    +
      rec-msg(io-file-not-written(ErrorMessage?)) .
      snd-note(ui-status(errorf("%s: %s",[Filename, ErrorMessage])))
    )
  fi
endlet

process ActivateEditorWithString(Text: str, Modulename: str, Filename: str) is
let
  ErrorMessage: str,
  NewModulename: str,
  Pid: int,
  Sid: term
in
  snd-msg(io-write-text-file(Filename, [Text])) .
  (
    rec-msg(io-file-written) .
    create(EditTerm(Filename, Modulename), Pid?)
    . rec-msg(term-editor-started(Filename, Modulename, Sid?))
  +
    rec-msg(io-file-not-written(ErrorMessage?)) .
    snd-note(ui-status(errorf("%s: %s",[Filename, ErrorMessage])))
  )

endlet

process ImportModule(Modulename : str) is
let
  Choices : list,
  Chosen : str
in
  snd-msg(get-all-module-names) .
  rec-msg(all-module-names(Choices?)) .
  snd-msg(show-list-choice(Modulename, "Choose a module to import", Choices)) .
  (
    rec-msg(list-choice(Modulename, Chosen?)) .
    snd-msg(import-module(Modulename, Chosen))
  +
    rec-msg(cancel-list-choice(Modulename)) 
  )
endlet  

process UnImportModule(Modulename : str) is
let
  Choices : list,
  Chosen : str
in
  snd-msg(get-imported-modules(Modulename)) .
  rec-msg(imported-modules(Choices?)) .
  snd-msg(show-list-choice(Modulename, "Choose a module to remove from the imports", Choices)) .
  (
    rec-msg(list-choice(Modulename, Chosen?)) .
    snd-msg(unimport-module(Modulename, Chosen)) 
  +
    rec-msg(cancel-list-choice(Modulename)) 
  )
endlet  

process ShowAreaHandler(Location: term, Message: str) is
let
  Pid: int,
  Sid: term
in
  Pid := process-id
  .
  (
    rec-msg(session(Pid, Sid?))
    . ShowLocation(Sid, Location, Message)
  +
    rec-msg(no-such-session(Pid))
  )
endlet

process ShowErrorHandler(Error: term) is
let
  Pid: int,
  Sid: term
in
  Pid := process-id
  .
  (
    rec-msg(session(Pid, Sid?))
    . ShowError(Sid, Error)
  +
    rec-msg(no-such-session(Pid))
  )
endlet

process EditLocation(Pid: int, Location: term) is
let
  EditorType: term,
  Filename: str,
  Sid: term
in
  snd-msg(get-location-filename(Location))
  . rec-msg(location-filename(Filename?))
  . GetEditorType(Filename, EditorType?)
  . StartEditor(Filename, EditorType)
  . snd-msg(em-get-session-by-filename(Filename))
  .
  (
    rec-msg(em-session(Filename, Sid?))
    . snd-msg(session(Pid, Sid))
  +
    rec-msg(em-no-such-session(Filename))
    . snd-msg(no-such-session(Pid))
  )
endlet
