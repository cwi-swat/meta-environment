/* $Id$ */

process Module-Utilities is
let
  Id : int,
  ModuleName1 : str,
  ModuleName2 : str,
  Path : str,
  Option1 : term
in
  Id := process-id.
  (
    rec-msg(rename-module(ModuleName1?, ModuleName2?, Path?)) .
    snd-note(ui-status(statf(Id, 
             "Renaming %s to %s",[ModuleName1,ModuleName2]))).
    DoRenameModule(ModuleName1, ModuleName2, Path).
    snd-note(ui-status(endstat(Id)))
  +
    rec-msg(copy-module(ModuleName1?, ModuleName2?, Path?)).
    snd-note(ui-status(statf(Id, 
             "Copying %s to %s",[ModuleName1,ModuleName2]))).
    DoCopyModule(ModuleName1, ModuleName2, Path).
    snd-note(ui-status(endstat(Id)))
  +
    rec-msg(import-module(ModuleName1?, ModuleName2?, Path?)).
    snd-note(ui-status(statf(Id, 
             "Adding %s to imports of %s",[ModuleName2,ModuleName1]))).
    DoImportModule(ModuleName1, ModuleName2, Path).
    snd-note(ui-status(endstat(Id)))
  +
    rec-msg(delete-module(ModuleName1?)) .
    snd-note(ui-status(statf(Id, 
             "Deleting %s",[ModuleName1]))).
    DoDeleteModule(ModuleName1).
    snd-note(ui-status(endstat(Id)))
  +
    rec-msg(unimport-module(ModuleName1?, ModuleName2?, Path?)).
    snd-note(ui-status(statf(Id, 
             "Removing %s from imports of %s",[ModuleName2,ModuleName1]))).
    DoUnimportModule(ModuleName1, ModuleName2, Path).
    snd-note(ui-status(endstat(Id)))
  +
    rec-msg(revert-module(ModuleName1?)).
    snd-note(ui-status(statf(Id, 
             "Reverting %s",[ModuleName1]))).
    DoRevertModule(ModuleName1).
    snd-note(ui-status(endstat(Id)))
  +
    rec-msg(close-module(ModuleName1?, Option1?)).
    snd-note(ui-status(statf(Id, 
             "Closing %s",[ModuleName1]))).
    DoCloseModule(ModuleName1, Option1).
    snd-note(ui-status(endstat(Id)))
  ) *
  delta
endlet

process DoCloseModule(ModuleName : str, Recursive : term) is
let
  Status : term,
  Changed : list
in
  Status := success.
  if equal(Recursive,recursive) then
    DoRecursiveCloseModule(ModuleName, Status?)
  else 
    SoftCloseModuleInDB(ModuleName, Status?).
    if equal(Status,success) then
      CloseModuleInUI(ModuleName)
    else tau fi
  fi.
  if not(equal(Status, success)) then
    snd-note(ui-status(errorf("Module %s not closed because other modules depend on it", [ModuleName])))
  else tau fi
endlet

process DoRecursiveCloseModule(ModuleName : str, Status : term?) is
let
  Imports : list,
  MoreImports : list,
  Closed : list,
  Import : str
in
  Status := success.
  snd-msg(get-imported-modules(ModuleName)).
  rec-msg(imported-modules(Imports?)).
  SoftCloseModuleInDB(ModuleName, Status?).
  if equal(Status, success) then
    CloseModuleInUI(ModuleName).
    Closed := [].
    if not(equal(Imports, [])) then
      Import := first(Imports).
      Imports := next(Imports).
      FilterElement(Import, Imports?).
      snd-msg(get-imported-modules(Import)).
      rec-msg(imported-modules(MoreImports?)).
      SoftCloseModuleInDB(Import, Status?).
      if equal(Status,success) then
        Closed := join(Import, Closed).
        /* continue only if closing succeeded */
        Imports := join(Imports, MoreImports)
      else tau fi
    fi*
    if equal(Imports,[]) then 
      CloseModulesInUI(Closed).
      /* only give error if top module could not be closed */
      Status := success 
    fi
  else tau fi
endlet

process FilterElement(Elem : term, List : list?) is
let
  OldList : list,
  NewList : list,
  Head : term

in
  OldList := List.
  NewList := [].
  if not(equal(OldList,[])) then
    Head := first(OldList).
    OldList := next(OldList).
    if not(equal(Elem,Head)) then
      NewList := join(Head, NewList)
    else tau fi
  fi *
  if equal(OldList,[]) then 
    List := NewList
  fi
endlet

process DoRevertModule(ModuleName : str) is
  HardCloseModuleInDB(ModuleName).
  snd-msg(open-modules([ModuleName])) .
  rec-msg(finished-opening-modules).
  snd-msg(module-reverted(ModuleName))

process DoDeleteModule(ModuleName : str) is
let
  Changed : list
in
    RemoveModuleFromDisk(ModuleName).
    DeleteEditors(ModuleName).
    snd-msg(delete-module-from-db(ModuleName)) .
    rec-msg(changed-modules(Changed?)) .
    CloseModuleInUI(ModuleName).
    SaveSdfModules(Changed).
    snd-msg(notify-about-changed-modules(Changed, "sdf")) .
    rec-msg(notify-about-changed-modules-done)
endlet

process DoRenameModule(Old : str, New : str, Path : str) is
let
  Status : term,
  Changed : list,
  RealNew : str
in
  Status := success.
  GetRealModuleName(New, Path, Status?, RealNew?).
  if equal(Status, success) then
    CheckExistence(RealNew, Status?).
    if equal(Status, success) then
      DeleteEditors(Old). tau.
      if equal(Status, success) then
        RenameModuleInDB(Old, RealNew, Path, Status?, Changed?). tau.
        if equal(Status, success) then 
          SaveSdfModules(Changed). tau.
          SaveAsfSdfModule(RealNew). tau.
          RemoveModuleFromDisk(Old). tau
        else tau fi
      else tau fi
    else tau fi
  else tau fi.
  HandleRenameModuleErrors(Old, RealNew, Status) . tau
endlet

process DoCopyModule(Old : str, New : str, Path : str)  is
let
  Status : term,
  Changed : list,
  RealNew : str
in
  Status := success.
  GetRealModuleName(New, Path, Status?, RealNew?).
  if equal(Status, success) then
    CheckExistence(RealNew, Status?).
    if equal (Status, success) then
      CopyModuleInDB(Old, RealNew, Path, Status?, Changed?).
      if equal (Status, success) then
        SaveSdfModules(Changed).
	SaveAsfSdfModule(RealNew)
      else tau fi
    else tau fi
  else tau fi.
  HandleCopyModuleErrors(Old, RealNew, Status) . tau
endlet

process DoImportModule(Mod : str, Import : str, Path : str)  is
let
  Status : term,
  Changed : list,
  RealImport : str
in
  Status := success.
  GetRealModuleName(Import, Path, Status?, RealImport?).
  if equal(Status, success) then
    Status := success.
    AddImportInDB(Mod, RealImport, Path, Status?, Changed?).
    if equal (Status, success) then
      SaveSdfModules(Changed).
      SaveAsfSdfModule(Mod)
    else tau fi
  else tau fi
endlet

process DoUnimportModule(Mod : str, Import : str, Path : str) is
let
  Status : term,
  Changed : list,
  RealImport : str
in
  Status := success.
  GetRealModuleName(Import, Path, Status?, RealImport?).
  if equal(Status, success) then
    Status := success.
    RemoveImportInDB(Mod, RealImport, Path, Status?, Changed?).
    if equal(Status, success) then
      SaveSdfModules(Changed).
      SaveAsfSdfModule(Mod)
    else tau fi
  else tau fi
endlet


process GetRealModuleName(Name : str, Path : str, Status : term?,
                          RealName : str?)
is
let
  ErrMsg : str
in
  snd-msg(compute-module-name(Path, Name)).
  (
    rec-msg(module-name-not-computed(ErrMsg?)).
    Status := module-name-not-computed
  + 
    rec-msg(computed-module-name(RealName?))
  )
endlet

process SaveSdfModules(Modules : list) is
let
  Runner : list,
  Module : str
in
  Runner := Modules.
  if not-equal(Runner, []) then
    Module := first(Runner) .
    snd-msg(save-sdf-module(Module)) .
    rec-msg(saved-sdf-module(Module)) .
    Runner := next(Runner)
  fi * 
  if equal(Runner, []) then
    tau
  fi
endlet

process SaveAsfSdfModule(Module : str) is
   snd-msg(save-asfsdf-module(Module)) .
   rec-msg(saved-asfsdf-module(Module))

process RemoveModuleFromDisk(Module : str) is
  snd-msg(remove-module(Module)) .
  rec-msg(removed-module)

process SoftCloseModuleInDB(ModuleName : str, Status : term?) is
let 
  Depending : list,
  Changed : list
in
  snd-msg(get-all-depending-modules(ModuleName)).
  rec-msg(all-depending-modules(Depending?)).
  if equal(Depending,[]) then
    HardCloseModuleInDB(ModuleName).
    Status := success
  else
    Status := modules-depend-on-this-module
  fi
endlet

process HardCloseModuleInDB(ModuleName : str) is
let
  Changed : list
in
  snd-msg(delete-module-from-db(ModuleName)).
  rec-msg(changed-modules(Changed?)).
  snd-msg(notify-about-changed-modules(Changed, "sdf")) .
  rec-msg(notify-about-changed-modules-done)
endlet

  
process CloseModuleInUI(ModuleName : str) is
  snd-msg(ui-delete-modules([ModuleName]))

process CloseModulesInUI(Modules : list) is
  snd-msg(ui-delete-modules(Modules))

process RenameModuleInDB(Old : str, New : str, Path : str, Status : term?, 
                         Changed : list?)
is
  snd-msg(rename-module-in-db(Old, New, Path)) .
  (
    rec-msg(renaming-done(Old, Changed?)) 
  + 
    rec-msg(renaming-not-done(Old)).
    Status := module-not-changed
  )

process CopyModuleInDB(Old : str, New : str, Path : str, Status : term?, 
                       Changed : list?)
is
  snd-msg(copy-module-in-db(Old, New, Path)) .
  (
    rec-msg(copy-done(Old, Changed?))
  +
    rec-msg(copy-not-done(Old)).
    Status := module-not-copied
  )

process AddImportInDB(Mod : str, Import : str, Path : str, Status : term?, 
                       Changed : list?)
is
  snd-msg(add-import-in-db(Mod, Import, Path)) .
  (
    rec-msg(add-import-done(Mod, Changed?))
  +
    rec-msg(add-import-not-done(Mod)).
    Status := import-not-done
  )

process RemoveImportInDB(Mod : str, Import : str, Path : str, Status :term?,
                         Changed : list?)
is
  snd-msg(remove-import-in-db(Mod, Import, Path)) .
  (
    rec-msg(remove-import-done(Mod, Changed?))
  +
    rec-msg(remove-import-not-done(Mod)).
    Status := remove-import-not-done
  )

process CheckExistence(New : str, Status : term?) is
    snd-msg(is-module-in-db(New)) .
    (
      rec-msg(exists-in-module-db(New)).
      Status := module-exists-in-db
    +
      rec-msg(not-exists-in-module-db(New))
    ).
    snd-msg(exists-syntax-module(New)) .
    (
      rec-msg(syntax-module-exists(New)) .
      Status := module-exists-on-disk
      +
      rec-msg(syntax-module-not-exists(New))
    )

process DeleteEditors(Module : str) is
let
  Depending : list,
  Mod : str
in
  snd-msg(delete-editors-for-module(Module)).
  snd-msg(get-all-depending-modules(Module)) .
  rec-msg(all-depending-modules(Depending?)).
  if not-equal(Depending, []) then
    Mod := first(Depending) .
    snd-msg(delete-editors-for-module(Mod)) .
    Depending := next(Depending)
  fi * 
  if equal(Depending, []) then
    tau
  fi 
endlet

process HandleRenameModuleErrors(Old : str, New : str, Status : term) is
  if not-equal(Status, success) then
    snd-note(ui-status(errorf("Error during renaming of %s to %s: %s\n", 
                            [Old, New, Status])))
  else
    tau
  fi

process HandleCopyModuleErrors(Old : str, New : str, Status : term) is
  if not-equal(Status, success) then
    snd-note(ui-status(errorf("Error during copying of %s to %s: %s\n", 
                            [Old, New, Status])))
  else
    tau
  fi
