process RenderGraph(GraphPanelId: str, Graph: term?) is
  snd-msg(gp-render-graph(GraphPanelId, Graph))
  . rec-msg(gp-rendered-graph(GraphPanelId, Graph?))
  . snd-msg(gl-layout-graph(Graph))
  . rec-msg(gl-graph(Graph?))

process ShowTree(Modulename: str, Tree: term, ShowLeafs: term) is
let
  Graph: term
in
  snd-msg(gc-tree-to-graph(Modulename, Tree, ShowLeafs))
  . rec-msg(gc-graph(Graph?))
  . RenderGraph("parsetree", Graph?)
  . snd-msg(gp-display-graph("parsetree", Graph))
endlet

process DrawImportGraph is
let
  ImportGraph: term,
  ImportRelations: list
in
  snd-msg(ts-get-key-value-pairs("import-relations"))
  . rec-msg(ts-pairs(ImportRelations?))
  . snd-msg(mb-set-modules(ImportRelations))
  . snd-msg(sig-import-relation-to-graph(ImportRelations))
  . rec-msg(sig-graph(ImportRelations, ImportGraph?))
  . RenderGraph("import-graph", ImportGraph?)
  . snd-msg(gp-display-graph("import-graph", ImportGraph))
endlet

process ImportGraphPainter is
  subscribe(ts-table-updated("import-relations"))
  . subscribe(start-modules-batch)
  . subscribe(end-modules-batch)
  .
  (
    rec-note(ts-table-updated("import-relations"))
    . DrawImportGraph()
  +
    rec-note(start-modules-batch)
    . unsubscribe(ts-table-updated("import-relations"))
    . rec-note(end-modules-batch)
    . subscribe(ts-table-updated("import-relations"))
    . DrawImportGraph()
  )
  *
  delta

toolbus(ImportGraphPainter)
