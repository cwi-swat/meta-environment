#ifndef __CACHING__
#define __CACHING__

#include <child-attribute-changed-event.tb>
#include <term-store.idef>

/* sort of generic caching processes */
process ClearCacheHandler(TableName: str, 
                          Namespace: term, 
                          AttributeName: term, 
                          OldValue: term,
                          NewValue: term) is
let
  AttributeEvent: attribute-changed-event,
  ChildAttributeEvent: child-attribute-changed-event,
  ModuleId: term,
  Value: term
in
  MM-Subscribe-Attribute-Changed(<term>,Namespace,AttributeName,OldValue,NewValue)
  . MM-Subscribe-Child-Attribute-Changed(<term>,<term>,Namespace,AttributeName,OldValue,NewValue)
  .
  (
    (
      rec-note(mm-attribute-changed(AttributeEvent?))
      . ACE-GetModuleId(AttributeEvent, ModuleId?)
    +
      rec-note(mm-child-attribute-changed(ChildAttributeEvent?))
      . CACE-GetModuleId(ChildAttributeEvent, ModuleId?)
    )
    .
    snd-msg(ts-remove-value(TableName, ModuleId))
    . printf("%t: key %t removed from cache\n", TableName, ModuleId)
  )
  * delta
endlet

process InitCache(TableName: str, Namespace: term, NewValue: term) is
let
  Pid : int
in
  snd-msg(ts-add-table(TableName, "term"))
  . create(ClearCacheHandler(TableName, Namespace,"status",<term>,NewValue), Pid?)
endlet

process GetCachedValue(TableName: str, Key: term, Value: term?) is
  snd-msg(ts-get-term-value(TableName, Key))
  .
  (
    rec-msg(ts-value(TableName, Key, Value?)) 
    . printf("%t: key %t in cache\n", TableName, Key)
  +
    rec-msg(ts-no-value(TableName, Key))
    . printf("%t: key %t NOT in cache\n", TableName, Key)
    . Value := UNDEFINED
  )

process PutCachedValue(TableName: str, Key: term, Value: term) is
  printf("%t: stored key %t in cache\n", TableName, Key)
  . snd-msg(ts-put-term-value(TableName, Key, Value))

#endif /* __CACHING__ */
