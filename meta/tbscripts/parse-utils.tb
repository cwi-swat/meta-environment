/* $Id$ */       

process ObtainParseTable(ModuleName : str, Type : term, Checking : term, 
                         Table : term?) is
let
  TermType : term
in
  if equal(Type, sdf) then
    snd-msg(open-language(sdf)) .
    (
      rec-msg(parse-table(TermType?, Table?))
    +
      rec-msg(no-parse-table) .
      Table := no-table
    )
  else
    snd-msg(obtain-parse-table-hook(Type, ModuleName, Checking)) .
    rec-msg(obtain-parse-table-hook-result(Table?)) 
  fi
endlet

process ParseString(ModuleName : str, Path : str, Type : term, 
                    Checking : term, Nonterminal : str, Text : str,
		    Tree : term?, ParseError : term?) is
let
  Id         : term,
  ModuleId   : term,
  Table      : term
in
  Id := process-id .     
  ObtainParseTable(ModuleName, Type, Checking, Table?) .
  if equal(Type, eqs) then
    ModuleId := quote(eqs(ModuleName))
  else
    ModuleId := quote(trm(ModuleName))
  fi .
  if equal(Table, no-table) then 
    Tree := error-tree .
    ParseError := no-parse-table
  else
    snd-note(ui-status(statf(Id,"Parsing %s", [ModuleId]))).
    snd-msg(Id, parse-string-given-table(ModuleId, Table, Nonterminal, Text, Path)).
    rec-msg(parse-result-asfix2me(Id, Tree?, ParseError?)) .
    snd-note(ui-status(endstat(Id)))
  fi
endlet

process ProcessTree(ModuleName : str, EditorId : term, 
		    Focus : term, Tree : term, ParseError : term) is
let
  FileName : str,
  FunSym   : str,
  NewTree  : term
in
  if not-equal(Tree, error-tree) then
    snd-msg(get-editor-filename(EditorId)) .
    rec-msg(editor-filename(FileName?)) .
    snd-msg(add-posinfo-packed(FileName, Tree)) .
    rec-msg(tree-with-pos-info(NewTree?)) .
    snd-msg(replace-focus(EditorId, Focus, NewTree)) .
    FunSym := fun(ParseError) .
    if equal(FunSym, "no-errors") then
      snd-msg(parse-ok(ModuleName))
    else
      tau
    fi
  else
    tau
  fi
endlet

process ProcessParseError(ParseError: term) is
  if equal(fun(ParseError), "no-errors") then
    tau
  else
    snd-note(remove-feedback-summary(ParseError)) .
    snd-note(show-feedback-summary(ParseError)) 
  fi

process HandleParseErrors(ModuleName: str, EditorId: term,
			  Focus: term, ErrorSummary: term) is
  if equal(fun(ErrorSummary), "no-errors") then
    tau
  else
    /* For now, set the error message right here. Change when
     * parse table retrieval uses the error API at which time
     * we don't have to construct an ad-hoc error message here.
     */
    if equal(fun(ErrorSummary), "no-parse-table") then
      snd-msg(te-display-message(EditorId, "No parse table available"))
    else
      printf("HandleParseErrors: ErrorSummary = %t\n\n", ErrorSummary) .
      ShowSummary(ErrorSummary)
    fi .
    snd-msg(parse-failed(ModuleName, Focus))
  fi
