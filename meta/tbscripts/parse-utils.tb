/* $Id$ */       

process ParseString(ModuleName: str, Type: term, 
                    Checking: term, Nonterminal: str, Text: str,
		    ParseResult: term?, Errors: list?) is
let
  Error: term,
  Id: term,
  ModuleId: term,
  Table: term
in
  Id := process-id .     
  GetParseTable(ModuleName, Type, Checking, Table?) .
  if equal(Type, eqs) then
    ModuleId := quote(eqs(ModuleName))
  else
    ModuleId := quote(trm(ModuleName))
  fi .
  if equal(Table, no-table) then 
    ParseResult := to-be-removed
    . Errors := no-parse-table
    . printf("ParseString: no-parse-table unhandled\n")
  else
    snd-note(ui-status(statf(Id,"Parsing %s", [ModuleId])))
    . Errors := []
    . snd-msg(sglr-parse(Text, Table, Nonterminal))
    .
    (
      rec-msg(sglr-parse-tree(ParseResult?))
    +
      rec-msg(sglr-parse-forest(ParseResult?, Errors?))
    +
      rec-msg(sglr-parse-error(Errors?))
    )
    . snd-note(ui-status(endstat(Id)))
  fi
endlet

process ProcessParseError(ParseError: term) is
  if equal(fun(ParseError), "no-errors") then
    tau
  else
    snd-note(remove-feedback-summary(ParseError)) .
    snd-note(show-feedback-summary(ParseError)) 
  fi

process HandleParseError(Sid: term, Error: term) is
let
  Filename: str,
  Result: term
in
  GetFilename(Sid, Filename?)
  . snd-msg(es-add-filename-in-error(Filename, Error))
  . rec-msg(es-filename-in-error(Filename, Result?))
  . printf("HandleParseError:\n\tbefore: %t\n\tafter: %t\n", Error, Result)
  . ShowError(Result)
  . ProcessParseError(Result)
endlet

#if 0
  printf("HandleParseError(%t, %t) to be handled\n", EditorId, Error)
  if equal(Errors, []) then
    tau
  else
    /* For now, set the error message right here. Change when
     * parse table retrieval uses the error API at which time
     * we don't have to construct an ad-hoc error message here.
     */
    if equal(fun(ErrorSummary), "no-parse-table") then
      snd-msg(te-display-message(EditorId, "No parse table available"))
    else
      printf("HandleParseError: ErrorSummary = %t\n\n", ErrorSummary) .
      ShowSummary(ErrorSummary)
    fi
  fi
#endif
