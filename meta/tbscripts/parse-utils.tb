#ifndef __PARSE_FOCUSES__
#define __PARSE_FOCUSES__

#include <sglr.idef>
#include <unparser.idef>
#include <position-annotator.idef>
#include <error-support.idef>
#include <restorebrackets.idef>
#include <ambiguity-reporter.idef>

process AnnotateTree(Tree: term, File: str, AnnotatedTree: term?) is
  AddJob("Adding position information")
  . snd-msg(add-posinfo-packed(File, Tree))
  . rec-msg(tree-with-pos-info(AnnotatedTree?))
  . JobDone("Adding position information")

process ReportAmbs(Tree: term, File: str, Summary: term?) is
  AddJob("Computing ambiguity report")
  . snd-msg(ar-report-ambiguities(Tree, File))
  . rec-msg(ar-ambiguity-report(Summary?, File))
  . JobDone("Computing ambiguity report")

process HasTextChanged(Sid: term, TextChanged: bool?) is
  snd-msg(te-is-modified(Sid))
  . rec-msg(te-is-modified(Sid, TextChanged?))

process AddFilenameToParseError(Error: term, Filename: str, Result: term?) is
  snd-msg(es-add-filename-in-error(Filename, Error))
  . rec-msg(es-filename-in-error(Filename, Result?))

process ParseText(Pid: int, Text: str, Table: term, Nonterminal: term, Heuristics: term) is
let
  Error: term,
  ParseResult: term
in
  snd-msg(sglr-parse(Text, Table, Nonterminal, Heuristics))
  . printf("parsing\n")
  . AddJob("Parsing")
  .
  (
    rec-msg(sglr-parse-tree(ParseResult?))
    . snd-msg(parse-tree(Pid, ParseResult))
  +
    rec-msg(sglr-parse-forest(ParseResult?, Error?))
    . snd-msg(parse-forest(Pid, ParseResult, Error))
  +
    rec-msg(sglr-parse-error(Error?))
    . snd-msg(parse-error(Pid, Error))
  )
  . JobDone("Parsing")
endlet

process AmbiguityHandler(ParseResult: term, Path: str) is
let
  Summary : term
in
    RemoveSummary("ambtracker", Path)
    . ReportAmbs(ParseResult, Path, Summary?)
    . DisplaySummary(Summary)
endlet

process ParseTreeHandler(ModuleId: term, Path: str) is
let
  ErrorMessage: term,
  ParseError: term,
  ParseResult: term,
  Pid: int,
  Summary: term,
  P : int
in
  Pid := process-id
  .
  (
    rec-msg(parse-tree(Pid, ParseResult?))
    . RemoveSummary("sglr", Path)
    . create(AmbiguityHandler(ParseResult, Path), P?)
    . snd-msg(parse-handler-done(Pid, ModuleId, ParseResult))
  +
    rec-msg(parse-error(Pid, ErrorMessage?))
    . AddFilenameToParseError(ErrorMessage, Path, ParseError?)
    . snd-msg(es-make-summary("sglr", Path, [ParseError]))
    . rec-msg(es-summary(Summary?))
    . RemoveSummary("sglr", Path)
    . RemoveSummary("ambtracker", Path)
    . DisplaySummary(Summary)
    . snd-msg(parse-handler-done(Pid))
  )
endlet

process UnParseTerm(Tree: term, Text: str?) is
  snd-msg(unparse(Tree))
  . rec-msg(unparsed-text(Text?))

process ParseErrorToSummary(ParseError:term, Sid: term, Summary:term?) is
let 
  Path : str
in
  snd-msg(em-get-path(Sid)) 
  .
  (
    rec-msg(em-path(Sid, Path?))
    . snd-msg(es-make-summary("sglr", Path, [ParseError]))
    . rec-msg(es-summary(Summary?))
  +
    rec-msg(no-such-session(Sid))
  )
endlet

process RestoreTermBrackets(ModuleId: term, Tree: term, Result: term?) is
let
  Table: term
in
  GetParseTable(ModuleId, trm, Table?)
  . 
  if not-equal(Table, UNDEFINED) then
    snd-msg(restore-brackets(Tree, Table))
    . rec-msg(brackets-restored(Result?))
  else
    Result := UNDEFINED
  fi
endlet

process AddTermBrackets(ModuleId: term, Tree: term, Result: term?) is
let
  Table: term
in
  GetParseTable(ModuleId, trm, Table?)
  . 
  if not-equal(Table, UNDEFINED) then
    snd-msg(add-brackets(Tree, Table))
    . rec-msg(brackets-added(Result?))
  else
    Result := UNDEFINED
  fi
endlet



#endif /*__PARSE_FOCUSES__*/
