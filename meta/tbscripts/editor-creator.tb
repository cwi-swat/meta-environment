/*

    Meta-Environment - An environment for language prototyping.
    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, 
                        The Netherlands. 

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

  $Id$

*/

process DeleteEditorsForModule(ModuleName: str) is
let
  EditorId   : term,
  EditorList : list
in
  snd-msg(get-editors-by-module(ModuleName)) .
  rec-msg(editors-by-module(EditorList?)) .
  (
    if not-equal(EditorList, []) then
      EditorId := first(EditorList) .
      snd-msg(delete-text-editor(EditorId)) .
      snd-msg(delete-structure-editor(EditorId)) .
      snd-msg(delete-editor(EditorId)) .
      snd-msg(kill-editor(EditorId)) .
      EditorList := next(EditorList)
    fi
  ) *
  if equal(EditorList, []) then
    tau
  fi
endlet

process EditorCreator is
let
  Id         : int,
  Path       : term,
  Time       : term,
  Tree       : term,
  EditorId   : term,
  Text       : str,
  ModuleName : str,
  FileName   : str
in
  create(EditorManager, Id?) .
  (
    %% Edit a Syntax file
    rec-msg(edit-syntax(ModuleName?)) .
    snd-msg(get-sdf2-path-from-db(ModuleName)) .
    rec-msg(path(FileName?)) .
    snd-msg(get-editor-id(FileName, ModuleName)) .
    (
      rec-msg(new-editor(FileName, EditorId?)) .
      create(TextEditor("syntax", EditorId), Id?) .
      snd-msg(set-filename(EditorId, FileName)) .
      create(EditSyntax(EditorId, ModuleName), Id?)
    +
      rec-msg(existing-editor(FileName, EditorId?)) .
      snd-msg(move-editor-to-front(EditorId))
    )
  +
    %% Edit an Equations file
    rec-msg(edit-equations(ModuleName?)) .
    snd-msg(get-eqs-path-from-db(ModuleName)) .
    rec-msg(path(FileName?)) .
    snd-msg(get-editor-id(FileName, ModuleName)) .
    (
      rec-msg(new-editor(FileName, EditorId?)) .
      create(TextEditor("equations", EditorId), Id?) .
      snd-msg(set-filename(EditorId, FileName)) .
      create(EditEquations(EditorId, ModuleName), Id?)
    +
      rec-msg(existing-editor(FileName, EditorId?)) .
      snd-msg(move-editor-to-front(EditorId))
    )
  +
    %% Edit a Term from file
    rec-msg(edit-term-file(ModuleName?, FileName?)) .
    snd-msg(get-editor-id(FileName, ModuleName)) .
    (
      rec-msg(new-editor(FileName, EditorId?))
    +
      rec-msg(existing-editor(FileName, EditorId?)) .
      snd-msg(delete-text-editor(EditorId)) .
      snd-msg(delete-structure-editor(EditorId))
    ) .
    create(TextEditor("term", EditorId), Id?) .
    snd-msg(open-trm-file(FileName)) .
    (
      rec-msg(opened-file(FileName, text(Text?), Path?, Time?)) .
      snd-msg(set-filename(EditorId, Path)) .
      create(EditTerm(EditorId, ModuleName, Text), Id?)
      +
      rec-msg(error-opening(FileName)) .
      snd-msg(set-filename(EditorId, FileName)) .
      create(EditTerm(EditorId, ModuleName, ""), Id?)
    )
  +
    rec-msg(text-editor-disconnected(EditorId?)) .
	  snd-msg(kill-editor(EditorId)) .
    rec-msg(kill-editor-done(EditorId)).
    snd-msg(delete-structure-editor(EditorId)) .
    snd-msg(delete-editor(EditorId))
  +
    rec-msg(delete-editors-for-module(ModuleName?)) .
    DeleteEditorsForModule(ModuleName)
  )
  * delta
endlet
