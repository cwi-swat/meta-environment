/* This used to be the module-db.idef, it now (temporarily) serves as
 * a wrapper for a number of new tools that have replaced the module-db.
 *
 */

#include <sdf-modules.idef>
#include <sdf-renaming.idef>
#include <term-store.idef>

process Stripper(Values : list, StrippedValues : list?) is
let
  Value : term,
  ValueList : list
in
  ValueList := Values .
  StrippedValues := [] .
  if not-equal(ValueList, []) then
    Value := first(ValueList) .
    StrippedValues := join(StrippedValues, first(args(Value))) .
    ValueList := next(ValueList)
  fi*
  if equal(ValueList, []) then
    tau
  fi
endlet


process ModuleDB is
let
  Path      : str,
  Table     : term,
  ModuleId  : term,
  Syntax    : term,
  OldSyntaxTree : term,
  SyntaxTree: term,
  SyntaxText: str,
  EqsTree   : term,
  EqsText   : str,
  Name      : str,
  OldName   : str,
  NewName   : str,
  Modules   : list,
  Nodes     : list,
  Edges     : list,
  DependingModules : list,
  ModuleNames : list
in
  MDB-InitializeModuleDb() .
  MDB-InitializeFileExtensions() .
  (
    rec-msg(get-import-graph) .
    MDB-RetrieveImportGraph(Nodes?, Edges?) .
    snd-msg(import-graph(Nodes,Edges))
  +
    rec-msg(clear-module-db) .
    MDB-ClearModuleDb()
  +
    rec-msg(delete-module-from-db(Name?)).
    MDB-GetAllDependingModules(Name, DependingModules?) .
    snd-msg(ts-remove-value-from-all-tables(Name)) .
    MDB-RemoveImportFromModules(Name, DependingModules) .
    snd-msg(changed-modules(DependingModules))
  +
    rec-msg(close-module-in-db(Name?)) .
    MDB-GetAllDependingModules(Name, DependingModules?) .
    MDB-InvalidateModules(DependingModules) .
    snd-msg(ts-remove-value-from-all-tables(Name)) .
    snd-msg(changed-modules(DependingModules))
  +
    rec-msg(is-module-in-db(Name?)) .
    snd-msg(ts-contains-key("active-modules", Name)) .
    ( 
      rec-msg(ts-contains-key).
      snd-msg(exists-in-module-db(Name))
    +
      rec-msg(ts-not-contains-key).
      snd-msg(not-exists-in-module-db(Name))
    )
  +
    rec-msg(add-sdf-module-to-db(Name?, Path?, 
				 SyntaxText?, SyntaxTree?)) .
    snd-msg(sm-is-valid-modulename-in-path(Path, Name)) .
    (
      rec-msg(sm-modulename-is-valid) .
      if not-equal(SyntaxTree, no-tree) then
        snd-msg(sm-get-module-id(SyntaxTree)) .
        rec-msg(sm-module-id(ModuleId?)) .
        printf("DEBUG: addPosInfo still needs an extension concatenated\n") .
        snd-msg(addPosInfo(Path, SyntaxTree)) .
        rec-msg(tree-with-pos-info(SyntaxTree?)) .
        snd-msg(ts-put-value("sdf-tree", ModuleId, tree(SyntaxTree))) .
	snd-msg(sm-get-imported-module-names(SyntaxTree)) .
	rec-msg(sm-imported-module-names(Modules?)) 
      else 
        ModuleId := Name .
	Modules := []
      fi .
      snd-msg(ts-put-value("active-modules", ModuleId, path(Path))) .
      snd-msg(ts-put-value("sdf-text", ModuleId, text(SyntaxText))) .
      snd-msg(ts-put-value("module-paths", ModuleId, path(Path))) .
      printf("DEBUG: just get the imported modules, not just the new ones?\n").
      snd-msg(adding-succeeded(Name,ModuleId, Modules))
    +
      rec-msg(sm-modulename-is-invalid) .
      snd-msg(error-opening(Name, name-inconsistency))
    )
  +
    rec-msg(invalidate-sdf-in-db(Name?)) .
    snd-msg(ts-remove-value("sdf-tree", Name))
  +
    rec-msg(update-module-in-db(Name?, SyntaxText?, SyntaxTree?)).
    snd-msg(sm-get-module-id(SyntaxTree)) .
    rec-msg(sm-module-id(ModuleId?)) .
    if equal(Name, ModuleId) then
      snd-msg(ts-get-value("sdf-tree", Name)) .
      rec-msg(ts-value(tree(OldSyntaxTree?))) .
      if equal(SyntaxTree, OldSyntaxTree) then
	snd-msg(updating-succeeded([],[]))
      else
        snd-msg(sm-get-imported-module-names(SyntaxTree)) .
	printf("DEBUG: just get all imports, not just the new ones?") .
	rec-msg(sm-imported-module-names(Modules?)) .
        MDB-GetAllDependingModules(Name, DependingModules?) .
	snd-msg(updating-succeeded(DependingModules,Modules))
      fi
    else
      snd-msg(error-opening(Name, name-inconsistent))
    fi
  +
    rec-msg(rename-module-in-db(OldName?, NewName?, Path?)) .
    printf("not yet implemented in %s at %d\n", __FILE__, __LINE__) .
    snd-msg(renaming-not-done(OldName))
  +
    rec-msg(add-import-in-db(OldName?, NewName?, Path?)) .
    printf("not yet implemented in %s at %d\n", __FILE__, __LINE__) .
    snd-msg(add-import-not-done(OldName))
  +
    rec-msg(remove-import-in-db(OldName?, NewName?, Path?)).
    printf("not yet implemented in %s at %d\n", __FILE__, __LINE__) .
    snd-msg(remove-import-not-done)
  +
    rec-msg(copy-module-in-db(OldName?, NewName?, Path?)) .
    printf("not yet implemented in %s at %d\n", __FILE__, __LINE__) .
    snd-msg(copy-not-done(OldName))
  +
    rec-msg(eqs-not-available-for-modules(Name?)) .
    MDB-AllEquationsAvailable(Name, Modules?) .
    snd-msg(eqs-needed-for-modules(Modules))
  +
    rec-msg(get-eqs-text(Name?)).
    snd-msg(ts-get-value("asf-text", Name)) .
    (
      rec-msg(ts-value(text(EqsText?))) .
      snd-msg(eqs-text(Name, EqsText))
    +
      rec-msg(ts-no-value) .
      snd-msg(no-eqs-text(Name))
    )
  +
    rec-msg(add-eqs-to-db(Name?, text(EqsText?))) .
    snd-msg(ts-put-value("asf-text", Name, text(EqsText))) .
    snd-msg(eqs-added)
  +
    rec-msg(update-eqs-tree-in-db(Name?, tree(EqsTree?))) .
    snd-msg(ts-get-value("module-paths", Name)) .
    rec-msg(ts-value(path(Path?))) .
    printf("DEBUG: no extension yet using addPosInfo and also no depth maximum!\n") .
    snd-msg(addPosInfo(Path,EqsTree)) .
    rec-msg(tree-with-pos-info(EqsTree?)) .
    snd-msg(ts-put-value("asf-tree", Name, tree(EqsTree))) .
    snd-msg(eqs-updated)
  +
    rec-msg(update-eqs-text-in-db(Name?, text(EqsText?))).
    snd-msg(ts-remove-value("asf-tree", Name)) .
    snd-msg(ts-put-value("asf-text", Name, text(EqsText))) .
    snd-msg(eqs-text-updated(Name))
  +
    rec-msg(add-parse-table-to-db(eqs(Name?), Table?)) .
    snd-msg(ts-put-value("asf-parse-table", Name, table(Table))) .
    snd-msg(parse-table-added)
  +
    rec-msg(add-parse-table-to-db(trm(Name?), Table?)) .
    snd-msg(ts-put-value("term-parse-table", Name, table(Table))) .
    snd-msg(parse-table-added)
  +
    rec-msg(get-path-from-db(Name?)).
    snd-msg(ts-get-value("module-paths", Name)) .
    rec-msg(ts-value(path(Path?))) .
    snd-msg(path(Path))
  +
    (
      rec-msg(get-table-from-db(eqs(Name?))) .
      snd-msg(ts-get-value("asf-parse-table", Name)) 
    +
      rec-msg(get-table-from-db(trm(Name?))) .
      snd-msg(ts-get-value("term-parse-table", Name)) 
    ).
    (
      rec-msg(ts-value(table(Table?))) .
      snd-msg(table(Table))
    +
      rec-msg(ts-no-value) .
      snd-msg(no-table)
    )
  +
    rec-msg(get-all-depending-modules(Name?)).
    MDB-GetAllDependingModules(Name, DependingModules?) .
    snd-msg(all-depending-modules(DependingModules))
  +
    rec-msg(get-all-imported-module-names(Name?)).
    MDB-GetAllImportedModuleNames(Name, ModuleNames?) .
    snd-msg(all-imported-module-names(ModuleNames))
  +
    rec-msg(get-all-modules) .
    snd-msg(ts-get-all-values("sdf-tree")) .
    rec-msg(ts-all-values(Modules?)) .
    Stripper(Modules,Modules?) .
    snd-msg(all-modules(Modules))
  +
    rec-msg(get-imported-modules(Name?)).
    MDB-GetImportedModules(Name, Modules?) .
    snd-msg(imported-modules(Modules))
  +
    rec-msg(get-all-module-names).
    snd-msg(ts-get-all-keys("active-modules")) .
    rec-msg(ts-all-keys(Modules?)) .
    snd-msg(all-module-names(Modules))
  + 
    rec-msg(all-equations-available(Name?)).
    MDB-AllEquationsAvailable(Name, Modules?) .
    if equal(Modules, []) then
      snd-msg(equations-available)
    else
      snd-msg(equations-incomplete)
    fi
  +
    rec-msg(get-all-sdf2-definitions(Name?)) .
    snd-msg(ts-get-all-values("sdf-tree")) .
    rec-msg(ts-all-values(Modules?)) .
    Stripper(Modules, Modules?) .
    snd-msg(sm-make-sdf-definition(Modules, Name)) .
    rec-msg(sm-sdf-definition(Syntax?)) .
    snd-msg(syntax(Syntax))
  +
    rec-msg(get-sdf2-asfix(Name?)) .
    snd-msg(ts-get-value("sdf-tree", Name)) .
    (
      rec-msg(ts-value(tree(Syntax?))) .
      snd-msg(syntax(Syntax))
    +
      rec-msg(ts-no-value) .
      snd-msg(unavailable)
    )
  +
    rec-msg(get-eqs-tree(Name?)) .
    snd-msg(ts-get-value("asf-tree", Name)) .
    (
      rec-msg(ts-value(tree(EqsTree?))) .
      snd-msg(tree(EqsTree))
    +
      rec-msg(ts-no-value) .
      snd-msg(unavailable)
    )
  +
    rec-msg(get-equations-for-module(Name?)).
    snd-msg(ts-get-value("asf-tree", Name)) .
    (
      rec-msg(ts-value(tree(EqsTree?))) .
      snd-msg(equations(EqsTree))
    + 
      rec-msg(ts-no-value) .
      snd-msg(no-equations)
    )
  +
    rec-msg(invalidate-parse-tables(Name?)).
    MDB-InvalidateParseTables(Name)
  +
    rec-msg(get-module-info(Name?)) .
    snd-msg(ts-get-value("module-paths", Name)) .
    (
      rec-msg(ts-value(path(Path?))) .
      snd-msg(module-info(Name, [[path, Path]]))
    +
      rec-msg(ts-no-value) .
      snd-msg(module-info(Name, [[path,"not-available"]]))
    )   
) *
delta
endlet

process MDB-InitializeModuleDb is
  snd-msg(ts-add-table("extensions")) .
  snd-msg(ts-add-table("active-modules")) .
  snd-msg(ts-add-table("module-paths")) .
  snd-msg(ts-add-table("sdf-tree")) .
  snd-msg(ts-add-table("sdf-text")) .
  snd-msg(ts-add-table("asf-tree")) .
  snd-msg(ts-add-table("asf-text")) .
  snd-msg(ts-add-table("asf-parse-table")) .
  snd-msg(ts-add-table("term-parse-table"))

process MDB-ClearModuleDb is
  snd-msg(ts-clear-table("extensions")) .
  snd-msg(ts-clear-table("active-modules")) .
  snd-msg(ts-clear-table("module-paths")) .
  snd-msg(ts-clear-table("sdf-tree")) .
  snd-msg(ts-clear-table("sdf-text")) .
  snd-msg(ts-clear-table("asf-tree")) .
  snd-msg(ts-clear-table("asf-text")) .
  snd-msg(ts-clear-table("asf-parse-table")) .
  snd-msg(ts-clear-table("term-parse-table"))

process MDB-InitializeFileExtensions is
let
  SyntaxExt : str,
  RulesExt : str,
  TermExt : str
in  
  snd-msg(get-file-extensions) .
  rec-msg(set-file-extensions(syntax(SyntaxExt?),
                              rules(RulesExt?),
			      term(TermExt?))) .
  snd-msg(ts-put-value("extensions", "syntax", string(SyntaxExt))) .
  snd-msg(ts-put-value("extensions", "equations", string(RulesExt))) .
  snd-msg(ts-put-value("extensions", "term", string(TermExt)))
endlet
 
process MDB-GetAllDependingModules(Name : str, DependingModules : list?) is
let
  Modules : list
in
    snd-msg(ts-get-all-values("sdf-tree")) .
    rec-msg(ts-all-values(Modules?)) .
    Stripper(Modules, Modules?) .
    snd-msg(sm-get-all-depending-module-names(Modules, Name)) .
    rec-msg(sm-all-depending-module-names(DependingModules?)) 
endlet

process MDB-GetAllImportedModuleNames(Name : str, Imported : list?) is
let
  Modules : list
in
    snd-msg(ts-get-all-values("sdf-tree")) .
    rec-msg(ts-all-values(Modules?)) .
    Stripper(Modules, Modules?) .
    snd-msg(sm-get-all-needed-module-names(Modules, Name)) .
    rec-msg(sm-all-needed-module-names(Imported?))
endlet

process MDB-GetImportedModules(Name : str, Imported : list?) is
let
  Syntax : term
in
    snd-msg(ts-get-value("sdf-tree", Name)) .
    rec-msg(ts-value(tree(Syntax?))) .
    snd-msg(sm-all-imports(Syntax)) .
    rec-msg(sm-all-imports(Imported?))
endlet

process MDB-RemoveImportFromModules(Name : str, ActualModules : list) is
let
  Module : str,
  Modules : list,
  Syntax : term
in
  Modules := ActualModules .
    if not(equal(Modules,[])) then
      Module := first(Modules) .
      Modules := next(Modules) .
      snd-msg(ts-get-value("sdf-tree", Module)) .
      rec-msg(ts-value(tree(Syntax?))) .
      snd-msg(sm-remove-import-from-module(Syntax, Name)) .
      rec-msg(sm-import-removed-from-module(Syntax?)) .
      snd-msg(ts-put-value("sdf-tree", Module, tree(Syntax))) 
    fi
    *
    if equal(Modules,[]) then
      tau
    fi 
endlet

process MDB-RetrieveImportGraph(Nodes : list?, Edges : list?) is
let
  Modules : list
in
    snd-msg(ts-get-all-values("sdf-tree")) .
    rec-msg(ts-all-values(Modules?)) .
    Stripper(Modules, Modules?) .
    snd-msg(sm-get-import-graph(Modules)) .
    rec-msg(sm-import-graph(Nodes?,Edges?)) 
endlet

process MDB-AllEquationsAvailable(Name : str, Missing : list?) is
let
  Modules : list,
  Module  : str,
  Text    : str,
  Tree    : term
in
  MDB-GetAllImportedModuleNames(Name, Modules?) .
  Missing := [] .
  if not(equal(Modules, [])) then
    Module := first(Modules) .
    Modules := next(Modules) .
    snd-msg(ts-get-value("asf-text", Module)) . 
    (
      rec-msg(ts-no-value)
    +
      rec-msg(ts-value(text(Text?))) .
      snd-msg(ts-get-value("asf-tree", Module)) .
      (
        rec-msg(ts-no-value) .
	Missing := join(Module, Missing)
      +
        rec-msg(ts-value(tree(Tree?)))
      )
    )
  fi
  * 
  if equal(Modules, []) then
    tau
  fi
endlet

process MDB-InvalidateModules(Modules : list) is
  tau

process MDB-InvalidateParseTables(Module : str) is
  tau
