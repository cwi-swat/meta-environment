/* This used to be the module-db.idef, it now (temporarily) serves as
 * a wrapper for a number of new tools that have replaced the module-db.
 *
 */

#include <sdf-modules.idef>
#include <sdf-renaming.idef>
#include <term-store.idef>
#define DEBUG printf("FILE: %s LINE: %d\n", __FILE__, __LINE__)

process ModuleDB is
let
  Path      : str,
  Table     : term,
  ModuleId  : str,
  Syntax    : term,
  OldSyntaxTree : term,
  SyntaxTree: term,
  SyntaxText: str,
  EqsTree   : term,
  EqsText   : str,
  Name      : str,
  OldName   : str,
  NewName   : str,
  Modules   : list,
  Nodes     : list,
  Edges     : list,
  DependingModules : list,
  ModuleNames : list,
  FileName : str
in
  MDB-InitializeModuleDb() .
  MDB-InitializeFileExtensions() .
  (
    rec-msg(get-import-graph) .
    MDB-RetrieveImportGraph(Nodes?, Edges?) .
    snd-msg(import-graph(Nodes,Edges)) .
    Nodes := [] .
    Edges := []
  +
    rec-msg(clear-module-db) .
    MDB-ClearModuleDb()
  +
    rec-msg(delete-module-from-db(Name?)).
    MDB-GetAllDependingModules(Name, DependingModules?) .
    snd-msg(ts-remove-value-from-all-tables(Name)) .
    MDB-RemoveImportFromModules(Name, DependingModules) .
    snd-msg(changed-modules(DependingModules))
  +
    rec-msg(close-module-in-db(Name?)) .
    MDB-GetAllDependingModules(Name, DependingModules?) .
    MDB-InvalidateModules(DependingModules) .
    snd-msg(ts-remove-value-from-all-tables(Name)) .
    snd-msg(changed-modules(DependingModules))
  +
    rec-msg(is-module-in-db(Name?)) .
    snd-msg(ts-contains-key("active-modules", Name)) .
    ( 
      rec-msg(ts-contains-key).
      snd-msg(exists-in-module-db(Name))
    +
      rec-msg(ts-not-contains-key).
      snd-msg(not-exists-in-module-db(Name))
    )
  +
    rec-msg(add-sdf-module-to-db(Name?, Path?, SyntaxText?, SyntaxTree?)) .
    if not-equal(SyntaxTree, no-tree) then
      snd-msg(sm-get-module-id(SyntaxTree)) .
      rec-msg(sm-module-id(ModuleId?)) .
      snd-msg(sm-get-module-path(Path, ModuleId)) .
      rec-msg(sm-module-path(Path?)) .
      snd-msg(ts-put-str-value("module-paths", ModuleId, Path)) .
      MDB-AddModulePosInfo(ModuleId, SyntaxTree, SyntaxTree?) .
      snd-msg(ts-put-term-value("sdf-tree", ModuleId, SyntaxTree)) .
      snd-msg(sm-get-imported-module-names(SyntaxTree)) .
      SyntaxTree := no-tree .
      rec-msg(sm-imported-module-names(Modules?)) 
    else 
      ModuleId := Name .
      Modules := []
    fi .
    snd-msg(ts-put-str-value("active-modules", ModuleId, Path)) .
    snd-msg(ts-put-str-value("sdf-text", ModuleId, SyntaxText)) .
    SyntaxText := "" .
    snd-msg(ts-filter-keys("active-modules", Modules)) .
    rec-msg(ts-keys(Modules?)) .
    snd-msg(adding-succeeded(Name, ModuleId, Path, Modules))
  +
    rec-msg(invalidate-sdf-in-db(Name?)) .
    snd-msg(ts-remove-value("sdf-tree", Name))
  +
    rec-msg(update-module-in-db(Name?, SyntaxText?, SyntaxTree?)).
    snd-msg(sm-get-module-id(SyntaxTree)) .
    rec-msg(sm-module-id(ModuleId?)) .
    if equal(Name, ModuleId) then
      MDB-AddModulePosInfo(ModuleId, SyntaxTree, SyntaxTree?) .
      snd-msg(ts-put-term-value("sdf-tree", Name, SyntaxTree)) .
      snd-msg(ts-put-str-value("sdf-text", Name, SyntaxText)) .
      snd-msg(sm-get-imported-module-names(SyntaxTree)) .
      SyntaxTree := no-tree .
      SyntaxText := "" .
      rec-msg(sm-imported-module-names(Modules?)) .
      snd-msg(ts-filter-keys("active-modules", Modules)) .
      rec-msg(ts-keys(Modules?)) .
      MDB-GetAllDependingModules(Name, DependingModules?) .
      MDB-InvalidateModules(DependingModules) .
      snd-msg(updating-succeeded(DependingModules, Modules))
    else
      snd-msg(error-opening(Name, name-inconsistent))
    fi
  +
    rec-msg(rename-module-in-db(OldName?, NewName?, Path?)) .
    printf("not yet implemented in %s at %d\n", __FILE__, __LINE__) .
    snd-msg(renaming-not-done(OldName))
  +
    rec-msg(add-import-in-db(OldName?, NewName?, Path?)) .
    printf("not yet implemented in %s at %d\n", __FILE__, __LINE__) .
    snd-msg(add-import-not-done(OldName))
  +
    rec-msg(remove-import-in-db(OldName?, NewName?, Path?)).
    printf("not yet implemented in %s at %d\n", __FILE__, __LINE__) .
    snd-msg(remove-import-not-done)
  +
    rec-msg(copy-module-in-db(OldName?, NewName?, Path?)) .
    printf("not yet implemented in %s at %d\n", __FILE__, __LINE__) .
    snd-msg(copy-not-done(OldName))
  +
    rec-msg(eqs-not-available-for-modules(Name?)) .
    MDB-AllEquationsAvailable(Name, ModuleNames?) .
    snd-msg(eqs-needed-for-modules(ModuleNames))
  +
    rec-msg(get-eqs-text(Name?)).
    snd-msg(ts-get-str-value("asf-text", Name)) .
    (
      rec-msg(ts-value(EqsText?)) .
      snd-msg(eqs-text(Name, EqsText))
    +
      rec-msg(ts-no-value) .
      snd-msg(no-eqs-text(Name))
    )
  +
    rec-msg(add-eqs-to-db(Name?, text(EqsText?))) .
    snd-msg(ts-put-str-value("asf-text", Name, EqsText)) .
    snd-msg(eqs-added)
  +
    rec-msg(update-eqs-tree-in-db(Name?, tree(EqsTree?))) .
    snd-msg(ts-get-str-value("module-paths", Name)) .
    rec-msg(ts-value(Path?)) .
    snd-msg(io-get-filename(Path, Name, ".asf")) .
    rec-msg(io-filename(FileName?)) .
    printf("DEBUG: magical value 4 for depth of posinfo!\n") .
    snd-msg(add-posinfo-to-depth(FileName,EqsTree,4)) .
    rec-msg(tree-with-pos-info(EqsTree?)) .
    snd-msg(ts-put-term-value("asf-tree", Name, EqsTree)) .
    EqsTree := no-tree .
    snd-msg(eqs-updated)
  +
    rec-msg(update-eqs-text-in-db(Name?, text(EqsText?))).
    snd-msg(ts-remove-value("asf-tree", Name)) .
    snd-msg(ts-put-str-value("asf-text", Name, EqsText)) .
    snd-msg(eqs-text-updated(Name))
  +
    rec-msg(add-parse-table-to-db(eqs(Name?), Table?)) .
    snd-msg(ts-put-term-value("asf-parse-table", Name, Table)) .
    Table := no-table .
    snd-msg(parse-table-added)
  +
    rec-msg(add-parse-table-to-db(trm(Name?), Table?)) .
    snd-msg(ts-put-term-value("term-parse-table", Name, Table)) .
    Table := no-table .
    snd-msg(parse-table-added)
  +
    rec-msg(get-path-from-db(Name?)).
    snd-msg(ts-get-str-value("module-paths", Name)) .
    rec-msg(ts-value(Path?)) .
    snd-msg(path(Path))
  +
    (
      rec-msg(get-table-from-db(eqs(Name?))) .
      snd-msg(ts-get-term-value("asf-parse-table", Name)) 
    +
      rec-msg(get-table-from-db(trm(Name?))) .
      snd-msg(ts-get-term-value("term-parse-table", Name)) 
    ).
    (
      rec-msg(ts-value(Table?)) .
      snd-msg(table(Table)) .
      Table := no-table
    +
      rec-msg(ts-no-value) .
      snd-msg(no-table)
    )
  +
    rec-msg(get-all-depending-modules(Name?)).
    MDB-GetAllDependingModules(Name, DependingModules?) .
    snd-msg(all-depending-modules(DependingModules))
  +
    rec-msg(get-all-imported-module-names(Name?)).
    MDB-GetAllImportedModuleNames(Name, ModuleNames?) .
    snd-msg(all-imported-module-names(ModuleNames))
  +
    rec-msg(get-all-modules) .
    snd-msg(ts-get-all-values("sdf-tree")) .
    rec-msg(ts-all-values(Modules?)) .
    snd-msg(all-modules(Modules)) .
    Modules := []
  +
    rec-msg(get-imported-modules(Name?)).
    printf("DEBUG: NYI, should this be transitive?") .
    MDB-GetImportedModules(Name, Modules?) .
    snd-msg(imported-modules(Modules))
  +
    rec-msg(get-all-module-names).
    snd-msg(ts-get-all-keys("active-modules")) .
    rec-msg(ts-all-keys(ModuleNames?)) .
    snd-msg(all-module-names(ModuleNames))
  + 
    rec-msg(all-equations-available(Name?)).
    MDB-AllEquationsAvailable(Name, ModuleNames?) .
    if equal(ModuleNames, []) then
      snd-msg(equations-available)
    else
      snd-msg(equations-incomplete)
    fi
  +
    rec-msg(get-all-sdf2-definitions(Name?)) .
    snd-msg(ts-get-all-values("sdf-tree")) .
    rec-msg(ts-all-values(Modules?)) .
    snd-msg(sm-make-sdf-definition(Modules, Name)) .
    Modules := [] .
    rec-msg(sm-sdf-definition(Syntax?)) .
    snd-msg(syntax(Syntax)) .
    Syntax := no-tree
  +
    rec-msg(get-sdf2-asfix(Name?)) .
    snd-msg(ts-get-term-value("sdf-tree", Name)) .
    (
      rec-msg(ts-value(Syntax?)) .
      snd-msg(syntax(Syntax)) .
      Syntax := no-tree
    +
      rec-msg(ts-no-value) .
      snd-msg(unavailable)
    )
  +
    rec-msg(get-eqs-tree(Name?)) .
    snd-msg(ts-get-term-value("asf-tree", Name)) .
    (
      rec-msg(ts-value(EqsTree?)) .
      snd-msg(EqsTree) .
      EqsTree := no-tree
    +
      rec-msg(ts-no-value) .
      snd-msg(unavailable)
    )
  +
    rec-msg(get-equations-for-module(Name?)).   
    snd-msg(ts-get-term-value("asf-tree", Name)) .
    (
      rec-msg(ts-value(EqsTree?)) .
      snd-msg(equations(EqsTree)) .
      EqsTree := no-tree
    +
      rec-msg(ts-no-value) .
      snd-msg(no-equations)
    )
  +
    rec-msg(invalidate-parse-tables(Name?)).
    MDB-InvalidateModule(Name) .
    MDB-GetAllDependingModules(Name, DependingModules?) .
    MDB-InvalidateModules(DependingModules)
  +
    rec-msg(get-module-info(Name?)) .
    snd-msg(ts-get-str-value("module-paths", Name)) .
    (
      rec-msg(ts-value(Path?)) .
      snd-msg(module-info(Name, [[path, Path]]))
    +
      rec-msg(ts-no-value) .
      snd-msg(module-info(Name, [[path,"not-available"]]))
    )   
) *
delta
endlet

process MDB-InitializeModuleDb is
  snd-msg(ts-add-table("extensions", "str")) .
  snd-msg(ts-add-table("active-modules", "str")) .
  snd-msg(ts-add-table("module-paths", "str")) .
  snd-msg(ts-add-table("sdf-tree", "term")) .
  snd-msg(ts-add-table("sdf-text", "str")) .
  snd-msg(ts-add-table("asf-tree", "term")) .
  snd-msg(ts-add-table("asf-text", "str")) .
  snd-msg(ts-add-table("asf-parse-table", "term")) .
  snd-msg(ts-add-table("term-parse-table", "term"))

process MDB-ClearModuleDb is
  snd-msg(ts-clear-table("extensions")) .
  snd-msg(ts-clear-table("active-modules")) .
  snd-msg(ts-clear-table("module-paths")) .
  snd-msg(ts-clear-table("sdf-tree")) .
  snd-msg(ts-clear-table("sdf-text")) .
  snd-msg(ts-clear-table("asf-tree")) .
  snd-msg(ts-clear-table("asf-text")) .
  snd-msg(ts-clear-table("asf-parse-table")) .
  snd-msg(ts-clear-table("term-parse-table"))

process MDB-InitializeFileExtensions is
let
  SyntaxExt : str,
  RulesExt : str,
  TermExt : str
in  
  snd-msg(get-file-extensions) .
  rec-msg(set-file-extensions(syntax(SyntaxExt?),
                              rules(RulesExt?),
			      term(TermExt?))) .
  snd-msg(ts-put-str-value("extensions", "syntax", SyntaxExt)) .
  snd-msg(ts-put-str-value("extensions", "equations", RulesExt)) .
  snd-msg(ts-put-str-value("extensions", "term", TermExt))
endlet
 
process MDB-GetAllDependingModules(Name : str, DependingModules : list?) is
let
  Modules : list
in
    snd-msg(ts-get-all-values("sdf-tree")) .
    rec-msg(ts-all-values(Modules?)) .
    snd-msg(sm-get-all-depending-module-names(Modules, Name)) .
    Modules := [] .
    rec-msg(sm-all-depending-module-names(DependingModules?)) 
endlet

process MDB-GetAllImportedModuleNames(Name : str, Imported : list?) is
let
  Modules : list
in
    snd-msg(ts-get-all-values("sdf-tree")) .
    rec-msg(ts-all-values(Modules?)) .
    snd-msg(sm-get-all-needed-module-names(Modules, Name)) .
    Modules := [] .
    rec-msg(sm-all-needed-module-names(Imported?))
endlet

process MDB-GetImportedModules(Name : str, Imported : list?) is
let
  Syntax : term
in
    snd-msg(ts-get-term-value("sdf-tree", Name)) .
    rec-msg(ts-value(Syntax?)) .
    snd-msg(sm-all-imports(Syntax)) .
    Syntax := no-tree .
    rec-msg(sm-all-imports(Imported?))
endlet

process MDB-RemoveImportFromModules(Name : str, ActualModules : list) is
let
  Module : str,
  Modules : list,
  Syntax : term
in
  Modules := ActualModules .
    if not(equal(Modules,[])) then
      Module := first(Modules) .
      Modules := next(Modules) .
      snd-msg(ts-get-term-value("sdf-tree", Module)) .
      rec-msg(ts-value(Syntax?)) .
      snd-msg(sm-remove-import-from-module(Syntax, Name)) .
      Syntax := no-tree .
      rec-msg(sm-import-removed-from-module(Syntax?)) .
      snd-msg(ts-put-term-value("sdf-tree", Module, Syntax)) .
      Syntax := no-tree
    fi
    *
    if equal(Modules,[]) then
      tau
    fi 
endlet

process MDB-RetrieveImportGraph(Nodes : list?, Edges : list?) is
let
  Modules : list
in
    snd-msg(ts-get-all-values("sdf-tree")) .
    rec-msg(ts-all-values(Modules?)) .
    snd-msg(sm-get-import-graph(Modules)) .
    Modules := [] .
    rec-msg(sm-import-graph(Nodes?,Edges?))
endlet

process MDB-AllEquationsAvailable(Name : str, Missing : list?) is
let
  ModuleNames : list,
  ModuleName  : str,
  Text    : str,
  Tree    : term
in
  MDB-GetAllImportedModuleNames(Name, ModuleNames?) .
  Missing := [] .
  if not(equal(ModuleNames, [])) then
    ModuleName := first(ModuleNames) .
    ModuleNames := next(ModuleNames) .
    snd-msg(ts-get-str-value("asf-text", ModuleName)) . 
    (
      rec-msg(ts-no-value)
    +
      rec-msg(ts-value(Text?)) .
      Text := "" .
      snd-msg(ts-get-term-value("asf-tree", ModuleName)) .
      (
        rec-msg(ts-no-value) .
	Missing := join(ModuleName, Missing)
      +
        rec-msg(ts-value(Tree?)) .
	Tree := no-tree
      )
    )
  fi
  * 
  if equal(ModuleNames, []) then
    tau
  fi
endlet

process MDB-InvalidateModules(Modules : list) is
let
  Module : str,
  Runner : list
in
  Runner := Modules .
  if not-equal(Runner, []) then
    Module := first(Runner) .
    Runner := next(Runner) .
    MDB-InvalidateModule(Module)
  fi
  *
  if equal(Runner, []) then
    tau
  fi
endlet

process MDB-InvalidateModule(Module : str) is
  snd-msg(ts-remove-value("asf-tree", Module)) .
  snd-msg(ts-remove-value("asf-parse-table", Module)) .
  snd-msg(ts-remove-value("term-parse-table", Module))

process MDB-AddModulePosInfo(Module : str, In : term , Out : term?) is
let
  Path : str,
  FileName : str
in
      snd-msg(ts-get-str-value("module-paths", Module)) .
      rec-msg(ts-value(Path?)) .
      snd-msg(io-get-filename(Path, Module, ".sdf")) .
      rec-msg(io-filename(FileName?)) .
      snd-msg(add-posinfo-packed(FileName, In)) .
      rec-msg(tree-with-pos-info(Out?)) 
endlet
