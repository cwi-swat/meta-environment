#include <module-manager.tb>
#include <sdf-modules.idef>
#include <sdf-renaming.idef>
#include <term-store.idef>
#define DEBUG printf("FILE: %s LINE: %d\n", __FILE__, __LINE__)

#define POSINFO_DEPTH 4

process ModuleDB is
let
  DependingModules: list,
  EqsText: str,
  EqsTree: term,
  ErrorMsg: str,
  Extension: str,
  Filename: str,
  LocalText: str,
  ModuleId: term,
  ModuleIds: list,
  Modulename: str,
  Modulenames: list,
  Modules: list,
  Name: str,
  NewName: str,
  OldName: str,
  Pairs: list,
  Path: str,
  Syntax: term,
  SyntaxText: str,
  SyntaxTree: term,
  Table: term,
  Tablename: str,
  TermTree: term,
  Type: term
in
  MDB-InitializeModuleDb()
  . snd-msg(termstore-initialized)
  . MDB-InitializeFileExtensions()
  .
  (
    rec-msg(clear-module-db)
    . MDB-ClearModuleDb()
    . snd-msg(module-db-cleared)
  +
    rec-msg(delete-module-from-db(Name?))
    . GetDependingModules(Name, DependingModules?)
    . MDB-RemoveImportFromModules(Name, DependingModules)
    . snd-msg(ts-remove-value-from-all-tables(Name))
    . snd-msg(changed-modules(DependingModules))
  +
    rec-msg(close-module-in-db(Name?))
    . MDB-InvalidateModule(Name, sdf)
    . snd-msg(ts-remove-value-from-all-tables(Name))
    . snd-msg(module-closed(Name))
  +
    rec-msg(invalidate-sdf-in-db(Name?))
    . MDB-InvalidateEntry(Name, "", DependingModules?)
  +
    rec-msg(update-module-in-db(Name?, SyntaxTree?, sdf))
    . snd-msg(sm-get-module-id(SyntaxTree))
    . rec-msg(sm-module-id(Modulename?))
    .
    if equal(Name, Modulename) then
      MDB-AddModulePosInfo(Modulename, SyntaxTree, SyntaxTree?)
      . snd-msg(ts-put-term-value("sdf-tree", Name, SyntaxTree))
      . snd-msg(sm-get-imported-module-names(SyntaxTree))
      . SyntaxTree := UNDEFINED
      . rec-msg(sm-imported-module-names(Modules?))
      . snd-msg(ts-put-term-value("import-relations", Modulename, Modules))
      . snd-msg(ts-filter-keys("module-path", Modules))
      . rec-msg(ts-keys(Modules?))
      . snd-msg(updating-succeeded(Modules))
    else
      snd-msg(error-opening(Name, name-inconsistent))
    fi
  +
    rec-msg(update-module-text-in-db(Name?, SyntaxText?, SyntaxTree?, sdf))
    .
    if equal(SyntaxTree, UNDEFINED) then
      Modulename := Name
    else
      snd-msg(sm-get-module-id(SyntaxTree))
      . rec-msg(sm-module-id(Modulename?))
    fi
    .
    if equal(Name, Modulename) then
      snd-msg(ts-get-str-value("sdf-text", Name))
      .
      (
        rec-msg(ts-value(LocalText?))
	.
	if equal(SyntaxText, LocalText) then
	  SyntaxText := ""
	  . snd-msg(no-updating-needed)
	else
	  MDB-InvalidateEntry(Name, SyntaxText, DependingModules?)
	  . SyntaxText := ""
	  . snd-msg(updating-succeeded(DependingModules))
	fi
      +
        rec-msg(ts-no-value)
	. MDB-InvalidateEntry(Name, SyntaxText, DependingModules?)
	. SyntaxText := ""
	. snd-msg(updating-succeeded(DependingModules))
      )
    else
      snd-msg(error-opening(Name, name-inconsistent))
    fi
  +
    rec-msg(add-import-in-db(OldName?, NewName?))
    . MDB-AddImportToModule(OldName, NewName)
    . snd-msg(add-import-done(OldName))
  +
    rec-msg(remove-import-in-db(OldName?, NewName?))
    . MDB-RemoveImportFromModules(NewName, [OldName])
    . snd-msg(remove-import-done)
  +
    rec-msg(copy-module-in-db(OldName?, NewName?, Path?))
    . MDB-CopyModule(OldName, NewName, Path)
    . snd-msg(copy-module-done(OldName))
  +
    rec-msg(get-eqs-text(Name?))
    . snd-msg(ts-get-str-value("asf-text", Name))
    .
    (
      rec-msg(ts-value(EqsText?))
      . snd-msg(eqs-text(Name, EqsText))
    +
      rec-msg(ts-no-value)
      . snd-msg(no-eqs-text(Name))
    )
  +
    rec-msg(remove-eqs-from-db(Name?))
    . snd-msg(ts-remove-value("asf-tree", Name))
    . snd-msg(ts-remove-value("asf-text", Name))
    . snd-msg(eqs-removed-from-db)
  +
    rec-msg(add-eqs-to-db(Name?, text(EqsText?)))
    . snd-msg(ts-put-str-value("asf-text", Name, EqsText))
    . snd-msg(eqs-added)
  +
    rec-msg(update-eqs-tree-in-db(ModuleId?, tree(EqsTree?)))
    . GetModulePath(ModuleId, ASF_NAMESPACE, Filename?)
    . snd-msg(add-posinfo-to-depth(Filename, EqsTree, POSINFO_DEPTH))
    . rec-msg(tree-with-pos-info(EqsTree?))
    . snd-msg(ts-put-term-value("asf-tree", ModuleId, EqsTree))
    . EqsTree := help-the-garbage-collector
    . snd-msg(eqs-updated)
  +
    rec-msg(update-eqs-text-in-db(Name?, EqsText?))
    . snd-msg(ts-remove-value("asf-tree", Name))
    . snd-msg(ts-put-str-value("asf-text", Name, EqsText))
    . snd-msg(eqs-text-updated(Name))
    . EqsText := ""
  +
    rec-msg(add-parse-table-to-db(ModuleId?, eqs, Table?))
    . snd-msg(ts-put-term-value("asf-parse-table", ModuleId, Table))
    . Table := no-table
    . snd-msg(parse-table-added)
  +
    rec-msg(add-parse-table-to-db(ModuleId?, trm, Table?))
    . snd-msg(ts-put-term-value("term-parse-table", ModuleId, Table))
    . Table := no-table
    . snd-msg(parse-table-added)
  +
    rec-msg(get-path-from-db(Name?))
    . TODO("get-path-from-db has to be handled by ModuleManager")
  +
    (
      rec-msg(get-table-from-db(ModuleId?, trm))
      . snd-msg(ts-get-term-value("term-parse-table", Name))
    +
      rec-msg(get-table-from-db(ModuleId?, eqs))
      . snd-msg(ts-get-term-value("asf-parse-table", ModuleId))
    )
    .
    (
      rec-msg(ts-value(Table?))
      . snd-msg(table(Table))
      . Table := no-table
    +
      rec-msg(ts-no-value)
      . snd-msg(no-table)
    )
  +
    rec-msg(get-imported-modules(Name?))
    . MDB-GetImportedModules(Name, Modules?)
    . snd-msg(imported-modules(Modules))
  +
    rec-msg(get-all-module-names)
    . TODO("get-all-module-names has to be handled by ModuleManager")
    . TODO("get-all-module-names on moduleids or names")
  +
    rec-msg(get-modules(Modulenames?))
    . snd-msg(ts-get-values("sdf-tree", Modulenames))
    .
    (
      rec-msg(ts-values(Modules?))
      . snd-msg(modules(Modules))
      . Modules := []
    +
      rec-msg(ts-no-values)
      . snd-msg(no-modules)
    )
  +
    rec-msg(get-all-syntax-definitions(ModuleId?, Type?))
    . MM-GetAllModuleDependencies(ModuleId, ModuleIds?)
    . snd-msg(pre-get-all-syntax-hook(ModuleIds, Type))
    .
    (
      rec-msg(pre-get-all-syntax-hook-result(tablename(Tablename?)))
      . snd-msg(ts-get-values(Tablename, ModuleIds))
      .
      (
        rec-msg(ts-values(Modules?))
        . snd-msg(add-initial-syntax-modules-hook(Modules, Type))
        . rec-msg(initial-modules-added(Modules?))
        . snd-msg(sm-make-sdf-definition(Modules))
        . Modules := []
        .
        (
          rec-msg(sm-sdf-definition(Syntax?))
          . snd-msg(syntax(Syntax))
          . Syntax := UNDEFINED
        +
          rec-msg(sm-no-sdf-definition)
          . snd-msg(no-syntax("syntax incomplete"))
        )
      +
        rec-msg(ts-no-values)
        . snd-msg(no-syntax("syntax incomplete"))
      )
    +
      rec-msg(pre-get-all-syntax-hook-result(failure(ErrorMsg?)))
      . snd-msg(no-syntax(ErrorMsg))
    )
  +
    rec-msg(get-syntax-tree(ModuleId?))
    . snd-msg(ts-get-term-value("sdf-tree", ModuleId))
    .
    (
      rec-msg(ts-value(Syntax?))
      . snd-msg(syntax(Syntax))
      . Syntax := help-the-garbage-collector
    +
      rec-msg(ts-no-value)
      . snd-msg(unavailable)
    )
  +
    rec-msg(get-equations(Name?))
    . snd-msg(ts-get-term-value("asf-tree", Name))
    .
    (
      rec-msg(ts-value(EqsTree?))
      . snd-msg(equations(EqsTree))
      . EqsTree := help-the-garbage-collector
    +
      rec-msg(ts-no-value)
      . snd-msg(unavailable)
    )
  +
    rec-msg(put-term-tree(Filename?, TermTree?))
    . snd-msg(ts-put-term-value("term-tree", Filename, TermTree))
  +
    rec-msg(get-term-tree(Filename?))
    . snd-msg(ts-get-term-value("term-tree", Filename))
    .
    (
      rec-msg(ts-value(TermTree?))
      . snd-msg(term-tree(Filename, TermTree))
      . TermTree := help-the-garbage-collector
    +
      rec-msg(ts-no-value)
      . snd-msg(no-term-tree(Filename))
    )
  +
    rec-msg(invalidate-parse-tables(Name?))
    . GetDependingModules(Name, DependingModules?)
    . MDB-InvalidateModule(Name, sdf)
    . MDB-InvalidateModules(DependingModules, sdf)
  )
  *
  delta
endlet

/* Used by ModuleDB */
process MDB-InitializeModuleDb is
  snd-msg(ts-add-table("extensions", "str"))
  . snd-msg(ts-add-table("sdf-tree", "term"))
  . snd-msg(ts-add-table("sdf-text", "str"))
  . snd-msg(ts-add-table("asf-tree", "term"))
  . snd-msg(ts-add-table("asf-text", "str"))
  . snd-msg(ts-add-table("term-tree", "term"))
  . snd-msg(ts-add-table("asf-parse-table", "term"))
  . snd-msg(ts-add-table("term-parse-table", "term"))

/* Used by ModuleDB */
process MDB-ClearModuleDb is
  snd-msg(ts-clear-table("extensions"))
  . snd-msg(ts-clear-table("sdf-tree"))
  . snd-msg(ts-clear-table("sdf-text"))
  . snd-msg(ts-clear-table("asf-tree"))
  . snd-msg(ts-clear-table("asf-text"))
  . snd-msg(ts-clear-table("term-tree"))
  . snd-msg(ts-clear-table("asf-parse-table"))
  . snd-msg(ts-clear-table("term-parse-table"))
  . snd-msg(clear-module-db-hook)
  . rec-msg(module-db-hook-done)

/* Used by ModuleDB */
process MDB-InitializeFileExtensions is
let
  SyntaxExt: str,
  RulesExt: str,
  TermExt: str
in
  snd-msg(get-file-extensions)
  . rec-msg(set-file-extensions(syntax(SyntaxExt?), rules(RulesExt?),
                                term(TermExt?)))
  . snd-msg(ts-put-str-value("extensions", "syntax", SyntaxExt))
  . snd-msg(ts-put-str-value("extensions", "equations", RulesExt))
  . snd-msg(ts-put-str-value("extensions", "term", TermExt))
endlet

/* Used by ModuleDB */
process MDB-GetDependingModules(Name: str, DependingModules: list?) is
let
  Pairs: list
in
  snd-msg(ts-get-key-value-pairs("import-relations"))
  . rec-msg(ts-pairs(Pairs?))
  . snd-msg(sm-get-depending-module-names(Pairs, Name))
  . Pairs := []
  . rec-msg(sm-depending-module-names(DependingModules?))
endlet

/* Used by ModuleDB */
process MDB-GetImportedModules(Name: str, Imported: list?) is
  snd-msg(ts-get-term-value("import-relations", Name))
  .
  (
    rec-msg(ts-value(Imported?))
  +
    rec-msg(ts-no-value)
    . Imported := []
  )

/* Used in module-utils.tb */
/* Used by MDB-CopyModule */
process MDB-StoreModuleTree(Name: str, Syntax: term) is
let
  Modules: list,
  Text: str
in
  snd-msg(ts-put-term-value("sdf-tree", Name, Syntax))
  . snd-msg(unparse(Syntax))
  . rec-msg(unparsed-text(Text?))
  . snd-msg(ts-put-str-value("sdf-text", Name, Text))
  . snd-msg(sm-get-imported-module-names(Syntax))
  . rec-msg(sm-imported-module-names(Modules?))
  . snd-msg(ts-put-term-value("import-relations", Name, Modules))
  . GetDependingModules(Name, Modules?)
  . MDB-InvalidateModule(Name, sdf)
  . MDB-InvalidateModules(Modules, sdf)
endlet

/* Used by ModuleDB */
process MDB-RemoveImportFromModules(Name: str, ActualModules: list) is
let
  Module: str,
  Modules: list,
  Imports: list,
  Syntax: term,
  Status: term
in
  Modules := ActualModules
  .
  if not(equal(Modules, [])) then
    Module := first(Modules)
    . Modules := next(Modules)
    . snd-msg(ts-get-term-value("sdf-tree", Module))
    .
    (
      rec-msg(ts-value(Syntax?))
      . snd-msg(sm-get-imported-module-names(Syntax))
      . rec-msg(sm-imported-module-names(Imports?))
      . MDB-ContainedIn(Name, Imports, Status?)
      .
      if equal(Status, success) then
        snd-msg(sm-remove-import-from-module(Syntax, Name))
        . Syntax := help-the-garbage-collector
        . rec-msg(sm-import-removed-from-module(Syntax?))
        . MDB-StoreModuleTree(Module, Syntax)
        . Syntax := help-the-garbage-collector
      else
        tau
      fi
    +
      rec-msg(ts-no-value)
    )
  fi
  *
  if equal(Modules, []) then
    tau
  fi
endlet

/* Used by MDB-CopyModule */
process MDB-RegisterPath(Path: str, ModuleId: str) is
  snd-msg(ts-put-str-value("path-modulename", Path, ModuleId))

/* Used by ModuleDB */
process MDB-CopyModule(OldName: str, NewName: str, NewPath: str) is
let
  Text: str,
  Syntax: term,
  Tree: term
in
  snd-msg(ts-get-term-value("sdf-tree", OldName))
  . rec-msg(ts-value(Syntax?))
  . snd-msg(sm-rename-modulename-in-module(Syntax, NewName))
  . rec-msg(sm-modulename-renamed-in-module(Syntax?))
  . MDB-StoreModuleTree(NewName, Syntax)
  . Syntax := help-the-garbage-collector
  . snd-msg(ts-put-str-value("module-path", NewName, NewPath))
  . MDB-RegisterPath(NewPath, NewName)
  . snd-msg(ts-get-term-value("asf-tree", OldName))
  .
  (
    rec-msg(ts-value(Tree?))
    . snd-msg(ts-put-term-value("asf-tree", NewName, Tree))
    . Tree := help-the-garbage-collector
  +
    rec-msg(ts-no-value)
  )
  . snd-msg(ts-get-str-value("asf-text", OldName))
  .
  (
    rec-msg(ts-value(Text?))
    . snd-msg(ts-put-str-value("asf-text", NewName, Text))
    . Text := ""
  +
    rec-msg(ts-no-value)
  )
endlet

/* Used by ModuleDB */
process MDB-AddImportToModule(ModuleId: str, Import: str) is
let
  Syntax: term
in
  snd-msg(ts-get-term-value("sdf-tree", ModuleId))
  . rec-msg(ts-value(Syntax?))
  . snd-msg(sm-add-import-to-module(Syntax, Import))
  . Syntax := help-the-garbage-collector
  . rec-msg(sm-import-added-to-module(Syntax?))
  . MDB-StoreModuleTree(ModuleId, Syntax)
endlet

/* Used by MDB-RemoveImportFromModules */
process MDB-ContainedIn(Name: str, Modules: list, Status: term?) is
let
  Module: str,
  Runner: list
in
  Status := no-success
  . Runner := Modules
  .
  if not-equal(Runner, []) then
    Module := first(Runner)
    . Runner := next(Runner)
    .
    if equal(Module, Name) then
      Status := success
    else
      tau
    fi
  fi
  *
  if equal(Runner, []) then
    tau
  fi
endlet

/* Used in module-utils.tb */
/* Used by MDB-StoreModuleTree */
/* Used by MDB-AddImportToModule */
process MDB-InvalidateModules(Modules: list, Type: term) is
let
  Module: str,
  Runner: list
in
  Runner := Modules
  .
  if not-equal(Runner, []) then
    Module := first(Runner)
    . Runner := next(Runner)
    . MDB-InvalidateModule(Module, Type)
  fi
  *
  if equal(Runner, []) then
    tau
  fi
endlet

/* Used by MDB-InvalidateModules */
/* Used by MDB-StoreModuleTree */
/* Used by ModuleDB */
process MDB-InvalidateModule(Modulename: str, Type: term) is
let
  Directory: str,
  Extension: str,
  Path: str
in
  snd-msg(ts-remove-value("asf-tree", Modulename))
  . snd-msg(ts-remove-value("asf-parse-table", Modulename))
  . snd-msg(ts-remove-value("term-parse-table", Modulename))
endlet

/* Used by ModuleDB */
process MDB-AddModulePosInfo(Module: str, In: term, Out: term?) is
  MDB-AddPosInfo(Module, sdf, In, Out?)

/* Used in process-eqs.tb */
process MDB-AddEquationsPosInfo(ModuleId: term, In: term, Out: term?) is
  MDB-AddPosInfo(ModuleId, asf, In, Out?)

/* Used by MDB-AddEquationsPosInfo */
process MDB-AddPosInfo(ModuleId: term, Type: term, In: term, Out: term?) is
let
  AsfExt: str,
  AsfPath: str,
  SdfPath: str
in
  printf("Another codeclone of EditEquationsAction\n").
  GetModulePath(ModuleId, SDF_NAMESPACE, SdfPath?)
  .  
  if equal(SdfPath, "") then
    snd-msg(no-equations(ModuleId))
  else
    snd-msg(file-extension-hook(asf))
    . rec-msg(file-extension-hook-result(AsfExt?))
    . ReplaceExtension(SdfPath, AsfExt, AsfPath?)
   . AnnotateTree(In, AsfPath, Out?)
  fi
endlet

/* Used by ModuleDB */
process MDB-InvalidateEntry(Name: str, Text: str, DependingModules: list?) is
  snd-msg(ts-put-str-value("sdf-text", Name, Text))
  . snd-msg(ts-remove-value("sdf-tree", Name))
  . snd-msg(ts-put-term-value("import-relations", Name, []))
  . GetDependingModules(Name, DependingModules?)
  . MDB-InvalidateModule(Name, sdf)
  . MDB-InvalidateModules(DependingModules, sdf)
