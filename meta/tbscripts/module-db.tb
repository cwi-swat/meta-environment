/* This used to be the module-db.idef, it now (temporarily) serves as
 * a wrapper for a number of new tools that have replaced the module-db.
 */

#include <sdf-modules.idef>
#include <sdf-renaming.idef>
#include <term-store.idef>
#define DEBUG printf("FILE: %s LINE: %d\n", __FILE__, __LINE__)
#define POSINFO_DEPTH 4

process ModuleDB is
let
  Path      : str,
  Table     : term,
  Type     : term,
  ModuleId  : str,
  Syntax    : term,
  OldSyntaxTree : term,
  SyntaxTree: term,
  SyntaxText: str,
  EqsTree   : term,
  EqsText   : str,
  LocalText : str,
  Name      : str,
  OldName   : str,
  NewName   : str,
  NewPath   : str,
  Modules   : list,
  DependingModules : list,
  ModuleNames : list,
  FileName : str,
  RealFileName : str,
  Pairs    : list,
  ErrorMsg : str,
  Extension : str
in
  MDB-InitializeModuleDb() .
  snd-msg(termstore-initialized) .
  MDB-InitializeFileExtensions() .
  (
    rec-msg(get-import-relations) .
    snd-msg(ts-get-key-value-pairs("import-relations")) .
    rec-msg(ts-pairs(Pairs?)) .
    snd-msg(import-relations(Pairs)) .
    Pairs := []
  +
    rec-msg(clear-module-db) .
    MDB-ClearModuleDb() .
    snd-msg(module-db-cleared)
  +
    rec-msg(delete-module-from-db(Name?)).
    MDB-GetAllDependingModules(Name, DependingModules?) .
    MDB-RemoveImportFromModules(Name, DependingModules) .
    snd-msg(ts-remove-value-from-all-tables(Name)) .
    snd-msg(changed-modules(DependingModules))
  +
    rec-msg(close-module-in-db(Name?)) .
    MDB-GetAllDependingModules(Name, DependingModules?) .
    MDB-InvalidateModule(Name, sdf) .
    MDB-InvalidateModules(DependingModules, sdf) .
    snd-msg(ts-remove-value-from-all-tables(Name)) .
    snd-msg(changed-modules(DependingModules))
  +
    rec-msg(is-module-in-db(Name?)) .
    snd-msg(ts-contains-key("active-modules", Name)) .
    ( 
      rec-msg(ts-contains-key).
      snd-msg(exists-in-module-db(Name))
    +
      rec-msg(ts-not-contains-key).
      snd-msg(not-exists-in-module-db(Name))
    )
  +
    /* TODO: factorize this part into reusable processes */
    rec-msg(add-module-to-db(Name?, Path?, sdf, SyntaxText?, SyntaxTree?)) .
    if not-equal(SyntaxTree, no-tree) then
      snd-msg(sm-get-module-id(SyntaxTree)) .
      rec-msg(sm-module-id(ModuleId?)) .
      snd-msg(sm-get-module-path(Path, ModuleId)) .
      rec-msg(sm-module-path(NewPath?)) .
      snd-msg(io-get-filename(Path, Name, "")) .
      rec-msg(io-filename(FileName?)) .
      snd-msg(io-get-filename(NewPath, ModuleId, "")) .
      rec-msg(io-filename(RealFileName?)) .
      if equal(FileName, RealFileName) then
        snd-msg(ts-put-str-value("module-paths", ModuleId, NewPath)) .
        MDB-RegisterPath(FileName, ModuleId) .
        MDB-AddModulePosInfo(ModuleId, SyntaxTree, SyntaxTree?) .
        snd-msg(ts-put-term-value("sdf-tree", ModuleId, SyntaxTree)) .
        snd-msg(sm-get-imported-module-names(SyntaxTree)) .
        rec-msg(sm-imported-module-names(Modules?)) .
        snd-msg(ts-put-term-value("import-relations", ModuleId, Modules)) .
        snd-msg(ts-put-str-value("active-modules", ModuleId, Path)) .
        snd-msg(ts-put-str-value("sdf-text", ModuleId, SyntaxText)) .
        SyntaxText := "" .
        snd-msg(ts-filter-keys("active-modules", Modules)) .
        rec-msg(ts-keys(Modules?)) .
        snd-msg(adding-succeeded(Name, NewPath, ModuleId, Modules))
      else
        ModuleId := Name .
        snd-msg(ts-put-str-value("module-paths", ModuleId, Path)) .
        MDB-RegisterPath(FileName, ModuleId) .
        Modules := [] .
        snd-msg(ts-put-term-value("import-relations", ModuleId, Modules)) .
        snd-msg(ts-put-str-value("active-modules", ModuleId, Path)) .
        SyntaxText := "" .
        snd-msg(ts-filter-keys("active-modules", Modules)) .
        rec-msg(ts-keys(Modules?)) .
        snd-msg(error-opening(Name, name-inconsistent))
      fi .
      SyntaxTree := no-tree 
    else 
      ModuleId := Name .
      snd-msg(ts-put-str-value("module-paths", ModuleId, Path)) .
      MDB-RegisterPath(Path, ModuleId) .
      Modules := [] .
      snd-msg(ts-put-term-value("import-relations", ModuleId, Modules)) .
      snd-msg(ts-put-str-value("active-modules", ModuleId, Path)) .
      snd-msg(ts-put-str-value("sdf-text", ModuleId, SyntaxText)) .
      SyntaxText := "" .
      snd-msg(ts-filter-keys("active-modules", Modules)) .
      rec-msg(ts-keys(Modules?)) .
      snd-msg(adding-succeeded(Name, Path, ModuleId, Modules))
    fi 
  +
    rec-msg(invalidate-sdf-in-db(Name?)) .
    snd-msg(ts-remove-value("sdf-tree", Name))
  +
    rec-msg(update-module-in-db(Name?, SyntaxTree?, sdf)) .
    snd-msg(sm-get-module-id(SyntaxTree)) .
    rec-msg(sm-module-id(ModuleId?)) .
    if equal(Name, ModuleId) then
      MDB-AddModulePosInfo(ModuleId, SyntaxTree, SyntaxTree?) .
      snd-msg(ts-put-term-value("sdf-tree", Name, SyntaxTree)) .
      snd-msg(sm-get-imported-module-names(SyntaxTree)) .
      SyntaxTree := no-tree .
      rec-msg(sm-imported-module-names(Modules?)) .
      snd-msg(ts-put-term-value("import-relations", ModuleId, Modules)) .
      snd-msg(ts-filter-keys("active-modules", Modules)) .
      rec-msg(ts-keys(Modules?)) .
      snd-msg(updating-succeeded(Modules))
    else
      snd-msg(error-opening(Name, name-inconsistent))
    fi
  +
    rec-msg(update-module-text-in-db(Name?, SyntaxText?, SyntaxTree?, sdf)).
    if equal(SyntaxTree, no-tree) then
      ModuleId := Name
    else   
      snd-msg(sm-get-module-id(SyntaxTree)) .
      rec-msg(sm-module-id(ModuleId?))
    fi .
    if equal(Name, ModuleId) then
      snd-msg(ts-get-str-value("sdf-text", Name)) .
      rec-msg(ts-value(LocalText?)) .
      if equal(SyntaxText, LocalText) then
        SyntaxText := "" .
        snd-msg(no-updating-needed)
      else
        snd-msg(ts-put-str-value("sdf-text", Name, SyntaxText)) .
        snd-msg(ts-remove-value("sdf-tree", Name)) .
        snd-msg(ts-put-term-value("import-relations", Name, [])) .
        SyntaxText := "" .
        MDB-GetAllDependingModules(Name, DependingModules?) .
        MDB-InvalidateModule(Name, sdf) .
        MDB-InvalidateModules(DependingModules, sdf) .
        snd-msg(updating-succeeded(DependingModules))
      fi
    else
      snd-msg(error-opening(Name, name-inconsistent))
    fi
  +
    rec-msg(rename-module-in-db(OldName?, NewName?, Path?)) .
    MDB-RenameModule(OldName, NewName, Path, Modules?) .
    MDB-DisplayGraph .
    snd-msg(renaming-module-done(OldName, Modules))
  +
    rec-msg(add-import-in-db(OldName?, NewName?)) .
    MDB-AddImportToModule(OldName, NewName) .
    snd-msg(add-import-done(OldName))
  +
    rec-msg(remove-import-in-db(OldName?, NewName?)).
    MDB-RemoveImportFromModules(NewName, [OldName]) .
    snd-msg(remove-import-done)
  +
    rec-msg(copy-module-in-db(OldName?, NewName?, Path?)) .
    MDB-CopyModule(OldName, NewName, Path) .
    MDB-DisplayGraph .
    snd-msg(copy-module-done(OldName))
  +
    rec-msg(eqs-not-available-for-modules(Name?)) .
    MDB-AllEquationsAvailable(Name, ModuleNames?) .
    snd-msg(eqs-needed-for-modules(ModuleNames))
  +
    rec-msg(get-eqs-text(Name?)).
    snd-msg(ts-get-str-value("asf-text", Name)) .
    (
      rec-msg(ts-value(EqsText?)) .
      snd-msg(eqs-text(Name, EqsText))
    +
      rec-msg(ts-no-value) .
      snd-msg(no-eqs-text(Name))
    )
  +
    rec-msg(remove-eqs-from-db(Name?)) .
    snd-msg(ts-remove-value("asf-tree", Name)) .
    snd-msg(ts-remove-value("asf-text", Name)) .
    snd-msg(eqs-removed-from-db)
  +
    rec-msg(add-eqs-to-db(Name?, text(EqsText?))) .
    snd-msg(ts-put-str-value("asf-text", Name, EqsText)) .
    snd-msg(eqs-added)
  +
    rec-msg(update-eqs-tree-in-db(Name?, tree(EqsTree?))) .
    snd-msg(ts-get-str-value("module-paths", Name)) .
    rec-msg(ts-value(Path?)) .
    snd-msg(file-extension-hook(asf)) .
    rec-msg(file-extension-hook-result(Extension?)) .
    snd-msg(io-get-filename(Path, Name, Extension)) .
    rec-msg(io-filename(FileName?)) .
    snd-msg(add-posinfo-to-depth(FileName,EqsTree, POSINFO_DEPTH)) .
    rec-msg(tree-with-pos-info(EqsTree?)) .
    snd-msg(ts-put-term-value("asf-tree", Name, EqsTree)) .
    EqsTree := no-tree .
    snd-msg(eqs-updated)
  +
    rec-msg(update-eqs-text-in-db(Name?, text(EqsText?))).
    snd-msg(ts-get-str-value("asf-text", Name)) .
    (
      rec-msg(ts-value(LocalText?)) .
      if not-equal(EqsText, LocalText) then
        snd-msg(ts-remove-value("asf-tree", Name)) .
        snd-msg(ts-put-str-value("asf-text", Name, EqsText)) .
        snd-msg(eqs-text-updated(Name))
      else 
        snd-msg(no-updating-needed)
      fi 
    +
      rec-msg(ts-no-value) .
      snd-msg(ts-put-str-value("asf-text", Name, EqsText)) .
      snd-msg(eqs-text-added(Name))
    ) .
    EqsText := ""
  +
    rec-msg(add-parse-table-to-db(Name?, eqs, Table?)) .
    snd-msg(ts-put-term-value("asf-parse-table", Name, Table)) .
    Table := no-table .
    snd-msg(parse-table-added)
  +
    rec-msg(add-parse-table-to-db(Name?, trm, Table?)) .
    snd-msg(ts-put-term-value("term-parse-table", Name, Table)) .
    Table := no-table .
    snd-msg(parse-table-added)
  +
    rec-msg(get-path-from-db(Name?)).
    snd-msg(ts-get-str-value("module-paths", Name)) .
    ( 
      rec-msg(ts-value(Path?)) .
      snd-msg(path(Path))
    +
      rec-msg(ts-no-value) .
      snd-msg(no-path)
    )
  +
    ( 
      rec-msg(get-table-from-db(Name?, trm)) .
      snd-msg(ts-get-term-value("term-parse-table", Name))
    +
      rec-msg(get-table-from-db(Name?, eqs)) .
      snd-msg(ts-get-term-value("asf-parse-table", Name))
    ) .
    (
      rec-msg(ts-value(Table?)) .
      snd-msg(table(Table)) .
      Table := no-table
    +
      rec-msg(ts-no-value) .
      snd-msg(no-table)
    )
  +
    rec-msg(get-all-depending-modules(Name?)).
    MDB-GetAllDependingModules(Name, DependingModules?) .
    snd-msg(all-depending-modules(DependingModules))
  +
    rec-msg(get-all-imported-module-names(Name?)).
    MDB-GetAllImportedModuleNames(Name, ModuleNames?) .
    snd-msg(all-imported-module-names(ModuleNames))
  +
    rec-msg(get-all-modules) .
    snd-msg(ts-get-all-values("sdf-tree")) .
    rec-msg(ts-all-values(Modules?)) .
    snd-msg(all-modules(Modules)) .
    Modules := []
  +
    rec-msg(get-imported-modules(Name?)).
    MDB-GetImportedModules(Name, Modules?) .
    snd-msg(imported-modules(Modules))
  +
    rec-msg(get-all-module-names).
    snd-msg(ts-get-all-keys("active-modules")) .
    rec-msg(ts-all-keys(ModuleNames?)) .
    snd-msg(all-module-names(ModuleNames))
  + 
    rec-msg(all-equations-available(Name?)).
    MDB-AllEquationsAvailable(Name, ModuleNames?) .
    if equal(ModuleNames, []) then
      snd-msg(equations-available)
    else
      snd-msg(equations-incomplete)
    fi
  +
    rec-msg(get-modules(ModuleNames?)) .
    snd-msg(ts-get-values("sdf-tree", ModuleNames)) .
    rec-msg(ts-values(Modules?)) .
    snd-msg(modules(Modules)) .
    Modules := []
  +
    rec-msg(get-all-sdf2-definitions(Name?, Type?)) .
    MDB-GetAllImportedModuleNames(Name, ModuleNames?) .
    snd-msg(pre-get-all-sdf2-hook(ModuleNames, Type)) .
    (
       rec-msg(pre-get-all-sdf2-hook-result(success)) .
       snd-msg(ts-get-values("sdf-tree", ModuleNames)) .
       rec-msg(ts-values(Modules?)) .
       snd-msg(sm-make-sdf-definition(Modules)) .
       Modules := [] .
       (
         rec-msg(sm-sdf-definition(Syntax?)) .
         snd-msg(syntax(Syntax)) .
         Syntax := no-tree
       +
         rec-msg(sm-no-sdf-definition) .
         snd-msg(no-syntax("syntax incomplete"))
       )
     +
       rec-msg(pre-get-all-sdf2-hook-result(failure(ErrorMsg?))) .
       snd-msg(no-syntax(ErrorMsg)) 
    )
  +
    rec-msg(get-sdf2-asfix(Name?)) .
    snd-msg(ts-get-term-value("sdf-tree", Name)) .
    (
      rec-msg(ts-value(Syntax?)) .
      snd-msg(syntax(Syntax)) .
      Syntax := no-tree
    +
      rec-msg(ts-no-value) .
      snd-msg(unavailable)
    )
  +
    rec-msg(get-eqs-tree(Name?)) .
    snd-msg(ts-get-term-value("asf-tree", Name)) .
    (
      rec-msg(ts-value(EqsTree?)) .
      snd-msg(tree(EqsTree)) .
      EqsTree := no-tree
    +
      rec-msg(ts-no-value) .
      snd-msg(unavailable)
    )
  +
    rec-msg(get-equations-for-module(Name?)).   
    snd-msg(ts-get-term-value("asf-tree", Name)) .
    (
      rec-msg(ts-value(EqsTree?)) .
      snd-msg(equations(EqsTree)) .
      EqsTree := no-tree
    +
      rec-msg(ts-no-value) .
      snd-msg(no-equations)
    )
  +
    rec-msg(invalidate-parse-tables(Name?)).
    MDB-GetAllDependingModules(Name, DependingModules?) .
    MDB-InvalidateModule(Name, sdf) .
    MDB-InvalidateModules(DependingModules, sdf)
  +
    rec-msg(get-module-info(Name?)) .
    snd-msg(ts-get-str-value("module-paths", Name)) .
    (
      rec-msg(ts-value(Path?)) .
      MDB-GetImportedModules(Name, Modules?) .
      MDB-GetDependingModules(Name, DependingModules?) .
      snd-msg(module-info(Name, [[path, Path], [importedby, Modules], [imports, DependingModules]]))
    +
      rec-msg(ts-no-value) .
      snd-msg(module-info(Name, [[path,"not-available"]]))
    )   
) *
delta
endlet

process MDB-InitializeModuleDb is
  snd-msg(ts-add-table("extensions", "str")) .
  snd-msg(ts-add-table("active-modules", "str")) .
  snd-msg(ts-add-table("module-paths", "str")) . 
  snd-msg(ts-add-table("path-modulename", "str")) . 
  snd-msg(ts-add-table("sdf-tree", "term")) .
  snd-msg(ts-add-table("sdf-text", "str")) .
  snd-msg(ts-add-table("asf-tree", "term")) .
  snd-msg(ts-add-table("asf-text", "str")) .
  snd-msg(ts-add-table("asf-parse-table", "term")) .
  snd-msg(ts-add-table("term-parse-table", "term")) .
  snd-msg(ts-add-table("import-relations", "term")) 

process MDB-ClearModuleDb is
  snd-msg(ts-clear-table("extensions")) .
  snd-msg(ts-clear-table("active-modules")) .
  snd-msg(ts-clear-table("module-paths")) .
  snd-msg(ts-clear-table("path-modulename")) .
  snd-msg(ts-clear-table("sdf-tree")) .
  snd-msg(ts-clear-table("sdf-text")) .
  snd-msg(ts-clear-table("asf-tree")) .
  snd-msg(ts-clear-table("asf-text")) .
  snd-msg(ts-clear-table("asf-parse-table")) .
  snd-msg(ts-clear-table("term-parse-table")) .
  snd-msg(ts-clear-table("import-relations"))

process MDB-InitializeFileExtensions is
let
  SyntaxExt : str,
  RulesExt : str,
  TermExt : str
in  
  snd-msg(get-file-extensions) .
  rec-msg(set-file-extensions(syntax(SyntaxExt?),
                              rules(RulesExt?),
			      term(TermExt?))) .
  snd-msg(ts-put-str-value("extensions", "syntax", SyntaxExt)) .
  snd-msg(ts-put-str-value("extensions", "equations", RulesExt)) .
  snd-msg(ts-put-str-value("extensions", "term", TermExt))
endlet
 
process MDB-GetAllDependingModules(Name : str, DependingModules : list?) is
let
  Pairs : list
in
    snd-msg(ts-get-key-value-pairs("import-relations")) .
    rec-msg(ts-pairs(Pairs?)) .
    snd-msg(sm-get-all-depending-module-names(Pairs, Name)) .
    Pairs := [] .
    rec-msg(sm-all-depending-module-names(DependingModules?)) 
endlet

process MDB-GetDependingModules(Name : str, DependingModules : list?) is
let
  Pairs : list
in
    snd-msg(ts-get-key-value-pairs("import-relations")) .
    rec-msg(ts-pairs(Pairs?)) .
    snd-msg(sm-get-depending-module-names(Pairs, Name)) .
    Pairs := [] .
    rec-msg(sm-depending-module-names(DependingModules?)) 
endlet

process MDB-GetAllImportedModuleNames(Name : str, Imported : list?) is
let
  Pairs : list
in
    snd-msg(ts-get-key-value-pairs("import-relations")) .
    rec-msg(ts-pairs(Pairs?)) .
    snd-msg(sm-get-all-needed-module-names(Pairs, Name)) .
    Pairs := [] .
    rec-msg(sm-all-needed-module-names(Imported?))
endlet

process MDB-GetImportedModules(Name : str, Imported : list?) is
let
  Syntax : term
in
  snd-msg(ts-get-term-value("import-relations", Name)) .
  (
    rec-msg(ts-value(Imported?))
  +
    rec-msg(ts-no-value) .
    Imported := []
  )
endlet

process MDB-DisplayGraph is
let
  Pairs : list
in
  snd-msg(ts-get-key-value-pairs("import-relations")) .
  rec-msg(ts-pairs(Pairs?)) .
  snd-note(display-import-graph(Pairs)) .
  Pairs := []
endlet

process MDB-StoreModuleTree(Name : str, Syntax : term) is
let
  Modules : list,
  Text : str
in
  snd-msg(ts-put-term-value("sdf-tree", Name, Syntax)) .
  snd-msg(unparse(Syntax)) .
  rec-msg(unparsed-text(Text?)) .
  snd-msg(ts-put-str-value("sdf-text", Name, Text)) .
  snd-msg(sm-get-imported-module-names(Syntax)) .
  rec-msg(sm-imported-module-names(Modules?)) .
  snd-msg(ts-put-term-value("import-relations", Name, Modules)) .
  MDB-GetAllDependingModules(Name, Modules?) .
  MDB-InvalidateModule(Name, sdf) .
  MDB-InvalidateModules(Modules, sdf)
endlet

process MDB-RemoveImportFromModules(Name : str, ActualModules : list) is
let
  Module : str,
  Modules : list,
  Imports : list,
  Syntax : term,
  Status : term
in
  Modules := ActualModules .
  if not(equal(Modules,[])) then
    Module := first(Modules) .
    Modules := next(Modules) .
    snd-msg(ts-get-term-value("sdf-tree", Module)) .
    (
      rec-msg(ts-value(Syntax?)) .
      snd-msg(sm-get-imported-module-names(Syntax)) .
      rec-msg(sm-imported-module-names(Imports?)) .
      MDB-ContainedIn(Name, Imports, Status?) .
      if equal(Status, success) then
        snd-msg(sm-remove-import-from-module(Syntax, Name)) .
        Syntax := no-tree .
        rec-msg(sm-import-removed-from-module(Syntax?)) .
        MDB-StoreModuleTree(Module, Syntax) .
        Syntax := no-tree
      else
        tau
      fi
    +
      rec-msg(ts-no-value)
    )
  fi
  *
  if equal(Modules,[]) then
    tau
  fi .
  MDB-DisplayGraph
endlet

process MDB-RenameModule(OldName : str, NewName : str, NewPath : str,
                         Changed : list?) is
let
  Status : term,
  Modules : list,
  Imports : list,
  Module : str,
  Path : str,
  Text : str,
  Syntax : term,
  Tree : term
in
  MDB-GetAllDependingModules(OldName, Modules?) .
  Changed := [] .
  if not(equal(Modules,[])) then
    Module := first(Modules) .
    Modules := next(Modules) .
    snd-msg(ts-get-term-value("sdf-tree", Module)) .
    rec-msg(ts-value(Syntax?)) .
    snd-msg(sm-get-imported-module-names(Syntax)) .
    rec-msg(sm-imported-module-names(Imports?)) .
    MDB-ContainedIn(OldName, Imports, Status?) .
    if equal(Status, success) then
      snd-msg(sm-remove-import-from-module(Syntax, OldName)) .
      rec-msg(sm-import-removed-from-module(Syntax?)) .
      snd-msg(sm-add-import-to-module(Syntax, NewName)) .
      rec-msg(sm-import-added-to-module(Syntax?)) .
      MDB-StoreModuleTree(Module, Syntax) .
      Syntax := no-tree .
      Changed := join(Changed, Module)
    else
      tau
    fi
  fi
  *
  if equal(Modules,[]) then
    tau
  fi .
  MDB-CopyModule(OldName, NewName, NewPath) .
  snd-msg(ts-remove-value-from-all-tables(OldName))
endlet

process MDB-RegisterPath(Path : str, ModuleId : str) is
  snd-msg(ts-put-str-value("path-modulename", Path, ModuleId)) 

process MDB-CopyModule(OldName : str, NewName : str, NewPath : str) is
let
  Path : str,
  Text : str,
  Syntax : term,
  Tree : term
in
  snd-msg(ts-get-term-value("sdf-tree", OldName)) .
  rec-msg(ts-value(Syntax?)) .
  snd-msg(sm-rename-modulename-in-module(Syntax, NewName)) .
  rec-msg(sm-modulename-renamed-in-module(Syntax?)) .
  MDB-StoreModuleTree(NewName, Syntax) .
  Syntax := no-tree .
  snd-msg(ts-put-str-value("module-paths", NewName, NewPath)) .
  MDB-RegisterPath(NewPath, NewName) .
  snd-msg(ts-put-str-value("active-modules", NewName, NewPath)) .
  snd-msg(ts-get-term-value("asf-tree", OldName)) .
  (
    rec-msg(ts-value(Tree?)) .
    snd-msg(ts-put-term-value("asf-tree", NewName, Tree)) .
    Tree := no-tree
  +
    rec-msg(ts-no-value)
  ) .
  snd-msg(ts-get-str-value("asf-text", OldName)) .
  (
    rec-msg(ts-value(Text?)) .
    snd-msg(ts-put-str-value("asf-text", NewName, Text)) .
    Text := ""
  +
    rec-msg(ts-no-value)
  )
endlet

process MDB-AddImportToModule(OldName : str, NewName : str) is
let
  Syntax : term
in
  snd-msg(ts-get-term-value("sdf-tree", OldName)) .
  rec-msg(ts-value(Syntax?)) .
  snd-msg(sm-add-import-to-module(Syntax, NewName)) .
  Syntax := no-tree .
  rec-msg(sm-import-added-to-module(Syntax?)) .
  MDB-StoreModuleTree(OldName, Syntax) .
  Syntax := no-tree .
  MDB-DisplayGraph
endlet

process MDB-AllEquationsAvailable(Name : str, Missing : list?) is
let
  ModuleNames : list,
  ModuleName  : str,
  Text    : str,
  Tree    : term
in
  MDB-GetAllImportedModuleNames(Name, ModuleNames?) .
  Missing := [] .
  if not(equal(ModuleNames, [])) then
    ModuleName := first(ModuleNames) .
    ModuleNames := next(ModuleNames) .
    snd-msg(ts-get-str-value("asf-text", ModuleName)) . 
    (
      rec-msg(ts-no-value)
    +
      rec-msg(ts-value(Text?)) .
      Text := "" .
      snd-msg(ts-get-term-value("asf-tree", ModuleName)) .
      (
        rec-msg(ts-no-value) .
	Missing := join(ModuleName, Missing)
      +
        rec-msg(ts-value(Tree?)) .
	Tree := no-tree
      )
    )
  fi
  * 
  if equal(ModuleNames, []) then
    tau
  fi
endlet

process MDB-ContainedIn(Name : str, Modules : list, Status : term?) is
let
  Module : str,
  Runner : list
in
  Status := no-success .
  Runner := Modules .
  if not-equal(Runner, []) then
    Module := first(Runner) .
    Runner := next(Runner) .
    if equal(Module, Name) then
      Status := success
    else 
      tau
    fi
  fi
  *
  if equal(Runner, []) then
    tau
  fi
endlet

process MDB-InvalidateModules(Modules : list, Type : term) is
let
  Module : str,
  Runner : list
in
  Runner := Modules .
  if not-equal(Runner, []) then
    Module := first(Runner) .
    Runner := next(Runner) .
    MDB-InvalidateModule(Module, Type)
  fi
  *
  if equal(Runner, []) then
    tau
  fi
endlet

process MDB-InvalidateModule(Module : str, Type : term) is
  snd-msg(ts-remove-value("asf-tree", Module)) .
  snd-msg(ts-remove-value("asf-parse-table", Module)) .
  snd-msg(ts-remove-value("term-parse-table", Module)) .
  snd-msg(invalidate-other-tables-hook(Module, Type)) .
  rec-msg(other-tables-invalidated-hook)

process MDB-AddModulePosInfo(Module : str, In : term , Out : term?) is
  MDB-AddPosInfo(Module, sdf, In, Out?)

process MDB-AddEquationsPosInfo(Module : str, In : term , Out : term?) is
  MDB-AddPosInfo(Module, asf, In, Out?)

process MDB-AddPosInfo(Module : str, Type : term, In : term , Out : term?) is
let
  Path : str,
  FileName : str,
  Extension : str
in
  snd-msg(ts-get-str-value("module-paths", Module)) .
  rec-msg(ts-value(Path?)) .
  snd-msg(file-extension-hook(Type)) .
  rec-msg(file-extension-hook-result(Extension?)) .
  snd-msg(io-get-filename(Path, Module, Extension)) .
  rec-msg(io-filename(FileName?)) .
  snd-msg(add-posinfo-packed(FileName, In)) .
  rec-msg(tree-with-pos-info(Out?)) 
endlet

process MDB-GetModuleName(Path : str, FileName : str, ModuleName : str?) is
let
  FullFileName : str
in
  snd-msg(io-get-filename(Path, FileName, "")) .
  rec-msg(io-filename(FullFileName?)) .
  snd-msg(ts-get-str-value("path-modulename",FullFileName)) .
  (
    rec-msg(ts-value(ModuleName?))
  +
    rec-msg(ts-no-value) .
    ModuleName := FileName
  )
endlet
