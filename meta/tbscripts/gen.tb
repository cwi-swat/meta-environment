/*
   $Id$
*/
tool genadapt is {
  command = "gen-adapter"
}

tool termgenadapt is {
  command = "gen-adapter -term-output"
}

process ADAPTER(Id : genadapt, Cmd : str, Inp : str, Outp : str?) is
   snd-eval(Id,cmd(Cmd, input(Inp))).
   rec-value(Id, output(Outp?))

process TERM-IN-ADAPTER(Id : genadapt, Cmd : str, Inp : term, Outp : str?) is
   snd-eval(Id,cmd(Cmd, input-term(Inp))).
   rec-value(Id, output(Outp?))

process TERM-IN-OUT-ADAPTER(Id : termgenadapt, Cmd : str, 
                            Inp : term, Outp : term?) is
   snd-eval(Id, cmd(Cmd, input-term(Inp))).
   rec-value(Id, output(Outp?))

process Execute(Cmd : str, Inp : term, Outp : term?) is
let
  TERMGENADAPT : termgenadapt
in
  execute(termgenadapt, TERMGENADAPT?) .
  snd-eval(TERMGENADAPT, cmd(Cmd, input-term(Inp))) .
  rec-value(TERMGENADAPT, output(Outp?)) .
  snd-terminate(TERMGENADAPT, termgenadapt)
endlet 

process GenAdapt is
let
  GENADAPT     : genadapt,
  TERMGENADAPT : termgenadapt,
  Action       : str,
  OutStr       : str,
  InStr        : str,
  FunSym       : str,
  EditorId     : term,
  Stack        : list,
  STree        : term,
  RTree        : term
in
  execute(genadapt, GENADAPT?) .
  execute(termgenadapt, TERMGENADAPT?) .
  (
    rec-msg(activate(Action?), Stack?, EditorId?) .
    ADAPTER(GENADAPT, Action, "", OutStr?) .
    if not-equal(OutStr, "") then
      RTree := quote(str(OutStr)) .
      Stack := join(RTree, Stack) .
      snd-msg(stack(Stack), EditorId)
    else
      snd-msg(stack(Stack), EditorId)
    fi
  +
    rec-msg(activate-given-tree(Action?), Stack?, EditorId?) .
    STree := first(Stack) .
    Stack := next(Stack) .
    FunSym := fun(STree) .
    if not-equal(FunSym, "str") then
      TERM-IN-ADAPTER(GENADAPT, Action, STree, OutStr?) .
      if not-equal(OutStr, "") then
        RTree := quote(str(OutStr)) .
        Stack := join(RTree, Stack) .
        snd-msg(stack(Stack), EditorId)
      else
        snd-msg(stack(Stack), EditorId)
      fi
    else
      InStr := first(args(STree)) .
      ADAPTER(GENADAPT, Action, InStr, OutStr?) .
      if not-equal(OutStr, "") then
        RTree := quote(str(OutStr)) .
        Stack := join(RTree, Stack) .
        snd-msg(stack(Stack), EditorId)
      else
        snd-msg(stack(Stack), EditorId)
      fi
    fi
  +
    rec-msg(execute-action(Action?), Stack?, EditorId?) .
    STree := first(Stack) .
    Stack := next(Stack) .
    TERM-IN-OUT-ADAPTER(TERMGENADAPT, Action, STree, RTree?) .
    if not-equal(RTree, error-tree) then
      Stack := join(RTree, Stack) .
      snd-msg(stack(Stack), EditorId)
    else
      snd-msg(error-stack, EditorId)
    fi
  )*
  delta
endlet
