/*
   $Id$
*/
tool genadapt is {
  command = "gen-adapter"
}

tool termgenadapt is {
  command = "gen-adapter -term-output"
}

process ADAPTER(Id : genadapt, Cmd : str, Inp : str, Outp : str?) is
   snd-eval(Id,cmd(Cmd, input(Inp))).
   rec-value(Id, output(Outp?))

process TERM-IN-ADAPTER(Id : genadapt, Cmd : str, Inp : term, Outp : str?) is
   snd-eval(Id,cmd(Cmd, input-term(Inp))).
   rec-value(Id, output(Outp?))

process TERM-IN-OUT-ADAPTER(Id : termgenadapt, Cmd : str, 
                            Inp : term, Outp : term?) is
   snd-eval(Id, cmd(Cmd, input-term(Inp))).
   rec-value(Id, output(Outp?))

process Execute(Cmd : str, Inp : term, Outp : term?) is
let
  TERMGENADAPT : termgenadapt
in
  execute(termgenadapt, TERMGENADAPT?) .
  snd-eval(TERMGENADAPT, cmd(Cmd, input-term(Inp))) .
  rec-value(TERMGENADAPT, output(Outp?)) .
  snd-terminate(TERMGENADAPT, termgenadapt)
endlet 

process GenAdapt is
let
  GENADAPT     : genadapt,
  TERMGENADAPT : termgenadapt,
  Action       : str,
  OutStr       : str,
  InStr        : str,
  FunSym       : str,
  Id           : term,
  STree        : term,
  RTree        : term
in
  execute(genadapt, GENADAPT?) .
  execute(termgenadapt, TERMGENADAPT?) .
  (
    rec-msg(gen-adapter-activate(Id?, Action?)).
    ADAPTER(GENADAPT, Action, "", OutStr?) .
    snd-msg(gen-adapter-result(Id, OutStr))
  +
    rec-msg(gen-adapter-string-to-string-evaluate(Id?,Action?,InStr?)).
    ADAPTER(GENADAPT, Action, InStr, OutStr?) .
    snd-msg(gen-adapter-string-to-string-result(Id,OutStr))
  +
    rec-msg(gen-adapter-term-to-string-evaluate(Id?,Action?,STree?)).
    TERM-IN-ADAPTER(GENADAPT, Action, STree, OutStr?) .
    snd-msg(gen-adapter-term-to-string-result(Id,OutStr))
  +
    rec-msg(gen-adapter-term-evaluate(Id?,Action?,STree?)).
    TERM-IN-OUT-ADAPTER(TERMGENADAPT, Action, STree, RTree?) .
    snd-msg(gen-adapter-term-result(Id,RTree))
  )*
  delta
endlet
