/* $Id$ */

process Open-initial-module is
let
  Path : str,
  Module : str,
  Extension : str,
  Imports : list,
  Type : term
in
  (
    rec-msg(open-initial-module(Path?, Module?, Extension?)) .
    if equal(Extension, "") then
      Type := quote(sdf)
    else 
      snd-msg(extension-to-type-hook(Extension)) .
      rec-msg(extension-to-type-hook-result(Type?))
    fi .
    snd-msg(is-module-in-db(Module)).
    (
      rec-msg(not-exists-in-module-db(Module)) .
      Open-Module(Path, Module, Type, Imports?).
      snd-msg(open-modules(Imports, Type)).
      rec-msg(finished-opening-modules)
    +
      rec-msg(exists-in-module-db(Module))
    )
  ) *
  delta
endlet

process DrawImportGraph is
let
  ImportRelations : list
in
  snd-msg(get-import-relations) .
  rec-msg(import-relations(ImportRelations?)) .
  snd-note(display-import-graph(ImportRelations)) .
  ImportRelations := []
endlet

process LocateFile(Name : str, Extension : str, Path : str?) is
let
  Directories : list,
  Chosen : str
in
  snd-msg(get-search-paths) .
  rec-msg(search-paths(Directories?)) .
  snd-msg(io-find-file(Directories, Name, Extension)) .
  (
    rec-msg(io-file-not-found) .
    Path := "" 
  +
    rec-msg(io-file-found(Directories?)) .
    Path := first(Directories) .
    Directories := next(Directories) .
    if not-equal(Directories, []) then
      snd-msg(io-get-filename(Path, Name, Extension)) .
      rec-msg(io-filename(Chosen?)) .
      DealWithMultipleOccurrences(Chosen, Name, Extension, Directories)
    else
      tau
    fi
  )
endlet

process DealWithMultipleOccurrences(Chosen : str, Name : str,
                                    Extension : str, Peers : list) is
let
  Directories : list,
  Directory : str,
  FileName : str
in
  Directories := Peers .
  if not-equal(Directories, []) then
    Directory := first(Directories) .
    Directories := next(Directories) .
    snd-msg(io-get-filename(Directory, Name, Extension)) .
    rec-msg(io-filename(FileName?)) .
    snd-msg(io-compare-files(FileName, Chosen)) .
    (
      rec-msg(io-files-equal) 
    +
      rec-msg(io-files-differ) .
      snd-note(ui-status(messagef(
      "Multiple occurrences of %s. Continuing with %s",
                                [Name, Chosen]))) 
    )
  fi
  *
  if equal(Directories, []) then
    tau
  fi
endlet

process Open-modules is 
let
  Id : int,
  Modules : list,
  Module : str,
  Imports : list,
  Path : str,
  FileName : str,
  Extension : str,
  Changed : term,
  Type : term
in
  Id := process-id.
  (
    rec-msg(open-modules(Modules?, Type?)).
    Changed := true .
    snd-note(ui-status(stat(Id,"Opening Modules"))). 
    if not-equal(Modules, []) then
      Module := first(Modules).
      Modules := next(Modules).
      snd-msg(is-module-in-db(Module)).
      (
        rec-msg(exists-in-module-db(Module))
      +
        rec-msg(not-exists-in-module-db(Module)).
	snd-msg(file-extension-hook(Type)) .
	rec-msg(file-extension-hook-result(Extension?)) .
        LocateFile(Module, Extension, Path?) .
	if not-equal(Path, "") then
          Open-Module(Path, Module, Type, Imports?).
          Modules := join(Imports, Modules)
        else 
          Error("Opening module %s failed: file not found!", [Module])
        fi
      )
    fi *
    if equal(Modules, []) then
      if equal(Changed, true) then
        DrawImportGraph()
      else
        tau
      fi .
      snd-note(ui-status(endstat(Id))) .
      snd-msg(finished-opening-modules)
    fi
  ) *
  delta
endlet

process Open-Module(Path : str, Module : str, Type : term, Imports : list?) 
is
let
  Id : int,
  Error : term,
  RealPath : str,
  RealModule : str
in
  Id := process-id.
  snd-note(ui-status(statf(Id,"Opening %s",[Module]))).
  Imports := [].
  (
    Open-Syntax(Path, Module, Type, Error?, RealPath?, RealModule?, Imports?).
    if equal(Error, no-errors) then
      if equal(Type, sdf) then 
        Open-Equations(RealPath, RealModule)
      else
        tau
      fi
    else
      Handle-Open-Module-Errors(Module, Error)
    fi
  ).
  snd-note(ui-status(endstat(Id)))
endlet

process Error(Message : str, MessageArgs : list) is
  snd-note(ui-status(errorf(Message, MessageArgs)))
  
process Handle-Open-Module-Errors(Module : str, Error : term) is
let
  FunSym       : str
in
  FunSym := fun(Error) .
  if not-equal(Error, no-errors) then
    if not-equal(FunSym, "summary") then
      if equal(Error, name-inconsistent) then
        Error("Name of module %s inconsistent", [Module])
      else
        Error("Opening module %s failed: %s", [Module, Error])
      fi
    else
      snd-note(show-feedback-summary(Error))
    fi
  else
    tau
  fi
endlet

process Open-Syntax(Path : str, Module : str, Type : term, Error : term?,
                    RealPath : str?, RealModule : str?, Imports : list?) is
let
  Tree : term,
  Text : str,
  Message : str,
  FileName : str,
  Extension : str
in
  snd-msg(sm-is-valid-modulename(Module)) .
  ( 
    rec-msg(sm-modulename-is-valid) .
    snd-msg(file-extension-hook(Type)) .
    rec-msg(file-extension-hook-result(Extension?)) .
    snd-msg(io-get-filename(Path, Module, Extension)) .
    rec-msg(io-filename(FileName?)) .
    snd-msg(io-read-file(FileName)) .
    (
      rec-msg(io-file-contents(Text?)) .
      Parse-Syntax(FileName, Text, Type, Tree?, Error?)
    +
      rec-msg(io-error-reading(Message?)) .
      Error := no-such-file
    ) .
    if not-equal(Error, no-such-file) then
      Imports := [].
      snd-msg(add-module-to-db(Module, Path, Type, Text, Tree)).
      (
        rec-msg(adding-succeeded(Module, RealPath?, RealModule?, Imports?))
      +
        rec-msg(error-opening(Module, Error?))
      )
    else
      tau
    fi
  +
    rec-msg(sm-modulename-is-invalid) .
    Error := invalid-module-name
  )
endlet

process Parse-Syntax(FileName : str, Text : str, Type : term, 
                     Tree : term?, Error : term?) is
let
  Id : int,
  TermType : term,
  Sort : str,
  Table : term
in
  Id := process-id.
  snd-msg(open-language(Type)) .
  (
    rec-msg(parse-table(TermType?, Table?)) .
    snd-msg(syntax-top-sort-hook(Type)) .
    rec-msg(syntax-top-sort-hook-result(sort(Sort?))) .
    snd-msg(Id, parse-string-given-table(TermType, Table, Sort, Text, FileName)) .
    rec-msg(parse-result-asfix2me(Id?, Tree?, Error?))
  +
    rec-msg(no-parse-table) .
    Tree := no-tree
  )
endlet

process Open-Equations (Path : str, Module : str)  is
let
  Tree : term,
  Text : str,
  ErrorMessage : str,
  FileName : str,
  Extension : str
in
  snd-msg(file-extension-hook(asf)) .
  rec-msg(file-extension-hook-result(Extension?)) .
  snd-msg(io-get-filename(Path, Module, Extension)) .
  rec-msg(io-filename(FileName?)) .
  snd-msg(io-read-file(FileName)) .
  (
    rec-msg(io-file-contents(Text?)) .
    snd-msg(add-eqs-to-db(Module, text(Text))) .
    rec-msg(eqs-added)
  +
    rec-msg(io-error-reading(ErrorMessage?)) 
  )
endlet
