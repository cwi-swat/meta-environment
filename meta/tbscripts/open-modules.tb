/*

    Meta-Environment - An environment for language prototyping.
    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, 
                        The Netherlands. 

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

*/
/*
   $Id$
 */

process Open-modules is
let
  Id      : term,
  Name    : str,
  Name2   : str,
  Str     : str,
  Path    : str,
  Table   : term,
  FT      : str,
  T        : term,
  EqsTree  : term,
  EqsText  : str,
  Contents : term,
  M1s     : list,
  M2s     : list,
  Ms      : list,
  Pairs   : list,
  I       : int,
  T1      : term,
  Time    : term,
  Ch      : int,
  Li      : int,
  Co      : int,
  Char    : term,
  ErrList : list,
  Ambs    : list,
  Cycle   : list,
  AnonymousError : term
in
  Id := process-id. 
  (
    rec-msg(open-modules(Ms?)).
    M2s := Ms.
    snd-note(ui-status(stat(Id,"Opening Modules"))). (
      if not-equal(Ms, []) then
        Name := first(Ms).
        snd-note(ui-status(statf(Id,"Opening %s",[Name]))).
        Ms   := next(Ms).
       /* First we should check here whether this module has already been 
        * opened..
        */
        snd-msg(is-module-in-db(Name)). ( 
          rec-msg(exists-in-module-db(Name))
          +
          /* If it is not open, open it. */
          rec-msg(not-exists-in-module-db(Name?)). ( 
            snd-msg(open-file(Name)). ( 
              rec-msg(opened-file(Name2?,tree(T?),Path?,Time?)).
              snd-msg(add-sdf2-module-to-db(Name, Path, T, Time, "unchanged")).
              rec-msg(need-modules(M1s?)).
              Ms := join(Ms,M1s).
              snd-msg(read-parse-table(Name, eqs)).
              ( 
                rec-msg(table-on-disk(Table?, Time?)).
                snd-msg(add-parse-table-to-db(eqs(Name), Table, Time)).
                rec-msg(parse-table-added).
                snd-msg(open-eqs-file(Name)).
                (
                  rec-msg(opened-file(Name?, text(EqsText?) , Path?, Time?)).
                  snd-msg(add-eqs-to-db(Name, Path, text(EqsText), Time)) .
                  rec-msg(eqs-added)
                +
                  rec-msg(opened-file(Name?, tree(EqsTree?) , Path?, Time?)).
                  snd-msg(unparse(EqsTree)) .
                  rec-msg(unparsed-text(EqsText?)) .
                  snd-msg(add-eqs-to-db(Name, Path, tree(EqsTree), 
                                        text(EqsText), Time)) .
                  rec-msg(eqs-added)
                +
                  rec-msg(error-opening(Name?))
                )
              +
                rec-msg(no-table-on-disk) .
                snd-msg(open-eqs-file(Name)).
                (
                  rec-msg(opened-file(Name?, text(EqsText?), Path?, Time?)).
                  snd-msg(add-eqs-to-db(Name, Path, text(EqsText), Time)).
                  rec-msg(eqs-added)
                +
                  rec-msg(opened-file(Name?, tree(EqsTree?), Path?, Time?)).
                  snd-msg(unparse(EqsTree)) .
                  rec-msg(unparsed-text(EqsText?)) .
                  snd-msg(add-eqs-to-db(Name, Path, text(EqsText), Time)) .
                  rec-msg(eqs-added)
                +
                  rec-msg(error-opening(Name?))
                )
              ) .
              snd-msg(read-parse-table(Name, trm)).
              ( 
                rec-msg(table-on-disk(Table?, Time?)).
                snd-msg(add-parse-table-to-db(trm(Name), Table, Time)).
                rec-msg(parse-table-added)
              +
                rec-msg(no-table-on-disk)
              ) 
              +
              rec-msg(opened-file(Name2?,text(FT?),Path?,Time?)). 
              snd-msg(open-sdf2-language).
              rec-msg(sdf2-language-opened).
              snd-msg(Id,parse-string-as-asfix1(trm("Sdf2"),"Module",FT)).
              ( rec-msg(parse-result-asfix1(Id?,parse-tree(T?))).
                snd-msg(add-sdf2-module-to-db(Name, Path, T, Time, "changed")).
                rec-msg(need-modules(M1s?)).
                Ms := join(Ms,M1s) .
                snd-msg(open-eqs-file(Name)).
                (
                  rec-msg(opened-file(Name?, text(EqsText?), Path?, Time?)).
                  snd-msg(add-eqs-to-db(Name, Path, text(EqsText), Time)).
                  rec-msg(eqs-added)
                +
                  rec-msg(opened-file(Name?, tree(EqsTree?), Path?, Time?)).
                  snd-msg(unparse(EqsTree)) .
                  rec-msg(unparsed-text(EqsText?)) .
                  snd-msg(add-eqs-to-db(Name, Path, text(EqsText), Time)) .
                  rec-msg(eqs-added)
                +
                  rec-msg(error-opening(Name?))
                )
              + 
                rec-msg(parse-result-asfix1(Id?,parse-error(ErrList?,AnonymousError?))).
                snd-msg(add-empty-module-to-db(Name2)).
                rec-msg(empty-module-added).
                snd-note(ui-status(errorf("Please fix syntax error in module %s.",
                  [Name2]))).
                snd-msg(edit-syntax(Name2))
             )
             +
             /* File would not open (unreadable, not exist, wrong path...) */
              rec-msg(error-opening(Str?)).
              snd-msg(cannot-open-module(Str)).
              snd-msg(add-empty-module-to-db(Str)).
              rec-msg(empty-module-added)
            )
          )
        ).
        snd-note(ui-status(endstat(Id)))
      fi
    ) *
    if equal(Ms,[]) then
      (
        if not-equal(M2s, []) then
          Name := first(M2s).
          M2s   := next(M2s).
          snd-msg(is-module-in-db(Name)).
          (
            rec-msg(exists-in-module-db(Name2?)).
            snd-msg(invalidate-parse-tables(Name))
          +
            rec-msg(not-exists-in-module-db(Name2?))
          )
        fi
      ) *
      if equal(M2s, []) then
        tau
      fi
    fi.
/* We are finished. Inform UI */
    snd-note(ui-status(endstat(Id))) .
    snd-msg(finished-opening-modules)
  ) *
  delta
endlet
