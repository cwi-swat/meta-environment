/* $Id$
 */

process Open-modules(Eval: evaluator) is
let
  Id    : term,
  Name  : term,
  Name2 : term,
  Str   : str,
  Path  : str,
  Table : str,
  FT   : str,
  T    : term,
  M1s  : list,
  M2s  : list,
  Ms   : list,
  Pairs: list,
  I    : int,
  T1   : term,
  Ch   : int,
  Li   : int,
  Co   : int,
  Char : term
in
  Id := process-id. (
    rec-msg(open-modules(Ms?)).
    snd-note(ui-status(stat(Id,"Opening Modules"))). (
      if not-equal(Ms, []) then
        Name := first(Ms).
        Ms   := next(Ms).
       /* First we should check here whether this module has already been 
        * opened..
        */
        snd-msg(is-module-in-db(Name)). ( 
          rec-msg(exists-in-module-db(Name))
          +
          /* If it is not open, open it. */
          rec-msg(not-exists-in-module-db(Name?)). ( 
            snd-msg(Id, open-file(Name)). ( 
              rec-msg(Id, opened-file(asfix,Name2?,T?,Path?)).
             /* Tell UI we added module Name */
              snd-msg(ui,open-module(Name2)).
             /* Tell mdb we add module Name containing term T */
              snd-msg(add-module-to-db(T)).
             /* mdb returns the imports section of Name as well as the
              * list of modules which have to be still opened M1s */
              rec-msg(need-modules(M1s?)).
             /* Add those modules to the list */
              Ms := join(Ms,M1s)
              +
              rec-msg(Id, opened-file(baf,Name2?,T?,Path?)).
              snd-msg(ui,open-module(Name2)).
              snd-msg(add-sdf2-module-to-db(Path,T,"unchanged")).
              rec-msg(need-modules(M1s?)).
              Ms := join(Ms,M1s).
              snd-msg(Id, read-parse-table(Name)).
              ( 
                rec-msg(Id, table-on-disk(Table?)).
                snd-msg(add-table-to-db(Name,Table)).
                rec-msg(done).
                snd-msg(Id,open-eqs2-asfix-file(Name)).
                (
                  rec-msg(Id?,opened-file(baf,Name2?,T?,Path?)).
                  snd-msg(add-eqs-to-db(Name2,Path,T,"unchanged")).
                  rec-msg(done)
                +
                  rec-msg(Id?,error-opening(Name2?))
                )
              +
                rec-msg(Id, no-table-on-disk)
              )
              +
              rec-msg(Id, opened-file(raw,Name2?,FT?,Path?)). 
              snd-msg(open-language("Sdf2", 
                                    "/home/markvdb/NEW-META/lib/Sdf2.baf")).
              snd-msg(Id,parse-string-as-asfix1("Sdf2","",FT)).
              ( rec-msg(parse-result-asfix1(Id,parse-tree(T?))).
                snd-msg(ui,open-module(Name2)). 
                snd-msg(add-sdf2-module-to-db(Path,T,"changed")).
                rec-msg(need-modules(M1s?)).
                Ms := join(Ms,M1s) 
              + rec-msg(parse-result-asfix1(Id,ambiguities(I?))).
                printf("Parse of %s returned %d ambiguities",Str,I).
                printf("Term is: %t\n",T) 
              + rec-msg(parse-result-asfix1(Id,T?)). 
                printf("EOF unexpected while parsing %s\n",Str).
                printf("Error was: %t\n",T)
              )
              +
             /* File would not open (unreadable, not exist, wrong path...) */
              rec-msg(Id, error-opening(Str?)).
              printf("the string is %s\n",Str).
              snd-note(ui-status(stat(Id,"Cannot open module"))).
              snd-msg(ui,cannot-open-module(Str)).
              snd-note(ui-status(endstat(Id)))
            )
          )
        )
      fi
    ) *
    if equal(Ms,[]) then
     /* We are finished. Inform UI */
      snd-msg(finished-opening-modules)
    fi.
    snd-note(ui-status(endstat(Id)))
  ) *
  delta
endlet
