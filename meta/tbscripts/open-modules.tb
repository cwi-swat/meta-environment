/* $Id$ */

process Open-initial-module is
let
  Path : str,
  Module : str,
  Extension : str,
  RealModule : str,
  Imports : list,
  Status : term
in
  (
    rec-msg(open-initial-module(Path?, Module?, ".sdf")) .
    snd-msg(is-module-in-db(Module)).
    (
      rec-msg(not-exists-in-module-db(Module)) .
      Status := success.
      Open-Module(Path, Module, Status?, RealModule?, Imports?).
      snd-msg(open-modules(Imports)).
      rec-msg(finished-opening-modules)
    +
      rec-msg(exists-in-module-db(Module))
    )
  ) *
  delta
endlet

process DrawImportGraph is
let
  Nodes : list,
  Vertices : list
in
  snd-msg(get-import-graph) .
  rec-msg(import-graph(Nodes?, Vertices?)) .
  snd-note(display-import-graph(Nodes,Vertices)) .
  Nodes := [] .
  Vertices := []
endlet

process LocateFile(Name : str, Extension : str, Path : str?) is
let
  Directories : list,
  Chosen : str
in
  snd-msg(get-search-paths) .
  rec-msg(search-paths(Directories?)) .
  snd-msg(io-find-file(Directories, Name, Extension)) .
  (
    rec-msg(io-file-not-found) .
    Path := "" 
  +
    rec-msg(io-file-found(Directories?)) .
    Path := first(Directories) .
    Directories := next(Directories) .
    if not-equal(Directories, []) then
      snd-msg(io-get-filename(Path, Name, Extension)) .
      rec-msg(io-filename(Chosen?)) .
      DealWithMultipleOccurrences(Chosen, Name, Extension, Directories)
    else
      tau
    fi
  )
endlet

process DealWithMultipleOccurrences(Chosen : str, Name : str,
                                    Extension : str, Peers : list) is
let
  Directories : list,
  Directory : str,
  FileName : str
in
  Directories := Peers .
  if not-equal(Directories, []) then
    Directory := first(Directories) .
    Directories := next(Directories) .
    snd-msg(io-get-filename(Directory, Name, Extension)) .
    rec-msg(io-filename(FileName?)) .
    snd-msg(compare-files(FileName, Chosen)) .
    (
      rec-msg(files-equal) .
      snd-note(ui-status(errorf("Multiple occurrences of %s:\n%s and %s",
                                [Name,Chosen,FileName])))
    +
      rec-msg(files-differ)
    )
  fi
  *
  if equal(Directories, []) then
    tau
  fi
endlet

process Open-modules is 
let
  Id : int,
  Modules : list,
  Module : str,
  RealModules : list,
  RealModule : str,
  Imports : list,
  Status : term,
  Path : str,
  FileName : str,
  Changed : term
in
  Id := process-id.
  (
    rec-msg(open-modules(Modules?)).
    Changed := true .
    snd-note(ui-status(stat(Id,"Opening Modules"))). 
    RealModules := [].
    if not-equal(Modules, []) then
      Module := first(Modules).
      Modules := next(Modules).
      snd-msg(is-module-in-db(Module)).
      (
        rec-msg(exists-in-module-db(Module))
      +
        rec-msg(not-exists-in-module-db(Module)).
        Status := success.
        LocateFile(Module, ".sdf", Path?) .
        Open-Module(Path, Module, Status?, RealModule?, Imports?).
        Modules := join(Imports, Modules).
        RealModules := join(RealModules, RealModule)
      )
    fi *
    if equal(Modules, []) then
      if equal(Changed, true) then
        DrawImportGraph()
      else
        tau
      fi .
      snd-note(ui-status(endstat(Id))) .
      snd-msg(finished-opening-modules)
    fi
  ) *
  delta
endlet

process Open-Module(Path : str, Module : str, Status : term?, 
                    RealModule : str?, Imports : list?) 
is
let
  Id : int,
  RealPath : str
in
  Id := process-id.
  snd-note(ui-status(statf(Id,"Opening %s",[Module]))).
  Imports := [].
  (
    Open-Syntax(Path, Module, Status?, RealModule?, RealPath?, Imports?).
    if equal(Status, success) then
      Open-Equations(RealModule, RealPath)
    else
      RealModule := Module.
      Handle-Open-Module-Errors(RealModule, Status)
    fi
  ).
  snd-note(ui-status(endstat(Id)))
endlet

process Error(Message : str, MessageArgs : list) is
  snd-note(ui-status(errorf(Message, MessageArgs)))
  
process Handle-Open-Module-Errors(Module : str, Status : term) is
  if not-equal(Status, success) then
    Error("Opening module %s failed: %s", [Module, Status])
  else
    tau
  fi

process Open-Syntax(Path : str, Module : str, Status : term?, 
                    RealModule : str?, RealPath : str?, Imports : list?) is
let
  Tree : term,
  Text : str,
  Message : str,
  FileName : str
in
  snd-msg(io-get-filename(Path, Module, ".sdf")) .
  rec-msg(io-filename(FileName?)) .
  snd-msg(io-read-file(FileName)) .
  (
    rec-msg(io-file-contents(Text?)) .
    Parse-Syntax(Text, Status?, Tree?) 
  +
    rec-msg(io-error-reading(Message?)) .
    Status := no-such-file
  ) .
  if not-equal(Status, no-such-file) then
    Imports := [].
    snd-msg(add-sdf-module-to-db(Module, Path, Text, Tree)).
    (
      rec-msg(adding-succeeded(Module, RealModule?, RealPath?, Imports?))
    +
      rec-msg(error-opening(Module, Status?))
    )
  else
    tau
  fi
endlet

process Parse-Syntax (Text : str, Status : term?, Tree : term?) is
let
  Id : int,
  Errors : list,
  Error : term
in
  Id := process-id.
  snd-msg(open-sdf2-language).
  rec-msg(sdf2-language-opened).
  snd-msg(Id,parse-string-as-asfix2me(trm("Sdf2"),"Module",Text)).
  ( 
    rec-msg(parse-result-asfix2me(Id?, parse-tree(Tree?)))
  +
    rec-msg(parse-result-asfix2me(Id?, parse-error(Errors?, Error?))).
    Tree := no-tree.
    Status := parse-error 
  )
endlet

process Open-Equations (Module : str, Path : str)  is
let
  Tree : term,
  Text : str,
  ErrorMessage : str,
  FileName : str
in
  snd-msg(io-get-filename(Path, Module, ".asf")) .
  rec-msg(io-filename(FileName?)) .
  snd-msg(io-read-file(FileName)) .
  (
    rec-msg(io-file-contents(Text?)) .
    snd-msg(add-eqs-to-db(Module, text(Text))) .
    rec-msg(eqs-added)
  +
    rec-msg(io-error-reading(ErrorMessage?)) 
  )
endlet
