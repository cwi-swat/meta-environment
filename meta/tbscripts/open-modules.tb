/*
   $Id$
 */

process Open-modules is
let
  Id      : term,
  Name    : str,
  Name2   : str,
  Str     : str,
  Path    : str,
  Table   : str,
  FT      : str,
  T     : term,
  Contents : term,
  M1s     : list,
  M2s     : list,
  Ms      : list,
  Pairs   : list,
  I       : int,
  T1      : term,
  Time    : term,
  Ch      : int,
  Li      : int,
  Co      : int,
  Char    : term,
  ErrList : list,
  Cycle   : list
in
  Id := process-id. 
  (
    rec-msg(open-modules(Ms?)).
    M2s := Ms.
    snd-note(ui-status(stat(Id,"Opening Modules"))). (
      if not-equal(Ms, []) then
        Name := first(Ms).
        Ms   := next(Ms).
       /* First we should check here whether this module has already been 
        * opened..
        */
        snd-msg(is-module-in-db(Name)). ( 
          rec-msg(exists-in-module-db(Name))
          +
          /* If it is not open, open it. */
          rec-msg(not-exists-in-module-db(Name?)). ( 
            snd-msg(open-file(Name)). ( 
              rec-msg(opened-file(asfix,Name2?,T?,Path?,Time?)).
             /* Tell mdb we add module Name containing term T */
              snd-msg(add-module-to-db(T,Time)).
             /* mdb returns the imports section of Name as well as the
              * list of modules which have to be still opened M1s */
              rec-msg(need-modules(M1s?)).
             /* Add those modules to the list */
              Ms := join(Ms,M1s)
              +
              rec-msg(opened-file(Name2?,tree(T?),Path?,Time?)).
              snd-msg(add-sdf2-module-to-db(Path,T,Time,"unchanged")).
              rec-msg(need-modules(M1s?)).
              Ms := join(Ms,M1s).
              snd-msg(read-parse-table(Name)).
              ( 
                rec-msg(table-on-disk(Table?, Time?)).
                snd-msg(add-table-to-db(Name,Table,Time)).
                rec-msg(done).
                snd-msg(open-eqs-file(Name)).
                (
                  rec-msg(opened-file(Name?, Contents? , Path?, Time?)).
                  snd-msg(add-eqs-to-db(Name, Path, Contents, Time)) .
                  rec-msg(eqs-added)
                +
                  rec-msg(error-opening(Name?))
                )
              +
                rec-msg(no-table-on-disk)
              )
              +
              rec-msg(opened-file(Name2?,text(FT?),Path?,Time?)). 
              snd-msg(open-sdf2-language).
              rec-msg(sdf2-language-opened).
              snd-msg(Id,parse-string-as-asfix1("Sdf2","Module",FT)).
              ( rec-msg(parse-result-asfix1(Id?,parse-tree(T?))).
                snd-msg(add-sdf2-module-to-db(Path,T,Time,"changed")).
                rec-msg(need-modules(M1s?)).
                Ms := join(Ms,M1s) .
                snd-msg(open-eqs-file(Name)).
                (
                  rec-msg(opened-file(Name?, Contents?, Path?, Time?)).
                  snd-msg(add-eqs-to-db(Name, Path, Contents, Time)).
                  rec-msg(eqs-added)
                +
                  rec-msg(error-opening(Name?))
                )
              + 
                (
                  rec-msg(parse-result-asfix1(Id?,parse-error(ErrList?,
                                                  ambiguities(I?)))).
                  snd-note(ui-status(errorf(
                           "Parse of ts returned %d ambiguities", 
                           [Name2, I]))) 
                +
                  rec-msg(parse-result-asfix1(Id?,parse-error(ErrList?,
                                                cycle(Cycle?)))).
                  snd-note(ui-status(errorf(
                           "Parse returned a cycle is: %t\n",
                           [Cycle])))
                +
                  rec-msg(parse-result-asfix1(Id?,parse-error(ErrList?,eof))). 
                  snd-note(ui-status(errorf(
                           "EOF unexpected while parsing %s\n", 
                           [Name2])))
                +
                  rec-msg(parse-result-asfix1(Id?,
                 	  parse-error([character(Ch?), line(Li?), 
                                       col(Co?), char(Char?)],
                                      plain))) .
                  snd-note(ui-status(errorf(
                        "Character %d unexpected in %s, line %d, column %d\n",
                        [Ch, Name2, Li, Co])))
                ).
                snd-msg(add-empty-module-to-db(Name2)).
                rec-msg(done)
              ) 
              +
             /* File would not open (unreadable, not exist, wrong path...) */
              rec-msg(Id, error-opening(Str?)).
              snd-msg(cannot-open-module(Str)).
              snd-msg(add-empty-module-to-db(Str)).
              rec-msg(done). 
              snd-note(ui-status(endstat(Id)))
            )
          )
        )
      fi
    ) *
    if equal(Ms,[]) then
      (
        if not-equal(M2s, []) then
          Name := first(M2s).
          M2s   := next(M2s).
          snd-msg(is-module-in-db(Name)).
          (
            rec-msg(exists-in-module-db(Name2?)).
            snd-msg(invalidate-parse-tables(Name))
          +
            rec-msg(not-exists-in-module-db(Name2?))
          )
        fi
      ) *
      if equal(M2s, []) then
        tau
      fi
    fi.
/* We are finished. Inform UI */
    snd-msg(finished-opening-modules).
    snd-note(ui-status(endstat(Id)))
  ) *
  delta
endlet
