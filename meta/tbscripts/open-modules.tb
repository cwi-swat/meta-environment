/* $Id$
 */

process Open-modules(Eval: evaluator) is
let
  Id   : term,
  Name : term,
  Str  : str,
  Fn   : str,
  FT   : str,
  T    : term,
  M1s  : list,
  M2s  : list,
  Ms   : list,
  Pairs: list,
  I    : int,
  T1   : term,
  Ch   : int,
  Li   : int,
  Co   : int,
  Char : term
in
  Id := process-id. (
    rec-msg(open-modules(Ms?)).
    snd-note(ui-status(stat(Id,"Opening Modules"))). (
      if not-equal(Ms, []) then
        Name := first(Ms).
        Ms   := next(Ms).
       /* First we should check here whether this module has already been 
        * opened...
        */
        snd-msg(is-module-in-db(Name)). ( 
          rec-msg(exists-in-module-db(Name))
          +
          /* If it is not open, open it. */
          rec-msg(not-exists-in-module-db(Name?)). ( 
            snd-msg(Id, open-file(Name)). ( 
              rec-msg(Id, opened-file(asfix,Name,T?,Fn?)).
             /* Tell UI we added module Name */
              snd-msg(ui,add-module(Name)).
             /* Tell mdb we add module Name containing term T */
              snd-msg(add-module-to-db(T)).
             /* mdb returns the imports section of Name as well as the
              * list of modules which have to be still opened M1s */
              rec-msg(need-modules(M1s?)).
             /* Add those modules to the list */
              Ms := join(Ms,M1s)
              +
              rec-msg(Id, opened-file(raw,Name,FT?,Fn?)).
              snd-msg(ui,add-module(Name)).
              snd-msg(open-language("Sdf2","/home/markvdb/NEW-META/new-meta/sglr/regress-test/tables/Sdf2.tbl")).
              snd-msg(Id,parse-string("Sdf2","",FT)).
              ((
                rec-msg(Id,parse-result(parsetree(T?,I?))).
                if equal(I,0) then
                 snd-msg(Id,a2toa1(T)).
                 rec-msg(Id,converted(T1?)).
                 snd-msg(add-module-to-db(T1)).
                 rec-msg(need-modules(M1s?)).
                 Ms := join(Ms,M1s)
                else
                 printf("Parse of %s returned %d ambiguities",Str,I).
                 printf("Term is: %t\n",T)
                fi
               )
               +
               (
                rec-msg(Id, parse-result(eof-error)). 
                printf("EOF unexpected while parsing %s\n",Str)
               )
               +
               (
                rec-msg(Id, parse-result(parse-error([character(Ch?),line(Li?),col(Co?),char(Char?)]))).
                printf("Character %d unexpected in line %d, column %d\n",Ch,Li,Co)
                ))
              +
             /* File would not open (unreadable, not exist, wrong path...) */
              rec-msg(Id, error-opening(Str?)).
              printf("the string is %s\n",Str).
              snd-note(ui-status(stat(Id,"Cannot open module"))).
              snd-msg(ui,cannot-open-module(Str)).
              snd-note(ui-status(endstat(Id)))
            )
          )
        )
      fi
    ) *
    if equal(Ms,[]) then
     /* We are finished. Inform UI */
      snd-msg(ui, finished-opening-modules)
    fi.
    snd-note(ui-status(endstat(Id)))
  ) *
  delta
endlet
