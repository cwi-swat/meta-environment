#ifndef __GET_PARSETABLE__
#define __GET_PARSETABLE__

#include <caching.tb>

process GetParseTable(ModuleId: term, Type: term, Table: term?) is
let
  Error: term
in
  snd-msg(get-parsetable(ModuleId, Type))
  .
  (
    rec-msg(parsetable(ModuleId, Type, Table?))
  +
    rec-msg(no-parsetable(ModuleId, Type))
    . Table := UNDEFINED
  )
endlet

/* BuildParseTable is started somewhere else, such that a specific
 * PreprocessSyntaxHandler can be bound for specific types of languages
 */
process BuildParsetable(TableName: str, Type: term, PreprocessSyntaxHandler: str) is
let
  ModuleId: term,
  Syntax: term,
  Table: term,
  Modulename: str,
  NewSyntax: term
in
  InitCache(TableName)
  .
  (
    rec-msg(get-parsetable(ModuleId?, Type))
    . GetCachedValue(TableName, ModuleId, Table?)
    .
    if equal(Table, UNDEFINED) then
      GetSyntaxDefinition(ModuleId, Syntax?)
      . 
      if not-equal(Syntax, UNDEFINED) then
	MM-GetAttribute(ModuleId, SDF_NAMESPACE, "name", Modulename?)
        . PreprocessSyntaxHandler(Modulename, Syntax, NewSyntax?)
	. GenerateParsetable(Modulename, NewSyntax, Table?)
	.
	if not-equal(Table, UNDEFINED) then
	  PutCachedValue(TableName, ModuleId, Table)
	  . snd-msg(parsetable(ModuleId, Type, Table))
	else
	  snd-msg(no-parsetable(ModuleId, Type))
	fi
      else
	TODO("error message") 
	. snd-msg(no-parsetable(ModuleId, Type))
      fi
    else
      snd-msg(parsetable(ModuleId, Type, Table))
      . printf("reusing cached value\n")
    fi
  )
  * delta
endlet

process GenerateParsetable(Modulename: str, Syntax: term, Table: term?) is
  snd-msg(generate-parsetable(Syntax, Modulename))
  . 
  (
    rec-msg(parsetable(Table?))
  +
    rec-msg(no-parsetable)
    . Table := UNDEFINED
  )

#endif /* __GET_PARSETABLE__ */
