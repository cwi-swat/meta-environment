process GetParseTable(ModuleId: term, Type: term, Table: term?) is
let
  Error: term
in
  if equal(Type, sdf) then
    snd-msg(get-parsetable(sdf))
    .
    (
      rec-msg(parsetable(sdf, Table?))
    +
      rec-msg(no-parsetable(sdf, Error?))
      . Table := UNDEFINED
    )
  else
    snd-msg(get-parsetable(ModuleId, Type)) .
    (
      rec-msg(parsetable(Type, Table?))
    +
      rec-msg(no-parsetable(ModuleId)) .
      Table := UNDEFINED
    )
  fi
endlet

process BuildParseTable is
let
  ModuleId: term,
  Modulename: str,
  Type: term,
  Table: term,
  Syntax: term,
  ErrorMsg: str,
  Id: int,
  Error : term
in
  Id := process-id
  .
  (
    rec-msg(get-parsetable(ModuleId?, Type?))
    . snd-msg(get-table-from-db(ModuleId, Type))
    .
    (
      rec-msg(table(Table?))
      . snd-msg(parsetable(Type, Table))
    +
      rec-msg(no-table)
      . snd-msg(get-all-syntax-definitions(ModuleId, Type))
      .
      (
        rec-msg(syntax(Syntax?)) 
	. MM-GetAttribute(ModuleId, SDF_NAMESPACE, "name", Modulename?)
        . snd-msg(add-eqs-syntax(Modulename, Syntax))
        . rec-msg(extended-syntax(Syntax?))
        . snd-msg(generate-parsetable(Syntax, Modulename))
        . Syntax := UNDEFINED
        .
        (
          rec-msg(parsetable(Table?))
          . snd-msg(add-parsetable-to-db(ModuleId, Type, Table))
          . rec-msg(parsetable-added)
          . snd-note(ui-status(endstat(Id)))
          . snd-msg(parsetable(Type, Table))
          . Table := UNDEFINED
        +
          rec-msg(no-parsetable)
          . snd-note(ui-status(endstat(Id)))
          . snd-note(ui-status(error("Unexpected error in definition")))
	  . TODO("Return real error")
          . snd-msg(no-parsetable(ModuleId))
        )
      +
        rec-msg(no-syntax(ErrorMsg?))
        . snd-note(ui-status(endstat(Id)))
        . snd-note(ui-status(errorf("%s", [ErrorMsg])))
	. TODO("Return real error")
        . snd-msg(no-parsetable(ModuleId))
      )
    )
  )
  *
  delta
endlet
