/*
  $Id$
*/

process EditTerm(EditorId: term, ModuleName: str, Text: str, Tree : term) is
let
  Focus      : term,
  ArgList    : list,
  Stack      : list,
  EditorId2  : term,
  STree      : term,
  RTree      : term,
  Error      : term,
  Trees      : list,
  ButtonName : str,
  SortName   : str,
  FilePath   : str,
  NewModName : str,
  FileName   : str,
  EditorName : str,
  FuncName   : str,
  FunSym     : str,
  String     : str,
  NrOfArgs   : int,
  Location   : int,
  Integer    : int
in
  subscribe(syntax-changed(ModuleName)) . 
  if equal(quote(Tree), none) then 
    snd-msg(initialize-structure-editor(EditorId, Text)) 
  else 
    snd-msg(initialize-structure-editor-with-tree(EditorId, Tree)) 
  fi  . 
  rec-msg(initial-focus(Focus?)) .
  snd-msg(set-focus(EditorId, Focus)) .
      (
        rec-note(syntax-changed(ModuleName)) .
        snd-msg(invalidate-tree(EditorId))
      +
        rec-msg(extra-button-action(EditorId, ButtonName?)) .
        snd-msg(extra-button-action(ButtonName, ModuleName, EditorId)) 
      +
        rec-msg(apply(FuncName?, SortName?, NrOfArgs?), 
                Stack?, EditorId) .
        ArgList := [] .
        (
          if greater(NrOfArgs, 0) then
            STree := first(Stack) .
            Stack := next(Stack) .
            NrOfArgs := sub(NrOfArgs, 1) .
            ArgList := join(ArgList, STree)
          fi 
        ) *
        if equal(NrOfArgs, 0) then
          tau
        fi .
        snd-msg(apply-function(FuncName, SortName, ArgList)) .
        rec-msg(tree(RTree?)) .
        if not-equal(RTree, error-tree) then
          Stack := join(RTree, Stack) .
          snd-msg(stack(Stack), EditorId)
        else
          snd-msg(error-stack, EditorId)
        fi
      +
        rec-msg(parse-action(NewModName?), Stack?, EditorId) .
        ParseTerm(EditorId, NewModName) .
        snd-msg(stack(Stack), EditorId)
      +
        rec-msg(get-root, Stack?, EditorId) .
        GetTree(EditorId, ModuleName, RTree?) .
        if not-equal(RTree, error-tree) then
          Stack := join(RTree, Stack) .
          snd-msg(stack(Stack), EditorId)
        else
          snd-msg(error-stack, EditorId)
        fi
      +
        rec-msg(set-root, Stack?, EditorId) .
        STree := first(Stack) .
        Stack := next(Stack) .
        ReplaceRoot(EditorId, STree) .
        snd-msg(stack(Stack), EditorId)
      +
        rec-msg(get-focus, Stack?, EditorId) .
        GetFocus(EditorId, RTree?) .
        if not-equal(RTree, error-tree) then
          Stack := join(RTree, Stack) .
          snd-msg(stack(Stack), EditorId)
        else
          snd-msg(error-stack, EditorId)
        fi
      +
        rec-msg(set-focus, Stack?, EditorId) .
        STree := first(Stack) .
        Stack := next(Stack) .
        ReplaceFocus(EditorId, STree) .
        snd-msg(stack(Stack), EditorId)
      +
        rec-msg(check-sort(SortName?), Stack?, EditorId) .
        STree := first(Stack) .
        Stack := next(Stack) .
        CheckTreeSort(STree, SortName, RTree?) .
        if not-equal(RTree, error-tree) then
          Stack := join(RTree, Stack) .
          snd-msg(stack(Stack), EditorId)
        else
          snd-msg(error-stack, EditorId)
        fi
      +
        rec-msg(reduce(NewModName?), Stack?, EditorId) .
        STree := first(Stack) .
        Stack := next(Stack) .
        ReduceTerm(STree, NewModName, RTree?) .
        if not-equal(RTree, error-tree) then
          Stack := join(RTree, Stack) .
          snd-msg(stack(Stack), EditorId)
        else
          snd-msg(error-stack, EditorId)
        fi
      +
        rec-msg(get-other-focus(NewModName?), Stack?, EditorId) .
        STree := first(Stack) .
        Stack := next(Stack) .
	FunSym := fun(STree) .
	if equal(FunSym, "path") then
	  FilePath := first(args(STree)) .
          snd-msg(check-editor-id(FilePath, NewModName)) .
          (
            rec-msg(existing-editor(FilePath?, EditorId2?)).
            GetFocus(EditorId2, RTree?) .
            if not-equal(RTree, error-tree) then
              Stack := join(RTree, Stack) .
              snd-msg(stack(Stack), EditorId)
            else
              snd-msg(error-stack, EditorId)
            fi
          +
            rec-msg(non-existing-editor(FilePath?)).
            snd-note(ui-status(errorf("editor for %s not active", 
                                      [FilePath]))) .
            snd-msg(error-stack, EditorId)
          )
	else
	  snd-msg(error-stack, EditorId)
	fi
      +
        rec-msg(push-editor-name, Stack?, EditorId) .
        snd-msg(get-editor-name(EditorId)) .
        rec-msg(editor-name(FileName?)) .
        RTree := quote(str(FileName)) .
        Stack := join(RTree, Stack) .
        snd-msg(stack(Stack), EditorId)
      +
        rec-msg(edit-given-filename(NewModName?), Stack?, EditorId) .
        STree := first(Stack) .
        Stack := next(Stack) .
        FileName := first(args(STree)) .
        STree := first(Stack) .
        Stack := next(Stack) .
        FunSym := fun(STree) .
        if equal(FunSym, "str") then
          String := first(args(STree)) .
          ActivateEditorWithString(String, NewModName, FileName)
        else
          ActivateEditorWithTree(STree, NewModName, FileName) 
        fi .    
        snd-msg(stack(Stack), EditorId)
      + 
        rec-msg(send, Stack?, EditorId) .
        STree := first(Stack) .
        Stack := next(Stack) .
        snd-msg(tree-send(STree)) .
        snd-msg(stack(Stack), EditorId)
      +
        rec-msg(recieve, Stack?, EditorId) .
        rec-msg(tree-send(RTree?)) .
        Stack := join(RTree, Stack) .
        snd-msg(stack(Stack), EditorId)
      +
        rec-msg(parse(NewModName?, SortName?), Stack?, EditorId) .
        STree := first(Stack) .
        Stack := next(Stack) .
	FunSym := fun(STree) .
	if or(equal(FunSym, "file"), equal(FunSym, "path")) then
	  FilePath := first(args(STree)) .
	  GetTextFromFile(FilePath, String?) .
          ParseText(String, NewModName, SortName, RTree?, Error?) .
	  ProcessParseError(NewModName, Error, "trm")
	else 
	  if equal(FunSym, "str") then
	    String := first(args(STree)) .
	    ParseText(String, NewModName, SortName, RTree?, Error?) .
	    ProcessParseError(NewModName, Error, "trm")
	  else
	    RTree := error-tree
	  fi
	fi .
        if not-equal(RTree, error-tree) then
          Stack := join(RTree, Stack) .
          snd-msg(stack(Stack), EditorId)
        else
          snd-msg(error-stack, EditorId)
        fi
      +
        rec-msg(get-argument(NrOfArgs?), Stack?, EditorId) .
        STree := first(Stack) .
        snd-msg(get-argument-given-number(STree, NrOfArgs)) .
        rec-msg(tree(RTree?)) .
        if not-equal(RTree, error-tree) then
          Stack := join(RTree, Stack) .
          snd-msg(stack(Stack), EditorId)
        else
          snd-msg(error-stack, EditorId)
        fi
      +
        rec-msg(exists(FileName?), Stack?, EditorId) .
        snd-msg(exists-file(FileName)) .
	(
	  rec-msg(file-exists(FileName)) .
          snd-msg(stack(Stack), EditorId)
	+
	  rec-msg(file-not-exists(FileName)) .
          snd-note(ui-status(errorf("%s does not exist", 
                                    [FileName]))) .
          snd-msg(error-stack, EditorId)
	)
      +
        rec-msg(locate(FileName?), Stack?, EditorId) .
        snd-msg(locate-file(FileName)) .
	(
	  rec-msg(file-location(FileName, FilePath?)) .
	  RTree := quote(path(FilePath)) .
          Stack := join(RTree, Stack) .
          snd-msg(stack(Stack), EditorId)
	+
	  rec-msg(file-not-exists(FileName)) .
          snd-note(ui-status(errorf("%s does not exist", 
                                    [FileName]))) .
          snd-msg(error-stack, EditorId)
	)
      +
        rec-msg(push-filename(FileName?), Stack?, EditorId) .
	RTree := quote(file(FileName)) .
        Stack := join(RTree, Stack) .
        snd-msg(stack(Stack), EditorId)
      +
        rec-msg(push-string(String?), Stack?, EditorId) .
	RTree := quote(str(String)) .
        Stack := join(RTree, Stack) .
        snd-msg(stack(Stack), EditorId)
      +
        rec-msg(push-integer(Integer?), Stack?, EditorId) .
	RTree := quote(int(Integer)) .
        Stack := join(RTree, Stack) .
        snd-msg(stack(Stack), EditorId)
      +
        rec-msg(message(String?), Stack?, EditorId) .
	snd-note(ui-status(errorf("%s", [String]))) .
        snd-msg(stack(Stack), EditorId)
      +
        rec-msg(show-tree, Stack?, EditorId) .
        STree := first(Stack) .
        Stack := next(Stack) .
        ShowTree(STree) .
        snd-msg(stack(Stack), EditorId)
      +
        rec-msg(show-area(NewModName), Stack?, EditorId) .
        STree := first(Stack) .
        Stack := next(Stack) .
	FileName := first(args(STree)) .
  	snd-msg(edit-term-file(NewModName, FileName)) .
  	rec-msg(edit-term-file(NewModName?, EditorId2?)).
	ParseTerm(EditorId2, NewModName) .
	snd-msg(set-focus-at-posinfo(EditorId2, STree)) .		
        snd-msg(stack(Stack), EditorId)				
      ) *
      rec-msg(kill-editor(EditorId)).
      snd-msg(kill-editor-done(EditorId))
endlet
