/*
  $Id$
*/

process ParseTerm(EditorId: term, ModuleName: str) is
let
  ErrorFoci  : term
in
  snd-msg(set-parsetable(trm(ModuleName))) .
  (
    rec-msg(parsetable-not-set(trm(ModuleName))) .
    snd-note(ui-status(errorf(
      "Unable to open parse table for %s", [ModuleName])))
  +
    rec-msg(parsetable-set(trm(ModuleName))) .
    snd-msg(parse-focusses(EditorId, trm(ModuleName))) .
    (
      rec-msg(parse-ok(trm(ModuleName))) .
      snd-msg(clear-focus(EditorId))
    +
      rec-msg(parse-failed(trm(ModuleName), ErrorFoci?)) .
      snd-msg(set-focus(EditorId, ErrorFoci))
    )
  )  
endlet

process ParseFile(FileName: str, ModuleName: str, Tree: term?) is
let
  Id        : term,
  Name      : str,
  Text      : str,
  Co        : int,
  Li        : int,
  I         : int,
  Ch        : int,
  Char      : term, 
  Ambs      : list,
  Cycle     : term,
  ErrList   : list,
  TimeStamp : term, 
  Path      : str
in
  Id := process-id . 
  snd-msg(open-modules([ModuleName])) .
  rec-msg(finished-opening-modules) .
  snd-msg(set-parsetable(trm(ModuleName))) .
  (
    rec-msg(parsetable-not-set(trm(ModuleName))) .
    snd-note(ui-status(errorf(
      "Unable to open parse table for %s", [ModuleName])))
  +
    rec-msg(parsetable-set(trm(ModuleName))) .
    snd-msg(open-file(FileName)).
    (
      rec-msg(opened-file(Name?, text(Text?), Path?, TimeStamp?)).
      snd-msg(Id, parse-string-as-asfix2me(trm(ModuleName), "", Text)) . 
      snd-note(ui-status(statf(Id,"Parsing %s",[ModuleName]))).
      (
        rec-msg(parse-result-asfix2me(Id, parse-tree(Tree?)))
      +
        rec-msg(parse-result-asfix2me(Id?,parse-error(ErrList?,
                                                      ambiguities(I?, Ambs?)))).        snd-note(ui-status(errorf("Parse of %s returned %d ambiguities",
                                  [ModuleName,I]))) .
        Tree := error-tree
      +
        rec-msg(parse-result-asfix2me(Id?,parse-error(ErrList?,
                                                      cycle(Cycle?)))).
        snd-note(ui-status(errorf("Parse returned a cycle: %t\n",
                                  [Cycle]))) . 
        Tree := error-tree 
      +
        rec-msg(parse-result-asfix2me(Id?,parse-error(ErrList?,eof))).
        snd-note(ui-status(errorf("EOF unexpected while parsing %s\n",
                                  [ModuleName]))) . 
        Tree := error-tree
      + 
        rec-msg(parse-result-asfix2me(Id?,
                                      parse-error([character(Ch?),
                                                   line(Li?),
                                                   col(Co?),
                                                   char(Char?)],plain))).
        snd-note(ui-status(errorf(
                 "Character %d unexpected in %s, line %d, column %d\n",
                 [Ch, ModuleName, Li, Co]))) . 
        Tree := error-tree
      ) .
      snd-note(ui-status(endstat(Id)))
    +
      rec-msg(error-opening(Name?)) .
      Tree := error-tree
    )
  )  
endlet

process GetTree(EditorId: term, Tree: term?) is
let
  Id          : int
in
  Id := process-id .
  snd-msg(get-tree(EditorId)) . 
  rec-msg(tree(Tree?))
endlet

process GetFocus(EditorId: term, Tree: term?) is
let
  Id          : int
in
  Id := process-id .
  snd-msg(get-focussed-tree(EditorId)) .
  (
    rec-msg(tree(Tree?))
  +
    rec-msg(no-tree) .
    Tree := error-tree
  )
endlet

process ReplaceFocus(EditorId: term, Tree: term) is
let
  Id          : int,
  TotalTree   : term,
  Text        : str,
  Focus       : term
in
  Id := process-id .
  snd-msg(replace-focussed-tree(EditorId, Tree)) .
  rec-msg(focus(Focus?)) .
  snd-msg(get-tree(EditorId)) .
  rec-msg(tree(TotalTree?)) .
  snd-msg(unparse(TotalTree)) .
  rec-msg(unparsed-text(Text?)) .
  snd-msg(replace-text(EditorId, Text)) .
  snd-msg(set-focus(EditorId, Focus))
endlet

process CheckTreeSort(Tree: term, Sort: str, RTree: term?) is
let 
  Id       : int,
  TreeSort : str 
in
  Id := process-id .
  snd-msg(check-tree-sort(Sort, Tree)) .
  ( 
    rec-msg(wrong-sort(TreeSort?)) .
    snd-note(ui-status(errorf("top sort %s of tree does not match %s", 
                              [TreeSort, Sort]))) .
    RTree := error-tree
  +
    rec-msg(sort-ok) .
    RTree := Tree
  )
endlet

process ApplyFunction(Function: str, Sort: str, ArgList: list, RTree: term?) is 
let
  Id          : int
in
  Id := process-id .
  snd-msg(apply-function(Function, Sort, ArgList)) .
  rec-msg(tree(RTree?))
endlet

process ReduceTerm(Tree: term, ModuleName: str, NormalForm: term?) is
let
  Id          : int,
  ErrList     : list,
  Equations   : term
in
  Id := process-id .
  snd-msg(open-modules([ModuleName])) .
  rec-msg(finished-opening-modules) .
  snd-note(ui-status(stat(Id, "Retrieving equations"))) .
  snd-msg(process-eqs(ModuleName)) .
  rec-msg(eqs-processed(ModuleName)) .
  snd-msg(get-all-equations(ModuleName)) .
  (
    rec-msg(all-equations(Equations?)) .
    snd-note(ui-status(endstat(Id))).
 
    snd-note(ui-status(stat(Id, "Rewriting"))) .
    snd-msg(rewrite(ModuleName, Equations, Tree)).
    (
      rec-msg(rewrite-result(NormalForm?))
    +
      rec-msg(rewrite-errors(ErrList?)) .
      NormalForm := error-tree .
      snd-msg(display-rewrite-errors(ErrList))
    ) .
    snd-note(ui-status(endstat(Id)))
  +
    rec-msg(equations-incomplete) .
    NormalForm := error-tree .
    snd-note(ui-status(endstat(Id))) .
    snd-note(ui-status(errorf("Equations incomplete for %s", [ModuleName])))
  )
endlet

process ActivateEditor(Tree: term, ModuleName: str, FileName: str) is
let
  Id          : int,
  Text        : str,
  Path        : str,
  Name        : str,
  TimeStamp   : term
in
  Id := process-id .
  if not-equal(Tree, error-tree) then
    snd-msg(unparse(Tree)) . 
    rec-msg(unparsed-text(Text?)) .
 
    snd-msg(save-text-file(FileName, Text)) .
    rec-msg(save-done(FileName)) .
    snd-msg(edit-term-file-with-tree(ModuleName, FileName, Tree))
  fi
endlet

process EditTerm(EditorId: term, ModuleName: str, Text: str, Tree : term) is
let
  NormalForm : term,
  Focus      : term,
  DirtyFoci  : term,
  ErrList    : list,
  ArgList    : list,
  Stack      : list,
  Killed     : term,
  ActionTree : term,
  EditorIden : term,
  STree      : term,
  RTree      : term,
  Trees      : list,
  ButtonName : str,
  SortName   : str,
  FilePath   : str,
  NewModName : str,
  EditorName : str,
  FuncName   : str,
  NrOfArgs   : int
in
  subscribe(syntax-changed(ModuleName)) . 
  if equal(quote(Tree), none) then 
    snd-msg(initialize-structure-editor(EditorId, Text)) 
  else 
    snd-msg(initialize-structure-editor-with-tree(EditorId, Tree)) 
  fi  . 
  rec-msg(initial-focus(Focus?)) .
  snd-msg(set-focus(EditorId, Focus)) .
  Killed := false .
  (
    (
      (
        rec-note(syntax-changed(ModuleName)) .
        snd-msg(invalidate-tree(EditorId))
      +
        rec-msg(extra-button-action(EditorId, ButtonName?)) .
        snd-msg(get-dirty-focuses(EditorId)) .
        rec-msg(dirty-focuses(DirtyFoci?)) .
        if equal(DirtyFoci, []) then
          snd-msg(extra-button-action(ButtonName, ModuleName)) 
        else
          snd-msg(invalidate-tree(EditorId)) .
          ParseTerm(EditorId, ModuleName) .
	  snd-msg(get-dirty-focuses(EditorId)) .
	  rec-msg(dirty-focuses(DirtyFoci?)) . 
	  if equal(DirtyFoci, []) then
            snd-msg(extra-button-action(ButtonName, ModuleName)) 
          else 
            tau
          fi
        fi
      +
        rec-msg(apply-function-action(FuncName?, SortName?, NrOfArgs?), 
                Stack?) .
        ArgList := [] .
        (
          if greater(NrOfArgs, 0) then
            STree := first(Stack) .
            Stack := next(Stack) .
            NrOfArgs := sub(NrOfArgs, 1) .
            ArgList := join(ArgList, STree)
          fi 
        ) *
        if equal(NrOfArgs, 0) then
          tau
        fi .
        ApplyFunction(FuncName, SortName, ArgList, RTree?) .
        if not-equal(RTree, error-tree) then
          Stack := join(RTree, Stack) .
          snd-msg(stack(Stack))
        else
          snd-msg(error-stack)
        fi
      +
        rec-msg(parse-action(NewModName?), Stack?) .
        snd-msg(invalidate-tree(EditorId)) .
        ParseTerm(EditorId, NewModName) .
        snd-msg(stack(Stack))
      +
        rec-msg(get-tree-action(NewModName?), Stack?) .
        GetTree(EditorId, RTree?) .
        if not-equal(RTree, error-tree) then
          Stack := join(RTree, Stack) .
          snd-msg(stack(Stack))
        else
          snd-msg(error-stack)
        fi
      +
        rec-msg(get-focus-action(NewModName?), Stack?) .
        GetFocus(EditorId, RTree?) .
        if not-equal(RTree, error-tree) then
          Stack := join(RTree, Stack) .
          snd-msg(stack(Stack))
        else
          snd-msg(error-stack)
        fi
      +
        rec-msg(replace-focus-action(NewModName?), Stack?) .
        STree := first(Stack) .
        Stack := next(Stack) .
        ReplaceFocus(EditorId, STree) .
        snd-msg(stack(Stack))
      +
        rec-msg(check-tree-sort-action(SortName?), Stack?) .
        STree := first(Stack) .
        Stack := next(Stack) .
        CheckTreeSort(STree, SortName, RTree?) .
        if not-equal(RTree, error-tree) then
          Stack := join(RTree, Stack) .
          snd-msg(stack(Stack))
        else
          snd-msg(error-stack)
        fi
      +
        rec-msg(reduce-action(NewModName?), Stack?) .
        STree := first(Stack) .
        Stack := next(Stack) .
        ReduceTerm(STree, NewModName, RTree?) .
        if not-equal(RTree, error-tree) then
          Stack := join(RTree, Stack) .
          snd-msg(stack(Stack))
        else
          snd-msg(error-stack)
        fi
      +
        rec-msg(activate-editor(NewModName?, EditorName?), Stack?) .
        STree := first(Stack) .
        Stack := next(Stack) .
        ActivateEditor(STree, NewModName, EditorName) .
        snd-msg(stack(Stack))
      +
        rec-msg(parse-file(FilePath?, NewModName?), Stack?) .
        ParseFile(FilePath, NewModName, RTree?) .
        if not-equal(RTree, error-tree) then
          Stack := join(RTree, Stack) .
          snd-msg(stack(Stack))
        else
          snd-msg(error-stack)
        fi
      ) *
      if equal(Killed, true) then
        tau
      fi
    )
    ||
    rec-msg(kill-editor(EditorId)).
    Killed := true .
    snd-msg(kill-editor-done(EditorId))
  )
endlet
