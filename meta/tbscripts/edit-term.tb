/*

    Meta-Environment - An environment for language prototyping.
    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, 
                        The Netherlands. 

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

  $Id$

*/

process ParseTerm(EditorId: term, ModuleName: str) is
let
  ErrorFoci  : term
in
  snd-msg(set-parsetable(ModuleName, trm)) .
  (
    rec-msg(parsetable-not-set(ModuleName)) .
    snd-note(ui-status(errorf(
      "Unable to open parse table for %s", [ModuleName])))
  +
    rec-msg(parsetable-set(ModuleName)) .
    snd-msg(parse-focusses(EditorId, ModuleName, "")) .
    (
      rec-msg(parse-ok(ModuleName)) .
      snd-msg(clear-focus(EditorId))
    +
      rec-msg(parse-failed(ModuleName, ErrorFoci?)) .
      snd-msg(set-focus(EditorId, ErrorFoci))
    )
  )  
endlet

process ReduceTerm(EditorId: term, ModuleName: str) is
let
  Id         : int,
  Text       : str,
  Tree       : term,
  NormalForm : term,
  FileName   : term,
  ErrList    : list
in
  Id := process-id .
  snd-note(ui-status(stat(Id, "Rewriting..."))) .
  snd-msg(get-tree(EditorId)) . 
  rec-msg(tree(Tree?)) .
  snd-msg(rewrite(ModuleName, Tree)).
  (
    rec-msg(rewrite-result(NormalForm?)) .
    snd-msg(unparse(NormalForm)) .
    rec-msg(unparsed-text(Text?)) .

    %% FIXME: improve using user-configuration.
    FileName := "reduct.out" .

    snd-msg(save-text-file(FileName, Text)) .
    rec-msg(save-done(FileName)) .
    snd-msg(edit-term-file(ModuleName, FileName))
  +
    rec-msg(rewrite-errors(ErrList?)) .
    snd-msg(display-rewrite-errors(ErrList))
  ) .
  snd-note(ui-status(endstat(Id)))
endlet

process EditTerm(EditorId: term, ModuleName: str, Text: str) is
let
  NormalForm : term,
  Focus      : term,
  DirtyFoci  : term,
  ErrList    : list
in
  subscribe(syntax-changed(ModuleName)) . 
  snd-msg(initialize-structure-editor(EditorId, Text)) .
  rec-msg(initial-focus(Focus?)) .
  snd-msg(set-focus(EditorId, Focus)) .
  (
    rec-note(syntax-changed(ModuleName)) .
    snd-msg(invalidate-tree(EditorId))
  +
    rec-msg(parse-focus(EditorId)) .
    ParseTerm(EditorId, ModuleName)
  +
    rec-msg(parse-buffer(EditorId)) .
    snd-msg(invalidate-tree(EditorId)) .
    ParseTerm(EditorId, ModuleName)
  +
    rec-msg(reduce(EditorId)) .
    snd-msg(get-dirty-focuses(EditorId)) .
    rec-msg(dirty-focuses(DirtyFoci?)) .
    if equal(DirtyFoci, []) then
      ReduceTerm(EditorId, ModuleName)
    else
      ParseTerm(EditorId, ModuleName) .
      snd-msg(get-dirty-focuses(EditorId)) .
      rec-msg(dirty-focuses(DirtyFoci?)) . 
      if equal(DirtyFoci, []) then
        ReduceTerm(EditorId, ModuleName)
      else 
        tau
      fi
    fi
  )
  *
  rec-msg(kill-editor(EditorId))
endlet
