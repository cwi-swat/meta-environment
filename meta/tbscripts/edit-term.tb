/*
  $Id$
*/

process ParseTerm(EditorId: term, ModuleName: str) is
let
  ErrorFoci  : term
in
  snd-msg(set-parsetable(trm(ModuleName))) .
  (
    rec-msg(parsetable-not-set(trm(ModuleName))) .
    snd-note(ui-status(errorf(
      "Unable to open parse table for %s", [ModuleName])))
  +
    rec-msg(parsetable-set(trm(ModuleName))) .
    snd-msg(parse-focusses(EditorId, trm(ModuleName))) .
    (
      rec-msg(parse-ok(trm(ModuleName))) .
      snd-msg(clear-focus(EditorId))
    +
      rec-msg(parse-failed(trm(ModuleName), ErrorFoci?)) .
      snd-msg(set-focus(EditorId, ErrorFoci))
    )
  )  
endlet

process ReduceTerm(EditorId: term, ModuleName: str) is
let
  Id          : int,
  Text        : str,
  Path        : str,
  Tree        : term,
  NormalForm  : term,
  FileName    : term,
  ErrList     : list,
  Equations   : term,
  Table       : term,
  ReductEditorId : term
in
  Id := process-id .
  snd-note(ui-status(stat(Id, "Retrieving equations"))) .
  snd-msg(process-eqs(ModuleName)) .
  rec-msg(eqs-processed(ModuleName)) .
  snd-msg(get-all-equations(ModuleName)) .
  (
    rec-msg(all-equations(Equations?)) .
    snd-note(ui-status(endstat(Id))).

    snd-note(ui-status(stat(Id, "Rewriting"))) .
    snd-msg(get-tree(EditorId)) . 
    rec-msg(tree(Tree?)) .
    snd-msg(rewrite(ModuleName, Equations, Tree)).
    (
      rec-msg(rewrite-result(NormalForm?)) .
      snd-msg(unparse(NormalForm)) .
      rec-msg(unparsed-text(Text?)) .

      %% FIXME: improve using user-configuration.
      FileName := "reduct.out" .

      snd-msg(save-text-file(FileName, Text)) .
      rec-msg(save-done(FileName)) .
      snd-msg(edit-term-file-with-tree(ModuleName, FileName, NormalForm))
    +
      rec-msg(rewrite-errors(ErrList?)) .
      snd-msg(display-rewrite-errors(ErrList))
    ) .
    snd-note(ui-status(endstat(Id)))
  +
    rec-msg(equations-incomplete) .
    snd-note(ui-status(endstat(Id))).
    snd-note(ui-status(errorf("Equations incomplete for %s", [ModuleName])))
  )
endlet

process EditTerm(EditorId: term, ModuleName: str, Text: str, Tree : term) is
let
  NormalForm : term,
  Focus      : term,
  DirtyFoci  : term,
  ErrList    : list,
  Killed     : term
in
  subscribe(syntax-changed(ModuleName)) . 
  if equal(quote(Tree), none) then 
    snd-msg(initialize-structure-editor(EditorId, Text)) 
  else 
    snd-msg(initialize-structure-editor-with-tree(EditorId, Tree)) 
  fi  . 
  rec-msg(initial-focus(Focus?)) .
  snd-msg(set-focus(EditorId, Focus)) .
  Killed := false .
  (
    (
      (
       rec-note(syntax-changed(ModuleName)) .
       snd-msg(invalidate-tree(EditorId))
       +
       rec-msg(parse-focus(EditorId)) .
       ParseTerm(EditorId, ModuleName) 
       +
       rec-msg(parse-buffer(EditorId)) .
       snd-msg(invalidate-tree(EditorId)) .
       ParseTerm(EditorId, ModuleName)
       +
       rec-msg(reduce(EditorId)) .
       snd-msg(get-dirty-focuses(EditorId)) .
       rec-msg(dirty-focuses(DirtyFoci?)) .
       if equal(DirtyFoci, []) then
         ReduceTerm(EditorId, ModuleName)
       else
         snd-msg(invalidate-tree(EditorId)) .
         ParseTerm(EditorId, ModuleName) .
	 snd-msg(get-dirty-focuses(EditorId)) .
	 rec-msg(dirty-focuses(DirtyFoci?)) . 
	 if equal(DirtyFoci, []) then
           ReduceTerm(EditorId, ModuleName)
         else 
          tau
         fi
       fi
      ) *
      if equal(Killed, true) then
        tau
      fi
    )
    ||
    rec-msg(kill-editor(EditorId)).
    Killed := true .
    snd-msg(kill-editor-done(EditorId))
  )
endlet
