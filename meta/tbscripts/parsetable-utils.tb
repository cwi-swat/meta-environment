#ifndef __PARSETABLE_UTILS__
#define __PARSETABLE_UTILS__

#include <cache-utils.tb>
#include <parsetablegen.idef>

process GetParseTable(ModuleId: module-id, Type: term, Table: term?) is
let
  Error: term
in
  snd-msg(get-parsetable(ModuleId, Type))
  .
  (
    rec-msg(parsetable(ModuleId, Type, Table?))
  +
    rec-msg(no-parsetable(ModuleId, Type))
    . Table := UNDEFINED
  )
endlet

/* BuildParseTable is started somewhere else, such that a specific
 * PreprocessSyntaxHandler can be bound for specific types of languages
 */
process BuildParsetable(TableName: str, Namespace: term, Type: term, PreprocessSyntaxHandler: str) is
let
  ModuleId: module-id,
  Syntax: term,
  Table: term,
  Modulename: str,
  NewSyntax: term,
  Pid: int
in
  InitCache(TableName)
  . create(ClearCacheHandler(TableName, Namespace, "status", <term>, complete), Pid?)
  .
  (
    rec-msg(get-parsetable(ModuleId?, Type))
    . GetCachedValue(TableName, ModuleId, Table?)
    .
    if equal(Table, UNDEFINED) then
      AddJob("Generating parser")
      . snd-msg(tm-request-transaction(syntax-definition))
      . GetSyntaxDefinition(ModuleId, Syntax?)
      . snd-msg(tm-end-transaction(syntax-definition))
      . 
      if not-equal(Syntax, UNDEFINED) then
	MM-GetAttribute(ModuleId, Namespace, "name", Modulename?)
        . PreprocessSyntaxHandler(Modulename, Syntax, NewSyntax?)
	. GenerateParsetable(Modulename, NewSyntax, Table?)
	.
	if not-equal(Table, UNDEFINED) then
	  PutCachedValue(TableName, ModuleId, Table)
	  . snd-msg(parsetable(ModuleId, Type, Table))
	else
	  snd-msg(no-parsetable(ModuleId, Type))
	fi
      else
	snd-msg(no-parsetable(ModuleId, Type))
      fi
      . JobDone("Generating parser")
    else
      snd-msg(parsetable(ModuleId, Type, Table))
    fi 
  )
  * delta
endlet

process GenerateParsetable(Modulename: str, Syntax: term, Table: term?) is
  snd-msg(generate-parsetable(Syntax, Modulename))
  . 
  (
    rec-msg(parsetable(Table?))
  +
    rec-msg(no-parsetable)
    . Table := UNDEFINED
  )

process DumpParseTable(ModuleId : module-id, Namespace: term, Filename : str, Type : term) is
let
  Directory: str,
  Error: term,
  Extension: str,
  Id: term,
  NewFilename: str,
  NewPath: str,
  Path: str,
  Table: term
in
  AddJob(Filename)
  . Id := process-id
  . snd-msg(get-parsetable(ModuleId, Type))
  .
  (
    rec-msg(parsetable(ModuleId, Type, Table?))
    . GetModulePath(ModuleId, Namespace, Path?)
    .
    if equal(Filename, "") then
      TODO("DumpParseTable got empty filename")
    else
      NewFilename := Filename
    fi
    . snd-msg(io-unpack-and-write-term-in-baf(NewFilename, Table))
    .
    (
      rec-msg(io-file-written)
    +
      rec-msg(io-file-not-written(Error?))
    )
  +
    rec-msg(no-parsetable(ModuleId))
  )
  . JobDone(Filename)
endlet

#endif /* __PARSETABLE_UTILS__ */
