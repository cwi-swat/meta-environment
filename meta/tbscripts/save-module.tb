/*

    Meta-Environment - An environment for language prototyping.
    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, The Netherlands. 

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

*/
/*
  $Id$
 */
process Save-modules is
let
  Id      : term,
  Str     : term,
  Syntax  : term,
  Eqs     : term,
  Module  : term,
  Path    : str,
  Modules : list,
  Table   : term
in
  Id := process-id. 
  ( rec-msg(save-module(Module?)).
    snd-note(ui-status(statf(Id, "Saving %s",[Module]))) .
    snd-msg(get-sdf2-path-from-db(Module)).
    rec-msg(path(Path?)).
    snd-msg(get-sdf2-asfix(Module)).
    (
      rec-msg(syntax(Syntax?)).
      snd-msg(save-asfix(Module,Path,Syntax)).
      rec-msg(save-done)
    +
      rec-msg(syntax-unchanged(Syntax?))
    ).
    snd-msg(get-eqs-tree(Module)).
    ( rec-msg(tree(Eqs?)).
      snd-msg(get-eqs-path-from-db(Module)).
      rec-msg(path(Path?)).
      snd-msg(save-asfix(Module,Path,Eqs)).
      rec-msg(save-done)
    +
      rec-msg(eqs-unchanged(Eqs?))
    +
      rec-msg(no-eqs)
    +
      rec-msg(unavailable)
    ).
    snd-note(ui-status(endstat(Id))) .
    snd-msg(saved-module(Module))
    +
    rec-msg(save-all).
    snd-note(ui-status(stat(Id, "Saving"))) .
    snd-msg(get-all-modules).
    rec-msg(all-modules(Modules?)).
    ( if not-equal(Modules, []) then
       Module := first(Modules).
       Modules := next(Modules).
       snd-msg(get-sdf2-path-from-db(Module)).
       rec-msg(path(Path?)).
       snd-msg(get-sdf2-asfix(Module)).
       (
         rec-msg(syntax(Syntax?)).
         snd-msg(save-asfix(Module,Path,Syntax)).
         rec-msg(save-done)
       +
         rec-msg(syntax-unchanged(Syntax?))
       ).
       snd-msg(get-eqs-tree(Module)).
       ( rec-msg(tree(Eqs?)).
         snd-msg(get-eqs-path-from-db(Module)).
         rec-msg(path(Path?)).
         snd-msg(save-asfix(Module,Path,Eqs)).
         rec-msg(save-done)
       +
         rec-msg(eqs-unchanged(Eqs?))
       +
         rec-msg(no-eqs)
       +
         rec-msg(unavailable)
       ) .
       snd-msg(get-table-from-db(trm(Module))).
       (
         rec-msg(table(Table?)). 
         snd-msg(save-term-table(Module, Table)).
         rec-msg(save-done)
       +
         rec-msg(no-table)
       ).
       snd-msg(get-table-from-db(eqs(Module))).
       (
         rec-msg(table(Table?)).
         snd-msg(save-term-table(Module, Table)).
         rec-msg(save-done)
       +
         rec-msg(no-table)
       )
      fi
    )*
    if equal(Modules,[]) then
     snd-note(ui-status(endstat(Id))) .
     snd-msg(saved)
    fi
  )*
  delta
endlet
