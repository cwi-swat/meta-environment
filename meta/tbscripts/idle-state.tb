#ifndef __IDLE_STATE__
#define __IDLE_STATE__

#include <sdf-namespace.h>

process IdleState is
let
  AttributeEvent: attribute-changed-event,
  DependenciesEvent: dependencies-changed-event,
  ModuleId: term,
  Value: term,
  Worklist: list
in
  MM-Subscribe-Attribute-Changed(<term>,SDF_NAMESPACE,"status",<term>,unknown)
  . MM-Subscribe-Attribute-Changed(<term>,SDF_NAMESPACE,"status",<term>,opened)
  . MM-Subscribe-Attribute-Changed(<term>,SDF_NAMESPACE,"status",<term>,error)
  . MM-Subscribe-Attribute-Changed(<term>,SDF_NAMESPACE,"status",<term>,unavailable)
  . MM-Subscribe-Dependencies-Changed(<term>)
  . subscribe(mm-module-deleted(<term>))
  . Worklist := []
  .
  (
    rec-note(mm-attribute-changed(AttributeEvent?))
    . ACE-GetModuleId(AttributeEvent, ModuleId?) 
    . ACE-GetNewValue(AttributeEvent, Value?)
    .
    if equal(Value, unknown) then
      Worklist := join(Worklist, [ModuleId])
    else
      if equal(Value, opened) then
	Worklist := diff(Worklist, [ModuleId])
	.
	if equal(Worklist, []) then
	  snd-note(is-state(idle))
	else
	  tau
	fi
      else 
	if or(equal(Value, error), equal(Value, unavailable)) then
	  Worklist := diff(Worklist, [ModuleId])
	  .
	  if equal(Worklist, []) then
	    snd-note(is-state(idle))
	  else
	    tau
	  fi
	else
	  tau
	fi
      fi
    fi
  +
    rec-note(mm-dependencies-changed(DependenciesEvent?))
    .
    if equal(Worklist, []) then
      snd-note(is-state(idle))
    else
      tau
    fi
  +
    rec-note(mm-module-deleted(Value?))
    .
    if equal(Worklist, []) then
      snd-note(is-state(idle))
    else
      tau
    fi
  )
  *
  delta
endlet

toolbus(IdleState)

#endif /*__IDLE_STATE__*/
