/*

    Meta-Environment - An environment for language prototyping.
    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, 
                        The Netherlands. 

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

*/
/*
   $Id$
 */

process Compile-module is
let
  ModuleName    : str,
  OutputFile    : str,
  ErrorMsg      : str,
  Id            : term,
  Syntax        : term,
  Equations     : term 
in
    Id := process-id.
    (
      rec-msg(compile-module(ModuleName?, OutputFile?)) .
      snd-note(ui-status(statf(Id, "Compiling %s", [ModuleName]))).
      snd-msg(process-eqs(ModuleName)) .
      rec-msg(eqs-processed(ModuleName)) .
      snd-msg(get-all-equations(ModuleName)) .
      (
        rec-msg(all-equations(Equations?)) .
        snd-msg(compile-module(ModuleName, Equations, OutputFile)) .
        rec-msg(compilation-done(ModuleName))
      +
        rec-msg(equations-incomplete) .
        snd-note(ui-status(errorf("Equations incomplete for %s",
                                  [ModuleName])))
      ) .
      snd-msg(compilation-ready(ModuleName)) .
      snd-note(ui-status(endstat(Id))) 
    ) *
    delta
endlet
