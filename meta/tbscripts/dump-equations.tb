/* $Id$ */

process DumpEquations is
let
  Id : int,
  ModuleName   : str,
  Equations    : term,
  Syntax    : term,
  Path         : str,
  FileName : str,
  ErrorMessage : str
in
  Id := process-id .
  (
    (
      rec-msg(dump-equations(ModuleName?)) .
      FileName := ""
    +
      rec-msg(dump-equations-given-file(ModuleName?, FileName?))
    ) .
    snd-note(ui-status(statf(Id, "Dumping equations for %s", [ModuleName]))) .
    snd-msg(pre-preprocess-syntax-hook(ModuleName)) .
    rec-msg(pre-preprocess-syntax-hook-result(ModuleName)) .
    snd-msg(get-all-equations(ModuleName)) .
    (
      rec-msg(all-equations(Equations?)) .
      if equal(FileName, "") then 
        snd-msg(get-path-from-db(ModuleName)) .
        rec-msg(path(Path?)) .
        snd-msg(io-get-filename(Path, ModuleName, ".eqs")) .
	rec-msg(io-filename(FileName?)) 
      else
        tau
      fi .
      snd-msg(io-write-term-file(FileName, Equations)) .
      (
        rec-msg(io-file-written)
      +
        rec-msg(io-file-not-written(ErrorMessage?)) .
	snd-note(ui-status(errorf("%s: %s", [FileName, ErrorMessage])))
      )
    +
      rec-msg(equations-incomplete) .
      snd-note(ui-status(statf(Id, 
                               "Specification incomplete for %s", 
			       [ModuleName])))
    ) .
    snd-note(ui-status(endstat(Id))) .
    snd-msg(equations-dumped)
  ) * delta

endlet

