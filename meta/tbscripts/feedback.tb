/* $Id$ */

process GoToEditorArea(EditorId: term, Area: term, Description: str) is
let
  Offset: int
in
  snd-msg(get-area-offset(Area)) .
  rec-msg(area-offset(Offset?)) .
  snd-msg(te-set-focus-at-area(EditorId, Area)) .
  snd-msg(te-display-message(EditorId, Description))
endlet

process ShowLocation(Location: term, Description: str) is
let
  Area: term,
  EditorId: term,
  ModuleName: str,
  FileName: str
in
  snd-msg(get-location-filename(Location)) .
  rec-msg(location-filename(FileName?)) .
  snd-msg(edit-general(FileName)) .
  rec-msg(editor-opened(ModuleName?, EditorId?)) .
  /* TODO: ModuleName unused, to be removed in editor-opened */
  snd-msg(has-location-area(Location)) .
  (
    rec-msg(location-has-area(Location)) .
    snd-msg(get-location-area(Location)) .
    rec-msg(location-area(Area?)) .
    GoToEditorArea(EditorId, Area, Description)
  +
    rec-msg(location-has-no-area(Location)) .
    tau /* TODO: figure out what to do with location without area */
  )
endlet

process ShowSubject(Subject: term) is
let
  Location: term,
  Description: str
in
  snd-msg(has-subject-location(Subject)) .
  (
    rec-msg(subject-has-location(Subject)) .
    snd-msg(get-subject-location(Subject)) .
    rec-msg(subject-location(Location?)) .
    snd-msg(get-subject-description(Subject)) .
    rec-msg(subject-description(Description?)) .
    ShowLocation(Location, Description)
  +
    rec-msg(subject-has-no-location(Subject)) .
    tau /* TODO: figure out what to do with subject without location */
  )
endlet

process ShowError(Error: term) is
let
  Subject: term,
  Subjects: list
in
  snd-msg(get-error-subjects(Error)) .
  rec-msg(error-subjects(Subjects?)) .
  Subject := first(Subjects) .
  ShowSubject(Subject)
endlet

process ShowSummary(Summary: term) is
let
  Error: term,
  Errors: list
in
  snd-msg(get-summary-errors(Summary)) .
  rec-msg(summary-errors(Errors?)) .
  Error := first(Errors) .
  ShowError(Error)
endlet
