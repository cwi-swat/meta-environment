/*

    Meta-Environment - An environment for language prototyping.
    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, 
                        The Netherlands. 

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

  $Id$

*/



process StructureEditor(EditorId: str, ModuleName: str) is
let
  Id : int,
  Focus : term,
  Text : str,
  Location : int
in
  Id := process-id.
  subscribe(syntax-changed(ModuleName)) .
  snd-msg(initialize-structure-editor(EditorId)) .
  rec-msg(initial-focus(Focus?)) .
  snd-msg(set-focus(EditorId, Focus)) .
  (
  +
  )

  (
    rec-event(TE,menu-event("Meta-Environment", "Parse Focus", Fid)) .
    /* If the language is Sdf2 then NO new parse table may be 
     * generated!
     * If the parse table can not be opened for some reason
     * we are unable to parse the text.
     * This code needs restructuring.
     */
    if equal(IsTerm,"sdf") then                   /* Determine the type of "term" 
                                                   * being edited. This is necessary
                                                   * to initialize the parser with
                                                   * a correct start nonterminal
                                                   */
      snd-msg(open-sdf2-language).
      (
        rec-msg(sdf2-language-opened).
        Nonterminal := "Module" .
	LangOK := true
      +
        rec-msg(sdf2-language-not-opened).
	LangOK := false
      )
    else
      if equal(IsTerm,"eqs") then
        snd-msg(set-parsetable(Language, eqs))
      else
        snd-msg(set-parsetable(Language, trm))
      fi .
      (
        rec-msg(parsetable-set(Language)).
        if equal(IsTerm,"eqs") then
          Nonterminal := "Equations"
        else
          Nonterminal := ""
        fi. 
	LangOK := true
      +
        rec-msg(parsetable-not-set(Language)).
	LangOK := false
      )
    fi.
    if equal(LangOK, true) then
	snd-msg(get-top-symbols(Language)) .
        (
          rec-msg(startsymbols(Language, StartSymbols?))
        +
          rec-msg(language-not-open(Language)).
          StartSymbols := []
        ) .
        snd-msg(register-startsymbols(Fid, StartSymbols)) .
        rec-msg(startsymbols-registered) .
	ErrorFocuses := [] .
        snd-msg(get-dirty-focuses(Fid)) .
        rec-msg(dirty-focuses(DirtyFocuses?)) .
        (
	  if not-equal(DirtyFocuses,[]) then
	    Foc := first(DirtyFocuses).
	    DirtyFocuses := next(DirtyFocuses).
	    snd-msg(TE, get-focus-text(Fid, Foc)).
	    rec-msg(TE, focus-text(Fid, Str?)).
            snd-msg(get-focus-sort(Nonterminal, Foc)) .
            rec-msg(focus-sort(Nonterminal?)) .
	    snd-msg(Id, parse-string-as-asfix1(Language, Nonterminal, Str)).
            (
	      rec-msg(parse-result-asfix1(Id,parse-tree(T?))) .
              snd-msg(replace-focus(Fid, Foc, T))
	    +
              (
                rec-msg(parse-result-asfix1(Id,parse-error(ErrList?,plain))) 
              +
		rec-msg(parse-result-asfix1(Id,parse-error(ErrList?,eof)))
              ) .
              snd-msg(get-error-position(Fid, Foc, ErrList)) .
              rec-msg(error-position(Pos?)) .
              snd-msg(display-error(Fid, Pos)) .
              ErrorFocuses := join(ErrorFocuses,Foc)
	    + rec-msg(parse-result-asfix1(Id,parse-error(ErrList?,
						   ambiguities(I?)))).
              printf("Parse of %s returned %d ambiguities",Str,I).
		printf("Term is: %t\n",T).
		ErrorFocuses :=join(ErrorFocuses,Foc)
	    + rec-msg(parse-result-asfix1(Id,parse-error(ErrList?,cycle(Cycle?)))).
		printf("Parse of %s returned a cycle\n",Str).
		printf("Cycle is: %t\n",Cycle).
		ErrorFocuses :=join(ErrorFocuses,Foc)
	    )
	  else 
	    tau
	  fi
	) *
	if equal(DirtyFocuses,[]) then
	  if equal(ErrorFocuses,[]) then
	    /* All parses succeeded */
	    if equal(IsTerm,"sdf") then
	      snd-msg(get-tree(Fid)) .
	      rec-msg(tree(SdfTree?)) .
	      snd-msg(update-module-in-db(SdfTree, Language)).
	      rec-msg(extra-modules(Modules?)).
	      snd-msg(open-modules(Modules)).
	      rec-msg(finished-opening-modules)
	    else
              if equal(IsTerm, "eqs") then
	        snd-msg(get-tree(Fid)) .
	        rec-msg(tree(EqsTree?)) .
	        snd-msg(update-eqs-tree-in-db(Language, tree(EqsTree))) .
		rec-msg(eqs-updated)
              else
	        /* Module-db needs no update in case of term. */
	        tau
              fi
	    fi .
	    snd-msg(TE,clear-focus(Fid))
	  else
	    snd-msg(set-focus(Fid, ErrorFocuses))
	  fi
	fi.
	/* Finished parsing operations */
	snd-note(ui-status(endstat(Id)))
      else
        /* If parse table could not be opened, an error message is 
	 * generated.
	 */
        snd-note(ui-status(errorf("Unable to open parse table for \"%s\"",
				  [Language])))
      fi.
    snd-ack-event(TE,menu-event("Meta-Environment","Parse Focus",Fid))
    +
    rec-event(TE,menu-event("Meta-Environment", "Parse Buffer", Fid)) .
    printf("Parse Buffer not yet implemented\n").
    snd-ack-event(TE,menu-event("Meta-Environment","Parse Focus",Fid))
    +
    rec-event(TE,menu-event("Meta-Environment","Reduce",Fid)) .
    if equal(IsTerm, "term") then
      if equal(ErrorFocuses,[]) then
        snd-note(ui-status(stat(Id,"Rewriting..."))).
        snd-msg(get-tree(Fid)) .
        rec-msg(tree(TrmTree?)) .
        snd-msg(rewrite(Language, TrmTree)).
        (
          rec-msg(rewrite-result(NormalFormTree?)) .
          snd-msg(unparse(NormalFormTree)).
	  rec-msg(unparsed-text(Src?)).
	  printf("\nNormal form is:\n%s\n", Src)
        +
          rec-msg(rewrite-errors(ErrList?)) .
	  snd-msg(display-rewrite-errors(ErrList))
        )
      else
        snd-note(ui-status(error("Please parse term before reducing")))
      fi .
      snd-note(ui-status(endstat(Id)))
    else
      tau
    fi .
    snd-ack-event(TE,menu-event("Meta-Environment","Reduce",Fid))
    +
    rec-note(syntax-changed(Language)).
    snd-msg(invalidate-tree(Fid)) .
    rec-msg(focus(Foc?)) .
    snd-msg(TE,clear-focus(Fid)).
    snd-msg(TE,set-focus(Fid,Foc))
  ) *
  delta
endlet
