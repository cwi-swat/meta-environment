/*

   Meta-Environment - An environment for language prototyping.
   Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, The Netherlands. 

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

   $Id$
*/
process EditEquations(EditorId: term, ModuleName: str) is
let
  Path      : str,
  Focus     : term,
  Tree      : term,
  ErrMsg    : str,
  ErrorFoci : term,
  Text      : str,
  DirtyFoci : list
in
  Text := "" .
  subscribe(syntax-changed(ModuleName)) . 
  snd-msg(get-eqs-tree(ModuleName)) .
  (
    rec-msg(tree(Tree?)) .
    snd-msg(initialize-structure-editor-with-tree(EditorId, Tree))
  +
    rec-msg(unavailable) .
    snd-msg(get-eqs-text(ModuleName)) .
    (
      rec-msg(eqs-text(ModuleName, Text?))
    +
      %% If there are no equations in the module-db, assume we
      %% want to create a new equations section.
      rec-msg(no-eqs-text(ModuleName)) .
      snd-msg(create-new-equations(ModuleName)) .
      (
        rec-msg(new-equations-created(ModuleName, Path?))
      +
        rec-msg(new-equations-not-created(ErrMsg?)) .
	snd-note(ui-status(errorf(
	  "Could not create empty equations: %s", [ErrMsg])))
      )
    ) .
    snd-msg(initialize-structure-editor(EditorId, Text))
  ) .
  rec-msg(initial-focus(Focus?)) .
  snd-msg(set-focus(EditorId, Focus)) .
  (
    (
      rec-note(syntax-changed(ModuleName)) .
      snd-msg(invalidate-tree(EditorId))
    +
      (
        rec-msg(parse-focus(EditorId))
      +
        rec-msg(parse-buffer(EditorId)) .
        snd-msg(invalidate-tree(EditorId))
      ) . 
      snd-msg(set-parsetable(eqs(ModuleName))) .
      (
        rec-msg(parsetable-not-set(eqs(ModuleName))) .
        snd-note(ui-status(errorf(
          "Unable to open parse table for %s", [ModuleName])))
      +
        rec-msg(parsetable-set(eqs(ModuleName))) .
        snd-msg(parse-focusses(EditorId, eqs(ModuleName))) .
        (
          rec-msg(parse-ok(eqs(ModuleName))) .
          snd-msg(get-tree(EditorId)) .
	  rec-msg(tree(Tree?)) .
	  snd-msg(update-eqs-tree-in-db(ModuleName, tree(Tree))) .
	  rec-msg(eqs-updated) .
	  snd-msg(clear-focus(EditorId))
        +
          rec-msg(parse-failed(eqs(ModuleName), ErrorFoci?)) .
          snd-msg(set-focus(EditorId, ErrorFoci))
        )
      )
    )
  )
  *
  rec-msg(kill-editor(EditorId)).
  snd-msg(get-dirty-focuses(EditorId)) .
  rec-msg(dirty-focuses(DirtyFoci?)) .
	snd-msg(kill-editor-done(EditorId)) .
  if equal(DirtyFoci, []) then
    tau    
  else
   	snd-note(ui-status(errorf("Dirty module %s is automatically reread from disk.",
       [ModuleName]))).
    snd-msg(close-module(ModuleName)).
    rec-msg(module-closed(ModuleName)).
    snd-msg(delete-module(ModuleName)).
    snd-msg(open-modules([ModuleName])).
    rec-msg(finished-opening-modules)
  fi


endlet
