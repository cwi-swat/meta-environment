/*
   $Id$
*/
process EditEquations(EditorId: term, ModuleName: str) is
let
  Path           : str,
  Focus          : term,
  Tree           : term,
  ErrMsg         : str,
  ErrorFoci      : term,
  Text           : str,
  DirtyFoci      : list,
  ModifiedStatus : term,
  Killed         : term,
  Msgs           : list
in
  Text := "" .
  subscribe(syntax-changed(ModuleName)) . 
  snd-msg(get-eqs-tree(ModuleName)) .
  (
    rec-msg(tree(Tree?)) .
    snd-msg(initialize-structure-editor-with-tree(EditorId, Tree)) .
    snd-msg(set-parsetable(eqs(ModuleName))) .
    (
      rec-msg(parsetable-not-set(eqs(ModuleName))) .
      snd-note(ui-status(errorf(
        "Unable to open parse table for %s", [ModuleName])))
    +
      rec-msg(parsetable-set(eqs(ModuleName)))
    ) 
  +
    rec-msg(unavailable) .
    snd-msg(get-eqs-text(ModuleName)) .
    (
      rec-msg(eqs-text(ModuleName, Text?))
    +
      %% If there are no equations in the module-db, assume we
      %% want to create a new equations section.
      rec-msg(no-eqs-text(ModuleName)) .
      snd-msg(create-new-equations(ModuleName)) .
      (
        rec-msg(new-equations-created(ModuleName, Path?))
      +
        rec-msg(new-equations-not-created(ErrMsg?)) .
        snd-note(ui-status(errorf(
          "Could not create empty equations: %s", [ErrMsg])))
      )
    ) .
    snd-msg(initialize-structure-editor(EditorId, Text))
  ) .
  rec-msg(initial-focus(Focus?)) .
  snd-msg(set-focus(EditorId, Focus)) .
  Killed := false .
  (
    (
      (
	rec-note(syntax-changed(ModuleName)) .
	snd-msg(invalidate-tree(EditorId))
      +
	rec-msg(parse-buffer(EditorId)) .
	snd-msg(invalidate-tree(EditorId)).
	snd-msg(set-parsetable(eqs(ModuleName))) .
	(
	  rec-msg(parsetable-not-set(eqs(ModuleName))) .
	  snd-note(ui-status(errorf(
	    "Unable to open parse table for %s", [ModuleName])))
	+
	  rec-msg(parsetable-set(eqs(ModuleName))) .
	  snd-msg(parse-focusses(EditorId, eqs(ModuleName))) .
	  (
	    rec-msg(parse-ok(eqs(ModuleName))) .
	    snd-msg(get-tree(EditorId)) .
            rec-msg(tree(Tree?)) .
            snd-msg(check-asf(Tree)) .
            rec-msg(messages(Msgs?)) .
            snd-msg(display-asf-errors(Msgs)) .
            snd-msg(update-eqs-tree-in-db(ModuleName, tree(Tree))) .
            rec-msg(eqs-updated) .
            snd-msg(clear-focus(EditorId))
	  +
	    rec-msg(parse-failed(eqs(ModuleName), ErrorFoci?)) .
	    snd-msg(set-focus(EditorId, ErrorFoci))
	  )
	)
      )
    ) *
    if equal(Killed, true) then
      tau
    fi
  )
  ||
  rec-msg(kill-editor(EditorId)).
  Killed := true .
  snd-msg(get-modified-status(EditorId)) .
  rec-msg(modified-status(EditorId, ModifiedStatus?)) .
  snd-msg(kill-editor-done(EditorId)) .
  if equal(ModifiedStatus, modified) then
    snd-note(ui-status(errorf("Dirty module %s is automatically reread from disk.",
                              [ModuleName]))).
    snd-msg(close-module(ModuleName)).
    rec-msg(module-closed(ModuleName)).
    snd-msg(delete-module(ModuleName)).
    snd-msg(open-modules([ModuleName])).
    rec-msg(finished-opening-modules)
  else
    tau
  fi


endlet
