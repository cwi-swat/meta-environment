#ifndef __SDF_EDITOR_UTILS__
#define __SDF_EDITOR_UTILS__

#include <editing.tb>
#include <config-utils.tb>

process EditSyntax(ModuleId: term) is
let
  AlreadyExists: bool,
  Available: bool,
  EditorType: term,
  HasAttribute: bool,
  HasText: bool,
  HasStructure: bool,
  Modulename: str,
  Path: str,
  Editable: bool,
  SdfExt: str,
  Sid: term,
  Tree: term
in
  EditorType := syntax-editor
  . GetModulePath(ModuleId, SDF_NAMESPACE, Path?)
  . 
  if equal(Path, EMPTY_PATH) then
    MM-GetAttribute(ModuleId, SDF_NAMESPACE, "name", Modulename?) 
    . snd-msg(file-extension-hook(sdf))
    . rec-msg(file-extension-hook-result(SdfExt?))
    . BuildPath(".", Modulename, SdfExt, Path?)
    . printf("EditSyntax: Use CreateNewModule instead???\n")
  else
    tau
  fi
  . Edit(Path, Sid?)
  . EditText(Sid, EditorType, "", AlreadyExists?)
  . snd-msg(syntax-editor-started(ModuleId, Sid))
  .
  if equal(AlreadyExists, false) then
    MM-HasAttribute(ModuleId, SDF_NAMESPACE, "editable", HasAttribute?)
    .
    if equal(HasAttribute, true) then
      MM-GetAttribute(ModuleId, SDF_NAMESPACE, "editable", Editable?)
    else
      Editable := true
    fi
    . snd-msg(te-set-editable(Sid, Editable))
    . snd-msg(em-bind-session(Sid, ModuleId))
    . rec-msg(em-session-bound(Sid, ModuleId))
    . GetModuleSyntaxTree(ModuleId, Tree?)
    .
    if not-equal(Tree, UNDEFINED) then
      EditStructure(Sid, Tree)
    else
      tau
    fi
    . MM-Subscribe-Attribute-Changed(ModuleId,SDF_NAMESPACE,"annotated",<term>,true)
    .
    (
      MenuSelected(Sid, EditorType)
    +
      MouseClicked(Sid)
    +
      TextChanged(Sid, EditorType)
    +
      TextSaved(Sid, EditorType)
    +
      UpdateSyntaxStructure(Sid, EditorType)
    )
    *
    EditorDisconnected(Sid)
    . IsTextEditorRegistered(Sid, HasText?)
    . IsStructureEditorRegistered(Sid, HasStructure?)
    . DeleteSession(Sid)
    .
    if and(HasText, not(HasStructure)) then
      TODO("OpenSyntax or, better, parse when structure has been lost")
      . OpenSyntax(ModuleId)
    else
      tau
    fi
  else
    tau
  fi
endlet

process UpdateSyntaxStructure(Sid: term, EditorType: term) is
let
  Event: attribute-changed-event,
  ModuleId: term,
  Slices: term,
  Tree: term
in
  rec-note(mm-attribute-changed(Event?))
  . GetModuleId(Sid, ModuleId?)
  . GetModuleSyntaxTree(ModuleId, Tree?) 
  . snd-msg(se-update(Sid, Tree))
  . snd-msg(se-get-tree-slices(Sid))
  . rec-msg(se-tree-slices(Sid, Slices?))
  . snd-msg(te-highlight-slices(Sid, Slices))
endlet

#endif /* __SDF_EDITOR_UTILS__ */
