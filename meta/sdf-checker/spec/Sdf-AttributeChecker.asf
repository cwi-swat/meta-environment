equations

  [ca-1'1] check-sdf-attributes(Definition) =
             check-attributes(Definition, {})

  [ca-1'2] get-module-name(Module) = $ModuleId
           ====================================
           check-attributes(Module, Msgs) = 
             check-attributes(Module, Msgs, $ModuleId)

  [ca-2'1] is-bracket-definition($Symbol* -> $Symbol) = false
           =================================================
           check-attributes($Symbol* -> $Symbol {Attr*1, bracket, Attr*2},
                            Msgs, $ModuleId) = 
             Msgs + illegal-attribute($ModuleId, $Symbol* -> $Symbol {Attr*1, bracket, Attr*2})

  [ca-2'2] check-attributes($Literal ( $Symbol,* ) -> $Symbol {Attr*1, bracket, Attr*2},
                            Msgs, $ModuleId) = 
             Msgs + 
             illegal-attribute($ModuleId, $Literal ( $Symbol,* ) -> $Symbol {Attr*1, bracket, Attr*2})

  [ca-2'2] is-binary-definition($Symbol* -> $Symbol) = false
           =================================================
           check-attributes($Symbol* -> $Symbol {Attr*1, left, Attr*2},
                            Msgs, $ModuleId) = 
             Msgs + illegal-attribute($ModuleId, $Symbol* -> $Symbol {Attr*1, left, Attr*2})

  [ca-2'3] check-attributes($Literal ( $Symbol,* ) -> $Symbol {Attr*1, left, Attr*2},
                            Msgs, $ModuleId) = 
             Msgs + illegal-attribute($ModuleId, $Literal ( $Symbol,* ) -> $Symbol {Attr*1, left, Attr*2})

  [ca-2'4] is-binary-definition($Symbol* -> $Symbol) = false
           =================================================
           check-attributes($Symbol* -> $Symbol {Attr*1, assoc, Attr*2},
                            Msgs, $ModuleId) = 
             Msgs + illegal-attribute($ModuleId, $Symbol* -> $Symbol {Attr*1, assoc, Attr*2})

  [ca-2'5] check-attributes($Literal ( $Symbol,* ) -> $Symbol {Attr*1, assoc, Attr*2},
                            Msgs, $ModuleId) = 
             Msgs + illegal-attribute($ModuleId, $Literal ( $Symbol,* ) -> $Symbol {Attr*1, assoc, Attr*2})

  [ca-2'6] is-binary-definition($Symbol* -> $Symbol) = false
           =================================================
           check-attributes($Symbol* -> $Symbol {Attr*1, right, Attr*2},
                            Msgs, $ModuleId) = 
             Msgs + illegal-attribute($ModuleId, $Symbol* -> $Symbol {Attr*1, right, Attr*2})


  [ca-2'7] check-attributes($Literal ( $Symbol,* ) -> $Symbol {Attr*1, right, Attr*2},
                            Msgs, $ModuleId) = 
             Msgs + illegal-attribute($ModuleId, $Literal ( $Symbol,* ) -> $Symbol {Attr*1, right, Attr*2})

  [ca-2'8] is-binary-definition($Symbol* -> $Symbol) = false
           =================================================
           check-attributes($Symbol* -> $Symbol {Attr*1, non-assoc, Attr*2},
                            Msgs, $ModuleId) = 
             Msgs + illegal-attribute($ModuleId, $Symbol* -> $Symbol {Attr*1, non-assoc, Attr*2})

  [ca-2'9] check-attributes($Literal ( $Symbol,* ) -> $Symbol {Attr*1, non-assoc, Attr*2},
                            Msgs, $ModuleId) = 
             Msgs + illegal-attribute($ModuleId, $Literal ( $Symbol,* ) -> $Symbol {Attr*1, non-assoc, Attr*2})

  [ibd-1'1] is-binary-definition($Symbol1 $Symbol2 $Symbol1 -> $Symbol1) = true 

  [ibd-1'2] is-binary-definition($Symbol $Symbol -> $Symbol) = true 

  [default-ibd-1'3] is-binary-definition(Production) = false

  [ibd-2'1] is-bracket-definition($Literal1 $Symbol $Literal2 -> $Symbol) = true 

  [default-ibd-2'2] is-bracket-definition(Production) = false
