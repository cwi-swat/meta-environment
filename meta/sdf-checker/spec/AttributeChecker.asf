equations

  [ca-1'1] check-attributes(Definition) =
             check-attributes(Definition, {})

  [ca-1'2] get-module-name(Module) = ModuleName
           ====================================
           check-attributes(Module, Msgs) = 
             check-attributes(Module, Msgs, ModuleName)

  [ca-2'1] is-bracket-definition($Symbol* -> $Symbol) = false
           =================================================
           check-attributes($Symbol* -> $Symbol {Attr*1, bracket, Attr*2},
                            Msgs, ModuleName) = 
             Msgs + illegal-attribute(ModuleName, $Symbol* -> $Symbol {Attr*1, bracket, Attr*2})

  [ca-2'2] check-attributes($Literal ( $Symbol,* ) -> $Symbol {Attr*1, bracket, Attr*2},
                            Msgs, ModuleName) = 
             Msgs + 
             illegal-attribute(ModuleName, $Literal ( $Symbol,* ) -> $Symbol {Attr*1, bracket, Attr*2})

  [ca-2'2] is-binary-definition($Symbol* -> $Symbol) = false
           =================================================
           check-attributes($Symbol* -> $Symbol {Attr*1, left, Attr*2},
                            Msgs, ModuleName) = 
             Msgs + illegal-attribute(ModuleName, $Symbol* -> $Symbol {Attr*1, left, Attr*2})

  [ca-2'3] check-attributes($Literal ( $Symbol,* ) -> $Symbol {Attr*1, left, Attr*2},
                            Msgs, ModuleName) = 
             Msgs + illegal-attribute(ModuleName, $Literal ( $Symbol,* ) -> $Symbol {Attr*1, left, Attr*2})

  [ca-2'4] is-binary-definition($Symbol* -> $Symbol) = false
           =================================================
           check-attributes($Symbol* -> $Symbol {Attr*1, assoc, Attr*2},
                            Msgs, ModuleName) = 
             Msgs + illegal-attribute(ModuleName, $Symbol* -> $Symbol {Attr*1, assoc, Attr*2})

  [ca-2'5] check-attributes($Literal ( $Symbol,* ) -> $Symbol {Attr*1, assoc, Attr*2},
                            Msgs, ModuleName) = 
             Msgs + illegal-attribute(ModuleName, $Literal ( $Symbol,* ) -> $Symbol {Attr*1, assoc, Attr*2})

  [ca-2'6] is-binary-definition($Symbol* -> $Symbol) = false
           =================================================
           check-attributes($Symbol* -> $Symbol {Attr*1, right, Attr*2},
                            Msgs, ModuleName) = 
             Msgs + illegal-attribute(ModuleName, $Symbol* -> $Symbol {Attr*1, right, Attr*2})


  [ca-2'7] check-attributes($Literal ( $Symbol,* ) -> $Symbol {Attr*1, right, Attr*2},
                            Msgs, ModuleName) = 
             Msgs + illegal-attribute(ModuleName, $Literal ( $Symbol,* ) -> $Symbol {Attr*1, right, Attr*2})

  [ca-2'8] is-binary-definition($Symbol* -> $Symbol) = false
           =================================================
           check-attributes($Symbol* -> $Symbol {Attr*1, non-assoc, Attr*2},
                            Msgs, ModuleName) = 
             Msgs + illegal-attribute(ModuleName, $Symbol* -> $Symbol {Attr*1, non-assoc, Attr*2})

  [ca-2'9] check-attributes($Literal ( $Symbol,* ) -> $Symbol {Attr*1, non-assoc, Attr*2},
                            Msgs, ModuleName) = 
             Msgs + illegal-attribute(ModuleName, $Literal ( $Symbol,* ) -> $Symbol {Attr*1, non-assoc, Attr*2})

  [ca-2'10] contains-trafo(Aterm*1, Aterm*2) = false,
            is-accu-definition($Literal ( $Symbol,* ) -> $Symbol) = false
            =============================================================
            check-attributes($Literal ( $Symbol,* ) -> $Symbol 
                             {Attr*1, traversal(Aterm*1, accu, Aterm*2), Attr*2},
                             Msgs, ModuleName) = 
              Msgs + illegal-attribute(ModuleName, $Literal ( $Symbol,* ) -> $Symbol {Attr*1, traversal(Aterm*1, accu, Aterm*2), Attr*2})

  [ca-2'11] contains-trafo(Aterm*1, Aterm*2) = false,
            is-accu-definition($Symbol* -> $Symbol) = false
            ===============================================
            check-attributes($Symbol* -> $Symbol 
                             {Attr*1, traversal(Aterm*1, accu, Aterm*2), Attr*2},
                             Msgs, ModuleName) = 
              Msgs + illegal-attribute(ModuleName, $Symbol* -> $Symbol {Attr*1, traversal(Aterm*1, accu, Aterm*2), Attr*2})

  [ca-2'14] contains-trafo(Aterm*1, Aterm*2) = true,
            is-accu-trafo-definition($Literal ( $Symbol,* ) -> $Symbol) = false
            ===================================================================
            check-attributes($Literal ( $Symbol,* ) -> $Symbol 
                             {Attr*1, traversal(Aterm*1, accu, Aterm*2), Attr*2},
                             Msgs, ModuleName) = 
              Msgs + illegal-attribute(ModuleName, $Literal ( $Symbol,* ) -> $Symbol {Attr*1, traversal(Aterm*1, accu, Aterm*2), Attr*2})

  [ca-2'15] contains-trafo(Aterm*1, Aterm*2) = true,
            is-accu-trafo-definition($Symbol* -> $Symbol) = false
            =====================================================
            check-attributes($Symbol* -> $Symbol 
                             {Attr*1, traversal(Aterm*1, accu, Aterm*2), Attr*2},
                             Msgs, ModuleName) = 
              Msgs + illegal-attribute(ModuleName, $Symbol* -> $Symbol {Attr*1, traversal(Aterm*1, accu, Aterm*2), Attr*2})

  [ca-2'16] contains-accu(Aterm*1, Aterm*2) = false,
            is-trafo-definition($Literal ( $Symbol,* ) -> $Symbol) = false
            ==============================================================
            check-attributes($Literal ( $Symbol,* ) -> $Symbol 
                             {Attr*1, traversal(Aterm*1, trafo, Aterm*2), Attr*2},
                             Msgs, ModuleName) = 
              Msgs + illegal-attribute(ModuleName, $Literal ( $Symbol,* ) -> $Symbol {Attr*1, traversal(Aterm*1, trafo, Aterm*2), Attr*2})

  [ca-2'17] contains-accu(Aterm*1, Aterm*2) = false,
            is-trafo-definition($Symbol* -> $Symbol) = false
            ================================================
            check-attributes($Symbol* -> $Symbol 
                             {Attr*1, traversal(Aterm*1, trafo, Aterm*2), Attr*2},
                             Msgs, ModuleName) = 
              Msgs + illegal-attribute(ModuleName, $Symbol* -> $Symbol {Attr*1, traversal(Aterm*1, trafo, Aterm*2), Attr*2})

  [ca-2'18] contains-accu(Aterm*1, Aterm*2) = true,
            is-accu-trafo-definition($Literal ( $Symbol,* ) -> $Symbol) = false
            ===================================================================
            check-attributes($Literal ( $Symbol,* ) -> $Symbol 
                             {Attr*1, traversal(Aterm*1, trafo, Aterm*2), Attr*2},
                             Msgs, ModuleName) = 
              Msgs + illegal-attribute(ModuleName, $Literal ( $Symbol,* ) -> $Symbol {Attr*1, traversal(Aterm*1, trafo, Aterm*2), Attr*2})

  [ca-2'19] contains-accu(Aterm*1, Aterm*2) = true,
            is-accu-trafo-definition($Symbol* -> $Symbol) = false
            =====================================================
            check-attributes($Symbol* -> $Symbol 
                             {Attr*1, traversal(Aterm*1, trafo, Aterm*2), Attr*2},
                             Msgs, ModuleName) = 
              Msgs + illegal-attribute(ModuleName, $Symbol* -> $Symbol {Attr*1, traversal(Aterm*1, trafo, Aterm*2), Attr*2})

  [ca-2'20] contains-accu(Aterm+) = false,
            contains-trafo(Aterm+) = false
            ==============================
            check-attributes($Literal ( $Symbol,* ) -> $Symbol 
                             {Attr*1, traversal(Aterm+), Attr*2},
                             Msgs, ModuleName) = 
              Msgs + illegal-traversal-attribute(ModuleName, traversal(Aterm+))

  [ca-2'21] contains-accu(Aterm+) = false,
            contains-trafo(Aterm+) = false
            ==============================
            check-attributes($Symbol* -> $Symbol 
                             {Attr*1, traversal(Aterm+), Attr*2},
                             Msgs, ModuleName) = 
              Msgs + illegal-traversal-attribute(ModuleName, traversal(Aterm+))

  [ca-2'22] $Literal2 != traversal,
            contains-accu(Aterm+) \/ contains-trafo(Aterm+) = true
            ======================================================
            check-attributes($Literal1 ( $Symbol,* ) -> $Symbol 
                             {Attr*1, $Literal2(Aterm+), Attr*2},
                             Msgs, ModuleName) = 
              Msgs + illegal-traversal-attribute(ModuleName, $Literal2(Aterm+))

  [ca-2'23] $Literal2 != traversal,
            contains-accu(Aterm+) \/ contains-trafo(Aterm+) = true
            ======================================================
            check-attributes($Symbol* -> $Symbol 
                             {Attr*1, $Literal2(Aterm+), Attr*2},
                             Msgs, ModuleName) = 
              Msgs + illegal-traversal-attribute(ModuleName, $Literal2(Aterm+))

  [ibd-1'1] is-binary-definition($Symbol1 $Symbol2 $Symbol1 -> $Symbol1) = true 

  [ibd-1'2] is-binary-definition($Symbol $Symbol -> $Symbol) = true 

  [default-ibd-1'3] is-binary-definition(Production) = false

  [ibd-2'1] is-bracket-definition($Literal1 $Symbol $Literal2 -> $Symbol) = true 

  [default-ibd-2'2] is-bracket-definition(Production) = false

  [iad-1'1] is-accu-definition($Literal1 ( $Symbol1, $Symbol2, $Symbol,*) -> $Symbol2) = true

  [iad-1'2] is-accu-definition($Literal1 "(" $Symbol1 "," $Symbol2 $Symbol* ")" -> $Symbol2) = true

  [default-iad-1'3] is-accu-definition(Production) = false

  [itd-1'1] is-trafo-definition($Literal1 ( $Symbol, $Symbol,*) -> $Symbol) = true

  [itd-1'2] is-trafo-definition($Literal1 "(" $Symbol $Symbol* ")" -> $Symbol) = true

  [default-itd-1'3] is-trafo-definition(Production) = false

  [iatd-1'1] is-accu-trafo-definition($Literal1 ( $Symbol1, $Symbol2, $Symbol,*) -> $Symbol1 # $Symbol2) = true

  [iatd-1'2] is-accu-trafo-definition($Literal1 "(" $Symbol1 "," $Symbol2 $Symbol* ")" -> $Symbol1 # $Symbol2) = true

  [default-iatd-1'3] is-accu-trafo-definition(Production) = false

  [ca-3'1] contains-accu(Aterm*1, accu, Aterm*2) = true

  [default-ca-3'2] contains-accu(Aterm*) = false

  [ct-3'1] contains-trafo(Aterm*1, trafo, Aterm*2) = true

  [default-ct-3'2] contains-trafo(Aterm*) = false
