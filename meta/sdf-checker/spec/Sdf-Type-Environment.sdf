module Sdf-Type-Environment

imports Messages Booleans ImportOperations

exports
  sorts Info-Msg-Tuple Module-Info-Entry Module-Info-Table
        Symbol-Info

  context-free syntax
    "[" Module-Info-Table "," Messages "]" -> Info-Msg-Tuple

  context-free syntax
    create-info-msg-tuple()                            -> Info-Msg-Tuple
    get-module-info(Info-Msg-Tuple)                    -> Module-Info-Table
    get-messages(Info-Msg-Tuple)                       -> Messages
    put-module-info(Module-Info-Table, Info-Msg-Tuple) -> Info-Msg-Tuple
    put-messages(Messages, Info-Msg-Tuple)             -> Info-Msg-Tuple

  context-free syntax
    "[" SymbolsSet "," SymbolsSet "]" -> Symbol-Info

  context-free syntax
    "[" ModuleName "," Bool "," Symbol-Info "]" -> Module-Info-Entry
    "{" Module-Info-Entry* "}"                  -> Module-Info-Table

  context-free syntax
    module-is-checked(ModuleName, Module-Info-Table)    -> Bool
    get-declared-symbols(ModuleName, Module-Info-Table) -> SymbolsSet
    put-symbol-info(ModuleName,
                    SymbolsSet, SymbolsSet, 
                    Module-Info-Table)                  -> Module-Info-Table
    get-declared-symbols(ImportsSet, Module-Info-Table) -> SymbolsSet

hiddens
  variables
    "Bool"[0-9]*             -> Bool
    "Messages"[0-9]*         -> Messages
    "ModuleName"[0-9]*       -> ModuleName
    "ModuleInfoEntry"[0-9]*  -> Module-Info-Entry
    "ModuleInfoEntry*"[0-9]* -> Module-Info-Entry*
    "ModuleInfoTable"[0-9]*  -> Module-Info-Table
    "SymbolInfo"[0-9]*       -> Symbol-Info
    "Symbol*"[0-9]*          -> Symbol*
    "SymbolsSet"[0-9]*       -> SymbolsSet
    "Import*"[0-9]*          -> Import*
