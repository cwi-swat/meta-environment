#ifndef _GUI_MODULE_BROWSER
#define _GUI_MODULE_BROWSER

tool module-browser is { }

process ModuleBrowser is
let
  EventList: list,
  Event: term,
  Graph: term,
  Module: str,
  Type: term,
  T: module-browser,
  Str : str,
  List : list
in
  rec-connect(T?)
  .
    (
      rec-msg(ui-display-treelist(Str?, List?))
      . snd-do(T, display-treelist(Str, List))
    +
      rec-event(T,clear-all)
      . snd-msg(clear-all)
      . rec-msg(cleared-all)
      . snd-ack-event(T,clear-all)
    +
      rec-msg(mb-select-module(Module?))
      . snd-do(T, select-module(Module))
    +
      rec-event(T, module-selected(Module?))
      . snd-note(mb-module-selected(Module))
      . snd-ack-event(T, module-selected(Module))
/*
    +
      rec-event(T, get-events(Type?, Module?))
      . snd-msg(cm-get-module-events(Type, Module))
      . rec-msg(cm-module-events(EventList?))
      . snd-do(T, add-events(Type, Module, EventList))
      . snd-ack-event(T, get-events(Type, Module))
*/
    +
      rec-event(T, button-selected(Type?, Event?))
      . snd-msg(ui-button-selected(Type, Event))
      . snd-ack-event(T, button-selected(Type, Event))
    +
      rec-event(T, button-selected(Type?, Module?, Event?))
      . snd-msg(ui-button-selected(Type, Event, Module))
      . snd-ack-event(T, button-selected(Type, Module, Event))
    )
    *
      rec-disconnect(T)
endlet

toolbus(ModuleBrowser)

#endif
