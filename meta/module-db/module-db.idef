/*

    Meta-Environment - An environment for language prototyping.
    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, 
                        The Netherlands. 

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

    $Id$
*/
process ModuleDB is
let
  Id        : term,
  T1        : term,
  Path      : str,
  Table     : term,
  T2        : term,
  AsFixModule: term,
  ModuleId  : term,
  Syntax    : term,
  NewSyntax : term,
  EqsTree   : term,
  EqsText   : str,
  Name      : str,
  ErrorName : str,
  Time      : int,
  Mdb       : module-db,
  Modules   : list,
  ChngMods  : list,
  Equations : term,
  Pairs     : list,
  ActualMods: list,
  Status    : str,
  Language  : str,
  ErrorMsg  : str,
  OutputDir : str, 
  TableType : term
in

/* First, execute the module db */
execute(module-db, Mdb?).
/* And initialize it */
snd-do(Mdb, create-module-db).
(
/* If we get the request to empty the db, we'll do it. */
  rec-msg(clear-module-db).
  snd-do(Mdb, clear-module-db)
+
/* Delete one module from the db */
  rec-msg(delete-module-from-db(Name?)).
  snd-eval(Mdb, delete-module(Name)).
  rec-value(Mdb, changed-modules(ChngMods?)).
  snd-msg(changed-modules(ChngMods))
+
/* See if a module is in the db */
  rec-msg(is-module-in-db(Name?)).
  snd-eval(Mdb, exists(Name)).
  ( rec-value(Mdb, result(exists(Name?))).
    snd-msg(exists-in-module-db(Name))
  +
    rec-value(Mdb, result(notexists(Name?))).
    snd-msg(not-exists-in-module-db(Name))
  )
+
  rec-msg(add-empty-module-to-db(Name?)).
  snd-eval(Mdb,add-empty-module(Name)).
  rec-value(Mdb,empty-module-added(import-graph(ActualMods?, Pairs?))) .
  snd-note(import-graph(ActualMods, Pairs)).
  snd-msg(empty-module-added)
+
/* Add a term-asfix module to the database */
/* Path is the directory in which the file containing Module lives.
   Module is the parsed SDF2 representation in Asfix1 */
  rec-msg(add-sdf2-module-to-db(Name?, Path?, AsFixModule?,
                                timestamp(Time?), Status?)) .
  snd-eval(Mdb, add-sdf2-module(Name, Path, AsFixModule, Time, Status)) .
  ( 
    rec-value(Mdb,imports(need-modules(Modules?),
                  import-graph(ActualMods?, Pairs?))).
/* If a new module is added, we tell the world the current import relations */
    snd-note(import-graph(ActualMods, Pairs)).
    snd-msg(need-modules(Modules))
  +
    rec-value(Mdb, name-consistency-error(ErrorName?)) .
    snd-note(ui-status(errorf("Module name %s inconsistent with file name %s",
                              [ErrorName, Name]))) .
    snd-msg(need-modules([]))
  +
    rec-value(Mdb, illegal-module-error(ErrorName?)) .
    snd-note(ui-status(errorf("Illegal module: %s", [ErrorName]))) .
    snd-msg(need-modules([]))
  )
+
/* Path is the directory in which the file containing Module lives.
   Module is the parsed SDF2 representation in Asfix1 */
  rec-msg(update-module-in-db(AsFixModule?,Language?)).
  if equal(Language,"Sdf2") then
    snd-eval(Mdb,update-sdf2-module(AsFixModule)) .
    (
      rec-value(Mdb,imports(changed-modules(ChngMods?),need-modules(Modules?),
                            import-graph(ActualMods?, Pairs?))).
      snd-msg(notify-about-changed-modules(ChngMods,"sdf")).
      rec-msg(notify-about-changed-modules-done).
      snd-note(import-graph(ActualMods, Pairs)).
      snd-msg(extra-modules(Modules))
    +
      rec-value(Mdb, name-consistency-error(ErrorName?)) .
      snd-note(ui-status(errorf("Module name %s inconsistent with file name",
                                [ErrorName]))) .
      snd-msg(extra-modules([]))
    )
  else
    snd-msg(extra-modules([]))
  fi
+
  /* Get the list of modules for which the equations are not yet
     available in the database */
  rec-msg(eqs-available-for-modules(Name?)).
  snd-eval(Mdb,eqs-available-for-modules(Name)).
  rec-value(Mdb,modules(Modules?)).
  snd-msg(eqs-for-modules(Modules))
+
  /* Get the text of an unparsed equations section.
  */
  rec-msg(get-eqs-text(Name?)).
  snd-eval(Mdb, get-eqs-text(Name)).
  (
    rec-value(Mdb, eqs-text(Name, EqsText?)).
    snd-msg(eqs-text(Name, EqsText))
  +
    rec-value(Mdb, no-eqs-text(Name)).
    snd-msg(no-eqs-text(Name))
  )
+
  /* Add the equations as tree to the database for the given module name */
  rec-msg(add-eqs-to-db(Name?, Path?, tree(EqsTree?), text(EqsText?), 
                        timestamp(Time?))) .
  snd-do(Mdb,add-tree-eqs-section(Name, Path, EqsTree, EqsText, Time)) .
  snd-msg(eqs-added)
+
  /* Add the equations as tree to the database for the given module name */
  rec-msg(add-empty-eqs-to-db(Name?, Path?)) .
  snd-do(Mdb,add-empty-eqs-section(Name, Path)) .
  snd-msg(empty-eqs-added)
+
  /* Add the equations as text to the database for the given module name */
  rec-msg(add-eqs-to-db(Name?, Path?, text(EqsText?), timestamp(Time?))) .
  snd-do(Mdb,add-text-eqs-section(Name, Path, EqsText, Time)) .
  snd-msg(eqs-added)
+
  /* Update the equations as tree in the database.
   */
  rec-msg(update-eqs-tree-in-db(Language?, tree(EqsTree?))) .
  snd-eval(Mdb, update-eqs-tree(Language, EqsTree)) .
  rec-value(Mdb, changed-modules(ChngMods?)) .
  snd-msg(notify-about-changed-modules(ChngMods, "eqs")) .
  rec-msg(notify-about-changed-modules-done) .
  snd-msg(eqs-updated)
+
/* Add parse table to the database for the given module name */
  rec-msg(add-parse-table-to-db(ModuleId?, Table?, timestamp(Time?))) .
  snd-eval(Mdb, add-parse-table(ModuleId, Table, Time)) .
  rec-value(Mdb, parse-table-added) .
  snd-msg(parse-table-added)
+
  rec-msg(get-sdf2-path-from-db(Name?)).
  snd-eval(Mdb,get-path(Name, sdf2)).
  rec-value(Mdb,path(Path?)).
  snd-msg(path(Path))
+
  rec-msg(get-eqs-path-from-db(Name?)) .
  snd-eval(Mdb, get-path(Name, eqs)) .
  rec-value(Mdb, path(Path?)) .
  snd-msg(path(Path))
+
/* Add parse table to the database for the given module name */
  rec-msg(get-table-from-db(ModuleId?)) .
  snd-eval(Mdb, get-parse-table(ModuleId)) .
  ( rec-value(Mdb, table(Table?, Path?)) .
    snd-msg(table(Table, Path))
  +
    rec-value(Mdb, no-table) .
    snd-msg(no-table)
  )
+
/* Return a list of all modules imported by this one*/
/*
  rec-msg(get-all-imported-modules(Name?)).
  snd-eval(Mdb, get-all-imported-modules(Name)).
  rec-value(Mdb, all-imports(Modules?)).
  snd-msg(all-imported-modules(Modules))
+
*/
/* Return a list of all modules */
  rec-msg(get-all-modules).
  snd-eval(Mdb, get-all-modules).
  rec-value(Mdb, all-modules(Modules?)).
  snd-msg(all-modules(Modules))
+

/* Get all equations for a list of modules */
  rec-msg(get-all-equations(Name?)).
  snd-eval(Mdb, get-all-equations(Name)).
  (
    rec-value(Mdb, equations(Equations?)).
    snd-msg(all-equations(Equations))
  +
    rec-value(Mdb, equations-incomplete) .
    snd-msg(equations-incomplete)
  )
+
  rec-msg(get-all-equations-for-compiler(Name?)).
  snd-eval(Mdb, get-all-equations-for-compiler(Name)).
  (
    rec-value(Mdb, equations(Equations?)).
    snd-msg(all-equations(Equations))
  +
    rec-value(Mdb, equations-incomplete) .
    snd-msg(equations-incomplete)
  )
+
/* Get the syntax for a list of modules */
  (
    rec-msg(get-all-sdf2-definitions(eqs(Name?)))
  +
    rec-msg(get-all-sdf2-definitions(trm(Name?)))
  ) .
  snd-eval(Mdb, get-all-sdf2-definitions(Name)) .
  (
    rec-value(Mdb, syntax(Syntax?)).
    snd-msg(syntax(Syntax))
  +
    rec-value(Mdb, sdf2-definition-error(ErrorMsg?)).
    snd-msg(no-syntax)
  )
+
  rec-msg(get-sdf2-asfix(Name?)).
  snd-eval(Mdb, get-asfix(Name, sdf2)).
  (
    rec-value(Mdb, asfix(syntax(Syntax?))).
    snd-msg(syntax(Syntax))
  +
    rec-value(Mdb, asfix(syntax-unchanged(Syntax?))).
    snd-msg(syntax-unchanged(Syntax))
  +
    rec-value(Mdb, asfix(unavailable)) .
    snd-msg(unavailable)
  )
+
  rec-msg(get-eqs-tree(Name?)).
  snd-eval(Mdb, get-asfix(Name, eqs)).
  rec-value(Mdb, asfix(EqsTree?)).
  snd-msg(EqsTree)
+
/* Validate the parse table */
  rec-msg(invalidate-parse-tables(Name?)).
  snd-do(Mdb, invalidate-parse-tables(Name))
) *
delta
endlet


tool module-db is { command = "module-db" }

