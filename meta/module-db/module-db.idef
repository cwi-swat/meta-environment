process ModuleDB is
let
Id        : term,
T1        : term,
Path      : str,
Table     : str,
T2        : term,
AsFixModule: term,
Syntax    : term,
NewSyntax : term,
Eqs       : term,
Name      : str,
Time      : int,
Mdb       : module-db,
Modules   : list,
ChngMods  : list,
Equations : list,
Pairs     : list,
ActualMods: list,
Status    : str,
Language  : str,
ErrorMsg  : str
in

/* First, execute the module db */
execute(module-db, Mdb?).
/* And initialize it */
snd-do(Mdb, create-module-db).
(
/* When compiling modules, they need to be reshuffled such that a new
   module is generated for each context-free function in the spec
*/
  rec-msg(reshuffle-module(Name?)).
  snd-do(Mdb, reshuffle-modules-from(Name)).
/* Everytime a new module is finished it is returned, so that it can
   already be compiled. This way, we don't have to wait for the whole
   reshuffleing to finish.
*/
  ( rec-event(Mdb, generate-code(Name?,AsFixModule?)).
    snd-msg(generate-code(Name,AsFixModule)).
    snd-ack-event(Mdb, generate-code(Name, AsFixModule))
  ) *
/* When we're done, we're done */
  rec-event(Mdb,done).
  snd-msg(reshuffle-done).
  snd-ack-event(Mdb,done)
+
/* If we get the request to empty the db, we'll do it. */
  rec-msg(clear-module-db).
  snd-do(Mdb, clear-module-db)
+
/* Delete one module from the db */
  rec-msg(delete-module(Name?)).
  snd-eval(Mdb, delete-module(Name)).
  rec-value(Mdb, changed-modules(ChngMods?)).
  snd-msg(changed-modules(ChngMods))
+
/* Revert one module from the db */
  rec-msg(revert-module-in-db(Name?)).
  snd-eval(Mdb, delete-module(Name)).
  rec-value(Mdb, changed-modules(ChngMods?)).
  snd-msg(done)
+
/* See if a module is in the db */
  rec-msg(is-module-in-db(Name?)).
  snd-eval(Mdb, exists(Name)).
  ( rec-value(Mdb, result(exists(Name?))).
    snd-msg(exists-in-module-db(Name))
  +
    rec-value(Mdb, result(notexists(Name?))).
    snd-msg(not-exists-in-module-db(Name))
  )
+
/* Add a module-asfix module to the database */
  rec-msg(add-module-to-db(AsFixModule?,timestamp(Time?))).
  snd-eval(Mdb,add-module(AsFixModule)).
  rec-value(Mdb,imports(need-modules(Modules?),import-graph(ActualMods?, Pairs?))).
/* If a new module is added, we tell the world the current import relations */
  snd-note(import-graph(ActualMods, Pairs)).
  snd-msg(need-modules(Modules))
+
  rec-msg(add-empty-module-to-db(Name?)).
  snd-eval(Mdb,add-empty-module(Name)).
  rec-value(Mdb,done).
  snd-msg(done)
+
/* Add a term-asfix module to the database */
/* Path is the directory in which the file containing Module lives.
   Module is the parsed SDF2 representation in Asfix1 */
  rec-msg(add-sdf2-module-to-db(Path?,AsFixModule?,timestamp(Time?),Status?)).
  snd-eval(Mdb,add-sdf2-module(Path,AsFixModule,Time,Status)).
  rec-value(Mdb,imports(need-modules(Modules?),import-graph(ActualMods?, Pairs?))).
/* If a new module is added, we tell the world the current import relations */
  snd-note(import-graph(ActualMods, Pairs)).
  snd-msg(need-modules(Modules))
+
/* Path is the directory in which the file containing Module lives.
   Module is the parsed SDF2 representation in Asfix1 */
  rec-msg(update-module-in-db(AsFixModule?,Language?)).
  if equal(Language,"Sdf2") then
    snd-eval(Mdb,update-sdf2-module(AsFixModule)).
    rec-value(Mdb,imports(changed-modules(ChngMods?),need-modules(Modules?),
                          import-graph(ActualMods?, Pairs?))).
    snd-msg(notify-about-changed-modules(ChngMods,"sdf")).
    rec-msg(notify-about-changed-modules-done).
    snd-note(import-graph(ActualMods, Pairs)).
    snd-msg(extra-modules(Modules))
  else
    snd-msg(extra-modules([]))
  fi
+
/* Get the list of modules for which the equations are not yet
   available in the database */
  rec-msg(update-eqs-for-modules(Name?)).
  snd-eval(Mdb,update-eqs-for-modules(Name)).
  rec-value(Mdb,modules(Modules?)).
  snd-msg(eqs-for-modules(Modules))
+
/* Add the equations to the database for the given module name */
  rec-msg(add-eqs-to-db(Name?,Path?,Eqs?,timestamp(Time?),Status?)).
  snd-eval(Mdb,add-eqs-module(Name,Path,Eqs,Time,Status)).
  rec-value(Mdb,done).
  snd-msg(done)
+
/* Add parse table to the database for the given module name */
  rec-msg(add-table-to-db(Name?,Table?,timestamp(Time?))).
  snd-eval(Mdb,add-parse-table(Name,Table,Time)).
  rec-value(Mdb,done).
  snd-msg(done)
+
/* Add parse table to the database for the given module name */
  rec-msg(get-sdf2-path-from-db(Name?)).
  snd-eval(Mdb,get-path(Name, sdf2)).
  rec-value(Mdb,path(Path?)).
  snd-msg(path(Path))
+
/* Add parse table to the database for the given module name */
  rec-msg(get-eqs-path-from-db(Name?)).
  snd-eval(Mdb,get-path(Name, eqs)).
  rec-value(Mdb,path(Path?)).
  snd-msg(path(Path))
+
/* Add parse table to the database for the given module name */
  rec-msg(get-table-from-db(Name?)).
  snd-eval(Mdb,get-parse-table(Name)).
  ( rec-value(Mdb,table(Table?)).
    snd-msg(table(Table))
  +
    rec-value(Mdb,no-table).
    snd-msg(no-table)
  )
+
/* Return a list of all modules imported by this one*/
/*
  rec-msg(get-all-imported-modules(Name?)).
  snd-eval(Mdb, get-all-imported-modules(Name)).
  rec-value(Mdb, all-imports(Modules?)).
  snd-msg(all-imported-modules(Modules))
+
*/
/* Return a list of all modules */
  rec-msg(get-all-modules).
  snd-eval(Mdb, get-all-modules).
  rec-value(Mdb, all-modules(Modules?)).
  snd-msg(all-modules(Modules))
+

/* Get all equations for a list of modules */
  rec-msg(get-all-equations(Name?)).
  snd-eval(Mdb, get-all-equations(Name)).
  rec-value(Mdb, equations(Equations?)).
  snd-msg(all-equations(Equations))
+
/* Get the syntax for a list of modules */
  rec-msg(get-all-sdf2-definitions(Name?)).
  snd-eval(Mdb, get-all-sdf2-definitions(Name)).
  (
    rec-value(Mdb, syntax(Syntax?)).
    snd-msg(syntax(Syntax))
  +
    rec-value(Mdb, sdf2-definition-error(ErrorMsg?)).
    snd-msg(no-syntax)
  )
+
  rec-msg(get-sdf2-asfix(Name?)).
  snd-eval(Mdb, get-asfix(Name, sdf2)).
  (
    rec-value(Mdb, syntax(Syntax?)).
    snd-msg(syntax(Syntax))
  +
    rec-value(Mdb, syntax-unchanged(Syntax?)).
    snd-msg(syntax-unchanged(Syntax))
  +
    rec-value(Mdb, unavailable).
    snd-msg(unavailable)
  )
+
  rec-msg(get-eqs-asfix(Name?)).
  snd-eval(Mdb, get-asfix(Name, eqs)).
  ( rec-value(Mdb, eqs(Eqs?)).
    snd-msg(eqs(Eqs))
  +
    rec-value(Mdb, eqs-unchanged(Eqs?)).
    snd-msg(eqs-unchanged(Eqs))
  +
    rec-value(Mdb, no-eqs).
    snd-msg(no-eqs)
  +
    rec-value(Mdb, unavailable).
    snd-msg(unavailable)
  )
+
/* Validate the parse table */
  rec-msg(validate-parse-tables(Name?)).
  snd-eval(Mdb, validate-parse-tables(Name)).
  rec-value(Mdb, validation-done).
  snd-msg(validation-done)
) *
delta
endlet


tool module-db is { command = "module-db" }

