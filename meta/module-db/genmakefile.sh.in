#! @SHELL@
#
# $Id$
#   Date: 3/19/1998
# Author: Merijn de Jonge, Jeroen Scheerder
#
# This script generates both a Makefile.in for use with autconf as well
# as a Makefile suitable for compiling the C code corresponding to a 
# compiled specification.
#
# usage:
#    genmakefile.sh <target>
#
# where <target> is the name of the desired stand-alone executable program.
#
# The generated Makefile understands the following targets:
#
# all, or <target>        This will build <target>
# install                 Builds and installs <target>
# debug                   This will build <target>-db (i.e., a
#                         stand-alone program suitable for debugging)
# profile                 This will build <target>-prof (i.e., a
#                         stand-alone program suitable for profiling)
# clean                   This will remove <target>, <target>-db
#                         <target>-prof, *.o init.c
#
#
# You might want to change to following variables below:
#
#   DEBUG_CC_FLAGS: compiler flags to store debugging information in object files
#   DEBUG_LD_FLAGS: optional flags for linking with debugging information
# PROFILE_CC_FLAGS: compiler flags to store profile information in object files
# PROFILE_LD_FLAGS: optional flags for linking profiled object code
#     STD_CC_FLAGS: default compiler flags
#     STD_LD_FLAGS: default linker flags
#
#      FLAGS_$(CC): Compiler dependent settings


  DEBUG_CC_FLAGS=-g
  DEBUG_LD_FLAGS=
PROFILE_CC_FLAGS=-pg
PROFILE_LD_FLAGS=-pg
    STD_CC_FLAGS=-O
    STD_LD_FLAGS=

        FLAGS_cc=
       FLAGS_gcc="-Wall -O4"

## No changes below

PERL=@PERL@

# display usage message
usage()
{
   cat<<ENDCAT
$0
   generates on standard output a Makefile for the compilation of the
   C code corresponding to a compiled specification.

usage:
$0 [-h] <target>
   where <target> is the name of the desired stand-alone executable program.

ENDCAT
}


# parse command line
if [ $# -ne 1 ]
then
   usage
   exit 1
fi

if [ $1 = "-h" -o $1 = "-help" ]
then
   usage
   exit 0
fi

if [ ! -r $1.module-list ]
then
   echo "Could not find module list \"$1.module-list\"" >&2
   exit 1
fi

#
# In the next bit, use `%!%id%!%' for configure stuff, and adapt
# the substitution code at the end for the added key -- it's the
# only workaround to prevent configure's substition.
#
# Yup, I know it's a hack... sosumi.
tmpfile=${TMPDIR:-/tmp}/`basename $0`.$$
trap "rm -f $tmpfile" 0 1 2 15

cat <<ENDMAKE > $tmpfile
#
# Makefile for target "$1" generated automagically on `date`
#

LOCALLIBS=-lsupport -lATB -lAsFix -lATerm

srcdir          = %!%srcdir%!%
top_srcdir      = %!%top_srcdir%!%

# Default compiler to use
CC=%!%CC%!%

# DEBUG-LIBS:     libraries containing debugging information
# DEBUG-CC-FLAGS: compiler flags to store debugging information in object files
# DEBUG-LD-FLAGS: optional flags for linking with debugging information
DEBUG-LIBS     = -L\$(ATERM)/lib \$(LOCALLIBS:=-dbg) \$(LIBS)
DEBUG-CC-FLAGS = ${DEBUG_CC_FLAGS}
DEBUG-LD-FLAGS = ${DEBUG_LD_FLAGS}

# PROFILE-LIBS:     libraries containing profile information
# PROFILE-CC-FLAGS: compiler flags to store profile information in object files
# PROFILE-LD-FLAGS: optional flags for linking profiled object code
PROFILE-LIBS     = -L\$(ATERM)/lib \$(LOCALLIBS:=-prof) \$(LIBS)
PROFILE-CC-FLAGS = ${PROFILE_CC_FLAGS}
PROFILE-LD-FLAGS = ${PROFILE_LD_FLAGS}

# STD-LIBS:     normal libraries
# STD-CC-FLAGS: normal compiler flags
# STD-LD-FLAGS: optional flags
STD-LIBS      = -L\$(ATERM)/lib \$(LOCALLIBS:=-\$(CC)) \$(LIBS)
STD-CC-FLAGS  = ${STD_CC_FLAGS}
STD-LD-FLAGS  = ${STD_LD_FLAGS}

# FLAGS_\$(CC): compiler dependent flags (e.g., FLAGS-gcc=-Wall)
FLAGS-cc      = ${FLAGS_cc}
FLAGS-gcc     = ${FLAGS_gcc}

# There should be no need to change anything below

prefix          = %!%prefix%!%
exec_prefix     = %!%exec_prefix%!%
bindir          = %!%bindir%!%
libdir          = %!%libdir%!%
includedir      = %!%includedir%!%

DEFS            = %!%DEFS%!% \$(XDEFS)
INCLUDES        = %!%INCLUDES%!% \$(XINCLUDES)
LIBS            = %!%LIBS%!% \$(XLIBS)
SOCKLIBS        = %!%SOCKLIBS%!%

INSTALL		= %!%INSTALL%!%
INSTALL_DATA	= %!%INSTALL_DATA%!%
INSTALL_PROG	= %!%INSTALL_PROG%!%
UNINSTALL	= %!%UNINSTALL%!%

ATERM           = %!%ATERM%!%

XINCLUDES       = -I\$(ATERM)/include -I\$(includedir)
XLIBS           = -L\$(prefix)/lib \$(SOCKLIBS)

SPEC_SRCS=`cat $1.module-list |\
          grep -v '#' | awk '{printf "\\\\\n          %s", $1;}'`
SRCS=\$(SPEC_SRCS) init.c

STD-OBJS=\$(SRCS:.c=-\$(CC).o)
DEBUG-OBJS=\$(SRCS:.c=-dbg.o)
PROFILE-OBJS=\$(SRCS:.c=-prof.o)

BINFILES    = $1
LIBFILES    =
INCLUDEFILES=

# Make rules

all:	\${BINFILES}

# install target (install binaries, include files, and libraries)
install:	all
	mkdir -p $(bindir) $(libdir) $(includedir)
	@$(INSTALL_PROG) $(INSTALL) $(bindir) $(BINFILES)
	@$(INSTALL_DATA) $(INSTALL) $(libdir) $(LIBFILES)
	@$(INSTALL_DATA) $(INSTALL) $(includedir) $(INCLUDEFILES)

# uninstall target (remove all files installed by 'install' target)
uninstall:
	@$(UNINSTALL) $(bindir) $(BINFILES)
	@$(UNINSTALL) $(libdir) $(LIBFILES)
	@$(UNINSTALL) $(includedir) $(INCLUDEFILES)

%-\$(CC).o:	%.c
	\$(CC) \$(FLAGS-\$(CC)) \$(STD-CC-FLAGS) \$(DEFS) \$(INCLUDES) -c $< -o \$@

%-dbg.o:	%.c
	\$(CC) \$(FLAGS-\$(CC)) \$(DEBUG-CC-FLAGS) \$(DEFS) \$(INCLUDES) -c $< -o \$@

%-prof.o:	%.c
	\$(CC) \$(FLAGS-\$(CC)) \$(PROFILE-CC-FLAGS) \$(DEFS) \$(INCLUDES) -c $< -o \$@

$1:	\$(STD-OBJS)
	\$(CC) \$(STD-LD-FLAGS) -o \$@ \$(STD-OBJS) \$(LIBDIR) \$(STD-LIBS)

$1-debug:	\$(DEBUG-OBJS)
	\$(CC) \$(DEBUG-LD-FLAGS) -o \$@ \$(DEBUG-OBJS) \$(LIBDIR) \$(DEBUG-LIBS)

$1-prof:	\$(PROFILE-OBJS)
	\$(CC) \$(PROFILE-LD-FLAGS) -o \$@ \$(PROFILE-OBJS) \$(LIBDIR) \$(PROFILE-LIBS)

debug:  $1-debug

profile: $1-prof

init.c: \$(SPEC_SRCS)
	@(echo "/*GENERATED AUTOMATICALLY, DO NOT MODIFY */" ;\\
	SPEC_SRCS="\$(SPEC_SRCS)" ;\\
	for file in \$\$SPEC_SRCS; do \\
		echo "extern void register_\$\$file();" ;\\
		echo "extern void resolve_\$\$file();"  ;\\
		echo "extern void init_\$\$file();"  ;\\
	done ;\\
	echo "void register_all() {" ;\\
	for file in \$\$SPEC_SRCS; do \\
		echo "  register_\$\$file();" ;\\
	done ;\\
	echo "}" ;\\
	echo "void resolve_all() {" ;\\
	for file in \$\$SPEC_SRCS; do \\
		echo "  resolve_\$\$file();"  ;\\
	done ;\\
	echo "}" ;\\
	echo "void init_all() {" ;\\
	for file in \$\$SPEC_SRCS; do \\
		echo "  init_\$\$file();"  ;\\
	done ;\\
	echo "}" ) | sed 's/.c()/()/g;s/-/_/g;' > \$@

clean:
	\$(RM) *.o init.c $1 $1-db $1-prof
ENDMAKE

# Create the configure-ready Makefile.in template
#
$PERL -pe 's|%!%([^@]+)%!%|\@$1\@|g' < $tmpfile > Makefile.in

# Create the instantiated Makefile, by substituting configure's
# variables `manually'.  Beware: to prevent perl from interfering
# (by interpolating configure variable values) the configure items
# must be quoted sans interpolation explicitly before substitution.
#
$PERL -pe '	$srcdir   = q{@srcdir@};
		$topsrc   = q{@top_srcdir@};
		$CC       = q{@CC@};
		$prefix   = q{@prefix@};
		$eprefix  = q{@exec_prefix@};
		$bindir   = q{@bindir@};
		$libdir   = q{@libdir@};
		$incdir   = q{@includedir@};
		$DEFS     = q{@DEFS@};
		$INCLUDES = q{@INCLUDES@};
		$LIBS     = q{@LIBS@};
		$SOCKLIBS = q{@SOCKLIBS@};
		$INSTALL  = q{@INSTALL@};
		$INSTDATA = q{@INSTALL_DATA@};
		$INSTPROG = q{@INSTALL_PROG@};
		$UNINSTALL= q{@UNINSTALL@};
		$ATERM    = q{@ATERM@};
		
		s|%!%srcdir%!%|$srcdir|g;
		s|%!%top_srcdir%!%|$topsrc|g;
		s|%!%CC%!%|$CC|g;
		s|%!%prefix%!%|$prefix|g;
		s|%!%exec_prefix%!%|$eprefix|g;
		s|%!%bindir%!%|$bindir|g;
		s|%!%libdir%!%|$libdir|g;
		s|%!%includedir%!%|$incdir|g;
		s|%!%DEFS%!%|$DEFS|g;
		s|%!%INCLUDES%!%|$INCLUDES|g;
		s|%!%LIBS%!%|$LIBS|g;
		s|%!%SOCKLIBS%!%|$SOCKLIBS|g;
		s|%!%INSTALL%!%|$INSTALL|g;
		s|%!%INSTALL_DATA%!%|$INSTDATA|g;
		s|%!%INSTALL_PROG%!%|$INSTPROG|g;
		s|%!%UNINSTALL%!%|$UNINSTALL|g;
		s|%!%ATERM%!%|$ATERM|g;' < $tmpfile > Makefile
