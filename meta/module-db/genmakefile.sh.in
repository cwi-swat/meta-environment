#! @SHELL@
#
# $Id$
#   Date: 3/19/1998
# Author: Merijn de Jonge, Jeroen Scheerder
#
# This script generates a Makefile.in for use with autoconf, aa Makefile
# suitable for compiling the C code corresponding to a compiled
# specification, or both.
#
# usage:
#    genmakefile.sh  [-h] [-i] [-m] <target>
# where
#    <target> is the name of the desired stand-alone executable program.
#     -h      shows usage information
#     -i      specifies that a Makefile.in should be generated on standard
#             output
#     -m      specifies that a Makefile should be generated on standard
#             output
# By default both a Makefile and Makefile.in are generated
#
# The generated Makefile understands the following targets:
#
# all, or <target>        This will build <target>
# install                 Builds and installs <target>
# debug                   This will build <target>-db (i.e., a
#                         stand-alone program suitable for debugging)
# profile                 This will build <target>-prof (i.e., a
#                         stand-alone program suitable for profiling)
# clean                   This will remove <target>, <target>-db
#                         <target>-prof, *.o init.c
#

## No changes below

PERL=@PERL@
srcdir=@srcdir@
top_srcdir=@top_srcdir@
prefix=@prefix@
exec_prefix=@exec_prefix@
bindir=@bindir@
libdir=@libdir@
PROTO=${libdir}/genmakefile.proto

# By default we generate a Makefile and a Makefile.in. To generate
# only a Makefile or Makefile.in on standard output use one of the command
# line options.
MAKETARGET="both"

# display usage message
usage()
{
   cat<<ENDCAT
`basename $0`
   generates on standard output a Makefile for the compilation of the
   C code corresponding to a compiled specification.

usage:
`basename $0` [-h] [-i] [-m] <target>
   where 
      <target> is the name of the desired stand-alone executable program.
      -h       shows usage information
      -i       specifies that a Makefile.in should be generated on standard 
               output
      -m       specifies that a Makefile should be generated on standard 
               output
ENDCAT
}

# parse command line
if [ "a$1" != "a" ]
then
   case $1 in
      -h | -help ) usage ; exit 0 ;;
      -i         ) MAKETARGET="Makefile.in" ; shift ;;
      -m         ) MAKETARGET="Makefile" ; shift ;;
      -*         ) usage; exit 1
   esac
fi

if [ $# -ne 1 ]
then
   usage
   exit 1
fi

if [ $1 = "-h" -o $1 = "-help" ]
then
   usage
   exit 0
fi

if [ ! -r $1.module-list ]
then
   echo "Could not find module list \"$1.module-list\"" >&2
   exit 1
fi

#
# Create the configure-ready Makefile.in template in case  the '-m' command
# line options was not specified.
#
if [ "a$MAKETARGET" = "aMakefile.in" -o "a$MAKETARGET" = "aboth" ]
then
( cat <<HDR					
#
# Makefile.in for target "$1" 
# generated automagically on `date`
#
HDR
cat ${PROTO} |
	$PERL -pe "s|\@TARGET\@|$1|g"		|
	$PERL -pe 's|%!%([^@]+)%!%|\@$1\@|g'	
) |\
# When the '-i' command line option was specified we write the generated
# Makefile.in to standard output, otherwise we write to Makefile
if [  "a$MAKETARGET" = "aMakefile.in" ]
then
   cat
else
   cat > Makefile.in
fi
fi
 
# Create the instantiated Makefile unless the '-i' command line option was
# specified, by substituting configure's variables `manually'.
#
# Beware: to prevent perl from interfering (by interpolating configure
# variable values) the configure items must be quoted sans interpolation
# explicitly before substitution.
#
if [ "a$MAKETARGET" = "aMakefile" -o "a$MAKETARGET" = "aboth" ]
then
( cat <<HDR
#
# Makefile for target "$1" 
# generated automagically on `date`
#
HDR
cat ${PROTO} |
	$PERL -pe "s|\@TARGET\@|$1|g"		|
	$PERL -pe '
		$srcdir   = q{@srcdir@};
		$topsrc   = q{@top_srcdir@};
		$CC       = q{@CC@};
		$prefix   = q{@prefix@};
		$eprefix  = q{@exec_prefix@};
		$bindir   = q{@bindir@};
		$libdir   = q{@libdir@};
		$incdir   = q{@includedir@};
		$DEFS     = q{@DEFS@};
		$INCLUDES = q{@INCLUDES@};
		$LIBS     = q{@LIBS@};
		$SOCKLIBS = q{@SOCKLIBS@};
		$ATERM    = q{@ATERM@};
		$NEWMETA  = q{@NEW_META@};

		s|\@srcdir\@|$srcdir|g;
		s|\@top_srcdir\@|$topsrc|g;
		s|\@CC\@|$CC|g;
		s|\@prefix\@|$prefix|g;
		s|\@exec_prefix\@|$eprefix|g;
		s|\@bindir\@|$bindir|g;
		s|\@libdir\@|$libdir|g;
		s|\@includedir\@|$incdir|g;
		s|\@DEFS\@|$DEFS|g;
		s|\@INCLUDES\@|$INCLUDES|g;
		s|\@LIBS\@|$LIBS|g;
		s|\@SOCKLIBS\@|$SOCKLIBS|g;
		s|\@ATERM\@|$ATERM|g;
		s|\@NEW_META\@|$NEWMETA|g;'
) |\
# When the '-m' command line option was specified we write the generated
# Makefile.in to standard output, otherwise we write to Makefile
if [ "a$MAKETARGET" = "aMakefile" ]
then
   cat
else
   cat > Makefile
fi
fi

