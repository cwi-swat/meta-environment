%\documentclass[a4paper,twoside]{article}
\documentclass{llncs}
 
\usepackage{a4wide}
\usepackage{psfig}
\usepackage{times}

\newcommand{\ASmetaenv}{{\sc Asf}+{\sc Sdf} Meta-En\-vir\-on\-ment}
\newcommand{\metaenv}{Meta-En\-vir\-on\-ment}
\newcommand{\sdf}{{\sc Sdf}}
\newcommand{\asf}{{\sc Asf}}
\newcommand{\asfsdf}{{\sc Asf}+{\sc Sdf}}
\newcommand{\ATerm}{ATerm}
\newcommand{\ATerms}{ATerms}
\newcommand{\xemacs}{{\tt XEmacs}}                                                               

\title{The \ASmetaenv: a Component-Based Language Development Environment}
\author{M.G.J. van den Brand$^1$, A. van Deursen$^1$, J. Heering$^1$, H.A. de Jong$^1$, M. de Jonge$^1$, T. Kuipers$^1$, \\
P. Klint$^1$, L. Moonen$^1$, P.A. Olivier$^1$, Scheerder$^2$, J.J. Vinju$^1$, E. Visser$^3$, and J. Visser$^1$}

\institute{
        {\small\sl 
$^1$Centrum voor Wiskunde en Informatica (CWI),
Kruislaan 413, 1098 SJ Amsterdam, The Netherlands\\
$^2$ Faculty of Philosophy, Utrecht University,
     Heidelberglaan 8, 3584 CS Utrecht, The Netherlands\\
$^3$ Faculty of Mathematics and Computer Science, Utrecht University,
     Padualaan 14, 2584 CH Utrecht, The Netherlands\\
}}


 
\date{}
\begin{document}
\maketitle
 
\begin{abstract}
  The \ASmetaenv\ is an interactive development environment for the automatic
  generation of interactive systems for constructing language definitions and
  generating tools for them.  Over the years, this system has
  been used in a variety of academic and commercial projects ranging from
  formal program manipulation to conversion of COBOL systems.  Since the
  existing implementation of the \metaenv\ started exhibiting more and
  more characteristics of a legacy system, we decided to build a completely
  new, component-based, version. We demonstrate this new system and stress its
  open architecture.

\end{abstract}

\section{Introduction}

The \ASmetaenv\ \cite{Kli93} is an interactive development environment
for the automatic generation of interactive systems for constructing 
language definitions and generating tools for them.
A language definition typically includes such features as syntax,
prettyprinting, typechecking, and execution of programs in the target
language. The \ASmetaenv\ can help in the following cases:
 
\begin{itemize}
 
  \item You have to write a formal specification for some problem
  and you need interactive support for this.
 
  \item You are developing your own (application) language and want to
  create an interactive environment for it.
 
  \item You have programs in some existing programming language and you
   want to analyze or transform them.
\end{itemize}
 
The \asfsdf\ formalism \cite{BHK89} \cite{DHK96} allows the definition of syntactic as
well as semantic aspects. It can be used for the definition of languages
(for programming, writing specifications, querying databases,
text processing, or other applications). In addition it can be
used for the formal specification of a wide variety of problems. \asfsdf\
provides:

\begin{itemize}
 
  \item A general-purpose algebraic specification formalism based on (conditional)
term rewriting.
 
  \item Modular structuring of specifications.
 
  \item Integrated definition of lexical, context-free, and abstract syntax.
 
  \item User-defined syntax, allowing you to write specifications using your own notation.
 
  \item Complete integration of the definition of syntax, and semantics.
    
  \item Traversal functions (for writing very concise program
    transformations), memo functions (for caching repeated computations), and
    more.
 
\end{itemize}
 
The \ASmetaenv\ offers:
 
\begin{itemize}
 
  \item Syntax-directed editing of \asfsdf\ specifications.
 
  \item Incremental compilation and testing of specifications.
 
  \item Compilation of \asfsdf\ specifications into dedicated interactive stand-alone
    environments containing various tools such as a parser, prettyprinter,
    syntax-directed editor, debugger, and interpreter or compiler.

  \item User-defined extensions of the default user-interface.
\end{itemize}

The design goals of the new implementation to be demonstrated include: openness, reuse,
extensibility, and in particular the possibility to generate complete
stand-alone environments for user-defined languages.

\section{Technological background}

\paragraph{ToolBus}

A hallmark of legacy systems in general and the old \ASmetaenv\ in particular is the 
entangling of control flow and actual computation.  To separate coordination from 
computation we use the
ToolBus coordination architecture~\cite{BK98}, a programmable software bus based
on process algebra.  Coordination is expressed by a formal description of the
cooperation protocol between components while computation is expressed in
components that may be written in any language. We thus obtain 
interoperability of heterogeneous components in a (possibly) distributed
system.

\paragraph{ATerms}

Coordination protocol and components have to share data. We use
ATerms~\cite{BJKO00} for this purpose. These are trees with optional annotations on
each node.  The annotations are used to store tool-specific information
like text coordinates or color attributes. The implementation of ATerms
has two essential properties: terms are stored using maximal subterm
sharing (reducing memory requirements and making deep equality tests
very efficient) and they can be exchanged using a very dense binary encoding that
preserves sharing. As a result very large terms (with over $1,000,000$ nodes)
can be processed.

\paragraph{SGLR}

In our language-centric approach the parser is an essential tool.  We
use scannerless, generalized-LR parsing~\cite{Vis97}.  In this way we
can parse arbitrary context-free grammars, an essential property when
combining and parsing large grammars for (dialects of) real-world
languages.

\paragraph{Term rewriting}

\asfsdf\ specifications are executed as (conditional) rewrite rules. Both interpretation
and compilation (using the ASF2C compiler~\cite{BKO99}) of these
rewrite rules are supported. The compiler generates very efficient C
code that implements pattern matching and term traversal. The generated
code uses ATerms as its main data representation, and ensures a minimal
use of memory during normalization of terms.

\begin{figure}[t]
\centerline{\psfig{file=newarch.eps,width=8cm}}
\caption{\label{FIG:architecture}Architecture of the \ASmetaenv}
\vspace{-1.0\baselineskip}                  
\end{figure}

\section{Architecture}

The architecture of the \ASmetaenv\ is shown in Figure~\ref{FIG:architecture}.
It consists of a ToolBus that interconnects the following components:

\begin{itemize}
\item {\bf User interface}: the top level user-interface of the system.
      It consists primarily of a graph browser for the import graph
      of the current specification.

\item {\bf Text Editor}: a customized version of \xemacs\ for text editing.
\item {\bf Structure Editor}: a syntax-directed editor that closely cooperates
with the Text Editor.

\item {\bf Parser}:  scannerless, generalized-LR parser (SGLR) that is parametrized 
with a parse table.
\item {\bf Parsetable generator}: takes an SDF syntax definition as input and 
generates a parse table for SGLR.
\item {\bf Tree Repository}: stores all terms corresponding to specification 
modules, parse tables, user-defined terms, etc.
\item {\bf Compiler}: the ASF2C compiler.
\item {\bf Interpreter}: executes specifiations by direct interpretation.
\item {\bf Unparser generator}: generates prettyprinters.
\end{itemize}

\begin{figure}[t]
\centerline{\psfig{file=meta-pico.ps,width=10cm}}
\caption{\label{FIG:meta-pico}The main user-interface of the \metaenv\ is a module
browser that provides a graphical and a textual view of the modules in a
specification. A number of operations can be initiated for each module. Here it is
shown with the modules from a small specification of a typechecker for the toy
language Pico.}
\vspace{-1.0\baselineskip}                  
\end{figure} 

%%\begin{figure}[ht!]
%%
%%\centerline{\psfig{file=CobolEditor.ps,width=10cm}}
%%\caption{\label{FIG:edit-cobol}The hybrid structure and text editors generated by the
%%\metaenv\ allow selection of a part of the text that corresponds to a subtree of the
%%underlying abstract syntax tree as illustrated here for a COBOL program.}
%%
%%\end{figure} 

\section{Applications of \asfsdf\ and the \metaenv}

There are a number of academic and industrial projects that use 
either \asfsdf\ directly or components of the \metaenv\ in 
one way or another. 
c
The applications of \asfsdf\ can be split into three groups:
\begin{enumerate}
\item In the field of language prototyping \asfsdf\ has been used
to describe the syntax and semantics of {\em domain specific languages},
e.g., the language Risla for describing financial products
\cite{BDKKM96}.  As another example, the syntax of the algebraic
specification language {\sc Casl} has been prototyped using \asfsdf~\cite{BS00}.
{\sc Box} \cite{BV96} \cite{Jon00} is a small domain specific language
developed for prettyprinting within the \metaenv.

\item In the field of {\em reverse engineering and system renovation}, \asfsdf\
is used to analyze and transform COBOL legacy code \cite{BSV00}.

\item As an algebraic specification formalism for specifying 
{\em language processing tools}. 
In fact, a number of components of the \metaenv\ itself have been
specified using \asfsdf:

\begin{itemize}
\item the ASF2C compiler, 
\item the unparser generator, and
\item parts of the parsetable generator.
\end{itemize}

For other components, such as the ToolBus and the syntax-directed
editor, an \asfsdf\ specification was made for prototyping use only.
That specification formed the basis for an optimized, handcrafted
implementation.

\end{enumerate}

Components of the \metaenv\ are used as stand-alone tools in a variety
of applications. Examples are the Stratego compiler~\cite{VBT98},
the Risla compiler, the Elan environment~\cite{BR00}, and a commercial
tool for designing and implementing information systems.

\section{Demonstration}

We will show a number of applications of the \metaenv\ ranging
from a simple typechecking problem (Figure~\ref{FIG:meta-pico}) to
syntax-directed editing 
%%(Figure~\ref{FIG:edit-cobol}) 
and transformation
of COBOL systems.

\section{Obtaining the \ASmetaenv}

The \ASmetaenv\ can be downloaded from:
\[\mbox{\tt http://www.cwi.nl/projects/MetaEnv/completa/}\]
%%The \ASmetaenv\ depends on a number of (third-party) programs,
%%Graphviz (open source graph drawing software) and \xemacs\ among others.

Individual components, such as the \ATerm\ library, ToolBus, parser
generator, and parser (SGLR) can be obtained from:
${\tt http://www.cwi.nl/projects/MetaEnv/}$.

All components of the \ASmetaenv\ are available as open source software.

\bibliographystyle{plain}
\bibliography{etaps}  

\end{document}    
