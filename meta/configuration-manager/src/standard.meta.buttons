buttons([
  button("*",
         [description(tree-panel, click),
          description(message-list, click)],
         [show-area]),
  button("*",
         [description(feedback-list, click)],
         [show-feedback-location]),
   button("*",
	  [description(module-popup, menu(["Revert Module"]))],
	  [revert-module]),
   button("*",
	  [description(module-popup, menu(["Close Module"]))],
	  [ask-question("Do you want to recursively close the imported modules?"),
	   dup,
	   push-term(yes),
	   if-equal([pop,
		     close-module(recursive)], 
		    [push-term(no),
		     if-equal([close-module(top)],
		     [])])
	   ]),
   button("*",
	  [description(module-popup, menu(["Refactor", "Copy..."]))],
	  [prompt-for-file("Copy module to", "", ".sdf"),
	   dup,
	   push-string(""),
	   if-equal([],
	   [split-file-name(".sdf"),
	    copy-module])
	   ]),
   button("*",
	  [description(module-popup, menu(["Refactor", "Delete..."]))],
	  [ask-question("Are you sure you want delete this module (from disk)?"),
	   dup,
	   push-term(yes),
	   if-equal([pop,
		     delete-module], 
		    [])]),
   button("*",
	  [description(module-popup, menu(["Refactor", "Rename..."]))],
	  [prompt-for-file("Rename module to", "", ".sdf"),
	   dup,
	   push-string(""),
	   if-equal([],
	   [split-file-name(".sdf"),
	    rename-module])
	   ]),
   button("*",
	  [description(module-popup, menu(["Refactor", "Add Import..."]))],
	  [prompt-for-file("Import module", "", ".sdf"),
	   dup,
	   push-string(""),
	   if-equal([],
	   [split-file-name(".sdf"),
	    import-module])
	  ]),
   button("*",
	  [description(module-popup, menu(["Refactor", "Remove Import..."]))],
	  [prompt-for-file("Remove import", "", ".sdf"),
	   dup,
	   push-string(""),
	   if-equal([],
	   [split-file-name(".sdf"),
	    unimport-module])]),
   button("*",
	  [description(new-module-popup, menu(["Create this module"]))],
	  [create-module]),
   button("*",
	  [description(new-module-popup, menu(["Delete this module"]))],
	  [delete-module]),
   button("*",
	  [description(studio-menubar, menu(["File", "New Module"])),
	   description(studio-toolbar, icon("New Module", "empty-page.gif"))],
	  [prompt-for-file("New Module", "", ".sdf"),
	   dup,
	   push-string(""),
	   if-equal([],
	   [split-file-name(".sdf"),
	    new-module])]),
   button("*",
          [description(studio-menubar, menu(["File", "Open Module"])),
           description(studio-toolbar, icon("Open Module", "filled-page.gif"))],
	  [prompt-for-file("Open Module", "", ".sdf"),
	   dup, 
	   push-string(""),
	   if-equal([],
	   [split-file-name(".sdf"),
	    open-module])]),
   button("*",
	  [description(studio-menubar, menu(["File", "Read Term Store"]))],
	  [ask-question("Do you want to read the term store (from disk)?"),
	   push-term(yes),
	   if-equal([read-termstore,
                     message("Term-store read")],
		    [])]),
   button("*",
	  [description(studio-menubar, menu(["File", "Save Term Store"])),
	   description(studio-toolbar, icon("Save Term Store", "floppy.gif"))],
	  [save-termstore,
           message("Term-store saved")]),
   button("*",
	  [description(studio-menubar, menu(["File", "Close All"]))],
	  [clear-all]),
   button("*",
	  [description(studio-menubar, menu(["File", "Clear History"])),
	   description(studio-toolbar, icon("Clear History",
	                                    "eraser.gif"))],
	  [clear-history-list]),
   button("*",
	  [description(studio-menubar, menu(["File", "Refresh Buttons"]))],
	  [refresh-buttons]),
   button("*",
	  [description(studio-menubar, menu(["File", "Exit"])),
	   description(studio-toolbar, icon("Exit", "exit.gif"))],
	  [ask-question("Do you want to save the term store (to disk)?"),
	   dup,
	   push-term(yes),
	   if-equal([pop,
                     save-termstore,
		     exit], 
		    [push-term(no),
                     if-equal([exit],
                              [])])])
])
