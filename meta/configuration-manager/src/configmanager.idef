/*
    $Id$
*/        

#ifndef CONFIG_FILE
#define CONFIG_FILE "meta.conf"
#endif
#ifndef BUTTON_FILE
#define BUTTON_FILE "meta.buttons"
#endif
#ifndef ASF_LIBRARY_PATH
#define ASF_LIBRARY_PATH "."
#endif

process IfEqual(ButtonAction : term,
                Stack : list,
		ButtonActions : list,
                RStack : list?,
		RButtonActions : list?) is
let
  Tree1       : term,
  Tree2       : term,
  ThenActions : list,
  ElseActions : list,
  IStack      : list
in
  Tree1 := first(Stack) .
  IStack := next(Stack) .
  Tree2 := first(IStack) .
  IStack := next(IStack) .
  snd-msg(equal-trees(Tree1, Tree2)) .
  (
    rec-msg(true) .
    ThenActions := first(args(ButtonAction)) .
    RButtonActions := join(ThenActions, ButtonActions)
  +
    rec-msg(false) .
    ElseActions := first(next(args(ButtonAction))) .
    RButtonActions := join(ElseActions, ButtonActions)
  ) .
  RStack := IStack
endlet

process ProcessButtons(CMNG : configmanager) is
let
  Term          : term
in
  snd-msg(get-button-file(BUTTON_FILE)) .
  (
    rec-msg(button-file(BUTTON_FILE, Term?)) .
    snd-eval(CMNG, process-button-file(BUTTON_FILE, Term))
  +
    rec-msg(no-button-file(BUTTON_FILE)) .
    snd-eval(CMNG, process-button-file(BUTTON_FILE, "buttons([])"))
  ) .
  rec-value(CMNG, buttons-processed) .
  snd-note(search-paths-processed)
endlet
  
process PerformButtonActions(EditorId : term, Actions : list) is
let
  ButtonActions : list,
  ButtonAction  : term,
  FunName       : str,
  Stack         : list
in
  Stack := [] .
  ButtonActions := quote(Actions) .
  (
    if not-equal(ButtonActions, []) then
      ButtonAction := first(ButtonActions) .
      ButtonActions := next(ButtonActions) .
      FunName := fun(ButtonAction) .
      if equal(FunName, "if-equal") then
        IfEqual(ButtonAction, Stack, ButtonActions, Stack?, ButtonActions?)
      else
        snd-msg(ButtonAction, Stack, EditorId) .
        (
          rec-msg(stack(Stack?), EditorId)
        +
          rec-msg(error-stack, EditorId) .
          ButtonActions := []
        )
      fi
    fi
  )*
  if equal(ButtonActions, []) then
    tau
  fi
endlet

process ConfigManager is
let
  CMNG          : configmanager,
  Text          : str,
  Fid           : str,
  Paths         : list,
  ButtonName    : str,
  ButtonNames   : list,
  ButtonActions : list,
  ModuleName    : str,
  EditorType    : str,
  Tree          : term,
  EditorId      : term,
  Term          : term,
  Pid           : int,
  LibraryPath   : str
in
  execute(configmanager, CMNG?) .
  snd-msg(get-config-file(CONFIG_FILE)) .
  (
    rec-msg(config-file(CONFIG_FILE, Text?)) .
    snd-eval(CMNG, process-config-file(CONFIG_FILE, Text))
  +
    rec-msg(no-config-file(CONFIG_FILE)) .
    snd-eval(CMNG, process-config-file(CONFIG_FILE, "."))
  ) .
  rec-value(CMNG, search-paths(Paths?)) .
  snd-msg(library-location-hook).
  rec-msg(library-location-hook-result(LibraryPath?)).
  Paths := join(Paths, LibraryPath) .
  snd-msg(process-search-paths(CONFIG_FILE, Paths)) .
  rec-msg(search-paths-processed(CONFIG_FILE)) .
  ProcessButtons(CMNG) .
  snd-note(search-paths-processed) .
  (
    rec-msg(refresh-buttons) .
    ProcessButtons(CMNG) .
    snd-msg(buttons-refreshed)
  +
    rec-msg(get-auxilary-buttons(EditorType?, ModuleName?)) .
    snd-eval(CMNG, get-button-names(EditorType, ModuleName)) .
    rec-value(CMNG, button-names(ButtonNames?)) .
    snd-msg(button-list(ModuleName, ButtonNames))
  +
    rec-msg(extra-button-action(ButtonName?, EditorType?, ModuleName?, EditorId?)) .
    snd-eval(CMNG, get-button-actions(ButtonName, EditorType, ModuleName)) .
    rec-value(CMNG, button-actions(ButtonActions?)) .
    printf("button actions for <%t,%t,%t,%t> are %t\n",ButtonName,EditorType,ModuleName,EditorId,ButtonActions).
    create(PerformButtonActions(EditorId, ButtonActions), Pid?)
  ) * delta
endlet

tool configmanager is { command = "configmanager" }
