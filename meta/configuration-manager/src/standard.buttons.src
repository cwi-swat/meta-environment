buttons([
  button("*",
         [description(message-list, menu(["Show Source"]))],
         [show-area]),
  button("*",
         [description(syntax-editor, menu(["Actions", "Parse"]))],
         [push-active-module, 
	  parse-syntax-action]),
  button("*",
         [description(equations-editor, menu(["Actions", "Parse"]))],
         [push-active-module, 
	  parse-equations-action]),
  button("*",
         [description(term-editor, menu(["Actions","Parse"]))],
         [push-active-module,
	  parse-action]),
  button("*",
         [description(term-editor, menu(["Actions","Reduce"]))],
         [push-active-module,
          get-root,
          push-active-module,
          reduce,
	  push-filename("reduct.out"),
	  push-active-module,
	  close-editor,
          push-filename("reduct.out"),
          push-active-module,
          activate-editor
         ]),
  button("*",
         [description(syntax-editor, menu(["Actions", "ViewTree"])),
          description(equations-editor, menu(["Actions", "ViewTree"])),
	  description(term-editor, menu(["Actions", "ViewTree"]))],
         [push-active-module,
          get-focus, 
	  show-tree]),
  button("*",
         [description(syntax-editor, menu(["Move", "Left"])),
          description(equations-editor, menu(["Move", "Left"])),
          description(term-editor, menu(["Move", "Left"]))],
         [move-left]),
  button("*",
         [description(syntax-editor, menu(["Move", "Right"])),
          description(equations-editor, menu(["Move", "Right"])),
          description(term-editor, menu(["Move", "Right"]))],
         [move-right]),
  button("*",
         [description(syntax-editor, menu(["Move", "Up"])),
          description(equations-editor, menu(["Move", "Up"])),
          description(term-editor, menu(["Move", "Up"]))],
         [move-up]),
  button("*",
         [description(syntax-editor, menu(["Move", "Down"])),
          description(equations-editor, menu(["Move", "Down"])),
          description(term-editor, menu(["Move", "Down"]))],
         [move-down]),
  button("*",
	 [description(module-popup, menu(["Edit Syntax"]))],
	 [edit-syntax]),
   button("*",
	  [description(module-popup, menu(["Edit Equations"]))],
	  [edit-equations]),
   button("*",
	  [description(module-popup, menu(["Edit Term"]))],
	  [prompt-for-file("Edit Term", "", ".trm"),
	   dup,
	   push-string(""),
	   if-equal([],
	   [edit-term])]),
   button("*",
	  [description(module-popup, menu(["Revert Module"]))],
	  [revert-module]),
   button("*",
	  [description(module-popup, menu(["Close Module"]))],
	  [ask-question("Do you want to recursively close the imported modules?"),
	   dup,
	   push-term(yes),
	   if-equal([pop,
		     close-module(recursive)], 
		    [push-term(no),
		     if-equal([close-module(top)],
		     [])])
	   ]),
   button("*",
	  [description(module-popup, menu(["Refactor", "Copy..."]))],
	  [prompt-for-file("Copy module to", "", ".sdf"),
	   dup,
	   push-string(""),
	   if-equal([],
	   [split-file-name(".sdf"),
	    copy-module])
	   ]),
   button("*",
	  [description(module-popup, menu(["Refactor", "Delete..."]))],
	  [ask-question("Are you sure you want delete this module (from disk)?"),
	   dup,
	   push-term(yes),
	   if-equal([pop,
		     delete-module], 
		    [])]),
   button("*",
	  [description(module-popup, menu(["Refactor", "Rename..."]))],
	  [prompt-for-file("Rename module to", "", ".sdf"),
	   dup,
	   push-string(""),
	   if-equal([],
	   [split-file-name(".sdf"),
	    rename-module])
	   ]),
   button("*",
	  [description(module-popup, menu(["Refactor", "Add Import..."]))],
	  [prompt-for-file("Import module", "", ".sdf"),
	   dup,
	   push-string(""),
	   if-equal([],
	   [split-file-name(".sdf"),
	    import-module])
	  ]),
   button("*",
	  [description(module-popup, menu(["Refactor", "Remove Import..."]))],
	  [prompt-for-file("Remove import", "", ".sdf"),
	   dup,
	   push-string(""),
	   if-equal([],
	   [split-file-name(".sdf"),
	    unimport-module])]),
   button("*",
	  [description(module-popup, menu(["Export","Dump Module"]))],
	  [dump-module]),
   button("*",
	  [description(module-popup, menu(["Export","Dump Equations"]))],
	  [dump-equations]),
   button("*",
	  [description(module-popup, menu(["Export","Dump Term ParseTable"]))],
	  [dump-parse-table]),
   button("*",
	  [description(module-popup, menu(["Export","Dump Equations ParseTable"]))],
	  [dump-eqs-parse-table]),
   button("*",
	  [description(module-popup, menu(["Export","Print Module"]))],
	  [print-module]),
   button("*",
	  [description(module-popup, menu(["Export","Compile Module"]))],
	  [compile-module]),
   button("*",
	  [description(new-module-popup, menu(["Create this module"]))],
	  [create-module]),
   button("*",
	  [description(new-module-popup, menu(["Delete this module"]))],
	  [delete-module]),
   button("*",
	  [description(studio-menubar, menu(["File", "New Module"])),
	   description(studio-toolbar, icon("New Module", "empty-page.gif"))],
	  [prompt-for-file("New Module", "", ".sdf"),
	   dup,
	   push-string(""),
	   if-equal([],
	   [split-file-name(".sdf"),
	    new-module])]),
   button("*",
          [description(studio-menubar, menu(["File", "Open Module"])),
           description(studio-toolbar, icon("Open Module", "filled-page.gif"))],
	  [prompt-for-file("Open Module", "", ".sdf"),
	   dup, 
	   push-string(""),
	   if-equal([],
	   [split-file-name(".sdf"),
	    open-module])]),
   button("*",
	  [description(studio-menubar, menu(["File", "Open Library Module"])),
           description(studio-toolbar, icon("Open Library Module",
	                                    "present.gif"))],
	  [prompt-for-file("Open LibraryModule", "__ASF_LIBRARY__", ".sdf"),
	   dup,
	   push-string(""),
	   if-equal([],
	   [split-file-name(".sdf"),
	    open-module])]),
   button("*",
	  [description(studio-menubar, menu(["File", "Save Term Store"])),
	   description(studio-toolbar, icon("Save Term Store", "floppy.gif"))],
	  [save-all]),
   button("*",
	  [description(studio-menubar, menu(["File", "Close All"]))],
	  [clear-all]),
   button("*",
	  [description(studio-menubar, menu(["File", "Clear History"])),
	   description(studio-toolbar, icon("Clear History",
	                                    "eraser.gif"))],
	  [clear-history-list]),
   button("*",
	  [description(studio-menubar, menu(["File", "Refresh Buttons"]))],
	  [refresh-buttons]),
   button("*",
	  [description(studio-menubar, menu(["File", "Exit"])),
	   description(studio-toolbar, icon("Exit", "exit.gif"))],
	  [ask-question("Do you want to save the term store (to disk)?"),
	   dup,
	   push-term(yes),
	   if-equal([save-all,
		     exit], 
		    [exit])])
])
