#! /bin/sh

Revision='$Revision$'

bindir=__BINDIR__
datadir=__DATADIR__

RM=rm
ACTIONTBL=${datadir}/ActionScriptChecker.trm.tbl
PRETTYTBL=${datadir}/ActionScript.def.pt
PARSER="__SGLR__/bin/sglr -p ${ACTIONTBL}"
CHECKER="__BINDIR__/ActionScriptChecker"
PRETTYPRINTER="__PTPRETTY__/bin/ptpretty"
UNPARSER="__PT_SUPPORT__/bin/unparsePT"

verbose=0;
error=0;

###
#  Handle the command line, &c.
###

myname=`basename $0`
myversion=`echo $Revision| cut -d' ' -f2`

# The argument vector: list of option letters, colons denote option
# arguments.  See Usage function, immediately below, for option
# explanation.
myarguments="hi:o:vV"

# Usage: displays helpful usage information
Usage() {
cat << E_O_USAGE >&2
Usage: $myname [options]
Options:
    -h              display help information (usage)
    -i _file_       input from _file_ (default: all file arguments)
    -o _file_       output to _file_ (default: _inputfile_.tbl)
    -v              verbose mode
    -V              reveal program version (i.e. $myversion)
E_O_USAGE
}

Version() {
    echo "$myname v$myversion" >&2
}

# getopt handles command line...
args=`getopt $myarguments $* 2> /dev/null`
if test $? != 0
then
        Usage
        exit 2
fi
set -- $args

# Argument interpretation...
while [ $#  -gt 0 ]
do
    case "$1"
    in
        -h)
            Usage ; exit 0 ;;
        -i)
            shift ; input=$1 ;;
        -o)
            shift ; output=$1 ;;
        -v)
            verbose=1 ; VERBOSE="$1"; PGOPTS="$PGOPTS $1";;
        -V)
            Version ; exit 0 ;;
        --)
            ;;
    *)
            input = "-" ;;
    esac
    shift
done


###
#  Get to the real work now...
###


Warn () {
	echo $*                                   	>&2
}

Error () {
	Warn $*
	error=1
}

Notify () {
	if [ $verbose -gt 0 ] ; then
		Warn $*
	fi
}


#
## Main bit...
#

afinput=${TMPDIR:-/var/tmp}/$input.$$.asfix
afoutput=${TMPDIR:-/var/tmp}/$input.$$.reduct

Notify "Parsing $input..."
if $PARSER $VERBOSE -i $input -o $afinput
then
$CHECKER -i $afinput -o $afoutput
$PRETTYPRINTER -s ${PRETTYTBL} -i $afoutput |
$UNPARSER -o $output
${RM} -f $afinput $afoutput
else
Warn "Error parsing $input (see $afinput)"
error=1
fi

exit $error;
