#! /bin/sh
#
#   Meta-Environment - An environment for language prototyping.
#   Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, The Netherlands. 
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
#
#   $Id$

Revision='$Revision$'

bindir=__BINDIR__
PERL=__PERL__

PATH="$bindir:$PATH"

verbose=0
Out=""

###
#  Handle the command line, &c.
###

myname=`basename $0`
myversion=`echo $Revision| cut -d' ' -f2`

# The argument vector: list of option letters, colons denote option
# arguments.  See Usage function, immediately below, for option
# explanation.
myarguments="bhi:lo:pstvV"

# Usage: displays helpful usage information
Usage() {
cat << E_O_USAGE >&2
Usage: $myname [options]
Options:
    -b              [ignored]
    -h              display help information (usage)
    -i _file_       input from _file_ (default: all file arguments)
    -l              Landscape mode, A4-sized canvas
    -o _file_       output to _file_ (default: _inputfile_.ps)
    -p              Portrait mode, A4-sized canvas with printer margins
    -s              Portrait mode, A4-sized canvas
    -t              [ignored]
    -v              verbose mode
    -V              reveal program version (i.e. $myversion)
E_O_USAGE
}

Version() {
    echo "$myname v$myversion" >&2
}

# getopt handles command line...
args=`getopt $myarguments $* 2> /dev/null`
if test $? != 0
then
        Usage
        exit 2
fi
set -- $args


# Argument interpretation...
while [ $#  -gt 0 ]
do
    case "$1"
    in
	-b)
	    ;;
        -h)
            Usage ; exit 0 ;;
        -i)
            shift; Files="$Files $1" ;;
        -l)
	    EXTRAS="$EXTRAS -Gsize=11,8 -Grotate=90" ;;
        -o)
            shift; Out=$1 ;;
        -p)
	    EXTRAS="$EXTRAS -Gpage=8,11.8 -Gmargin=.25,.25" ;;
        -s)
	    EXTRAS="$EXTRAS -Gsize=8,11.8" ;;
	-t)
	    ;;
        -v)
            verbose=1 ;;
        -V)
            Version ; exit 0 ;;
        --)
            ;;
    # Add additional command line options here...
    *)
            Files="$Files $1" ;;
    esac
    shift
done


###
#  Get to the real work now...
###


Warn () {
	echo $*                                   	>&2
}

Error () {
	Warn $*
	error=1
}

Abort () {
	Error $*
	exit 2
}

Notify () {
	if [ $verbose -gt 0 ] ; then
		Warn $*
	fi
}


#
## Main bit...
#

#EXTRAS="$EXTRAS -Gconcentrate=true"
DOTCMD="dot -Tps							\
	  -Granksep=.36 $EXTRAS						\
	  -Gcenter=true -Gratio=auto 					\
	  -Nshape=plaintext -Nfontname=Helvetica-Bold			\
	  -Nfontsize=10 -Nheight=.25"

for f in $Files
do
	o=${Out:-`dirname $f`/`basename $f .dot`.ps}
	# PS interprets '\' too, but dot doesn't escape them
	# Note: because '\' is the dot escape too, it occurs as `\\'
	${PERL} -p -e 's#\\\\#\\\\\\\\$1#g;' < $f			|
	${DOTCMD}							> $o
done
