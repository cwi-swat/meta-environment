#! /bin/sh
#   $Id$

Revision='$Revision$'

bindir=__BINDIR__
datadir=__DATADIR__
pgen=__PGEN__

PATH="$bindir:$PATH"

TABLE="${pgen}/share/pgen/Sdf2.baf"
PARSE="sglr -p $TABLE"

XOPTS=""
DOTOUT=0

verbose=0
bafmode=1


###
#  Handle the command line, &c.
###

myname=`basename $0`
myversion=`echo $Revision| cut -d' ' -f2`

# The argument vector: list of option letters, colons denote option
# arguments.  See Usage function, immediately below, for option
# explanation.
myarguments="2bdi:hlmno:tvVx"

# Usage: displays helpful usage information
Usage() {
cat << E_O_USAGE >&2
Usage: $myname [options]
Options:
        -2       : use AsFix2 output format             [off]
        -b       : use Binary AsFix (BAF) output format [on]
        -d       : run in debugging mode                [off]
        -h       : display usage information
        -i file  : input from |file|                    [-]
        -l       : log statistics to file               [off]
        -m       : use AsFix2ME output format           [on]
        -n       : don't write tree output              [off]
        -o file  : output to |file|                     [-]
        -t       : use PlainText AsFix output format    [off]
        -v       : run in verbose mode                  [off]
        -V       : reveal program version (i.e. $myversion)
        -x       : suppress lexicals in dot output      [off]
E_O_USAGE
}

Version() {
    echo "$myname v$myversion" >&2
}

# getopt handles command line...
args=`getopt $myarguments $* 2> /dev/null`
if test $? != 0
then
        Usage
        exit 2
fi
set -- $args

# Argument interpretation...
while [ $#  -gt 0 ]
do
    case "$1"
    in
        -2)
            XOPTS="$XOPTS $1" ;;
	-b)
	    bafmode=1 ;;
        -d|-l)
            XOPTS="$XOPTS $1" ;;
        -i)
	    Files="$2 $Files"; shift ;;
        -h)
            Usage ; exit 0 ;;
        -l)
            XOPTS="$XOPTS $1" ;;
        -m)
            XOPTS="$XOPTS $1" ;;
        -n)
	    XOPTS="$XOPTS $1" ;;
        -o)
	    NAMEDOUTPUT=$2; shift
	    XOPTS="$XOPTS $1 $NAMEDOUTPUT" ;;
	-t)
	    bafmode=0 ;;
        -v*)
            verbose=1
	    XOPTS="$XOPTS $1" ;;
        -V)
            Version ; exit 0 ;;
        -x)
            XOPTS="$XOPTS $1" ;;
        --)
            ;;
	*)
            Files="$Files $1" ;;
    esac
    shift
done

if [ $bafmode -eq 0 ] ; then
	XOPTS="-t $XOPTS"
fi


###
#  Get to the real work now...
###


Warn () {
	echo $*                                   	>&2
}

Error () {
	Warn $*
	error=1
}

Abort () {
	Error $*
	exit 2
}

Notify () {
	if [ $verbose -gt 0 ] ; then
		Warn $*
	fi
}


#
## Main bit...
#

if [ -z "$Files" ] ; then
	Files="-"
fi

for f in $Files
do
	if [ "$f" = "-" ] ; then
	        if [ $DOTOUT -gt 0 ] ; then
		        dotout="-Dstdout.dot"
	        else
		        dotout=""
	        fi
		out2=${NAMEDOUTPUT:-"-"}
	else
	        dir=`dirname $f`
	        base=`basename $f .sdf`
	        base=`basename $f .sdf2`
	        if [ $DOTOUT -gt 0 ] ; then
		        dotout="-D$dir/$base.dot"
	        else
		        dotout=""
	        fi
		out2=${NAMEDOUTPUT:-"$dir/$base.asfix2"}
	fi
	if $PARSE -i $f -o $out2 $XOPTS $dotout
	then
		:
	else
		echo "Parse error!"		>&2
		exit 1
	fi
done
