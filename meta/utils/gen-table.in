#! /bin/sh
#
#    Meta-Environment - An environment for language prototyping.
#    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, The Netherlands. 
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
#
# $Id$

prefix=@prefix@
exec_prefix=@exec_prefix@
bindir=@bindir@
libdir=@libdir@

PATH="$PATH:$bindir"

TMP=/tmp/`basename $0`.$$	# Junk files
trap "rm -f $TMP*" 0 1 2 15	# Clean up afterwards

PGEN="${bindir}/parsetablegen"
A2TOA1="${bindir}/a2toa1"
EXTENSIONS=".sdf .sdf2"

fastgen=1;	# Which parse table generator to use
bafmode=1;
verbose=0;

###
#  Handle the command line, &c.
###

myname=`basename $0`

# removed by HDJ .. appears to be broken?
# myversion=`echo $Revision| cut -d' ' -f2`
myversion="0.1"

# The argument vector: list of option letters, colons denote option
# arguments.  See Usage function, immediately below, for option
# explanation.
myarguments="bfhi:o:stvV"

# Usage: displays helpful usage information
Usage() {
cat << E_O_USAGE >&2
Usage: $myname [options]
Options:
    -b              write output in Binary ATerm Format (BAF)
    -f              use handcrafted normalizer ('fast')
    -h              display help information (usage)
    -i _file_       input from _file_ (default: all file arguments)
    -o _file_       output to _file_ (default: _inputfile_.tbl)
    -s              use compiled specification ('slow')
    -t              write output in plain text format
    -v              verbose mode
    -V              reveal program version (i.e. $myversion)
E_O_USAGE
}

Version() {
    echo "$myname v$myversion" >&2
}

# getopt handles command line...
args=`getopt $myarguments $* 2> /dev/null`
if test $? != 0
then
        Usage
        exit 2
fi
set -- $args

# Argument interpretation...
while [ $#  -gt 0 ]
do
    case "$1"
    in
	-b)
	    bafmode=1 ;;
        -f)
            fastgen=1 ;;
        -h)
            Usage ; exit 0 ;;
        -i)
            shift ; Files="$Files $1" ;;
        -o)
            shift ; output=$1 ;;
        -s)
            fastgen=0 ;;
	-t)
	    bafmode=0 ;;
        -v)
            verbose=1 ;;
        -V)
            Version ; exit 0 ;;
        --)
            ;;
    # Add additional command line options here...
    *)
            Files="$Files $1" ;;
    esac
    shift
done


###
#  Get to the real work now...
###


Warn () {
	echo $*                                   	>&2
}

Error () {
	Warn $*
	error=1
}

Abort () {
	Error $*
	exit 2
}

Notify () {
	if [ $verbose -gt 0 ] ; then
		Warn $*
	fi
}


#
## Main bit...
#

if [ $bafmode -eq 0 ] ; then
	PGEN="$PGEN -t"
else
	PGEN="$PGEN -b"
fi

case $fastgen in
	0)
		# Slow generation
		TABLEGEN="${PGEN} -s" ;;
	*)
		# Fast generation: ksdf2table handles *everything*
		TABLEGEN="${PGEN}" ;;
esac

if [ -z "$Files" ] ; then
	Files="-"
fi

for f in $Files
do
	if [ "$f" = "-" ] ; then
		# Assume stdin is AsFix1...
		file="-"
	        out=${output:-"-"}
	        err=${TMPDIR:-/var/tmp}/stdin.$$.pgen.err
	else
	        # Convert to AsFix1, if necessary
	        dir=`dirname $f`
	        case $f in
	        	*.asfix2)
			        file=`basename $f .asfix2`
			        Notify "Converting Asfix2 file $f to AsFix1 file $dir/$file.asfix1"
			        file=$dir/$file.asfix1
			        err=$dir/$file.a2toa1.err
			        if $A2TOA1 < $f > $file 2> $err;
			        then
				        rm -f $err
			        else
				        if [ -f $file -a ! -s $file ] ; then rm -f $file; fi
				        echo "a2toa1: error (see $err)"
				        exit 1
			        fi
			        ;;
			*.asfix1)
			        file=`basename $f .asfix1`
			        ;;
			*.asfix)
			        file=`basename $f .asfix`
			        ;;
			*)
			        echo "$f: input must be AsFix1 or AsFix2" 1>&2
			        continue
			        ;;
	        esac
	        for ext in $EXTENSIONS
	        do
		        file=`basename $file $ext`
	        done
	        out=${output:-$dir/$file.tbl}
	        err=$dir/$file.pgen.err
	fi

	Notify "Generating parse table for $f..."
	if $TABLEGEN -i $f -o $out 2> $err
	then
		rm -f $err
	else
		if [ -f $out -a ! -s $out ]; then rm -f $out; fi
		echo "TableGen: error (see $err)"
		exit 2
	fi

	if [ "$out" != "-" ] ; then
		Notify "Parse table:"
		Notify `ls -l $out`
	fi
done
