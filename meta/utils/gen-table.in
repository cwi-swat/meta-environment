#! @SHELL@
# $Id$

prefix=@prefix@
exec_prefix=@exec_prefix@
bindir=@bindir@
libdir=@libdir@

PATH="$PATH:$bindir"

TMP=/tmp/`basename $0`.$$	# Junk files
trap "rm -f $TMP*" 0 1 2 15	# Clean up afterwards

PGEN="${bindir}/ParseTable-Generator -silent"
TABLEGEN="${bindir}/ksdf2table"
A2TOA1="${bindir}/a2toa1 -silent"
ASOURCE="${bindir}/asource -silent"
ADDPTFUNC="${bindir}/add-pt-func -silent"
TRM2BAF="${bindir}/trm2baf"
EXTENSIONS=".sdf .sdf2"

FASTGEN=1;	# Which parse table generator to use
VERBOSE=0;

Notify () {
        if [ $VERBOSE -gt 0 ]
        then
                echo $*                                   >&2
        fi
}


while [ $# -gt 0 ]	# Handle command line options
do
	case $1 in
		-v*)
			VERBOSE=1 ;;
		-f*)
			FASTGEN=1 ;;
		-s*)
			FASTGEN=0 ;;
		-*)
			echo Unknown option ignored: $1 ;;
		*)
			Files="$Files $1" ;;
	esac
	shift
done

case $FASTGEN in
	0)
		# Slow generation: skip ksdf2table
		TABLEGEN="cat -u" ;;
	*)
		# Fast generation: ksdf2table handles *everything*
		ADDPTFUNC="cat -u"
		PGEN="cat -u" ;;
esac

for f in $Files
do
	# Convert to AsFix1, if necessary
	dir=`dirname $f`
	case $f in
	*.asfix2)
			file=`basename $f .asfix2`
			Notify "Converting Asfix2 file $f to AsFix1 file $dir/$file.asfix1"
			out=$dir/$file.asfix1
			err=$dir/$file.a2toa1.err
			if $A2TOA1 < $f > $out 2> $err;
			then
				rm -f $err
			else
				if [ -f $out -a ! -s $out ]; then rm -f $out; fi
				echo "a2toa1: error (see $err)"
				exit 1
			fi
			f=$out
			;;
	*.asfix1)
			file=`basename $f .asfix1`
			;;
	*.asfix)
			file=`basename $f .asfix`
			;;
	*)
			echo "$f: input must be AsFix1 or AsFix2" 1>&2
			continue
			;;
	esac
	for ext in $EXTENSIONS
	do
		file=`basename $file $ext`
	done

	Notify "Adding parse-table function and generating parse table for $f..."
	if [ $FASTGEN -eq 0 ] ; then
		out=$TMP.asrc
	else
		out=$dir/$file.tbl
	fi
	err=$dir/$file.pgen.err
	if $ADDPTFUNC < $f | $PGEN | $TABLEGEN > $out 2> $err
	then
		rm -f $err
	else
		if [ -f $out -a ! -s $out ]; then rm -f $out; fi
		echo "TableGen: error (see $err)"
		exit 2
	fi

	if [ $FASTGEN -eq 0 ] ; then
	        Notify "Running asource..."
	        in=$out
	        out=$dir/$file.tbl
	        err=$dir/$file.asource.err
	        if $ASOURCE $TERMTABLE < $in 2> $err | $TRM2BAF > $out  2>> $err
	        then
		        rm -f $err
	        else
		        if [ -f $out -a ! -s $out ]; then rm -f $out; fi
		        echo "asource: error (see $err)"
		        exit 3
	        fi
	fi

	Notify "Parse table (trm format):"
	Notify `ls -l $out`
done
