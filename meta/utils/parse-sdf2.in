#! @SHELL@
# $Id$
Revision='$Revision$'

prefix=@prefix@
exec_prefix=@exec_prefix@
bindir=@bindir@
libdir=@libdir@
datadir=@datadir@

PATH="$PATH:$bindir"

A2TOA1="${bindir}/a2toa1 -silent"
CONVERT=0
TABLE="${datadir}/Sdf2.baf"
PARSE="${bindir}/sglr -p $TABLE"
OPTS=""
DOTOUT=0

verbose=0
bafmode=1


###
#  Handle the command line, &c.
###

myname=`basename $0`
myversion=`echo $Revision| cut -d' ' -f2`

# The argument vector: list of option letters, colons denote option
# arguments.  See Usage function, immediately below, for option
# explanation.
myarguments="12bdDi:hlo:tvVx"

if [ $myarguments ] ; then
   arg2explanation='s/\(.:\)/ -\1 /g; s/ \([^-:]\)/ -\1/g; s/:/ file/g';
   myargsexplained=" -`echo $myarguments|sed -e \"$arg2explanation\"`"
fi

# Usage: displays helpful usage information
Usage() {
cat << E_O_USAGE >&2
Usage: $myname$myargsexplained . . .
Options:
        -1       : use AsFix1 output format             [off]
        -2       : use AsFix2 output format             [on]
        -b       : use Binary AsFix (BAF) output format [on]
        -d       : run in debugging mode                [off]
        -D       : generate dot output for parse tree   [<off>]
        -i file  : input from |file|                    [-]
        -l       : log statistics to file               [off]
        -o file  : output to |file|                     [-]
        -t       : use PlainText AsFix output format    [off]
        -v       : run in verbose mode                  [off]
        -V       : reveal program version (i.e. $myversion)
        -x       : suppress lexicals in dot output      [off]
E_O_USAGE
}

Version() {
    echo "$myname v$myversion" >&2
}

# getopt handles command line...
args=`getopt $myarguments $* 2> /dev/null`
if test $? != 0
then
        Usage
        exit 2
fi
set -- $args

# Argument interpretation...
while [ $#  -gt 0 ]
do
    case "$1"
    in
        -1)
            CONVERT=1 ;;
        -2)
            CONVERT=0 ;;
	-b)
	    bafmode=1 ;;
        -d|-l)
            OPTS="$OPTS $1" ;;
        -D)
            DOTOUT=1; dotout="-Dstdin.dot" ;;
        -i)
	    Files="$2 $Files"; shift ;;
        -h)
            Usage ;;
        -o)
	    NAMEDOUTPUT=$2; shift
	    OPTS="$OPTS $1 $NAMEDOUTPUT" ;;
	-t)
	    bafmode=0 ;;
        -v*)
            verbose=1
	    OPTS="$OPTS $1" ;;
        -V)
            Version ;;
        -x)
            OPTS="$OPTS $1" ;;
        --)
            ;;
	*)
            Files="$Files $1" ;;
    esac
    shift
done

if [ $bafmode -eq 0 ] ; then
	OPTS="-t $OPTS"
fi


###
#  Get to the real work now...
###


Warn () {
	echo $*                                   	>&2
}

Error () {
	Warn $*
	error=1
}

Abort () {
	Error $*
	exit 2
}

Notify () {
	if [ $verbose -gt 0 ] ; then
		Warn $*
	fi
}


#
## Main bit...
#

if [ -z "$Files" ] ; then
	$PARSE $OPTS "$dotout" -
	exit $?
fi


for f in $Files
do
	dir=`dirname $f`
	base=`basename $f .sdf`
	base=`basename $f .sdf2`
	if [ $DOTOUT -gt 0 ] ; then
		dotout="-D$dir/$base.dot"
	else
		dotout=""
	fi
	out2=${NAMEDOUTPUT:-"$dir/$base.asfix2"}
	if $PARSE -i $f -o $out2 $OPTS $dotout
	then
		if [ $CONVERT -eq 1 ]
		then
			out1=${NAMEDOUTPUT:-"$dir/$base.asfix1"}
			if [ $out2 = $out1 ]
			then	# Move away $out2
				mv $out2 $out2.tmp
				out2=$out2.tmp
			fi
			$A2TOA1 < $out2 > $out1
			rm -f $out2
		fi
	else
		echo "Parse error!"		>&2
		exit 1
	fi
done
