#! @SHELL@
# $Id$

prefix=@prefix@
exec_prefix=@exec_prefix@
bindir=@bindir@
libdir=@libdir@
datadir=@datadir@

PATH="$PATH:$bindir"

PARSE="${bindir}/sglr"
A2TOA1="${bindir}/a2toa1 -silent"
TABLES="${datadir}"
LANGTYPEDIR="${datadir}"
LANGTYPEFILE="lang.types"
PROG=`basename $0`
CONVERT=0
XOPTS=""

Notify () {
	echo $* >&2
}

Warning () {
	Notify "Warning: $*"
}

Error () {
	Notify "Error: $*"
	exit 1
}

Usage () {
	Notify "Usage: $PROG [-1|-2|-o file|-d|-l|-v] file1 ..."
}


case $#
in
	0)
		Usage
		exit ;;
	*)
		while [ $# -gt 0 ]	# Handle command line options
		do
			case $1
			in
				-1)
					CONVERT=1 ;;
				-2)
					CONVERT=0 ;;
				-o)
					if [ -d $2 ] ; then
						OUTPUTDIR=$2
					else
						OUTPUTFILE=$2
					fi
					shift ;;
				-d*|-l*|-v*|-n*)
					XOPTS="$XOPTS $1" ;;
				-*)
					echo Unknown option ignored: $1 ;;
				*)
					Files="$Files $1" ;;
			esac
			shift
		done ;;
esac

if [ ! -s $HOME/.$LANGTYPEFILE -a ! -s $LANGTYPEDIR/$LANGTYPEFILE ] ; then
	Error "$LANGTYPES missing or empty"
	exit 1;
fi

for f in $Files
do
	dir=${OUTPUTDIR:-`dirname $f`}
	base=`basename $f`
	ext=`echo $base | sed 's/.*\.\([^.]*\)/\1/'`
	if [ $ext = $base ] ; then ext=""; fi
	# More heuristics on file type determination could be added...
	if [ -z $ext ] ; then
		Warning "could not identify $base, skipping it"
		continue
	fi
	base=`basename $base .$ext`
	lang=""
	if [ -s $HOME/.$LANGTYPEFILE ] ; then
		lang=`egrep "^$ext( |	)" $HOME/.$LANGTYPEFILE | cut -f2`
	fi
	if [ -z $lang ] ; then
		lang=`egrep "^$ext( |	)" $LANGTYPEDIR/$LANGTYPEFILE | cut -f2`
		if [ -z $lang ] ; then
			Warning "no language available for *.$ext-files, skipping $base"
			continue
		fi
	fi
	table=$TABLES/$lang.baf
	if [ ! -s $table ] ; then
		table=$TABLES/$lang.tbl
	fi
	if [ ! -s $table ] ; then
		Warning "no parse table for language $lang, skipping $base.$ext"
		continue
	fi

	out2=${OUTPUTFILE:-"$dir/$base.asfix2"}
	if $PARSE $XOPTS -p $table -i $f -o $out2
	then
		if [ $CONVERT -eq 1 -a -s $out2 ]
		then
			out1=${OUTPUTFILE:-"$dir/$base.asfix1"}
			if [ $out2 = $out1 ]
			then	# Move away $out2
				mv $out2 $out2.tmp
				out2=$out2.tmp
			fi
			$A2TOA1 < $out2 > $out1
			rm -f $out2
		fi
	else
		Warning "parse error in $base.$ext"
	fi
done
