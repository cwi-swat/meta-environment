/*

    Meta-Environment - An environment for language prototyping.
    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, 
                        The Netherlands. 

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

*/
/*
 * $Id$
 */

process Io is
let
  IO        : in-output,
  Asfix     : term,
  Name      : str,
  Path      : str,
  SdfPath   : str,
  T         : term,
  Text      : str,
  EqsTree   : term,
  EqsText   : str,
  FileName  : str,
  Contents  : term,
  Time      : int,
  TimeStamp : term,
  TableType : term,
  Table     : term,
  Paths     : list
in
  execute(in-output,IO?).
  (
    rec-msg(get-config-file(Name?)) .
    snd-eval(IO, read-file(Name)) .
    (
      rec-value(IO, file-contents(Name, Text?)) .
      snd-msg(config-file(Name, Text))
      +
      rec-value(IO, error-opening(Name)).
      snd-msg(no-config-file(Name))
    ) 
    +
    rec-msg(process-search-paths(Name?, Paths?)) .
    snd-eval(IO, process-search-paths(Name, Paths)) .
    rec-value(IO, search-paths-processed(Name)) .
    snd-msg(search-paths-processed(Name))
    +
    rec-msg(open-parse-table(Name?, Path?, TableType?)) .
    snd-eval(IO, open-parse-table(Name, Path, TableType)) .
    (
      rec-value(IO,table-on-disk(Table?, TimeStamp?)) .
      snd-msg(table-on-disk(Table, TimeStamp))
    +
      rec-value(IO,error-opening(Name)).
      snd-msg(no-table-on-disk)
    )
  +
    rec-msg(open-trm-file(Name?)).
    snd-eval(IO,open-trm-file(Name)).
    ( rec-value(IO,opened-file(Name,Contents?,Path?,TimeStamp?)).
      snd-msg(opened-file(Name,Contents,Path,TimeStamp))
      +
      rec-value(IO,error-opening(Name?)).
      snd-msg(error-opening(Name))
    )
  +
    %% Check if a sdf module exists.
    rec-msg(exists-sdf-module(Name?)) .
    snd-eval(IO, exists-sdf-module(Name)) .
    (
      rec-value(IO, exists) .
      snd-msg(sdf-module-exists(Name))
    +
      rec-value(IO, not-exists) .
      snd-msg(sdf-module-not-exists(Name))
    )
  +
    %% Create a (new) empty sdf module
    rec-msg(create-empty-sdf-module(Name?)) .
    snd-eval(IO, create-empty-sdf-module(Name)) .
    (
      rec-value(IO, creation-succeeded) .
      snd-msg(module-created(Name))
    +
      rec-value(IO, creation-failed(Text?)) .
      snd-msg(module-creation-failed(Name, Text))
    )
  +
    %% Check if an equations section exists.
    rec-msg(exists-asf-section(Name?, Path?)) .
    snd-eval(IO, exists-asf-section(Name, Path)) .
    (
      rec-value(IO, exists) .
      snd-msg(asf-section-exists(Name))
    +
      rec-value(IO, not-exists) .
      snd-msg(asf-section-not-exists(Name))
    )
  +
    %% Create a (new) equations section for a given module
    rec-msg(create-empty-equations(Name?, Path?)) .
    snd-eval(IO, create-empty-asf-section(Name, Path)) .
    (
      rec-value(IO, creation-succeeded(FileName?)) .
      snd-msg(empty-equations-created(FileName))
    +
      rec-value(IO, creation-failed(Text?)) .
      snd-msg(empty-equations-not-created(Name, Text))
    )
  +
    %% Name represents the module-name (without extension)
    rec-msg(open-file(Name?)).
    snd-eval(IO,open-sdf-file(Name)).
    (
      rec-value(IO,opened-file(Name?,Contents?,Path?,TimeStamp?)).
      snd-msg(opened-file(Name,Contents,Path,TimeStamp))
    + 
      rec-value(IO,opened-file(Name?,Contents?,Path?,TimeStamp?)).
      snd-msg(opened-file(Name,Contents,Path,TimeStamp))
    +
      rec-value(IO,error-opening(Name?)).
      snd-msg(error-opening(Name))
    )
  +
    rec-msg(open-asf-file(Name?, SdfPath?)).
    snd-eval(IO, open-asf-file(Name, SdfPath)).
    (
      rec-value(IO, opened-file(Name, Contents?, Path?, TimeStamp?)) .
      snd-msg(opened-file(Name, Contents, Path, TimeStamp)) 
    +
      rec-value(IO, error-opening(Name)).
      snd-msg(error-opening(Name))
    )
  +
    rec-msg(save-asfix(Name?, Path?, Asfix?)) .
    snd-eval(IO, save-asfix(Name, Path, Asfix)) .
    rec-value(IO, save-done(Name?)) .
    snd-msg(save-done)
  +
    rec-msg(save-text-file(Path?, Text?)) .
    snd-eval(IO, save-text-file(Path, Text)) .
    rec-value(IO, save-done(Path)) .
    snd-msg(save-done(Path))
  +
    rec-msg(save-table(Name?, Path?, Asfix?)) .
    snd-eval(IO, save-parsetable(Name, Path, Asfix)) .
    rec-value(IO, save-done(Name)).
    snd-msg(save-done)
  +
    rec-msg(create-equations-dump-file(Name?, Asfix?)) .
    snd-eval(IO, create-equations-dump-file(Name, Asfix)) .
    (
      rec-value(IO, create-equations-dump-file-done(Name)) .
      snd-msg(create-equations-dump-file-done(Name))
    +
      rec-value(IO, create-equations-dump-file-failed(Name, Text?)) .
	  snd-msg(create-equations-dump-file-failed(Name, Text))
    )
  ) *
  delta
endlet

tool in-output is { command = "in-output" }
