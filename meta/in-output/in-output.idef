/*
 * $Id$
 */

process Io is
let
  IO         : in-output,
  Tree       : term,
  Name       : str,
  Path       : str,
  SyntaxPath : str,
  Text       : str,
  FunSym     : str,
  Term       : term,
  SyntaxText : str,
  RulesText  : str,
  FileName   : str,
  Contents   : term,
  Time       : int,
  TimeStamp  : term,
  TableType  : term,
  Table      : term,
  Paths      : list,
  SyntaxExt  : str,
  RulesExt   : str,
  TermExt    : str,
  Stack      : list,
  RealName   : str,
  EditorId   : term
in
  execute(in-output,IO?).
  (
    rec-msg(get-config-file(Name?)) .
    snd-eval(IO, read-file(Name)) .
    (
      rec-value(IO, file-contents(Name, Text?)) .
      snd-msg(config-file(Name, Text))
      +
      rec-value(IO, error-opening(Name)).
      snd-msg(no-config-file(Name))
    ) 
    +
    rec-msg(get-button-file(Name?)) .
    snd-eval(IO, read-aterm-file(Name)) .
    (
      rec-value(IO, file-contents(Name, Term?)) .
      snd-msg(button-file(Name, Term))
      +
      rec-value(IO, error-opening(Name)).
      snd-msg(no-button-file(Name))
    ) 
    +
    rec-msg(process-search-paths(Name?, Paths?)) .
    snd-eval(IO, process-search-paths(Name, Paths)) .
    rec-value(IO, search-paths-processed(Name)) .
    snd-msg(search-paths-processed(Name)) .
    snd-msg(get-file-extensions) .
    rec-msg(set-file-extensions(syntax(SyntaxExt?), rules(RulesExt?), term(TermExt?))) .
    snd-do(IO, set-file-extensions(SyntaxExt, RulesExt, TermExt))
    +
    rec-msg(open-parse-table(Name?, Path?, TableType?)) .
    snd-eval(IO, open-parse-table(Name, Path, TableType)) .
    (
      rec-value(IO,table-on-disk(Table?, TimeStamp?)) .
      snd-msg(table-on-disk(Table, TimeStamp))
    +
      rec-value(IO,error-opening(Name)).
      snd-msg(no-table-on-disk)
    )
  +
    rec-msg(open-trm-file(Name?)).
    snd-eval(IO,open-trm-file(Name)).
    ( rec-value(IO,opened-file(Name,Contents?,Path?,TimeStamp?)).
      snd-msg(opened-file(Name,Contents,Path,TimeStamp))
      +
      rec-value(IO,error-opening(Name?)).
      snd-msg(error-opening(Name))
    )
  +
    %% Check if a syntax module exists.
    rec-msg(exists-syntax-module(Name?)) .
    snd-eval(IO, exists-syntax-module(Name)) .
    (
      rec-value(IO, exists) .
      snd-msg(syntax-module-exists(Name))
    +
      rec-value(IO, not-exists) .
      snd-msg(syntax-module-not-exists(Name))
    )
  +
    %% Create a (new) empty syntax module
    rec-msg(create-empty-syntax-module(Path?, Name?)) .
    snd-eval(IO, create-empty-syntax-module(Path, Name)) .
    (
      rec-value(IO, creation-succeeded(Path?, RealName?)) .
      snd-msg(module-created(Path, RealName))
    +
      rec-value(IO, creation-failed(Text?)) .
      snd-msg(module-creation-failed(Name, Text))
    )
  +
    rec-msg(compute-module-name(Path?, Name?)).
    snd-eval(IO, compute-module-name(Path, Name)).
    (
      rec-value(IO, computed-module-name(RealName?)).
      snd-msg(computed-module-name(RealName))
    +
      rec-value(IO, module-name-not-computed(Text?)).
      snd-msg(module-name-not-computed(Text))
    )
  +
    %% Check if a rules section exists.
    rec-msg(exists-rules-section(Name?, Path?)) .
    snd-eval(IO, exists-rules-section(Name, Path)) .
    (
      rec-value(IO, exists) .
      snd-msg(rules-section-exists(Name))
    +
      rec-value(IO, not-exists) .
      snd-msg(rules-section-not-exists(Name))
    )
  +
    %% Create a (new) rules section for a given module
    rec-msg(create-empty-rules-section(Name?, Path?)) .
    snd-eval(IO, create-empty-rules-section(Name, Path)) .
    (
      rec-value(IO, creation-succeeded(FileName?)) .
      snd-msg(empty-rules-section-created(FileName))
    +
      rec-value(IO, creation-failed(Text?)) .
      snd-msg(empty-rules-section-not-created(Name, Text))
    )
  +
    %% Name represents the module-name (without extension)
    rec-msg(open-syntax-file(Name?)).
    snd-eval(IO,open-syntax-file(Name)).
    (
      rec-value(IO,opened-file(Name?,Contents?,Path?,TimeStamp?)).
      snd-msg(opened-file(Name,Contents,Path,TimeStamp))
    + 
      rec-value(IO,error-opening(Name?)).
      snd-msg(error-opening(Name))
    )
  +
    rec-msg(open-file(Path?)).
    snd-eval(IO,open-file(Path)).
    (
      rec-value(IO,opened-file(Name?,Contents?,Path?,TimeStamp?)).
      snd-msg(opened-file(Name,Contents,Path,TimeStamp))
    + 
      rec-value(IO,error-opening(Path?)).
      snd-msg(error-opening(Path))
    )
  +
    rec-msg(open-rules-file(Name?, SyntaxPath?)).
    snd-eval(IO, open-rules-file(Name, SyntaxPath)).
    (
      rec-value(IO, opened-file(Name, Contents?, Path?, TimeStamp?)) .
      snd-msg(opened-file(Name, Contents, Path, TimeStamp)) 
    +
      rec-value(IO, error-opening(Name)).
      snd-msg(error-opening(Name))
    )
  +
    %% Check if a file exists.
    rec-msg(exists-file(Name?)) .
    snd-eval(IO, exists-file(Name)) .
    (
      rec-value(IO, exists) .
      snd-msg(file-exists(Name))
    +
      rec-value(IO, not-exists) .
      snd-msg(file-not-exists(Name))
    )
  +
    %% Check if a file exists.
    rec-msg(locate-file(Name?)) .
    snd-eval(IO, locate-file(Name)) .
    (
      rec-value(IO, location(Path?)) .
      snd-msg(file-location(Name, Path))
    +
      rec-value(IO, not-exists) .
      snd-msg(file-not-exists(Name))
    )
  +
    rec-msg(save-tree(Name?, Path?), Stack?, EditorId?) .
    Tree := first(Stack) .
    Stack := next(Stack) .
    FunSym := fun(Tree) .
    if not-equal(FunSym, "str") then
      snd-eval(IO, save-tree(Name, Path, Tree)) .
      rec-value(IO, save-done(Name?))
    else
      Text := first(args(Tree)) .
      snd-eval(IO, save-text-file(Path, Text)) .
      rec-value(IO, save-done(Path))
    fi .
    snd-msg(stack(Stack), EditorId)
  +
    rec-msg(read-tree(Path?), Stack?, EditorId?) .
    snd-eval(IO,open-file(Path)) .
    (
      rec-value(IO,opened-file(Name?,tree(Tree?),Path?,TimeStamp?)) .
      Stack := join(Tree, Stack) .
      snd-msg(stack(Stack), EditorId)
    + 
      rec-value(IO,error-opening(Path?)).
      snd-msg(error-stack, EditorId)
    )
  +
    rec-msg(save-tree(Name?, Path?, Tree?)) .
    snd-eval(IO, save-tree(Name, Path, Tree)) .
    rec-value(IO, save-done(Name?)) .
    snd-msg(save-done)
  +
    rec-msg(save-text-file(Path?, Text?)) .
    snd-eval(IO, save-text-file(Path, Text)) .
    rec-value(IO, save-done(Path)) .
    snd-msg(save-done(Path))
  +
    rec-msg(print-module-text(Name?, Path?, SyntaxText?, RulesText?)) .
    snd-eval(IO, print-module-text(Name, Path, SyntaxText, RulesText)) .
    rec-value(IO, module-text-printed(Name)) .
    snd-msg(module-text-printed(Name))
  +
    rec-msg(print-module-text(Name?, Path?, SyntaxText?)) .
    snd-eval(IO, print-module-text(Name, Path, SyntaxText, "")) .
    rec-value(IO, module-text-printed(Name)) .
    snd-msg(module-text-printed(Name))
  +
    rec-msg(save-table(Name?, Path?, Table?)) .
    snd-eval(IO, save-parsetable(Name, Path, Table)) .
    rec-value(IO, save-done(Name)).
    snd-msg(save-done)
  +
    rec-msg(create-equations-dump-file(Name?, Path?, Tree?)) .
    snd-eval(IO, create-equations-dump-file(Name, Path, Tree)) .
    (
      rec-value(IO, create-equations-dump-file-done(Name)) .
      snd-msg(create-equations-dump-file-done(Name))
    +
      rec-value(IO, create-equations-dump-file-failed(Name, Text?)) .
	  snd-msg(create-equations-dump-file-failed(Name, Text))
    )
  +
    rec-msg(remove-module(Name?)) .
    snd-eval(IO, remove-module(Name)) .
    rec-value(IO, removed-module) .
    snd-msg(removed-module)
  ) *
  delta
endlet

tool in-output is { command = "in-output" }
