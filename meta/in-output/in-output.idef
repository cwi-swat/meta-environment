process Io is
let
  IO       : in-output,
  Id       : term,
  Asfix    : term,
  Name     : str,
  Dir      : str,
  Path     : str,
  T        : term,
  Text     : str,
  FileName : str,
  TS       : int
in
  execute(in-output,IO?).
  (
    rec-msg(get-table-timestamp(Name?)).
    snd-eval(IO,get-timestamp(Name,".tbl")).
    rec-value(IO,timestamp(TS?)).
    snd-msg(table-timestamp(timestamp(TS)))
    +
    rec-msg(Id?,read-parse-table(Name?)).
    snd-eval(IO,read-parse-table(Name)).
    (
      rec-value(IO,table-on-disk(Text?,timestamp(TS?))).
      snd-msg(Id,table-on-disk(Text,timestamp(TS)))
    +
      rec-value(IO,error-opening(Name?)).
      snd-msg(Id,no-table-on-disk)
    )
  +
    rec-msg(Id?,open-trm-file(Name?)).
    snd-eval(IO,open-trm-file(Name)).
    ( rec-value(IO,opened-file(raw,Name,Text?,Path?,timestamp(TS?))).
      snd-msg(Id,opened-file(raw,Name,Text,Path,timestamp(TS)))
      +
      rec-value(IO,error-opening(Name?)).
      snd-msg(Id, error-opening(Name))
    )
  +
    %% Check if a sdf2 module exists.
    rec-msg(exists-sdf2-module(Name?)) .
    snd-eval(IO, exists-sdf2-module(Name)) .
    (
      rec-value(IO, exists) .
      snd-msg(sdf2-module-exists(Name))
    +
      rec-value(IO, not-exists) .
      snd-msg(sdf2-module-not-exists(Name))
    )
  +
    %% Create a (new) empty sdf2 module
    rec-msg(create-empty-sdf2-module(Name?)) .
    snd-eval(IO, create-empty-sdf2-module(Name)) .
    (
      rec-value(IO, creation-succeeded) .
      snd-msg(module-created(Name))
    +
      rec-value(IO, creation-failed(Text?)) .
      snd-msg(module-creation-failed(Name, Text))
    )
  +
    %% Create a (new) equations section for a given module
    rec-msg(create-empty-equations(Name?)) .
    snd-eval(IO, create-empty-eqs-section(Name)) .
    (
      rec-value(IO, creation-succeeded(FileName?)) .
      snd-msg(equations-created(FileName))
    +
      rec-value(IO, creation-failed(Text?)) .
      snd-msg(equations-creation-failed(Name, Text))
    )
  +
    %% Name represents the module-name (without extension)
    rec-msg(Id?,open-file(Name?)).
    snd-eval(IO, open-old-asfix-file(Name)).
    (
      rec-value(IO,opened-file(asfix,Name?,T?,Path?,timestamp(TS?))).
      snd-msg(Id,opened-file(asfix,Name,T,Path,timestamp(TS)))
    +
      rec-value(IO,error-opening(Name?)).
      snd-eval(IO,open-sdf2-file(Name)).
      (
        rec-value(IO,opened-file(raw,Name?,Text?,Path?,timestamp(TS?))).
        snd-msg(Id,opened-file(raw,Name,Text,Path,timestamp(TS)))
        + 
        rec-value(IO,opened-file(baf,Name?,T?,Path?,timestamp(TS?))).
        snd-msg(Id,opened-file(baf,Name,T,Path,timestamp(TS)))
        +
        rec-value(IO,error-opening(Name?)).
        snd-msg(Id, error-opening(Name))
      )
    )
  +
    rec-msg(Id?,open-eqs-asfix-file(Name?)).
    snd-eval(IO,open-eqs-asfix-file(Name)).
    (
      rec-value(IO,opened-file(baf,Name?,T?,Path?,timestamp(TS?))).
      snd-msg(Id,opened-file(baf,Name,T,Path,timestamp(TS)))
      +
      rec-value(IO,error-opening(Name?)).
      snd-msg(Id, error-opening(Name))
    )
  +
    rec-msg(Id?,open-eqs-text-file(Name?)).
    snd-eval(IO,open-eqs-text-file(Name)).
    (
      rec-value(IO,opened-file(raw,Name?,Text?,Path?,timestamp(TS?))).
      snd-msg(Id,opened-file(raw,Name,Text,Path,timestamp(TS))) 
      +
      rec-value(IO,error-opening(Name?)).
      snd-msg(Id, error-opening(Name))
    )
  +
    rec-msg(save-sdf2-asfix(Name?,Path?,Asfix?)).
    snd-eval(IO,save-sdf2-asfix(Name,Path,Asfix)).
    rec-value(IO,save-done(Name?)).
    snd-msg(save-done)
  +
    rec-msg(save-eqs-asfix(Name?,Path?,Asfix?)).
    snd-eval(IO,save-eqs-asfix(Name,Path,Asfix)).
    rec-value(IO,save-done(Name?)).
    snd-msg(save-done)
  )*
  delta
endlet


tool in-output is { command = "in-output" }
