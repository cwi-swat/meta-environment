process Io is
let
IO   : in-output,
Id   : term,
Name : str,
Path : str,
T    : term,
Text : str
in
  execute(in-output,IO?).
  ( rec-msg(Id?,open-file(id(Name?))).
    snd-eval(IO, open-old-asfix-file(Name)).
    ( rec-value(IO,opened-file(Name,T?,Path?)).
      snd-msg(Id,opened-file(asfix,id(Name),T,Path))
    + rec-value(IO,error-opening(Name?)).
      snd-eval(IO,open-sdf2-file(Name)).
      ( rec-value(IO,opened-file(Name,Text?,Path?)).
        snd-msg(Id,opened-file(raw,id(Name),Text,Path))
        + 
        rec-value(IO,error-opening(Name?)).
        snd-msg(Id, error-opening(Name))
      )
    )
  +
    rec-msg(Id?,open-eqs2-file(id(Name?))).
    snd-eval(IO,open-eqs2-file(Name)).
    ( rec-value(IO,opened-file(Name,Text?,Path?)).
      snd-msg(Id,opened-file(raw,id(Name),Text,Path))
      +
      rec-value(IO,error-opening(Name?)).
      snd-msg(Id, error-opening(Name))
    )
  )*
  delta
endlet


tool in-output is { command = "in-output" }

#ifdef MAIN
#else
toolbus(Io)
#endif
