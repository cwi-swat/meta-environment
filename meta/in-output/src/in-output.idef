/*
 * $Id$
 */

process Io is
let
  IO         : in-output,
  Name       : str,
  Path       : str,
  Term       : term,
  FileName1 : str,
  FileName2 : str,
  FileName : str,
  Contents   : term,
  ContentList: list,
  Extension  : str,
  ErrorMessage : str,
  Directory : str,
  Directories : list
in
  execute(in-output,IO?).
  (
    rec-msg(io-relative-to-absolute(Directories?)) .
    snd-eval(IO, relative-to-absolute(Directories)) .
    rec-value(IO, absolute-directories(Directories?)) .
    snd-msg(io-absolute-directories(Directories))
  +
    rec-msg(io-find-file(Directories?, Name?, Extension?)) .
    snd-eval(IO, find-file(Directories, Name, Extension)) .
    (
      rec-value(IO, file-found(Directories?)) .
      snd-msg(io-file-found(Directories))
    +
      rec-value(IO, file-not-found) .
      snd-msg(io-file-not-found)
    )
  +
    rec-msg(io-remove-file(Path?, FileName?, Extension?)) .
    snd-do(IO, remove-file(Path, FileName, Extension)) .
    snd-msg(io-file-removed)
  +
    rec-msg(io-exists-file(FileName?)) .
    snd-eval(IO, exists-file(FileName)) .
    (
      rec-value(IO, success) .
      snd-msg(io-file-exists)
    +
      rec-value(IO, failure(ErrorMessage?)) .
      snd-msg(io-file-not-exists)
    )
  +
    rec-msg(io-write-text-file(FileName?, ContentList?)) .
    snd-eval(IO, write-text-file(FileName, ContentList)) .
    (
      rec-value(IO, success) .
      snd-msg(io-file-written)
    +
      rec-value(IO, failure(ErrorMessage?)) .
      snd-msg(io-file-not-written(ErrorMessage))
    )
  +
    rec-msg(io-write-term-file(FileName?, Term?)) .
    snd-eval(IO, write-term-file(FileName, Term)) .
    ( 
      rec-value(IO, success) .
      snd-msg(io-file-written)
    +
      rec-value(IO, failure(ErrorMessage?)) .
      snd-msg(io-file-not-written(ErrorMessage))
    )
  +
    rec-msg(io-read-file(FileName?)) .
    snd-eval(IO,read-text-file(FileName)) .
    (
      rec-value(IO,file-contents(Contents?)).
      snd-msg(io-file-contents(Contents))
    + 
      rec-value(IO,failure(ErrorMessage?)).
      snd-msg(io-error-reading(ErrorMessage))
    )
  +
    rec-msg(io-compare-files(FileName1?, FileName2?)) .
    snd-eval(IO, compare-files(FileName1, FileName2)) .
    (
      rec-value(IO, equal) .
      snd-msg(io-files-equal)
    +
      rec-value(IO, different) .
      snd-msg(io-files-differ)
    )
  +
    rec-msg(io-get-filename(Directory?, Name?, Extension?)) .
    snd-eval(IO, get-filename(Directory, Name, Extension)) .
    rec-value(IO, filename(FileName?)) .
    snd-msg(io-filename(FileName))
  ) *
  delta
endlet

tool in-output is { command = "in-output" }
