/*
 * $Id$
 */

process Io is
let
  IO         : in-output,
  Tree       : term,
  Name       : str,
  Path       : str,
  SyntaxPath : str,
  Text       : str,
  FunSym     : str,
  Term       : term,
  SyntaxText : str,
  RulesText  : str,
  FileName1 : str,
  FileName2 : str,
  Contents   : term,
  ContentList: list,
  TableType  : term,
  Table      : term,
  Paths      : list,
  SyntaxExt  : str,
  RulesExt   : str,
  TermExt    : str,
  Extension  : str,
  RealName   : str,
  EditorId     : term,
  ErrorMessage : str
in
  execute(in-output,IO?).
  (
    rec-msg(process-search-paths(Name?, Paths?)) .
    snd-eval(IO, process-search-paths(Paths)) .
    rec-value(IO, search-paths-processed) .
    snd-msg(search-paths-processed(Name))
  +
    rec-msg(retrieve-search-paths) .
    snd-eval(IO, retrieve-search-paths) .
    rec-value(IO, search-paths(Paths?)) .
    snd-msg(search-paths(Paths))
  +
    rec-msg(find-file(Path?, Name?, Extension?)) .
    snd-eval(IO, find-file(Path, Name, Extension)) .
    (
      rec-value(IO, failure(ErrorMessage?)) .
      snd-msg(file-not-found)
    +
      rec-value(IO, file-found(Path?)) .
      snd-msg(file-found(Path))
    )
  +
    rec-msg(exists-file(Path?, Extension?)) .
    snd-eval(IO, exists-file(Path, Extension)) .
    (
      rec-value(IO, success) .
      snd-msg(file-exists)
    +
      rec-value(IO, failure(ErrorMessage?)) .
      snd-msg(file-not-exists)
    )
  +
    rec-msg(write-text-file(Path?, Extension?, ContentList?)) .
    snd-eval(IO, write-text-file(Path, Extension, ContentList)) .
    (
      rec-value(IO, success) .
      snd-msg(file-written)
    +
      rec-value(IO, failure(Text?)) .
      snd-msg(file-not-written(Text))
    )
  +
    rec-msg(write-term-file(Path?, Extension?, Term?)) .
    snd-eval(IO, write-term-file(Path, Extension, Term)) .
    ( 
      rec-value(IO, success) .
      snd-msg(file-written)
    +
      rec-value(IO, failure(Text?)) .
      snd-msg(file-not-written(Text))
    )
  +
    rec-msg(open-named-file(Path?)).
    snd-eval(IO,open-named-text-file(Path)).
    (
      rec-value(IO,opened-file(Contents?)).
      snd-msg(opened-file(Contents))
    + 
      rec-value(IO, failure(ErrorMessage?)).
      snd-msg(error-opening(Path))
    )
  +
    rec-msg(open-file(Path?, Extension?)).
    snd-eval(IO,open-text-file(Path, Extension)).
    (
      rec-value(IO,opened-file(Contents?)).
      snd-msg(opened-file(Contents))
    + 
      rec-value(IO,failure(ErrorMessage?)).
      snd-msg(error-opening(ErrorMessage))
    )
  +
    rec-msg(exists-named-file(Name?)) .
    snd-eval(IO, exists-named-file(Name)) .
    (
      rec-value(IO, success) .
      snd-msg(file-exists(Name))
    +
      rec-value(IO, failure(ErrorMessage?)) .
      snd-msg(file-not-exists(Name))
    )
  +
    rec-msg(compare-files(FileName1?, FileName2?)) .
    snd-eval(IO, compare-files(FileName1, FileName2)) .
    (
      rec-value(IO, equal) .
      snd-msg(files-equal(FileName1, FileName2))
    +
      rec-value(IO, different) .
      snd-msg(files-differ(FileName1, FileName2))
    )
  ) *
  delta
endlet

tool in-output is { command = "in-output" }
