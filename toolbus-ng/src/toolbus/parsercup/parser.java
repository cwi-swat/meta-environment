
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed May 07 13:22:38 CEST 2008
//----------------------------------------------------

package toolbus.parsercup;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Stack;
import toolbus.TBTermFactory;
import toolbus.ToolBus;
import toolbus.atom.Assign;
import toolbus.atom.Atom;
import toolbus.atom.Create;
import toolbus.atom.Delta;
import toolbus.atom.Print;
import toolbus.atom.ShutDown;
import toolbus.atom.Tau;
import toolbus.atom.msg.RecMsg;
import toolbus.atom.msg.SndMsg;
import toolbus.atom.note.NoNote;
import toolbus.atom.note.RecNote;
import toolbus.atom.note.SndNote;
import toolbus.atom.note.Subscribe;
import toolbus.atom.note.UnSubscribe;
import toolbus.atom.tool.AckEvent;
import toolbus.atom.tool.Connect;
import toolbus.atom.tool.DisConnect;
import toolbus.atom.tool.Do;
import toolbus.atom.tool.Eval;
import toolbus.atom.tool.Event;
import toolbus.atom.tool.Execute;
import toolbus.atom.tool.GetPerfStats;
import toolbus.atom.tool.RecPerfStats;
import toolbus.atom.tool.RecRequest;
import toolbus.atom.tool.RecVal;
import toolbus.atom.tool.SndKill;
import toolbus.atom.tool.SndResponse;
import toolbus.atom.tool.Terminate;
import toolbus.exceptions.ToolBusException;
import toolbus.logging.IToolBusLoggerConstants;
import toolbus.logging.LoggerFactory;
import toolbus.process.Alternative;
import toolbus.process.Disrupt;
import toolbus.process.DynamicProcessCall;
import toolbus.process.IfElse;
import toolbus.process.IfThen;
import toolbus.process.Iteration;
import toolbus.process.LetDefinition;
import toolbus.process.Merge;
import toolbus.process.ProcessCall;
import toolbus.process.ProcessDefinition;
import toolbus.process.ProcessExpression;
import toolbus.process.RightBiasedAlternative;
import toolbus.process.Sequence;
import toolbus.tool.ToolDefinition;
import aterm.AFun;
import aterm.ATerm;
import aterm.ATermList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed May 07 13:22:38 CEST 2008
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\047\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\006\000\002" +
    "\002\005\000\002\002\005\000\002\003\004\000\002\004" +
    "\003\000\002\005\002\000\002\005\003\000\002\005\005" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\007\006\000\002\007" +
    "\006\000\002\010\006\000\002\010\006\000\002\010\006" +
    "\000\002\010\006\000\002\010\006\000\002\011\006\000" +
    "\002\011\006\000\002\011\010\000\002\011\010\000\002" +
    "\011\010\000\002\011\010\000\002\011\010\000\002\011" +
    "\010\000\002\011\012\000\002\011\010\000\002\011\006" +
    "\000\002\011\010\000\002\011\010\000\002\011\010\000" +
    "\002\011\010\000\002\012\003\000\002\012\003\000\002" +
    "\013\011\000\002\014\006\000\002\014\006\000\002\016" +
    "\006\000\002\015\005\000\002\017\003\000\002\017\007" +
    "\000\002\017\007\000\002\017\013\000\002\017\007\000" +
    "\002\017\013\000\002\017\007\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\003" +
    "\000\002\017\003\000\002\017\007\000\002\017\011\000" +
    "\002\017\010\000\002\020\004\000\002\022\005\000\002" +
    "\022\002\000\002\023\005\000\002\023\002\000\002\024" +
    "\005\000\002\024\006\000\002\025\003\000\002\025\005" +
    "\000\002\026\003\000\002\027\005\000\002\030\003\000" +
    "\002\030\005\000\002\021\004\000\002\031\005\000\002" +
    "\032\004\000\002\033\003\000\002\034\007\000\002\035" +
    "\005\000\002\035\002\000\002\036\005\000\002\036\002" +
    "\000\002\037\005\000\002\037\002\000\002\040\005\000" +
    "\002\040\002\000\002\041\013\000\002\042\002\000\002" +
    "\042\004\000\002\042\004\000\002\042\004\000\002\042" +
    "\004\000\002\042\004\000\002\042\004\000\002\043\004" +
    "\000\002\044\003\000\002\044\005\000\002\046\006\000" +
    "\002\045\003\000\002\051\004\000\002\050\004\000\002" +
    "\050\005\000\002\052\004\000\002\052\004\000\002\053" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013a\000\022\002\uff9b\034\007\035\023\072\013\116" +
    "\017\117\006\121\005\122\021\001\002\000\024\002\uff9b" +
    "\034\007\035\023\072\013\116\017\117\006\121\005\122" +
    "\021\123\uff9b\001\002\000\004\067\u013b\001\002\000\004" +
    "\067\u0139\001\002\000\004\077\u0131\001\002\000\024\002" +
    "\uff9b\034\007\035\023\072\013\116\017\117\006\121\005" +
    "\122\021\123\uff9b\001\002\000\024\002\uff9b\034\007\035" +
    "\023\072\013\116\017\117\006\121\005\122\021\123\uff9b" +
    "\001\002\000\024\002\uff9b\034\007\035\023\072\013\116" +
    "\017\117\006\121\005\122\021\123\uff9b\001\002\000\004" +
    "\012\u011a\001\002\000\024\002\uff9b\034\007\035\023\072" +
    "\013\116\017\117\006\121\005\122\021\123\uff9b\001\002" +
    "\000\004\002\001\001\002\000\024\002\uff9b\034\007\035" +
    "\023\072\013\116\017\117\006\121\005\122\021\123\uff9b" +
    "\001\002\000\004\120\u0117\001\002\000\004\002\u0116\001" +
    "\002\000\004\067\u0115\001\002\000\024\002\uff90\034\uff90" +
    "\035\uff90\072\uff90\116\uff90\117\uff90\121\uff90\122\uff90\123" +
    "\uff90\001\002\000\004\067\030\001\002\000\022\034\007" +
    "\035\023\072\013\116\017\117\006\121\005\122\021\123" +
    "\uff9b\001\002\000\004\123\026\001\002\000\024\002\uff8a" +
    "\034\uff8a\035\uff8a\072\uff8a\116\uff8a\117\uff8a\121\uff8a\122" +
    "\uff8a\123\uff8a\001\002\000\006\036\uffb2\077\031\001\002" +
    "\000\006\036\uffa6\077\uffa6\001\002\000\004\067\u010d\001" +
    "\002\000\004\036\033\001\002\000\102\013\037\014\072" +
    "\015\061\016\105\017\071\020\065\021\106\022\066\023" +
    "\073\024\064\025\103\026\070\027\060\030\041\031\074" +
    "\032\052\033\053\037\075\040\110\041\051\042\046\043" +
    "\043\044\062\045\040\046\057\047\050\050\056\064\077" +
    "\067\067\070\100\071\044\077\102\001\002\000\060\002" +
    "\uffc9\034\uffc9\035\uffc9\052\uffc9\053\uffc9\055\uffc9\056\uffc9" +
    "\057\uffc9\060\366\061\367\062\364\063\365\066\uffc9\072" +
    "\uffc9\100\uffc9\112\uffc9\113\uffc9\114\uffc9\116\uffc9\117\uffc9" +
    "\121\uffc9\122\uffc9\123\uffc9\001\002\000\050\002\uffbb\034" +
    "\uffbb\035\uffbb\052\uffbb\053\uffbb\055\uffbb\056\uffbb\057\uffbb" +
    "\066\uffbb\072\uffbb\100\uffbb\112\uffbb\113\uffbb\114\uffbb\116" +
    "\uffbb\117\uffbb\121\uffbb\122\uffbb\123\uffbb\001\002\000\060" +
    "\002\uffe7\034\uffe7\035\uffe7\052\uffe7\053\uffe7\055\uffe7\056" +
    "\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\066\uffe7" +
    "\072\uffe7\100\uffe7\112\uffe7\113\uffe7\114\uffe7\116\uffe7\117" +
    "\uffe7\121\uffe7\122\uffe7\123\uffe7\001\002\000\004\077\361" +
    "\001\002\000\004\077\356\001\002\000\004\077\351\001" +
    "\002\000\060\002\uffec\034\uffec\035\uffec\052\uffec\053\uffec" +
    "\055\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062\uffec\063" +
    "\uffec\066\uffec\072\uffec\100\uffec\112\uffec\113\uffec\114\uffec" +
    "\116\uffec\117\uffec\121\uffec\122\uffec\123\uffec\001\002\000" +
    "\004\077\344\001\002\000\060\002\uffcf\034\uffcf\035\uffcf" +
    "\052\uffcf\053\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061" +
    "\uffcf\062\uffcf\063\uffcf\066\uffcf\072\uffcf\100\uffcf\112\uffcf" +
    "\113\uffcf\114\uffcf\116\uffcf\117\uffcf\121\uffcf\122\uffcf\123" +
    "\uffcf\001\002\000\060\002\uffea\034\uffea\035\uffea\052\uffea" +
    "\053\uffea\055\uffea\056\uffea\057\uffea\060\uffea\061\uffea\062" +
    "\uffea\063\uffea\066\uffea\072\uffea\100\uffea\112\uffea\113\uffea" +
    "\114\uffea\116\uffea\117\uffea\121\uffea\122\uffea\123\uffea\001" +
    "\002\000\004\077\337\001\002\000\050\002\uffba\034\uffba" +
    "\035\uffba\052\uffba\053\uffba\055\uffba\056\uffba\057\uffba\066" +
    "\uffba\072\uffba\100\uffba\112\uffba\113\uffba\114\uffba\116\uffba" +
    "\117\uffba\121\uffba\122\uffba\123\uffba\001\002\000\004\077" +
    "\332\001\002\000\004\077\327\001\002\000\004\077\322" +
    "\001\002\000\004\077\315\001\002\000\060\002\uffee\034" +
    "\uffee\035\uffee\052\uffee\053\uffee\055\uffee\056\uffee\057\uffee" +
    "\060\uffee\061\uffee\062\uffee\063\uffee\066\uffee\072\uffee\100" +
    "\uffee\112\uffee\113\uffee\114\uffee\116\uffee\117\uffee\121\uffee" +
    "\122\uffee\123\uffee\001\002\000\060\002\uffe9\034\uffe9\035" +
    "\uffe9\052\uffe9\053\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9" +
    "\061\uffe9\062\uffe9\063\uffe9\066\uffe9\072\uffe9\100\uffe9\112" +
    "\uffe9\113\uffe9\114\uffe9\116\uffe9\117\uffe9\121\uffe9\122\uffe9" +
    "\123\uffe9\001\002\000\026\004\113\005\124\006\120\007" +
    "\116\010\123\011\122\012\114\067\126\104\117\106\112" +
    "\001\002\000\004\077\303\001\002\000\004\077\276\001" +
    "\002\000\004\077\273\001\002\000\004\077\266\001\002" +
    "\000\040\002\uffa5\034\uffa5\035\uffa5\055\165\056\163\057" +
    "\167\072\uffa5\112\170\113\171\114\164\116\uffa5\117\uffa5" +
    "\121\uffa5\122\uffa5\123\uffa5\001\002\000\004\077\261\001" +
    "\002\000\004\077\256\001\002\000\004\077\253\001\002" +
    "\000\054\002\uffb4\034\uffb4\035\uffb4\052\uffb4\053\uffb4\054" +
    "\251\055\uffb4\056\uffb4\057\uffb4\066\uffb4\072\uffb4\077\216" +
    "\100\uffb4\112\uffb4\113\uffb4\114\uffb4\116\uffb4\117\uffb4\121" +
    "\uffb4\122\uffb4\123\uffb4\001\002\000\004\077\243\001\002" +
    "\000\004\077\240\001\002\000\004\077\235\001\002\000" +
    "\004\077\232\001\002\000\004\077\225\001\002\000\004" +
    "\077\213\001\002\000\060\002\uffeb\034\uffeb\035\uffeb\052" +
    "\uffeb\053\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb" +
    "\062\uffeb\063\uffeb\066\uffeb\072\uffeb\100\uffeb\112\uffeb\113" +
    "\uffeb\114\uffeb\116\uffeb\117\uffeb\121\uffeb\122\uffeb\123\uffeb" +
    "\001\002\000\004\067\205\001\002\000\060\002\uffd0\034" +
    "\uffd0\035\uffd0\052\uffd0\053\uffd0\055\uffd0\056\uffd0\057\uffd0" +
    "\060\uffd0\061\uffd0\062\uffd0\063\uffd0\066\uffd0\072\uffd0\100" +
    "\uffd0\112\uffd0\113\uffd0\114\uffd0\116\uffd0\117\uffd0\121\uffd0" +
    "\122\uffd0\123\uffd0\001\002\000\102\013\037\014\072\015" +
    "\061\016\105\017\071\020\065\021\106\022\066\023\073" +
    "\024\064\025\103\026\070\027\060\030\041\031\074\032" +
    "\052\033\053\037\075\040\110\041\051\042\046\043\043" +
    "\044\062\045\040\046\057\047\050\050\056\064\077\067" +
    "\067\070\100\071\044\077\102\001\002\000\102\013\037" +
    "\014\072\015\061\016\105\017\071\020\065\021\106\022" +
    "\066\023\073\024\064\025\103\026\070\027\060\030\041" +
    "\031\074\032\052\033\053\037\075\040\110\041\051\042" +
    "\046\043\043\044\062\045\040\046\057\047\050\050\056" +
    "\064\077\067\067\070\100\071\044\077\102\001\002\000" +
    "\004\077\152\001\002\000\060\002\uffe8\034\uffe8\035\uffe8" +
    "\052\uffe8\053\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\061" +
    "\uffe8\062\uffe8\063\uffe8\066\uffe8\072\uffe8\100\uffe8\112\uffe8" +
    "\113\uffe8\114\uffe8\116\uffe8\117\uffe8\121\uffe8\122\uffe8\123" +
    "\uffe8\001\002\000\004\077\147\001\002\000\004\077\144" +
    "\001\002\000\060\002\uffed\034\uffed\035\uffed\052\uffed\053" +
    "\uffed\055\uffed\056\uffed\057\uffed\060\uffed\061\uffed\062\uffed" +
    "\063\uffed\066\uffed\072\uffed\100\uffed\112\uffed\113\uffed\114" +
    "\uffed\116\uffed\117\uffed\121\uffed\122\uffed\123\uffed\001\002" +
    "\000\004\077\111\001\002\000\026\004\113\005\124\006" +
    "\120\007\116\010\123\011\122\012\114\067\126\104\117" +
    "\106\112\001\002\000\030\004\113\005\124\006\120\007" +
    "\116\010\123\011\122\012\114\067\126\104\117\106\112" +
    "\107\ufff1\001\002\000\074\002\uffff\034\uffff\035\uffff\051" +
    "\uffff\052\uffff\053\uffff\055\uffff\056\uffff\057\uffff\060\uffff" +
    "\061\uffff\062\uffff\063\uffff\065\uffff\066\uffff\072\uffff\100" +
    "\uffff\101\uffff\105\uffff\107\uffff\110\uffff\112\uffff\113\uffff" +
    "\114\uffff\116\uffff\117\uffff\121\uffff\122\uffff\123\uffff\001" +
    "\002\000\076\002\ufff7\034\ufff7\035\ufff7\051\ufff7\052\ufff7" +
    "\053\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7\062" +
    "\ufff7\063\ufff7\065\ufff7\066\ufff7\072\ufff7\077\134\100\ufff7" +
    "\101\ufff7\105\ufff7\107\ufff7\110\ufff7\112\ufff7\113\ufff7\114" +
    "\ufff7\116\ufff7\117\ufff7\121\ufff7\122\ufff7\123\ufff7\001\002" +
    "\000\004\100\133\001\002\000\074\002\ufffa\034\ufffa\035" +
    "\ufffa\051\ufffa\052\ufffa\053\ufffa\055\ufffa\056\ufffa\057\ufffa" +
    "\060\ufffa\061\ufffa\062\ufffa\063\ufffa\065\ufffa\066\ufffa\072" +
    "\ufffa\100\ufffa\101\ufffa\105\ufffa\107\ufffa\110\ufffa\112\ufffa" +
    "\113\ufffa\114\ufffa\116\ufffa\117\ufffa\121\ufffa\122\ufffa\123" +
    "\ufffa\001\002\000\026\004\113\005\124\006\120\007\116" +
    "\010\123\011\122\012\114\067\126\104\117\106\112\001" +
    "\002\000\074\002\ufffd\034\ufffd\035\ufffd\051\ufffd\052\ufffd" +
    "\053\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd\061\ufffd\062" +
    "\ufffd\063\ufffd\065\ufffd\066\ufffd\072\ufffd\100\ufffd\101\ufffd" +
    "\105\ufffd\107\ufffd\110\ufffd\112\ufffd\113\ufffd\114\ufffd\116" +
    "\ufffd\117\ufffd\121\ufffd\122\ufffd\123\ufffd\001\002\000\074" +
    "\002\ufffb\034\ufffb\035\ufffb\051\ufffb\052\ufffb\053\ufffb\055" +
    "\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb" +
    "\065\ufffb\066\ufffb\072\ufffb\100\ufffb\101\ufffb\105\ufffb\107" +
    "\ufffb\110\ufffb\112\ufffb\113\ufffb\114\ufffb\116\ufffb\117\ufffb" +
    "\121\ufffb\122\ufffb\123\ufffb\001\002\000\074\002\ufff8\034" +
    "\ufff8\035\ufff8\051\ufff8\052\ufff8\053\ufff8\055\ufff8\056\ufff8" +
    "\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\065\ufff8\066" +
    "\ufff8\072\ufff8\100\ufff8\101\ufff8\105\ufff8\107\ufff8\110\ufff8" +
    "\112\ufff8\113\ufff8\114\ufff8\116\ufff8\117\ufff8\121\ufff8\122" +
    "\ufff8\123\ufff8\001\002\000\074\002\ufff9\034\ufff9\035\ufff9" +
    "\051\ufff9\052\ufff9\053\ufff9\055\ufff9\056\ufff9\057\ufff9\060" +
    "\ufff9\061\ufff9\062\ufff9\063\ufff9\065\ufff9\066\ufff9\072\ufff9" +
    "\100\ufff9\101\ufff9\105\ufff9\107\ufff9\110\ufff9\112\ufff9\113" +
    "\ufff9\114\ufff9\116\ufff9\117\ufff9\121\ufff9\122\ufff9\123\ufff9" +
    "\001\002\000\074\002\ufffe\034\ufffe\035\ufffe\051\ufffe\052" +
    "\ufffe\053\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe" +
    "\062\ufffe\063\ufffe\065\ufffe\066\ufffe\072\ufffe\100\ufffe\101" +
    "\ufffe\105\ufffe\107\ufffe\110\ufffe\112\ufffe\113\ufffe\114\ufffe" +
    "\116\ufffe\117\ufffe\121\ufffe\122\ufffe\123\ufffe\001\002\000" +
    "\074\002\ufffc\034\ufffc\035\ufffc\051\ufffc\052\ufffc\053\ufffc" +
    "\055\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\063" +
    "\ufffc\065\ufffc\066\ufffc\072\ufffc\100\ufffc\101\ufffc\105\ufffc" +
    "\107\ufffc\110\ufffc\112\ufffc\113\ufffc\114\ufffc\116\ufffc\117" +
    "\ufffc\121\ufffc\122\ufffc\123\ufffc\001\002\000\074\002\ufff2" +
    "\034\ufff2\035\ufff2\051\ufff2\052\ufff2\053\ufff2\055\ufff2\056" +
    "\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\065\ufff2" +
    "\066\ufff2\072\ufff2\100\ufff2\101\ufff2\105\ufff2\107\ufff2\110" +
    "\127\112\ufff2\113\ufff2\114\ufff2\116\ufff2\117\ufff2\121\ufff2" +
    "\122\ufff2\123\ufff2\001\002\000\074\002\ufff3\034\ufff3\035" +
    "\ufff3\051\ufff3\052\ufff3\053\ufff3\055\ufff3\056\ufff3\057\ufff3" +
    "\060\ufff3\061\ufff3\062\ufff3\063\ufff3\065\ufff3\066\ufff3\072" +
    "\ufff3\100\ufff3\101\ufff3\105\ufff3\107\ufff3\110\ufff3\112\ufff3" +
    "\113\ufff3\114\ufff3\116\ufff3\117\ufff3\121\ufff3\122\ufff3\123" +
    "\ufff3\001\002\000\014\065\uffad\100\uffad\101\uffad\105\uffad" +
    "\110\uffad\001\002\000\004\105\132\001\002\000\074\002" +
    "\ufff4\034\ufff4\035\ufff4\051\ufff4\052\ufff4\053\ufff4\055\ufff4" +
    "\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\065" +
    "\ufff4\066\ufff4\072\ufff4\100\ufff4\101\ufff4\105\ufff4\107\ufff4" +
    "\110\ufff4\112\ufff4\113\ufff4\114\ufff4\116\ufff4\117\ufff4\121" +
    "\ufff4\122\ufff4\123\ufff4\001\002\000\060\002\uffdf\034\uffdf" +
    "\035\uffdf\052\uffdf\053\uffdf\055\uffdf\056\uffdf\057\uffdf\060" +
    "\uffdf\061\uffdf\062\uffdf\063\uffdf\066\uffdf\072\uffdf\100\uffdf" +
    "\112\uffdf\113\uffdf\114\uffdf\116\uffdf\117\uffdf\121\uffdf\122" +
    "\uffdf\123\uffdf\001\002\000\030\004\113\005\124\006\120" +
    "\007\116\010\123\011\122\012\114\067\126\100\ufff1\104" +
    "\117\106\112\001\002\000\010\100\ufff0\101\140\107\ufff0" +
    "\001\002\000\004\100\137\001\002\000\074\002\ufff6\034" +
    "\ufff6\035\ufff6\051\ufff6\052\ufff6\053\ufff6\055\ufff6\056\ufff6" +
    "\057\ufff6\060\ufff6\061\ufff6\062\ufff6\063\ufff6\065\ufff6\066" +
    "\ufff6\072\ufff6\100\ufff6\101\ufff6\105\ufff6\107\ufff6\110\ufff6" +
    "\112\ufff6\113\ufff6\114\ufff6\116\ufff6\117\ufff6\121\ufff6\122" +
    "\ufff6\123\ufff6\001\002\000\032\004\113\005\124\006\120" +
    "\007\116\010\123\011\122\012\114\067\126\100\ufff1\104" +
    "\117\106\112\107\ufff1\001\002\000\006\100\uffef\107\uffef" +
    "\001\002\000\004\107\143\001\002\000\074\002\ufff5\034" +
    "\ufff5\035\ufff5\051\ufff5\052\ufff5\053\ufff5\055\ufff5\056\ufff5" +
    "\057\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\065\ufff5\066" +
    "\ufff5\072\ufff5\100\ufff5\101\ufff5\105\ufff5\107\ufff5\110\ufff5" +
    "\112\ufff5\113\ufff5\114\ufff5\116\ufff5\117\ufff5\121\ufff5\122" +
    "\ufff5\123\ufff5\001\002\000\026\004\113\005\124\006\120" +
    "\007\116\010\123\011\122\012\114\067\126\104\117\106" +
    "\112\001\002\000\004\100\146\001\002\000\060\002\uffe3" +
    "\034\uffe3\035\uffe3\052\uffe3\053\uffe3\055\uffe3\056\uffe3\057" +
    "\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\066\uffe3\072\uffe3" +
    "\100\uffe3\112\uffe3\113\uffe3\114\uffe3\116\uffe3\117\uffe3\121" +
    "\uffe3\122\uffe3\123\uffe3\001\002\000\026\004\113\005\124" +
    "\006\120\007\116\010\123\011\122\012\114\067\126\104" +
    "\117\106\112\001\002\000\004\100\151\001\002\000\060" +
    "\002\uffe1\034\uffe1\035\uffe1\052\uffe1\053\uffe1\055\uffe1\056" +
    "\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\066\uffe1" +
    "\072\uffe1\100\uffe1\112\uffe1\113\uffe1\114\uffe1\116\uffe1\117" +
    "\uffe1\121\uffe1\122\uffe1\123\uffe1\001\002\000\026\004\113" +
    "\005\124\006\120\007\116\010\123\011\122\012\114\067" +
    "\126\104\117\106\112\001\002\000\004\101\154\001\002" +
    "\000\026\004\113\005\124\006\120\007\116\010\123\011" +
    "\122\012\114\067\126\104\117\106\112\001\002\000\006" +
    "\100\157\101\156\001\002\000\026\004\113\005\124\006" +
    "\120\007\116\010\123\011\122\012\114\067\126\104\117" +
    "\106\112\001\002\000\060\002\uffda\034\uffda\035\uffda\052" +
    "\uffda\053\uffda\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda" +
    "\062\uffda\063\uffda\066\uffda\072\uffda\100\uffda\112\uffda\113" +
    "\uffda\114\uffda\116\uffda\117\uffda\121\uffda\122\uffda\123\uffda" +
    "\001\002\000\004\100\161\001\002\000\060\002\uffd7\034" +
    "\uffd7\035\uffd7\052\uffd7\053\uffd7\055\uffd7\056\uffd7\057\uffd7" +
    "\060\uffd7\061\uffd7\062\uffd7\063\uffd7\066\uffd7\072\uffd7\100" +
    "\uffd7\112\uffd7\113\uffd7\114\uffd7\116\uffd7\117\uffd7\121\uffd7" +
    "\122\uffd7\123\uffd7\001\002\000\020\055\165\056\163\057" +
    "\167\100\166\112\170\113\171\114\164\001\002\000\102" +
    "\013\037\014\072\015\061\016\105\017\071\020\065\021" +
    "\106\022\066\023\073\024\064\025\103\026\070\027\060" +
    "\030\041\031\074\032\052\033\053\037\075\040\110\041" +
    "\051\042\046\043\043\044\062\045\040\046\057\047\050" +
    "\050\056\064\077\067\067\070\100\071\044\077\102\001" +
    "\002\000\102\013\037\014\072\015\061\016\105\017\071" +
    "\020\065\021\106\022\066\023\073\024\064\025\103\026" +
    "\070\027\060\030\041\031\074\032\052\033\053\037\075" +
    "\040\110\041\051\042\046\043\043\044\062\045\040\046" +
    "\057\047\050\050\056\064\077\067\067\070\100\071\044" +
    "\077\102\001\002\000\102\013\037\014\072\015\061\016" +
    "\105\017\071\020\065\021\106\022\066\023\073\024\064" +
    "\025\103\026\070\027\060\030\041\031\074\032\052\033" +
    "\053\037\075\040\110\041\051\042\046\043\043\044\062" +
    "\045\040\046\057\047\050\050\056\064\077\067\067\070" +
    "\100\071\044\077\102\001\002\000\050\002\uffbc\034\uffbc" +
    "\035\uffbc\052\uffbc\053\uffbc\055\uffbc\056\uffbc\057\uffbc\066" +
    "\uffbc\072\uffbc\100\uffbc\112\uffbc\113\uffbc\114\uffbc\116\uffbc" +
    "\117\uffbc\121\uffbc\122\uffbc\123\uffbc\001\002\000\102\013" +
    "\037\014\072\015\061\016\105\017\071\020\065\021\106" +
    "\022\066\023\073\024\064\025\103\026\070\027\060\030" +
    "\041\031\074\032\052\033\053\037\075\040\110\041\051" +
    "\042\046\043\043\044\062\045\040\046\057\047\050\050" +
    "\056\064\077\067\067\070\100\071\044\077\102\001\002" +
    "\000\102\013\037\014\072\015\061\016\105\017\071\020" +
    "\065\021\106\022\066\023\073\024\064\025\103\026\070" +
    "\027\060\030\041\031\074\032\052\033\053\037\075\040" +
    "\110\041\051\042\046\043\043\044\062\045\040\046\057" +
    "\047\050\050\056\064\077\067\067\070\100\071\044\077" +
    "\102\001\002\000\102\013\037\014\072\015\061\016\105" +
    "\017\071\020\065\021\106\022\066\023\073\024\064\025" +
    "\103\026\070\027\060\030\041\031\074\032\052\033\053" +
    "\037\075\040\110\041\051\042\046\043\043\044\062\045" +
    "\040\046\057\047\050\050\056\064\077\067\067\070\100" +
    "\071\044\077\102\001\002\000\050\002\uffc0\034\uffc0\035" +
    "\uffc0\052\uffc0\053\uffc0\055\uffc0\056\uffc0\057\167\066\uffc0" +
    "\072\uffc0\100\uffc0\112\uffc0\113\171\114\164\116\uffc0\117" +
    "\uffc0\121\uffc0\122\uffc0\123\uffc0\001\002\000\050\002\uffc2" +
    "\034\uffc2\035\uffc2\052\uffc2\053\uffc2\055\uffc2\056\uffc2\057" +
    "\167\066\uffc2\072\uffc2\100\uffc2\112\uffc2\113\171\114\164" +
    "\116\uffc2\117\uffc2\121\uffc2\122\uffc2\123\uffc2\001\002\000" +
    "\050\002\uffbd\034\uffbd\035\uffbd\052\uffbd\053\uffbd\055\uffbd" +
    "\056\uffbd\057\uffbd\066\uffbd\072\uffbd\100\uffbd\112\uffbd\113" +
    "\uffbd\114\uffbd\116\uffbd\117\uffbd\121\uffbd\122\uffbd\123\uffbd" +
    "\001\002\000\050\002\uffbe\034\uffbe\035\uffbe\052\uffbe\053" +
    "\uffbe\055\uffbe\056\163\057\167\066\uffbe\072\uffbe\100\uffbe" +
    "\112\170\113\171\114\164\116\uffbe\117\uffbe\121\uffbe\122" +
    "\uffbe\123\uffbe\001\002\000\050\002\uffbf\034\uffbf\035\uffbf" +
    "\052\uffbf\053\uffbf\055\uffbf\056\uffbf\057\167\066\uffbf\072" +
    "\uffbf\100\uffbf\112\uffbf\113\uffbf\114\uffbf\116\uffbf\117\uffbf" +
    "\121\uffbf\122\uffbf\123\uffbf\001\002\000\050\002\uffc1\034" +
    "\uffc1\035\uffc1\052\uffc1\053\uffc1\055\uffc1\056\163\057\167" +
    "\066\uffc1\072\uffc1\100\uffc1\112\170\113\171\114\164\116" +
    "\uffc1\117\uffc1\121\uffc1\122\uffc1\123\uffc1\001\002\000\020" +
    "\055\165\056\163\057\167\066\202\112\170\113\171\114" +
    "\164\001\002\000\050\002\uffa9\034\uffa9\035\uffa9\052\uffa9" +
    "\053\uffa9\055\uffa9\056\uffa9\057\uffa9\066\uffa9\072\uffa9\100" +
    "\uffa9\112\uffa9\113\uffa9\114\uffa9\116\uffa9\117\uffa9\121\uffa9" +
    "\122\uffa9\123\uffa9\001\002\000\050\002\uffa7\034\uffa7\035" +
    "\uffa7\052\uffa7\053\uffa7\055\uffa7\056\uffa7\057\uffa7\066\uffa7" +
    "\072\uffa7\100\uffa7\112\uffa7\113\uffa7\114\uffa7\116\uffa7\117" +
    "\uffa7\121\uffa7\122\uffa7\123\uffa7\001\002\000\004\065\212" +
    "\001\002\000\006\065\uffab\101\210\001\002\000\004\111" +
    "\206\001\002\000\026\004\113\005\124\006\120\007\116" +
    "\010\123\011\122\012\114\067\126\104\117\106\112\001" +
    "\002\000\006\065\uffac\101\uffac\001\002\000\004\067\205" +
    "\001\002\000\004\065\uffaa\001\002\000\102\013\uffa8\014" +
    "\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8" +
    "\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031" +
    "\uffa8\032\uffa8\033\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8" +
    "\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\064" +
    "\uffa8\067\uffa8\070\uffa8\071\uffa8\077\uffa8\001\002\000\004" +
    "\067\214\001\002\000\006\077\216\101\uffb4\001\002\000" +
    "\004\101\221\001\002\000\030\004\113\005\124\006\120" +
    "\007\116\010\123\011\122\012\114\067\126\100\ufff1\104" +
    "\117\106\112\001\002\000\004\100\220\001\002\000\052" +
    "\002\uffb5\034\uffb5\035\uffb5\052\uffb5\053\uffb5\055\uffb5\056" +
    "\uffb5\057\uffb5\066\uffb5\072\uffb5\100\uffb5\101\uffb5\112\uffb5" +
    "\113\uffb5\114\uffb5\116\uffb5\117\uffb5\121\uffb5\122\uffb5\123" +
    "\uffb5\001\002\000\004\067\223\001\002\000\004\100\224" +
    "\001\002\000\004\110\127\001\002\000\060\002\uffce\034" +
    "\uffce\035\uffce\052\uffce\053\uffce\055\uffce\056\uffce\057\uffce" +
    "\060\uffce\061\uffce\062\uffce\063\uffce\066\uffce\072\uffce\100" +
    "\uffce\112\uffce\113\uffce\114\uffce\116\uffce\117\uffce\121\uffce" +
    "\122\uffce\123\uffce\001\002\000\026\004\113\005\124\006" +
    "\120\007\116\010\123\011\122\012\114\067\126\104\117" +
    "\106\112\001\002\000\004\101\227\001\002\000\026\004" +
    "\113\005\124\006\120\007\116\010\123\011\122\012\114" +
    "\067\126\104\117\106\112\001\002\000\004\100\231\001" +
    "\002\000\060\002\uffd3\034\uffd3\035\uffd3\052\uffd3\053\uffd3" +
    "\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063" +
    "\uffd3\066\uffd3\072\uffd3\100\uffd3\112\uffd3\113\uffd3\114\uffd3" +
    "\116\uffd3\117\uffd3\121\uffd3\122\uffd3\123\uffd3\001\002\000" +
    "\030\004\113\005\124\006\120\007\116\010\123\011\122" +
    "\012\114\067\126\100\ufff1\104\117\106\112\001\002\000" +
    "\004\100\234\001\002\000\060\002\uffcc\034\uffcc\035\uffcc" +
    "\052\uffcc\053\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061" +
    "\uffcc\062\uffcc\063\uffcc\066\uffcc\072\uffcc\100\uffcc\112\uffcc" +
    "\113\uffcc\114\uffcc\116\uffcc\117\uffcc\121\uffcc\122\uffcc\123" +
    "\uffcc\001\002\000\030\004\113\005\124\006\120\007\116" +
    "\010\123\011\122\012\114\067\126\100\ufff1\104\117\106" +
    "\112\001\002\000\004\100\237\001\002\000\060\002\uffe5" +
    "\034\uffe5\035\uffe5\052\uffe5\053\uffe5\055\uffe5\056\uffe5\057" +
    "\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\066\uffe5\072\uffe5" +
    "\100\uffe5\112\uffe5\113\uffe5\114\uffe5\116\uffe5\117\uffe5\121" +
    "\uffe5\122\uffe5\123\uffe5\001\002\000\026\004\113\005\124" +
    "\006\120\007\116\010\123\011\122\012\114\067\126\104" +
    "\117\106\112\001\002\000\004\100\242\001\002\000\060" +
    "\002\uffe0\034\uffe0\035\uffe0\052\uffe0\053\uffe0\055\uffe0\056" +
    "\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\066\uffe0" +
    "\072\uffe0\100\uffe0\112\uffe0\113\uffe0\114\uffe0\116\uffe0\117" +
    "\uffe0\121\uffe0\122\uffe0\123\uffe0\001\002\000\026\004\113" +
    "\005\124\006\120\007\116\010\123\011\122\012\114\067" +
    "\126\104\117\106\112\001\002\000\004\101\245\001\002" +
    "\000\026\004\113\005\124\006\120\007\116\010\123\011" +
    "\122\012\114\067\126\104\117\106\112\001\002\000\004" +
    "\100\247\001\002\000\060\002\uffd9\034\uffd9\035\uffd9\052" +
    "\uffd9\053\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9" +
    "\062\uffd9\063\uffd9\066\uffd9\072\uffd9\100\uffd9\112\uffd9\113" +
    "\uffd9\114\uffd9\116\uffd9\117\uffd9\121\uffd9\122\uffd9\123\uffd9" +
    "\001\002\000\050\002\uffb6\034\uffb6\035\uffb6\052\uffb6\053" +
    "\uffb6\055\uffb6\056\uffb6\057\uffb6\066\uffb6\072\uffb6\100\uffb6" +
    "\112\uffb6\113\uffb6\114\uffb6\116\uffb6\117\uffb6\121\uffb6\122" +
    "\uffb6\123\uffb6\001\002\000\026\004\113\005\124\006\120" +
    "\007\116\010\123\011\122\012\114\067\126\104\117\106" +
    "\112\001\002\000\060\002\uffca\034\uffca\035\uffca\052\uffca" +
    "\053\uffca\055\uffca\056\uffca\057\uffca\060\uffca\061\uffca\062" +
    "\uffca\063\uffca\066\uffca\072\uffca\100\uffca\112\uffca\113\uffca" +
    "\114\uffca\116\uffca\117\uffca\121\uffca\122\uffca\123\uffca\001" +
    "\002\000\030\004\113\005\124\006\120\007\116\010\123" +
    "\011\122\012\114\067\126\100\ufff1\104\117\106\112\001" +
    "\002\000\004\100\255\001\002\000\060\002\uffcd\034\uffcd" +
    "\035\uffcd\052\uffcd\053\uffcd\055\uffcd\056\uffcd\057\uffcd\060" +
    "\uffcd\061\uffcd\062\uffcd\063\uffcd\066\uffcd\072\uffcd\100\uffcd" +
    "\112\uffcd\113\uffcd\114\uffcd\116\uffcd\117\uffcd\121\uffcd\122" +
    "\uffcd\123\uffcd\001\002\000\026\004\113\005\124\006\120" +
    "\007\116\010\123\011\122\012\114\067\126\104\117\106" +
    "\112\001\002\000\004\100\260\001\002\000\060\002\uffe4" +
    "\034\uffe4\035\uffe4\052\uffe4\053\uffe4\055\uffe4\056\uffe4\057" +
    "\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4\066\uffe4\072\uffe4" +
    "\100\uffe4\112\uffe4\113\uffe4\114\uffe4\116\uffe4\117\uffe4\121" +
    "\uffe4\122\uffe4\123\uffe4\001\002\000\026\004\113\005\124" +
    "\006\120\007\116\010\123\011\122\012\114\067\126\104" +
    "\117\106\112\001\002\000\004\101\263\001\002\000\026" +
    "\004\113\005\124\006\120\007\116\010\123\011\122\012" +
    "\114\067\126\104\117\106\112\001\002\000\004\100\265" +
    "\001\002\000\060\002\uffdb\034\uffdb\035\uffdb\052\uffdb\053" +
    "\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb" +
    "\063\uffdb\066\uffdb\072\uffdb\100\uffdb\112\uffdb\113\uffdb\114" +
    "\uffdb\116\uffdb\117\uffdb\121\uffdb\122\uffdb\123\uffdb\001\002" +
    "\000\026\004\113\005\124\006\120\007\116\010\123\011" +
    "\122\012\114\067\126\104\117\106\112\001\002\000\004" +
    "\101\270\001\002\000\026\004\113\005\124\006\120\007" +
    "\116\010\123\011\122\012\114\067\126\104\117\106\112" +
    "\001\002\000\004\100\272\001\002\000\060\002\uffdc\034" +
    "\uffdc\035\uffdc\052\uffdc\053\uffdc\055\uffdc\056\uffdc\057\uffdc" +
    "\060\uffdc\061\uffdc\062\uffdc\063\uffdc\066\uffdc\072\uffdc\100" +
    "\uffdc\112\uffdc\113\uffdc\114\uffdc\116\uffdc\117\uffdc\121\uffdc" +
    "\122\uffdc\123\uffdc\001\002\000\026\004\113\005\124\006" +
    "\120\007\116\010\123\011\122\012\114\067\126\104\117" +
    "\106\112\001\002\000\004\100\275\001\002\000\060\002" +
    "\uffe2\034\uffe2\035\uffe2\052\uffe2\053\uffe2\055\uffe2\056\uffe2" +
    "\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\066\uffe2\072" +
    "\uffe2\100\uffe2\112\uffe2\113\uffe2\114\uffe2\116\uffe2\117\uffe2" +
    "\121\uffe2\122\uffe2\123\uffe2\001\002\000\026\004\113\005" +
    "\124\006\120\007\116\010\123\011\122\012\114\067\126" +
    "\104\117\106\112\001\002\000\004\101\300\001\002\000" +
    "\026\004\113\005\124\006\120\007\116\010\123\011\122" +
    "\012\114\067\126\104\117\106\112\001\002\000\004\100" +
    "\302\001\002\000\060\002\uffd8\034\uffd8\035\uffd8\052\uffd8" +
    "\053\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062" +
    "\uffd8\063\uffd8\066\uffd8\072\uffd8\100\uffd8\112\uffd8\113\uffd8" +
    "\114\uffd8\116\uffd8\117\uffd8\121\uffd8\122\uffd8\123\uffd8\001" +
    "\002\000\026\004\113\005\124\006\120\007\116\010\123" +
    "\011\122\012\114\067\126\104\117\106\112\001\002\000" +
    "\004\100\305\001\002\000\060\002\uffd5\034\uffd5\035\uffd5" +
    "\052\uffd5\053\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061" +
    "\uffd5\062\uffd5\063\uffd5\066\uffd5\072\uffd5\100\uffd5\112\uffd5" +
    "\113\uffd5\114\uffd5\116\uffd5\117\uffd5\121\uffd5\122\uffd5\123" +
    "\uffd5\001\002\000\004\051\307\001\002\000\102\013\037" +
    "\014\072\015\061\016\105\017\071\020\065\021\106\022" +
    "\066\023\073\024\064\025\103\026\070\027\060\030\041" +
    "\031\074\032\052\033\053\037\075\040\110\041\051\042" +
    "\046\043\043\044\062\045\040\046\057\047\050\050\056" +
    "\064\077\067\067\070\100\071\044\077\102\001\002\000" +
    "\022\052\312\053\311\055\165\056\163\057\167\112\170" +
    "\113\171\114\164\001\002\000\050\002\uffb9\034\uffb9\035" +
    "\uffb9\052\uffb9\053\uffb9\055\uffb9\056\uffb9\057\uffb9\066\uffb9" +
    "\072\uffb9\100\uffb9\112\uffb9\113\uffb9\114\uffb9\116\uffb9\117" +
    "\uffb9\121\uffb9\122\uffb9\123\uffb9\001\002\000\102\013\037" +
    "\014\072\015\061\016\105\017\071\020\065\021\106\022" +
    "\066\023\073\024\064\025\103\026\070\027\060\030\041" +
    "\031\074\032\052\033\053\037\075\040\110\041\051\042" +
    "\046\043\043\044\062\045\040\046\057\047\050\050\056" +
    "\064\077\067\067\070\100\071\044\077\102\001\002\000" +
    "\020\053\314\055\165\056\163\057\167\112\170\113\171" +
    "\114\164\001\002\000\050\002\uffb8\034\uffb8\035\uffb8\052" +
    "\uffb8\053\uffb8\055\uffb8\056\uffb8\057\uffb8\066\uffb8\072\uffb8" +
    "\100\uffb8\112\uffb8\113\uffb8\114\uffb8\116\uffb8\117\uffb8\121" +
    "\uffb8\122\uffb8\123\uffb8\001\002\000\026\004\113\005\124" +
    "\006\120\007\116\010\123\011\122\012\114\067\126\104" +
    "\117\106\112\001\002\000\004\101\317\001\002\000\026" +
    "\004\113\005\124\006\120\007\116\010\123\011\122\012" +
    "\114\067\126\104\117\106\112\001\002\000\004\100\321" +
    "\001\002\000\060\002\uffd1\034\uffd1\035\uffd1\052\uffd1\053" +
    "\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1" +
    "\063\uffd1\066\uffd1\072\uffd1\100\uffd1\112\uffd1\113\uffd1\114" +
    "\uffd1\116\uffd1\117\uffd1\121\uffd1\122\uffd1\123\uffd1\001\002" +
    "\000\026\004\113\005\124\006\120\007\116\010\123\011" +
    "\122\012\114\067\126\104\117\106\112\001\002\000\004" +
    "\101\324\001\002\000\026\004\113\005\124\006\120\007" +
    "\116\010\123\011\122\012\114\067\126\104\117\106\112" +
    "\001\002\000\004\100\326\001\002\000\060\002\uffd2\034" +
    "\uffd2\035\uffd2\052\uffd2\053\uffd2\055\uffd2\056\uffd2\057\uffd2" +
    "\060\uffd2\061\uffd2\062\uffd2\063\uffd2\066\uffd2\072\uffd2\100" +
    "\uffd2\112\uffd2\113\uffd2\114\uffd2\116\uffd2\117\uffd2\121\uffd2" +
    "\122\uffd2\123\uffd2\001\002\000\026\004\113\005\124\006" +
    "\120\007\116\010\123\011\122\012\114\067\126\104\117" +
    "\106\112\001\002\000\004\100\331\001\002\000\060\002" +
    "\uffde\034\uffde\035\uffde\052\uffde\053\uffde\055\uffde\056\uffde" +
    "\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde\066\uffde\072" +
    "\uffde\100\uffde\112\uffde\113\uffde\114\uffde\116\uffde\117\uffde" +
    "\121\uffde\122\uffde\123\uffde\001\002\000\026\004\113\005" +
    "\124\006\120\007\116\010\123\011\122\012\114\067\126" +
    "\104\117\106\112\001\002\000\004\101\334\001\002\000" +
    "\026\004\113\005\124\006\120\007\116\010\123\011\122" +
    "\012\114\067\126\104\117\106\112\001\002\000\004\100" +
    "\336\001\002\000\060\002\uffd4\034\uffd4\035\uffd4\052\uffd4" +
    "\053\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062" +
    "\uffd4\063\uffd4\066\uffd4\072\uffd4\100\uffd4\112\uffd4\113\uffd4" +
    "\114\uffd4\116\uffd4\117\uffd4\121\uffd4\122\uffd4\123\uffd4\001" +
    "\002\000\026\004\113\005\124\006\120\007\116\010\123" +
    "\011\122\012\114\067\126\104\117\106\112\001\002\000" +
    "\004\101\341\001\002\000\026\004\113\005\124\006\120" +
    "\007\116\010\123\011\122\012\114\067\126\104\117\106" +
    "\112\001\002\000\004\100\343\001\002\000\050\002\uffb7" +
    "\034\uffb7\035\uffb7\052\uffb7\053\uffb7\055\uffb7\056\uffb7\057" +
    "\uffb7\066\uffb7\072\uffb7\100\uffb7\112\uffb7\113\uffb7\114\uffb7" +
    "\116\uffb7\117\uffb7\121\uffb7\122\uffb7\123\uffb7\001\002\000" +
    "\026\004\113\005\124\006\120\007\116\010\123\011\122" +
    "\012\114\067\126\104\117\106\112\001\002\000\004\101" +
    "\346\001\002\000\026\004\113\005\124\006\120\007\116" +
    "\010\123\011\122\012\114\067\126\104\117\106\112\001" +
    "\002\000\004\100\350\001\002\000\060\002\uffdd\034\uffdd" +
    "\035\uffdd\052\uffdd\053\uffdd\055\uffdd\056\uffdd\057\uffdd\060" +
    "\uffdd\061\uffdd\062\uffdd\063\uffdd\066\uffdd\072\uffdd\100\uffdd" +
    "\112\uffdd\113\uffdd\114\uffdd\116\uffdd\117\uffdd\121\uffdd\122" +
    "\uffdd\123\uffdd\001\002\000\026\004\113\005\124\006\120" +
    "\007\116\010\123\011\122\012\114\067\126\104\117\106" +
    "\112\001\002\000\004\101\353\001\002\000\026\004\113" +
    "\005\124\006\120\007\116\010\123\011\122\012\114\067" +
    "\126\104\117\106\112\001\002\000\004\100\355\001\002" +
    "\000\060\002\uffd6\034\uffd6\035\uffd6\052\uffd6\053\uffd6\055" +
    "\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6" +
    "\066\uffd6\072\uffd6\100\uffd6\112\uffd6\113\uffd6\114\uffd6\116" +
    "\uffd6\117\uffd6\121\uffd6\122\uffd6\123\uffd6\001\002\000\026" +
    "\004\113\005\124\006\120\007\116\010\123\011\122\012" +
    "\114\067\126\104\117\106\112\001\002\000\004\100\360" +
    "\001\002\000\060\002\uffcb\034\uffcb\035\uffcb\052\uffcb\053" +
    "\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb" +
    "\063\uffcb\066\uffcb\072\uffcb\100\uffcb\112\uffcb\113\uffcb\114" +
    "\uffcb\116\uffcb\117\uffcb\121\uffcb\122\uffcb\123\uffcb\001\002" +
    "\000\030\004\113\005\124\006\120\007\116\010\123\011" +
    "\122\012\114\067\126\100\ufff1\104\117\106\112\001\002" +
    "\000\004\100\363\001\002\000\060\002\uffe6\034\uffe6\035" +
    "\uffe6\052\uffe6\053\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6" +
    "\061\uffe6\062\uffe6\063\uffe6\066\uffe6\072\uffe6\100\uffe6\112" +
    "\uffe6\113\uffe6\114\uffe6\116\uffe6\117\uffe6\121\uffe6\122\uffe6" +
    "\123\uffe6\001\002\000\004\077\u0109\001\002\000\004\077" +
    "\u0106\001\002\000\004\077\377\001\002\000\004\077\370" +
    "\001\002\000\030\004\113\005\124\006\120\007\116\010" +
    "\123\011\122\012\114\067\126\100\ufff1\104\117\106\112" +
    "\001\002\000\004\100\372\001\002\000\052\002\uffc5\034" +
    "\uffc5\035\uffc5\052\uffc5\053\uffc5\055\uffc5\056\uffc5\057\uffc5" +
    "\063\373\066\uffc5\072\uffc5\100\uffc5\112\uffc5\113\uffc5\114" +
    "\uffc5\116\uffc5\117\uffc5\121\uffc5\122\uffc5\123\uffc5\001\002" +
    "\000\004\077\374\001\002\000\030\004\113\005\124\006" +
    "\120\007\116\010\123\011\122\012\114\067\126\100\ufff1" +
    "\104\117\106\112\001\002\000\004\100\376\001\002\000" +
    "\050\002\uffc4\034\uffc4\035\uffc4\052\uffc4\053\uffc4\055\uffc4" +
    "\056\uffc4\057\uffc4\066\uffc4\072\uffc4\100\uffc4\112\uffc4\113" +
    "\uffc4\114\uffc4\116\uffc4\117\uffc4\121\uffc4\122\uffc4\123\uffc4" +
    "\001\002\000\026\004\113\005\124\006\120\007\116\010" +
    "\123\011\122\012\114\067\126\104\117\106\112\001\002" +
    "\000\004\100\u0101\001\002\000\052\002\uffc8\034\uffc8\035" +
    "\uffc8\052\uffc8\053\uffc8\055\uffc8\056\uffc8\057\uffc8\062\u0102" +
    "\066\uffc8\072\uffc8\100\uffc8\112\uffc8\113\uffc8\114\uffc8\116" +
    "\uffc8\117\uffc8\121\uffc8\122\uffc8\123\uffc8\001\002\000\004" +
    "\077\u0103\001\002\000\026\004\113\005\124\006\120\007" +
    "\116\010\123\011\122\012\114\067\126\104\117\106\112" +
    "\001\002\000\004\100\u0105\001\002\000\050\002\uffc6\034" +
    "\uffc6\035\uffc6\052\uffc6\053\uffc6\055\uffc6\056\uffc6\057\uffc6" +
    "\066\uffc6\072\uffc6\100\uffc6\112\uffc6\113\uffc6\114\uffc6\116" +
    "\uffc6\117\uffc6\121\uffc6\122\uffc6\123\uffc6\001\002\000\030" +
    "\004\113\005\124\006\120\007\116\010\123\011\122\012" +
    "\114\067\126\100\ufff1\104\117\106\112\001\002\000\004" +
    "\100\u0108\001\002\000\050\002\uffc3\034\uffc3\035\uffc3\052" +
    "\uffc3\053\uffc3\055\uffc3\056\uffc3\057\uffc3\066\uffc3\072\uffc3" +
    "\100\uffc3\112\uffc3\113\uffc3\114\uffc3\116\uffc3\117\uffc3\121" +
    "\uffc3\122\uffc3\123\uffc3\001\002\000\026\004\113\005\124" +
    "\006\120\007\116\010\123\011\122\012\114\067\126\104" +
    "\117\106\112\001\002\000\004\100\u010b\001\002\000\050" +
    "\002\uffc7\034\uffc7\035\uffc7\052\uffc7\053\uffc7\055\uffc7\056" +
    "\uffc7\057\uffc7\066\uffc7\072\uffc7\100\uffc7\112\uffc7\113\uffc7" +
    "\114\uffc7\116\uffc7\117\uffc7\121\uffc7\122\uffc7\123\uffc7\001" +
    "\002\000\006\100\uffaf\101\u0113\001\002\000\004\111\u0110" +
    "\001\002\000\004\100\u010f\001\002\000\004\036\uffb3\001" +
    "\002\000\026\004\113\005\124\006\120\007\116\010\123" +
    "\011\122\012\114\067\126\104\117\106\112\001\002\000" +
    "\010\100\uffb1\101\uffb1\110\u0112\001\002\000\006\100\uffb0" +
    "\101\uffb0\001\002\000\004\067\u010d\001\002\000\004\100" +
    "\uffae\001\002\000\022\034\uff8b\035\uff8b\072\uff8b\116\uff8b" +
    "\117\uff8b\121\uff8b\122\uff8b\123\uff8b\001\002\000\004\002" +
    "\000\001\002\000\024\002\uff8f\034\uff8f\035\uff8f\072\uff8f" +
    "\116\uff8f\117\uff8f\121\uff8f\122\uff8f\123\uff8f\001\002\000" +
    "\006\002\uff9a\123\uff9a\001\002\000\006\002\uff96\123\uff96" +
    "\001\002\000\004\036\u011b\001\002\000\004\102\u011c\001" +
    "\002\000\014\073\uffa1\074\u011d\075\uffa1\076\uffa1\103\uffa1" +
    "\001\002\000\004\115\u012c\001\002\000\012\073\u0120\075" +
    "\uffa3\076\uffa3\103\uffa3\001\002\000\010\075\u0123\076\uff9f" +
    "\103\uff9f\001\002\000\004\115\u0121\001\002\000\004\006" +
    "\u0122\001\002\000\010\075\uffa4\076\uffa4\103\uffa4\001\002" +
    "\000\004\115\u012a\001\002\000\006\076\u0125\103\uff9d\001" +
    "\002\000\004\115\u0128\001\002\000\004\103\u0127\001\002" +
    "\000\024\002\uff9c\034\uff9c\035\uff9c\072\uff9c\116\uff9c\117" +
    "\uff9c\121\uff9c\122\uff9c\123\uff9c\001\002\000\004\006\u0129" +
    "\001\002\000\004\103\uff9e\001\002\000\004\006\u012b\001" +
    "\002\000\006\076\uffa0\103\uffa0\001\002\000\004\006\u012d" +
    "\001\002\000\012\073\uffa2\075\uffa2\076\uffa2\103\uffa2\001" +
    "\002\000\006\002\uff99\123\uff99\001\002\000\006\002\uff98" +
    "\123\uff98\001\002\000\006\002\uff95\123\uff95\001\002\000" +
    "\004\067\u0133\001\002\000\004\100\u0138\001\002\000\010" +
    "\077\216\100\uffb4\101\uffb4\001\002\000\006\100\uff93\101" +
    "\u0135\001\002\000\004\067\u0133\001\002\000\004\100\uff92" +
    "\001\002\000\006\100\uff94\101\uff94\001\002\000\024\002" +
    "\uff91\034\uff91\035\uff91\072\uff91\116\uff91\117\uff91\121\uff91" +
    "\122\uff91\123\uff91\001\002\000\050\002\uff8e\004\113\005" +
    "\124\006\120\007\116\010\123\011\122\012\114\034\uff8e" +
    "\035\uff8e\067\126\072\uff8e\104\117\106\112\116\uff8e\117" +
    "\uff8e\121\uff8e\122\uff8e\123\uff8e\001\002\000\024\002\uff8d" +
    "\034\uff8d\035\uff8d\072\uff8d\116\uff8d\117\uff8d\121\uff8d\122" +
    "\uff8d\123\uff8d\001\002\000\022\034\uff8c\035\uff8c\072\uff8c" +
    "\116\uff8c\117\uff8c\121\uff8c\122\uff8c\123\uff8c\001\002\000" +
    "\006\002\uff97\123\uff97\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013a\000\026\034\015\041\011\042\014\045\010\046" +
    "\021\047\017\050\013\051\003\052\023\053\007\001\001" +
    "\000\024\034\015\041\011\042\u013b\045\010\046\021\050" +
    "\013\051\003\052\023\053\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\034\015\041" +
    "\011\042\u012f\045\010\046\021\050\013\051\003\052\023" +
    "\053\007\001\001\000\024\034\015\041\011\042\u012e\045" +
    "\010\046\021\050\013\051\003\052\023\053\007\001\001" +
    "\000\024\034\015\041\011\042\u012d\045\010\046\021\050" +
    "\013\051\003\052\023\053\007\001\001\000\002\001\001" +
    "\000\024\034\015\041\011\042\u0118\045\010\046\021\050" +
    "\013\051\003\052\023\053\007\001\001\000\002\001\001" +
    "\000\024\034\015\041\011\042\u0117\045\010\046\021\050" +
    "\013\051\003\052\023\053\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\026\001\001\000\024\034\015\041\011\042\024" +
    "\045\010\046\021\050\013\051\003\052\023\053\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\031" +
    "\001\001\000\002\001\001\000\006\024\u010b\025\u010d\001" +
    "\001\000\002\001\001\000\034\006\033\007\053\010\106" +
    "\011\041\012\075\013\044\014\054\015\103\016\035\017" +
    "\062\020\034\021\046\031\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\305\003\120\004\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\247\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\203\030\202\001\001\000\002\001\001" +
    "\000\036\006\033\007\053\010\106\011\041\012\075\013" +
    "\044\014\054\015\103\016\035\017\177\020\034\021\046" +
    "\031\100\032\200\001\001\000\034\006\033\007\053\010" +
    "\106\011\041\012\075\013\044\014\054\015\103\016\035" +
    "\017\161\020\034\021\046\031\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\114\003" +
    "\120\004\124\001\001\000\012\002\134\003\120\004\124" +
    "\005\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\002\127\003\120" +
    "\004\124\026\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\134\003\120\004\124\005\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\134\003\120\004\124\005\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\144\003\120\004\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\147\003\120\004\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\152\003" +
    "\120\004\124\001\001\000\002\001\001\000\010\002\154" +
    "\003\120\004\124\001\001\000\002\001\001\000\010\002" +
    "\157\003\120\004\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\006" +
    "\033\007\053\010\106\011\041\012\075\013\044\014\054" +
    "\015\103\016\035\017\176\020\034\021\046\031\100\001" +
    "\001\000\034\006\033\007\053\010\106\011\041\012\075" +
    "\013\044\014\054\015\103\016\035\017\175\020\034\021" +
    "\046\031\100\001\001\000\034\006\033\007\053\010\106" +
    "\011\041\012\075\013\044\014\054\015\103\016\035\017" +
    "\174\020\034\021\046\031\100\001\001\000\002\001\001" +
    "\000\034\006\033\007\053\010\106\011\041\012\075\013" +
    "\044\014\054\015\103\016\035\017\173\020\034\021\046" +
    "\031\100\001\001\000\034\006\033\007\053\010\106\011" +
    "\041\012\075\013\044\014\054\015\103\016\035\017\172" +
    "\020\034\021\046\031\100\001\001\000\034\006\033\007" +
    "\053\010\106\011\041\012\075\013\044\014\054\015\103" +
    "\016\035\017\171\020\034\021\046\031\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\002\127\003" +
    "\120\004\124\026\206\001\001\000\002\001\001\000\006" +
    "\027\203\030\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\214\001\001\000\002" +
    "\001\001\000\012\002\134\003\120\004\124\005\216\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\225\003\120\004\124\001\001\000\002" +
    "\001\001\000\010\002\227\003\120\004\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\002\134\003\120" +
    "\004\124\005\232\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\002\134\003\120\004\124\005\235\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\240\003" +
    "\120\004\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\243\003\120\004\124\001\001\000\002\001" +
    "\001\000\010\002\245\003\120\004\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\002" +
    "\251\003\120\004\124\001\001\000\002\001\001\000\012" +
    "\002\134\003\120\004\124\005\253\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\256\003\120\004\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\002" +
    "\261\003\120\004\124\001\001\000\002\001\001\000\010" +
    "\002\263\003\120\004\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\266\003\120\004\124\001\001" +
    "\000\002\001\001\000\010\002\270\003\120\004\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\273" +
    "\003\120\004\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\276\003\120\004\124\001\001\000\002" +
    "\001\001\000\010\002\300\003\120\004\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\303\003\120" +
    "\004\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\006\033\007\053\010\106\011\041" +
    "\012\075\013\044\014\054\015\103\016\035\017\307\020" +
    "\034\021\046\031\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\033\007\053\010\106\011\041\012" +
    "\075\013\044\014\054\015\103\016\035\017\312\020\034" +
    "\021\046\031\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\315\003\120\004\124\001\001\000\002" +
    "\001\001\000\010\002\317\003\120\004\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\322\003\120" +
    "\004\124\001\001\000\002\001\001\000\010\002\324\003" +
    "\120\004\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\327\003\120\004\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\332\003\120\004\124" +
    "\001\001\000\002\001\001\000\010\002\334\003\120\004" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\337\003\120\004\124\001\001\000\002\001\001\000" +
    "\010\002\341\003\120\004\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\344\003\120\004\124\001" +
    "\001\000\002\001\001\000\010\002\346\003\120\004\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\002" +
    "\351\003\120\004\124\001\001\000\002\001\001\000\010" +
    "\002\353\003\120\004\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\356\003\120\004\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\002\134\003" +
    "\120\004\124\005\361\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\002\134\003\120\004\124" +
    "\005\370\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\134\003\120\004\124\005\374" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\002" +
    "\377\003\120\004\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\u0103\003\120\004" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\002\134\003\120\004\124\005\u0106\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\u0109\003\120\004\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\127\003\120\004\124\026\u0110\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\u010b\025\u0113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\u011d\001" +
    "\001\000\002\001\001\000\004\035\u011e\001\001\000\004" +
    "\037\u0123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\u0125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\043\u0133" +
    "\044\u0131\001\001\000\002\001\001\000\004\022\u0136\001" +
    "\001\000\002\001\001\000\006\043\u0133\044\u0135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\u0139\003\120\004\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




   protected ToolBus toolbus;
   protected TBTermFactory tbfactory;
   protected String fileName;
   protected String processName = "";
   private HashSet<String> includedFiles = new HashSet<String>();
   protected List<ATerm> toolbusProcessCalls = new ArrayList<ATerm>();
   
   protected HashMap<String, ATerm> declaredVaribles = new HashMap<String, ATerm>();
   
   protected Stack<Boolean> ifdefStack;
	
   /** ToolBus specific constructor */
   public parser(HashSet<String> includedFiles, List<ATerm> toolbusProcessCalls, String filename, ToolBus tb) throws FileNotFoundException  {
     super(new Lexer(new FileInputStream(filename)));
     
     this.includedFiles = includedFiles;
     this.toolbusProcessCalls = toolbusProcessCalls;
     this.fileName = filename;
     
     includedFiles.add(filename);
     
     toolbus = tb;
     tbfactory = toolbus.getTBTermFactory();
     
     ifdefStack = new Stack<Boolean>();
     ifdefStack.push(new Boolean(true));
   }
   
   /** ToolBus specific constructor */
   public parser(String filename, ToolBus tb) throws FileNotFoundException  {
     this(new HashSet<String>(), new ArrayList<ATerm>(), filename, tb);
   }
   
   public String[] scriptsNames(){
		List<String> scriptNamesList = new ArrayList<String>();
		Iterator<String> scriptNamesIterator = includedFiles.iterator();
		while(scriptNamesIterator.hasNext()){
			scriptNamesList.add(scriptNamesIterator.next());
		}
		
		String[] scriptNames = new String[scriptNamesList.size()];
		return scriptNamesList.toArray(scriptNames);
   }
   
   protected void enterIfdef (boolean yesOrno){
      ifdefStack.push(new Boolean(yesOrno));
   }
   
   protected void leaveIfdef(){
      ifdefStack.pop();
   }
   
   protected boolean generating() {
   	  return ifdefStack.peek().booleanValue();
   }
  
   protected void doParseInclude(String filename) throws ToolBusException{
		if(filename.length() > 0 && filename.charAt(0) == File.separatorChar){
			File f = new File(filename);
			if(f.exists()){
				doParse(filename);
				return;
			}
		}else{
			String path = toolbus.getProperty("include.path", ".");
			LoggerFactory.log("unknown", "doParseInclude: path = " + path, IToolBusLoggerConstants.PARSING);
			
			String[] elems = path.split("[ ,\t\n\r]+");
			for(int i = 0; i < elems.length; i++){
				String dir = elems[i];
				
				if(dir.length() > 0){
					String absoluteName = dir + File.separator + filename;
					File f = new File(absoluteName);
					if(f.exists()){
						doParse(absoluteName);
						return;
					}
				}
			}
		}
		throw new ToolBusException("Cannot resolve include file '" + filename + "'");
	} 
	
	private void doParse(String filename) {
		if(includedFiles.contains(filename)){
			//System.err.println("Skipping include of " + filename);
			return;
		}
		
		includedFiles.add(filename);
		//System.err.println("Parse: " + filename);
		toolbus.parsecup1(includedFiles, toolbusProcessCalls, filename);
        //System.err.println("Parse: back to " + filename);
	}
	
	public void generateInitialProcessCalls() throws ToolBusException {
	    for(ATerm call: toolbusProcessCalls){
	       toolbus.addProcess(new ProcessCall(call, tbfactory, null));
	    }
	}
    
    public void syntax_error(java_cup.runtime.Symbol badToken){
    	throw new SyntaxErrorException("Syntax error in "+fileName+", at line: "+(badToken.left + 1)+", column: "+(badToken.right + 1)+", symbol id: "+badToken.sym);
    }
	
	private class SyntaxErrorException extends RuntimeException{
		private static final long serialVersionUID = 2315538188275748342L;

		public SyntaxErrorException(String message){
			super(message);
		}
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


  private PositionInformation makePosInfo(java_cup.runtime.Symbol beginSymbol, java_cup.runtime.Symbol endSymbol){
    return new PositionInformation(parser.fileName, beginSymbol.left, beginSymbol.right, endSymbol.left, endSymbol.right);
  }
  
  private PositionInformation makePosInfoWithEndColumnOffset(java_cup.runtime.Symbol beginSymbol, java_cup.runtime.Symbol endSymbol, int endColumnOffset){
    return new PositionInformation(parser.fileName, beginSymbol.left, beginSymbol.right, endSymbol.left, endSymbol.right + endColumnOffset);
  }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ifdef ::= ifdef_head def_list ENDIF 
            {
              Object RESULT =null;
		 
                                               parser.leaveIfdef();
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifdef",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ifdef_head ::= IFNDEF NAME 
            {
              Object RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //System.err.println("ifndef " + nm);
                                               if(parser.generating()){
                                                 boolean yes = parser.toolbus.getProperty(nm) == null;
                                                 parser.enterIfdef(yes);
                                               }
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifdef_head",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ifdef_head ::= IFDEF NAME 
            {
              Object RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //System.err.println("ifdef " + nm);
                                                if(parser.generating()){
         									      boolean yes = parser.toolbus.getProperty(nm) != null;
                                                  parser.enterIfdef(yes);
                                                }
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifdef_head",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // define ::= DEFINE NAME term 
            {
              Object RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.generating()){
          										   //System.err.println("define " + nm + " = " + t);
       											   parser.toolbus.setProperty(nm, t.toString()); 
       											}
       										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("define",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // define ::= DEFINE NAME 
            {
              Object RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.generating()){
         										   //System.err.println("define " + nm);
         										   parser.toolbus.setProperty(nm, ""); 
         									   }
         									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("define",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // include ::= INCLUDE FILENAME 
            {
              Object RESULT =null;
		String fn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.generating()){
                                                 parser.doParseInclude(fn);
                                               }
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("include",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // toolbus_def ::= toolbus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("toolbus_def",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // toolbus ::= TOOLBUS LPAR proc_call_in_tb_list RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("toolbus",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // proc_call_in_tb_list ::= proc_call_in_tb COMMA proc_call_in_tb_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_call_in_tb_list",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // proc_call_in_tb_list ::= proc_call_in_tb 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_call_in_tb_list",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // proc_call_in_tb ::= NAME actuals 
            {
              Object RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ATermList act = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.generating()){
       											  AFun af = parser.tbfactory.makeAFun(nm.toString(), act.getLength(), false);
     										      ATerm call = parser.tbfactory.makeApplList(af, act);
     										      parser.toolbusProcessCalls.add(call);
     										      //System.err.println("add to toolbusProcessCalls " + call);
     										   }
     										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_call_in_tb",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // def_list ::= ifdef def_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_list",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // def_list ::= define def_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_list",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // def_list ::= include def_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_list",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // def_list ::= toolbus_def def_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_list",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // def_list ::= tool_def def_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_list",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // def_list ::= proc_def def_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_list",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // def_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_list",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // tool_def ::= TOOL IDENT IS LBRACE host kind command class RBRACE 
            {
              Object RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		String h = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		String cmd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String cls = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.generating()){
                                                     ToolDefinition td = new ToolDefinition(nm, h, k, cmd, cls, parser.toolbus);
                                                     //System.err.println("Adding: " + td);
                                                     parser.toolbus.addToolDefinition(td);
                                                  }
                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_def",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // class ::= 
            {
              String RESULT =null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // class ::= CLASS EQUALS STRING 
            {
              String RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // command ::= 
            {
              String RESULT =null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // command ::= COMMAND EQUALS STRING 
            {
              String RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // host ::= 
            {
              String RESULT =null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("host",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // host ::= HOST EQUALS STRING 
            {
              String RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("host",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // kind ::= 
            {
              String RESULT =null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("kind",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // kind ::= KIND EQUALS STRING 
            {
              String RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("kind",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // proc_def ::= PROCESS proc_def_name formals IS proc 
            {
              ProcessDefinition RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATermList fml = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ProcessExpression p = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.generating()){
                                             	  ProcessDefinition pd = new ProcessDefinition(nm, fml, p, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)));
                                                  parser.toolbus.addProcessDefinition(pd); 
                                                  parser.processName = "";
                                                }
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_def",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // proc_def_name ::= NAME 
            {
              String RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.processName = nm;
                                                RESULT = nm; 
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_def_name",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // let_tail ::= proc ENDLET 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("let_tail",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // let_head ::= LET var_list IN 
            {
              ATermList RESULT =null;
		ATermList vl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = vl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("let_head",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // let ::= let_head let_tail 
            {
              ProcessExpression RESULT =null;
		ATermList vl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ProcessExpression p = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LetDefinition(vl, p, parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("let",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // var_list ::= var_decl COMMA var_list 
            {
              ATermList RESULT =null;
		ATerm vd = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ATermList vl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.tbfactory.makeList(vd, vl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // var_list ::= var_decl 
            {
              ATermList RESULT =null;
		ATerm vd = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.tbfactory.makeList(vd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // var_decl ::= NAME COLON type 
            {
              ATerm RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ATerm tp = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 AFun af = parser.tbfactory.makeAFun(nm.toString(), 0, false);
       											parser.declaredVaribles.put(nm, tp);
                                                RESULT = parser.tbfactory.mkVar(af, parser.processName, tp);
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // type ::= term 
            {
              ATerm RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // form_list ::= form_decl COMMA form_list 
            {
              ATermList RESULT =null;
		ATerm fd = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ATermList fdl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.tbfactory.makeList(fd, fdl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_list",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // form_list ::= form_decl 
            {
              ATermList RESULT =null;
		ATerm fd = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.tbfactory.makeList(fd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_list",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // form_decl ::= NAME COLON type QUESTION 
            {
              ATerm RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm tp = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 AFun af = parser.tbfactory.makeAFun(nm, 0, false);
                                                parser.declaredVaribles.put(nm, tp);
                                                RESULT = parser.tbfactory.mkResVar(af, parser.processName, tp);
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_decl",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // form_decl ::= NAME COLON type 
            {
              ATerm RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ATerm tp = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 AFun af = parser.tbfactory.makeAFun(nm, 0, false);
                                                parser.declaredVaribles.put(nm, tp);
                                                RESULT = parser.tbfactory.mkVar(af, parser.processName, tp);
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_decl",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // formals ::= 
            {
              ATermList RESULT =null;
		 RESULT = parser.tbfactory.makeList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // formals ::= LPAR form_list RPAR 
            {
              ATermList RESULT =null;
		ATermList fml = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = fml; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // actuals ::= 
            {
              ATermList RESULT =null;
		 RESULT = parser.tbfactory.makeList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actuals",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // actuals ::= LPAR term_list RPAR 
            {
              ATermList RESULT =null;
		ATermList tl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = tl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actuals",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // proc_call ::= NAME actuals 
            {
              ProcessExpression RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ATermList act = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 PositionInformation posInfo = makePosInfoWithEndColumnOffset((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1), nm.length());
                                               if(parser.declaredVaribles.get(nm) != parser.tbfactory.StrType) RESULT = new ProcessCall(nm, act, parser.tbfactory, posInfo);
                                               else RESULT = new DynamicProcessCall(nm, act, parser.tbfactory, posInfo);
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_call",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // proc ::= EXECUTE LPAR term COMMA term RPAR 
            {
              ProcessExpression RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm rv = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Execute ex = new Execute(t, rv, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top)));
				                               Connect con = new Connect(rv, parser.tbfactory, null, true);
				                               RESULT = new Sequence(ex, con, parser.tbfactory, null);
				                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // proc ::= IF term THEN proc ELSE proc FI 
            {
              ProcessExpression RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ProcessExpression p1 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ProcessExpression p2 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new IfElse(t, p1, p2, parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // proc ::= IF term THEN proc FI 
            {
              ProcessExpression RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ProcessExpression p = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfThen(t, p, parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // proc ::= let 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // proc ::= proc_call 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // proc ::= LPAR proc RPAR 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // proc ::= proc DISRUPT proc 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p1 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ProcessExpression p2 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Disrupt(p1, p2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // proc ::= proc FMERGE proc 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p1 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ProcessExpression p2 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Merge(p1, p2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // proc ::= proc ITER proc 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p1 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ProcessExpression p2 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sequence(new Tau(parser.tbfactory, null),
                                                                       new Iteration(p1, p2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1))),
                                                                       parser.tbfactory,
                                                                       null
                                                                      );
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // proc ::= proc SEQ proc 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p1 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ProcessExpression p2 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sequence(p1, p2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // proc ::= proc RIGHTCHOICE proc 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p1 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ProcessExpression p2 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RightBiasedAlternative(p1, p2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // proc ::= proc CHOICE proc 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p1 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ProcessExpression p2 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Alternative(p1, p2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // proc ::= atom ABS_TIMEOUT LPAR term_list RPAR 
            {
              ProcessExpression RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ATermList tl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			a.setAbsoluteTimeout(tl);
     												RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // proc ::= atom ABS_DELAY LPAR term_list RPAR ABS_TIMEOUT LPAR term_list RPAR 
            {
              ProcessExpression RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		ATermList dl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ATermList tl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			a.setAbsoluteDelay(dl);
     																					a.setAbsoluteTimeout(tl);
     																					RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // proc ::= atom ABS_DELAY LPAR term_list RPAR 
            {
              ProcessExpression RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ATermList dl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			a.setAbsoluteDelay(dl);
     												RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // proc ::= atom REL_DELAY LPAR term RPAR REL_TIMEOUT LPAR term RPAR 
            {
              ProcessExpression RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		ATerm d = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			a.setDelay(d);
																			a.setTimeout(t);
																			RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // proc ::= atom REL_TIMEOUT LPAR term RPAR 
            {
              ProcessExpression RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			a.setTimeout(t);
												RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // proc ::= atom REL_DELAY LPAR term RPAR 
            {
              ProcessExpression RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ATerm d = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			a.setDelay(d);
											RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // proc ::= atom 
            {
              ProcessExpression RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // assign ::= NAME ASSIGN term 
            {
              Atom RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ATerm tnm = parser.tbfactory.make(nm);
                                               ATerm type = parser.declaredVaribles.get(nm);
     									       if(type == null) throw new RuntimeException("Undeclared variable: "+nm);
        									   RESULT = new Assign(
        												   parser.tbfactory.mkVar(tnm, parser.processName, type),
        									               t,
        									               parser.tbfactory, 
        									               makePosInfoWithEndColumnOffset((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1), 2));
        								    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // shutdown ::= SHUTDOWN LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ShutDown(t, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shutdown",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // read_print ::= READ LPAR term_list RPAR 
            {
              Atom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_print",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // read_print ::= PRINTF LPAR term_list RPAR 
            {
              Atom RESULT =null;
		ATermList tl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Print(tl, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_print",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // create ::= CREATE LPAR NAME actuals COMMA result_var RPAR 
            {
              Atom RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ATermList act = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm rv = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 AFun af = parser.tbfactory.makeAFun(nm.toString(), act.getLength(), false);
     										   ATerm call = parser.tbfactory.makeApplList(af, act);
     										   RESULT= new Create(call, rv, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
     										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // delta_tau ::= TAU 
            {
              Atom RESULT =null;
		 RESULT = new Tau(parser.tbfactory, makePosInfoWithEndColumnOffset((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top), 2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("delta_tau",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // delta_tau ::= DELTA 
            {
              Atom RESULT =null;
		 RESULT = new Delta(parser.tbfactory, makePosInfoWithEndColumnOffset((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top), 4)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("delta_tau",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tool_atom ::= REC_VALUE LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new RecVal(t1, t2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tool_atom ::= SND_DO LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Do(t1, t2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tool_atom ::= SND_CANCEL LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tool_atom ::= REC_PERF_STATS LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new RecPerfStats(t1, t2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tool_atom ::= GET_PERF_STATS LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new GetPerfStats(t1, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tool_atom ::= SND_EVAL LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Eval(t1, t2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tool_atom ::= SND_ACK_EVENT LPAR term COMMA term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t3 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new AckEvent(t1, t2, t3, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tool_atom ::= SND_RESPONSE LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new SndResponse(t1, t2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tool_atom ::= REC_REQUEST LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new RecRequest(t1, t2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tool_atom ::= SND_ACK_EVENT LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new AckEvent(t1, t2, null, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tool_atom ::= REC_EVENT LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Event(t1, t2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tool_atom ::= SND_KILL LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new SndKill(t1, t2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tool_atom ::= SND_TERMINATE LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Terminate(t1, t2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tool_atom ::= REC_DISCONNECT LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm rv = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DisConnect(rv, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tool_atom ::= REC_CONNECT LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm rv = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Connect(rv, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top)), false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // note_atom ::= NO_NOTE LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new NoNote(t, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("note_atom",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // note_atom ::= REC_NOTE LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new RecNote(t, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("note_atom",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // note_atom ::= SND_NOTE LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new SndNote(t, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("note_atom",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // note_atom ::= UNSUBSCRIBE LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new UnSubscribe(t, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("note_atom",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // note_atom ::= SUBSCRIBE LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Subscribe(t, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("note_atom",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // comm_atom ::= REC_MSG LPAR term_list RPAR 
            {
              Atom RESULT =null;
		ATermList tl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  new RecMsg(tl, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comm_atom",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // comm_atom ::= SND_MSG LPAR term_list RPAR 
            {
              Atom RESULT =null;
		ATermList tl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  new SndMsg(tl, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comm_atom",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // atom ::= shutdown 
            {
              Atom RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // atom ::= assign 
            {
              Atom RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // atom ::= read_print 
            {
              Atom RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // atom ::= create 
            {
              Atom RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // atom ::= delta_tau 
            {
              Atom RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // atom ::= tool_atom 
            {
              Atom RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // atom ::= note_atom 
            {
              Atom RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // atom ::= comm_atom 
            {
              Atom RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // term_list ::= term COMMA term_list 
            {
              ATermList RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ATermList tl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.tbfactory.makeList(t, tl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_list",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // term_list ::= term 
            {
              ATermList RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.tbfactory.makeList(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_list",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // term_list ::= 
            {
              ATermList RESULT =null;
		 RESULT = parser.tbfactory.makeList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_list",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var ::= NAME 
            {
              ATerm RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 AFun af = parser.tbfactory.makeAFun(nm, 0, false);
     									      ATerm at = parser.tbfactory.makeAppl(af);
     									      String replacement = parser.toolbus.getProperty(nm);
				                              if(replacement != null){
												RESULT = parser.tbfactory.make(replacement);
										      } else {
										        ATerm type = parser.declaredVaribles.get(nm);
     									        if(type == null) throw new RuntimeException("Undeclared variable: "+nm);
     									        RESULT = parser.tbfactory.mkVar(at, parser.processName, type);
     									      }
     									   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // result_var ::= NAME QUESTION 
            {
              ATerm RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 AFun af = parser.tbfactory.makeAFun(nm, 0, false);
     									      ATerm at = parser.tbfactory.makeAppl(af);
     									      ATerm type = parser.declaredVaribles.get(nm);
     									      if(type == null) throw new RuntimeException("Undeclared variable: "+nm);
     									      RESULT = parser.tbfactory.mkResVar(at, parser.processName, type);
     									   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("result_var",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // term ::= LANGLE type RANGLE 
            {
              ATerm RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = parser.tbfactory.makePlaceholder(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // term ::= LSQUARE term_list RSQUARE 
            {
              ATerm RESULT =null;
		ATermList tl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = tl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // term ::= IDENT LPAR term_list RPAR 
            {
              ATerm RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATermList tl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 AFun af = parser.tbfactory.makeAFun(id.toString(), tl.getLength(), false);
     										  RESULT = parser.tbfactory.makeApplList(af, tl);
     									   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // term ::= IDENT 
            {
              ATerm RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 AFun af = parser.tbfactory.makeAFun(id.toString(), 0, false);
     									      RESULT = parser.tbfactory.makeAppl(af);
     									   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // term ::= UNDEFINED 
            {
              ATerm RESULT =null;
		 RESULT = parser.tbfactory.Undefined; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // term ::= FALSE 
            {
              ATerm RESULT =null;
		 RESULT = parser.tbfactory.False; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // term ::= TRUE 
            {
              ATerm RESULT =null;
		 RESULT = parser.tbfactory.True; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // term ::= result_var 
            {
              ATerm RESULT =null;
		ATerm rv = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = rv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // term ::= var 
            {
              ATerm RESULT =null;
		ATerm v = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // term ::= STRING 
            {
              ATerm RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 AFun afun = parser.tbfactory.makeAFun(s.toString(), 0, true);
     										  RESULT = parser.tbfactory.makeAppl(afun); 
     									   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // term ::= REAL 
            {
              ATerm RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.tbfactory.makeReal(new Double(s).doubleValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // term ::= INT 
            {
              ATerm RESULT =null;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.tbfactory.makeInt(i.intValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= script EOF 
            {
              Object RESULT =null;
		Object start_val = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // script ::= def_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("script",37, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

