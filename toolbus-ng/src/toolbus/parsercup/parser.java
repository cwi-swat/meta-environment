
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jun 18 09:35:09 CEST 2008
//----------------------------------------------------

package toolbus.parsercup;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.Reader;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Stack;
import toolbus.TBTermFactory;
import toolbus.ToolBus;
import toolbus.atom.Assign;
import toolbus.atom.Atom;
import toolbus.atom.Create;
import toolbus.atom.Delta;
import toolbus.atom.Print;
import toolbus.atom.ShutDown;
import toolbus.atom.Tau;
import toolbus.atom.msg.RecMsg;
import toolbus.atom.msg.SndMsg;
import toolbus.atom.note.NoNote;
import toolbus.atom.note.RecNote;
import toolbus.atom.note.SndNote;
import toolbus.atom.note.Subscribe;
import toolbus.atom.note.UnSubscribe;
import toolbus.atom.tool.AckEvent;
import toolbus.atom.tool.Connect;
import toolbus.atom.tool.DisConnect;
import toolbus.atom.tool.Do;
import toolbus.atom.tool.Eval;
import toolbus.atom.tool.Event;
import toolbus.atom.tool.Execute;
import toolbus.atom.tool.GetPerfStats;
import toolbus.atom.tool.RecPerfStats;
import toolbus.atom.tool.RecRequest;
import toolbus.atom.tool.RecVal;
import toolbus.atom.tool.SndKill;
import toolbus.atom.tool.SndResponse;
import toolbus.atom.tool.Terminate;
import toolbus.exceptions.ToolBusError;
import toolbus.exceptions.ToolBusException;
import toolbus.exceptions.ToolBusExecutionException;
import toolbus.logging.IToolBusLoggerConstants;
import toolbus.logging.LoggerFactory;
import toolbus.process.Alternative;
import toolbus.process.Disrupt;
import toolbus.process.DynamicProcessCall;
import toolbus.process.IfElse;
import toolbus.process.IfThen;
import toolbus.process.Iteration;
import toolbus.process.LetDefinition;
import toolbus.process.Merge;
import toolbus.process.ProcessCall;
import toolbus.process.ProcessDefinition;
import toolbus.process.ProcessExpression;
import toolbus.process.LeftBiasedAlternative;
import toolbus.process.RightBiasedAlternative;
import toolbus.process.Sequence;
import toolbus.parsercup.SyntaxErrorException;
import toolbus.tool.ToolDefinition;
import aterm.AFun;
import aterm.ATerm;
import aterm.ATermList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jun 18 09:35:09 CEST 2008
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\171\000\002\047\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\006\000\002" +
    "\002\005\000\002\002\005\000\002\003\004\000\002\004" +
    "\003\000\002\005\002\000\002\005\003\000\002\005\005" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\007\006\000\002\007" +
    "\006\000\002\010\006\000\002\010\006\000\002\010\006" +
    "\000\002\010\006\000\002\010\006\000\002\011\006\000" +
    "\002\011\006\000\002\011\010\000\002\011\010\000\002" +
    "\011\010\000\002\011\010\000\002\011\010\000\002\011" +
    "\010\000\002\011\012\000\002\011\010\000\002\011\006" +
    "\000\002\011\010\000\002\011\010\000\002\011\010\000" +
    "\002\011\010\000\002\012\003\000\002\012\003\000\002" +
    "\013\011\000\002\014\006\000\002\014\006\000\002\016" +
    "\006\000\002\015\005\000\002\017\003\000\002\017\007" +
    "\000\002\017\007\000\002\017\013\000\002\017\007\000" +
    "\002\017\013\000\002\017\007\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\003\000\002\017\003\000\002\017\007\000" +
    "\002\017\011\000\002\017\010\000\002\020\004\000\002" +
    "\022\005\000\002\022\002\000\002\023\005\000\002\023" +
    "\002\000\002\024\005\000\002\024\006\000\002\025\003" +
    "\000\002\025\005\000\002\026\003\000\002\027\005\000" +
    "\002\030\003\000\002\030\005\000\002\021\004\000\002" +
    "\031\005\000\002\032\004\000\002\033\003\000\002\034" +
    "\007\000\002\035\005\000\002\035\002\000\002\036\005" +
    "\000\002\036\002\000\002\037\005\000\002\037\002\000" +
    "\002\040\005\000\002\040\002\000\002\041\013\000\002" +
    "\042\002\000\002\042\004\000\002\042\004\000\002\042" +
    "\004\000\002\042\004\000\002\042\004\000\002\042\004" +
    "\000\002\043\004\000\002\044\003\000\002\044\005\000" +
    "\002\046\006\000\002\045\003\000\002\051\004\000\002" +
    "\050\004\000\002\050\005\000\002\052\004\000\002\052" +
    "\004\000\002\053\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013c\000\022\002\uff9a\034\006\035\021\073\014\117" +
    "\017\120\007\122\005\123\023\001\002\000\024\002\uff9a" +
    "\034\006\035\021\073\014\117\017\120\007\122\005\123" +
    "\023\124\uff9a\001\002\000\004\070\u013d\001\002\000\004" +
    "\100\u0135\001\002\000\004\070\u0133\001\002\000\024\002" +
    "\uff9a\034\006\035\021\073\014\117\017\120\007\122\005" +
    "\123\023\124\uff9a\001\002\000\024\002\uff9a\034\006\035" +
    "\021\073\014\117\017\120\007\122\005\123\023\124\uff9a" +
    "\001\002\000\024\002\uff9a\034\006\035\021\073\014\117" +
    "\017\120\007\122\005\123\023\124\uff9a\001\002\000\024" +
    "\002\uff9a\034\006\035\021\073\014\117\017\120\007\122" +
    "\005\123\023\124\uff9a\001\002\000\004\012\u011b\001\002" +
    "\000\004\002\001\001\002\000\024\002\uff9a\034\006\035" +
    "\021\073\014\117\017\120\007\122\005\123\023\124\uff9a" +
    "\001\002\000\004\121\u0119\001\002\000\004\002\u0118\001" +
    "\002\000\004\070\031\001\002\000\022\034\006\035\021" +
    "\073\014\117\017\120\007\122\005\123\023\124\uff9a\001" +
    "\002\000\004\070\025\001\002\000\024\002\uff8f\034\uff8f" +
    "\035\uff8f\073\uff8f\117\uff8f\120\uff8f\122\uff8f\123\uff8f\124" +
    "\uff8f\001\002\000\022\034\uff8a\035\uff8a\073\uff8a\117\uff8a" +
    "\120\uff8a\122\uff8a\123\uff8a\124\uff8a\001\002\000\004\124" +
    "\027\001\002\000\024\002\uff89\034\uff89\035\uff89\073\uff89" +
    "\117\uff89\120\uff89\122\uff89\123\uff89\124\uff89\001\002\000" +
    "\006\036\uffb1\100\032\001\002\000\006\036\uffa5\100\uffa5" +
    "\001\002\000\004\070\u0110\001\002\000\004\036\034\001" +
    "\002\000\102\013\040\014\073\015\062\016\106\017\072" +
    "\020\066\021\107\022\067\023\074\024\065\025\104\026" +
    "\071\027\061\030\042\031\075\032\053\033\054\037\076" +
    "\040\111\041\052\042\047\043\044\044\063\045\041\046" +
    "\060\047\051\050\057\065\077\070\070\071\101\072\045" +
    "\100\103\001\002\000\062\002\uffc9\034\uffc9\035\uffc9\052" +
    "\uffc9\053\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061\371" +
    "\062\372\063\367\064\370\067\uffc9\073\uffc9\101\uffc9\113" +
    "\uffc9\114\uffc9\115\uffc9\117\uffc9\120\uffc9\122\uffc9\123\uffc9" +
    "\124\uffc9\001\002\000\052\002\uffba\034\uffba\035\uffba\052" +
    "\uffba\053\uffba\055\uffba\056\uffba\057\uffba\060\uffba\067\uffba" +
    "\073\uffba\101\uffba\113\uffba\114\uffba\115\uffba\117\uffba\120" +
    "\uffba\122\uffba\123\uffba\124\uffba\001\002\000\062\002\uffe7" +
    "\034\uffe7\035\uffe7\052\uffe7\053\uffe7\055\uffe7\056\uffe7\057" +
    "\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7\067\uffe7" +
    "\073\uffe7\101\uffe7\113\uffe7\114\uffe7\115\uffe7\117\uffe7\120" +
    "\uffe7\122\uffe7\123\uffe7\124\uffe7\001\002\000\004\100\364" +
    "\001\002\000\004\100\361\001\002\000\004\100\354\001" +
    "\002\000\062\002\uffec\034\uffec\035\uffec\052\uffec\053\uffec" +
    "\055\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062\uffec\063" +
    "\uffec\064\uffec\067\uffec\073\uffec\101\uffec\113\uffec\114\uffec" +
    "\115\uffec\117\uffec\120\uffec\122\uffec\123\uffec\124\uffec\001" +
    "\002\000\004\100\347\001\002\000\062\002\uffcf\034\uffcf" +
    "\035\uffcf\052\uffcf\053\uffcf\055\uffcf\056\uffcf\057\uffcf\060" +
    "\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\067\uffcf\073\uffcf" +
    "\101\uffcf\113\uffcf\114\uffcf\115\uffcf\117\uffcf\120\uffcf\122" +
    "\uffcf\123\uffcf\124\uffcf\001\002\000\062\002\uffea\034\uffea" +
    "\035\uffea\052\uffea\053\uffea\055\uffea\056\uffea\057\uffea\060" +
    "\uffea\061\uffea\062\uffea\063\uffea\064\uffea\067\uffea\073\uffea" +
    "\101\uffea\113\uffea\114\uffea\115\uffea\117\uffea\120\uffea\122" +
    "\uffea\123\uffea\124\uffea\001\002\000\004\100\342\001\002" +
    "\000\052\002\uffb9\034\uffb9\035\uffb9\052\uffb9\053\uffb9\055" +
    "\uffb9\056\uffb9\057\uffb9\060\uffb9\067\uffb9\073\uffb9\101\uffb9" +
    "\113\uffb9\114\uffb9\115\uffb9\117\uffb9\120\uffb9\122\uffb9\123" +
    "\uffb9\124\uffb9\001\002\000\004\100\335\001\002\000\004" +
    "\100\332\001\002\000\004\100\325\001\002\000\004\100" +
    "\320\001\002\000\062\002\uffee\034\uffee\035\uffee\052\uffee" +
    "\053\uffee\055\uffee\056\uffee\057\uffee\060\uffee\061\uffee\062" +
    "\uffee\063\uffee\064\uffee\067\uffee\073\uffee\101\uffee\113\uffee" +
    "\114\uffee\115\uffee\117\uffee\120\uffee\122\uffee\123\uffee\124" +
    "\uffee\001\002\000\062\002\uffe9\034\uffe9\035\uffe9\052\uffe9" +
    "\053\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\062" +
    "\uffe9\063\uffe9\064\uffe9\067\uffe9\073\uffe9\101\uffe9\113\uffe9" +
    "\114\uffe9\115\uffe9\117\uffe9\120\uffe9\122\uffe9\123\uffe9\124" +
    "\uffe9\001\002\000\026\004\114\005\125\006\121\007\117" +
    "\010\124\011\123\012\115\070\127\105\120\107\113\001" +
    "\002\000\004\100\306\001\002\000\004\100\301\001\002" +
    "\000\004\100\276\001\002\000\004\100\271\001\002\000" +
    "\042\002\uffa4\034\uffa4\035\uffa4\055\167\056\165\057\164" +
    "\060\170\073\uffa4\113\172\114\173\115\166\117\uffa4\120" +
    "\uffa4\122\uffa4\123\uffa4\124\uffa4\001\002\000\004\100\264" +
    "\001\002\000\004\100\261\001\002\000\004\100\256\001" +
    "\002\000\056\002\uffb3\034\uffb3\035\uffb3\052\uffb3\053\uffb3" +
    "\054\254\055\uffb3\056\uffb3\057\uffb3\060\uffb3\067\uffb3\073" +
    "\uffb3\100\221\101\uffb3\113\uffb3\114\uffb3\115\uffb3\117\uffb3" +
    "\120\uffb3\122\uffb3\123\uffb3\124\uffb3\001\002\000\004\100" +
    "\246\001\002\000\004\100\243\001\002\000\004\100\240" +
    "\001\002\000\004\100\235\001\002\000\004\100\230\001" +
    "\002\000\004\100\216\001\002\000\004\070\210\001\002" +
    "\000\062\002\uffeb\034\uffeb\035\uffeb\052\uffeb\053\uffeb\055" +
    "\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb" +
    "\064\uffeb\067\uffeb\073\uffeb\101\uffeb\113\uffeb\114\uffeb\115" +
    "\uffeb\117\uffeb\120\uffeb\122\uffeb\123\uffeb\124\uffeb\001\002" +
    "\000\062\002\uffd0\034\uffd0\035\uffd0\052\uffd0\053\uffd0\055" +
    "\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0" +
    "\064\uffd0\067\uffd0\073\uffd0\101\uffd0\113\uffd0\114\uffd0\115" +
    "\uffd0\117\uffd0\120\uffd0\122\uffd0\123\uffd0\124\uffd0\001\002" +
    "\000\102\013\040\014\073\015\062\016\106\017\072\020" +
    "\066\021\107\022\067\023\074\024\065\025\104\026\071" +
    "\027\061\030\042\031\075\032\053\033\054\037\076\040" +
    "\111\041\052\042\047\043\044\044\063\045\041\046\060" +
    "\047\051\050\057\065\077\070\070\071\101\072\045\100" +
    "\103\001\002\000\102\013\040\014\073\015\062\016\106" +
    "\017\072\020\066\021\107\022\067\023\074\024\065\025" +
    "\104\026\071\027\061\030\042\031\075\032\053\033\054" +
    "\037\076\040\111\041\052\042\047\043\044\044\063\045" +
    "\041\046\060\047\051\050\057\065\077\070\070\071\101" +
    "\072\045\100\103\001\002\000\004\100\153\001\002\000" +
    "\062\002\uffe8\034\uffe8\035\uffe8\052\uffe8\053\uffe8\055\uffe8" +
    "\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064" +
    "\uffe8\067\uffe8\073\uffe8\101\uffe8\113\uffe8\114\uffe8\115\uffe8" +
    "\117\uffe8\120\uffe8\122\uffe8\123\uffe8\124\uffe8\001\002\000" +
    "\004\100\150\001\002\000\004\100\145\001\002\000\062" +
    "\002\uffed\034\uffed\035\uffed\052\uffed\053\uffed\055\uffed\056" +
    "\uffed\057\uffed\060\uffed\061\uffed\062\uffed\063\uffed\064\uffed" +
    "\067\uffed\073\uffed\101\uffed\113\uffed\114\uffed\115\uffed\117" +
    "\uffed\120\uffed\122\uffed\123\uffed\124\uffed\001\002\000\004" +
    "\100\112\001\002\000\026\004\114\005\125\006\121\007" +
    "\117\010\124\011\123\012\115\070\127\105\120\107\113" +
    "\001\002\000\030\004\114\005\125\006\121\007\117\010" +
    "\124\011\123\012\115\070\127\105\120\107\113\110\ufff1" +
    "\001\002\000\076\002\uffff\034\uffff\035\uffff\051\uffff\052" +
    "\uffff\053\uffff\055\uffff\056\uffff\057\uffff\060\uffff\061\uffff" +
    "\062\uffff\063\uffff\064\uffff\066\uffff\067\uffff\073\uffff\101" +
    "\uffff\102\uffff\106\uffff\110\uffff\111\uffff\113\uffff\114\uffff" +
    "\115\uffff\117\uffff\120\uffff\122\uffff\123\uffff\124\uffff\001" +
    "\002\000\100\002\ufff7\034\ufff7\035\ufff7\051\ufff7\052\ufff7" +
    "\053\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7\062" +
    "\ufff7\063\ufff7\064\ufff7\066\ufff7\067\ufff7\073\ufff7\100\135" +
    "\101\ufff7\102\ufff7\106\ufff7\110\ufff7\111\ufff7\113\ufff7\114" +
    "\ufff7\115\ufff7\117\ufff7\120\ufff7\122\ufff7\123\ufff7\124\ufff7" +
    "\001\002\000\004\101\134\001\002\000\076\002\ufffa\034" +
    "\ufffa\035\ufffa\051\ufffa\052\ufffa\053\ufffa\055\ufffa\056\ufffa" +
    "\057\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\066" +
    "\ufffa\067\ufffa\073\ufffa\101\ufffa\102\ufffa\106\ufffa\110\ufffa" +
    "\111\ufffa\113\ufffa\114\ufffa\115\ufffa\117\ufffa\120\ufffa\122" +
    "\ufffa\123\ufffa\124\ufffa\001\002\000\026\004\114\005\125" +
    "\006\121\007\117\010\124\011\123\012\115\070\127\105" +
    "\120\107\113\001\002\000\076\002\ufffd\034\ufffd\035\ufffd" +
    "\051\ufffd\052\ufffd\053\ufffd\055\ufffd\056\ufffd\057\ufffd\060" +
    "\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd\066\ufffd\067\ufffd" +
    "\073\ufffd\101\ufffd\102\ufffd\106\ufffd\110\ufffd\111\ufffd\113" +
    "\ufffd\114\ufffd\115\ufffd\117\ufffd\120\ufffd\122\ufffd\123\ufffd" +
    "\124\ufffd\001\002\000\076\002\ufffb\034\ufffb\035\ufffb\051" +
    "\ufffb\052\ufffb\053\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb" +
    "\061\ufffb\062\ufffb\063\ufffb\064\ufffb\066\ufffb\067\ufffb\073" +
    "\ufffb\101\ufffb\102\ufffb\106\ufffb\110\ufffb\111\ufffb\113\ufffb" +
    "\114\ufffb\115\ufffb\117\ufffb\120\ufffb\122\ufffb\123\ufffb\124" +
    "\ufffb\001\002\000\076\002\ufff8\034\ufff8\035\ufff8\051\ufff8" +
    "\052\ufff8\053\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061" +
    "\ufff8\062\ufff8\063\ufff8\064\ufff8\066\ufff8\067\ufff8\073\ufff8" +
    "\101\ufff8\102\ufff8\106\ufff8\110\ufff8\111\ufff8\113\ufff8\114" +
    "\ufff8\115\ufff8\117\ufff8\120\ufff8\122\ufff8\123\ufff8\124\ufff8" +
    "\001\002\000\076\002\ufff9\034\ufff9\035\ufff9\051\ufff9\052" +
    "\ufff9\053\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9" +
    "\062\ufff9\063\ufff9\064\ufff9\066\ufff9\067\ufff9\073\ufff9\101" +
    "\ufff9\102\ufff9\106\ufff9\110\ufff9\111\ufff9\113\ufff9\114\ufff9" +
    "\115\ufff9\117\ufff9\120\ufff9\122\ufff9\123\ufff9\124\ufff9\001" +
    "\002\000\076\002\ufffe\034\ufffe\035\ufffe\051\ufffe\052\ufffe" +
    "\053\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe\062" +
    "\ufffe\063\ufffe\064\ufffe\066\ufffe\067\ufffe\073\ufffe\101\ufffe" +
    "\102\ufffe\106\ufffe\110\ufffe\111\ufffe\113\ufffe\114\ufffe\115" +
    "\ufffe\117\ufffe\120\ufffe\122\ufffe\123\ufffe\124\ufffe\001\002" +
    "\000\076\002\ufffc\034\ufffc\035\ufffc\051\ufffc\052\ufffc\053" +
    "\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc" +
    "\063\ufffc\064\ufffc\066\ufffc\067\ufffc\073\ufffc\101\ufffc\102" +
    "\ufffc\106\ufffc\110\ufffc\111\ufffc\113\ufffc\114\ufffc\115\ufffc" +
    "\117\ufffc\120\ufffc\122\ufffc\123\ufffc\124\ufffc\001\002\000" +
    "\076\002\ufff2\034\ufff2\035\ufff2\051\ufff2\052\ufff2\053\ufff2" +
    "\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063" +
    "\ufff2\064\ufff2\066\ufff2\067\ufff2\073\ufff2\101\ufff2\102\ufff2" +
    "\106\ufff2\110\ufff2\111\130\113\ufff2\114\ufff2\115\ufff2\117" +
    "\ufff2\120\ufff2\122\ufff2\123\ufff2\124\ufff2\001\002\000\076" +
    "\002\ufff3\034\ufff3\035\ufff3\051\ufff3\052\ufff3\053\ufff3\055" +
    "\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3" +
    "\064\ufff3\066\ufff3\067\ufff3\073\ufff3\101\ufff3\102\ufff3\106" +
    "\ufff3\110\ufff3\111\ufff3\113\ufff3\114\ufff3\115\ufff3\117\ufff3" +
    "\120\ufff3\122\ufff3\123\ufff3\124\ufff3\001\002\000\014\066" +
    "\uffac\101\uffac\102\uffac\106\uffac\111\uffac\001\002\000\004" +
    "\106\133\001\002\000\076\002\ufff4\034\ufff4\035\ufff4\051" +
    "\ufff4\052\ufff4\053\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4" +
    "\061\ufff4\062\ufff4\063\ufff4\064\ufff4\066\ufff4\067\ufff4\073" +
    "\ufff4\101\ufff4\102\ufff4\106\ufff4\110\ufff4\111\ufff4\113\ufff4" +
    "\114\ufff4\115\ufff4\117\ufff4\120\ufff4\122\ufff4\123\ufff4\124" +
    "\ufff4\001\002\000\062\002\uffdf\034\uffdf\035\uffdf\052\uffdf" +
    "\053\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062" +
    "\uffdf\063\uffdf\064\uffdf\067\uffdf\073\uffdf\101\uffdf\113\uffdf" +
    "\114\uffdf\115\uffdf\117\uffdf\120\uffdf\122\uffdf\123\uffdf\124" +
    "\uffdf\001\002\000\030\004\114\005\125\006\121\007\117" +
    "\010\124\011\123\012\115\070\127\101\ufff1\105\120\107" +
    "\113\001\002\000\010\101\ufff0\102\141\110\ufff0\001\002" +
    "\000\004\101\140\001\002\000\076\002\ufff6\034\ufff6\035" +
    "\ufff6\051\ufff6\052\ufff6\053\ufff6\055\ufff6\056\ufff6\057\ufff6" +
    "\060\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6\066\ufff6\067" +
    "\ufff6\073\ufff6\101\ufff6\102\ufff6\106\ufff6\110\ufff6\111\ufff6" +
    "\113\ufff6\114\ufff6\115\ufff6\117\ufff6\120\ufff6\122\ufff6\123" +
    "\ufff6\124\ufff6\001\002\000\032\004\114\005\125\006\121" +
    "\007\117\010\124\011\123\012\115\070\127\101\ufff1\105" +
    "\120\107\113\110\ufff1\001\002\000\006\101\uffef\110\uffef" +
    "\001\002\000\004\110\144\001\002\000\076\002\ufff5\034" +
    "\ufff5\035\ufff5\051\ufff5\052\ufff5\053\ufff5\055\ufff5\056\ufff5" +
    "\057\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5\066" +
    "\ufff5\067\ufff5\073\ufff5\101\ufff5\102\ufff5\106\ufff5\110\ufff5" +
    "\111\ufff5\113\ufff5\114\ufff5\115\ufff5\117\ufff5\120\ufff5\122" +
    "\ufff5\123\ufff5\124\ufff5\001\002\000\026\004\114\005\125" +
    "\006\121\007\117\010\124\011\123\012\115\070\127\105" +
    "\120\107\113\001\002\000\004\101\147\001\002\000\062" +
    "\002\uffe3\034\uffe3\035\uffe3\052\uffe3\053\uffe3\055\uffe3\056" +
    "\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3" +
    "\067\uffe3\073\uffe3\101\uffe3\113\uffe3\114\uffe3\115\uffe3\117" +
    "\uffe3\120\uffe3\122\uffe3\123\uffe3\124\uffe3\001\002\000\026" +
    "\004\114\005\125\006\121\007\117\010\124\011\123\012" +
    "\115\070\127\105\120\107\113\001\002\000\004\101\152" +
    "\001\002\000\062\002\uffe1\034\uffe1\035\uffe1\052\uffe1\053" +
    "\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1" +
    "\063\uffe1\064\uffe1\067\uffe1\073\uffe1\101\uffe1\113\uffe1\114" +
    "\uffe1\115\uffe1\117\uffe1\120\uffe1\122\uffe1\123\uffe1\124\uffe1" +
    "\001\002\000\026\004\114\005\125\006\121\007\117\010" +
    "\124\011\123\012\115\070\127\105\120\107\113\001\002" +
    "\000\004\102\155\001\002\000\026\004\114\005\125\006" +
    "\121\007\117\010\124\011\123\012\115\070\127\105\120" +
    "\107\113\001\002\000\006\101\160\102\157\001\002\000" +
    "\026\004\114\005\125\006\121\007\117\010\124\011\123" +
    "\012\115\070\127\105\120\107\113\001\002\000\062\002" +
    "\uffda\034\uffda\035\uffda\052\uffda\053\uffda\055\uffda\056\uffda" +
    "\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda\064\uffda\067" +
    "\uffda\073\uffda\101\uffda\113\uffda\114\uffda\115\uffda\117\uffda" +
    "\120\uffda\122\uffda\123\uffda\124\uffda\001\002\000\004\101" +
    "\162\001\002\000\062\002\uffd7\034\uffd7\035\uffd7\052\uffd7" +
    "\053\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062" +
    "\uffd7\063\uffd7\064\uffd7\067\uffd7\073\uffd7\101\uffd7\113\uffd7" +
    "\114\uffd7\115\uffd7\117\uffd7\120\uffd7\122\uffd7\123\uffd7\124" +
    "\uffd7\001\002\000\022\055\167\056\165\057\164\060\170" +
    "\101\171\113\172\114\173\115\166\001\002\000\102\013" +
    "\040\014\073\015\062\016\106\017\072\020\066\021\107" +
    "\022\067\023\074\024\065\025\104\026\071\027\061\030" +
    "\042\031\075\032\053\033\054\037\076\040\111\041\052" +
    "\042\047\043\044\044\063\045\041\046\060\047\051\050" +
    "\057\065\077\070\070\071\101\072\045\100\103\001\002" +
    "\000\102\013\040\014\073\015\062\016\106\017\072\020" +
    "\066\021\107\022\067\023\074\024\065\025\104\026\071" +
    "\027\061\030\042\031\075\032\053\033\054\037\076\040" +
    "\111\041\052\042\047\043\044\044\063\045\041\046\060" +
    "\047\051\050\057\065\077\070\070\071\101\072\045\100" +
    "\103\001\002\000\102\013\040\014\073\015\062\016\106" +
    "\017\072\020\066\021\107\022\067\023\074\024\065\025" +
    "\104\026\071\027\061\030\042\031\075\032\053\033\054" +
    "\037\076\040\111\041\052\042\047\043\044\044\063\045" +
    "\041\046\060\047\051\050\057\065\077\070\070\071\101" +
    "\072\045\100\103\001\002\000\102\013\040\014\073\015" +
    "\062\016\106\017\072\020\066\021\107\022\067\023\074" +
    "\024\065\025\104\026\071\027\061\030\042\031\075\032" +
    "\053\033\054\037\076\040\111\041\052\042\047\043\044" +
    "\044\063\045\041\046\060\047\051\050\057\065\077\070" +
    "\070\071\101\072\045\100\103\001\002\000\102\013\040" +
    "\014\073\015\062\016\106\017\072\020\066\021\107\022" +
    "\067\023\074\024\065\025\104\026\071\027\061\030\042" +
    "\031\075\032\053\033\054\037\076\040\111\041\052\042" +
    "\047\043\044\044\063\045\041\046\060\047\051\050\057" +
    "\065\077\070\070\071\101\072\045\100\103\001\002\000" +
    "\052\002\uffbb\034\uffbb\035\uffbb\052\uffbb\053\uffbb\055\uffbb" +
    "\056\uffbb\057\uffbb\060\uffbb\067\uffbb\073\uffbb\101\uffbb\113" +
    "\uffbb\114\uffbb\115\uffbb\117\uffbb\120\uffbb\122\uffbb\123\uffbb" +
    "\124\uffbb\001\002\000\102\013\040\014\073\015\062\016" +
    "\106\017\072\020\066\021\107\022\067\023\074\024\065" +
    "\025\104\026\071\027\061\030\042\031\075\032\053\033" +
    "\054\037\076\040\111\041\052\042\047\043\044\044\063" +
    "\045\041\046\060\047\051\050\057\065\077\070\070\071" +
    "\101\072\045\100\103\001\002\000\102\013\040\014\073" +
    "\015\062\016\106\017\072\020\066\021\107\022\067\023" +
    "\074\024\065\025\104\026\071\027\061\030\042\031\075" +
    "\032\053\033\054\037\076\040\111\041\052\042\047\043" +
    "\044\044\063\045\041\046\060\047\051\050\057\065\077" +
    "\070\070\071\101\072\045\100\103\001\002\000\052\002" +
    "\uffbf\034\uffbf\035\uffbf\052\uffbf\053\uffbf\055\uffbf\056\uffbf" +
    "\057\uffbf\060\170\067\uffbf\073\uffbf\101\uffbf\113\uffbf\114" +
    "\173\115\166\117\uffbf\120\uffbf\122\uffbf\123\uffbf\124\uffbf" +
    "\001\002\000\052\002\uffc2\034\uffc2\035\uffc2\052\uffc2\053" +
    "\uffc2\055\uffc2\056\uffc2\057\uffc2\060\170\067\uffc2\073\uffc2" +
    "\101\uffc2\113\uffc2\114\173\115\166\117\uffc2\120\uffc2\122" +
    "\uffc2\123\uffc2\124\uffc2\001\002\000\052\002\uffbc\034\uffbc" +
    "\035\uffbc\052\uffbc\053\uffbc\055\uffbc\056\uffbc\057\uffbc\060" +
    "\uffbc\067\uffbc\073\uffbc\101\uffbc\113\uffbc\114\uffbc\115\uffbc" +
    "\117\uffbc\120\uffbc\122\uffbc\123\uffbc\124\uffbc\001\002\000" +
    "\052\002\uffbd\034\uffbd\035\uffbd\052\uffbd\053\uffbd\055\uffbd" +
    "\056\165\057\164\060\170\067\uffbd\073\uffbd\101\uffbd\113" +
    "\172\114\173\115\166\117\uffbd\120\uffbd\122\uffbd\123\uffbd" +
    "\124\uffbd\001\002\000\052\002\uffbe\034\uffbe\035\uffbe\052" +
    "\uffbe\053\uffbe\055\uffbe\056\uffbe\057\uffbe\060\170\067\uffbe" +
    "\073\uffbe\101\uffbe\113\uffbe\114\uffbe\115\uffbe\117\uffbe\120" +
    "\uffbe\122\uffbe\123\uffbe\124\uffbe\001\002\000\052\002\uffc1" +
    "\034\uffc1\035\uffc1\052\uffc1\053\uffc1\055\uffc1\056\uffc1\057" +
    "\uffc1\060\170\067\uffc1\073\uffc1\101\uffc1\113\172\114\173" +
    "\115\166\117\uffc1\120\uffc1\122\uffc1\123\uffc1\124\uffc1\001" +
    "\002\000\052\002\uffc0\034\uffc0\035\uffc0\052\uffc0\053\uffc0" +
    "\055\uffc0\056\165\057\164\060\170\067\uffc0\073\uffc0\101" +
    "\uffc0\113\172\114\173\115\166\117\uffc0\120\uffc0\122\uffc0" +
    "\123\uffc0\124\uffc0\001\002\000\022\055\167\056\165\057" +
    "\164\060\170\067\205\113\172\114\173\115\166\001\002" +
    "\000\052\002\uffa8\034\uffa8\035\uffa8\052\uffa8\053\uffa8\055" +
    "\uffa8\056\uffa8\057\uffa8\060\uffa8\067\uffa8\073\uffa8\101\uffa8" +
    "\113\uffa8\114\uffa8\115\uffa8\117\uffa8\120\uffa8\122\uffa8\123" +
    "\uffa8\124\uffa8\001\002\000\052\002\uffa6\034\uffa6\035\uffa6" +
    "\052\uffa6\053\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\067" +
    "\uffa6\073\uffa6\101\uffa6\113\uffa6\114\uffa6\115\uffa6\117\uffa6" +
    "\120\uffa6\122\uffa6\123\uffa6\124\uffa6\001\002\000\004\066" +
    "\215\001\002\000\006\066\uffaa\102\213\001\002\000\004" +
    "\112\211\001\002\000\026\004\114\005\125\006\121\007" +
    "\117\010\124\011\123\012\115\070\127\105\120\107\113" +
    "\001\002\000\006\066\uffab\102\uffab\001\002\000\004\070" +
    "\210\001\002\000\004\066\uffa9\001\002\000\102\013\uffa7" +
    "\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022" +
    "\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7" +
    "\031\uffa7\032\uffa7\033\uffa7\037\uffa7\040\uffa7\041\uffa7\042" +
    "\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7" +
    "\065\uffa7\070\uffa7\071\uffa7\072\uffa7\100\uffa7\001\002\000" +
    "\004\070\217\001\002\000\006\100\221\102\uffb3\001\002" +
    "\000\004\102\224\001\002\000\030\004\114\005\125\006" +
    "\121\007\117\010\124\011\123\012\115\070\127\101\ufff1" +
    "\105\120\107\113\001\002\000\004\101\223\001\002\000" +
    "\054\002\uffb4\034\uffb4\035\uffb4\052\uffb4\053\uffb4\055\uffb4" +
    "\056\uffb4\057\uffb4\060\uffb4\067\uffb4\073\uffb4\101\uffb4\102" +
    "\uffb4\113\uffb4\114\uffb4\115\uffb4\117\uffb4\120\uffb4\122\uffb4" +
    "\123\uffb4\124\uffb4\001\002\000\004\070\226\001\002\000" +
    "\004\101\227\001\002\000\004\111\130\001\002\000\062" +
    "\002\uffce\034\uffce\035\uffce\052\uffce\053\uffce\055\uffce\056" +
    "\uffce\057\uffce\060\uffce\061\uffce\062\uffce\063\uffce\064\uffce" +
    "\067\uffce\073\uffce\101\uffce\113\uffce\114\uffce\115\uffce\117" +
    "\uffce\120\uffce\122\uffce\123\uffce\124\uffce\001\002\000\026" +
    "\004\114\005\125\006\121\007\117\010\124\011\123\012" +
    "\115\070\127\105\120\107\113\001\002\000\004\102\232" +
    "\001\002\000\026\004\114\005\125\006\121\007\117\010" +
    "\124\011\123\012\115\070\127\105\120\107\113\001\002" +
    "\000\004\101\234\001\002\000\062\002\uffd3\034\uffd3\035" +
    "\uffd3\052\uffd3\053\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3" +
    "\061\uffd3\062\uffd3\063\uffd3\064\uffd3\067\uffd3\073\uffd3\101" +
    "\uffd3\113\uffd3\114\uffd3\115\uffd3\117\uffd3\120\uffd3\122\uffd3" +
    "\123\uffd3\124\uffd3\001\002\000\030\004\114\005\125\006" +
    "\121\007\117\010\124\011\123\012\115\070\127\101\ufff1" +
    "\105\120\107\113\001\002\000\004\101\237\001\002\000" +
    "\062\002\uffcc\034\uffcc\035\uffcc\052\uffcc\053\uffcc\055\uffcc" +
    "\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064" +
    "\uffcc\067\uffcc\073\uffcc\101\uffcc\113\uffcc\114\uffcc\115\uffcc" +
    "\117\uffcc\120\uffcc\122\uffcc\123\uffcc\124\uffcc\001\002\000" +
    "\030\004\114\005\125\006\121\007\117\010\124\011\123" +
    "\012\115\070\127\101\ufff1\105\120\107\113\001\002\000" +
    "\004\101\242\001\002\000\062\002\uffe5\034\uffe5\035\uffe5" +
    "\052\uffe5\053\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061" +
    "\uffe5\062\uffe5\063\uffe5\064\uffe5\067\uffe5\073\uffe5\101\uffe5" +
    "\113\uffe5\114\uffe5\115\uffe5\117\uffe5\120\uffe5\122\uffe5\123" +
    "\uffe5\124\uffe5\001\002\000\026\004\114\005\125\006\121" +
    "\007\117\010\124\011\123\012\115\070\127\105\120\107" +
    "\113\001\002\000\004\101\245\001\002\000\062\002\uffe0" +
    "\034\uffe0\035\uffe0\052\uffe0\053\uffe0\055\uffe0\056\uffe0\057" +
    "\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\067\uffe0" +
    "\073\uffe0\101\uffe0\113\uffe0\114\uffe0\115\uffe0\117\uffe0\120" +
    "\uffe0\122\uffe0\123\uffe0\124\uffe0\001\002\000\026\004\114" +
    "\005\125\006\121\007\117\010\124\011\123\012\115\070" +
    "\127\105\120\107\113\001\002\000\004\102\250\001\002" +
    "\000\026\004\114\005\125\006\121\007\117\010\124\011" +
    "\123\012\115\070\127\105\120\107\113\001\002\000\004" +
    "\101\252\001\002\000\062\002\uffd9\034\uffd9\035\uffd9\052" +
    "\uffd9\053\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9" +
    "\062\uffd9\063\uffd9\064\uffd9\067\uffd9\073\uffd9\101\uffd9\113" +
    "\uffd9\114\uffd9\115\uffd9\117\uffd9\120\uffd9\122\uffd9\123\uffd9" +
    "\124\uffd9\001\002\000\052\002\uffb5\034\uffb5\035\uffb5\052" +
    "\uffb5\053\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\067\uffb5" +
    "\073\uffb5\101\uffb5\113\uffb5\114\uffb5\115\uffb5\117\uffb5\120" +
    "\uffb5\122\uffb5\123\uffb5\124\uffb5\001\002\000\026\004\114" +
    "\005\125\006\121\007\117\010\124\011\123\012\115\070" +
    "\127\105\120\107\113\001\002\000\062\002\uffca\034\uffca" +
    "\035\uffca\052\uffca\053\uffca\055\uffca\056\uffca\057\uffca\060" +
    "\uffca\061\uffca\062\uffca\063\uffca\064\uffca\067\uffca\073\uffca" +
    "\101\uffca\113\uffca\114\uffca\115\uffca\117\uffca\120\uffca\122" +
    "\uffca\123\uffca\124\uffca\001\002\000\030\004\114\005\125" +
    "\006\121\007\117\010\124\011\123\012\115\070\127\101" +
    "\ufff1\105\120\107\113\001\002\000\004\101\260\001\002" +
    "\000\062\002\uffcd\034\uffcd\035\uffcd\052\uffcd\053\uffcd\055" +
    "\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd" +
    "\064\uffcd\067\uffcd\073\uffcd\101\uffcd\113\uffcd\114\uffcd\115" +
    "\uffcd\117\uffcd\120\uffcd\122\uffcd\123\uffcd\124\uffcd\001\002" +
    "\000\026\004\114\005\125\006\121\007\117\010\124\011" +
    "\123\012\115\070\127\105\120\107\113\001\002\000\004" +
    "\101\263\001\002\000\062\002\uffe4\034\uffe4\035\uffe4\052" +
    "\uffe4\053\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4" +
    "\062\uffe4\063\uffe4\064\uffe4\067\uffe4\073\uffe4\101\uffe4\113" +
    "\uffe4\114\uffe4\115\uffe4\117\uffe4\120\uffe4\122\uffe4\123\uffe4" +
    "\124\uffe4\001\002\000\026\004\114\005\125\006\121\007" +
    "\117\010\124\011\123\012\115\070\127\105\120\107\113" +
    "\001\002\000\004\102\266\001\002\000\026\004\114\005" +
    "\125\006\121\007\117\010\124\011\123\012\115\070\127" +
    "\105\120\107\113\001\002\000\004\101\270\001\002\000" +
    "\062\002\uffdb\034\uffdb\035\uffdb\052\uffdb\053\uffdb\055\uffdb" +
    "\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064" +
    "\uffdb\067\uffdb\073\uffdb\101\uffdb\113\uffdb\114\uffdb\115\uffdb" +
    "\117\uffdb\120\uffdb\122\uffdb\123\uffdb\124\uffdb\001\002\000" +
    "\026\004\114\005\125\006\121\007\117\010\124\011\123" +
    "\012\115\070\127\105\120\107\113\001\002\000\004\102" +
    "\273\001\002\000\026\004\114\005\125\006\121\007\117" +
    "\010\124\011\123\012\115\070\127\105\120\107\113\001" +
    "\002\000\004\101\275\001\002\000\062\002\uffdc\034\uffdc" +
    "\035\uffdc\052\uffdc\053\uffdc\055\uffdc\056\uffdc\057\uffdc\060" +
    "\uffdc\061\uffdc\062\uffdc\063\uffdc\064\uffdc\067\uffdc\073\uffdc" +
    "\101\uffdc\113\uffdc\114\uffdc\115\uffdc\117\uffdc\120\uffdc\122" +
    "\uffdc\123\uffdc\124\uffdc\001\002\000\026\004\114\005\125" +
    "\006\121\007\117\010\124\011\123\012\115\070\127\105" +
    "\120\107\113\001\002\000\004\101\300\001\002\000\062" +
    "\002\uffe2\034\uffe2\035\uffe2\052\uffe2\053\uffe2\055\uffe2\056" +
    "\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2" +
    "\067\uffe2\073\uffe2\101\uffe2\113\uffe2\114\uffe2\115\uffe2\117" +
    "\uffe2\120\uffe2\122\uffe2\123\uffe2\124\uffe2\001\002\000\026" +
    "\004\114\005\125\006\121\007\117\010\124\011\123\012" +
    "\115\070\127\105\120\107\113\001\002\000\004\102\303" +
    "\001\002\000\026\004\114\005\125\006\121\007\117\010" +
    "\124\011\123\012\115\070\127\105\120\107\113\001\002" +
    "\000\004\101\305\001\002\000\062\002\uffd8\034\uffd8\035" +
    "\uffd8\052\uffd8\053\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8" +
    "\061\uffd8\062\uffd8\063\uffd8\064\uffd8\067\uffd8\073\uffd8\101" +
    "\uffd8\113\uffd8\114\uffd8\115\uffd8\117\uffd8\120\uffd8\122\uffd8" +
    "\123\uffd8\124\uffd8\001\002\000\026\004\114\005\125\006" +
    "\121\007\117\010\124\011\123\012\115\070\127\105\120" +
    "\107\113\001\002\000\004\101\310\001\002\000\062\002" +
    "\uffd5\034\uffd5\035\uffd5\052\uffd5\053\uffd5\055\uffd5\056\uffd5" +
    "\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5\067" +
    "\uffd5\073\uffd5\101\uffd5\113\uffd5\114\uffd5\115\uffd5\117\uffd5" +
    "\120\uffd5\122\uffd5\123\uffd5\124\uffd5\001\002\000\004\051" +
    "\312\001\002\000\102\013\040\014\073\015\062\016\106" +
    "\017\072\020\066\021\107\022\067\023\074\024\065\025" +
    "\104\026\071\027\061\030\042\031\075\032\053\033\054" +
    "\037\076\040\111\041\052\042\047\043\044\044\063\045" +
    "\041\046\060\047\051\050\057\065\077\070\070\071\101" +
    "\072\045\100\103\001\002\000\024\052\315\053\314\055" +
    "\167\056\165\057\164\060\170\113\172\114\173\115\166" +
    "\001\002\000\052\002\uffb8\034\uffb8\035\uffb8\052\uffb8\053" +
    "\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\067\uffb8\073\uffb8" +
    "\101\uffb8\113\uffb8\114\uffb8\115\uffb8\117\uffb8\120\uffb8\122" +
    "\uffb8\123\uffb8\124\uffb8\001\002\000\102\013\040\014\073" +
    "\015\062\016\106\017\072\020\066\021\107\022\067\023" +
    "\074\024\065\025\104\026\071\027\061\030\042\031\075" +
    "\032\053\033\054\037\076\040\111\041\052\042\047\043" +
    "\044\044\063\045\041\046\060\047\051\050\057\065\077" +
    "\070\070\071\101\072\045\100\103\001\002\000\022\053" +
    "\317\055\167\056\165\057\164\060\170\113\172\114\173" +
    "\115\166\001\002\000\052\002\uffb7\034\uffb7\035\uffb7\052" +
    "\uffb7\053\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\067\uffb7" +
    "\073\uffb7\101\uffb7\113\uffb7\114\uffb7\115\uffb7\117\uffb7\120" +
    "\uffb7\122\uffb7\123\uffb7\124\uffb7\001\002\000\026\004\114" +
    "\005\125\006\121\007\117\010\124\011\123\012\115\070" +
    "\127\105\120\107\113\001\002\000\004\102\322\001\002" +
    "\000\026\004\114\005\125\006\121\007\117\010\124\011" +
    "\123\012\115\070\127\105\120\107\113\001\002\000\004" +
    "\101\324\001\002\000\062\002\uffd1\034\uffd1\035\uffd1\052" +
    "\uffd1\053\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1" +
    "\062\uffd1\063\uffd1\064\uffd1\067\uffd1\073\uffd1\101\uffd1\113" +
    "\uffd1\114\uffd1\115\uffd1\117\uffd1\120\uffd1\122\uffd1\123\uffd1" +
    "\124\uffd1\001\002\000\026\004\114\005\125\006\121\007" +
    "\117\010\124\011\123\012\115\070\127\105\120\107\113" +
    "\001\002\000\004\102\327\001\002\000\026\004\114\005" +
    "\125\006\121\007\117\010\124\011\123\012\115\070\127" +
    "\105\120\107\113\001\002\000\004\101\331\001\002\000" +
    "\062\002\uffd2\034\uffd2\035\uffd2\052\uffd2\053\uffd2\055\uffd2" +
    "\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064" +
    "\uffd2\067\uffd2\073\uffd2\101\uffd2\113\uffd2\114\uffd2\115\uffd2" +
    "\117\uffd2\120\uffd2\122\uffd2\123\uffd2\124\uffd2\001\002\000" +
    "\026\004\114\005\125\006\121\007\117\010\124\011\123" +
    "\012\115\070\127\105\120\107\113\001\002\000\004\101" +
    "\334\001\002\000\062\002\uffde\034\uffde\035\uffde\052\uffde" +
    "\053\uffde\055\uffde\056\uffde\057\uffde\060\uffde\061\uffde\062" +
    "\uffde\063\uffde\064\uffde\067\uffde\073\uffde\101\uffde\113\uffde" +
    "\114\uffde\115\uffde\117\uffde\120\uffde\122\uffde\123\uffde\124" +
    "\uffde\001\002\000\026\004\114\005\125\006\121\007\117" +
    "\010\124\011\123\012\115\070\127\105\120\107\113\001" +
    "\002\000\004\102\337\001\002\000\026\004\114\005\125" +
    "\006\121\007\117\010\124\011\123\012\115\070\127\105" +
    "\120\107\113\001\002\000\004\101\341\001\002\000\062" +
    "\002\uffd4\034\uffd4\035\uffd4\052\uffd4\053\uffd4\055\uffd4\056" +
    "\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4" +
    "\067\uffd4\073\uffd4\101\uffd4\113\uffd4\114\uffd4\115\uffd4\117" +
    "\uffd4\120\uffd4\122\uffd4\123\uffd4\124\uffd4\001\002\000\026" +
    "\004\114\005\125\006\121\007\117\010\124\011\123\012" +
    "\115\070\127\105\120\107\113\001\002\000\004\102\344" +
    "\001\002\000\026\004\114\005\125\006\121\007\117\010" +
    "\124\011\123\012\115\070\127\105\120\107\113\001\002" +
    "\000\004\101\346\001\002\000\052\002\uffb6\034\uffb6\035" +
    "\uffb6\052\uffb6\053\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6" +
    "\067\uffb6\073\uffb6\101\uffb6\113\uffb6\114\uffb6\115\uffb6\117" +
    "\uffb6\120\uffb6\122\uffb6\123\uffb6\124\uffb6\001\002\000\026" +
    "\004\114\005\125\006\121\007\117\010\124\011\123\012" +
    "\115\070\127\105\120\107\113\001\002\000\004\102\351" +
    "\001\002\000\026\004\114\005\125\006\121\007\117\010" +
    "\124\011\123\012\115\070\127\105\120\107\113\001\002" +
    "\000\004\101\353\001\002\000\062\002\uffdd\034\uffdd\035" +
    "\uffdd\052\uffdd\053\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd" +
    "\061\uffdd\062\uffdd\063\uffdd\064\uffdd\067\uffdd\073\uffdd\101" +
    "\uffdd\113\uffdd\114\uffdd\115\uffdd\117\uffdd\120\uffdd\122\uffdd" +
    "\123\uffdd\124\uffdd\001\002\000\026\004\114\005\125\006" +
    "\121\007\117\010\124\011\123\012\115\070\127\105\120" +
    "\107\113\001\002\000\004\102\356\001\002\000\026\004" +
    "\114\005\125\006\121\007\117\010\124\011\123\012\115" +
    "\070\127\105\120\107\113\001\002\000\004\101\360\001" +
    "\002\000\062\002\uffd6\034\uffd6\035\uffd6\052\uffd6\053\uffd6" +
    "\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063" +
    "\uffd6\064\uffd6\067\uffd6\073\uffd6\101\uffd6\113\uffd6\114\uffd6" +
    "\115\uffd6\117\uffd6\120\uffd6\122\uffd6\123\uffd6\124\uffd6\001" +
    "\002\000\026\004\114\005\125\006\121\007\117\010\124" +
    "\011\123\012\115\070\127\105\120\107\113\001\002\000" +
    "\004\101\363\001\002\000\062\002\uffcb\034\uffcb\035\uffcb" +
    "\052\uffcb\053\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061" +
    "\uffcb\062\uffcb\063\uffcb\064\uffcb\067\uffcb\073\uffcb\101\uffcb" +
    "\113\uffcb\114\uffcb\115\uffcb\117\uffcb\120\uffcb\122\uffcb\123" +
    "\uffcb\124\uffcb\001\002\000\030\004\114\005\125\006\121" +
    "\007\117\010\124\011\123\012\115\070\127\101\ufff1\105" +
    "\120\107\113\001\002\000\004\101\366\001\002\000\062" +
    "\002\uffe6\034\uffe6\035\uffe6\052\uffe6\053\uffe6\055\uffe6\056" +
    "\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6" +
    "\067\uffe6\073\uffe6\101\uffe6\113\uffe6\114\uffe6\115\uffe6\117" +
    "\uffe6\120\uffe6\122\uffe6\123\uffe6\124\uffe6\001\002\000\004" +
    "\100\u010c\001\002\000\004\100\u0109\001\002\000\004\100" +
    "\u0102\001\002\000\004\100\373\001\002\000\030\004\114" +
    "\005\125\006\121\007\117\010\124\011\123\012\115\070" +
    "\127\101\ufff1\105\120\107\113\001\002\000\004\101\375" +
    "\001\002\000\054\002\uffc5\034\uffc5\035\uffc5\052\uffc5\053" +
    "\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\064\376\067\uffc5" +
    "\073\uffc5\101\uffc5\113\uffc5\114\uffc5\115\uffc5\117\uffc5\120" +
    "\uffc5\122\uffc5\123\uffc5\124\uffc5\001\002\000\004\100\377" +
    "\001\002\000\030\004\114\005\125\006\121\007\117\010" +
    "\124\011\123\012\115\070\127\101\ufff1\105\120\107\113" +
    "\001\002\000\004\101\u0101\001\002\000\052\002\uffc4\034" +
    "\uffc4\035\uffc4\052\uffc4\053\uffc4\055\uffc4\056\uffc4\057\uffc4" +
    "\060\uffc4\067\uffc4\073\uffc4\101\uffc4\113\uffc4\114\uffc4\115" +
    "\uffc4\117\uffc4\120\uffc4\122\uffc4\123\uffc4\124\uffc4\001\002" +
    "\000\026\004\114\005\125\006\121\007\117\010\124\011" +
    "\123\012\115\070\127\105\120\107\113\001\002\000\004" +
    "\101\u0104\001\002\000\054\002\uffc8\034\uffc8\035\uffc8\052" +
    "\uffc8\053\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\063\u0105" +
    "\067\uffc8\073\uffc8\101\uffc8\113\uffc8\114\uffc8\115\uffc8\117" +
    "\uffc8\120\uffc8\122\uffc8\123\uffc8\124\uffc8\001\002\000\004" +
    "\100\u0106\001\002\000\026\004\114\005\125\006\121\007" +
    "\117\010\124\011\123\012\115\070\127\105\120\107\113" +
    "\001\002\000\004\101\u0108\001\002\000\052\002\uffc6\034" +
    "\uffc6\035\uffc6\052\uffc6\053\uffc6\055\uffc6\056\uffc6\057\uffc6" +
    "\060\uffc6\067\uffc6\073\uffc6\101\uffc6\113\uffc6\114\uffc6\115" +
    "\uffc6\117\uffc6\120\uffc6\122\uffc6\123\uffc6\124\uffc6\001\002" +
    "\000\030\004\114\005\125\006\121\007\117\010\124\011" +
    "\123\012\115\070\127\101\ufff1\105\120\107\113\001\002" +
    "\000\004\101\u010b\001\002\000\052\002\uffc3\034\uffc3\035" +
    "\uffc3\052\uffc3\053\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3" +
    "\067\uffc3\073\uffc3\101\uffc3\113\uffc3\114\uffc3\115\uffc3\117" +
    "\uffc3\120\uffc3\122\uffc3\123\uffc3\124\uffc3\001\002\000\026" +
    "\004\114\005\125\006\121\007\117\010\124\011\123\012" +
    "\115\070\127\105\120\107\113\001\002\000\004\101\u010e" +
    "\001\002\000\052\002\uffc7\034\uffc7\035\uffc7\052\uffc7\053" +
    "\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\067\uffc7\073\uffc7" +
    "\101\uffc7\113\uffc7\114\uffc7\115\uffc7\117\uffc7\120\uffc7\122" +
    "\uffc7\123\uffc7\124\uffc7\001\002\000\006\101\uffae\102\u0116" +
    "\001\002\000\004\112\u0113\001\002\000\004\101\u0112\001" +
    "\002\000\004\036\uffb2\001\002\000\026\004\114\005\125" +
    "\006\121\007\117\010\124\011\123\012\115\070\127\105" +
    "\120\107\113\001\002\000\010\101\uffb0\102\uffb0\111\u0115" +
    "\001\002\000\006\101\uffaf\102\uffaf\001\002\000\004\070" +
    "\u0110\001\002\000\004\101\uffad\001\002\000\004\002\000" +
    "\001\002\000\024\002\uff8e\034\uff8e\035\uff8e\073\uff8e\117" +
    "\uff8e\120\uff8e\122\uff8e\123\uff8e\124\uff8e\001\002\000\006" +
    "\002\uff99\124\uff99\001\002\000\004\036\u011c\001\002\000" +
    "\004\103\u011d\001\002\000\014\074\uffa0\075\u011e\076\uffa0" +
    "\077\uffa0\104\uffa0\001\002\000\004\116\u012d\001\002\000" +
    "\012\074\u0121\076\uffa2\077\uffa2\104\uffa2\001\002\000\010" +
    "\076\u0124\077\uff9e\104\uff9e\001\002\000\004\116\u0122\001" +
    "\002\000\004\006\u0123\001\002\000\010\076\uffa3\077\uffa3" +
    "\104\uffa3\001\002\000\004\116\u012b\001\002\000\006\077" +
    "\u0126\104\uff9c\001\002\000\004\116\u0129\001\002\000\004" +
    "\104\u0128\001\002\000\024\002\uff9b\034\uff9b\035\uff9b\073" +
    "\uff9b\117\uff9b\120\uff9b\122\uff9b\123\uff9b\124\uff9b\001\002" +
    "\000\004\006\u012a\001\002\000\004\104\uff9d\001\002\000" +
    "\004\006\u012c\001\002\000\006\077\uff9f\104\uff9f\001\002" +
    "\000\004\006\u012e\001\002\000\012\074\uffa1\076\uffa1\077" +
    "\uffa1\104\uffa1\001\002\000\006\002\uff95\124\uff95\001\002" +
    "\000\006\002\uff94\124\uff94\001\002\000\006\002\uff98\124" +
    "\uff98\001\002\000\006\002\uff97\124\uff97\001\002\000\050" +
    "\002\uff8d\004\114\005\125\006\121\007\117\010\124\011" +
    "\123\012\115\034\uff8d\035\uff8d\070\127\073\uff8d\105\120" +
    "\107\113\117\uff8d\120\uff8d\122\uff8d\123\uff8d\124\uff8d\001" +
    "\002\000\024\002\uff8c\034\uff8c\035\uff8c\073\uff8c\117\uff8c" +
    "\120\uff8c\122\uff8c\123\uff8c\124\uff8c\001\002\000\004\070" +
    "\u0137\001\002\000\004\101\u013c\001\002\000\010\100\221" +
    "\101\uffb3\102\uffb3\001\002\000\006\101\uff92\102\u0139\001" +
    "\002\000\004\070\u0137\001\002\000\004\101\uff91\001\002" +
    "\000\006\101\uff93\102\uff93\001\002\000\024\002\uff90\034" +
    "\uff90\035\uff90\073\uff90\117\uff90\120\uff90\122\uff90\123\uff90" +
    "\124\uff90\001\002\000\022\034\uff8b\035\uff8b\073\uff8b\117" +
    "\uff8b\120\uff8b\122\uff8b\123\uff8b\124\uff8b\001\002\000\006" +
    "\002\uff96\124\uff96\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013c\000\026\034\015\041\010\042\014\045\007\046" +
    "\023\047\017\050\012\051\003\052\021\053\011\001\001" +
    "\000\024\034\015\041\010\042\u013d\045\007\046\023\050" +
    "\012\051\003\052\021\053\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\034\015\041" +
    "\010\042\u0131\045\007\046\023\050\012\051\003\052\021" +
    "\053\011\001\001\000\024\034\015\041\010\042\u0130\045" +
    "\007\046\023\050\012\051\003\052\021\053\011\001\001" +
    "\000\024\034\015\041\010\042\u012f\045\007\046\023\050" +
    "\012\051\003\052\021\053\011\001\001\000\024\034\015" +
    "\041\010\042\u012e\045\007\046\023\050\012\051\003\052" +
    "\021\053\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\034\015\041\010\042\u0119\045\007\046\023\050" +
    "\012\051\003\052\021\053\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\027\001\001\000\024\034" +
    "\015\041\010\042\025\045\007\046\023\050\012\051\003" +
    "\052\021\053\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\032\001\001\000\002\001\001\000\006\024" +
    "\u010e\025\u0110\001\001\000\002\001\001\000\034\006\034" +
    "\007\054\010\107\011\042\012\077\013\045\014\055\015" +
    "\104\016\036\017\063\020\035\021\047\031\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\310\003\121" +
    "\004\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\252\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\206\030\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\006\034\007\054\010\107\011" +
    "\042\012\077\013\045\014\055\015\104\016\036\017\202" +
    "\020\035\021\047\031\101\032\203\001\001\000\034\006" +
    "\034\007\054\010\107\011\042\012\077\013\045\014\055" +
    "\015\104\016\036\017\162\020\035\021\047\031\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\115\003\121\004\125\001\001\000\012\002\135" +
    "\003\121\004\125\005\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\002\130\003\121\004\125\026\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\002\135\003\121\004" +
    "\125\005\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\002\135\003\121\004\125\005" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\145\003\121\004\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\150\003\121" +
    "\004\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\153\003\121\004\125\001\001\000\002\001\001" +
    "\000\010\002\155\003\121\004\125\001\001\000\002\001" +
    "\001\000\010\002\160\003\121\004\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\006\034\007\054\010\107\011\042\012\077" +
    "\013\045\014\055\015\104\016\036\017\201\020\035\021" +
    "\047\031\101\001\001\000\034\006\034\007\054\010\107" +
    "\011\042\012\077\013\045\014\055\015\104\016\036\017" +
    "\200\020\035\021\047\031\101\001\001\000\034\006\034" +
    "\007\054\010\107\011\042\012\077\013\045\014\055\015" +
    "\104\016\036\017\177\020\035\021\047\031\101\001\001" +
    "\000\034\006\034\007\054\010\107\011\042\012\077\013" +
    "\045\014\055\015\104\016\036\017\176\020\035\021\047" +
    "\031\101\001\001\000\034\006\034\007\054\010\107\011" +
    "\042\012\077\013\045\014\055\015\104\016\036\017\175" +
    "\020\035\021\047\031\101\001\001\000\002\001\001\000" +
    "\034\006\034\007\054\010\107\011\042\012\077\013\045" +
    "\014\055\015\104\016\036\017\174\020\035\021\047\031" +
    "\101\001\001\000\034\006\034\007\054\010\107\011\042" +
    "\012\077\013\045\014\055\015\104\016\036\017\173\020" +
    "\035\021\047\031\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\002\130\003\121" +
    "\004\125\026\211\001\001\000\002\001\001\000\006\027" +
    "\206\030\213\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\217\001\001\000\002\001" +
    "\001\000\012\002\135\003\121\004\125\005\221\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\224\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\230\003\121\004\125\001\001\000\002\001" +
    "\001\000\010\002\232\003\121\004\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\002\135\003\121\004" +
    "\125\005\235\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\135\003\121\004\125\005\240\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\243\003\121" +
    "\004\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\246\003\121\004\125\001\001\000\002\001\001" +
    "\000\010\002\250\003\121\004\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\254" +
    "\003\121\004\125\001\001\000\002\001\001\000\012\002" +
    "\135\003\121\004\125\005\256\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\261\003\121\004\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\264" +
    "\003\121\004\125\001\001\000\002\001\001\000\010\002" +
    "\266\003\121\004\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\271\003\121\004\125\001\001\000" +
    "\002\001\001\000\010\002\273\003\121\004\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\276\003" +
    "\121\004\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\301\003\121\004\125\001\001\000\002\001" +
    "\001\000\010\002\303\003\121\004\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\306\003\121\004" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\034\007\054\010\107\011\042\012" +
    "\077\013\045\014\055\015\104\016\036\017\312\020\035" +
    "\021\047\031\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\006\034\007\054\010\107\011\042\012\077" +
    "\013\045\014\055\015\104\016\036\017\315\020\035\021" +
    "\047\031\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\320\003\121\004\125\001\001\000\002\001" +
    "\001\000\010\002\322\003\121\004\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\325\003\121\004" +
    "\125\001\001\000\002\001\001\000\010\002\327\003\121" +
    "\004\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\332\003\121\004\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\335\003\121\004\125\001" +
    "\001\000\002\001\001\000\010\002\337\003\121\004\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\002" +
    "\342\003\121\004\125\001\001\000\002\001\001\000\010" +
    "\002\344\003\121\004\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\347\003\121\004\125\001\001" +
    "\000\002\001\001\000\010\002\351\003\121\004\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\354" +
    "\003\121\004\125\001\001\000\002\001\001\000\010\002" +
    "\356\003\121\004\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\361\003\121\004\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\002\135\003\121" +
    "\004\125\005\364\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\002\135\003\121\004\125\005" +
    "\373\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\135\003\121\004\125\005\377\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\u0102" +
    "\003\121\004\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\u0106\003\121\004\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\002" +
    "\135\003\121\004\125\005\u0109\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\u010c\003\121\004\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\002\130\003\121\004\125\026\u0113\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\u010e\025\u0116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\u011e\001\001\000\002\001\001\000\004\035\u011f" +
    "\001\001\000\004\037\u0124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\u0126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\u0133\003\121\004\125\001" +
    "\001\000\002\001\001\000\006\043\u0137\044\u0135\001\001" +
    "\000\002\001\001\000\004\022\u013a\001\001\000\002\001" +
    "\001\000\006\043\u0137\044\u0139\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




   protected ToolBus toolbus;
   protected TBTermFactory tbfactory;
   protected String fileName;
   protected String processName = "";
   private HashSet<String> includedFiles = new HashSet<String>();
   protected List<ATerm> toolbusProcessCalls = new ArrayList<ATerm>();
   
   protected HashMap<String, ATerm> declaredVaribles = new HashMap<String, ATerm>();
   
   protected Stack<Boolean> ifdefStack;
	
   /** ToolBus specific constructor */
   public parser(HashSet<String> includedFiles, List<ATerm> toolbusProcessCalls, String filename, Reader input, ToolBus tb){
     super(new Lexer(input));
     
     this.includedFiles = includedFiles;
     this.toolbusProcessCalls = toolbusProcessCalls;
     this.fileName = filename;
     
     includedFiles.add(filename);
     
     toolbus = tb;
     tbfactory = toolbus.getTBTermFactory();
     
     ifdefStack = new Stack<Boolean>();
     ifdefStack.push(Boolean.TRUE);
   }
   
   /** ToolBus specific constructor */
   public parser(ToolBus tb, String filename) throws FileNotFoundException{
     this(new HashSet<String>(), new ArrayList<ATerm>(), filename, new FileReader(filename), tb);
   }
   
   /** ToolBus specific constructor */
   public parser(ToolBus tb, String filename, Reader input){
     this(new HashSet<String>(), new ArrayList<ATerm>(), filename, input, tb);
   }
   
   public String[] scriptsNames(){
		List<String> scriptNamesList = new ArrayList<String>();
		Iterator<String> scriptNamesIterator = includedFiles.iterator();
		while(scriptNamesIterator.hasNext()){
			scriptNamesList.add(scriptNamesIterator.next());
		}
		
		String[] scriptNames = new String[scriptNamesList.size()];
		return scriptNamesList.toArray(scriptNames);
   }
   
   protected void enterIfdef (boolean yesOrno){
      ifdefStack.push(yesOrno);
   }
   
   protected void leaveIfdef(){
      ifdefStack.pop();
   }
   
   protected boolean generating() {
   	  return ifdefStack.peek();
   }
  
   protected void doParseInclude(String filename) throws ToolBusException{
		if(filename.length() > 0 && filename.charAt(0) == File.separatorChar){
			File f = new File(filename);
			if(f.exists()){
				doParse(filename);
				return;
			}
		}else{
			String path = toolbus.getProperty("include.path", ".");
			LoggerFactory.log("unknown", "doParseInclude: path = " + path, IToolBusLoggerConstants.PARSING);
			
			String[] elems = path.split("[ ,\t\n\r]+");
			for(int i = 0; i < elems.length; i++){
				String dir = elems[i];
				
				if(dir.length() > 0){
					String absoluteName = dir + File.separator + filename;
					File f = new File(absoluteName);
					if(f.exists()){
						doParse(absoluteName);
						return;
					}
				}
			}
		}
		throw new ToolBusException("Cannot resolve include file '" + filename + "'");
	} 
	
	private void doParse(String filename) {
		if(includedFiles.contains(filename)){
			//System.err.println("Skipping include of " + filename);
			return;
		}
		
		includedFiles.add(filename);
		//System.err.println("Parse: " + filename);
		toolbus.parsecup1(includedFiles, toolbusProcessCalls, filename);
        //System.err.println("Parse: back to " + filename);
	}
	
	public void generateInitialProcessCalls() throws ToolBusException {
	    for(ATerm call: toolbusProcessCalls){
	       toolbus.addProcess(new ProcessCall(call, tbfactory, null));
	    }
	}
    
    public void syntax_error(java_cup.runtime.Symbol badToken){
    	throw new SyntaxErrorException(fileName, badToken.left + 1, badToken.right + 1, ((Lexer) getScanner()).getPosition() + 1, badToken.sym);
    }
	
	public void undeclaredVariableError(java_cup.runtime.Symbol badToken){
		throw new UndeclaredVariableException(badToken.left + 1, badToken.right + 1, ((Lexer) getScanner()).getPosition() + 1, badToken.toString());
	}
	
	public class UndeclaredVariableException extends RuntimeException{
		private static final long serialVersionUID = 1485650590025885587L;
		
		public final int line;
		public final int column;
		public final int position;
		public final String var;

		public UndeclaredVariableException(int line, int column, int position, String var){
			super();
			
			this.line = line;
			this.column = column;
			this.position = position;
			this.var = var;
		}
		
		public String getMessage(){
			return "Undeclared variable in "+fileName+", at line: "+line+", column: "+column+", symbol id: "+var;
		}
	}
	
	 public void report_error(String message, Object info) {
	   if (info instanceof java_cup.runtime.Symbol) {
	     syntax_error((java_cup.runtime.Symbol) info);
	   }
	 }
	 
	 public int getPosition() {
	   return ((Lexer) getScanner()).getPosition();
	 }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


  private PositionInformation makePosInfo(java_cup.runtime.Symbol beginSymbol, java_cup.runtime.Symbol endSymbol){
    return new PositionInformation(parser.fileName, parser.getPosition(), beginSymbol.left, beginSymbol.right, endSymbol.left, endSymbol.right);
  }
  
  private PositionInformation makePosInfoWithEndColumnOffset(java_cup.runtime.Symbol beginSymbol, java_cup.runtime.Symbol endSymbol, int endColumnOffset){
    return new PositionInformation(parser.fileName, parser.getPosition(), beginSymbol.left, beginSymbol.right, endSymbol.left, endSymbol.right + endColumnOffset);
  }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ifdef ::= ifdef_head def_list ENDIF 
            {
              Object RESULT =null;
		 
                                               parser.leaveIfdef();
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifdef",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ifdef_head ::= IFNDEF NAME 
            {
              Object RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //System.err.println("ifndef " + nm);
                                               if(parser.generating()){
                                                 boolean yes = parser.toolbus.getProperty(nm) == null;
                                                 parser.enterIfdef(yes);
                                               }
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifdef_head",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ifdef_head ::= IFDEF NAME 
            {
              Object RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //System.err.println("ifdef " + nm);
                                                if(parser.generating()){
         									      boolean yes = parser.toolbus.getProperty(nm) != null;
                                                  parser.enterIfdef(yes);
                                                }
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifdef_head",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // define ::= DEFINE NAME term 
            {
              Object RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.generating()){
          										   //System.err.println("define " + nm + " = " + t);
       											   parser.toolbus.setProperty(nm, t.toString()); 
       											}
       										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("define",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // define ::= DEFINE NAME 
            {
              Object RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.generating()){
         										   //System.err.println("define " + nm);
         										   parser.toolbus.setProperty(nm, ""); 
         									   }
         									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("define",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // include ::= INCLUDE FILENAME 
            {
              Object RESULT =null;
		String fn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.generating()){
                                                 parser.doParseInclude(fn);
                                               }
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("include",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // toolbus_def ::= toolbus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("toolbus_def",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // toolbus ::= TOOLBUS LPAR proc_call_in_tb_list RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("toolbus",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // proc_call_in_tb_list ::= proc_call_in_tb COMMA proc_call_in_tb_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_call_in_tb_list",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // proc_call_in_tb_list ::= proc_call_in_tb 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_call_in_tb_list",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // proc_call_in_tb ::= NAME actuals 
            {
              Object RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ATermList act = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.generating()){
       											  AFun af = parser.tbfactory.makeAFun(nm.toString(), act.getLength(), false);
     										      ATerm call = parser.tbfactory.makeApplList(af, act);
     										      parser.toolbusProcessCalls.add(call);
     										      //System.err.println("add to toolbusProcessCalls " + call);
     										   }
     										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_call_in_tb",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // def_list ::= ifdef def_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_list",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // def_list ::= define def_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_list",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // def_list ::= include def_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_list",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // def_list ::= toolbus_def def_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_list",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // def_list ::= tool_def def_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_list",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // def_list ::= proc_def def_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_list",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // def_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_list",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // tool_def ::= TOOL IDENT IS LBRACE host kind command class RBRACE 
            {
              Object RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		String h = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		String cmd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String cls = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.generating()){
                                                     ToolDefinition td = new ToolDefinition(nm, h, k, cmd, cls, parser.toolbus);
                                                     //System.err.println("Adding: " + td);
                                                     parser.toolbus.addToolDefinition(td);
                                                  }
                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_def",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // class ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // class ::= CLASS EQUALS STRING 
            {
              String RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // command ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // command ::= COMMAND EQUALS STRING 
            {
              String RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // host ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("host",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // host ::= HOST EQUALS STRING 
            {
              String RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("host",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // kind ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("kind",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // kind ::= KIND EQUALS STRING 
            {
              String RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("kind",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // proc_def ::= PROCESS proc_def_name formals IS proc 
            {
              ProcessDefinition RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATermList fml = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ProcessExpression p = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.generating()){
                                             	  ProcessDefinition pd = new ProcessDefinition(nm, fml, p, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)));
                                             	  try{
                                             		  parser.toolbus.addProcessDefinition(pd);
                                             	  }catch(ToolBusError tbe){
                                                      throw new ToolBusExecutionException(tbe.getMessage(), makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)));
                                             	  }
                                                  parser.processName = "";
                                                }
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_def",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // proc_def_name ::= NAME 
            {
              String RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.processName = nm;
                                                RESULT = nm; 
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_def_name",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // let_tail ::= proc ENDLET 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("let_tail",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // let_head ::= LET var_list IN 
            {
              ATermList RESULT =null;
		ATermList vl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = vl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("let_head",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // let ::= let_head let_tail 
            {
              ProcessExpression RESULT =null;
		ATermList vl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ProcessExpression p = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LetDefinition(vl, p, parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("let",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // var_list ::= var_decl COMMA var_list 
            {
              ATermList RESULT =null;
		ATerm vd = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ATermList vl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.tbfactory.makeList(vd, vl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // var_list ::= var_decl 
            {
              ATermList RESULT =null;
		ATerm vd = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.tbfactory.makeList(vd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // var_decl ::= NAME COLON type 
            {
              ATerm RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ATerm tp = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 AFun af = parser.tbfactory.makeAFun(nm.toString(), 0, false);
       											parser.declaredVaribles.put(nm, tp);
                                                RESULT = parser.tbfactory.mkVar(af, parser.processName, tp);
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // type ::= term 
            {
              ATerm RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // form_list ::= form_decl COMMA form_list 
            {
              ATermList RESULT =null;
		ATerm fd = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ATermList fdl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.tbfactory.makeList(fd, fdl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_list",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // form_list ::= form_decl 
            {
              ATermList RESULT =null;
		ATerm fd = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.tbfactory.makeList(fd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_list",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // form_decl ::= NAME COLON type QUESTION 
            {
              ATerm RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm tp = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 AFun af = parser.tbfactory.makeAFun(nm, 0, false);
                                                parser.declaredVaribles.put(nm, tp);
                                                RESULT = parser.tbfactory.mkResVar(af, parser.processName, tp);
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_decl",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // form_decl ::= NAME COLON type 
            {
              ATerm RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ATerm tp = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 AFun af = parser.tbfactory.makeAFun(nm, 0, false);
                                                parser.declaredVaribles.put(nm, tp);
                                                RESULT = parser.tbfactory.mkVar(af, parser.processName, tp);
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_decl",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // formals ::= 
            {
              ATermList RESULT =null;
		 RESULT = parser.tbfactory.makeList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // formals ::= LPAR form_list RPAR 
            {
              ATermList RESULT =null;
		ATermList fml = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = fml; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // actuals ::= 
            {
              ATermList RESULT =null;
		 RESULT = parser.tbfactory.makeList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actuals",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // actuals ::= LPAR term_list RPAR 
            {
              ATermList RESULT =null;
		ATermList tl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = tl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actuals",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // proc_call ::= NAME actuals 
            {
              ProcessExpression RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ATermList act = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 PositionInformation posInfo = makePosInfoWithEndColumnOffset((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1), nm.length());
                                               if(parser.declaredVaribles.get(nm) != parser.tbfactory.StrType) RESULT = new ProcessCall(nm, act, parser.tbfactory, posInfo);
                                               else RESULT = new DynamicProcessCall(nm, act, parser.tbfactory, posInfo);
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_call",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // proc ::= EXECUTE LPAR term COMMA term RPAR 
            {
              ProcessExpression RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm rv = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Execute ex = new Execute(t, rv, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top)));
				                               Connect con = new Connect(rv, parser.tbfactory, null, true);
				                               RESULT = new Sequence(ex, con, parser.tbfactory, null);
				                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // proc ::= IF term THEN proc ELSE proc FI 
            {
              ProcessExpression RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ProcessExpression p1 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ProcessExpression p2 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new IfElse(t, p1, p2, parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // proc ::= IF term THEN proc FI 
            {
              ProcessExpression RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ProcessExpression p = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfThen(t, p, parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // proc ::= let 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // proc ::= proc_call 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // proc ::= LPAR proc RPAR 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // proc ::= proc DISRUPT proc 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p1 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ProcessExpression p2 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Disrupt(p1, p2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // proc ::= proc FMERGE proc 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p1 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ProcessExpression p2 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Merge(p1, p2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // proc ::= proc ITER proc 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p1 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ProcessExpression p2 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sequence(new Tau(parser.tbfactory, null),
                                                                       new Iteration(p1, p2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1))),
                                                                       parser.tbfactory,
                                                                       null
                                                                      );
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // proc ::= proc SEQ proc 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p1 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ProcessExpression p2 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sequence(p1, p2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // proc ::= proc RIGHTCHOICE proc 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p1 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ProcessExpression p2 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RightBiasedAlternative(p1, p2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // proc ::= proc LEFTCHOICE proc 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p1 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ProcessExpression p2 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LeftBiasedAlternative(p1, p2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // proc ::= proc CHOICE proc 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p1 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ProcessExpression p2 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Alternative(p1, p2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // proc ::= atom ABS_TIMEOUT LPAR term_list RPAR 
            {
              ProcessExpression RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ATermList tl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			a.setAbsoluteTimeout(tl);
     												RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // proc ::= atom ABS_DELAY LPAR term_list RPAR ABS_TIMEOUT LPAR term_list RPAR 
            {
              ProcessExpression RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		ATermList dl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ATermList tl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			a.setAbsoluteDelay(dl);
     																					a.setAbsoluteTimeout(tl);
     																					RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // proc ::= atom ABS_DELAY LPAR term_list RPAR 
            {
              ProcessExpression RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ATermList dl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			a.setAbsoluteDelay(dl);
     												RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // proc ::= atom REL_DELAY LPAR term RPAR REL_TIMEOUT LPAR term RPAR 
            {
              ProcessExpression RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		ATerm d = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			a.setDelay(d);
																			a.setTimeout(t);
																			RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // proc ::= atom REL_TIMEOUT LPAR term RPAR 
            {
              ProcessExpression RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			a.setTimeout(t);
												RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // proc ::= atom REL_DELAY LPAR term RPAR 
            {
              ProcessExpression RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ATerm d = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			a.setDelay(d);
											RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // proc ::= atom 
            {
              ProcessExpression RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // assign ::= NAME ASSIGN term 
            {
              Atom RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ATerm tnm = parser.tbfactory.make(nm);
                                               ATerm type = parser.declaredVaribles.get(nm);
     									       if(type == null) parser.undeclaredVariableError((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2));
        									   RESULT = new Assign(
        												   parser.tbfactory.mkVar(tnm, parser.processName, type),
        									               t,
        									               parser.tbfactory, 
        									               makePosInfoWithEndColumnOffset((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1), 2));
        								    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // shutdown ::= SHUTDOWN LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ShutDown(t, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shutdown",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // read_print ::= READ LPAR term_list RPAR 
            {
              Atom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_print",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // read_print ::= PRINTF LPAR term_list RPAR 
            {
              Atom RESULT =null;
		ATermList tl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Print(tl, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_print",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // create ::= CREATE LPAR NAME actuals COMMA result_var RPAR 
            {
              Atom RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ATermList act = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm rv = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 AFun af = parser.tbfactory.makeAFun(nm.toString(), act.getLength(), false);
     										   ATerm call = parser.tbfactory.makeApplList(af, act);
     										   RESULT= new Create(call, rv, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
     										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // delta_tau ::= TAU 
            {
              Atom RESULT =null;
		 RESULT = new Tau(parser.tbfactory, makePosInfoWithEndColumnOffset((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top), 2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("delta_tau",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // delta_tau ::= DELTA 
            {
              Atom RESULT =null;
		 RESULT = new Delta(parser.tbfactory, makePosInfoWithEndColumnOffset((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top), 4)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("delta_tau",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tool_atom ::= REC_VALUE LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new RecVal(t1, t2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tool_atom ::= SND_DO LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Do(t1, t2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tool_atom ::= SND_CANCEL LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tool_atom ::= REC_PERF_STATS LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new RecPerfStats(t1, t2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tool_atom ::= GET_PERF_STATS LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new GetPerfStats(t1, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tool_atom ::= SND_EVAL LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Eval(t1, t2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tool_atom ::= SND_ACK_EVENT LPAR term COMMA term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t3 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new AckEvent(t1, t2, t3, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tool_atom ::= SND_RESPONSE LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new SndResponse(t1, t2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tool_atom ::= REC_REQUEST LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new RecRequest(t1, t2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tool_atom ::= SND_ACK_EVENT LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new AckEvent(t1, t2, null, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tool_atom ::= REC_EVENT LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Event(t1, t2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tool_atom ::= SND_KILL LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new SndKill(t1, t2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tool_atom ::= SND_TERMINATE LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Terminate(t1, t2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tool_atom ::= REC_DISCONNECT LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm rv = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DisConnect(rv, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tool_atom ::= REC_CONNECT LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm rv = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Connect(rv, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top)), false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // note_atom ::= NO_NOTE LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new NoNote(t, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("note_atom",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // note_atom ::= REC_NOTE LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new RecNote(t, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("note_atom",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // note_atom ::= SND_NOTE LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new SndNote(t, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("note_atom",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // note_atom ::= UNSUBSCRIBE LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new UnSubscribe(t, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("note_atom",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // note_atom ::= SUBSCRIBE LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Subscribe(t, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("note_atom",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // comm_atom ::= REC_MSG LPAR term_list RPAR 
            {
              Atom RESULT =null;
		ATermList tl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  new RecMsg(tl, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comm_atom",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // comm_atom ::= SND_MSG LPAR term_list RPAR 
            {
              Atom RESULT =null;
		ATermList tl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  new SndMsg(tl, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comm_atom",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // atom ::= shutdown 
            {
              Atom RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // atom ::= assign 
            {
              Atom RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // atom ::= read_print 
            {
              Atom RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // atom ::= create 
            {
              Atom RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // atom ::= delta_tau 
            {
              Atom RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // atom ::= tool_atom 
            {
              Atom RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // atom ::= note_atom 
            {
              Atom RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // atom ::= comm_atom 
            {
              Atom RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // term_list ::= term COMMA term_list 
            {
              ATermList RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ATermList tl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.tbfactory.makeList(t, tl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_list",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // term_list ::= term 
            {
              ATermList RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.tbfactory.makeList(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_list",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // term_list ::= 
            {
              ATermList RESULT =null;
		 RESULT = parser.tbfactory.makeList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_list",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var ::= NAME 
            {
              ATerm RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 AFun af = parser.tbfactory.makeAFun(nm, 0, false);
     									      ATerm at = parser.tbfactory.makeAppl(af);
     									      String replacement = parser.toolbus.getProperty(nm);
				                              if(replacement != null){
												RESULT = parser.tbfactory.make(replacement);
										      } else {
										        ATerm type = parser.declaredVaribles.get(nm);
     									        if(type == null) parser.undeclaredVariableError((java_cup.runtime.Symbol) CUP$parser$stack.peek());
     									        RESULT = parser.tbfactory.mkVar(at, parser.processName, type);
     									      }
     									   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // result_var ::= NAME QUESTION 
            {
              ATerm RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 AFun af = parser.tbfactory.makeAFun(nm, 0, false);
     									      ATerm at = parser.tbfactory.makeAppl(af);
     									      ATerm type = parser.declaredVaribles.get(nm);
     									      if(type == null) parser.undeclaredVariableError((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1));
     									      RESULT = parser.tbfactory.mkResVar(at, parser.processName, type);
     									   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("result_var",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // term ::= LANGLE type RANGLE 
            {
              ATerm RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = parser.tbfactory.makePlaceholder(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // term ::= LSQUARE term_list RSQUARE 
            {
              ATerm RESULT =null;
		ATermList tl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = tl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // term ::= IDENT LPAR term_list RPAR 
            {
              ATerm RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATermList tl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 AFun af = parser.tbfactory.makeAFun(id.toString(), tl.getLength(), false);
     										  RESULT = parser.tbfactory.makeApplList(af, tl);
     									   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // term ::= IDENT 
            {
              ATerm RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 AFun af = parser.tbfactory.makeAFun(id.toString(), 0, false);
     									      RESULT = parser.tbfactory.makeAppl(af);
     									   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // term ::= UNDEFINED 
            {
              ATerm RESULT =null;
		 RESULT = parser.tbfactory.Undefined; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // term ::= FALSE 
            {
              ATerm RESULT =null;
		 RESULT = parser.tbfactory.False; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // term ::= TRUE 
            {
              ATerm RESULT =null;
		 RESULT = parser.tbfactory.True; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // term ::= result_var 
            {
              ATerm RESULT =null;
		ATerm rv = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = rv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // term ::= var 
            {
              ATerm RESULT =null;
		ATerm v = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // term ::= STRING 
            {
              ATerm RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 AFun afun = parser.tbfactory.makeAFun(s.toString(), 0, true);
     										  RESULT = parser.tbfactory.makeAppl(afun); 
     									   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // term ::= REAL 
            {
              ATerm RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.tbfactory.makeReal(new Double(s).doubleValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // term ::= INT 
            {
              ATerm RESULT =null;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.tbfactory.makeInt(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= script EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // script ::= def_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("script",37, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

