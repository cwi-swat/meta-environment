
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 18 14:39:50 CET 2008
//----------------------------------------------------

package toolbus.parsercup;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Stack;
import toolbus.TBTermFactory;
import toolbus.ToolBus;
import toolbus.atom.Assign;
import toolbus.atom.Atom;
import toolbus.atom.Create;
import toolbus.atom.Delta;
import toolbus.atom.Print;
import toolbus.atom.ShutDown;
import toolbus.atom.Tau;
import toolbus.atom.msg.RecMsg;
import toolbus.atom.msg.SndMsg;
import toolbus.atom.note.NoNote;
import toolbus.atom.note.RecNote;
import toolbus.atom.note.SndNote;
import toolbus.atom.note.Subscribe;
import toolbus.atom.note.UnSubscribe;
import toolbus.atom.tool.AckEvent;
import toolbus.atom.tool.Connect;
import toolbus.atom.tool.DisConnect;
import toolbus.atom.tool.Do;
import toolbus.atom.tool.Eval;
import toolbus.atom.tool.Event;
import toolbus.atom.tool.Execute;
import toolbus.atom.tool.GetPerfStats;
import toolbus.atom.tool.RecPerfStats;
import toolbus.atom.tool.RecVal;
import toolbus.atom.tool.SndKill;
import toolbus.atom.tool.Terminate;
import toolbus.exceptions.ToolBusException;
import toolbus.logging.IToolBusLoggerConstants;
import toolbus.logging.LoggerFactory;
import toolbus.process.Alternative;
import toolbus.process.Disrupt;
import toolbus.process.IfElse;
import toolbus.process.IfThen;
import toolbus.process.Iteration;
import toolbus.process.LetDefinition;
import toolbus.process.Merge;
import toolbus.process.ProcessCall;
import toolbus.process.ProcessDefinition;
import toolbus.process.ProcessExpression;
import toolbus.process.RightBiasedAlternative;
import toolbus.process.Sequence;
import toolbus.tool.ToolDefinition;
import aterm.AFun;
import aterm.ATerm;
import aterm.ATermList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 18 14:39:50 CET 2008
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\166\000\002\047\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\006\000\002" +
    "\002\005\000\002\002\005\000\002\003\004\000\002\004" +
    "\003\000\002\005\002\000\002\005\003\000\002\005\005" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\007\006\000\002\007" +
    "\006\000\002\010\006\000\002\010\006\000\002\010\006" +
    "\000\002\010\006\000\002\010\006\000\002\011\006\000" +
    "\002\011\006\000\002\011\010\000\002\011\010\000\002" +
    "\011\010\000\002\011\010\000\002\011\012\000\002\011" +
    "\010\000\002\011\006\000\002\011\010\000\002\011\010" +
    "\000\002\011\010\000\002\011\010\000\002\012\003\000" +
    "\002\012\003\000\002\013\011\000\002\014\006\000\002" +
    "\014\006\000\002\016\006\000\002\015\005\000\002\017" +
    "\003\000\002\017\007\000\002\017\007\000\002\017\013" +
    "\000\002\017\007\000\002\017\013\000\002\017\007\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\003\000\002\017\003\000\002\017\007" +
    "\000\002\017\011\000\002\017\010\000\002\020\004\000" +
    "\002\022\005\000\002\022\002\000\002\023\005\000\002" +
    "\023\002\000\002\024\005\000\002\024\006\000\002\025" +
    "\003\000\002\025\005\000\002\026\003\000\002\027\005" +
    "\000\002\030\003\000\002\030\005\000\002\021\004\000" +
    "\002\031\005\000\002\032\004\000\002\033\003\000\002" +
    "\034\007\000\002\035\005\000\002\035\002\000\002\036" +
    "\005\000\002\036\002\000\002\037\005\000\002\037\002" +
    "\000\002\040\005\000\002\040\002\000\002\041\013\000" +
    "\002\042\002\000\002\042\004\000\002\042\004\000\002" +
    "\042\004\000\002\042\004\000\002\042\004\000\002\042" +
    "\004\000\002\043\004\000\002\044\003\000\002\044\005" +
    "\000\002\046\006\000\002\045\003\000\002\051\004\000" +
    "\002\050\004\000\002\050\005\000\002\052\004\000\002" +
    "\052\004\000\002\053\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012e\000\022\002\uff9d\032\006\033\023\070\014\114" +
    "\017\115\007\117\005\120\021\001\002\000\024\002\uff9d" +
    "\032\006\033\023\070\014\114\017\115\007\117\005\120" +
    "\021\121\uff9d\001\002\000\004\065\u012f\001\002\000\004" +
    "\075\u0127\001\002\000\004\065\u0125\001\002\000\024\002" +
    "\uff9d\032\006\033\023\070\014\114\017\115\007\117\005" +
    "\120\021\121\uff9d\001\002\000\024\002\uff9d\032\006\033" +
    "\023\070\014\114\017\115\007\117\005\120\021\121\uff9d" +
    "\001\002\000\024\002\uff9d\032\006\033\023\070\014\114" +
    "\017\115\007\117\005\120\021\121\uff9d\001\002\000\024" +
    "\002\uff9d\032\006\033\023\070\014\114\017\115\007\117" +
    "\005\120\021\121\uff9d\001\002\000\004\012\u010d\001\002" +
    "\000\004\002\001\001\002\000\024\002\uff9d\032\006\033" +
    "\023\070\014\114\017\115\007\117\005\120\021\121\uff9d" +
    "\001\002\000\004\116\u010b\001\002\000\004\002\u010a\001" +
    "\002\000\004\065\u0109\001\002\000\024\002\uff92\032\uff92" +
    "\033\uff92\070\uff92\114\uff92\115\uff92\117\uff92\120\uff92\121" +
    "\uff92\001\002\000\004\065\030\001\002\000\022\032\006" +
    "\033\023\070\014\114\017\115\007\117\005\120\021\121" +
    "\uff9d\001\002\000\004\121\026\001\002\000\024\002\uff8c" +
    "\032\uff8c\033\uff8c\070\uff8c\114\uff8c\115\uff8c\117\uff8c\120" +
    "\uff8c\121\uff8c\001\002\000\006\034\uffb4\075\031\001\002" +
    "\000\006\034\uffa8\075\uffa8\001\002\000\004\065\u0101\001" +
    "\002\000\004\034\033\001\002\000\076\013\037\014\070" +
    "\015\060\016\103\017\067\020\064\021\104\022\065\023" +
    "\071\024\063\025\101\026\041\027\072\030\052\031\053" +
    "\035\073\036\106\037\050\040\046\041\043\042\061\043" +
    "\040\044\057\045\051\046\056\062\075\065\066\066\076" +
    "\067\044\075\100\001\002\000\060\002\uffcb\032\uffcb\033" +
    "\uffcb\050\uffcb\051\uffcb\053\uffcb\054\uffcb\055\uffcb\056\353" +
    "\057\352\060\350\061\351\064\uffcb\070\uffcb\076\uffcb\110" +
    "\uffcb\111\uffcb\112\uffcb\114\uffcb\115\uffcb\117\uffcb\120\uffcb" +
    "\121\uffcb\001\002\000\050\002\uffbd\032\uffbd\033\uffbd\050" +
    "\uffbd\051\uffbd\053\uffbd\054\uffbd\055\uffbd\064\uffbd\070\uffbd" +
    "\076\uffbd\110\uffbd\111\uffbd\112\uffbd\114\uffbd\115\uffbd\117" +
    "\uffbd\120\uffbd\121\uffbd\001\002\000\060\002\uffe7\032\uffe7" +
    "\033\uffe7\050\uffe7\051\uffe7\053\uffe7\054\uffe7\055\uffe7\056" +
    "\uffe7\057\uffe7\060\uffe7\061\uffe7\064\uffe7\070\uffe7\076\uffe7" +
    "\110\uffe7\111\uffe7\112\uffe7\114\uffe7\115\uffe7\117\uffe7\120" +
    "\uffe7\121\uffe7\001\002\000\004\075\345\001\002\000\004" +
    "\075\342\001\002\000\004\075\335\001\002\000\060\002" +
    "\uffec\032\uffec\033\uffec\050\uffec\051\uffec\053\uffec\054\uffec" +
    "\055\uffec\056\uffec\057\uffec\060\uffec\061\uffec\064\uffec\070" +
    "\uffec\076\uffec\110\uffec\111\uffec\112\uffec\114\uffec\115\uffec" +
    "\117\uffec\120\uffec\121\uffec\001\002\000\004\075\330\001" +
    "\002\000\060\002\uffd1\032\uffd1\033\uffd1\050\uffd1\051\uffd1" +
    "\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1\061" +
    "\uffd1\064\uffd1\070\uffd1\076\uffd1\110\uffd1\111\uffd1\112\uffd1" +
    "\114\uffd1\115\uffd1\117\uffd1\120\uffd1\121\uffd1\001\002\000" +
    "\060\002\uffea\032\uffea\033\uffea\050\uffea\051\uffea\053\uffea" +
    "\054\uffea\055\uffea\056\uffea\057\uffea\060\uffea\061\uffea\064" +
    "\uffea\070\uffea\076\uffea\110\uffea\111\uffea\112\uffea\114\uffea" +
    "\115\uffea\117\uffea\120\uffea\121\uffea\001\002\000\004\075" +
    "\323\001\002\000\050\002\uffbc\032\uffbc\033\uffbc\050\uffbc" +
    "\051\uffbc\053\uffbc\054\uffbc\055\uffbc\064\uffbc\070\uffbc\076" +
    "\uffbc\110\uffbc\111\uffbc\112\uffbc\114\uffbc\115\uffbc\117\uffbc" +
    "\120\uffbc\121\uffbc\001\002\000\004\075\320\001\002\000" +
    "\004\075\313\001\002\000\004\075\306\001\002\000\004" +
    "\075\301\001\002\000\060\002\uffee\032\uffee\033\uffee\050" +
    "\uffee\051\uffee\053\uffee\054\uffee\055\uffee\056\uffee\057\uffee" +
    "\060\uffee\061\uffee\064\uffee\070\uffee\076\uffee\110\uffee\111" +
    "\uffee\112\uffee\114\uffee\115\uffee\117\uffee\120\uffee\121\uffee" +
    "\001\002\000\060\002\uffe9\032\uffe9\033\uffe9\050\uffe9\051" +
    "\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9" +
    "\061\uffe9\064\uffe9\070\uffe9\076\uffe9\110\uffe9\111\uffe9\112" +
    "\uffe9\114\uffe9\115\uffe9\117\uffe9\120\uffe9\121\uffe9\001\002" +
    "\000\026\004\111\005\122\006\116\007\114\010\121\011" +
    "\120\012\112\065\124\102\115\104\110\001\002\000\004" +
    "\075\267\001\002\000\004\075\264\001\002\000\004\075" +
    "\257\001\002\000\040\002\uffa7\032\uffa7\033\uffa7\053\163" +
    "\054\161\055\164\070\uffa7\110\167\111\166\112\162\114" +
    "\uffa7\115\uffa7\117\uffa7\120\uffa7\121\uffa7\001\002\000\004" +
    "\075\252\001\002\000\004\075\247\001\002\000\004\075" +
    "\244\001\002\000\054\002\uffb6\032\uffb6\033\uffb6\050\uffb6" +
    "\051\uffb6\052\242\053\uffb6\054\uffb6\055\uffb6\064\uffb6\070" +
    "\uffb6\075\214\076\uffb6\110\uffb6\111\uffb6\112\uffb6\114\uffb6" +
    "\115\uffb6\117\uffb6\120\uffb6\121\uffb6\001\002\000\004\075" +
    "\236\001\002\000\004\075\233\001\002\000\004\075\230" +
    "\001\002\000\004\075\223\001\002\000\004\075\211\001" +
    "\002\000\060\002\uffeb\032\uffeb\033\uffeb\050\uffeb\051\uffeb" +
    "\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061" +
    "\uffeb\064\uffeb\070\uffeb\076\uffeb\110\uffeb\111\uffeb\112\uffeb" +
    "\114\uffeb\115\uffeb\117\uffeb\120\uffeb\121\uffeb\001\002\000" +
    "\004\065\203\001\002\000\060\002\uffd2\032\uffd2\033\uffd2" +
    "\050\uffd2\051\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057" +
    "\uffd2\060\uffd2\061\uffd2\064\uffd2\070\uffd2\076\uffd2\110\uffd2" +
    "\111\uffd2\112\uffd2\114\uffd2\115\uffd2\117\uffd2\120\uffd2\121" +
    "\uffd2\001\002\000\076\013\037\014\070\015\060\016\103" +
    "\017\067\020\064\021\104\022\065\023\071\024\063\025" +
    "\101\026\041\027\072\030\052\031\053\035\073\036\106" +
    "\037\050\040\046\041\043\042\061\043\040\044\057\045" +
    "\051\046\056\062\075\065\066\066\076\067\044\075\100" +
    "\001\002\000\076\013\037\014\070\015\060\016\103\017" +
    "\067\020\064\021\104\022\065\023\071\024\063\025\101" +
    "\026\041\027\072\030\052\031\053\035\073\036\106\037" +
    "\050\040\046\041\043\042\061\043\040\044\057\045\051" +
    "\046\056\062\075\065\066\066\076\067\044\075\100\001" +
    "\002\000\004\075\150\001\002\000\060\002\uffe8\032\uffe8" +
    "\033\uffe8\050\uffe8\051\uffe8\053\uffe8\054\uffe8\055\uffe8\056" +
    "\uffe8\057\uffe8\060\uffe8\061\uffe8\064\uffe8\070\uffe8\076\uffe8" +
    "\110\uffe8\111\uffe8\112\uffe8\114\uffe8\115\uffe8\117\uffe8\120" +
    "\uffe8\121\uffe8\001\002\000\004\075\145\001\002\000\004" +
    "\075\142\001\002\000\060\002\uffed\032\uffed\033\uffed\050" +
    "\uffed\051\uffed\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed" +
    "\060\uffed\061\uffed\064\uffed\070\uffed\076\uffed\110\uffed\111" +
    "\uffed\112\uffed\114\uffed\115\uffed\117\uffed\120\uffed\121\uffed" +
    "\001\002\000\004\075\107\001\002\000\026\004\111\005" +
    "\122\006\116\007\114\010\121\011\120\012\112\065\124" +
    "\102\115\104\110\001\002\000\030\004\111\005\122\006" +
    "\116\007\114\010\121\011\120\012\112\065\124\102\115" +
    "\104\110\105\ufff1\001\002\000\074\002\uffff\032\uffff\033" +
    "\uffff\047\uffff\050\uffff\051\uffff\053\uffff\054\uffff\055\uffff" +
    "\056\uffff\057\uffff\060\uffff\061\uffff\063\uffff\064\uffff\070" +
    "\uffff\076\uffff\077\uffff\103\uffff\105\uffff\106\uffff\110\uffff" +
    "\111\uffff\112\uffff\114\uffff\115\uffff\117\uffff\120\uffff\121" +
    "\uffff\001\002\000\076\002\ufff7\032\ufff7\033\ufff7\047\ufff7" +
    "\050\ufff7\051\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\057" +
    "\ufff7\060\ufff7\061\ufff7\063\ufff7\064\ufff7\070\ufff7\075\132" +
    "\076\ufff7\077\ufff7\103\ufff7\105\ufff7\106\ufff7\110\ufff7\111" +
    "\ufff7\112\ufff7\114\ufff7\115\ufff7\117\ufff7\120\ufff7\121\ufff7" +
    "\001\002\000\004\076\131\001\002\000\074\002\ufffa\032" +
    "\ufffa\033\ufffa\047\ufffa\050\ufffa\051\ufffa\053\ufffa\054\ufffa" +
    "\055\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa\063\ufffa\064" +
    "\ufffa\070\ufffa\076\ufffa\077\ufffa\103\ufffa\105\ufffa\106\ufffa" +
    "\110\ufffa\111\ufffa\112\ufffa\114\ufffa\115\ufffa\117\ufffa\120" +
    "\ufffa\121\ufffa\001\002\000\026\004\111\005\122\006\116" +
    "\007\114\010\121\011\120\012\112\065\124\102\115\104" +
    "\110\001\002\000\074\002\ufffd\032\ufffd\033\ufffd\047\ufffd" +
    "\050\ufffd\051\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057" +
    "\ufffd\060\ufffd\061\ufffd\063\ufffd\064\ufffd\070\ufffd\076\ufffd" +
    "\077\ufffd\103\ufffd\105\ufffd\106\ufffd\110\ufffd\111\ufffd\112" +
    "\ufffd\114\ufffd\115\ufffd\117\ufffd\120\ufffd\121\ufffd\001\002" +
    "\000\074\002\ufffb\032\ufffb\033\ufffb\047\ufffb\050\ufffb\051" +
    "\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb" +
    "\061\ufffb\063\ufffb\064\ufffb\070\ufffb\076\ufffb\077\ufffb\103" +
    "\ufffb\105\ufffb\106\ufffb\110\ufffb\111\ufffb\112\ufffb\114\ufffb" +
    "\115\ufffb\117\ufffb\120\ufffb\121\ufffb\001\002\000\074\002" +
    "\ufff8\032\ufff8\033\ufff8\047\ufff8\050\ufff8\051\ufff8\053\ufff8" +
    "\054\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\063" +
    "\ufff8\064\ufff8\070\ufff8\076\ufff8\077\ufff8\103\ufff8\105\ufff8" +
    "\106\ufff8\110\ufff8\111\ufff8\112\ufff8\114\ufff8\115\ufff8\117" +
    "\ufff8\120\ufff8\121\ufff8\001\002\000\074\002\ufff9\032\ufff9" +
    "\033\ufff9\047\ufff9\050\ufff9\051\ufff9\053\ufff9\054\ufff9\055" +
    "\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9\063\ufff9\064\ufff9" +
    "\070\ufff9\076\ufff9\077\ufff9\103\ufff9\105\ufff9\106\ufff9\110" +
    "\ufff9\111\ufff9\112\ufff9\114\ufff9\115\ufff9\117\ufff9\120\ufff9" +
    "\121\ufff9\001\002\000\074\002\ufffe\032\ufffe\033\ufffe\047" +
    "\ufffe\050\ufffe\051\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe" +
    "\057\ufffe\060\ufffe\061\ufffe\063\ufffe\064\ufffe\070\ufffe\076" +
    "\ufffe\077\ufffe\103\ufffe\105\ufffe\106\ufffe\110\ufffe\111\ufffe" +
    "\112\ufffe\114\ufffe\115\ufffe\117\ufffe\120\ufffe\121\ufffe\001" +
    "\002\000\074\002\ufffc\032\ufffc\033\ufffc\047\ufffc\050\ufffc" +
    "\051\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc\060" +
    "\ufffc\061\ufffc\063\ufffc\064\ufffc\070\ufffc\076\ufffc\077\ufffc" +
    "\103\ufffc\105\ufffc\106\ufffc\110\ufffc\111\ufffc\112\ufffc\114" +
    "\ufffc\115\ufffc\117\ufffc\120\ufffc\121\ufffc\001\002\000\074" +
    "\002\ufff2\032\ufff2\033\ufff2\047\ufff2\050\ufff2\051\ufff2\053" +
    "\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2" +
    "\063\ufff2\064\ufff2\070\ufff2\076\ufff2\077\ufff2\103\ufff2\105" +
    "\ufff2\106\125\110\ufff2\111\ufff2\112\ufff2\114\ufff2\115\ufff2" +
    "\117\ufff2\120\ufff2\121\ufff2\001\002\000\074\002\ufff3\032" +
    "\ufff3\033\ufff3\047\ufff3\050\ufff3\051\ufff3\053\ufff3\054\ufff3" +
    "\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\063\ufff3\064" +
    "\ufff3\070\ufff3\076\ufff3\077\ufff3\103\ufff3\105\ufff3\106\ufff3" +
    "\110\ufff3\111\ufff3\112\ufff3\114\ufff3\115\ufff3\117\ufff3\120" +
    "\ufff3\121\ufff3\001\002\000\014\063\uffaf\076\uffaf\077\uffaf" +
    "\103\uffaf\106\uffaf\001\002\000\004\103\130\001\002\000" +
    "\074\002\ufff4\032\ufff4\033\ufff4\047\ufff4\050\ufff4\051\ufff4" +
    "\053\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061" +
    "\ufff4\063\ufff4\064\ufff4\070\ufff4\076\ufff4\077\ufff4\103\ufff4" +
    "\105\ufff4\106\ufff4\110\ufff4\111\ufff4\112\ufff4\114\ufff4\115" +
    "\ufff4\117\ufff4\120\ufff4\121\ufff4\001\002\000\060\002\uffdf" +
    "\032\uffdf\033\uffdf\050\uffdf\051\uffdf\053\uffdf\054\uffdf\055" +
    "\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\064\uffdf\070\uffdf" +
    "\076\uffdf\110\uffdf\111\uffdf\112\uffdf\114\uffdf\115\uffdf\117" +
    "\uffdf\120\uffdf\121\uffdf\001\002\000\030\004\111\005\122" +
    "\006\116\007\114\010\121\011\120\012\112\065\124\076" +
    "\ufff1\102\115\104\110\001\002\000\010\076\ufff0\077\136" +
    "\105\ufff0\001\002\000\004\076\135\001\002\000\074\002" +
    "\ufff6\032\ufff6\033\ufff6\047\ufff6\050\ufff6\051\ufff6\053\ufff6" +
    "\054\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6\063" +
    "\ufff6\064\ufff6\070\ufff6\076\ufff6\077\ufff6\103\ufff6\105\ufff6" +
    "\106\ufff6\110\ufff6\111\ufff6\112\ufff6\114\ufff6\115\ufff6\117" +
    "\ufff6\120\ufff6\121\ufff6\001\002\000\032\004\111\005\122" +
    "\006\116\007\114\010\121\011\120\012\112\065\124\076" +
    "\ufff1\102\115\104\110\105\ufff1\001\002\000\006\076\uffef" +
    "\105\uffef\001\002\000\004\105\141\001\002\000\074\002" +
    "\ufff5\032\ufff5\033\ufff5\047\ufff5\050\ufff5\051\ufff5\053\ufff5" +
    "\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\063" +
    "\ufff5\064\ufff5\070\ufff5\076\ufff5\077\ufff5\103\ufff5\105\ufff5" +
    "\106\ufff5\110\ufff5\111\ufff5\112\ufff5\114\ufff5\115\ufff5\117" +
    "\ufff5\120\ufff5\121\ufff5\001\002\000\026\004\111\005\122" +
    "\006\116\007\114\010\121\011\120\012\112\065\124\102" +
    "\115\104\110\001\002\000\004\076\144\001\002\000\060" +
    "\002\uffe3\032\uffe3\033\uffe3\050\uffe3\051\uffe3\053\uffe3\054" +
    "\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\064\uffe3" +
    "\070\uffe3\076\uffe3\110\uffe3\111\uffe3\112\uffe3\114\uffe3\115" +
    "\uffe3\117\uffe3\120\uffe3\121\uffe3\001\002\000\026\004\111" +
    "\005\122\006\116\007\114\010\121\011\120\012\112\065" +
    "\124\102\115\104\110\001\002\000\004\076\147\001\002" +
    "\000\060\002\uffe1\032\uffe1\033\uffe1\050\uffe1\051\uffe1\053" +
    "\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1" +
    "\064\uffe1\070\uffe1\076\uffe1\110\uffe1\111\uffe1\112\uffe1\114" +
    "\uffe1\115\uffe1\117\uffe1\120\uffe1\121\uffe1\001\002\000\026" +
    "\004\111\005\122\006\116\007\114\010\121\011\120\012" +
    "\112\065\124\102\115\104\110\001\002\000\004\077\152" +
    "\001\002\000\026\004\111\005\122\006\116\007\114\010" +
    "\121\011\120\012\112\065\124\102\115\104\110\001\002" +
    "\000\006\076\155\077\154\001\002\000\026\004\111\005" +
    "\122\006\116\007\114\010\121\011\120\012\112\065\124" +
    "\102\115\104\110\001\002\000\060\002\uffda\032\uffda\033" +
    "\uffda\050\uffda\051\uffda\053\uffda\054\uffda\055\uffda\056\uffda" +
    "\057\uffda\060\uffda\061\uffda\064\uffda\070\uffda\076\uffda\110" +
    "\uffda\111\uffda\112\uffda\114\uffda\115\uffda\117\uffda\120\uffda" +
    "\121\uffda\001\002\000\004\076\157\001\002\000\060\002" +
    "\uffd9\032\uffd9\033\uffd9\050\uffd9\051\uffd9\053\uffd9\054\uffd9" +
    "\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\064\uffd9\070" +
    "\uffd9\076\uffd9\110\uffd9\111\uffd9\112\uffd9\114\uffd9\115\uffd9" +
    "\117\uffd9\120\uffd9\121\uffd9\001\002\000\020\053\163\054" +
    "\161\055\164\076\165\110\167\111\166\112\162\001\002" +
    "\000\076\013\037\014\070\015\060\016\103\017\067\020" +
    "\064\021\104\022\065\023\071\024\063\025\101\026\041" +
    "\027\072\030\052\031\053\035\073\036\106\037\050\040" +
    "\046\041\043\042\061\043\040\044\057\045\051\046\056" +
    "\062\075\065\066\066\076\067\044\075\100\001\002\000" +
    "\076\013\037\014\070\015\060\016\103\017\067\020\064" +
    "\021\104\022\065\023\071\024\063\025\101\026\041\027" +
    "\072\030\052\031\053\035\073\036\106\037\050\040\046" +
    "\041\043\042\061\043\040\044\057\045\051\046\056\062" +
    "\075\065\066\066\076\067\044\075\100\001\002\000\076" +
    "\013\037\014\070\015\060\016\103\017\067\020\064\021" +
    "\104\022\065\023\071\024\063\025\101\026\041\027\072" +
    "\030\052\031\053\035\073\036\106\037\050\040\046\041" +
    "\043\042\061\043\040\044\057\045\051\046\056\062\075" +
    "\065\066\066\076\067\044\075\100\001\002\000\076\013" +
    "\037\014\070\015\060\016\103\017\067\020\064\021\104" +
    "\022\065\023\071\024\063\025\101\026\041\027\072\030" +
    "\052\031\053\035\073\036\106\037\050\040\046\041\043" +
    "\042\061\043\040\044\057\045\051\046\056\062\075\065" +
    "\066\066\076\067\044\075\100\001\002\000\050\002\uffbe" +
    "\032\uffbe\033\uffbe\050\uffbe\051\uffbe\053\uffbe\054\uffbe\055" +
    "\uffbe\064\uffbe\070\uffbe\076\uffbe\110\uffbe\111\uffbe\112\uffbe" +
    "\114\uffbe\115\uffbe\117\uffbe\120\uffbe\121\uffbe\001\002\000" +
    "\076\013\037\014\070\015\060\016\103\017\067\020\064" +
    "\021\104\022\065\023\071\024\063\025\101\026\041\027" +
    "\072\030\052\031\053\035\073\036\106\037\050\040\046" +
    "\041\043\042\061\043\040\044\057\045\051\046\056\062" +
    "\075\065\066\066\076\067\044\075\100\001\002\000\076" +
    "\013\037\014\070\015\060\016\103\017\067\020\064\021" +
    "\104\022\065\023\071\024\063\025\101\026\041\027\072" +
    "\030\052\031\053\035\073\036\106\037\050\040\046\041" +
    "\043\042\061\043\040\044\057\045\051\046\056\062\075" +
    "\065\066\066\076\067\044\075\100\001\002\000\050\002" +
    "\uffc4\032\uffc4\033\uffc4\050\uffc4\051\uffc4\053\uffc4\054\uffc4" +
    "\055\164\064\uffc4\070\uffc4\076\uffc4\110\uffc4\111\166\112" +
    "\162\114\uffc4\115\uffc4\117\uffc4\120\uffc4\121\uffc4\001\002" +
    "\000\050\002\uffc2\032\uffc2\033\uffc2\050\uffc2\051\uffc2\053" +
    "\uffc2\054\uffc2\055\164\064\uffc2\070\uffc2\076\uffc2\110\uffc2" +
    "\111\166\112\162\114\uffc2\115\uffc2\117\uffc2\120\uffc2\121" +
    "\uffc2\001\002\000\050\002\uffbf\032\uffbf\033\uffbf\050\uffbf" +
    "\051\uffbf\053\uffbf\054\uffbf\055\uffbf\064\uffbf\070\uffbf\076" +
    "\uffbf\110\uffbf\111\uffbf\112\uffbf\114\uffbf\115\uffbf\117\uffbf" +
    "\120\uffbf\121\uffbf\001\002\000\050\002\uffc0\032\uffc0\033" +
    "\uffc0\050\uffc0\051\uffc0\053\uffc0\054\161\055\164\064\uffc0" +
    "\070\uffc0\076\uffc0\110\167\111\166\112\162\114\uffc0\115" +
    "\uffc0\117\uffc0\120\uffc0\121\uffc0\001\002\000\050\002\uffc1" +
    "\032\uffc1\033\uffc1\050\uffc1\051\uffc1\053\uffc1\054\uffc1\055" +
    "\164\064\uffc1\070\uffc1\076\uffc1\110\uffc1\111\uffc1\112\uffc1" +
    "\114\uffc1\115\uffc1\117\uffc1\120\uffc1\121\uffc1\001\002\000" +
    "\050\002\uffc3\032\uffc3\033\uffc3\050\uffc3\051\uffc3\053\uffc3" +
    "\054\161\055\164\064\uffc3\070\uffc3\076\uffc3\110\167\111" +
    "\166\112\162\114\uffc3\115\uffc3\117\uffc3\120\uffc3\121\uffc3" +
    "\001\002\000\020\053\163\054\161\055\164\064\200\110" +
    "\167\111\166\112\162\001\002\000\050\002\uffab\032\uffab" +
    "\033\uffab\050\uffab\051\uffab\053\uffab\054\uffab\055\uffab\064" +
    "\uffab\070\uffab\076\uffab\110\uffab\111\uffab\112\uffab\114\uffab" +
    "\115\uffab\117\uffab\120\uffab\121\uffab\001\002\000\050\002" +
    "\uffa9\032\uffa9\033\uffa9\050\uffa9\051\uffa9\053\uffa9\054\uffa9" +
    "\055\uffa9\064\uffa9\070\uffa9\076\uffa9\110\uffa9\111\uffa9\112" +
    "\uffa9\114\uffa9\115\uffa9\117\uffa9\120\uffa9\121\uffa9\001\002" +
    "\000\004\063\210\001\002\000\006\063\uffad\077\206\001" +
    "\002\000\004\107\204\001\002\000\026\004\111\005\122" +
    "\006\116\007\114\010\121\011\120\012\112\065\124\102" +
    "\115\104\110\001\002\000\006\063\uffae\077\uffae\001\002" +
    "\000\004\065\203\001\002\000\004\063\uffac\001\002\000" +
    "\076\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa" +
    "\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027" +
    "\uffaa\030\uffaa\031\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa" +
    "\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\062" +
    "\uffaa\065\uffaa\066\uffaa\067\uffaa\075\uffaa\001\002\000\004" +
    "\065\212\001\002\000\006\075\214\077\uffb6\001\002\000" +
    "\004\077\217\001\002\000\030\004\111\005\122\006\116" +
    "\007\114\010\121\011\120\012\112\065\124\076\ufff1\102" +
    "\115\104\110\001\002\000\004\076\216\001\002\000\052" +
    "\002\uffb7\032\uffb7\033\uffb7\050\uffb7\051\uffb7\053\uffb7\054" +
    "\uffb7\055\uffb7\064\uffb7\070\uffb7\076\uffb7\077\uffb7\110\uffb7" +
    "\111\uffb7\112\uffb7\114\uffb7\115\uffb7\117\uffb7\120\uffb7\121" +
    "\uffb7\001\002\000\004\065\221\001\002\000\004\076\222" +
    "\001\002\000\004\106\125\001\002\000\060\002\uffd0\032" +
    "\uffd0\033\uffd0\050\uffd0\051\uffd0\053\uffd0\054\uffd0\055\uffd0" +
    "\056\uffd0\057\uffd0\060\uffd0\061\uffd0\064\uffd0\070\uffd0\076" +
    "\uffd0\110\uffd0\111\uffd0\112\uffd0\114\uffd0\115\uffd0\117\uffd0" +
    "\120\uffd0\121\uffd0\001\002\000\026\004\111\005\122\006" +
    "\116\007\114\010\121\011\120\012\112\065\124\102\115" +
    "\104\110\001\002\000\004\077\225\001\002\000\026\004" +
    "\111\005\122\006\116\007\114\010\121\011\120\012\112" +
    "\065\124\102\115\104\110\001\002\000\004\076\227\001" +
    "\002\000\060\002\uffd5\032\uffd5\033\uffd5\050\uffd5\051\uffd5" +
    "\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061" +
    "\uffd5\064\uffd5\070\uffd5\076\uffd5\110\uffd5\111\uffd5\112\uffd5" +
    "\114\uffd5\115\uffd5\117\uffd5\120\uffd5\121\uffd5\001\002\000" +
    "\030\004\111\005\122\006\116\007\114\010\121\011\120" +
    "\012\112\065\124\076\ufff1\102\115\104\110\001\002\000" +
    "\004\076\232\001\002\000\060\002\uffce\032\uffce\033\uffce" +
    "\050\uffce\051\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057" +
    "\uffce\060\uffce\061\uffce\064\uffce\070\uffce\076\uffce\110\uffce" +
    "\111\uffce\112\uffce\114\uffce\115\uffce\117\uffce\120\uffce\121" +
    "\uffce\001\002\000\030\004\111\005\122\006\116\007\114" +
    "\010\121\011\120\012\112\065\124\076\ufff1\102\115\104" +
    "\110\001\002\000\004\076\235\001\002\000\060\002\uffe5" +
    "\032\uffe5\033\uffe5\050\uffe5\051\uffe5\053\uffe5\054\uffe5\055" +
    "\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\064\uffe5\070\uffe5" +
    "\076\uffe5\110\uffe5\111\uffe5\112\uffe5\114\uffe5\115\uffe5\117" +
    "\uffe5\120\uffe5\121\uffe5\001\002\000\026\004\111\005\122" +
    "\006\116\007\114\010\121\011\120\012\112\065\124\102" +
    "\115\104\110\001\002\000\004\076\240\001\002\000\060" +
    "\002\uffe0\032\uffe0\033\uffe0\050\uffe0\051\uffe0\053\uffe0\054" +
    "\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\064\uffe0" +
    "\070\uffe0\076\uffe0\110\uffe0\111\uffe0\112\uffe0\114\uffe0\115" +
    "\uffe0\117\uffe0\120\uffe0\121\uffe0\001\002\000\050\002\uffb8" +
    "\032\uffb8\033\uffb8\050\uffb8\051\uffb8\053\uffb8\054\uffb8\055" +
    "\uffb8\064\uffb8\070\uffb8\076\uffb8\110\uffb8\111\uffb8\112\uffb8" +
    "\114\uffb8\115\uffb8\117\uffb8\120\uffb8\121\uffb8\001\002\000" +
    "\026\004\111\005\122\006\116\007\114\010\121\011\120" +
    "\012\112\065\124\102\115\104\110\001\002\000\060\002" +
    "\uffcc\032\uffcc\033\uffcc\050\uffcc\051\uffcc\053\uffcc\054\uffcc" +
    "\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\064\uffcc\070" +
    "\uffcc\076\uffcc\110\uffcc\111\uffcc\112\uffcc\114\uffcc\115\uffcc" +
    "\117\uffcc\120\uffcc\121\uffcc\001\002\000\030\004\111\005" +
    "\122\006\116\007\114\010\121\011\120\012\112\065\124" +
    "\076\ufff1\102\115\104\110\001\002\000\004\076\246\001" +
    "\002\000\060\002\uffcf\032\uffcf\033\uffcf\050\uffcf\051\uffcf" +
    "\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061" +
    "\uffcf\064\uffcf\070\uffcf\076\uffcf\110\uffcf\111\uffcf\112\uffcf" +
    "\114\uffcf\115\uffcf\117\uffcf\120\uffcf\121\uffcf\001\002\000" +
    "\026\004\111\005\122\006\116\007\114\010\121\011\120" +
    "\012\112\065\124\102\115\104\110\001\002\000\004\076" +
    "\251\001\002\000\060\002\uffe4\032\uffe4\033\uffe4\050\uffe4" +
    "\051\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060" +
    "\uffe4\061\uffe4\064\uffe4\070\uffe4\076\uffe4\110\uffe4\111\uffe4" +
    "\112\uffe4\114\uffe4\115\uffe4\117\uffe4\120\uffe4\121\uffe4\001" +
    "\002\000\026\004\111\005\122\006\116\007\114\010\121" +
    "\011\120\012\112\065\124\102\115\104\110\001\002\000" +
    "\004\077\254\001\002\000\026\004\111\005\122\006\116" +
    "\007\114\010\121\011\120\012\112\065\124\102\115\104" +
    "\110\001\002\000\004\076\256\001\002\000\060\002\uffdb" +
    "\032\uffdb\033\uffdb\050\uffdb\051\uffdb\053\uffdb\054\uffdb\055" +
    "\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\064\uffdb\070\uffdb" +
    "\076\uffdb\110\uffdb\111\uffdb\112\uffdb\114\uffdb\115\uffdb\117" +
    "\uffdb\120\uffdb\121\uffdb\001\002\000\026\004\111\005\122" +
    "\006\116\007\114\010\121\011\120\012\112\065\124\102" +
    "\115\104\110\001\002\000\004\077\261\001\002\000\026" +
    "\004\111\005\122\006\116\007\114\010\121\011\120\012" +
    "\112\065\124\102\115\104\110\001\002\000\004\076\263" +
    "\001\002\000\060\002\uffdc\032\uffdc\033\uffdc\050\uffdc\051" +
    "\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc" +
    "\061\uffdc\064\uffdc\070\uffdc\076\uffdc\110\uffdc\111\uffdc\112" +
    "\uffdc\114\uffdc\115\uffdc\117\uffdc\120\uffdc\121\uffdc\001\002" +
    "\000\026\004\111\005\122\006\116\007\114\010\121\011" +
    "\120\012\112\065\124\102\115\104\110\001\002\000\004" +
    "\076\266\001\002\000\060\002\uffe2\032\uffe2\033\uffe2\050" +
    "\uffe2\051\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2" +
    "\060\uffe2\061\uffe2\064\uffe2\070\uffe2\076\uffe2\110\uffe2\111" +
    "\uffe2\112\uffe2\114\uffe2\115\uffe2\117\uffe2\120\uffe2\121\uffe2" +
    "\001\002\000\026\004\111\005\122\006\116\007\114\010" +
    "\121\011\120\012\112\065\124\102\115\104\110\001\002" +
    "\000\004\076\271\001\002\000\060\002\uffd7\032\uffd7\033" +
    "\uffd7\050\uffd7\051\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7" +
    "\057\uffd7\060\uffd7\061\uffd7\064\uffd7\070\uffd7\076\uffd7\110" +
    "\uffd7\111\uffd7\112\uffd7\114\uffd7\115\uffd7\117\uffd7\120\uffd7" +
    "\121\uffd7\001\002\000\004\047\273\001\002\000\076\013" +
    "\037\014\070\015\060\016\103\017\067\020\064\021\104" +
    "\022\065\023\071\024\063\025\101\026\041\027\072\030" +
    "\052\031\053\035\073\036\106\037\050\040\046\041\043" +
    "\042\061\043\040\044\057\045\051\046\056\062\075\065" +
    "\066\066\076\067\044\075\100\001\002\000\022\050\276" +
    "\051\275\053\163\054\161\055\164\110\167\111\166\112" +
    "\162\001\002\000\050\002\uffbb\032\uffbb\033\uffbb\050\uffbb" +
    "\051\uffbb\053\uffbb\054\uffbb\055\uffbb\064\uffbb\070\uffbb\076" +
    "\uffbb\110\uffbb\111\uffbb\112\uffbb\114\uffbb\115\uffbb\117\uffbb" +
    "\120\uffbb\121\uffbb\001\002\000\076\013\037\014\070\015" +
    "\060\016\103\017\067\020\064\021\104\022\065\023\071" +
    "\024\063\025\101\026\041\027\072\030\052\031\053\035" +
    "\073\036\106\037\050\040\046\041\043\042\061\043\040" +
    "\044\057\045\051\046\056\062\075\065\066\066\076\067" +
    "\044\075\100\001\002\000\020\051\300\053\163\054\161" +
    "\055\164\110\167\111\166\112\162\001\002\000\050\002" +
    "\uffba\032\uffba\033\uffba\050\uffba\051\uffba\053\uffba\054\uffba" +
    "\055\uffba\064\uffba\070\uffba\076\uffba\110\uffba\111\uffba\112" +
    "\uffba\114\uffba\115\uffba\117\uffba\120\uffba\121\uffba\001\002" +
    "\000\026\004\111\005\122\006\116\007\114\010\121\011" +
    "\120\012\112\065\124\102\115\104\110\001\002\000\004" +
    "\077\303\001\002\000\026\004\111\005\122\006\116\007" +
    "\114\010\121\011\120\012\112\065\124\102\115\104\110" +
    "\001\002\000\004\076\305\001\002\000\060\002\uffd3\032" +
    "\uffd3\033\uffd3\050\uffd3\051\uffd3\053\uffd3\054\uffd3\055\uffd3" +
    "\056\uffd3\057\uffd3\060\uffd3\061\uffd3\064\uffd3\070\uffd3\076" +
    "\uffd3\110\uffd3\111\uffd3\112\uffd3\114\uffd3\115\uffd3\117\uffd3" +
    "\120\uffd3\121\uffd3\001\002\000\026\004\111\005\122\006" +
    "\116\007\114\010\121\011\120\012\112\065\124\102\115" +
    "\104\110\001\002\000\004\077\310\001\002\000\026\004" +
    "\111\005\122\006\116\007\114\010\121\011\120\012\112" +
    "\065\124\102\115\104\110\001\002\000\004\076\312\001" +
    "\002\000\060\002\uffd4\032\uffd4\033\uffd4\050\uffd4\051\uffd4" +
    "\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\061" +
    "\uffd4\064\uffd4\070\uffd4\076\uffd4\110\uffd4\111\uffd4\112\uffd4" +
    "\114\uffd4\115\uffd4\117\uffd4\120\uffd4\121\uffd4\001\002\000" +
    "\026\004\111\005\122\006\116\007\114\010\121\011\120" +
    "\012\112\065\124\102\115\104\110\001\002\000\004\077" +
    "\315\001\002\000\026\004\111\005\122\006\116\007\114" +
    "\010\121\011\120\012\112\065\124\102\115\104\110\001" +
    "\002\000\004\076\317\001\002\000\060\002\uffd6\032\uffd6" +
    "\033\uffd6\050\uffd6\051\uffd6\053\uffd6\054\uffd6\055\uffd6\056" +
    "\uffd6\057\uffd6\060\uffd6\061\uffd6\064\uffd6\070\uffd6\076\uffd6" +
    "\110\uffd6\111\uffd6\112\uffd6\114\uffd6\115\uffd6\117\uffd6\120" +
    "\uffd6\121\uffd6\001\002\000\026\004\111\005\122\006\116" +
    "\007\114\010\121\011\120\012\112\065\124\102\115\104" +
    "\110\001\002\000\004\076\322\001\002\000\060\002\uffde" +
    "\032\uffde\033\uffde\050\uffde\051\uffde\053\uffde\054\uffde\055" +
    "\uffde\056\uffde\057\uffde\060\uffde\061\uffde\064\uffde\070\uffde" +
    "\076\uffde\110\uffde\111\uffde\112\uffde\114\uffde\115\uffde\117" +
    "\uffde\120\uffde\121\uffde\001\002\000\026\004\111\005\122" +
    "\006\116\007\114\010\121\011\120\012\112\065\124\102" +
    "\115\104\110\001\002\000\004\077\325\001\002\000\026" +
    "\004\111\005\122\006\116\007\114\010\121\011\120\012" +
    "\112\065\124\102\115\104\110\001\002\000\004\076\327" +
    "\001\002\000\050\002\uffb9\032\uffb9\033\uffb9\050\uffb9\051" +
    "\uffb9\053\uffb9\054\uffb9\055\uffb9\064\uffb9\070\uffb9\076\uffb9" +
    "\110\uffb9\111\uffb9\112\uffb9\114\uffb9\115\uffb9\117\uffb9\120" +
    "\uffb9\121\uffb9\001\002\000\026\004\111\005\122\006\116" +
    "\007\114\010\121\011\120\012\112\065\124\102\115\104" +
    "\110\001\002\000\004\077\332\001\002\000\026\004\111" +
    "\005\122\006\116\007\114\010\121\011\120\012\112\065" +
    "\124\102\115\104\110\001\002\000\004\076\334\001\002" +
    "\000\060\002\uffdd\032\uffdd\033\uffdd\050\uffdd\051\uffdd\053" +
    "\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd" +
    "\064\uffdd\070\uffdd\076\uffdd\110\uffdd\111\uffdd\112\uffdd\114" +
    "\uffdd\115\uffdd\117\uffdd\120\uffdd\121\uffdd\001\002\000\026" +
    "\004\111\005\122\006\116\007\114\010\121\011\120\012" +
    "\112\065\124\102\115\104\110\001\002\000\004\077\337" +
    "\001\002\000\026\004\111\005\122\006\116\007\114\010" +
    "\121\011\120\012\112\065\124\102\115\104\110\001\002" +
    "\000\004\076\341\001\002\000\060\002\uffd8\032\uffd8\033" +
    "\uffd8\050\uffd8\051\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8" +
    "\057\uffd8\060\uffd8\061\uffd8\064\uffd8\070\uffd8\076\uffd8\110" +
    "\uffd8\111\uffd8\112\uffd8\114\uffd8\115\uffd8\117\uffd8\120\uffd8" +
    "\121\uffd8\001\002\000\026\004\111\005\122\006\116\007" +
    "\114\010\121\011\120\012\112\065\124\102\115\104\110" +
    "\001\002\000\004\076\344\001\002\000\060\002\uffcd\032" +
    "\uffcd\033\uffcd\050\uffcd\051\uffcd\053\uffcd\054\uffcd\055\uffcd" +
    "\056\uffcd\057\uffcd\060\uffcd\061\uffcd\064\uffcd\070\uffcd\076" +
    "\uffcd\110\uffcd\111\uffcd\112\uffcd\114\uffcd\115\uffcd\117\uffcd" +
    "\120\uffcd\121\uffcd\001\002\000\030\004\111\005\122\006" +
    "\116\007\114\010\121\011\120\012\112\065\124\076\ufff1" +
    "\102\115\104\110\001\002\000\004\076\347\001\002\000" +
    "\060\002\uffe6\032\uffe6\033\uffe6\050\uffe6\051\uffe6\053\uffe6" +
    "\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\064" +
    "\uffe6\070\uffe6\076\uffe6\110\uffe6\111\uffe6\112\uffe6\114\uffe6" +
    "\115\uffe6\117\uffe6\120\uffe6\121\uffe6\001\002\000\004\075" +
    "\375\001\002\000\004\075\372\001\002\000\004\075\363" +
    "\001\002\000\004\075\354\001\002\000\026\004\111\005" +
    "\122\006\116\007\114\010\121\011\120\012\112\065\124" +
    "\102\115\104\110\001\002\000\004\076\356\001\002\000" +
    "\052\002\uffca\032\uffca\033\uffca\050\uffca\051\uffca\053\uffca" +
    "\054\uffca\055\uffca\060\357\064\uffca\070\uffca\076\uffca\110" +
    "\uffca\111\uffca\112\uffca\114\uffca\115\uffca\117\uffca\120\uffca" +
    "\121\uffca\001\002\000\004\075\360\001\002\000\026\004" +
    "\111\005\122\006\116\007\114\010\121\011\120\012\112" +
    "\065\124\102\115\104\110\001\002\000\004\076\362\001" +
    "\002\000\050\002\uffc8\032\uffc8\033\uffc8\050\uffc8\051\uffc8" +
    "\053\uffc8\054\uffc8\055\uffc8\064\uffc8\070\uffc8\076\uffc8\110" +
    "\uffc8\111\uffc8\112\uffc8\114\uffc8\115\uffc8\117\uffc8\120\uffc8" +
    "\121\uffc8\001\002\000\030\004\111\005\122\006\116\007" +
    "\114\010\121\011\120\012\112\065\124\076\ufff1\102\115" +
    "\104\110\001\002\000\004\076\365\001\002\000\052\002" +
    "\uffc7\032\uffc7\033\uffc7\050\uffc7\051\uffc7\053\uffc7\054\uffc7" +
    "\055\uffc7\061\366\064\uffc7\070\uffc7\076\uffc7\110\uffc7\111" +
    "\uffc7\112\uffc7\114\uffc7\115\uffc7\117\uffc7\120\uffc7\121\uffc7" +
    "\001\002\000\004\075\367\001\002\000\030\004\111\005" +
    "\122\006\116\007\114\010\121\011\120\012\112\065\124" +
    "\076\ufff1\102\115\104\110\001\002\000\004\076\371\001" +
    "\002\000\050\002\uffc6\032\uffc6\033\uffc6\050\uffc6\051\uffc6" +
    "\053\uffc6\054\uffc6\055\uffc6\064\uffc6\070\uffc6\076\uffc6\110" +
    "\uffc6\111\uffc6\112\uffc6\114\uffc6\115\uffc6\117\uffc6\120\uffc6" +
    "\121\uffc6\001\002\000\030\004\111\005\122\006\116\007" +
    "\114\010\121\011\120\012\112\065\124\076\ufff1\102\115" +
    "\104\110\001\002\000\004\076\374\001\002\000\050\002" +
    "\uffc5\032\uffc5\033\uffc5\050\uffc5\051\uffc5\053\uffc5\054\uffc5" +
    "\055\uffc5\064\uffc5\070\uffc5\076\uffc5\110\uffc5\111\uffc5\112" +
    "\uffc5\114\uffc5\115\uffc5\117\uffc5\120\uffc5\121\uffc5\001\002" +
    "\000\026\004\111\005\122\006\116\007\114\010\121\011" +
    "\120\012\112\065\124\102\115\104\110\001\002\000\004" +
    "\076\377\001\002\000\050\002\uffc9\032\uffc9\033\uffc9\050" +
    "\uffc9\051\uffc9\053\uffc9\054\uffc9\055\uffc9\064\uffc9\070\uffc9" +
    "\076\uffc9\110\uffc9\111\uffc9\112\uffc9\114\uffc9\115\uffc9\117" +
    "\uffc9\120\uffc9\121\uffc9\001\002\000\006\076\uffb1\077\u0107" +
    "\001\002\000\004\107\u0104\001\002\000\004\076\u0103\001" +
    "\002\000\004\034\uffb5\001\002\000\026\004\111\005\122" +
    "\006\116\007\114\010\121\011\120\012\112\065\124\102" +
    "\115\104\110\001\002\000\010\076\uffb3\077\uffb3\106\u0106" +
    "\001\002\000\006\076\uffb2\077\uffb2\001\002\000\004\065" +
    "\u0101\001\002\000\004\076\uffb0\001\002\000\022\032\uff8d" +
    "\033\uff8d\070\uff8d\114\uff8d\115\uff8d\117\uff8d\120\uff8d\121" +
    "\uff8d\001\002\000\004\002\000\001\002\000\024\002\uff91" +
    "\032\uff91\033\uff91\070\uff91\114\uff91\115\uff91\117\uff91\120" +
    "\uff91\121\uff91\001\002\000\006\002\uff9c\121\uff9c\001\002" +
    "\000\004\034\u010e\001\002\000\004\100\u010f\001\002\000" +
    "\014\071\uffa3\072\u0110\073\uffa3\074\uffa3\101\uffa3\001\002" +
    "\000\004\113\u011f\001\002\000\012\071\u0113\073\uffa5\074" +
    "\uffa5\101\uffa5\001\002\000\010\073\u0116\074\uffa1\101\uffa1" +
    "\001\002\000\004\113\u0114\001\002\000\004\006\u0115\001" +
    "\002\000\010\073\uffa6\074\uffa6\101\uffa6\001\002\000\004" +
    "\113\u011d\001\002\000\006\074\u0118\101\uff9f\001\002\000" +
    "\004\113\u011b\001\002\000\004\101\u011a\001\002\000\024" +
    "\002\uff9e\032\uff9e\033\uff9e\070\uff9e\114\uff9e\115\uff9e\117" +
    "\uff9e\120\uff9e\121\uff9e\001\002\000\004\006\u011c\001\002" +
    "\000\004\101\uffa0\001\002\000\004\006\u011e\001\002\000" +
    "\006\074\uffa2\101\uffa2\001\002\000\004\006\u0120\001\002" +
    "\000\012\071\uffa4\073\uffa4\074\uffa4\101\uffa4\001\002\000" +
    "\006\002\uff98\121\uff98\001\002\000\006\002\uff9b\121\uff9b" +
    "\001\002\000\006\002\uff9a\121\uff9a\001\002\000\006\002" +
    "\uff97\121\uff97\001\002\000\050\002\uff90\004\111\005\122" +
    "\006\116\007\114\010\121\011\120\012\112\032\uff90\033" +
    "\uff90\065\124\070\uff90\102\115\104\110\114\uff90\115\uff90" +
    "\117\uff90\120\uff90\121\uff90\001\002\000\024\002\uff8f\032" +
    "\uff8f\033\uff8f\070\uff8f\114\uff8f\115\uff8f\117\uff8f\120\uff8f" +
    "\121\uff8f\001\002\000\004\065\u0129\001\002\000\004\076" +
    "\u012e\001\002\000\010\075\214\076\uffb6\077\uffb6\001\002" +
    "\000\006\076\uff95\077\u012b\001\002\000\004\065\u0129\001" +
    "\002\000\004\076\uff94\001\002\000\006\076\uff96\077\uff96" +
    "\001\002\000\024\002\uff93\032\uff93\033\uff93\070\uff93\114" +
    "\uff93\115\uff93\117\uff93\120\uff93\121\uff93\001\002\000\022" +
    "\032\uff8e\033\uff8e\070\uff8e\114\uff8e\115\uff8e\117\uff8e\120" +
    "\uff8e\121\uff8e\001\002\000\006\002\uff99\121\uff99\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012e\000\026\034\015\041\011\042\014\045\010\046" +
    "\021\047\017\050\012\051\003\052\023\053\007\001\001" +
    "\000\024\034\015\041\011\042\u012f\045\010\046\021\050" +
    "\012\051\003\052\023\053\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\034\015\041" +
    "\011\042\u0123\045\010\046\021\050\012\051\003\052\023" +
    "\053\007\001\001\000\024\034\015\041\011\042\u0122\045" +
    "\010\046\021\050\012\051\003\052\023\053\007\001\001" +
    "\000\024\034\015\041\011\042\u0121\045\010\046\021\050" +
    "\012\051\003\052\023\053\007\001\001\000\024\034\015" +
    "\041\011\042\u0120\045\010\046\021\050\012\051\003\052" +
    "\023\053\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\034\015\041\011\042\u010b\045\010\046\021\050" +
    "\012\051\003\052\023\053\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\026\001\001\000\024\034\015\041\011\042\024" +
    "\045\010\046\021\050\012\051\003\052\023\053\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\031" +
    "\001\001\000\002\001\001\000\006\024\377\025\u0101\001" +
    "\001\000\002\001\001\000\034\006\033\007\053\010\104" +
    "\011\041\012\073\013\044\014\054\015\101\016\035\017" +
    "\061\020\034\021\046\031\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\271\003\116\004\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\240\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\027\201\030\200\001" +
    "\001\000\002\001\001\000\036\006\033\007\053\010\104" +
    "\011\041\012\073\013\044\014\054\015\101\016\035\017" +
    "\175\020\034\021\046\031\076\032\176\001\001\000\034" +
    "\006\033\007\053\010\104\011\041\012\073\013\044\014" +
    "\054\015\101\016\035\017\157\020\034\021\046\031\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\112\003\116\004\122\001\001\000\012\002" +
    "\132\003\116\004\122\005\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\002\125\003\116\004\122\026\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\002\132\003\116" +
    "\004\122\005\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\002\132\003\116\004\122" +
    "\005\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\142\003\116\004\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\145\003" +
    "\116\004\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\150\003\116\004\122\001\001\000\002\001" +
    "\001\000\010\002\152\003\116\004\122\001\001\000\002" +
    "\001\001\000\010\002\155\003\116\004\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\033\007\053\010\104\011\041\012" +
    "\073\013\044\014\054\015\101\016\035\017\174\020\034" +
    "\021\046\031\076\001\001\000\034\006\033\007\053\010" +
    "\104\011\041\012\073\013\044\014\054\015\101\016\035" +
    "\017\173\020\034\021\046\031\076\001\001\000\034\006" +
    "\033\007\053\010\104\011\041\012\073\013\044\014\054" +
    "\015\101\016\035\017\172\020\034\021\046\031\076\001" +
    "\001\000\034\006\033\007\053\010\104\011\041\012\073" +
    "\013\044\014\054\015\101\016\035\017\171\020\034\021" +
    "\046\031\076\001\001\000\002\001\001\000\034\006\033" +
    "\007\053\010\104\011\041\012\073\013\044\014\054\015" +
    "\101\016\035\017\170\020\034\021\046\031\076\001\001" +
    "\000\034\006\033\007\053\010\104\011\041\012\073\013" +
    "\044\014\054\015\101\016\035\017\167\020\034\021\046" +
    "\031\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\125\003\116\004\122\026\204\001\001\000" +
    "\002\001\001\000\006\027\201\030\206\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\212\001\001\000\002\001\001\000\012\002\132\003\116" +
    "\004\122\005\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\223\003\116\004" +
    "\122\001\001\000\002\001\001\000\010\002\225\003\116" +
    "\004\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\002\132\003\116\004\122\005\230\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\002\132\003\116\004" +
    "\122\005\233\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\236\003\116\004\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\242" +
    "\003\116\004\122\001\001\000\002\001\001\000\012\002" +
    "\132\003\116\004\122\005\244\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\247\003\116\004\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\252" +
    "\003\116\004\122\001\001\000\002\001\001\000\010\002" +
    "\254\003\116\004\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\257\003\116\004\122\001\001\000" +
    "\002\001\001\000\010\002\261\003\116\004\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\264\003" +
    "\116\004\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\267\003\116\004\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\006\033" +
    "\007\053\010\104\011\041\012\073\013\044\014\054\015" +
    "\101\016\035\017\273\020\034\021\046\031\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\006\033\007" +
    "\053\010\104\011\041\012\073\013\044\014\054\015\101" +
    "\016\035\017\276\020\034\021\046\031\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\301\003\116" +
    "\004\122\001\001\000\002\001\001\000\010\002\303\003" +
    "\116\004\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\306\003\116\004\122\001\001\000\002\001" +
    "\001\000\010\002\310\003\116\004\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\313\003\116\004" +
    "\122\001\001\000\002\001\001\000\010\002\315\003\116" +
    "\004\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\320\003\116\004\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\323\003\116\004\122\001" +
    "\001\000\002\001\001\000\010\002\325\003\116\004\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\002" +
    "\330\003\116\004\122\001\001\000\002\001\001\000\010" +
    "\002\332\003\116\004\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\335\003\116\004\122\001\001" +
    "\000\002\001\001\000\010\002\337\003\116\004\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\342" +
    "\003\116\004\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\002\132\003\116\004\122\005\345\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\354\003\116\004\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\360\003\116" +
    "\004\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\002\132\003\116\004\122\005\363\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\002" +
    "\132\003\116\004\122\005\367\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\002\132\003\116\004\122\005" +
    "\372\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\375\003\116\004\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\002\125\003\116\004" +
    "\122\026\u0104\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\024\377\025\u0107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\u0110\001\001\000\002\001\001\000\004\035\u0111\001\001" +
    "\000\004\037\u0116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\u0118" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\u0125\003\116\004\122\001\001\000" +
    "\002\001\001\000\006\043\u0129\044\u0127\001\001\000\002" +
    "\001\001\000\004\022\u012c\001\001\000\002\001\001\000" +
    "\006\043\u0129\044\u012b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




   protected ToolBus toolbus;
   protected TBTermFactory tbfactory;
   protected String fileName;
   protected String processName = "";
   private HashSet<String> includedFiles = new HashSet<String>();
   protected List<ATerm> toolbusProcessCalls = new ArrayList<ATerm>();
   
   protected HashMap<String, ATerm> declaredVaribles = new HashMap<String, ATerm>();
   
   protected Stack<Boolean> ifdefStack;
	
   /** ToolBus specific constructor */
   public parser(HashSet<String> includedFiles, List<ATerm> toolbusProcessCalls, String filename, ToolBus tb) throws FileNotFoundException  {
     super(new Lexer(new FileInputStream(filename)));
     
     this.includedFiles = includedFiles;
     this.toolbusProcessCalls = toolbusProcessCalls;
     this.fileName = filename;
     
     includedFiles.add(filename);
     
     toolbus = tb;
     tbfactory = toolbus.getTBTermFactory();
     
     ifdefStack = new Stack<Boolean>();
     ifdefStack.push(new Boolean(true));
   }
   
   /** ToolBus specific constructor */
   public parser(String filename, ToolBus tb) throws FileNotFoundException  {
     this(new HashSet<String>(), new ArrayList<ATerm>(), filename, tb);
   }
   
   public String[] scriptsNames(){
		List<String> scriptNamesList = new ArrayList<String>();
		Iterator<String> scriptNamesIterator = includedFiles.iterator();
		while(scriptNamesIterator.hasNext()){
			scriptNamesList.add(scriptNamesIterator.next());
		}
		
		String[] scriptNames = new String[scriptNamesList.size()];
		return scriptNamesList.toArray(scriptNames);
   }
   
   protected void enterIfdef (boolean yesOrno){
      ifdefStack.push(new Boolean(yesOrno));
   }
   
   protected void leaveIfdef(){
      ifdefStack.pop();
   }
   
   protected boolean generating() {
   	  return ifdefStack.peek().booleanValue();
   }
  
   protected void doParseInclude(String filename) throws ToolBusException{
		if(filename.length() > 0 && filename.charAt(0) == File.separatorChar){
			File f = new File(filename);
			if(f.exists()){
				doParse(filename);
				return;
			}
		}else{
			String path = toolbus.getProperty("include.path", ".");
			LoggerFactory.log("unknown", "doParseInclude: path = " + path, IToolBusLoggerConstants.PARSING);
			
			String[] elems = path.split("[ ,\t\n\r]+");
			for(int i = 0; i < elems.length; i++){
				String dir = elems[i];
				
				if(dir.length() > 0){
					String absoluteName = dir + File.separator + filename;
					File f = new File(absoluteName);
					if(f.exists()){
						doParse(absoluteName);
						return;
					}
				}
			}
		}
		throw new ToolBusException("Cannot resolve include file '" + filename + "'");
	} 
	
	private void doParse(String filename) {
		if(includedFiles.contains(filename)){
			//System.err.println("Skipping include of " + filename);
			return;
		}
		
		includedFiles.add(filename);
		//System.err.println("Parse: " + filename);
		toolbus.parsecup1(includedFiles, toolbusProcessCalls, filename);
        //System.err.println("Parse: back to " + filename);
	}
	
	public void generateInitialProcessCalls() throws ToolBusException {
	    for(ATerm call: toolbusProcessCalls){
	       toolbus.addProcess(new ProcessCall(call, tbfactory, null));
	    }
	}
    
    public void syntax_error(java_cup.runtime.Symbol badToken){
    	throw new SyntaxErrorException("Syntax error in "+fileName+", at line: "+(badToken.left + 1)+", column: "+(badToken.right + 1)+", symbol id: "+badToken.sym);
    }
	
	private class SyntaxErrorException extends RuntimeException{
		private static final long serialVersionUID = 2315538188275748342L;

		public SyntaxErrorException(String message){
			super(message);
		}
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


  private PositionInformation makePosInfo(java_cup.runtime.Symbol beginSymbol, java_cup.runtime.Symbol endSymbol){
    return new PositionInformation(parser.fileName, beginSymbol.left, beginSymbol.right, endSymbol.left, endSymbol.right);
  }
  
  private PositionInformation makePosInfoWithEndColumnOffset(java_cup.runtime.Symbol beginSymbol, java_cup.runtime.Symbol endSymbol, int endColumnOffset){
    return new PositionInformation(parser.fileName, beginSymbol.left, beginSymbol.right, endSymbol.left, endSymbol.right + endColumnOffset);
  }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ifdef ::= ifdef_head def_list ENDIF 
            {
              Object RESULT =null;
		 
                                               parser.leaveIfdef();
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifdef",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ifdef_head ::= IFNDEF NAME 
            {
              Object RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //System.err.println("ifndef " + nm);
                                               if(parser.generating()){
                                                 boolean yes = parser.toolbus.getProperty(nm) == null;
                                                 parser.enterIfdef(yes);
                                               }
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifdef_head",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ifdef_head ::= IFDEF NAME 
            {
              Object RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //System.err.println("ifdef " + nm);
                                                if(parser.generating()){
         									      boolean yes = parser.toolbus.getProperty(nm) != null;
                                                  parser.enterIfdef(yes);
                                                }
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifdef_head",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // define ::= DEFINE NAME term 
            {
              Object RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.generating()){
          										   //System.err.println("define " + nm + " = " + t);
       											   parser.toolbus.setProperty(nm, t.toString()); 
       											}
       										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("define",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // define ::= DEFINE NAME 
            {
              Object RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.generating()){
         										   //System.err.println("define " + nm);
         										   parser.toolbus.setProperty(nm, ""); 
         									   }
         									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("define",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // include ::= INCLUDE FILENAME 
            {
              Object RESULT =null;
		String fn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.generating()){
                                                 parser.doParseInclude(fn);
                                               }
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("include",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // toolbus_def ::= toolbus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("toolbus_def",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // toolbus ::= TOOLBUS LPAR proc_call_in_tb_list RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("toolbus",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // proc_call_in_tb_list ::= proc_call_in_tb COMMA proc_call_in_tb_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_call_in_tb_list",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // proc_call_in_tb_list ::= proc_call_in_tb 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_call_in_tb_list",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // proc_call_in_tb ::= NAME actuals 
            {
              Object RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ATermList act = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.generating()){
       											  AFun af = parser.tbfactory.makeAFun(nm.toString(), act.getLength(), false);
     										      ATerm call = parser.tbfactory.makeApplList(af, act);
     										      parser.toolbusProcessCalls.add(call);
     										      //System.err.println("add to toolbusProcessCalls " + call);
     										   }
     										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_call_in_tb",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // def_list ::= ifdef def_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_list",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // def_list ::= define def_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_list",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // def_list ::= include def_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_list",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // def_list ::= toolbus_def def_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_list",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // def_list ::= tool_def def_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_list",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // def_list ::= proc_def def_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_list",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // def_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_list",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // tool_def ::= TOOL IDENT IS LBRACE host kind command class RBRACE 
            {
              Object RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		String h = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		String cmd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String cls = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.generating()){
                                                     ToolDefinition td = new ToolDefinition(nm, h, k, cmd, cls, parser.toolbus);
                                                     //System.err.println("Adding: " + td);
                                                     parser.toolbus.addToolDefinition(td);
                                                  }
                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_def",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // class ::= 
            {
              String RESULT =null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // class ::= CLASS EQUALS STRING 
            {
              String RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // command ::= 
            {
              String RESULT =null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // command ::= COMMAND EQUALS STRING 
            {
              String RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // host ::= 
            {
              String RESULT =null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("host",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // host ::= HOST EQUALS STRING 
            {
              String RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("host",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // kind ::= 
            {
              String RESULT =null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("kind",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // kind ::= KIND EQUALS STRING 
            {
              String RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("kind",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // proc_def ::= PROCESS proc_def_name formals IS proc 
            {
              ProcessDefinition RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATermList fml = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ProcessExpression p = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.generating()){
                                             	  ProcessDefinition pd = new ProcessDefinition(nm, fml, p, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)));
                                                  parser.toolbus.addProcessDefinition(pd); 
                                                  parser.processName = "";
                                                }
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_def",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // proc_def_name ::= NAME 
            {
              String RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.processName = nm;
                                                RESULT = nm; 
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_def_name",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // let_tail ::= proc ENDLET 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("let_tail",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // let_head ::= LET var_list IN 
            {
              ATermList RESULT =null;
		ATermList vl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = vl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("let_head",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // let ::= let_head let_tail 
            {
              ProcessExpression RESULT =null;
		ATermList vl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ProcessExpression p = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LetDefinition(vl, p, parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("let",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // var_list ::= var_decl COMMA var_list 
            {
              ATermList RESULT =null;
		ATerm vd = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ATermList vl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.tbfactory.makeList(vd, vl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // var_list ::= var_decl 
            {
              ATermList RESULT =null;
		ATerm vd = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.tbfactory.makeList(vd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // var_decl ::= NAME COLON type 
            {
              ATerm RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ATerm tp = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 AFun af = parser.tbfactory.makeAFun(nm.toString(), 0, false);
       											parser.declaredVaribles.put(nm, tp);
                                                RESULT = parser.tbfactory.mkVar(af, parser.processName, tp);
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // type ::= term 
            {
              ATerm RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // form_list ::= form_decl COMMA form_list 
            {
              ATermList RESULT =null;
		ATerm fd = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ATermList fdl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.tbfactory.makeList(fd, fdl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_list",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // form_list ::= form_decl 
            {
              ATermList RESULT =null;
		ATerm fd = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.tbfactory.makeList(fd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_list",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // form_decl ::= NAME COLON type QUESTION 
            {
              ATerm RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm tp = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 AFun af = parser.tbfactory.makeAFun(nm, 0, false);
                                                parser.declaredVaribles.put(nm, tp);
                                                RESULT = parser.tbfactory.mkResVar(af, parser.processName, tp);
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_decl",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // form_decl ::= NAME COLON type 
            {
              ATerm RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ATerm tp = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 AFun af = parser.tbfactory.makeAFun(nm, 0, false);
                                                parser.declaredVaribles.put(nm, tp);
                                                RESULT = parser.tbfactory.mkVar(af, parser.processName, tp);
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_decl",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // formals ::= 
            {
              ATermList RESULT =null;
		 RESULT = parser.tbfactory.makeList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // formals ::= LPAR form_list RPAR 
            {
              ATermList RESULT =null;
		ATermList fml = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = fml; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // actuals ::= 
            {
              ATermList RESULT =null;
		 RESULT = parser.tbfactory.makeList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actuals",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // actuals ::= LPAR term_list RPAR 
            {
              ATermList RESULT =null;
		ATermList tl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = tl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actuals",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // proc_call ::= NAME actuals 
            {
              ProcessExpression RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ATermList act = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 AFun af = parser.tbfactory.makeAFun(nm.toString(), act.getLength(), false);
     										   ATerm call = parser.tbfactory.makeApplList(af, act);
     										   RESULT= new ProcessCall(call, parser.tbfactory, makePosInfoWithEndColumnOffset((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1), nm.length())); 
     										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_call",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // proc ::= EXECUTE LPAR term COMMA term RPAR 
            {
              ProcessExpression RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm rv = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Execute ex = new Execute(t, rv, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top)));
				                               Connect con = new Connect(rv, parser.tbfactory, null, true);
				                               RESULT = new Sequence(ex, con, parser.tbfactory, null);
				                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // proc ::= IF term THEN proc ELSE proc FI 
            {
              ProcessExpression RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ProcessExpression p1 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ProcessExpression p2 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new IfElse(t, p1, p2, parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // proc ::= IF term THEN proc FI 
            {
              ProcessExpression RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ProcessExpression p = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfThen(t, p, parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // proc ::= let 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // proc ::= proc_call 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // proc ::= LPAR proc RPAR 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // proc ::= proc DISRUPT proc 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p1 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ProcessExpression p2 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Disrupt(p1, p2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // proc ::= proc FMERGE proc 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p1 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ProcessExpression p2 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Merge(p1, p2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // proc ::= proc ITER proc 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p1 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ProcessExpression p2 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sequence(new Tau(parser.tbfactory, null),
                                                                       new Iteration(p1, p2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1))),
                                                                       parser.tbfactory,
                                                                       null
                                                                      );
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // proc ::= proc SEQ proc 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p1 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ProcessExpression p2 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sequence(p1, p2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // proc ::= proc RIGHTCHOICE proc 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p1 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ProcessExpression p2 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RightBiasedAlternative(p1, p2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // proc ::= proc CHOICE proc 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p1 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ProcessExpression p2 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Alternative(p1, p2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // proc ::= atom ABS_TIMEOUT LPAR term_list RPAR 
            {
              ProcessExpression RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ATermList tl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			a.setAbsoluteTimeout(tl);
     												RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // proc ::= atom ABS_DELAY LPAR term_list RPAR ABS_TIMEOUT LPAR term_list RPAR 
            {
              ProcessExpression RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		ATermList dl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ATermList tl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			a.setAbsoluteDelay(dl);
     																					a.setAbsoluteTimeout(tl);
     																					RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // proc ::= atom ABS_DELAY LPAR term_list RPAR 
            {
              ProcessExpression RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ATermList dl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			a.setAbsoluteDelay(dl);
     												RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // proc ::= atom REL_DELAY LPAR term RPAR REL_TIMEOUT LPAR term RPAR 
            {
              ProcessExpression RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		ATerm d = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			a.setDelay(d);
																			a.setTimeout(t);
																			RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // proc ::= atom REL_TIMEOUT LPAR term RPAR 
            {
              ProcessExpression RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			a.setTimeout(t);
												RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // proc ::= atom REL_DELAY LPAR term RPAR 
            {
              ProcessExpression RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ATerm d = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			a.setDelay(d);
											RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // proc ::= atom 
            {
              ProcessExpression RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // assign ::= NAME ASSIGN term 
            {
              Atom RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ATerm tnm = parser.tbfactory.make(nm);
                                               ATerm type = parser.declaredVaribles.get(nm);
     									       if(type == null) throw new RuntimeException("Undeclared variable: "+nm);
        									   RESULT = new Assign(
        												   parser.tbfactory.mkVar(tnm, parser.processName, type),
        									               t,
        									               parser.tbfactory, 
        									               makePosInfoWithEndColumnOffset((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1), 2));
        								    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // shutdown ::= SHUTDOWN LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ShutDown(t, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shutdown",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // read_print ::= READ LPAR term_list RPAR 
            {
              Atom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_print",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // read_print ::= PRINTF LPAR term_list RPAR 
            {
              Atom RESULT =null;
		ATermList tl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Print(tl, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_print",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // create ::= CREATE LPAR NAME actuals COMMA result_var RPAR 
            {
              Atom RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ATermList act = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm rv = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 AFun af = parser.tbfactory.makeAFun(nm.toString(), act.getLength(), false);
     										   ATerm call = parser.tbfactory.makeApplList(af, act);
     										   RESULT= new Create(call, rv, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
     										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // delta_tau ::= TAU 
            {
              Atom RESULT =null;
		 RESULT = new Tau(parser.tbfactory, makePosInfoWithEndColumnOffset((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top), 2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("delta_tau",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // delta_tau ::= DELTA 
            {
              Atom RESULT =null;
		 RESULT = new Delta(parser.tbfactory, makePosInfoWithEndColumnOffset((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top), 4)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("delta_tau",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tool_atom ::= REC_VALUE LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new RecVal(t1, t2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tool_atom ::= SND_DO LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Do(t1, t2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tool_atom ::= SND_CANCEL LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tool_atom ::= REC_PERF_STATS LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new RecPerfStats(t1, t2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tool_atom ::= GET_PERF_STATS LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new GetPerfStats(t1, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tool_atom ::= SND_EVAL LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Eval(t1, t2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tool_atom ::= SND_ACK_EVENT LPAR term COMMA term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t3 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new AckEvent(t1, t2, t3, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tool_atom ::= SND_ACK_EVENT LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new AckEvent(t1, t2, null, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tool_atom ::= REC_EVENT LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Event(t1, t2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tool_atom ::= SND_KILL LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new SndKill(t1, t2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tool_atom ::= SND_TERMINATE LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Terminate(t1, t2, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tool_atom ::= REC_DISCONNECT LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm rv = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DisConnect(rv, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tool_atom ::= REC_CONNECT LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm rv = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Connect(rv, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top)), false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // note_atom ::= NO_NOTE LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new NoNote(t, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("note_atom",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // note_atom ::= REC_NOTE LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new RecNote(t, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("note_atom",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // note_atom ::= SND_NOTE LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new SndNote(t, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("note_atom",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // note_atom ::= UNSUBSCRIBE LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new UnSubscribe(t, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("note_atom",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // note_atom ::= SUBSCRIBE LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Subscribe(t, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("note_atom",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // comm_atom ::= REC_MSG LPAR term_list RPAR 
            {
              Atom RESULT =null;
		ATermList tl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  new RecMsg(tl, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comm_atom",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // comm_atom ::= SND_MSG LPAR term_list RPAR 
            {
              Atom RESULT =null;
		ATermList tl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  new SndMsg(tl, parser.tbfactory, makePosInfo((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3), (java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comm_atom",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // atom ::= shutdown 
            {
              Atom RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // atom ::= assign 
            {
              Atom RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // atom ::= read_print 
            {
              Atom RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // atom ::= create 
            {
              Atom RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // atom ::= delta_tau 
            {
              Atom RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // atom ::= tool_atom 
            {
              Atom RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // atom ::= note_atom 
            {
              Atom RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // atom ::= comm_atom 
            {
              Atom RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // term_list ::= term COMMA term_list 
            {
              ATermList RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ATermList tl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.tbfactory.makeList(t, tl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_list",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // term_list ::= term 
            {
              ATermList RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.tbfactory.makeList(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_list",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // term_list ::= 
            {
              ATermList RESULT =null;
		 RESULT = parser.tbfactory.makeList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_list",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var ::= NAME 
            {
              ATerm RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 AFun af = parser.tbfactory.makeAFun(nm, 0, false);
     									      ATerm at = parser.tbfactory.makeAppl(af);
     									      String replacement = parser.toolbus.getProperty(nm);
				                              if(replacement != null){
												RESULT = parser.tbfactory.make(replacement);
										      } else {
										        ATerm type = parser.declaredVaribles.get(nm);
     									        if(type == null) throw new RuntimeException("Undeclared variable: "+nm);
     									        RESULT = parser.tbfactory.mkVar(at, parser.processName, type);
     									      }
     									   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // result_var ::= NAME QUESTION 
            {
              ATerm RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 AFun af = parser.tbfactory.makeAFun(nm, 0, false);
     									      ATerm at = parser.tbfactory.makeAppl(af);
     									      ATerm type = parser.declaredVaribles.get(nm);
     									      if(type == null) throw new RuntimeException("Undeclared variable: "+nm);
     									      RESULT = parser.tbfactory.mkResVar(at, parser.processName, type);
     									   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("result_var",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // term ::= LANGLE type RANGLE 
            {
              ATerm RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = parser.tbfactory.makePlaceholder(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // term ::= LSQUARE term_list RSQUARE 
            {
              ATerm RESULT =null;
		ATermList tl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = tl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // term ::= IDENT LPAR term_list RPAR 
            {
              ATerm RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATermList tl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 AFun af = parser.tbfactory.makeAFun(id.toString(), tl.getLength(), false);
     										  RESULT = parser.tbfactory.makeApplList(af, tl);
     									   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // term ::= IDENT 
            {
              ATerm RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 AFun af = parser.tbfactory.makeAFun(id.toString(), 0, false);
     									      RESULT = parser.tbfactory.makeAppl(af);
     									   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // term ::= UNDEFINED 
            {
              ATerm RESULT =null;
		 RESULT = parser.tbfactory.Undefined; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // term ::= FALSE 
            {
              ATerm RESULT =null;
		 RESULT = parser.tbfactory.False; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // term ::= TRUE 
            {
              ATerm RESULT =null;
		 RESULT = parser.tbfactory.True; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // term ::= result_var 
            {
              ATerm RESULT =null;
		ATerm rv = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = rv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // term ::= var 
            {
              ATerm RESULT =null;
		ATerm v = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // term ::= STRING 
            {
              ATerm RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 AFun afun = parser.tbfactory.makeAFun(s.toString(), 0, true);
     										  RESULT = parser.tbfactory.makeAppl(afun); 
     									   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // term ::= REAL 
            {
              ATerm RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.tbfactory.makeReal(new Double(s).doubleValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // term ::= INT 
            {
              ATerm RESULT =null;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.tbfactory.makeInt(i.intValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= script EOF 
            {
              Object RESULT =null;
		Object start_val = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // script ::= def_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("script",37, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

