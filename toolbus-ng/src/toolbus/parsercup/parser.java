
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 26 16:21:29 CEST 2007
//----------------------------------------------------

package toolbus.parsercup;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Stack;

import java_cup.runtime.Scanner;
import toolbus.TBTermFactory;
import toolbus.ToolBus;
import toolbus.atom.Assign;
import toolbus.atom.Atom;
import toolbus.atom.Create;
import toolbus.atom.Delta;
import toolbus.atom.Print;
import toolbus.atom.ShutDown;
import toolbus.atom.Tau;
import toolbus.atom.msg.RecMsg;
import toolbus.atom.msg.SndMsg;
import toolbus.atom.note.NoNote;
import toolbus.atom.note.RecNote;
import toolbus.atom.note.SndNote;
import toolbus.atom.note.Subscribe;
import toolbus.atom.note.UnSubscribe;
import toolbus.atom.tool.AckEvent;
import toolbus.atom.tool.Connect;
import toolbus.atom.tool.DisConnect;
import toolbus.atom.tool.Do;
import toolbus.atom.tool.Eval;
import toolbus.atom.tool.Event;
import toolbus.atom.tool.Execute;
import toolbus.atom.tool.RecVal;
import toolbus.atom.tool.SndKill;
import toolbus.atom.tool.Terminate;
import toolbus.exceptions.ToolBusException;
import toolbus.logging.IToolBusLoggerConstants;
import toolbus.logging.LoggerFactory;
import toolbus.process.Alternative;
import toolbus.process.Disrupt;
import toolbus.process.IfElse;
import toolbus.process.IfThen;
import toolbus.process.Iteration;
import toolbus.process.LetDefinition;
import toolbus.process.Merge;
import toolbus.process.ProcessCall;
import toolbus.process.ProcessDefinition;
import toolbus.process.ProcessExpression;
import toolbus.process.RightBiasedAlternative;
import toolbus.process.Sequence;
import toolbus.tool.ToolDefinition;
import aterm.AFun;
import aterm.ATerm;
import aterm.ATermList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 26 16:21:29 CEST 2007
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\047\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\006\000\002" +
    "\002\005\000\002\002\005\000\002\003\004\000\002\004" +
    "\003\000\002\005\002\000\002\005\003\000\002\005\005" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\007\006\000\002\007" +
    "\006\000\002\010\006\000\002\010\006\000\002\010\006" +
    "\000\002\010\006\000\002\010\006\000\002\011\006\000" +
    "\002\011\006\000\002\011\010\000\002\011\010\000\002" +
    "\011\010\000\002\011\010\000\002\011\012\000\002\011" +
    "\010\000\002\011\010\000\002\011\010\000\002\011\010" +
    "\000\002\012\003\000\002\012\003\000\002\013\011\000" +
    "\002\014\006\000\002\014\006\000\002\016\006\000\002" +
    "\015\005\000\002\017\003\000\002\017\007\000\002\017" +
    "\013\000\002\017\007\000\002\017\013\000\002\017\007" +
    "\000\002\017\007\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\003\000\002\017" +
    "\003\000\002\017\007\000\002\017\011\000\002\017\010" +
    "\000\002\020\004\000\002\022\005\000\002\022\002\000" +
    "\002\023\005\000\002\023\002\000\002\024\005\000\002" +
    "\024\006\000\002\025\003\000\002\025\005\000\002\026" +
    "\003\000\002\027\005\000\002\030\003\000\002\030\005" +
    "\000\002\021\004\000\002\031\005\000\002\032\004\000" +
    "\002\033\004\000\002\034\006\000\002\035\005\000\002" +
    "\035\002\000\002\036\005\000\002\036\002\000\002\037" +
    "\005\000\002\037\002\000\002\040\005\000\002\040\002" +
    "\000\002\041\013\000\002\042\002\000\002\042\004\000" +
    "\002\042\004\000\002\042\004\000\002\042\004\000\002" +
    "\042\004\000\002\042\004\000\002\043\004\000\002\044" +
    "\003\000\002\044\005\000\002\046\006\000\002\045\003" +
    "\000\002\051\004\000\002\050\004\000\002\050\005\000" +
    "\002\052\004\000\002\052\004\000\002\053\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0124\000\022\002\uff9f\032\022\033\017\066\015\112" +
    "\005\113\011\115\006\116\012\001\002\000\024\002\uff9f" +
    "\032\022\033\017\066\015\112\005\113\011\115\006\116" +
    "\012\117\uff9f\001\002\000\004\114\u0125\001\002\000\004" +
    "\063\u0124\001\002\000\024\002\uff9f\032\022\033\017\066" +
    "\015\112\005\113\011\115\006\116\012\117\uff9f\001\002" +
    "\000\024\002\uff9f\032\022\033\017\066\015\112\005\113" +
    "\011\115\006\116\012\117\uff9f\001\002\000\004\063\u0120" +
    "\001\002\000\004\063\u011f\001\002\000\024\002\uff94\032" +
    "\uff94\033\uff94\066\uff94\112\uff94\113\uff94\115\uff94\116\uff94" +
    "\117\uff94\001\002\000\022\032\022\033\017\066\015\112" +
    "\005\113\011\115\006\116\012\117\uff9f\001\002\000\004" +
    "\012\u0109\001\002\000\024\002\uff9f\032\022\033\017\066" +
    "\015\112\005\113\011\115\006\116\012\117\uff9f\001\002" +
    "\000\004\063\u0107\001\002\000\024\002\uff9f\032\022\033" +
    "\017\066\015\112\005\113\011\115\006\116\012\117\uff9f" +
    "\001\002\000\004\002\001\001\002\000\004\073\376\001" +
    "\002\000\004\002\375\001\002\000\006\034\uffb6\073\027" +
    "\001\002\000\024\002\uff9f\032\022\033\017\066\015\112" +
    "\005\113\011\115\006\116\012\117\uff9f\001\002\000\006" +
    "\002\uff9e\117\uff9e\001\002\000\004\063\365\001\002\000" +
    "\004\034\031\001\002\000\072\013\035\014\064\015\054" +
    "\016\077\017\063\020\060\021\100\022\061\023\065\024" +
    "\057\025\075\026\037\027\066\030\047\031\050\035\067" +
    "\036\102\037\046\040\044\041\041\042\055\043\036\044" +
    "\053\060\071\063\062\064\072\065\042\073\074\001\002" +
    "\000\060\002\uffcd\032\uffcd\033\uffcd\046\uffcd\047\uffcd\051" +
    "\uffcd\052\uffcd\053\uffcd\054\337\055\336\056\334\057\335" +
    "\062\uffcd\066\uffcd\074\uffcd\106\uffcd\107\uffcd\110\uffcd\112" +
    "\uffcd\113\uffcd\115\uffcd\116\uffcd\117\uffcd\001\002\000\050" +
    "\002\uffbf\032\uffbf\033\uffbf\046\uffbf\047\uffbf\051\uffbf\052" +
    "\uffbf\053\uffbf\062\uffbf\066\uffbf\074\uffbf\106\uffbf\107\uffbf" +
    "\110\uffbf\112\uffbf\113\uffbf\115\uffbf\116\uffbf\117\uffbf\001" +
    "\002\000\060\002\uffe7\032\uffe7\033\uffe7\046\uffe7\047\uffe7" +
    "\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057" +
    "\uffe7\062\uffe7\066\uffe7\074\uffe7\106\uffe7\107\uffe7\110\uffe7" +
    "\112\uffe7\113\uffe7\115\uffe7\116\uffe7\117\uffe7\001\002\000" +
    "\004\073\331\001\002\000\004\073\326\001\002\000\004" +
    "\073\321\001\002\000\060\002\uffec\032\uffec\033\uffec\046" +
    "\uffec\047\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec" +
    "\056\uffec\057\uffec\062\uffec\066\uffec\074\uffec\106\uffec\107" +
    "\uffec\110\uffec\112\uffec\113\uffec\115\uffec\116\uffec\117\uffec" +
    "\001\002\000\004\073\314\001\002\000\060\002\uffd3\032" +
    "\uffd3\033\uffd3\046\uffd3\047\uffd3\051\uffd3\052\uffd3\053\uffd3" +
    "\054\uffd3\055\uffd3\056\uffd3\057\uffd3\062\uffd3\066\uffd3\074" +
    "\uffd3\106\uffd3\107\uffd3\110\uffd3\112\uffd3\113\uffd3\115\uffd3" +
    "\116\uffd3\117\uffd3\001\002\000\060\002\uffea\032\uffea\033" +
    "\uffea\046\uffea\047\uffea\051\uffea\052\uffea\053\uffea\054\uffea" +
    "\055\uffea\056\uffea\057\uffea\062\uffea\066\uffea\074\uffea\106" +
    "\uffea\107\uffea\110\uffea\112\uffea\113\uffea\115\uffea\116\uffea" +
    "\117\uffea\001\002\000\004\073\307\001\002\000\050\002" +
    "\uffbe\032\uffbe\033\uffbe\046\uffbe\047\uffbe\051\uffbe\052\uffbe" +
    "\053\uffbe\062\uffbe\066\uffbe\074\uffbe\106\uffbe\107\uffbe\110" +
    "\uffbe\112\uffbe\113\uffbe\115\uffbe\116\uffbe\117\uffbe\001\002" +
    "\000\004\073\304\001\002\000\004\073\277\001\002\000" +
    "\004\073\272\001\002\000\060\002\uffee\032\uffee\033\uffee" +
    "\046\uffee\047\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055" +
    "\uffee\056\uffee\057\uffee\062\uffee\066\uffee\074\uffee\106\uffee" +
    "\107\uffee\110\uffee\112\uffee\113\uffee\115\uffee\116\uffee\117" +
    "\uffee\001\002\000\060\002\uffe9\032\uffe9\033\uffe9\046\uffe9" +
    "\047\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056" +
    "\uffe9\057\uffe9\062\uffe9\066\uffe9\074\uffe9\106\uffe9\107\uffe9" +
    "\110\uffe9\112\uffe9\113\uffe9\115\uffe9\116\uffe9\117\uffe9\001" +
    "\002\000\026\004\105\005\116\006\112\007\110\010\115" +
    "\011\114\012\106\063\120\100\111\102\104\001\002\000" +
    "\004\073\260\001\002\000\004\073\253\001\002\000\040" +
    "\002\uffa9\032\uffa9\033\uffa9\051\156\052\155\053\160\066" +
    "\uffa9\106\163\107\162\110\157\112\uffa9\113\uffa9\115\uffa9" +
    "\116\uffa9\117\uffa9\001\002\000\004\073\246\001\002\000" +
    "\004\073\243\001\002\000\004\073\240\001\002\000\054" +
    "\002\uffb8\032\uffb8\033\uffb8\046\uffb8\047\uffb8\050\236\051" +
    "\uffb8\052\uffb8\053\uffb8\062\uffb8\066\uffb8\073\210\074\uffb8" +
    "\106\uffb8\107\uffb8\110\uffb8\112\uffb8\113\uffb8\115\uffb8\116" +
    "\uffb8\117\uffb8\001\002\000\004\073\232\001\002\000\004" +
    "\073\227\001\002\000\004\073\224\001\002\000\004\073" +
    "\217\001\002\000\004\073\205\001\002\000\060\002\uffeb" +
    "\032\uffeb\033\uffeb\046\uffeb\047\uffeb\051\uffeb\052\uffeb\053" +
    "\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\062\uffeb\066\uffeb" +
    "\074\uffeb\106\uffeb\107\uffeb\110\uffeb\112\uffeb\113\uffeb\115" +
    "\uffeb\116\uffeb\117\uffeb\001\002\000\004\063\177\001\002" +
    "\000\060\002\uffd4\032\uffd4\033\uffd4\046\uffd4\047\uffd4\051" +
    "\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4" +
    "\062\uffd4\066\uffd4\074\uffd4\106\uffd4\107\uffd4\110\uffd4\112" +
    "\uffd4\113\uffd4\115\uffd4\116\uffd4\117\uffd4\001\002\000\072" +
    "\013\035\014\064\015\054\016\077\017\063\020\060\021" +
    "\100\022\061\023\065\024\057\025\075\026\037\027\066" +
    "\030\047\031\050\035\067\036\102\037\046\040\044\041" +
    "\041\042\055\043\036\044\053\060\071\063\062\064\072" +
    "\065\042\073\074\001\002\000\072\013\035\014\064\015" +
    "\054\016\077\017\063\020\060\021\100\022\061\023\065" +
    "\024\057\025\075\026\037\027\066\030\047\031\050\035" +
    "\067\036\102\037\046\040\044\041\041\042\055\043\036" +
    "\044\053\060\071\063\062\064\072\065\042\073\074\001" +
    "\002\000\004\073\144\001\002\000\060\002\uffe8\032\uffe8" +
    "\033\uffe8\046\uffe8\047\uffe8\051\uffe8\052\uffe8\053\uffe8\054" +
    "\uffe8\055\uffe8\056\uffe8\057\uffe8\062\uffe8\066\uffe8\074\uffe8" +
    "\106\uffe8\107\uffe8\110\uffe8\112\uffe8\113\uffe8\115\uffe8\116" +
    "\uffe8\117\uffe8\001\002\000\004\073\141\001\002\000\004" +
    "\073\136\001\002\000\060\002\uffed\032\uffed\033\uffed\046" +
    "\uffed\047\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed" +
    "\056\uffed\057\uffed\062\uffed\066\uffed\074\uffed\106\uffed\107" +
    "\uffed\110\uffed\112\uffed\113\uffed\115\uffed\116\uffed\117\uffed" +
    "\001\002\000\004\073\103\001\002\000\026\004\105\005" +
    "\116\006\112\007\110\010\115\011\114\012\106\063\120" +
    "\100\111\102\104\001\002\000\030\004\105\005\116\006" +
    "\112\007\110\010\115\011\114\012\106\063\120\100\111" +
    "\102\104\103\ufff1\001\002\000\074\002\uffff\032\uffff\033" +
    "\uffff\045\uffff\046\uffff\047\uffff\051\uffff\052\uffff\053\uffff" +
    "\054\uffff\055\uffff\056\uffff\057\uffff\061\uffff\062\uffff\066" +
    "\uffff\074\uffff\075\uffff\101\uffff\103\uffff\104\uffff\106\uffff" +
    "\107\uffff\110\uffff\112\uffff\113\uffff\115\uffff\116\uffff\117" +
    "\uffff\001\002\000\076\002\ufff7\032\ufff7\033\ufff7\045\ufff7" +
    "\046\ufff7\047\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055" +
    "\ufff7\056\ufff7\057\ufff7\061\ufff7\062\ufff7\066\ufff7\073\126" +
    "\074\ufff7\075\ufff7\101\ufff7\103\ufff7\104\ufff7\106\ufff7\107" +
    "\ufff7\110\ufff7\112\ufff7\113\ufff7\115\ufff7\116\ufff7\117\ufff7" +
    "\001\002\000\004\074\125\001\002\000\074\002\ufffa\032" +
    "\ufffa\033\ufffa\045\ufffa\046\ufffa\047\ufffa\051\ufffa\052\ufffa" +
    "\053\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\061\ufffa\062" +
    "\ufffa\066\ufffa\074\ufffa\075\ufffa\101\ufffa\103\ufffa\104\ufffa" +
    "\106\ufffa\107\ufffa\110\ufffa\112\ufffa\113\ufffa\115\ufffa\116" +
    "\ufffa\117\ufffa\001\002\000\026\004\105\005\116\006\112" +
    "\007\110\010\115\011\114\012\106\063\120\100\111\102" +
    "\104\001\002\000\074\002\ufffd\032\ufffd\033\ufffd\045\ufffd" +
    "\046\ufffd\047\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055" +
    "\ufffd\056\ufffd\057\ufffd\061\ufffd\062\ufffd\066\ufffd\074\ufffd" +
    "\075\ufffd\101\ufffd\103\ufffd\104\ufffd\106\ufffd\107\ufffd\110" +
    "\ufffd\112\ufffd\113\ufffd\115\ufffd\116\ufffd\117\ufffd\001\002" +
    "\000\074\002\ufffb\032\ufffb\033\ufffb\045\ufffb\046\ufffb\047" +
    "\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb" +
    "\057\ufffb\061\ufffb\062\ufffb\066\ufffb\074\ufffb\075\ufffb\101" +
    "\ufffb\103\ufffb\104\ufffb\106\ufffb\107\ufffb\110\ufffb\112\ufffb" +
    "\113\ufffb\115\ufffb\116\ufffb\117\ufffb\001\002\000\074\002" +
    "\ufff8\032\ufff8\033\ufff8\045\ufff8\046\ufff8\047\ufff8\051\ufff8" +
    "\052\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\061" +
    "\ufff8\062\ufff8\066\ufff8\074\ufff8\075\ufff8\101\ufff8\103\ufff8" +
    "\104\ufff8\106\ufff8\107\ufff8\110\ufff8\112\ufff8\113\ufff8\115" +
    "\ufff8\116\ufff8\117\ufff8\001\002\000\074\002\ufff9\032\ufff9" +
    "\033\ufff9\045\ufff9\046\ufff9\047\ufff9\051\ufff9\052\ufff9\053" +
    "\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9\061\ufff9\062\ufff9" +
    "\066\ufff9\074\ufff9\075\ufff9\101\ufff9\103\ufff9\104\ufff9\106" +
    "\ufff9\107\ufff9\110\ufff9\112\ufff9\113\ufff9\115\ufff9\116\ufff9" +
    "\117\ufff9\001\002\000\074\002\ufffe\032\ufffe\033\ufffe\045" +
    "\ufffe\046\ufffe\047\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe" +
    "\055\ufffe\056\ufffe\057\ufffe\061\ufffe\062\ufffe\066\ufffe\074" +
    "\ufffe\075\ufffe\101\ufffe\103\ufffe\104\ufffe\106\ufffe\107\ufffe" +
    "\110\ufffe\112\ufffe\113\ufffe\115\ufffe\116\ufffe\117\ufffe\001" +
    "\002\000\074\002\ufffc\032\ufffc\033\ufffc\045\ufffc\046\ufffc" +
    "\047\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc\056" +
    "\ufffc\057\ufffc\061\ufffc\062\ufffc\066\ufffc\074\ufffc\075\ufffc" +
    "\101\ufffc\103\ufffc\104\ufffc\106\ufffc\107\ufffc\110\ufffc\112" +
    "\ufffc\113\ufffc\115\ufffc\116\ufffc\117\ufffc\001\002\000\074" +
    "\002\ufff2\032\ufff2\033\ufff2\045\ufff2\046\ufff2\047\ufff2\051" +
    "\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2" +
    "\061\ufff2\062\ufff2\066\ufff2\074\ufff2\075\ufff2\101\ufff2\103" +
    "\ufff2\104\121\106\ufff2\107\ufff2\110\ufff2\112\ufff2\113\ufff2" +
    "\115\ufff2\116\ufff2\117\ufff2\001\002\000\074\002\ufff3\032" +
    "\ufff3\033\ufff3\045\ufff3\046\ufff3\047\ufff3\051\ufff3\052\ufff3" +
    "\053\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3\061\ufff3\062" +
    "\ufff3\066\ufff3\074\ufff3\075\ufff3\101\ufff3\103\ufff3\104\ufff3" +
    "\106\ufff3\107\ufff3\110\ufff3\112\ufff3\113\ufff3\115\ufff3\116" +
    "\ufff3\117\ufff3\001\002\000\014\061\uffb1\074\uffb1\075\uffb1" +
    "\101\uffb1\104\uffb1\001\002\000\004\101\124\001\002\000" +
    "\074\002\ufff4\032\ufff4\033\ufff4\045\ufff4\046\ufff4\047\ufff4" +
    "\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4\057" +
    "\ufff4\061\ufff4\062\ufff4\066\ufff4\074\ufff4\075\ufff4\101\ufff4" +
    "\103\ufff4\104\ufff4\106\ufff4\107\ufff4\110\ufff4\112\ufff4\113" +
    "\ufff4\115\ufff4\116\ufff4\117\ufff4\001\002\000\060\002\uffdf" +
    "\032\uffdf\033\uffdf\046\uffdf\047\uffdf\051\uffdf\052\uffdf\053" +
    "\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\062\uffdf\066\uffdf" +
    "\074\uffdf\106\uffdf\107\uffdf\110\uffdf\112\uffdf\113\uffdf\115" +
    "\uffdf\116\uffdf\117\uffdf\001\002\000\030\004\105\005\116" +
    "\006\112\007\110\010\115\011\114\012\106\063\120\074" +
    "\ufff1\100\111\102\104\001\002\000\010\074\ufff0\075\132" +
    "\103\ufff0\001\002\000\004\074\131\001\002\000\074\002" +
    "\ufff6\032\ufff6\033\ufff6\045\ufff6\046\ufff6\047\ufff6\051\ufff6" +
    "\052\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6\061" +
    "\ufff6\062\ufff6\066\ufff6\074\ufff6\075\ufff6\101\ufff6\103\ufff6" +
    "\104\ufff6\106\ufff6\107\ufff6\110\ufff6\112\ufff6\113\ufff6\115" +
    "\ufff6\116\ufff6\117\ufff6\001\002\000\032\004\105\005\116" +
    "\006\112\007\110\010\115\011\114\012\106\063\120\074" +
    "\ufff1\100\111\102\104\103\ufff1\001\002\000\006\074\uffef" +
    "\103\uffef\001\002\000\004\103\135\001\002\000\074\002" +
    "\ufff5\032\ufff5\033\ufff5\045\ufff5\046\ufff5\047\ufff5\051\ufff5" +
    "\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\061" +
    "\ufff5\062\ufff5\066\ufff5\074\ufff5\075\ufff5\101\ufff5\103\ufff5" +
    "\104\ufff5\106\ufff5\107\ufff5\110\ufff5\112\ufff5\113\ufff5\115" +
    "\ufff5\116\ufff5\117\ufff5\001\002\000\026\004\105\005\116" +
    "\006\112\007\110\010\115\011\114\012\106\063\120\100" +
    "\111\102\104\001\002\000\004\074\140\001\002\000\060" +
    "\002\uffe3\032\uffe3\033\uffe3\046\uffe3\047\uffe3\051\uffe3\052" +
    "\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\062\uffe3" +
    "\066\uffe3\074\uffe3\106\uffe3\107\uffe3\110\uffe3\112\uffe3\113" +
    "\uffe3\115\uffe3\116\uffe3\117\uffe3\001\002\000\026\004\105" +
    "\005\116\006\112\007\110\010\115\011\114\012\106\063" +
    "\120\100\111\102\104\001\002\000\004\074\143\001\002" +
    "\000\060\002\uffe1\032\uffe1\033\uffe1\046\uffe1\047\uffe1\051" +
    "\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1" +
    "\062\uffe1\066\uffe1\074\uffe1\106\uffe1\107\uffe1\110\uffe1\112" +
    "\uffe1\113\uffe1\115\uffe1\116\uffe1\117\uffe1\001\002\000\026" +
    "\004\105\005\116\006\112\007\110\010\115\011\114\012" +
    "\106\063\120\100\111\102\104\001\002\000\004\075\146" +
    "\001\002\000\026\004\105\005\116\006\112\007\110\010" +
    "\115\011\114\012\106\063\120\100\111\102\104\001\002" +
    "\000\006\074\151\075\150\001\002\000\026\004\105\005" +
    "\116\006\112\007\110\010\115\011\114\012\106\063\120" +
    "\100\111\102\104\001\002\000\060\002\uffda\032\uffda\033" +
    "\uffda\046\uffda\047\uffda\051\uffda\052\uffda\053\uffda\054\uffda" +
    "\055\uffda\056\uffda\057\uffda\062\uffda\066\uffda\074\uffda\106" +
    "\uffda\107\uffda\110\uffda\112\uffda\113\uffda\115\uffda\116\uffda" +
    "\117\uffda\001\002\000\004\074\153\001\002\000\060\002" +
    "\uffd9\032\uffd9\033\uffd9\046\uffd9\047\uffd9\051\uffd9\052\uffd9" +
    "\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\062\uffd9\066" +
    "\uffd9\074\uffd9\106\uffd9\107\uffd9\110\uffd9\112\uffd9\113\uffd9" +
    "\115\uffd9\116\uffd9\117\uffd9\001\002\000\020\051\156\052" +
    "\155\053\160\074\161\106\163\107\162\110\157\001\002" +
    "\000\072\013\035\014\064\015\054\016\077\017\063\020" +
    "\060\021\100\022\061\023\065\024\057\025\075\026\037" +
    "\027\066\030\047\031\050\035\067\036\102\037\046\040" +
    "\044\041\041\042\055\043\036\044\053\060\071\063\062" +
    "\064\072\065\042\073\074\001\002\000\072\013\035\014" +
    "\064\015\054\016\077\017\063\020\060\021\100\022\061" +
    "\023\065\024\057\025\075\026\037\027\066\030\047\031" +
    "\050\035\067\036\102\037\046\040\044\041\041\042\055" +
    "\043\036\044\053\060\071\063\062\064\072\065\042\073" +
    "\074\001\002\000\072\013\035\014\064\015\054\016\077" +
    "\017\063\020\060\021\100\022\061\023\065\024\057\025" +
    "\075\026\037\027\066\030\047\031\050\035\067\036\102" +
    "\037\046\040\044\041\041\042\055\043\036\044\053\060" +
    "\071\063\062\064\072\065\042\073\074\001\002\000\072" +
    "\013\035\014\064\015\054\016\077\017\063\020\060\021" +
    "\100\022\061\023\065\024\057\025\075\026\037\027\066" +
    "\030\047\031\050\035\067\036\102\037\046\040\044\041" +
    "\041\042\055\043\036\044\053\060\071\063\062\064\072" +
    "\065\042\073\074\001\002\000\050\002\uffc0\032\uffc0\033" +
    "\uffc0\046\uffc0\047\uffc0\051\uffc0\052\uffc0\053\uffc0\062\uffc0" +
    "\066\uffc0\074\uffc0\106\uffc0\107\uffc0\110\uffc0\112\uffc0\113" +
    "\uffc0\115\uffc0\116\uffc0\117\uffc0\001\002\000\072\013\035" +
    "\014\064\015\054\016\077\017\063\020\060\021\100\022" +
    "\061\023\065\024\057\025\075\026\037\027\066\030\047" +
    "\031\050\035\067\036\102\037\046\040\044\041\041\042" +
    "\055\043\036\044\053\060\071\063\062\064\072\065\042" +
    "\073\074\001\002\000\072\013\035\014\064\015\054\016" +
    "\077\017\063\020\060\021\100\022\061\023\065\024\057" +
    "\025\075\026\037\027\066\030\047\031\050\035\067\036" +
    "\102\037\046\040\044\041\041\042\055\043\036\044\053" +
    "\060\071\063\062\064\072\065\042\073\074\001\002\000" +
    "\050\002\uffc6\032\uffc6\033\uffc6\046\uffc6\047\uffc6\051\uffc6" +
    "\052\uffc6\053\160\062\uffc6\066\uffc6\074\uffc6\106\uffc6\107" +
    "\162\110\157\112\uffc6\113\uffc6\115\uffc6\116\uffc6\117\uffc6" +
    "\001\002\000\050\002\uffc4\032\uffc4\033\uffc4\046\uffc4\047" +
    "\uffc4\051\uffc4\052\uffc4\053\160\062\uffc4\066\uffc4\074\uffc4" +
    "\106\uffc4\107\162\110\157\112\uffc4\113\uffc4\115\uffc4\116" +
    "\uffc4\117\uffc4\001\002\000\050\002\uffc1\032\uffc1\033\uffc1" +
    "\046\uffc1\047\uffc1\051\uffc1\052\uffc1\053\uffc1\062\uffc1\066" +
    "\uffc1\074\uffc1\106\uffc1\107\uffc1\110\uffc1\112\uffc1\113\uffc1" +
    "\115\uffc1\116\uffc1\117\uffc1\001\002\000\050\002\uffc3\032" +
    "\uffc3\033\uffc3\046\uffc3\047\uffc3\051\uffc3\052\uffc3\053\160" +
    "\062\uffc3\066\uffc3\074\uffc3\106\uffc3\107\uffc3\110\uffc3\112" +
    "\uffc3\113\uffc3\115\uffc3\116\uffc3\117\uffc3\001\002\000\050" +
    "\002\uffc2\032\uffc2\033\uffc2\046\uffc2\047\uffc2\051\uffc2\052" +
    "\155\053\160\062\uffc2\066\uffc2\074\uffc2\106\163\107\162" +
    "\110\157\112\uffc2\113\uffc2\115\uffc2\116\uffc2\117\uffc2\001" +
    "\002\000\050\002\uffc5\032\uffc5\033\uffc5\046\uffc5\047\uffc5" +
    "\051\uffc5\052\155\053\160\062\uffc5\066\uffc5\074\uffc5\106" +
    "\163\107\162\110\157\112\uffc5\113\uffc5\115\uffc5\116\uffc5" +
    "\117\uffc5\001\002\000\020\051\156\052\155\053\160\062" +
    "\174\106\163\107\162\110\157\001\002\000\050\002\uffad" +
    "\032\uffad\033\uffad\046\uffad\047\uffad\051\uffad\052\uffad\053" +
    "\uffad\062\uffad\066\uffad\074\uffad\106\uffad\107\uffad\110\uffad" +
    "\112\uffad\113\uffad\115\uffad\116\uffad\117\uffad\001\002\000" +
    "\050\002\uffab\032\uffab\033\uffab\046\uffab\047\uffab\051\uffab" +
    "\052\uffab\053\uffab\062\uffab\066\uffab\074\uffab\106\uffab\107" +
    "\uffab\110\uffab\112\uffab\113\uffab\115\uffab\116\uffab\117\uffab" +
    "\001\002\000\004\061\204\001\002\000\006\061\uffaf\075" +
    "\202\001\002\000\004\105\200\001\002\000\026\004\105" +
    "\005\116\006\112\007\110\010\115\011\114\012\106\063" +
    "\120\100\111\102\104\001\002\000\006\061\uffb0\075\uffb0" +
    "\001\002\000\004\063\177\001\002\000\004\061\uffae\001" +
    "\002\000\072\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac" +
    "\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026" +
    "\uffac\027\uffac\030\uffac\031\uffac\035\uffac\036\uffac\037\uffac" +
    "\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\060\uffac\063" +
    "\uffac\064\uffac\065\uffac\073\uffac\001\002\000\004\063\206" +
    "\001\002\000\006\073\210\075\uffb8\001\002\000\004\075" +
    "\213\001\002\000\030\004\105\005\116\006\112\007\110" +
    "\010\115\011\114\012\106\063\120\074\ufff1\100\111\102" +
    "\104\001\002\000\004\074\212\001\002\000\052\002\uffb9" +
    "\032\uffb9\033\uffb9\046\uffb9\047\uffb9\051\uffb9\052\uffb9\053" +
    "\uffb9\062\uffb9\066\uffb9\074\uffb9\075\uffb9\106\uffb9\107\uffb9" +
    "\110\uffb9\112\uffb9\113\uffb9\115\uffb9\116\uffb9\117\uffb9\001" +
    "\002\000\004\063\215\001\002\000\004\074\216\001\002" +
    "\000\004\104\121\001\002\000\060\002\uffd2\032\uffd2\033" +
    "\uffd2\046\uffd2\047\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2" +
    "\055\uffd2\056\uffd2\057\uffd2\062\uffd2\066\uffd2\074\uffd2\106" +
    "\uffd2\107\uffd2\110\uffd2\112\uffd2\113\uffd2\115\uffd2\116\uffd2" +
    "\117\uffd2\001\002\000\026\004\105\005\116\006\112\007" +
    "\110\010\115\011\114\012\106\063\120\100\111\102\104" +
    "\001\002\000\004\075\221\001\002\000\026\004\105\005" +
    "\116\006\112\007\110\010\115\011\114\012\106\063\120" +
    "\100\111\102\104\001\002\000\004\074\223\001\002\000" +
    "\060\002\uffd7\032\uffd7\033\uffd7\046\uffd7\047\uffd7\051\uffd7" +
    "\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\062" +
    "\uffd7\066\uffd7\074\uffd7\106\uffd7\107\uffd7\110\uffd7\112\uffd7" +
    "\113\uffd7\115\uffd7\116\uffd7\117\uffd7\001\002\000\030\004" +
    "\105\005\116\006\112\007\110\010\115\011\114\012\106" +
    "\063\120\074\ufff1\100\111\102\104\001\002\000\004\074" +
    "\226\001\002\000\060\002\uffd0\032\uffd0\033\uffd0\046\uffd0" +
    "\047\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056" +
    "\uffd0\057\uffd0\062\uffd0\066\uffd0\074\uffd0\106\uffd0\107\uffd0" +
    "\110\uffd0\112\uffd0\113\uffd0\115\uffd0\116\uffd0\117\uffd0\001" +
    "\002\000\030\004\105\005\116\006\112\007\110\010\115" +
    "\011\114\012\106\063\120\074\ufff1\100\111\102\104\001" +
    "\002\000\004\074\231\001\002\000\060\002\uffe5\032\uffe5" +
    "\033\uffe5\046\uffe5\047\uffe5\051\uffe5\052\uffe5\053\uffe5\054" +
    "\uffe5\055\uffe5\056\uffe5\057\uffe5\062\uffe5\066\uffe5\074\uffe5" +
    "\106\uffe5\107\uffe5\110\uffe5\112\uffe5\113\uffe5\115\uffe5\116" +
    "\uffe5\117\uffe5\001\002\000\026\004\105\005\116\006\112" +
    "\007\110\010\115\011\114\012\106\063\120\100\111\102" +
    "\104\001\002\000\004\074\234\001\002\000\060\002\uffe0" +
    "\032\uffe0\033\uffe0\046\uffe0\047\uffe0\051\uffe0\052\uffe0\053" +
    "\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\062\uffe0\066\uffe0" +
    "\074\uffe0\106\uffe0\107\uffe0\110\uffe0\112\uffe0\113\uffe0\115" +
    "\uffe0\116\uffe0\117\uffe0\001\002\000\050\002\uffba\032\uffba" +
    "\033\uffba\046\uffba\047\uffba\051\uffba\052\uffba\053\uffba\062" +
    "\uffba\066\uffba\074\uffba\106\uffba\107\uffba\110\uffba\112\uffba" +
    "\113\uffba\115\uffba\116\uffba\117\uffba\001\002\000\026\004" +
    "\105\005\116\006\112\007\110\010\115\011\114\012\106" +
    "\063\120\100\111\102\104\001\002\000\060\002\uffce\032" +
    "\uffce\033\uffce\046\uffce\047\uffce\051\uffce\052\uffce\053\uffce" +
    "\054\uffce\055\uffce\056\uffce\057\uffce\062\uffce\066\uffce\074" +
    "\uffce\106\uffce\107\uffce\110\uffce\112\uffce\113\uffce\115\uffce" +
    "\116\uffce\117\uffce\001\002\000\030\004\105\005\116\006" +
    "\112\007\110\010\115\011\114\012\106\063\120\074\ufff1" +
    "\100\111\102\104\001\002\000\004\074\242\001\002\000" +
    "\060\002\uffd1\032\uffd1\033\uffd1\046\uffd1\047\uffd1\051\uffd1" +
    "\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\062" +
    "\uffd1\066\uffd1\074\uffd1\106\uffd1\107\uffd1\110\uffd1\112\uffd1" +
    "\113\uffd1\115\uffd1\116\uffd1\117\uffd1\001\002\000\026\004" +
    "\105\005\116\006\112\007\110\010\115\011\114\012\106" +
    "\063\120\100\111\102\104\001\002\000\004\074\245\001" +
    "\002\000\060\002\uffe4\032\uffe4\033\uffe4\046\uffe4\047\uffe4" +
    "\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\057" +
    "\uffe4\062\uffe4\066\uffe4\074\uffe4\106\uffe4\107\uffe4\110\uffe4" +
    "\112\uffe4\113\uffe4\115\uffe4\116\uffe4\117\uffe4\001\002\000" +
    "\026\004\105\005\116\006\112\007\110\010\115\011\114" +
    "\012\106\063\120\100\111\102\104\001\002\000\004\075" +
    "\250\001\002\000\026\004\105\005\116\006\112\007\110" +
    "\010\115\011\114\012\106\063\120\100\111\102\104\001" +
    "\002\000\004\074\252\001\002\000\060\002\uffdb\032\uffdb" +
    "\033\uffdb\046\uffdb\047\uffdb\051\uffdb\052\uffdb\053\uffdb\054" +
    "\uffdb\055\uffdb\056\uffdb\057\uffdb\062\uffdb\066\uffdb\074\uffdb" +
    "\106\uffdb\107\uffdb\110\uffdb\112\uffdb\113\uffdb\115\uffdb\116" +
    "\uffdb\117\uffdb\001\002\000\026\004\105\005\116\006\112" +
    "\007\110\010\115\011\114\012\106\063\120\100\111\102" +
    "\104\001\002\000\004\075\255\001\002\000\026\004\105" +
    "\005\116\006\112\007\110\010\115\011\114\012\106\063" +
    "\120\100\111\102\104\001\002\000\004\074\257\001\002" +
    "\000\060\002\uffdc\032\uffdc\033\uffdc\046\uffdc\047\uffdc\051" +
    "\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc" +
    "\062\uffdc\066\uffdc\074\uffdc\106\uffdc\107\uffdc\110\uffdc\112" +
    "\uffdc\113\uffdc\115\uffdc\116\uffdc\117\uffdc\001\002\000\026" +
    "\004\105\005\116\006\112\007\110\010\115\011\114\012" +
    "\106\063\120\100\111\102\104\001\002\000\004\074\262" +
    "\001\002\000\060\002\uffe2\032\uffe2\033\uffe2\046\uffe2\047" +
    "\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2" +
    "\057\uffe2\062\uffe2\066\uffe2\074\uffe2\106\uffe2\107\uffe2\110" +
    "\uffe2\112\uffe2\113\uffe2\115\uffe2\116\uffe2\117\uffe2\001\002" +
    "\000\004\045\264\001\002\000\072\013\035\014\064\015" +
    "\054\016\077\017\063\020\060\021\100\022\061\023\065" +
    "\024\057\025\075\026\037\027\066\030\047\031\050\035" +
    "\067\036\102\037\046\040\044\041\041\042\055\043\036" +
    "\044\053\060\071\063\062\064\072\065\042\073\074\001" +
    "\002\000\022\046\267\047\266\051\156\052\155\053\160" +
    "\106\163\107\162\110\157\001\002\000\050\002\uffbd\032" +
    "\uffbd\033\uffbd\046\uffbd\047\uffbd\051\uffbd\052\uffbd\053\uffbd" +
    "\062\uffbd\066\uffbd\074\uffbd\106\uffbd\107\uffbd\110\uffbd\112" +
    "\uffbd\113\uffbd\115\uffbd\116\uffbd\117\uffbd\001\002\000\072" +
    "\013\035\014\064\015\054\016\077\017\063\020\060\021" +
    "\100\022\061\023\065\024\057\025\075\026\037\027\066" +
    "\030\047\031\050\035\067\036\102\037\046\040\044\041" +
    "\041\042\055\043\036\044\053\060\071\063\062\064\072" +
    "\065\042\073\074\001\002\000\020\047\271\051\156\052" +
    "\155\053\160\106\163\107\162\110\157\001\002\000\050" +
    "\002\uffbc\032\uffbc\033\uffbc\046\uffbc\047\uffbc\051\uffbc\052" +
    "\uffbc\053\uffbc\062\uffbc\066\uffbc\074\uffbc\106\uffbc\107\uffbc" +
    "\110\uffbc\112\uffbc\113\uffbc\115\uffbc\116\uffbc\117\uffbc\001" +
    "\002\000\026\004\105\005\116\006\112\007\110\010\115" +
    "\011\114\012\106\063\120\100\111\102\104\001\002\000" +
    "\004\075\274\001\002\000\026\004\105\005\116\006\112" +
    "\007\110\010\115\011\114\012\106\063\120\100\111\102" +
    "\104\001\002\000\004\074\276\001\002\000\060\002\uffd5" +
    "\032\uffd5\033\uffd5\046\uffd5\047\uffd5\051\uffd5\052\uffd5\053" +
    "\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\062\uffd5\066\uffd5" +
    "\074\uffd5\106\uffd5\107\uffd5\110\uffd5\112\uffd5\113\uffd5\115" +
    "\uffd5\116\uffd5\117\uffd5\001\002\000\026\004\105\005\116" +
    "\006\112\007\110\010\115\011\114\012\106\063\120\100" +
    "\111\102\104\001\002\000\004\075\301\001\002\000\026" +
    "\004\105\005\116\006\112\007\110\010\115\011\114\012" +
    "\106\063\120\100\111\102\104\001\002\000\004\074\303" +
    "\001\002\000\060\002\uffd6\032\uffd6\033\uffd6\046\uffd6\047" +
    "\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6" +
    "\057\uffd6\062\uffd6\066\uffd6\074\uffd6\106\uffd6\107\uffd6\110" +
    "\uffd6\112\uffd6\113\uffd6\115\uffd6\116\uffd6\117\uffd6\001\002" +
    "\000\026\004\105\005\116\006\112\007\110\010\115\011" +
    "\114\012\106\063\120\100\111\102\104\001\002\000\004" +
    "\074\306\001\002\000\060\002\uffde\032\uffde\033\uffde\046" +
    "\uffde\047\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde" +
    "\056\uffde\057\uffde\062\uffde\066\uffde\074\uffde\106\uffde\107" +
    "\uffde\110\uffde\112\uffde\113\uffde\115\uffde\116\uffde\117\uffde" +
    "\001\002\000\026\004\105\005\116\006\112\007\110\010" +
    "\115\011\114\012\106\063\120\100\111\102\104\001\002" +
    "\000\004\075\311\001\002\000\026\004\105\005\116\006" +
    "\112\007\110\010\115\011\114\012\106\063\120\100\111" +
    "\102\104\001\002\000\004\074\313\001\002\000\050\002" +
    "\uffbb\032\uffbb\033\uffbb\046\uffbb\047\uffbb\051\uffbb\052\uffbb" +
    "\053\uffbb\062\uffbb\066\uffbb\074\uffbb\106\uffbb\107\uffbb\110" +
    "\uffbb\112\uffbb\113\uffbb\115\uffbb\116\uffbb\117\uffbb\001\002" +
    "\000\026\004\105\005\116\006\112\007\110\010\115\011" +
    "\114\012\106\063\120\100\111\102\104\001\002\000\004" +
    "\075\316\001\002\000\026\004\105\005\116\006\112\007" +
    "\110\010\115\011\114\012\106\063\120\100\111\102\104" +
    "\001\002\000\004\074\320\001\002\000\060\002\uffdd\032" +
    "\uffdd\033\uffdd\046\uffdd\047\uffdd\051\uffdd\052\uffdd\053\uffdd" +
    "\054\uffdd\055\uffdd\056\uffdd\057\uffdd\062\uffdd\066\uffdd\074" +
    "\uffdd\106\uffdd\107\uffdd\110\uffdd\112\uffdd\113\uffdd\115\uffdd" +
    "\116\uffdd\117\uffdd\001\002\000\026\004\105\005\116\006" +
    "\112\007\110\010\115\011\114\012\106\063\120\100\111" +
    "\102\104\001\002\000\004\075\323\001\002\000\026\004" +
    "\105\005\116\006\112\007\110\010\115\011\114\012\106" +
    "\063\120\100\111\102\104\001\002\000\004\074\325\001" +
    "\002\000\060\002\uffd8\032\uffd8\033\uffd8\046\uffd8\047\uffd8" +
    "\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057" +
    "\uffd8\062\uffd8\066\uffd8\074\uffd8\106\uffd8\107\uffd8\110\uffd8" +
    "\112\uffd8\113\uffd8\115\uffd8\116\uffd8\117\uffd8\001\002\000" +
    "\026\004\105\005\116\006\112\007\110\010\115\011\114" +
    "\012\106\063\120\100\111\102\104\001\002\000\004\074" +
    "\330\001\002\000\060\002\uffcf\032\uffcf\033\uffcf\046\uffcf" +
    "\047\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056" +
    "\uffcf\057\uffcf\062\uffcf\066\uffcf\074\uffcf\106\uffcf\107\uffcf" +
    "\110\uffcf\112\uffcf\113\uffcf\115\uffcf\116\uffcf\117\uffcf\001" +
    "\002\000\030\004\105\005\116\006\112\007\110\010\115" +
    "\011\114\012\106\063\120\074\ufff1\100\111\102\104\001" +
    "\002\000\004\074\333\001\002\000\060\002\uffe6\032\uffe6" +
    "\033\uffe6\046\uffe6\047\uffe6\051\uffe6\052\uffe6\053\uffe6\054" +
    "\uffe6\055\uffe6\056\uffe6\057\uffe6\062\uffe6\066\uffe6\074\uffe6" +
    "\106\uffe6\107\uffe6\110\uffe6\112\uffe6\113\uffe6\115\uffe6\116" +
    "\uffe6\117\uffe6\001\002\000\004\073\361\001\002\000\004" +
    "\073\356\001\002\000\004\073\347\001\002\000\004\073" +
    "\340\001\002\000\026\004\105\005\116\006\112\007\110" +
    "\010\115\011\114\012\106\063\120\100\111\102\104\001" +
    "\002\000\004\074\342\001\002\000\052\002\uffcc\032\uffcc" +
    "\033\uffcc\046\uffcc\047\uffcc\051\uffcc\052\uffcc\053\uffcc\056" +
    "\343\062\uffcc\066\uffcc\074\uffcc\106\uffcc\107\uffcc\110\uffcc" +
    "\112\uffcc\113\uffcc\115\uffcc\116\uffcc\117\uffcc\001\002\000" +
    "\004\073\344\001\002\000\026\004\105\005\116\006\112" +
    "\007\110\010\115\011\114\012\106\063\120\100\111\102" +
    "\104\001\002\000\004\074\346\001\002\000\050\002\uffcb" +
    "\032\uffcb\033\uffcb\046\uffcb\047\uffcb\051\uffcb\052\uffcb\053" +
    "\uffcb\062\uffcb\066\uffcb\074\uffcb\106\uffcb\107\uffcb\110\uffcb" +
    "\112\uffcb\113\uffcb\115\uffcb\116\uffcb\117\uffcb\001\002\000" +
    "\030\004\105\005\116\006\112\007\110\010\115\011\114" +
    "\012\106\063\120\074\ufff1\100\111\102\104\001\002\000" +
    "\004\074\351\001\002\000\052\002\uffca\032\uffca\033\uffca" +
    "\046\uffca\047\uffca\051\uffca\052\uffca\053\uffca\057\352\062" +
    "\uffca\066\uffca\074\uffca\106\uffca\107\uffca\110\uffca\112\uffca" +
    "\113\uffca\115\uffca\116\uffca\117\uffca\001\002\000\004\073" +
    "\353\001\002\000\030\004\105\005\116\006\112\007\110" +
    "\010\115\011\114\012\106\063\120\074\ufff1\100\111\102" +
    "\104\001\002\000\004\074\355\001\002\000\050\002\uffc9" +
    "\032\uffc9\033\uffc9\046\uffc9\047\uffc9\051\uffc9\052\uffc9\053" +
    "\uffc9\062\uffc9\066\uffc9\074\uffc9\106\uffc9\107\uffc9\110\uffc9" +
    "\112\uffc9\113\uffc9\115\uffc9\116\uffc9\117\uffc9\001\002\000" +
    "\030\004\105\005\116\006\112\007\110\010\115\011\114" +
    "\012\106\063\120\074\ufff1\100\111\102\104\001\002\000" +
    "\004\074\360\001\002\000\050\002\uffc7\032\uffc7\033\uffc7" +
    "\046\uffc7\047\uffc7\051\uffc7\052\uffc7\053\uffc7\062\uffc7\066" +
    "\uffc7\074\uffc7\106\uffc7\107\uffc7\110\uffc7\112\uffc7\113\uffc7" +
    "\115\uffc7\116\uffc7\117\uffc7\001\002\000\026\004\105\005" +
    "\116\006\112\007\110\010\115\011\114\012\106\063\120" +
    "\100\111\102\104\001\002\000\004\074\363\001\002\000" +
    "\050\002\uffc8\032\uffc8\033\uffc8\046\uffc8\047\uffc8\051\uffc8" +
    "\052\uffc8\053\uffc8\062\uffc8\066\uffc8\074\uffc8\106\uffc8\107" +
    "\uffc8\110\uffc8\112\uffc8\113\uffc8\115\uffc8\116\uffc8\117\uffc8" +
    "\001\002\000\006\074\uffb3\075\373\001\002\000\004\105" +
    "\370\001\002\000\004\074\367\001\002\000\004\034\uffb7" +
    "\001\002\000\026\004\105\005\116\006\112\007\110\010" +
    "\115\011\114\012\106\063\120\100\111\102\104\001\002" +
    "\000\010\074\uffb5\075\uffb5\104\372\001\002\000\006\074" +
    "\uffb4\075\uffb4\001\002\000\004\063\365\001\002\000\004" +
    "\074\uffb2\001\002\000\004\002\000\001\002\000\004\063" +
    "\u0100\001\002\000\004\074\u0105\001\002\000\010\073\210" +
    "\074\uffb8\075\uffb8\001\002\000\006\074\uff97\075\u0102\001" +
    "\002\000\004\063\u0100\001\002\000\004\074\uff96\001\002" +
    "\000\006\074\uff98\075\uff98\001\002\000\024\002\uff95\032" +
    "\uff95\033\uff95\066\uff95\112\uff95\113\uff95\115\uff95\116\uff95" +
    "\117\uff95\001\002\000\006\002\uff9d\117\uff9d\001\002\000" +
    "\006\034\uffaa\073\uffaa\001\002\000\006\002\uff99\117\uff99" +
    "\001\002\000\004\034\u010a\001\002\000\004\076\u010b\001" +
    "\002\000\014\067\uffa5\070\u010c\071\uffa5\072\uffa5\077\uffa5" +
    "\001\002\000\004\111\u011b\001\002\000\012\067\u010f\071" +
    "\uffa7\072\uffa7\077\uffa7\001\002\000\010\071\u0112\072\uffa3" +
    "\077\uffa3\001\002\000\004\111\u0110\001\002\000\004\006" +
    "\u0111\001\002\000\010\071\uffa8\072\uffa8\077\uffa8\001\002" +
    "\000\004\111\u0119\001\002\000\006\072\u0114\077\uffa1\001" +
    "\002\000\004\111\u0117\001\002\000\004\077\u0116\001\002" +
    "\000\024\002\uffa0\032\uffa0\033\uffa0\066\uffa0\112\uffa0\113" +
    "\uffa0\115\uffa0\116\uffa0\117\uffa0\001\002\000\004\006\u0118" +
    "\001\002\000\004\077\uffa2\001\002\000\004\006\u011a\001" +
    "\002\000\006\072\uffa4\077\uffa4\001\002\000\004\006\u011c" +
    "\001\002\000\012\067\uffa6\071\uffa6\072\uffa6\077\uffa6\001" +
    "\002\000\004\117\u011e\001\002\000\024\002\uff8e\032\uff8e" +
    "\033\uff8e\066\uff8e\112\uff8e\113\uff8e\115\uff8e\116\uff8e\117" +
    "\uff8e\001\002\000\022\032\uff8f\033\uff8f\066\uff8f\112\uff8f" +
    "\113\uff8f\115\uff8f\116\uff8f\117\uff8f\001\002\000\050\002" +
    "\uff92\004\105\005\116\006\112\007\110\010\115\011\114" +
    "\012\106\032\uff92\033\uff92\063\120\066\uff92\100\111\102" +
    "\104\112\uff92\113\uff92\115\uff92\116\uff92\117\uff92\001\002" +
    "\000\024\002\uff91\032\uff91\033\uff91\066\uff91\112\uff91\113" +
    "\uff91\115\uff91\116\uff91\117\uff91\001\002\000\006\002\uff9c" +
    "\117\uff9c\001\002\000\006\002\uff9a\117\uff9a\001\002\000" +
    "\022\032\uff90\033\uff90\066\uff90\112\uff90\113\uff90\115\uff90" +
    "\116\uff90\117\uff90\001\002\000\024\002\uff93\032\uff93\033" +
    "\uff93\066\uff93\112\uff93\113\uff93\115\uff93\116\uff93\117\uff93" +
    "\001\002\000\006\002\uff9b\117\uff9b\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0124\000\030\033\023\034\024\041\017\042\020\045" +
    "\007\046\012\047\022\050\006\051\003\052\013\053\015" +
    "\001\001\000\026\033\023\034\024\041\017\042\u0125\045" +
    "\007\046\012\050\006\051\003\052\013\053\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\033\023\034" +
    "\024\041\017\042\u0122\045\007\046\012\050\006\051\003" +
    "\052\013\053\015\001\001\000\026\033\023\034\024\041" +
    "\017\042\u0121\045\007\046\012\050\006\051\003\052\013" +
    "\053\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\033\023\034\024\041\017\042\u011c" +
    "\045\007\046\012\050\006\051\003\052\013\053\015\001" +
    "\001\000\002\001\001\000\026\033\023\034\024\041\017" +
    "\042\u0107\045\007\046\012\050\006\051\003\052\013\053" +
    "\015\001\001\000\002\001\001\000\026\033\023\034\024" +
    "\041\017\042\u0105\045\007\046\012\050\006\051\003\052" +
    "\013\053\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\027\001\001\000\026\033" +
    "\023\034\024\041\017\042\025\045\007\046\012\050\006" +
    "\051\003\052\013\053\015\001\001\000\002\001\001\000" +
    "\006\024\363\025\365\001\001\000\002\001\001\000\034" +
    "\006\031\007\050\010\100\011\037\012\067\013\042\014" +
    "\051\015\075\016\033\017\055\020\032\021\044\031\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\262\003\112\004\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\234\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\175\030\174\001\001\000" +
    "\002\001\001\000\036\006\031\007\050\010\100\011\037" +
    "\012\067\013\042\014\051\015\075\016\033\017\171\020" +
    "\032\021\044\031\072\032\172\001\001\000\034\006\031" +
    "\007\050\010\100\011\037\012\067\013\042\014\051\015" +
    "\075\016\033\017\153\020\032\021\044\031\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\106\003\112\004\116\001\001\000\012\002\126\003" +
    "\112\004\116\005\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\002" +
    "\121\003\112\004\116\026\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\002\126\003\112\004\116" +
    "\005\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\126\003\112\004\116\005\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\136\003\112\004\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\141\003\112\004" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\144\003\112\004\116\001\001\000\002\001\001\000" +
    "\010\002\146\003\112\004\116\001\001\000\002\001\001" +
    "\000\010\002\151\003\112\004\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\006\031\007\050\010\100\011\037\012\067\013" +
    "\042\014\051\015\075\016\033\017\170\020\032\021\044" +
    "\031\072\001\001\000\034\006\031\007\050\010\100\011" +
    "\037\012\067\013\042\014\051\015\075\016\033\017\167" +
    "\020\032\021\044\031\072\001\001\000\034\006\031\007" +
    "\050\010\100\011\037\012\067\013\042\014\051\015\075" +
    "\016\033\017\166\020\032\021\044\031\072\001\001\000" +
    "\034\006\031\007\050\010\100\011\037\012\067\013\042" +
    "\014\051\015\075\016\033\017\165\020\032\021\044\031" +
    "\072\001\001\000\002\001\001\000\034\006\031\007\050" +
    "\010\100\011\037\012\067\013\042\014\051\015\075\016" +
    "\033\017\164\020\032\021\044\031\072\001\001\000\034" +
    "\006\031\007\050\010\100\011\037\012\067\013\042\014" +
    "\051\015\075\016\033\017\163\020\032\021\044\031\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\002\121\003\112\004\116\026\200\001\001\000\002\001" +
    "\001\000\006\027\175\030\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\206\001" +
    "\001\000\002\001\001\000\012\002\126\003\112\004\116" +
    "\005\210\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\213\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\217\003\112\004\116\001" +
    "\001\000\002\001\001\000\010\002\221\003\112\004\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\002" +
    "\126\003\112\004\116\005\224\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\002\126\003\112\004\116\005" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\232\003\112\004\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\236\003\112" +
    "\004\116\001\001\000\002\001\001\000\012\002\126\003" +
    "\112\004\116\005\240\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\243\003\112\004\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\246\003\112" +
    "\004\116\001\001\000\002\001\001\000\010\002\250\003" +
    "\112\004\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\253\003\112\004\116\001\001\000\002\001" +
    "\001\000\010\002\255\003\112\004\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\260\003\112\004" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\031\007\050\010\100\011\037\012" +
    "\067\013\042\014\051\015\075\016\033\017\264\020\032" +
    "\021\044\031\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\006\031\007\050\010\100\011\037\012\067" +
    "\013\042\014\051\015\075\016\033\017\267\020\032\021" +
    "\044\031\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\272\003\112\004\116\001\001\000\002\001" +
    "\001\000\010\002\274\003\112\004\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\277\003\112\004" +
    "\116\001\001\000\002\001\001\000\010\002\301\003\112" +
    "\004\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\304\003\112\004\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\307\003\112\004\116\001" +
    "\001\000\002\001\001\000\010\002\311\003\112\004\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\002" +
    "\314\003\112\004\116\001\001\000\002\001\001\000\010" +
    "\002\316\003\112\004\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\321\003\112\004\116\001\001" +
    "\000\002\001\001\000\010\002\323\003\112\004\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\326" +
    "\003\112\004\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\002\126\003\112\004\116\005\331\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\340\003\112\004\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\344\003\112" +
    "\004\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\002\126\003\112\004\116\005\347\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\002" +
    "\126\003\112\004\116\005\353\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\002\126\003\112\004\116\005" +
    "\356\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\361\003\112\004\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\002\121\003\112\004" +
    "\116\026\370\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\024\363\025\373\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\043\u0100\044\376\001\001\000\002" +
    "\001\001\000\004\022\u0103\001\001\000\002\001\001\000" +
    "\006\043\u0100\044\u0102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\u010c\001\001\000\002\001\001\000\004\035" +
    "\u010d\001\001\000\004\037\u0112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\u0114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\u0120\003\112\004\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




   protected ToolBus toolbus;
   protected TBTermFactory tbfactory;
   protected String processName = "";
   private HashSet<String> includedFiles = new HashSet<String>();
   protected List<ATerm> toolbusProcessCalls = new ArrayList<ATerm>();
   
   protected Stack<Boolean> ifdefStack;
	
   /** ToolBus specific constructor */
   public parser(HashSet<String> includedFiles, List<ATerm> toolbusProcessCalls, String filename, ToolBus tb) throws FileNotFoundException  {
     super(new Lexer(System.in));     /* This lexer is redundant but helps to initialize CUP properly */
     
     this.includedFiles = includedFiles;
     this.toolbusProcessCalls = toolbusProcessCalls;
     
     toolbus = tb;
     tbfactory = toolbus.getTBTermFactory();
     
     InputStream in = new FileInputStream(filename);
     Scanner s = new Lexer(in);
     setScanner(s);
     
     ifdefStack = new Stack<Boolean>();
     ifdefStack.push(new Boolean(true));
   }
   
   /** ToolBus specific constructor */
   public parser(String filename, ToolBus tb) throws FileNotFoundException  {
     this(new HashSet<String>(), new ArrayList<ATerm>(), filename, tb);
   }
   
   protected void enterIfdef (boolean yesOrno){
      ifdefStack.push(new Boolean(yesOrno));
   }
   
   protected void leaveIfdef(){
      ifdefStack.pop();
   }
   
   protected boolean generating() {
   	  return ifdefStack.peek().booleanValue();
   }
  
   protected void doParseInclude(String filename) throws ToolBusException{
		if(filename.length() > 0 && filename.charAt(0) == File.separatorChar){
			File f = new File(filename);
			if(f.exists()){
				doParse(filename);
				return;
			}
		}else{
			String path = toolbus.getProperty("include.path", ".");
			LoggerFactory.log("unknown", "doParseInclude: path = " + path, IToolBusLoggerConstants.PARSING);
			String[] elems = path.split("[ ,\t\n\r]+");
			for(String dir : elems){
				if(dir.length() > 0){
					String absoluteName = dir + File.separator + filename;
					File f = new File(absoluteName);
					if(f.exists()){
						doParse(absoluteName);
						return;
					}
				}
			}
		}
		throw new ToolBusException("Cannot resolve include file '" + filename + "'");
	} 
	
	private void doParse(String filename) {
		if(includedFiles.contains(filename)){
			System.err.println("Skipping include of " + filename);
			return;
		}
		
		includedFiles.add(filename);
		System.err.println("Parse: " + filename);
		toolbus.parsecup1(includedFiles, toolbusProcessCalls, filename);
        System.err.println("Parse: back to " + filename);
	}
	
	public void generateInitialProcessCalls() throws ToolBusException {
	    for(ATerm call: toolbusProcessCalls){
	       toolbus.addProcess(new ProcessCall(call, tbfactory, null));
	    }
	}
   

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    Stack<?>            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ifdef ::= ifdef_head def_list ENDIF 
            {
              Object RESULT =null;
		 
                                               parser.leaveIfdef();
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifdef",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ifdef_head ::= IFNDEF NAME 
            {
              Object RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //System.err.println("ifndef " + nm);
                                               if(parser.generating()){
                                                 boolean yes = parser.toolbus.getProperty(nm) == null;
                                                 parser.enterIfdef(yes);
                                               }
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifdef_head",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ifdef_head ::= IFDEF NAME 
            {
              Object RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //System.err.println("ifdef " + nm);
                                                if(parser.generating()){
         									      boolean yes = parser.toolbus.getProperty(nm) != null;
                                                  parser.enterIfdef(yes);
                                                }
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifdef_head",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // define ::= DEFINE NAME term 
            {
              Object RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.generating()){
          										   //System.err.println("define " + nm + " = " + t);
       											   parser.toolbus.setProperty(nm, t.toString()); 
       											}
       										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("define",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // define ::= DEFINE NAME 
            {
              Object RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.generating()){
         										   //System.err.println("define " + nm);
         										   parser.toolbus.setProperty(nm, ""); 
         									   }
         									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("define",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // include ::= INCLUDE FILENAME 
            {
              Object RESULT =null;
		String fn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.generating()){
                                                 parser.doParseInclude(fn);
                                               }
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("include",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // toolbus_def ::= toolbus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("toolbus_def",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // toolbus ::= TOOLBUS LPAR proc_call_in_tb_list RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("toolbus",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // proc_call_in_tb_list ::= proc_call_in_tb COMMA proc_call_in_tb_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_call_in_tb_list",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // proc_call_in_tb_list ::= proc_call_in_tb 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_call_in_tb_list",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // proc_call_in_tb ::= NAME actuals 
            {
              Object RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ATermList act = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.generating()){
       											  AFun af = parser.tbfactory.makeAFun(nm.toString(), act.getLength(), false);
     										      ATerm call = parser.tbfactory.makeApplList(af, act);
     										      parser.toolbusProcessCalls.add(call);
     										      //System.err.println("add to toolbusProcessCalls " + call);
     										   }
     										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_call_in_tb",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // def_list ::= ifdef def_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // def_list ::= define def_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // def_list ::= include def_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // def_list ::= toolbus_def def_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // def_list ::= tool_def def_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // def_list ::= proc_def def_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // def_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // tool_def ::= TOOL IDENT IS LBRACE host kind command class RBRACE 
            {
              Object RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		String h = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		String cmd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String cls = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(parser.generating()){
                                                     ToolDefinition td = new ToolDefinition(nm, h, k, cmd, cls, parser.tbfactory, null);
                                                     //System.err.println("Adding: " + td);
                                                     parser.toolbus.addToolDefinition(td);
                                                  }
                                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_def",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // class ::= 
            {
              String RESULT =null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // class ::= CLASS EQUALS STRING 
            {
              String RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // command ::= 
            {
              String RESULT =null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // command ::= COMMAND EQUALS STRING 
            {
              String RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // host ::= 
            {
              String RESULT =null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("host",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // host ::= HOST EQUALS STRING 
            {
              String RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("host",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // kind ::= 
            {
              String RESULT =null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("kind",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // kind ::= KIND EQUALS STRING 
            {
              String RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("kind",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // proc_def ::= proc_def_name formals IS proc 
            {
              ProcessDefinition RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATermList fml = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ProcessExpression p = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(parser.generating()){
                                             	  ProcessDefinition pd = new ProcessDefinition(nm, fml,p, parser.tbfactory, null);
                                                  parser.toolbus.addProcessDefinition(pd); 
                                                  parser.processName = "";
                                                }
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_def",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // proc_def_name ::= PROCESS NAME 
            {
              String RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.processName = nm;
                                                RESULT = nm; 
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_def_name",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // let_tail ::= proc ENDLET 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("let_tail",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // let_head ::= LET var_list IN 
            {
              ATermList RESULT =null;
		ATermList vl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = vl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("let_head",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // let ::= let_head let_tail 
            {
              ProcessExpression RESULT =null;
		ATermList vl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ProcessExpression p = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LetDefinition(vl, p, parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("let",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // var_list ::= var_decl COMMA var_list 
            {
              ATermList RESULT =null;
		ATerm vd = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ATermList vl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.tbfactory.makeList(vd, vl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // var_list ::= var_decl 
            {
              ATermList RESULT =null;
		ATerm vd = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.tbfactory.makeList(vd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // var_decl ::= NAME COLON type 
            {
              ATerm RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ATerm tp = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 AFun af = parser.tbfactory.makeAFun(nm.toString(), 0, false);
                                                RESULT = parser.tbfactory.mkVar(af, parser.processName, tp);
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // type ::= term 
            {
              ATerm RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // form_list ::= form_decl COMMA form_list 
            {
              ATermList RESULT =null;
		ATerm fd = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ATermList fdl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.tbfactory.makeList(fd, fdl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // form_list ::= form_decl 
            {
              ATermList RESULT =null;
		ATerm fd = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.tbfactory.makeList(fd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // form_decl ::= NAME COLON type QUESTION 
            {
              ATerm RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm tp = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 AFun af = parser.tbfactory.makeAFun(nm.toString(), 0, false);
                                                RESULT = parser.tbfactory.mkResVar(af, parser.processName, tp);
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_decl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // form_decl ::= NAME COLON type 
            {
              ATerm RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ATerm tp = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 AFun af = parser.tbfactory.makeAFun(nm.toString(), 0, false);
                                                RESULT = parser.tbfactory.mkVar(af, parser.processName, tp);
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_decl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // formals ::= 
            {
              ATermList RESULT =null;
		 RESULT = parser.tbfactory.makeList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // formals ::= LPAR form_list RPAR 
            {
              ATermList RESULT =null;
		ATermList fml = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = fml; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // actuals ::= 
            {
              ATermList RESULT =null;
		 RESULT = parser.tbfactory.makeList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actuals",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // actuals ::= LPAR term_list RPAR 
            {
              ATermList RESULT =null;
		ATermList tl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = tl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actuals",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // proc_call ::= NAME actuals 
            {
              ProcessExpression RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ATermList act = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 AFun af = parser.tbfactory.makeAFun(nm.toString(), act.getLength(), false);
     										   ATerm call = parser.tbfactory.makeApplList(af, act);
     										   RESULT= new ProcessCall(call, parser.tbfactory, null); 
     										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_call",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // proc ::= EXECUTE LPAR term COMMA term RPAR 
            {
              ProcessExpression RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm rv = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Execute ex = new Execute(t, rv, parser.tbfactory, null);
				                               Connect con = new Connect(rv, parser.tbfactory, null, true);
				                               RESULT = new Sequence(ex, con, parser.tbfactory, null);
				                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // proc ::= IF term THEN proc ELSE proc FI 
            {
              ProcessExpression RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ProcessExpression p1 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ProcessExpression p2 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new IfElse(t, p1, p2, parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // proc ::= IF term THEN proc FI 
            {
              ProcessExpression RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ProcessExpression p = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfThen(t, p, parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // proc ::= let 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // proc ::= proc_call 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // proc ::= LPAR proc RPAR 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // proc ::= proc DISRUPT proc 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p1 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ProcessExpression p2 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Disrupt(p1, p2,parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // proc ::= proc FMERGE proc 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p1 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ProcessExpression p2 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Merge(p1, p2,parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // proc ::= proc ITER proc 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p1 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ProcessExpression p2 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sequence(new Tau(parser.tbfactory, null),
                                                                       new Iteration(p1, p2, parser.tbfactory, null),
                                                                       parser.tbfactory,
                                                                       null
                                                                      );
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // proc ::= proc SEQ proc 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p1 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ProcessExpression p2 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sequence(p1, p2,parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // proc ::= proc RIGHTCHOICE proc 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p1 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ProcessExpression p2 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RightBiasedAlternative(p1, p2,parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // proc ::= proc CHOICE proc 
            {
              ProcessExpression RESULT =null;
		ProcessExpression p1 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ProcessExpression p2 = (ProcessExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Alternative(p1, p2,parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // proc ::= atom ABS_TIMEOUT LPAR term_list RPAR 
            {
              ProcessExpression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // proc ::= atom REL_TIMEOUT LPAR term RPAR 
            {
              ProcessExpression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // proc ::= atom ABS_DELAY LPAR term_list RPAR ABS_TIMEOUT LPAR term_list RPAR 
            {
              ProcessExpression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // proc ::= atom ABS_DELAY LPAR term_list RPAR 
            {
              ProcessExpression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // proc ::= atom REL_DELAY LPAR term RPAR REL_TIMEOUT LPAR term RPAR 
            {
              ProcessExpression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // proc ::= atom REL_DELAY LPAR term RPAR 
            {
              ProcessExpression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // proc ::= atom 
            {
              ProcessExpression RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // assign ::= NAME ASSIGN term 
            {
              Atom RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ATerm tnm = parser.tbfactory.make(nm);
        										RESULT = new Assign(
        												   parser.tbfactory.mkVar(tnm, parser.processName, parser.tbfactory.make("none")),
        									               t,
        									               parser.tbfactory, 
        									               null);   
        								    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // shutdown ::= SHUTDOWN LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ShutDown(t, parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shutdown",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // read_print ::= READ LPAR term_list RPAR 
            {
              Atom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_print",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // read_print ::= PRINTF LPAR term_list RPAR 
            {
              Atom RESULT =null;
		ATermList tl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Print(tl, parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_print",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // create ::= CREATE LPAR NAME actuals COMMA result_var RPAR 
            {
              Atom RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		ATermList act = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm rv = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 AFun af = parser.tbfactory.makeAFun(nm.toString(), act.getLength(), false);
     										   ATerm call = parser.tbfactory.makeApplList(af, act);
     										   RESULT= new Create(call, rv, parser.tbfactory, null); 
     										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // delta_tau ::= TAU 
            {
              Atom RESULT =null;
		 RESULT = new Tau(parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("delta_tau",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // delta_tau ::= DELTA 
            {
              Atom RESULT =null;
		 RESULT = new Delta(parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("delta_tau",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tool_atom ::= REC_VALUE LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new RecVal(t1, t2, parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tool_atom ::= SND_DO LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Do(t1, t2, parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tool_atom ::= SND_CANCEL LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tool_atom ::= SND_EVAL LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Eval(t1, t2, parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tool_atom ::= SND_ACK_EVENT LPAR term COMMA term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t3 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new AckEvent(t1, t2, t3, parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tool_atom ::= SND_ACK_EVENT LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new AckEvent(t1, t2, null, parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tool_atom ::= REC_EVENT LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Event(t1, t2, parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tool_atom ::= SND_KILL LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new SndKill(t1, t2, parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tool_atom ::= SND_TERMINATE LPAR term COMMA term RPAR 
            {
              Atom RESULT =null;
		ATerm t1 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATerm t2 = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Terminate(t1, t2, parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tool_atom ::= REC_DISCONNECT LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm rv = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DisConnect(rv, parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tool_atom ::= REC_CONNECT LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm rv = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Connect(rv, parser.tbfactory, null, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tool_atom",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // note_atom ::= NO_NOTE LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new NoNote(t, parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("note_atom",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // note_atom ::= REC_NOTE LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new RecNote(t, parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("note_atom",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // note_atom ::= SND_NOTE LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new SndNote(t, parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("note_atom",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // note_atom ::= UNSUBSCRIBE LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new UnSubscribe(t, parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("note_atom",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // note_atom ::= SUBSCRIBE LPAR term RPAR 
            {
              Atom RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Subscribe(t, parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("note_atom",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // comm_atom ::= REC_MSG LPAR term_list RPAR 
            {
              Atom RESULT =null;
		ATermList tl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  new RecMsg(tl, parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comm_atom",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // comm_atom ::= SND_MSG LPAR term_list RPAR 
            {
              Atom RESULT =null;
		ATermList tl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  new SndMsg(tl, parser.tbfactory, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comm_atom",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // atom ::= shutdown 
            {
              Atom RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // atom ::= assign 
            {
              Atom RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // atom ::= read_print 
            {
              Atom RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // atom ::= create 
            {
              Atom RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // atom ::= delta_tau 
            {
              Atom RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // atom ::= tool_atom 
            {
              Atom RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // atom ::= note_atom 
            {
              Atom RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // atom ::= comm_atom 
            {
              Atom RESULT =null;
		Atom a = (Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // term_list ::= term COMMA term_list 
            {
              ATermList RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ATermList tl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.tbfactory.makeList(t, tl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // term_list ::= term 
            {
              ATermList RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.tbfactory.makeList(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // term_list ::= 
            {
              ATermList RESULT =null;
		 RESULT = parser.tbfactory.makeList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var ::= NAME 
            {
              ATerm RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 AFun af = parser.tbfactory.makeAFun(nm.toString(), 0, false);
     									      ATerm at = parser.tbfactory.makeAppl(af);
     									      String replacement = parser.toolbus.getProperty(nm);
				                              if(replacement != null){
												RESULT = parser.tbfactory.make(replacement);
										      } else {
     									        RESULT = parser.tbfactory.mkVar(at, parser.processName, parser.tbfactory.make("none"));
     									      }
     									   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // result_var ::= NAME QUESTION 
            {
              ATerm RESULT =null;
		String nm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 AFun af = parser.tbfactory.makeAFun(nm.toString(), 0, false);
     									      ATerm at = parser.tbfactory.makeAppl(af);
     									      RESULT = parser.tbfactory.mkResVar(at, parser.processName, parser.tbfactory.make("none"));
     									   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("result_var",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // term ::= LANGLE type RANGLE 
            {
              ATerm RESULT =null;
		ATerm t = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = parser.tbfactory.makePlaceholder(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // term ::= LSQUARE term_list RSQUARE 
            {
              ATerm RESULT =null;
		ATermList tl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = tl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // term ::= IDENT LPAR term_list RPAR 
            {
              ATerm RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		ATermList tl = (ATermList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 AFun af = parser.tbfactory.makeAFun(id.toString(), tl.getLength(), false);
     										  RESULT = parser.tbfactory.makeApplList(af, tl);
     									   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // term ::= IDENT 
            {
              ATerm RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 AFun af = parser.tbfactory.makeAFun(id.toString(), 0, false);
     									      RESULT = parser.tbfactory.makeAppl(af);
     									   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // term ::= UNDEFINED 
            {
              ATerm RESULT =null;
		 RESULT = parser.tbfactory.Undefined; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // term ::= FALSE 
            {
              ATerm RESULT =null;
		 RESULT = parser.tbfactory.False; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // term ::= TRUE 
            {
              ATerm RESULT =null;
		 RESULT = parser.tbfactory.True; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // term ::= result_var 
            {
              ATerm RESULT =null;
		ATerm rv = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = rv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // term ::= var 
            {
              ATerm RESULT =null;
		ATerm v = (ATerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // term ::= STRING 
            {
              ATerm RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 AFun afun = parser.tbfactory.makeAFun(s.toString(), 0, true);
     										  RESULT = parser.tbfactory.makeAppl(afun); 
     									   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // term ::= REAL 
            {
              ATerm RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.tbfactory.makeReal(new Double(s).doubleValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // term ::= INT 
            {
              ATerm RESULT =null;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.tbfactory.makeInt(i.intValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= script EOF 
            {
              Object RESULT =null;
		Object start_val = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // script ::= def_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("script",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

