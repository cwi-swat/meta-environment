/* The following code was generated by JFlex 1.3.5 on 6/10/08 1:36 PM */

package toolbus.parsercup;


/* Lexical syntax for ToolBus scripts */
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 6/10/08 1:36 PM from the specification file
 * <tt>file:/export/scratch1/lankamp/metaClipse/toolbus-ng/src/toolbus/parsercup/toolbus.jflex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int STRING = 1;
  final public static int YYINITIAL = 0;
  final public static int INCLUDE = 2;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\54"+
    "\1\50\1\0\1\6\2\0\1\55\1\56\1\5\1\20\1\57\1\13"+
    "\1\15\1\4\1\14\11\10\1\64\1\0\1\51\1\65\1\53\1\67"+
    "\1\0\4\12\1\17\25\12\1\62\1\52\1\63\1\0\1\11\1\0"+
    "\1\37\1\33\1\27\1\23\1\16\1\36\1\25\1\44\1\34\1\7"+
    "\1\41\1\43\1\24\1\22\1\30\1\35\1\42\1\26\1\21\1\31"+
    "\1\32\1\40\1\46\1\45\1\47\1\7\1\60\1\66\1\61\uff82\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    56,   112,   168,   224,   168,   280,   168,   336,   392, 
      448,   504,   560,   616,   168,   672,   728,   784,   840,   896, 
      952,  1008,  1064,  1120,  1176,  1232,  1288,  1344,  1400,  1456, 
     1512,  1568,  1624,  1680,  1736,   168,   168,   168,   168,   168, 
      168,   168,   168,  1792,   168,  1848,   168,  1904,  1960,   168, 
     2016,   168,   168,  2072,  2128,  2184,   616,  2240,  2296,  2352, 
      168,  2408,  2464,  2520,  2576,  2632,  2688,  2744,  2800,  2856, 
     2912,  2968,  3024,  3080,  3136,  3192,  3248,   392,   392,   392, 
     3304,   392,  3360,  3416,  3472,  3528,  3584,  3640,  3696,  3752, 
      168,   168,   168,   168,   168,   168,   168,   168,  3808,  3864, 
     3920,  3976,  4032,  4088,  4144,  4200,  4256,  4312,  4368,  4424, 
     4480,  4536,  4592,  4648,  4704,  4760,  4816,  4872,   392,  4928, 
     4984,  5040,  5096,  5152,  5208,  5264,  5320,   392,  5376,  5432, 
     5488,  5544,  5600,  5656,  3808,  5712,  5768,   392,  5824,  5880, 
     5936,  5992,  6048,  6104,  6160,  6216,  6272,   392,  6328,  6384, 
     6440,   392,  6496,  6552,   392,  6608,  6664,  6720,  6776,  6832, 
     6888,   392,   392,  6944,  7000,  7056,  7112,  7168,  7224,  7224, 
     7280,  7336,  7392,  7448,  7504,  7560,  7616,  7672,  7728,  7784, 
     7840,  7896,  7952,  8008,   392,   392,  8064,  8120,  8176,  8232, 
     8288,  8344,  8400,  8456,  8512,  8568,  8624,   392,  8680,  8736, 
     8792,  8848,  8904,  8960,   392,  9016,  9072,  9128,  9184,  9240, 
     9296,  9352,   392,  9408,  9464,  9520,   392,  9576,  9632,  9688, 
     9744,  9800,  9856,  9912,  9968, 10024, 10080, 10136, 10192, 10248, 
    10304, 10360, 10416, 10472, 10528,   392, 10584, 10640, 10696, 10752, 
    10808, 10864,   392, 10920, 10976,   168, 11032, 11088, 11144,   168, 
      392, 11200, 11256,   392, 11312, 11368, 11424, 11480, 11536, 11592, 
    11648,   392, 11704, 11760, 11816, 11872,   392, 11928, 11984, 12040, 
    12096,   392,   392,   392, 12152, 12208,   392, 12264, 12320,   168, 
    12376,   168,   392,   392, 12432, 12488, 12544, 12600,   392, 12656, 
      392, 12712, 12768,   392, 12824, 12880, 12936, 12992, 13048, 13104, 
    13160, 13216, 13272,   168, 13328, 13384, 13440, 13496,   392, 13552, 
      392, 13608, 13664, 13720, 13776,   392, 13832,   392,   392, 13888, 
    13944,   392, 14000, 14056, 14112, 14168, 14224, 14280, 14336, 14392, 
    14448, 14504, 14560, 14616, 14672, 14728,   392,   392, 14784,   392, 
      392,   392, 14840, 14896, 14952, 15008, 15064,   392,   392, 15120, 
    15176, 15232,   392,   392,   392
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\12\1\13"+
    "\2\14\1\15\1\16\1\17\1\20\1\14\1\21\1\22"+
    "\1\23\1\24\1\12\1\25\1\26\1\27\1\12\1\30"+
    "\1\31\1\12\1\32\1\33\1\34\1\35\1\12\1\36"+
    "\1\12\1\37\1\40\3\12\1\41\1\42\1\4\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\2\4\47\60\1\61"+
    "\1\60\1\62\13\60\1\63\2\4\46\63\1\64\1\4"+
    "\1\65\1\4\13\63\72\0\1\6\71\0\1\66\1\67"+
    "\70\0\1\66\70\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\27\12\30\0\1\13\3\0\1\13\1\70\61\0"+
    "\6\14\1\0\2\14\1\0\27\14\30\0\1\13\3\0"+
    "\1\16\63\0\1\71\3\0\1\71\1\70\61\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\1\12\1\72\20\12"+
    "\1\73\1\12\1\74\2\12\73\0\1\75\23\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\1\12\1\76\7\12"+
    "\1\77\11\12\1\100\3\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\7\12\1\101\17\12\27\0\2\12"+
    "\1\0\3\12\1\0\1\102\1\12\1\0\27\12\27\0"+
    "\2\12\1\0\3\12\1\0\1\103\1\12\1\0\27\12"+
    "\27\0\2\12\1\0\3\12\1\0\1\104\1\12\1\0"+
    "\27\12\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\5\12\1\105\1\12\1\106\12\12\1\107\4\12\27\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\5\12\1\110"+
    "\1\12\1\111\3\12\1\112\2\12\1\113\4\12\1\114"+
    "\3\12\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\1\12\1\115\25\12\27\0\2\12\1\0\3\12\1\0"+
    "\2\12\1\0\1\116\1\117\13\12\1\120\11\12\27\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\5\12\1\121"+
    "\21\12\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\13\12\1\122\2\12\1\123\10\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\12\12\1\124\14\12\27\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\13\12\1\125"+
    "\13\12\27\0\2\12\1\0\3\12\1\0\1\126\1\12"+
    "\1\0\27\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\7\12\1\127\17\12\36\0\1\130\4\0\1\131"+
    "\10\0\1\132\53\0\1\133\122\0\1\134\101\0\1\135"+
    "\70\0\1\136\1\0\1\60\2\0\47\60\1\0\1\60"+
    "\1\0\13\60\22\0\1\137\3\0\1\140\2\0\1\141"+
    "\22\0\1\142\13\0\1\63\2\0\46\63\4\0\13\63"+
    "\1\66\1\5\1\6\65\66\5\143\1\144\62\143\10\0"+
    "\1\145\3\0\1\145\62\0\2\12\1\0\3\12\1\0"+
    "\2\12\1\0\2\12\1\146\24\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\1\147\26\12\27\0\2\12"+
    "\1\0\3\12\1\0\1\150\1\12\1\0\27\12\27\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\2\12\1\151"+
    "\24\12\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\12\12\1\152\14\12\27\0\2\12\1\0\3\12\1\0"+
    "\2\12\1\0\11\12\1\153\15\12\27\0\2\12\1\0"+
    "\1\12\1\154\1\12\1\0\2\12\1\0\27\12\27\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\22\12\1\155"+
    "\4\12\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\10\12\1\156\16\12\27\0\2\12\1\0\3\12\1\0"+
    "\2\12\1\0\6\12\1\157\7\12\1\160\10\12\27\0"+
    "\2\12\1\0\3\12\1\0\1\161\1\12\1\0\27\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\3\12"+
    "\1\162\23\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\16\12\1\163\10\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\11\12\1\164\15\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\7\12\1\165\17\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\3\12"+
    "\1\166\23\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\11\12\1\167\15\12\27\0\2\12\1\0\3\12"+
    "\1\0\1\170\1\12\1\0\27\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\1\171\1\12\1\172\24\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\7\12"+
    "\1\173\3\12\1\174\13\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\22\12\1\175\4\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\1\176\26\12\27\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\1\12\1\177"+
    "\25\12\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\10\12\1\200\16\12\27\0\2\12\1\0\3\12\1\0"+
    "\2\12\1\0\1\201\26\12\42\0\1\202\63\0\1\203"+
    "\73\0\1\204\13\0\1\205\31\0\5\143\1\206\66\143"+
    "\1\207\1\206\62\143\10\0\1\145\3\0\1\145\1\0"+
    "\2\210\57\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\22\12\1\211\4\12\27\0\2\12\1\0\3\12\1\0"+
    "\1\212\1\12\1\0\27\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\6\12\1\213\20\12\27\0\2\12"+
    "\1\0\1\12\1\214\1\12\1\0\2\12\1\0\27\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\1\215"+
    "\26\12\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\10\12\1\216\16\12\27\0\2\12\1\0\3\12\1\0"+
    "\2\12\1\0\1\12\1\217\25\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\10\12\1\220\5\12\1\221"+
    "\10\12\27\0\2\12\1\0\1\12\1\222\1\12\1\0"+
    "\2\12\1\0\27\12\27\0\2\12\1\0\1\12\1\223"+
    "\1\12\1\0\2\12\1\0\27\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\2\12\1\224\24\12\27\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\16\12\1\225"+
    "\10\12\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\3\12\1\226\23\12\27\0\2\12\1\0\3\12\1\0"+
    "\2\12\1\0\1\227\26\12\27\0\2\12\1\0\3\12"+
    "\1\0\1\230\1\12\1\0\27\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\22\12\1\231\4\12\27\0"+
    "\2\12\1\0\3\12\1\0\1\232\1\12\1\0\27\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\1\12"+
    "\1\233\25\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\11\12\1\234\15\12\27\0\2\12\1\0\3\12"+
    "\1\0\1\235\1\12\1\0\27\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\6\12\1\236\20\12\27\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\1\12\1\237"+
    "\25\12\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\1\240\26\12\27\0\2\12\1\0\1\12\1\241\1\12"+
    "\1\0\2\12\1\0\27\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\2\12\1\242\24\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\10\12\1\243\16\12"+
    "\43\0\1\244\102\0\1\245\60\0\1\246\62\0\1\247"+
    "\1\250\44\0\4\143\1\6\1\206\62\143\10\0\1\251"+
    "\2\0\1\252\1\251\3\0\1\252\56\0\2\12\1\0"+
    "\3\12\1\0\1\253\1\12\1\0\27\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\11\12\1\254\15\12"+
    "\27\0\2\12\1\0\3\12\1\0\1\255\1\12\1\0"+
    "\1\12\1\256\1\257\1\260\1\12\1\261\1\262\1\12"+
    "\1\263\5\12\1\264\1\12\1\265\6\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\6\12\1\266\20\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\2\12"+
    "\1\267\24\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\7\12\1\270\17\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\16\12\1\271\10\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\26\12\1\272\27\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\14\12\1\273"+
    "\12\12\27\0\2\12\1\0\3\12\1\0\1\274\1\12"+
    "\1\0\1\12\1\275\1\276\1\277\1\12\1\300\1\301"+
    "\5\12\1\302\2\12\1\303\7\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\10\12\1\304\16\12\27\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\16\12\1\305"+
    "\10\12\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\1\306\26\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\12\12\1\307\14\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\7\12\1\310\17\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\12\12\1\311\14\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\15\12"+
    "\1\312\11\12\27\0\2\12\1\0\3\12\1\0\1\313"+
    "\1\12\1\0\27\12\27\0\2\12\1\0\3\12\1\0"+
    "\2\12\1\0\10\12\1\314\16\12\27\0\2\12\1\0"+
    "\3\12\1\0\1\315\1\12\1\0\27\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\2\12\1\316\5\12"+
    "\1\317\16\12\54\0\1\320\67\0\1\321\76\0\1\322"+
    "\47\0\1\323\62\0\1\324\61\0\1\251\3\0\1\251"+
    "\62\0\2\12\1\0\3\12\1\0\2\12\1\0\10\12"+
    "\1\325\16\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\10\12\1\326\16\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\17\12\1\327\7\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\7\12\1\330\17\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\7\12"+
    "\1\331\17\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\1\332\26\12\27\0\2\12\1\0\3\12\1\0"+
    "\1\333\1\12\1\0\27\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\16\12\1\334\10\12\27\0\2\12"+
    "\1\0\3\12\1\0\1\335\1\12\1\0\27\12\27\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\6\12\1\336"+
    "\20\12\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\13\12\1\337\13\12\27\0\2\12\1\0\3\12\1\0"+
    "\2\12\1\0\5\12\1\340\21\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\7\12\1\341\17\12\27\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\10\12\1\342"+
    "\16\12\27\0\2\12\1\0\3\12\1\0\1\343\1\12"+
    "\1\0\27\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\17\12\1\344\7\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\7\12\1\345\17\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\13\12\1\346\13\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\1\347"+
    "\26\12\27\0\2\12\1\0\3\12\1\0\1\350\1\12"+
    "\1\0\27\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\7\12\1\351\17\12\27\0\2\12\1\0\3\12"+
    "\1\0\1\352\1\12\1\0\27\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\16\12\1\353\10\12\27\0"+
    "\2\12\1\0\3\12\1\0\1\354\1\12\1\0\27\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\1\12"+
    "\1\355\25\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\11\12\1\356\15\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\11\12\1\357\15\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\1\360\26\12\27\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\13\12\1\361"+
    "\13\12\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\1\362\26\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\15\12\1\363\11\12\27\0\2\12\1\0\3\12"+
    "\1\0\1\364\1\12\1\0\27\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\13\12\1\365\13\12\56\0"+
    "\1\366\53\0\1\367\77\0\1\370\53\0\1\371\107\0"+
    "\1\372\40\0\2\12\1\0\3\12\1\0\1\373\1\12"+
    "\1\0\27\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\16\12\1\374\10\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\10\12\1\375\16\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\4\12\1\376\22\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\1\377"+
    "\26\12\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\1\12\1\u0100\25\12\27\0\2\12\1\0\3\12\1\0"+
    "\2\12\1\0\5\12\1\u0101\21\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\20\12\1\u0102\6\12\27\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\22\12\1\u0103"+
    "\4\12\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\13\12\1\u0104\13\12\27\0\2\12\1\0\3\12\1\0"+
    "\2\12\1\0\25\12\1\u0105\1\12\27\0\2\12\1\0"+
    "\3\12\1\0\1\u0106\1\12\1\0\27\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\5\12\1\u0107\21\12"+
    "\27\0\2\12\1\0\3\12\1\0\1\u0108\1\12\1\0"+
    "\27\12\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\10\12\1\u0109\16\12\27\0\2\12\1\0\3\12\1\0"+
    "\2\12\1\0\1\u010a\26\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\4\12\1\u010b\22\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\21\12\1\u010c\5\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\1\12"+
    "\1\u010d\25\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\5\12\1\u010e\21\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\22\12\1\u010f\4\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\2\12\1\u0110\24\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\1\u0111"+
    "\26\12\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\10\12\1\u0112\16\12\27\0\2\12\1\0\3\12\1\0"+
    "\2\12\1\0\6\12\1\u0113\20\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\1\12\1\u0114\25\12\27\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\1\u0115\26\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\22\12"+
    "\1\u0116\4\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\3\12\1\u0117\23\12\36\0\1\u0118\74\0\1\u0119"+
    "\102\0\1\u011a\40\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\22\12\1\u011b\4\12\27\0\2\12\1\0\3\12"+
    "\1\0\1\u011c\1\12\1\0\27\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\14\12\1\u011d\12\12\27\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\6\12\1\u011e"+
    "\20\12\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\3\12\1\u011f\23\12\27\0\2\12\1\0\1\12\1\u0120"+
    "\1\12\1\0\2\12\1\0\27\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\22\12\1\u0121\4\12\27\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\12\12\1\u0122"+
    "\14\12\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\1\12\1\u0123\25\12\27\0\2\12\1\0\3\12\1\0"+
    "\2\12\1\0\15\12\1\u0124\11\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\1\12\1\u0125\25\12\27\0"+
    "\2\12\1\0\3\12\1\0\1\u0126\1\12\1\0\27\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\6\12"+
    "\1\u0127\20\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\11\12\1\u0128\15\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\1\12\1\u0129\25\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\15\12\1\u012a\11\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\11\12"+
    "\1\u012b\15\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\5\12\1\u012c\21\12\27\0\2\12\1\0\3\12"+
    "\1\0\1\u012d\1\12\1\0\27\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\16\12\1\u012e\10\12\27\0"+
    "\2\12\1\0\3\12\1\0\1\u012f\1\12\1\0\27\12"+
    "\36\0\1\u0130\60\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\7\12\1\u0131\17\12\27\0\2\12\1\0\3\12"+
    "\1\0\1\u0132\1\12\1\0\27\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\13\12\1\u0133\13\12\27\0"+
    "\2\12\1\0\3\12\1\0\1\u0134\1\12\1\0\27\12"+
    "\27\0\2\12\1\0\3\12\1\0\1\u0135\1\12\1\0"+
    "\27\12\27\0\2\12\1\0\1\12\1\u0136\1\12\1\0"+
    "\2\12\1\0\27\12\27\0\2\12\1\0\3\12\1\0"+
    "\2\12\1\0\10\12\1\u0137\16\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\7\12\1\u0138\17\12\27\0"+
    "\2\12\1\0\3\12\1\0\1\u0139\1\12\1\0\27\12"+
    "\27\0\2\12\1\0\3\12\1\0\1\u013a\1\12\1\0"+
    "\27\12\27\0\2\12\1\0\1\12\1\u013b\1\12\1\0"+
    "\2\12\1\0\27\12\27\0\2\12\1\0\3\12\1\0"+
    "\1\u013c\1\12\1\0\27\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\13\12\1\u013d\13\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\2\12\1\u013e\24\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\26\12"+
    "\1\u013f\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\7\12\1\u0140\17\12\27\0\2\12\1\0\3\12\1\0"+
    "\2\12\1\0\1\12\1\u0141\25\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\22\12\1\u0142\4\12\27\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\1\12\1\u0143"+
    "\25\12\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\17\12\1\u0144\7\12\27\0\2\12\1\0\3\12\1\0"+
    "\2\12\1\0\1\u0145\26\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\1\12\1\u0146\25\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\1\u0147\26\12\27\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\6\12\1\u0148"+
    "\20\12\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\1\u0149\26\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\12\12\1\u014a\14\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\11\12\1\u014b\15\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\1\u014c\26\12\27\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\16\12\1\u014d"+
    "\10\12\27\0\2\12\1\0\3\12\1\0\1\u014e\1\12"+
    "\1\0\27\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\10\12\1\u014f\16\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\1\12\1\u0150\25\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\10\12\1\u0151\16\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\10\12"+
    "\1\u0152\16\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\10\12\1\u0153\16\12\27\0\2\12\1\0\3\12"+
    "\1\0\1\u0154\1\12\1\0\27\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\10\12\1\u0155\16\12\27\0"+
    "\2\12\1\0\3\12\1\0\1\u0156\1\12\1\0\27\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\10\12"+
    "\1\u0157\16\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\1\12\1\u0158\25\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\16\12\1\u0159\10\12\27\0\2\12"+
    "\1\0\3\12\1\0\1\u015a\1\12\1\0\27\12\27\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\16\12\1\u015b"+
    "\10\12\27\0\2\12\1\0\3\12\1\0\1\u015c\1\12"+
    "\1\0\27\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\10\12\1\u015d\16\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\10\12\1\u015e\16\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\6\12\1\u015f\20\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\10\12"+
    "\1\u0160\16\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\1\u0161\26\12\27\0\2\12\1\0\3\12\1\0"+
    "\2\12\1\0\10\12\1\u0162\16\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\1\u0163\26\12\20\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_NO_MATCH = 2;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  0,  9,  1,  9,  1,  9,  1,  1,  1,  1,  1,  1,  9,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  9,  9,  9,  9,  9,  9,  9,  9,  1,  9,  1,  9,  1, 
     1,  9,  1,  9,  9,  0,  0,  0,  0,  1,  1,  1,  9,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  9,  9,  9,  9,  9,  9, 
     9,  9,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  0,  0,  0,  0,  0,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  0,  0,  0,  0,  0,  1,  0,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 
     0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  9,  0,  0,  0,  9,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  9,  0,  9,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
  StringBuilder string = new StringBuilder();

  private Symbol symbol(int type){
    return new Symbol(type, yyline, yycolumn);
  }
  
  private Symbol symbol(int type, Object value){
    return new Symbol(type, yyline, yycolumn, value);
  }
  
  public int getPosition(){
	  return yychar;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[15288];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 140) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    yy_endRead+= numRead;  
    return false;
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            yy_input = yy_buffer_l[yy_currentPos_l++];
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 340: 
          {  return symbol(sym.ABS_TIMEOUT);  }
        case 356: break;
        case 339: 
          {  return symbol(sym.UNSUBSCRIBE);  }
        case 357: break;
        case 337: 
          {  return symbol(sym.REC_CONNECT);  }
        case 358: break;
        case 336: 
          {  return symbol(sym.REC_REQUEST);  }
        case 359: break;
        case 321: 
          {  return symbol(sym.SND_CANCEL);  }
        case 360: break;
        case 90: 
          {  return symbol(sym.LEFTCHOICE);  }
        case 361: break;
        case 60: 
          {  return symbol(sym.RIGHTCHOICE);  }
        case 362: break;
        case 273: 
          {  return symbol(sym.REL_TIMEOUT);  }
        case 363: break;
        case 10: 
        case 13: 
          {  return symbol(sym.INT, new Integer(yytext()));  }
        case 364: break;
        case 318: 
          {  return symbol(sym.ABS_DELAY);  }
        case 365: break;
        case 317: 
          {  return symbol(sym.UNDEFINED);  }
        case 366: break;
        case 315: 
          {  return symbol(sym.REC_VALUE);  }
        case 367: break;
        case 310: 
          {  return symbol(sym.REC_EVENT);  }
        case 368: break;
        case 308: 
          {  return symbol(sym.SUBSCRIBE);  }
        case 369: break;
        case 293: 
          {  return symbol(sym.REC_NOTE);  }
        case 370: break;
        case 290: 
          {  return symbol(sym.SHUTDOWN);  }
        case 371: break;
        case 288: 
          {  return symbol(sym.SND_KILL);  }
        case 372: break;
        case 283: 
          {  return symbol(sym.SND_NOTE);  }
        case 373: break;
        case 282: 
          {  return symbol(sym.SND_EVAL);  }
        case 374: break;
        case 46: 
          {  return symbol(sym.QUESTION);  }
        case 375: break;
        case 185: 
          {  return symbol(sym.REL_DELAY);  }
        case 376: break;
        case 303: 
          {  yybegin(INCLUDE); return symbol(sym.INCLUDE);  }
        case 377: break;
        case 81: 
          {  return symbol(sym.FI);  }
        case 378: break;
        case 79: 
          {  return symbol(sym.IF);  }
        case 379: break;
        case 78: 
          {  return symbol(sym.IN);  }
        case 380: break;
        case 77: 
          {  return symbol(sym.IS);  }
        case 381: break;
        case 14: 
          {  return symbol(sym.SEQ);  }
        case 382: break;
        case 4: 
        case 5: 
          {  /* ignore */  }
        case 383: break;
        case 118: 
          {  return symbol(sym.TAU);  }
        case 384: break;
        case 127: 
          {  return symbol(sym.LET);  }
        case 385: break;
        case 134: 
          {  /* ignore */  }
        case 386: break;
        case 348: 
          {  return symbol(sym.SND_ACK_EVENT);  }
        case 387: break;
        case 347: 
          {  return symbol(sym.SND_TERMINATE);  }
        case 388: break;
        case 341: 
          {  return symbol(sym.SND_RESPONSE);  }
        case 389: break;
        case 49: 
          {  yybegin(YYINITIAL); 
                                   return symbol(sym.STRING, 
                                   string.toString());  }
        case 390: break;
        case 43: 
          {  return symbol(sym.COLON);  }
        case 391: break;
        case 7: 
          {  return symbol(sym.ITER);  }
        case 392: break;
        case 36: 
          {  return symbol(sym.LPAR);  }
        case 393: break;
        case 37: 
          {  return symbol(sym.RPAR);  }
        case 394: break;
        case 38: 
          {  return symbol(sym.COMMA);  }
        case 395: break;
        case 137: 
          {  return symbol(sym.ELSE);  }
        case 396: break;
        case 147: 
          {  return symbol(sym.READ);  }
        case 397: break;
        case 151: 
          {  return symbol(sym.TRUE);  }
        case 398: break;
        case 152: 
          {  return symbol(sym.TOOL);  }
        case 399: break;
        case 154: 
          {  return symbol(sym.THEN);  }
        case 400: break;
        case 161: 
          {  return symbol(sym.KIND);  }
        case 401: break;
        case 162: 
          {  return symbol(sym.HOST);  }
        case 402: break;
        case 184: 
          {  return symbol(sym.DELTA);  }
        case 403: break;
        case 197: 
          {  return symbol(sym.CLASS);  }
        case 404: break;
        case 204: 
          {  return symbol(sym.FALSE);  }
        case 405: break;
        case 245: 
          {  return symbol(sym.ENDIF);  }
        case 406: break;
        case 249: 
          {  return symbol(sym.IFDEF);  }
        case 407: break;
        case 48: 
          {  string.append('\\');  }
        case 408: break;
        case 94: 
          {  string.append('\n');  }
        case 409: break;
        case 95: 
          {  string.append('\r');  }
        case 410: break;
        case 96: 
          {  string.append('\t');  }
        case 411: break;
        case 97: 
          {  string.append('\"');  }
        case 412: break;
        case 51: 
          {  string.setLength(0);  }
        case 413: break;
        case 354: 
          {  return symbol(sym.REC_PERF_STATS);  }
        case 414: break;
        case 353: 
          {  return symbol(sym.REC_DISCONNECT);  }
        case 415: break;
        case 352: 
          {  return symbol(sym.GET_PERF_STATS);  }
        case 416: break;
        case 11: 
          {  return symbol(sym.NAME, yytext());  }
        case 417: break;
        case 9: 
        case 15: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 57: 
        case 58: 
        case 59: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 80: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 128: 
        case 136: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 148: 
        case 149: 
        case 150: 
        case 153: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 205: 
        case 206: 
        case 213: 
        case 214: 
        case 215: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 243: 
        case 244: 
        case 251: 
        case 252: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 262: 
        case 263: 
        case 264: 
        case 265: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 274: 
        case 275: 
        case 277: 
        case 278: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
        case 289: 
        case 291: 
        case 292: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 309: 
        case 311: 
        case 312: 
        case 313: 
        case 314: 
        case 316: 
        case 319: 
        case 320: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 330: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
        case 338: 
        case 342: 
        case 343: 
        case 344: 
        case 345: 
        case 346: 
        case 349: 
        case 350: 
        case 351: 
          {  return symbol(sym.IDENT, yytext());  }
        case 418: break;
        case 100: 
        case 168: 
          {  return symbol(sym.REAL, yytext());  }
        case 419: break;
        case 35: 
          {  string.setLength(0); yybegin(STRING);  }
        case 420: break;
        case 92: 
          {  return symbol(sym.ASSIGN);  }
        case 421: break;
        case 91: 
          {  return symbol(sym.DISRUPT);  }
        case 422: break;
        case 52: 
          {  yybegin(YYINITIAL); 
                                   return symbol(sym.FILENAME, 
                                   string.toString());  }
        case 423: break;
        case 50: 
          {  string.append( yytext() );  }
        case 424: break;
        case 47: 
          {  string.append( yytext() );  }
        case 425: break;
        case 44: 
          {  return symbol(sym.EQUALS);  }
        case 426: break;
        case 42: 
          {  return symbol(sym.RSQUARE);  }
        case 427: break;
        case 16: 
          {  return symbol(sym.CHOICE);  }
        case 428: break;
        case 33: 
          {  return symbol(sym.LANGLE);  }
        case 429: break;
        case 34: 
          {  return symbol(sym.RANGLE);  }
        case 430: break;
        case 39: 
          {  return symbol(sym.LBRACE);  }
        case 431: break;
        case 40: 
          {  return symbol(sym.RBRACE);  }
        case 432: break;
        case 41: 
          {  return symbol(sym.LSQUARE);  }
        case 433: break;
        case 93: 
          {  return symbol(sym.FMERGE);  }
        case 434: break;
        case 212: 
          {  return symbol(sym.ENDLET);  }
        case 435: break;
        case 216: 
          {  return symbol(sym.SND_DO);  }
        case 436: break;
        case 235: 
          {  return symbol(sym.CREATE);  }
        case 437: break;
        case 242: 
          {  return symbol(sym.PRINTF);  }
        case 438: break;
        case 250: 
          {  return symbol(sym.EXECUTE);  }
        case 439: break;
        case 253: 
          {  return symbol(sym.SND_MSG);  }
        case 440: break;
        case 261: 
          {  return symbol(sym.NO_NOTE);  }
        case 441: break;
        case 266: 
          {  return symbol(sym.REC_MSG);  }
        case 442: break;
        case 271: 
          {  return symbol(sym.COMMAND);  }
        case 443: break;
        case 272: 
          {  return symbol(sym.TOOLBUS);  }
        case 444: break;
        case 276: 
          {  return symbol(sym.PROCESS);  }
        case 445: break;
        case 279: 
          {  return symbol(sym.DEFINE);  }
        case 446: break;
        case 281: 
          {  return symbol(sym.IFNDEF);  }
        case 447: break;
        case 3: 
        case 6: 
        case 8: 
        case 12: 
        case 32: 
        case 45: 
          {  throw new Error("Illegal character <"+
                                                    yytext()+">");  }
        case 448: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          }
          yy_ScanError(YY_NO_MATCH);
      }
    }
  }


}
