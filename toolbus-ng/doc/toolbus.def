%%%
%%% SDF grammar for the language "toolbus".
%%%
%%% This grammar is part of the Grammar Base which is located at
%%%      http://www.program-transformation.org/gb/
%%% 
%%%  Grammar: toolbus
%%%  Version: 1
%%% Maturity: Stable
%%%
%%% Description:
%%%  Coordination language

definition

module ToolDef
imports Terms

exports
  sorts ToolDef ToolDefs ToolName ToolAttrib ToolAttribName ToolAttribValue

  lexical syntax
    [a-z] [a-zA-Z0-9\-]* -> ToolName
    [a-z] [a-zA-Z\-]* -> ToolAttribName
    ~[\0-\31] \/ [\t\n] -> DetailsChar
    "<<" DetailsChar* ">>" -> DetailsString
    String -> ToolAttribValue
    DetailsString -> ToolAttribValue

  context-free syntax
    "tool" ToolName "is" "{" ToolAttrib* "}" -> ToolDef {cons("tooldef")}
    "tool" ToolName "(" VarDecls ")" "is" "{" ToolAttrib* "}" -> ToolDef {cons("tooldefargs")}
    ToolAttribName "=" ToolAttribValue -> ToolAttrib {cons("toolattrib")}
    ToolDef* -> ToolDefs {cons("toolDefStar")}

module TimeExpr
imports Terms

exports
  sorts TimeExpr Delay TimeOut

  context-free syntax
    delay -> Delay {cons("delay")}
    abs-delay -> Delay {cons("abs-delay")}
    timeout -> TimeOut {cons("timeout")}
    abs-timeout -> TimeOut {cons("abs-timeout")}
    Delay "(" TermList ")" -> TimeExpr {cons("delayExpr")}
    Delay "(" TermList ")" TimeOut "(" TermList ")" -> TimeExpr {cons("delayTimeOutExpr")}

module VarDecls
imports Terms

exports
  sorts VarDecl VarDecls

  context-free syntax
    Var ":" Term -> VarDecl {cons("vardecl")}
    Var ":" Term "?" -> VarDecl {cons("assign-vardecl")}
    {VarDecl ","}* -> VarDecls {cons("varDeclStar")}

module Booleans
imports Layout

exports
  sorts Bool

  context-free syntax
    true -> Bool {cons("true")}
    false -> Bool {cons("false")}
    "(" Bool ")" -> Bool {bracket}

module Layout
exports
  restrictions
    <LAYOUT?-CF> -/- [\ \t\n\%\#]

  lexical syntax
    "%%" ~[\n]* [\n] -> LAYOUT
    [\ \t\n] -> LAYOUT
    "#" ~[\n]* [\n] -> LAYOUT

module Integers
imports Layout

exports
  sorts NatCon Nat Int Real

  lexical syntax
    [0-9]+ -> NatCon

  context-free syntax
    NatCon -> Nat {cons("natCon")}
    Int "." NatCon -> Real {cons("real")}
    "(" Nat ")" -> Nat {bracket}
    Nat -> Int {cons("natInt")}
    "+" Nat -> Int {cons("posInt")}
    "-" Nat -> Int {cons("negInt")}
    "(" Int ")" -> Int {bracket}

module Terms
imports Integers Booleans

exports
  sorts Id Vname String Term TermList Var GenVar

  lexical syntax
    [a-z] [A-Za-z0-9\-]* -> Id
    "\\" ~[] -> EscChar {avoid}
    ~[\0-\31\"\\] \/ [\t\n] -> L-Char
    EscChar -> L-Char
    "\"" L-Char* "\"" -> String
    [A-Z] [a-zA-Z0-9]* -> Vname

  context-free syntax
    Bool -> Term {cons("boolTerm")}
    Int -> Term {cons("intTerm")}
    Real -> Term {cons("realTerm")}
    String -> Term {cons("stringTerm")}
    Vname -> Var {cons("vnameVar")}
    Var -> GenVar {cons("var")}
    Var "?" -> GenVar {cons("optVar")}
    GenVar -> Term {cons("genvarTerm")}
    "<" Term ">" -> Term {cons("placeholder")}
    Id -> Term {cons("idTerm")}
    Id "(" TermList ")" -> Term {cons("funTerm")}
    {Term ","}* -> TermList {cons("termStar")}
    "[" TermList "]" -> Term {cons("termList")}

module Atom
imports Terms

exports
  sorts Atom ProcessName ProcessInvocation

  lexical restrictions
    ProcessName -/- [a-zA-Z\-0-9]

  lexical syntax
    [A-Z] [a-zA-Z\-0-9]* -> ProcessName

  context-free syntax
    Term -> Atom {cons("termAtom")}
    Var ":=" Term -> Atom {cons("assignment")}

module ProcessExpr
imports Atom VarDecls TimeExpr

exports
  sorts ProcessExpr

  context-free syntax
    Atom -> ProcessExpr {cons("atomProcExpr")}
    Atom TimeExpr -> ProcessExpr {cons("atomTimeExpr")}
    "create" "(" ProcessName "(" {Term ","}* ")" "," GenVar ")" -> ProcessInvocation {cons("createProcArgs")}
    "create" "(" ProcessName "," GenVar ")" -> ProcessInvocation {cons("createProc")}
    ProcessName -> ProcessInvocation {cons("procNameInvoc")}
    ProcessName "(" {Term ","}* ")" -> ProcessInvocation {cons("procInvoc")}
    ProcessInvocation -> ProcessExpr {cons("procInvoExpr")}
    ProcessExpr "." ProcessExpr -> ProcessExpr {left, cons("seqComp")}
    ProcessExpr "+" ProcessExpr -> ProcessExpr {left, cons("ProcessExpr-ProcessExpr3")}
    ProcessExpr "*" ProcessExpr -> ProcessExpr {left, cons("ProcessExpr-ProcessExpr1")}
    ProcessExpr "||" ProcessExpr -> ProcessExpr {left, cons("ProcessExpr-ProcessExpr2")}
    "(" ProcessExpr ")" -> ProcessExpr {bracket}
    "let" VarDecls "in" ProcessExpr "endlet" -> ProcessExpr {cons("letCons")}
    "if" Term "then" ProcessExpr "fi" -> ProcessExpr {cons("ifthen")}
    "if" Term "then" ProcessExpr "else" ProcessExpr "fi" -> ProcessExpr {cons("ifthenelse")}

  context-free priorities
    ProcessExpr "." ProcessExpr -> ProcessExpr {cons("ProcessExpr-ProcessExpr")} >
    ProcessExpr "*" ProcessExpr -> ProcessExpr {cons("ProcessExpr-ProcessExpr1")} >
    ProcessExpr "||" ProcessExpr -> ProcessExpr {cons("ProcessExpr-ProcessExpr2")} >
    ProcessExpr "+" ProcessExpr -> ProcessExpr {cons("ProcessExpr-ProcessExpr3")}

module ProcessDef
imports ProcessExpr

exports
  sorts ProcessDef ProcessDefs

  context-free syntax
    "process" ProcessName "is" ProcessExpr -> ProcessDef {cons("procDef")}
    "process" ProcessName "(" {VarDecl ","}* ")" "is" ProcessExpr -> ProcessDef {cons("procDefArgs")}
    ProcessDef* -> ProcessDefs {cons("procDefStar")}

module Tscript
imports ProcessDef ToolDef

exports
  sorts Tscript TscriptDef

  context-free syntax
    ToolDef -> TscriptDef {cons("tooldefScript")}
    ProcessDef -> TscriptDef {cons("procdefScript")}
    TscriptDef* "toolbus" "(" {ProcessInvocation ","}+ ")" -> Tscript {cons("tscript")}

module Main
imports Tscript

module GB-Main
imports Main

exports
  syntax
    <START> -> SURROGATE-START {cons("\"toolbus-1\"")}
    SURROGATE-START [\256] -> <Start> {prefer, cons("SURROGATE-START")}
