process CREATE(AB : address-book) is
let AID : int in
  rec-msg(create-address) .
  snd-eval(AB, create-entry) .
  rec-value(AB, new-entry(AID?)) .
  snd-msg(address-created(AID))
endlet

process DELETE(AB : address-book) is
let
  AID : int
in
  rec-msg(delete-address(AID?)) .
  snd-do(AB, delete-entry(AID)) .
  snd-msg(address-deleted(AID))
endlet

process SEARCH(AB : address-book) is
let
  Aid : int,
  Name : str
in
  rec-msg(find-by-name(Name?)) .
  snd-eval(AB, find-by-name(Name)) .
  (
    rec-value(AB, found(Aid?)) .
    snd-msg(found(Aid))
  +
    rec-value(AB, not-found) .
    snd-msg(not-found)
  )
endlet

process UPDATE(AB : address-book) is
let
  AID : int,
  Name : str,
  Address : str,
  Zip : str
in
  rec-msg(update-address(AID?)) .
  ( rec-msg(set-name(Name?)) .
    snd-do(AB, set-name(AID, Name))
  + rec-msg(set-address(Address?)) .
    snd-do(AB, set-address(AID, Address))
  ) *
  rec-msg(update-address-done)
endlet

process MAIN is
let ABTool : address-book
in
  execute(address-book, ABTool?) .
  (
    CREATE(ABTool)
  + DELETE(ABTool)
  + SEARCH(ABTool)
  + UPDATE(ABTool)
  ) * delta
endlet

tool address-book is { command = "java-adapter -class TBAddressBookService" }

process CLIENT is
let
  AID : int,
  Name : str,
  Address : str
in
  Name := "John Doe" .
  Address := "1342 Elm Street" .

  snd-msg(create-address) .
  rec-msg(address-created(AID?)) .
  printf("new entry created, id=%d\n", AID) .

  snd-msg(update-address(AID)) .
  snd-msg(set-name(Name)) .
  snd-msg(set-address(Address)) .
  snd-msg(update-address-done) .

  snd-msg(find-by-name(Name)) .
  (
    rec-msg(found(AID?)) .
    printf("%s found: id=%t\n", Name, AID)
  + rec-msg(not-found) .
    printf("%s not found!\n", Name)
  )
endlet

toolbus(MAIN, CLIENT)
