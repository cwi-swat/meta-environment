module ExtractVariables

imports Rstore
imports JavaOperations
imports MyPosInfo[CompilationUnit]
imports MyPosInfo[VariableDeclaratorId]
imports MyPosInfo[Identifier]

exports
  context-free syntax
    extractVariables(CompilationUnit, RSTORE) -> RSTORE

hiddens
  context-free syntax
    extractVariables(CompilationUnit, RSTORE, Area)
      -> RSTORE {traversal(accu, top-down, break)}

hiddens
  context-free syntax
    extractVariables(ClassDeclaration, RSTORE, Area)
      -> RSTORE {traversal(accu, top-down, break)}

    extractVariables(ClassBody, RSTORE, Area)
      -> RSTORE {traversal(accu, top-down, break)}

    extractVariables(MethodDeclaration, RSTORE, Area)
      -> RSTORE {traversal(accu, top-down, break)}

    extractVariables(MethodBody, RSTORE, Area)
      -> RSTORE {traversal(accu, top-down, break)}

hiddens
  context-free syntax
    extractVariables(FieldDeclaration, RSTORE, Area)
      -> RSTORE {traversal(accu, top-down, break)}

    extractVariables(LocalVariableDeclaration, RSTORE, Area)
      -> RSTORE {traversal(accu, top-down, break)}

hiddens
  context-free syntax
    extractFields({VariableDeclarator ","}+, RSTORE, Area, Type)
      -> RSTORE {traversal(accu, top-down, break)}
    
    extractFields(VariableDeclarator, RSTORE, Area, Type)
      -> RSTORE {traversal(accu, top-down, break)}

hiddens
  context-free syntax
    extractLocalVariables({VariableDeclarator ","}+, RSTORE, Area, Type)
      -> RSTORE {traversal(accu, top-down, break)}
    
    extractLocalVariables(VariableDeclarator, RSTORE, Area, Type)
      -> RSTORE {traversal(accu, top-down, break)}

hiddens
  context-free syntax
    addField(VariableDeclaratorId, RSTORE, Area, Type) -> RSTORE
    
    addLocalVariable(VariableDeclaratorId, RSTORE, Area, Type) -> RSTORE

hiddens
  variables
    "&Area" -> Area
    "&ClassBody" -> ClassBody
    "&ClassDeclaration" -> ClassDeclaration
    "&ClassId" -> Area
    "&CompilationUnit" -> CompilationUnit
    "&FieldDeclaration" -> FieldDeclaration
    "&FormalParameters" -> { FormalParameter ","}*
    "&Identifier" -> Identifier
    "&Interfaces" -> Interfaces?
    "&LocalVariableDeclaration" -> LocalVariableDeclaration
    "&MethodBody" -> MethodBody
    "&MethodDeclaration" -> MethodDeclaration
    "&MethodDeclarator" -> MethodDeclarator
    "&MethodHeader" -> MethodHeader
    "&MethodId" -> Area
    "&MethodRes" -> MethodRes
    "&Modifiers" -> Modifier*
    "&Name" -> Name
    "&Rstore"[0-9]* -> RSTORE
    "&Super" -> Super?
    "&Throws" -> Throws?
    "&Tuple"[0-9]* -> <Elem, Elem>
    "&Type" -> Type
    "&VariableDeclarator" -> VariableDeclarator
    "&VariableDeclaratorId" -> VariableDeclaratorId
    "&VariableDeclaratorIdId" -> Area
    "&VariableDeclarators" -> {VariableDeclarator ","}+
    "&VariableInitializer" -> VariableInitializer
