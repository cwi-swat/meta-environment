#ifndef __GRAPH_UTILS__
#define __GRAPH_UTILS__

#define GRAPH_NAMESPACE "graph"

#include <idle-state.tb>

process RenderGraph(GraphPanelId: str, Graph: term?) is
  snd-msg(gp-render-graph(GraphPanelId, Graph))
  . rec-msg(gp-rendered-graph(GraphPanelId, Graph?))
  . snd-msg(gl-layout-graph(Graph))
  . rec-msg(gl-graph(Graph?))

process ShowTree(Tree: term, ShowLeafs: term, 
                 SharingOn: term) is
let
  Graph: term
in
  snd-msg(gc-tree-to-graph(Tree, ShowLeafs, SharingOn))
  . rec-msg(gc-graph(Graph?))
  . RenderGraph("parsetree", Graph?)
  . snd-msg(gp-display-graph("parsetree", Graph))
endlet

process ImportGraphPainter is
let
  Event: attribute-changed-event,
  ImportGraph: term,
  ImportRelations: term
in
  subscribe(is-state(<term>))
  .
  (
    rec-note(is-state(idle))
    . MM-GetModuleGraph(GRAPH_NAMESPACE, ImportGraph?)
    . snd-msg(nav-set-modules(ImportGraph))
    . RenderGraph("import-graph", ImportGraph?)
    . snd-msg(gp-display-graph("import-graph", ImportGraph))
  )
  *
  delta
endlet

toolbus(ImportGraphPainter)

#endif /*__GRAPH_UTILS__*/
