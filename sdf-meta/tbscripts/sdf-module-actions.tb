#ifndef __SDF_MODULE_ACTIONS__
#define __SDF_MODULE_ACTIONS__

#include <sdf-namespace.h>
#include <graph-namespace.h>
#include <navigator.idef>
#include <graph-painter.idef>
#include <configuration-manager.idef>
#include <graph-utils.tb>

process ImportGraphPainter is
let
  AllNotes: term,
  DependenciesEvent: dependencies-changed-event,
  Event: attribute-changed-event,
  ImportGraph: term,
  ImportRelations: term,
  ModuleId: term,
  UpdateGraphOnly: bool
in
  MM-Subscribe-Attribute-Changed(<term>,GRAPH_NAMESPACE,<term>,<term>,<term>)
  . MM-Subscribe-Dependencies-Changed(<term>)
  . subscribe(mm-module-deleted(<term>))
  . subscribe(mm-module-created(<term>))
  .
  (
    UpdateGraphOnly := true
    .
    ( 
      rec-note(mm-attribute-changed(Event?))
    +
      rec-note(mm-dependencies-changed(DependenciesEvent?)) 
    +
      rec-note(mm-module-deleted(ModuleId?))
      . UpdateGraphOnly := false
    +
      rec-note(mm-module-created(ModuleId?))
      . UpdateGraphOnly := false
    ) 
    .
    (
      rec-note(mm-attribute-changed(Event?))
    +
      rec-note(mm-dependencies-changed(DependenciesEvent?)) 
    +
      rec-note(mm-module-deleted(ModuleId?))
      . UpdateGraphOnly := false
    +
      rec-note(mm-module-created(ModuleId?))
      . UpdateGraphOnly := false
    ) 
    * 
    no-note(AllNotes?)
    . snd-msg(tm-request-transaction("ImportGraphPainter"))
    . MM-GetModuleGraph(GRAPH_NAMESPACE, ImportGraph?)
    . 
    if equal(UpdateGraphOnly, false) then
      snd-msg(nav-set-modules(ImportGraph))
    else
      tau
    fi
    . RenderGraph("import-graph", SDF_NAMESPACE, true, false, ImportGraph?)
    . snd-msg(tm-end-transaction("ImportGraphPainter"))
  )
  *
  delta
endlet

toolbus(ImportGraphPainter)

process SelectModule(ModuleId: term) is
  snd-msg(nav-select-module(ModuleId))
  . snd-msg(gp-select-node("import-graph", SDF_NAMESPACE, ModuleId))

process HandleModuleEvent(Type: term, Event: term, ModuleId: term) is
let
  Action: str,
  Modulename: str
in
  snd-msg(cm-get-action(Type, Event))
  . rec-msg(cm-action(Action?))
  . Action(ModuleId)
endlet

process HandleModulePopup is
let
  GraphId: str,
  GraphType: str,
  ModuleId: term,
  Modulename: str,
  Menu: term,
  PopupMenu: list,
  Type: term
in
  (
    NAV-RequestPopup(ModuleId?)
    . MM-GetAttribute(ModuleId, SDF_NAMESPACE, "name", Modulename?)
    . snd-msg(cm-get-events(module-popup(Modulename)))
    . rec-msg(cm-events(PopupMenu?))
    . NAV-ShowPopup(ModuleId, PopupMenu)
  +
    NAV-PopupEvent(ModuleId?, Menu?)
    . HandleModuleEvent(module-popup, Menu, ModuleId)
  +
    GP-RequestPopup(GraphType?, GraphId?, ModuleId?)
    .
    if equal(GraphType, "import-graph") then
      MM-GetAttribute(ModuleId, SDF_NAMESPACE, "name", Modulename?)
      . snd-msg(cm-get-events(module-popup(Modulename)))
      . rec-msg(cm-events(PopupMenu?))
      . GP-ShowPopup("import-graph", SDF_NAMESPACE, ModuleId, PopupMenu)
    else
      tau
    fi
  +
    GP-PopupEvent(GraphType?, GraphId?, ModuleId?, Menu?)
    .
    if equal(GraphType, "import-graph") then
      HandleModuleEvent(module-popup, Menu, ModuleId)
    else
      tau
    fi
  )
  *
  delta
endlet

toolbus(HandleModulePopup)

#endif /* __SDF_MODULE_ACTIONS__ */
