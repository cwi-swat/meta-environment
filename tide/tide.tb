
tool debug-adapter is { /* All kinds of adapters */ }
tool debug-tool    is { /* All kinds of tools */    }
tool tide-control  is { 
    command="java-adapter -class tide.tool.TideControl"
}


/*{{{  process TOOL(T : debug-tool) */

process TOOL(T : debug-tool) is
let
  Process : proc(<debug-adapter>, <int>),
  Dap	  : debug-adapter,
  Name    : str,
  Port    : term,
  Cond    : term,
  Expr    : term,
  Result  : term,
  Tag     : term,
  Enabled : term,
  Rule    : int,
  Pattern : term
in
  subscribe(event(<term>,<int>,<term>)) .
  subscribe(process-created(<term>,<str>)) .
  subscribe(process-destroyed(<term>)) .
  subscribe(adapter-connected(<term>)) .
  subscribe(adapter-disconnected(<term>)) .
  (
    rec-event(T, evaluate(Process?, Expr?)) .
    snd-msg(evaluate(Process, Expr)) .
    rec-msg(evaluated(Process, Result?)) .
    snd-ack-event(T, evaluate(Process, Expr, Tag, Result))
    +
    rec-event(T, create-rule(Process?, Port?, Cond?, Expr?, Tag?, Enabled?)) .
    snd-msg(create-rule(Process, Port, Cond, Expr, Tag, Enabled)) .
    rec-msg(rule-created(Process, Rule?)) .
    snd-ack-event(T, create-rule(Process, Port, Cond, Expr, Tag, Enabled, Rule))
    +
    rec-event(T, enable-rule(Process?, Rule?)) .
    snd-msg(enable-rule(Process, Rule)) .
    rec-msg(rule-enabled(Process)) .
    snd-ack-event(T, rule-enabled(Process, Rule))
    +
    rec-event(T, disable-rule(Process?, Rule?)) .
    snd-msg(disable-rule(Process, Rule)) .
    rec-msg(rule-disabled(Process)) .
    snd-ack-event(T, rule-disabled(Process, Rule))
    +
    rec-event(T, modify-rule(Process?, Rule?, Port?, Cond?, Expr?, Enabled?)) .
    snd-msg(modify-rule(Process, Rule, Port, Cond, Expr, Enabled)) .
    rec-msg(rule-modified(Process)) .
    snd-ack-event(T, modify-rule(Process, Rule, Port, Cond, Expr, Enabled))
    +
    rec-event(T, delete-rule(Process?, Rule?)) .
    snd-msg(delete-rule(Process, Rule)) .
    rec-msg(rule-deleted(Process)) .
    snd-ack-event(T, delete-rule(Process, Rule))
    +
    rec-note(adapter-connected(Dap?)) .
    snd-do(T, adapter-connected(Dap))
    +
    rec-note(adapter-disconnected(Dap?)) .
    snd-do(T, adapter-disconnected(Dap))
    +
    rec-note(process-created(Process?, Name?)) .
    snd-do(T, process-created(Process, Name))
    +
    rec-note(process-destroyed(Process?)) .
    snd-do(T, process-destroyed(Process))
    +
    rec-note(event(Process?, Rule?, Result?)) .
    snd-do(T, event(Process, Rule, Result))
  ) * rec-disconnect(T)
endlet

/*}}}  */
/*{{{  process ADAPTER(A : debug-adapter) */

process ADAPTER(A : debug-adapter) is
let
  Process : proc(<debug-adapter>, <int>),
  Port    : term,
  Cond    : term,
  Action  : term,
  Expr    : term,
  Result  : term,
  Tag     : term,
  Enabled : term,
  Rule    : int,
  Pid     : int,
  Name    : term
in
  snd-note(adapter-connected(A)) .
  (
    rec-msg(evaluate(proc(A, Pid?), Expr?)) .
    snd-eval(A, evaluate(Pid, Expr)) .
    rec-value(A, evaluated(Result?)) .
    snd-note(evaluation(proc(A, Pid), Expr, Result)) .
    snd-msg(evaluated(proc(A, Pid), Result))
    +
    rec-msg(create-rule(proc(A, Pid?), Port?, Cond?, Action?, Tag?, Enabled?)) .
    snd-eval(A, create-rule(Pid, Port, Cond, Action, Tag, Enabled)) .
    rec-value(A, rule-created(Rule?)) .
    snd-note(rule-creation(proc(A, Pid), Port, Cond, Action, Tag, Enabled, Rule)).
    snd-msg(rule-created(proc(A, Pid), Rule))
    +
    rec-msg(enable-rule(proc(A, Pid?), Rule?)) .
    snd-eval(A, enable-rule(Pid, Rule)) .
    rec-value(A, rule-enabled) .
    snd-note(rule-enabling(proc(A, Pid), Rule)) .
    snd-msg(rule-enabled(proc(A, Pid)))
    +
    rec-msg(disable-rule(proc(A, Pid?), Rule?)) .
    snd-eval(A, disable-rule(Pid, Rule)) .
    rec-value(A, rule-disabled) .
    snd-note(rule-disabling(proc(A, Pid), Rule)) .
    snd-msg(rule-disabled(proc(A, Pid)))
    +
    rec-msg(modify-rule(proc(A, Pid?), Rule?, Port?, Cond?, Action?, Enabled?)) .
    snd-eval(A, modify-rule(Pid, Rule, Port, Cond, Action, Enabled)) .
    rec-value(A, rule-modified) .
    snd-note(rule-modification(proc(A, Pid), Rule, Port, Cond, Action, Enabled)) .
    snd-msg(rule-modified(proc(A, Pid)))
    +
    rec-msg(delete-rule(proc(A, Pid?), Rule?)) .
    snd-eval(A, delete-rule(Pid, Rule)) .
    rec-value(A, rule-deleted) .
    snd-note(rule-deletion(proc(A, Pid), Rule)) .
    snd-msg(rule-deleted(proc(A, Pid)))
    +
    rec-event(A, event(Pid?, Rule?, Result?)) .
    snd-note(event(proc(A, Pid), Rule, Result)) .
    snd-ack-event(A, event(Pid, Rule, Result))
    +
    rec-event(A, process-created(Pid?, Name?)) .
    snd-note(process-created(proc(A, Pid), Name)) .
    snd-ack-event(A, process-created(Pid, Name))
    +
    rec-event(A, process-destroyed(Pid)) .
    snd-note(process-destroyed(proc(A, Pid))) .
    snd-ack-event(A, process-destroyed(Pid))
  ) *  rec-disconnect(A) .
  snd-note(adapter-disconnected(A))
endlet 


/*}}}  */

/*{{{  process TOOL-CONNECT */

process TOOL-CONNECT is
let
  T : debug-tool,
  P : int
in
  ( rec-connect(T?) .
    create(TOOL(T), P?)
  ) * delta
endlet


/*}}}  */
/*{{{  process ADAPTER-CONNECT */

process ADAPTER-CONNECT is
let
  A : debug-adapter,
  P : int
in
  ( rec-connect(A?) .
    create(ADAPTER(A), P?)
  ) * delta
endlet
    
/*}}}  */

process CONTROL is
let
  Control : tide-control
in
  execute(tide-control, Control?) .
  (
    delta
  ) * rec-event(Control, quit) .
  shutdown("Thank you for using tide!\n")
endlet

toolbus(CONTROL, TOOL-CONNECT, ADAPTER-CONNECT)

