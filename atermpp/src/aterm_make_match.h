// ======================================================================
//
// Copyright (c) 2004 Wieger Wesselink
//
// ----------------------------------------------------------------------
//
// file          : atermpp/aterm_make_match.h
// date          : 12/06/04
// version       : 0.2
//
// author(s)     : Wieger Wesselink  <J.W.Wesselink@tue.nl>
//
// ======================================================================

#ifndef ATERM_MAKE_MATCH_H
#define ATERM_MAKE_MATCH_H

/** @file
  * This file contains implementations for aterm_make and aterm_match.
  */

namespace { // unnamed namespace

  //---------------------------------------------------------//
  //         conversion between pointer and reference
  //         (needed for aterm_make/aterm_match)
  //---------------------------------------------------------//
  template <typename T>
  struct aterm_conversion
  {
    typedef T  value_type;
    typedef T* pointer;
  };
  
  // specialization for ATermList
  template <>
  struct aterm_conversion<atermpp::aterm>
  {
    typedef ATerm  value_type;
    typedef ATerm* pointer;
  };
  
  template <typename T>
  typename aterm_conversion<T>::pointer aterm_ptr_ref(T& t)
  {
    return &t;
  }
  
  inline
  aterm_conversion<atermpp::aterm>::pointer aterm_ptr_ref(atermpp::aterm& t)
  {
    return &(t.term());
  }
  
  inline
  aterm_conversion<atermpp::aterm>::pointer aterm_ptr_ref(const atermpp::aterm& t)
  {
    return aterm_ptr_ref(const_cast<atermpp::aterm&>(t));
  }
  
  template <typename T>
  typename aterm_conversion<T>::value_type aterm_ptr(T& t)
  {
    return t;
  }
  
  inline
  aterm_conversion<atermpp::aterm>::value_type aterm_ptr(atermpp::aterm& t)
  {
    return t.term();
  }
  
  inline
  aterm_conversion<atermpp::aterm>::value_type aterm_ptr(const atermpp::aterm& t)
  {
    return aterm_ptr(const_cast<atermpp::aterm&>(t));
  }

} // unnamed namespace

namespace atermpp
{
  //---------------------------------------------------------//
  //             aterm_make / aterm_match
  //---------------------------------------------------------//
  
  aterm make_term(const std::string& pattern)
  {
    return aterm(ATmake(const_cast<char*>(pattern.c_str())));
  }
  
#include "atermpp/aterm_make.h"    // generated by preprocessor
#include "atermpp/aterm_match.h"   // generated by preprocessor

} // namespace atermpp

#endif // ATERM_MAKE_MATCH_H
