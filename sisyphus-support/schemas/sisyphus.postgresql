/* -*- sql -*- */

create table repositories (
	id serial primary key,
	location text not null unique
);


create table platforms (
	id serial primary key,
	kernel_name varchar(32),
	kernel_release varchar(32),
	hardware_platform varchar(32),
	hardware_class varchar(32),
	processor_type varchar(32),
	unique (kernel_name, kernel_release, hardware_platform, hardware_class, processor_type)
);

create table components (
	id serial primary key,
	name text not null unique
);


create table designators (
	id serial primary key,
	repository_id integer references repositories,
	path text not null,
	unique (repository_id, path)
);


create table trees (
	id serial primary key,
	designator_id integer references designators,
	revision integer,
	changelog text,
	unique (designator_id, revision)
);


create table profiles (
	id serial primary key,
	name varchar(32) not null,
	version serial not null,
	unique (name, version)
);

create table projects (
	id serial primary key,
	name text not null unique,
	version serial not null
);


create table projects_components (
	project_id integer references projects,
	component_id integer references components,
	unique (project_id, component_id)
);

create table profiles_projects (
	profile_id integer references profiles,
	project_id integer references projects,
	unique (profile_id, project_id)
);

create table sources (
	id serial primary key,
	component_id integer references components,
	designator_id integer references designators,
	project_id integer references projects,
	unique (component_id, designator_id, project_id)
);	


create table targets (
	id serial primary key,
	profile_id integer references profiles,
	project_id integer references projects,
	source_id integer references sources,
	tree_id integer references trees,
	unique (profile_id, project_id, source_id, tree_id)
	
);

create table environments (
	id serial primary key,
	profile_id integer references profiles,
	script text not null
);	

create table hosts (
	id serial primary key,
	platform_id integer references platforms,
	name varchar(512) not null,
	unique (name, platform_id)
);


create table session (
       id serial primary key,
       host_id integer references hosts,
       time timestamp
);

create table builds (
	id serial primary key, 
	target_id integer references targets,
	session_id integer references sessions,
	created_on timestamp,
	success boolean,
	unique (target_id, session_id)
);

create table dependencies (
	build_id integer references builds,
	dependency_id integer references builds,
	unique (build_id, dependency_id)
);



create table releases (
	id serial primary key,
	build_id integer references builds,
	created_on timestamp,
	version text not null
);

	

create table scripts (
	id serial primary key,	
	name text not null unique
);

insert into scripts values (default, 'default');

create table actions (
	id serial primary key,
	position integer,
	script_id integer references profiles,
	name text,
	template text,
	unique (script_id, position, name)
);




create table results (
	id serial primary key,
	build_id integer references builds,
	action_id integer references actions,
	script text,
	stdout text,
	stderr text,
	success boolean,
	unique (build_id, action_id)
);


create table status (
	id serial primary key,
	host_id integer references hosts,
	build_id integer references builds,
	result_id integer references results,
	message text not null
);


create table profiles_scripts (
	profile_id integer references profiles,
	action_id integer references actions,
	unique (profile_id, action_id)
);




create table variables (
	id serial primary key,
	name text not null unique
);

insert into variables values (default, 'requires');
insert into variables values (default, 'assets');
insert into variables values (default, 'version');
insert into variables values (default, 'distribution');
insert into variables values (default, 'emails');

create table helpers (
	id serial primary key,
	name text not null unique
);

insert into helpers values (default, 'default');

create table profiles_helpers (
	profile_id integer references profiles,
	helper_id integer references profiles,
	unique (profile_id, helper_id)
);


create table functions (
	id serial primary key,
	position integer not null,
	helper_id integer references helpers,
	variable_id integer references variables,
	template text not null,
	unique (helper_id, variable_id)
);


insert into functions values (
	default, 
	0,  /* position */
	1,
	1,
	'cat <%=name%>.pc.in | grep Requires | sed -e s/Requires: \\(.*\\)/\\1/'
);

insert into functions values (
	default, 
	1,  /* position */
	1,
	2,
	'find <%=prefix%>'
);

insert into functions values (
	default, 
	2,  /* position */
	1,
	3,
	'cat <%=name%>.pc.in | grep Version | sed -e s/Version: \\(.*\\)/\\1/'
);


insert into functions values (
	default, 
	3,  /* position */
	1,
	4,
	'echo <%=name%>-<%=version%>.tar.gz'
);

insert into functions values (
	default, 
	4,  /* position */
	1,
	5,
	'cat <%=name%>.pc.in | grep Maintainers | sed -e s/Maintainers=\\(.*\\)/\\1/'
);

