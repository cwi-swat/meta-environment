#ifndef _CONFIGURATION_MANAGER
#define _CONFIGURATION_MANAGER

/*
#ifndef CONFIG_FILE
#define CONFIG_FILE "meta.conf"
#endif

#ifndef BUTTON_FILE
#define BUTTON_FILE "meta.buttons"
#endif

#include <user-configuration.tb>

process AddUserProperties(CM: configuration-manager) is
let
  Contents: str,
  Error: str
in
  snd-msg(io-read-file(BUTTON_FILE))
  .
  (
    rec-msg(io-file-contents(Contents?))
    . snd-do(CM, add-user-properties(Contents))
  +
    rec-msg(io-error-reading(Error?))
    . printf("AddUserProperties: %s\n", Error)
  )
endlet

  . snd-msg(io-read-file(CONFIG_FILE))
  .
  (
    rec-msg(io-file-contents(Text?))
  +
    rec-msg(io-error-reading(ErrorMessage?))
    . Text := "."
  )
  . snd-eval(CM, parse-config-file(Text))
  . rec-value(CM, directories(Directories?))
  . snd-msg(io-relative-to-absolute(Directories))
  . rec-msg(io-absolute-directories(Directories?))
  . snd-do(CM, register-user-directories(Directories))
  . AddUserProperties(CM)

    rec-msg(refresh-buttons)
    . snd-msg(CM, remove-user-properties)
    . AddUserProperties(CM)
    . snd-msg(buttons-refreshed)
  +
*/

tool configuration-manager is {
  command = "configmanager"
}

process ConfigurationManager is
let
  Action: str,
  CM: configuration-manager,
  Contents: str,
  Event: term,
  Events: list,
  Type: term,
  ModuleId: str,
  ModulePaths: list,
  Extension: str,
  Categories: term
in
  execute(configuration-manager, CM?)
  .
  (
    rec-msg(cm-add-system-properties(Contents?))
    . snd-do(CM, add-system-properties(Contents))
    . snd-msg(cm-system-properties-added)
  +
    rec-msg(cm-get-events(Type?))
    . snd-eval(CM, get-events(Type))
    . rec-value(CM, events(Events?))
    . snd-msg(cm-events(Events))
  +
    rec-msg(cm-get-module-events(Type?, ModuleId?))
    . snd-eval(CM, get-module-events(Type, ModuleId))
    . rec-value(CM, events(Events?))
    . snd-msg(cm-module-events(Events))
  +
    rec-msg(cm-get-action(Type?, Event?))
    . snd-eval(CM, get-action(Type, Event))
    . rec-value(CM, action(Action?))
    . snd-msg(cm-action(Action))
  +
    rec-msg(cm-get-module-action(Type?, Event?, ModuleId?))
    . snd-eval(CM, get-module-action(Type, Event, ModuleId))
    . rec-value(CM, action(Action?))
    . snd-msg(cm-module-action(Action))
  +
    rec-msg(get-extension-modulename(Extension?))
    . snd-eval(CM, get-extension-modulename(Extension))
    .
    (
      rec-value(CM, extension-modulename(ModuleId?))
      . snd-msg(extension-modulename(Extension, ModuleId))
    +
      rec-value(CM, no-modulename)
      . snd-msg(no-extension-modulename(Extension))
    )
  +
    rec-msg(get-modulename-extension(ModuleId?))
    . snd-eval(CM, get-modulename-extension(ModuleId))
    .
    (
      rec-value(CM, modulename-extension(Extension?))
      . snd-msg(modulename-extension(ModuleId, Extension))
    +
      rec-value(CM, no-extension)
      . snd-msg(no-modulename-extension(ModuleId))
    )
  +
    rec-msg(get-module-paths)
    . snd-eval(CM, get-module-paths)
    . rec-value(CM, module-paths(ModulePaths?))
    . snd-msg(module-paths(ModulePaths))
  +
    rec-msg(get-text-categories)
    . snd-eval(CM, get-text-categories)
    . rec-value(CM, text-categories(Categories?))
    . snd-msg(text-categories(Categories))
  )
  *
  delta
endlet

toolbus(ConfigurationManager)

#endif
