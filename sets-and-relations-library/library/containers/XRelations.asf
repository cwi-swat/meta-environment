equations

[identity-nil]
	identity({}) = {}

[identity-cons]
	identity({x, x*}) = insert(<x,x>, identity({x*}))


equations

[total-top]
	total(xset) = product(xset, xset)

equations

[complement-top]
	complement(xrel) = difference(total(carrier(xrel)), xrel)


equations

[reflexive-closure-top]
	reflexive-closure(xrel) = union(xrel, identity(carrier(xrel)))

equations

[symmetric-closure-top]
	symmetric-closure(xrel) = union(xrel, inverse(xrel))


equations

[transitive-closure-top]
	transitive-closure(xrel) = least-fixpoint-union-compose(xrel, xrel)


[least-fixpoint-union-compose-base]
	xrel'' := union-compose(xrel, xrel'),
	equal(xrel, xrel'') == true
	===
	least-fixpoint-union-compose(xrel, xrel') = xrel

[default-least-fixpoint-union-compose-rest]
	least-fixpoint-union-compose(xrel, xrel') =
		least-fixpoint-union-compose(union-compose(xrel, xrel'), xrel')


[union-compose-top]
	union-compose(xrel, xrel') = union(xrel, compose(xrel, xrel'))

equations

[transitive-reflexive-closure-top]
	transitive-reflexive-closure(xrel) = union(reflexive-closure(xrel), transitive-closure(xrel))


equations

[top-top]
	top(xrel) = difference(domain(xrel), range(xrel))

equations

[bottom-top]
	bottom(xrel) = difference(range(xrel), domain(xrel))


equations

[carrier-top]
	carrier(xrel) = union(domain(xrel), range(xrel))


equations

[carrier-restriction-nil]
	carrier-restriction({}, xset) = {}

[carrier-restriction-cons]
	element-of(x, xset) == true,
	element-of(x', xset) == true
	===
	carrier-restriction({<x, x'>, xx*}, xset) = 
		insert(<x, x'>, carrier-restriction({xx*}, xset))

[default-carrier-restriction-cons]
	carrier-restriction({<x, x'>, xx*}, xset) =
		carrier-restriction({xx*}, xset)


equations

[carrier-exclusion-nil]
	carrier-exclusion({}, xset) = {}

[carrier-exclusion-cons-1]
	element-of(x, xset) == true
	===
	carrier-exclusion({<x, x'>, xx*}, xset) = 
		carrier-exclusion({xx*}, xset)

[carrier-exclusion-cons-2]
	element-of(x', xset) == true
	===
	carrier-exclusion({<x, x'>, xx*}, xset) = 
		carrier-exclusion({xx*}, xset)


[default-carrier-exclusion-cons]
	carrier-exclusion({<x, x'>, xx*}, xset) =
		insert(<x, x'>, carrier-exclusion({xx*}, xset))



equations

[default-reach-restriction-top]
	reach-restriction(xrel, xset1, xset2) = 
		image(transitive-closure(carrier-restriction(xrel, xset2)), xset1)

equations

[reach-exclusion-top]
	reach-exclusion(xrel, xset1, xset2) = 
		image(transitive-closure(carrier-exclusion(xrel, xset2)), xset1)


tests

[identity-empty]
	identity({}) == {}

[identity-single]
	identity({1}) == {<1,1>}

[identity-many]
	equal(identity({1, 2}), {<1,1>, <2,2>}) == true


tests

[total-empty]
	total({}) == {}

[total-single]
	total({1}) == {<1, 1>}

[total-many]
	equal(total({1, 2}), {<1, 2>, <1, 1>, <2, 2>, <2, 1>}) == true


tests

[complement-empty]
	complement({}) == {}

[complement-single]
	equal(complement({<1, 2>}), {<2, 1>, <1, 1>, <2, 2>}) == true

[complement-many]
	equal(complement({<1, 2>, <2, 3>}), {<1, 1>, <2, 1>, <3, 2>, <2, 2>, <3, 1>, <1, 3>, <3, 3>}) == true


tests

[reflexive-closure-empty]
	reflexive-closure({}) == {}

[reflexive-closure-single]
	equal(reflexive-closure({<1, 2>}), {<1, 2>, <1, 1>, <2, 2>}) == true

[reflexive-closure-many]
	equal(reflexive-closure({<1, 2>, <3, 4>}), {<1, 2>, <3, 4>, <1, 1>, <2, 2>, <3, 3>, <4, 4>}) == true

tests

[symmetric-closure-empty]
	symmetric-closure({}) == {}

[symmetric-closure-single]
	equal(symmetric-closure({<1, 2>}), {<1, 2>, <2, 1>}) == true

[symmetric-closure-many]
	equal(symmetric-closure({<1, 2>, <2, 3>}), {<1, 2>, <2, 1>, <2, 3>, <3, 2>}) == true

[symmetric-closure-duplicates]
	equal(symmetric-closure({<1, 2>, <2, 1>}), {<1, 2>, <2, 1>}) == true


tests

[transitive-closure-empty]
	transitive-closure({}) == {}

[transitive-closure-single]
	transitive-closure({<1, 2>}) == {<1, 2>}

[transitive-closure-many-disconnected]
	equal(transitive-closure({<1, 2>, <3, 4>}), {<1, 2>, <3, 4>}) == true

[transitive-closure-many-connected]
	equal(transitive-closure({<1, 2>, <2, 3>}), {<1, 2>, <2, 3>, <1, 3>}) == true

[transitive-closure-bigger]
	equal(transitive-closure({<1, 2>, <2, 3>, <3, 4>}), {<1, 2>, <2, 3>, <3, 4>, <1, 3>, <1, 4>, <2, 4>}) == true

[transitive-closure-cyclic]
	equal(transitive-closure({<1, 2>, <2, 1>, <2, 3>}), {<2, 2>, <1, 3>, <1, 1>, <2, 3>, <2, 1>, <1, 2>}) == true

tests

[transitive-reflexive-closure-empty]
	transitive-reflexive-closure({}) == {}

[transitive-reflexive-closure-single]
	equal(transitive-reflexive-closure({<1, 2>}), {<1, 2>, <1, 1>, <2, 2>}) == true

[transitive-reflexive-closure-many-disconnected]
	equal(transitive-reflexive-closure({<1, 2>, <3, 4>}), {<1, 2>, <3, 4>, <1, 1>, <2, 2>, <3, 3>, <4, 4>}) == true

[transitive-reflexive-closure-many-connected]
	equal(transitive-reflexive-closure({<1, 2>, <2, 3>}), {<1, 2>, <2, 3>, <1, 3>, <1, 1>, <2, 2>, <3, 3>}) == true

[transitive-reflexive-closure-bigger]
	equal(transitive-reflexive-closure({<1, 2>, <2, 3>, <3, 4>}), {<1, 2>, <2, 3>, <3, 4>, <1, 3>, <1, 4>, <2, 4>, <1, 1>, <2, 2>, <3, 3>, <4, 4>}) == true

[transitive-reflexive-closure-cyclic]
	equal(transitive-reflexive-closure({<1, 2>, <2, 1>, <2, 3>}), {<2, 2>, <1, 3>, <1, 1>, <2, 3>, <2, 1>, <1, 2>, <3, 3>}) == true


tests

[top-empty]
	top({}) == {}

[top-single]
	top({<1, 2>}) == {1}

[top-many-single]
	top({<1, 2>, <2, 3>}) == {1}

[top-many-many]
	equal(top({<1, 2>, <2, 3>, <4, 3>}), {1, 4}) == true

[top-cyclic]
	top({<1, 2>, <2, 3>, <3, 1>}) == {}


tests

[bottom-empty]
	bottom({}) == {}

[bottom-single]
	bottom({<1, 2>}) == {2}

[bottom-many-single]
	bottom({<1, 2>, <2, 3>}) == {3}

[bottom-many-many]
	equal(bottom({<1, 2>, <2, 3>, <2, 4>}), {3, 4}) == true

[bottom-cyclic]
	bottom({<1, 2>, <2, 3>, <3, 1>}) == {}


tests

[carrier-empty]
	carrier({}) == {}

[carrier-single-different]
	equal(carrier({<1, 2>}), {1, 2}) == true

[carrier-single-equal]
	carrier({<1, 1>}) == {1}

[carrier-many]
	equal(carrier({<1, 2>, <3, 4>}), {1, 2, 3, 4}) == true

[carrier-many-overlap]
	equal(carrier({<1, 2>, <2, 3>}), {1, 2, 3}) == true

tests

[carrier-restriction-empty-empty]
	carrier-restriction({}, {}) == {}

[carrier-restriction-nonempty-empty]
	carrier-restriction({<1, 2>, <3, 4>}, {}) == {}

[carrier-restriction-nonempty-nonempty]
	carrier-restriction({<1, 2>, <3, 4>}, {1, 2}) == {<1, 2>}

tests

[carrier-exclusion-empty-empty]
	carrier-exclusion({}, {}) == {}

[carrier-exclusion-nonempty-empty]
	equal(carrier-exclusion({<1, 2>, <3, 4>}, {}), {<1, 2>, <3, 4>}) == true

[carrier-exclusion-nonempty-nonempty]
	carrier-exclusion({<1, 2>, <3, 4>}, {1, 2}) == {<3, 4>}

[carrier-exclusion-one-included]
	carrier-exclusion({<1, 2>, <3, 4>}, {2}) == {<3, 4>}

[carrier-exclusion-tutorial]
	equal(carrier-exclusion({<1, 5>, <2, 6>, <3, 7>}, {5, 1, 6}), {<3, 7>}) == true


tests

[reach-restriction-tutorial]
	equal(reach-restriction({<1, 2>, <1, 3>, <2, 4>, <3, 4>}, {1}, {1, 2, 3}), {2, 3}) == true

[reach-restriction-1]
	reach-restriction({}, {}, {}) == {}

[reach-restriction-2]
	reach-restriction({<1,2>, <1,3>, <2,4>, <3,4>}, {1}, {}) == {}

[reach-restriction-3]
	reach-restriction({<1,2>, <1,3>, <2,4>, <3,4>}, {1}, {1, 2}) == {2}

[reach-restriction-4]
	equal(reach-restriction({<1,2>, <1,3>, <2,4>, <3,4>}, {1}, {1, 2, 3}), {2, 3}) == true

[reach-restriction-5]
	equal(reach-restriction({<1,2>, <1,3>, <2,4>, <3,4>}, {1}, {1, 2, 4}), {2, 4}) == true


[reach-restriction-tutorial]
	equal(reach-restriction({<1, 2>, <1, 3>, <2, 4>, <3, 4>}, {1}, {1, 2, 3}), {2, 3}) == true


tests

[reach-exclusion-tutorial]
	equal(reach-exclusion({<1, 2>, <1, 3>, <2, 4>, <3, 4>}, {1}, {2}), {3, 4}) == true


