equations

[empty-set-top]
	empty-set = {}

equations

[insert-nil]
	insert(x, {}) = {x}

[insert-cons-1]
	equal(x, x') == true
	===
	insert(x, {x', x*}) = {x', x*}

[insert-cons-2]
	equal(x, x') == false,
	{x*'} := insert(x, {x*})
	===
	insert(x, {x', x*}) = {x', x*'}

equations

[delete-nil]
	delete(x, {}) = {}

[delete-cons-1]
	equal(x, x') == true
	===
	delete(x, {x', x*}) = {x*}

[delete-cons-2]
	equal(x, x') == false,
	{x*'} := delete(x, {x*})
	===
	delete(x, {x', x*}) = {x', x*'}

equations

[element-of-nil]
	element-of(x, {}) = false

[element-of-cons-1]
	equal(x, x') == true
	===
	element-of(x, {x', x*}) = true

[element-of-cons-1]
	equal(x, x') == false
	===
	element-of(x, {x', x*}) = element-of(x, {x*})

equations

[subset-nil]
	subset({}, set) = true

[subset-cons]
	element-of(x, set) == true
	===
	subset({x, x*}, set) = subset({x*}, set)

[default-subset-rest]
	subset(set, set') = false

equations

[superset-top]
	superset(set, set') = subset(set', set)

equations

[equal-sets]
	set := {x*},
	set' := {x*'}
	===
	equal({x*},{x*'}) = subset(set, set') & subset(set', set)

equations

[strict-subsets]
	strict-subset(set, set') = subset(set, set') & not(equal(set, set'))

equations

[strict-supersets]
	strict-superset(set, set') = superset(set, set') & not(equal(set, set'))

equations

[union-empty-1]
	union(set, {}) = set

[union-empty-2]
	union({}, set) = set

[default-union-many-3]
	union({x, x*}, set) = insert(x, union({x*}, set))


equations

[difference-empty-1]
	difference(set, {}) = set

[difference-empty-2]
	difference({}, set) = {}

[default-difference-many-3]
	difference(set, {x, x*}) = delete(x, difference(set, {x*}))

equations

[intersection-empty-1]
	intersection(set, {}) = {}

[intersection-empty-2]
	intersection({}, set) = {}

[intersection-many-3]
	element-of(x, set) == true
	===
	intersection({x, x*}, set) = insert(x, intersection({x*}, set))

[intersection-many-4]
	element-of(x, set) == false
	===
	intersection({x, x*}, set) = intersection({x*}, set)

equations

[unique-nil]
	unique({}) = {}

[unique-cons-1]
	element-of(x, {x*}) == true
	===
	unique({x, x*}) = unique({x*})

[unique-cons-2]
	element-of(x, {x*}) == false,
	{x*'} := unique({x*})
	===
	unique({x, x*}) = {x, x*'}

equations

[size-nil]
	size({}) = 0

[size-cons]
	size({x, x*}) = 1 + size({x*})


tests

[insert-empty]
	insert(1, {}) == {1}

[insert-many]
	insert(1, {2,3,4}) == {2,3,4,1}

[insert-duplicate]
	insert(1, {1,2,3}) == {1,2,3}

tests

[delete-from-empty]
	delete(1, {}) == {}

[delete-from-single-containing]
	delete(1, {1}) == {}

[delete-from-single-non-containing]
	delete(1, {2}) == {2}

[delete-from-many-containing]
	delete(1, {2, 3, 1}) == {2, 3}

[delete-from-many-non-containing]
	delete(1, {2, 3, 4}) == {2, 3, 4}

tests

[element-of-empty]
	element-of(1, {}) == false

[element-of-non-empty-false]
	element-of(1, {2,3,4}) == false

[element-of-singleton]
	element-of(1, {1}) == true

[element-of-many]
	element-of(1, {3,2,1}) == true

tests

[union-empty-empty]
	union({}, {}) == {}

[union-empty-non-empty]
	equal(union({}, {1,2,3}), {1,2,3}) == true

[union-non-empty-empty]
	equal(union({1,2,3}, {}), {1,2,3}) == true

[union-overlap]
	equal(union({1,2,3}, {2,3,4}), {1,2,3,4}) == true

tests

[difference-empty-empty]
	difference({}, {}) == {}

[difference-empty-some]
	difference({}, {1,2,3}) == {}

[difference-some-empty]
	equal(difference({1,2,3}, {}), {1,2,3}) == true

[difference-overlapping]
	equal(difference({1,2,3}, {3,4,5}), {1,2}) == true

[difference-disjoint]
	equal(difference({1,2,3}, {4,5,6}), {1,2,3}) == true

[diffrenece-same]
	difference({1,2,3}, {3,2,1}) == {}

tests

[intersection-empty-empty]
	intersection({}, {}) == {}

[intersection-some-empty]
	intersection({1,2,3}, {}) == {}

[intersection-empty-some]
	intersection({}, {1,2,3}) == {}

[intersection-overlap]
	intersection({1,2,3}, {3,4,5}) == {3}

[intersection-same]
	equal(intersection({1,2,3}, {3,2,1}), {1,2,3}) == true


tests

[unique-empty]
	unique({}) == {}

[unique-duplicates-single]
	equal(unique({1,2,3,3}), {1,2,3}) == true

[unique-duplicates-many]
	equal(unique({2,1,2,2,1,3,3}), {1,2,3}) == true