#! __PERL__ -w
#
# Take the output of dot, and turn it into a valid aterm
# complying to Graph.adt
#
my $first_node = 1;
my $first_edge = 1;
my $width = 0;
my $height = 0;

# Go to 'slurp' mode
undef $/;

$_ = <STDIN>;

s/\\\n//g;

#open OUTPUT,">/tmp/dot/dot-$$.out";
#print OUTPUT $_;
#close OUTPUT;

/^digraph\s\w+\s{/m || die("not a valid graph");
$_ = $';
print "graph([\n";

do {
  # Not at end of file yet
  if (/^\s*graph\s*\[bb=\s*"(\d+),(\d+),(\d+),(\d+)"\];/m) {
    # Ignore bounding box info
    $_ = $';
  } elsif (/^\s*node\s[^;]+;/m) {
    # Ignore node info
    $_ = $';
  } elsif (/^\s*"!([^"]+)"\s\[([^\]]*)\];/m) {
    # Node
    $_ = $';
    if ($first_node) {
      $first_node = 0;
    } else {
      print ",\n";
    }
    print "node(\"$1\",";
    my @elems = split /,\s/,$2;
    my $first_elem = 1;
    $shape = "box";
    foreach my $elem (@elems) {
      @pair = split /=/,$elem;
      if ($pair[0] eq "pos") {
	$pair[1] =~ /^"(\d+),(\d+)"$/ or die "not a pos spec: $pair[1]";
	$x = $1;
	$y = $2;
      } elsif ($pair[0] =~ /^(width|height)$/) {
	$type = $1;
	$pair[1] =~ /^"(\d+.\d+)"$/ or die "not a $type spec: $pair[1]";
	$value = int($1*72+0.5);
	if ($pair[0] =~ /^width$/) {
	  $width = $value;
	} else {
	  $height = $value;
	}
      } elsif ($pair[0] eq "shape") {
        $shape = $pair[1];
      }
    }
    print "$shape,$x,$y,$width,$height)";
  } elsif (/^\s*"!([^"]+)"\s->\s"!([^"]+)"\s\[pos="([^"]*)"\];/m) {
    # Edge
    $_ = $';
    my $from = $1;
    my $to   = $2;
    @points = split /\s/,$3;

    $head = shift @points;
    if ($head =~ s/^e,//) {
      push @points, $head;
    } elsif ($head =~ s/^s,//) {
      unshift @points, $head;
    } else {
      unshift @points, $head;
    }
 
    @pointlist = qw//;
    foreach my $point (@points) {
      $point =~ /^(\d+),(\d+)$/ || die "malformed point: $point";
      push @pointlist,"point($1,$2)";
    }
    $points = join ",",@pointlist;
    $points =~ s/,$//;
    if ($first_edge) {
      print "],[";
      $first_edge = 0;
    } else {
      print ",\n";
    }
    print "edge(\"$from\",\"$to\",[$points])";
  } else {
    die "strange construction: $_\n";
  }
} until (/^\s*}\s*$/);

if ($first_edge) {
  print "],[";
  $first_edge = 0;
}

print "])\n";
