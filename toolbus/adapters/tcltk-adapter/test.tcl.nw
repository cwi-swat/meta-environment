%%
%%    ToolBus -- The ToolBus Application Architecture
%%    Copyright (C) 1998-2000  Stichting Mathematisch Centrum, Amsterdam,
%%                             The  Netherlands.
%%
%%    This program is free software; you can redistribute it and/or modify
%%    it under the terms of the GNU General Public License as published by
%%    the Free Software Foundation; either version 2 of the License, or
%%    (at your option) any later version.
%%
%%    This program is distributed in the hope that it will be useful,
%%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%%    GNU General Public License for more details.
%%
%%    You should have received a copy of the GNU General Public License
%%    along with this program; if not, write to the Free Software
%%    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
%%

This file is used to test the {\tt tcltk-adapter}.

<<test.tcl*>>=
<<input>>
<<input2>>
<<activate>>
<<generate-error>>
<<rec-ack-event>>
<<rec-terminate>>

button .error -text "Error" -command "generate-error"
button .activate -text "Activate" -command "activate"
pack .error -side top -fill x
pack .activate -side top -fill x
@


The procedure input waits for input and then sends some
weird output.

<<input>>=
proc input { arg } {
  puts stderr "input: '$arg'"
#  TBsend "snd-event(output([TBstring $arg]))"
  set Arg [TBstring "a\[b\]c\""]
  TBsend "snd-event(output($Arg))"
}
@

The procedure input2 waits for input and does some processing
on it.
<<input2>>=
proc input2 { arg } {
  puts stderr "input2: '$arg'"
  foreach el $arg {
    puts stderr "el: $el"
    if { [llength $el] > 1 } {
      foreach subel $el {
        puts stderr "subel: $subel"
      }
    }
  }
}
@

Event acknowledgements are just printed.
<<rec-ack-event>>=
proc rec-ack-event { event } {
  puts stderr "ack: $event"
}
@

<<rec-terminate>>=
proc rec-terminate { arg } {
  exit
}
@

Generate an error (somebody forgot to put in a dollar sign).
<<generate-error>>=
proc generate-error { } {
  puts stderr "Generating an error!"
  set a [expr 4+abc]
  puts stderr "huh?, a=$a"
}
@

Send an activate event in response to the Activate button
being pressed.
<<activate>>=
proc activate { } {
  puts stderr "Activate:"
  TBsend "snd-event(activate)"
}
@
