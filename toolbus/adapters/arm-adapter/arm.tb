#line 27 "arm.tb.nw"
tool arm(H:str) is { 
	host = "H"
	command = "arm-adapter"
}

tool armcmd is { }
#line 71 "arm.tb.nw"
process CONNECT is
let
  D            : armcmd,
  Pid          : int
in
  ( rec-connect(D?) .
    create(ARMCMD(D), Pid?)
  ) * delta
endlet
#line 40 "arm.tb.nw"
process REGISTER is
let
  Arms : list, Tmp : list,
  Name : str,
  Host : term
in
  Arms := [] .
  ( rec-msg(new-interpreter(Name?, Host?)) .
    Arms := join(Arms, [[Name, Host]])
    +
    rec-msg(get-interpreters) .
    snd-msg(interpreters(Arms))
    +
    rec-msg(is-present(Name?)) .
    Host := get(Arms, Name) .
    if equal(Host, []) then
      snd-msg(not-present(Name))
    else
      snd-msg(present(Name))
    fi
  ) * delta
endlet
#line 90 "arm.tb.nw"
process ARM(A:arm, Name:str) is
let
  Files  : list, Dirs : list,
  T      : term, Success : term,
  T2     : term, Mappings : list
in
  subscribe(query) .
  ( rec-msg(Name, clear-arm) .
    snd-do(A, clear-arm)
    +
    rec-msg(Name, load-mappings(Mappings?)) .
    snd-do(A, load-mappings(Mappings))
    +
    rec-msg(Name, load-arm-files(Files?, Dirs?)) .
    snd-eval(A, load-arm(Files, Dirs)) .
    rec-value(A, load-arm(Files, Dirs, Success?)) .
    snd-msg(Name, Success)
    +
    rec-msg(Name, link-arm) .
    snd-do(A, link-arm)
    +
    rec-msg(Name, reduce(T?)) .
    snd-eval(A, reduce(T)) .
    rec-value(A, reduct(T?)) .
    snd-msg(Name, reduct(T))
    +
    rec-msg(Name, match(T?, T2?)) .
    snd-eval(A, match(T, T2)) .
    rec-value(A, match(Success?)) .
    snd-msg(Name, match(Success))
    +
    rec-msg(Name, get-value(T?)) .
    snd-eval(A, get-value(T)) .
    rec-value(A, value(T2?)) .
    snd-msg(Name, value(T2))
    +
    rec-note(query) .
    printf("Arm interpreter %s (%t)\n", Name, A)
  ) * rec-disconnect(A)
endlet
#line 139 "arm.tb.nw"
process ARMCMD(Do:armcmd) is
let
  Name	: str,  Host   : str,  Msg   : str,
  A	: arm,
  Mappings : list, Files : list, Dirs   : list,
  Term  : term, Reduct : term,
  P	: int,
  T     : term, T1     : term, T2 : term,
  Interpreters : list,
  Success : term
in
  ( 
#line 179 "arm.tb.nw"
  rec-event(Do, clear-arm(Name?)) .
  snd-msg(Name, clear-arm) .
  snd-ack-event(Do, clear-arm(Name))
#line 151 "arm.tb.nw"
    +
    
#line 190 "arm.tb.nw"
  rec-event(Do, create-interpreter(Name?, Host?)) .
  execute(arm(Host), A?) .
  create(ARM(A, Name), P?) .
  snd-msg(new-interpreter(Name, Host)) .
  snd-ack-event(Do, create-interpreter(Name, Host))
#line 153 "arm.tb.nw"
    +
    
#line 201 "arm.tb.nw"
  rec-event(Do, load-mappings(Name?, Mappings?)) .
  snd-msg(Name, load-mappings(Mappings)) .
  snd-ack-event(Do, load-mappings(Name, Mappings))
#line 155 "arm.tb.nw"
    +
    
#line 212 "arm.tb.nw"
  rec-event(Do, load-arm-files(Name?, Files?, Dirs?)) .
  snd-msg(Name, load-arm-files(Files, Dirs)) .
  ( rec-msg(Name, ok)
    +
    rec-msg(Name, failure(Msg?)) .
    snd-do(Do, error(Msg))
  ) .
  snd-ack-event(Do, load-arm-files(Name, Files, Dirs))
#line 157 "arm.tb.nw"
    +
    
#line 226 "arm.tb.nw"
  rec-event(Do, link-arm(Name?)) .
  snd-msg(Name, link-arm) .
  snd-ack-event(Do, link-arm(Name))
#line 159 "arm.tb.nw"
    +
    
#line 237 "arm.tb.nw"
  rec-event(Do, reduce(Name?, Term?)) .
  snd-msg(Name, reduce(Term)) .
  rec-msg(Name, reduct(Reduct?)) .
  snd-do(Do, reduction-result(Reduct)) .
  snd-ack-event(Do, reduce(Name, Term))
#line 161 "arm.tb.nw"
    +
    
#line 248 "arm.tb.nw"
  rec-event(Do, is-present(Name?)) .
  snd-msg(is-present(Name)) .
  ( rec-msg(present(Name)) .
    snd-ack-event(Do, is-present(Name, present))
    +
    rec-msg(not-present(Name)) .
    snd-ack-event(Do, is-present(Name, not-present))
  )
#line 163 "arm.tb.nw"
    +
    
#line 264 "arm.tb.nw"
  rec-event(Do, query) .
  snd-msg(get-interpreters) .
  rec-msg(interpreters(Interpreters?)) .
  snd-ack-event(Do, query(Interpreters))
#line 165 "arm.tb.nw"
    +
    
#line 286 "arm.tb.nw"
  rec-event(Do, match(Name?, T1?, T2?)) .
  snd-msg(Name, match(T1, T2)) .
  rec-msg(Name, match(Success?)) .
  snd-ack-event(Do, match(Name, T1, T2, Success))
#line 167 "arm.tb.nw"
    +
    
#line 296 "arm.tb.nw"
  rec-event(Do, get-value(Name?, T?)) .
  snd-msg(Name, get-value(T)) .
  rec-msg(Name, value(T2?)) .
  snd-ack-event(Do, get-value(Name, T, T2))
#line 169 "arm.tb.nw"
    +
    
#line 276 "arm.tb.nw"
  rec-event(Do, do-shutdown) .
  snd-ack-event(Do, do-shutdown) .
  shutdown("bye!")
#line 171 "arm.tb.nw"
  ) *
  rec-disconnect(Do)
endlet

#line 11 "arm.tb.nw"
toolbus(CONNECT, REGISTER)
