%%
%%%%  BKE process 
%%

process BKE is
  let   Tid    : swipl,  
	Uid1   : player,   
	Uid2   : player, 
	Answer : list,   
	I      : int,
	J      : int,
	K      : int,
	Success : bool, 
        ScoreUser1  : int,
	ScoreUser2 : int, 
	Pos   : int,    
	Turn : int,    
	State   : list, 
	CleanState : list ,
	Name1 : str, 
	Name2 : str
  in
  execute(swipl,Tid?).   %% execute the prolog adapter.

    ConnectUser(Uid1?).snd-do(Uid1, disable-all).snd-do(Uid1,set-type(1)).
    ConnectUser(Uid2?).snd-do(Uid2, disable-all).snd-do(Uid2,set-type(2)).

    snd-eval(Uid1, get-name).rec-value(Uid1, Name1?).
    snd-eval(Uid2, get-name).rec-value(Uid2, Name2?).

    ScoreUser1 := 0.  ScoreUser2 := 0.

    snd-do(Uid1, score-board(Name1, Name2, ScoreUser1, ScoreUser2)).
    snd-do(Uid2, score-board(Name1, Name2, ScoreUser1, ScoreUser2)).

    Turn := 0.snd-do(Uid1, enable-all).

    State := [empty,empty,empty,empty,empty,empty,empty,empty,empty].  
    CleanState := State.

     snd-do(Uid1, light(green)).snd-do(Uid2, light(red)). 

    (
     if equal(Turn, 0) then 
       rec-msg(Uid1, changed(Pos?)).
       State:= replace(State,Pos,cross). 
       snd-msg(Uid2,update(Pos)). 
       snd-eval(Tid, query(won(State,[pl-var,pl-var,pl-var]))) .
       (
        rec-value(Tid, result(true ,won(State, Answer?))). Success := true.
        I := index(Answer,1).
        J := index(Answer,2).
        K := index(Answer,3).
        snd-do(Uid1,disable-all). snd-do(Uid2,disable-all).
	ScoreUser1 := add(ScoreUser1,1).
	snd-do(Uid1, winning-line(I,J,K)).snd-do(Uid2, winning-line(I,J,K)).
        snd-do(Uid1, score-board(Name1, Name2, ScoreUser1, ScoreUser2)).
        snd-do(Uid2, score-board(Name1, Name2, ScoreUser1, ScoreUser2))
       +
        rec-value(Tid, result(false,won(State, Answer?))).
        snd-do(Uid1, light(red)).snd-do(Uid2, light(green))
       ).
       Turn := sub(1, Turn)
     fi
    +
     if equal(Turn, 1) then 
        rec-msg(Uid2,changed(Pos?)).
        State:= replace(State,Pos,circle). 
        snd-msg(Uid1,update(Pos)). 
        snd-eval(Tid, query(won(State,[pl-var,pl-var,pl-var]))) .
        (
         rec-value(Tid, result(true ,won(State, Answer?))).Success := true.
          I := index(Answer,1).
          J := index(Answer,2).
          K := index(Answer,3).
          snd-do(Uid1,disable-all). snd-do(Uid2,disable-all).
	  ScoreUser2 := add(ScoreUser2,1).
          snd-do(Uid1, winning-line(I,J,K)).snd-do(Uid2, winning-line(I,J,K)).
          snd-do(Uid1, score-board(Name1, Name2, ScoreUser1, ScoreUser2)).
          snd-do(Uid2, score-board(Name1, Name2, ScoreUser1, ScoreUser2))
	+
         rec-value(Tid, result(false,won(State, Answer?))).
         snd-do(Uid2, light(red)).snd-do(Uid1, light(green)) 
        ).
        Turn := sub(1, Turn) 
      fi
     +
      rec-msg(Uid1, new-game).State:=CleanState.Turn:=0.
      snd-do(Uid1, initialize).snd-do(Uid2, initialize).
      snd-do(Uid1, enable-all).snd-do(Uid2, disable-all).
      snd-do(Uid2, light(red)).snd-do(Uid1, light(green)) 
     +
      rec-msg(Uid2, new-game).State:=CleanState.Turn:=1.
      snd-do(Uid1, initialize).snd-do(Uid2, initialize).
      snd-do(Uid2, enable-all).snd-do(Uid1, disable-all).
      snd-do(Uid1, light(red)).snd-do(Uid2, light(green)) 
     +
      rec-msg(Uid1, over).shutdown("User1 says bye!") 
     +
      rec-msg(Uid2, over).shutdown("User2 says bye!") 
    )*delta
  endlet

tool swipl is { command = "./swipl-adapter -binary ttt.pl.o"}

%% 
%%%% Process creation for the user process.
%%

process ConnectUser(Uid : player?) is 
  let Pid : int 
  in
    rec-connect(Uid?).
    create(Player(Uid), Pid?)
  endlet

%%
%%%% The player process. 
%%

process Player(Uid : player) is 
 let Pos : int 
 in
  ( 
   rec-msg(Uid,update(Pos?)).snd-do(Uid, update-pos(Pos))
  +
   rec-disconnect(Uid). snd-msg(Uid, over)
  +
   rec-event(Uid, new). snd-ack-event(Uid, new). snd-msg(Uid, new-game) 
  +
   rec-event(Uid, coord(Pos?)).snd-ack-event(Uid, coord(Pos)).
   snd-msg(Uid, changed(Pos)) 
  )*delta
 endlet

tool player(Name : str) is
    { command = "wish-adapter -script player.tcl -script-args -name Name" }

toolbus(BKE)
