
process CONNECT is
let
  B : bidder,
  P : int,
  Bidders : list,
  Name : str
in
  Bidders := [] .
  ( rec-connect(B?) .
    snd-eval(B, my-name) .
    rec-value(B, Name?) .
    Bidders := join(Bidders, Name) .
    snd-note(bidders(Bidders)) .
    create(BIDDER(B, Name, Bidders), P?)
    +
    rec-msg(disconnected(Name)) .
    Bidders := diff(Bidders, [Name]) .
    snd-note(bidders(Bidders))
  ) * delta
endlet

process BIDDER(B:bidder, Name:str, Bidders:list) is
let
  Item : str,
  Amount : int,
  BidderList : list,
  Time : int
in
  subscribe(bidders(<list>)) .
  subscribe(new-item(<str>,<int>)) .
  subscribe(any-higher-bid(<int>)) .
  subscribe(bid(<str>,<int>)) .
  subscribe(sold(<str>,<int>)) .
  snd-do(B, bidders(Bidders)) .
  ( rec-note(bidders(BidderList?)) .
    snd-do(B, bidders(BidderList))
    +
    rec-note(new-item(Item?, Amount?)) .
    snd-do(B, new-item(Item, Amount))
    +
    rec-note(any-higher-bid(Time?)) .
    snd-do(B, any-higher-bid(Time))
    +
    rec-note(bid(Amount?)) .
    snd-do(B, bid(Amount))
    +
    rec-note(sold(Amount?)) .
    snd-do(B, sold(Amount))
    +
    rec-event(B, new-item(Item?, Amount?)) .
    snd-msg(new-item(Item, Amount)) .
    snd-ack-event(B, new-item(Item, Amount))
    +
    rec-event(B, bid(Item?, Amount?)) .
    snd-msg(bid(Item, Amount)) .
    ( rec-msg(bid-accepted) .
      snd-do(B, bid-accepted)
      +
      rec-msg(bid-rejected) .
      snd-do(B, bid-rejected)
    ) .
    snd-ack-event(B, bid(Item, Amount))
  ) * rec-disconnect(B) .
  snd-msg(disconnected(Name))
endlet

process SALES is
let
  Item : str,
  Amount : int,
  NewAmount : int,
  Stack : list,
  Pair : list,
  Final : bool,
  Sold : bool
in
  Stack := [] .
  ( if not-equal(Stack, []) then
      Final := false .
      Sold := false .
      Pair := first(Stack) .
      Stack := next(Stack) .
      Item := first(Pair) .
      Amount := first(next(Pair)) .
      snd-note(new-item(Item, Amount)) .
      ( if not(Sold) then
          rec-msg(bid(Item, NewAmount?)) .
          if greater(NewAmount, Amount) then
	    Amount := NewAmount .
            snd-msg(bid-accepted) .
            snd-note(bid(Amount)) .
            Final := false
	  else
            snd-msg(bid-rejected)
          fi
          +
	  if not(Final) then
            snd-note(any-higher-bid(10)) delay(sec(20)) .
	    Final := true
          fi
	  +
          if Final then
            snd-note(item-sold(Amount)) .
            Sold := true
          fi
        fi
        +
        rec-msg(new-item(Item?, Amount?)) .
        Stack := join(Stack, [[Item, Amount]])
      ) * if Sold then tau fi
    fi
    +
    rec-msg(new-item(Item?, Amount?)) .
    Stack := join(Stack, [[Item, Amount]])
    +
    rec-msg(bid(Item?, NewAmount?)) .
    snd-msg(bid-rejected)
  ) * delta
endlet

tool bidder(Name : str) is
  { command = "java-adapter -class BidderTool -java-args Name" }

toolbus(CONNECT, SALES)
