process TOP is
  let Uid : ui, Sid : syn-edit, Eid : int, Filename : str
  in
    execute(ui, Uid?) .
    execute(syn-edit, Sid?) .
    ( rec-event(Uid, edit(Filename?)) . 
      create(ED(Uid, Sid, Filename), Eid?) . snd-ack-event(Uid, edit(Filename))
    + rec-event(Uid, close(Filename?)) .
      snd-msg(editor(Filename), close) . snd-ack-event(Uid, close(Filename))
    ) * rec-event(Uid, quit) . snd-note(quit) . snd-ack-event(Uid, quit) . shutdown("End of editing")
  endlet

process ED-STARTUP (Uid : ui, Sid : syn-edit, Filename : str) is
  let Msg : str
  in
    snd-eval(Sid, edit(Filename)) .
    ( rec-value(Sid, error(Msg?)) .
      snd-do(Uid, displayError(Msg)) . delta
    + rec-value(Sid, ok)
    ) .
    snd-eval(Uid, mk-text-editor(Filename)) .
    ( rec-value(Uid, error(Msg?)) .
      snd-do(Uid, displayError(Msg)) . delta
    + rec-value(Uid, ok)
    )
  endlet

process ED-COMMAND (Uid : ui, Sid : syn-edit, Filename : str) is
  let X : int, Y : int, Bgn : str, End : str
  in
    ( rec-event(Uid, Filename, tree-up) . snd-eval(Sid, tree-up(Filename))
    + rec-event(Uid, Filename, tree-down) . snd-eval(Sid, tree-down(Filename))	
    + rec-event(Uid, Filename, tree-next) . snd-eval(Sid, tree-next(Filename))
    + rec-event(Uid, Filename, mouse(X?,Y?)) . snd-eval(Sid, mouse(Filename, X,Y))
    ) .
    rec-value(Sid, focus(Bgn?, End?)) . snd-do(Uid, setFocus(Filename, Bgn, End)) .	
    snd-ack-event(Uid, Filename)
  endlet

process ED-SHUTDOWN (Uid : ui, Sid : syn-edit, Filename : str) is
    ( rec-msg(editor(Filename), close) + rec-note(quit)
    ) .
    snd-do(Sid, close-editor(Filename)) . snd-do(Uid, close-editor(Filename))

process ED (Uid : ui, Sid : syn-edit, Filename : str) is
    subscribe(quit) .
    ED-STARTUP(Uid, Sid, Filename) . 
    ED-COMMAND(Uid, Sid, Filename) * ED-SHUTDOWN(Uid, Sid, Filename)

tool syn-edit is { command = "syn-edit" }	 
tool ui       is { command = "wish-adapter -script ui-edit.tcl" }
toolbus(TOP)
