
{\tt braindead} is a robot player written in SWI-Prolog.
Although this robot is written in a 'logical language', he
is not smarter than {\tt rand}, the robot player written in C.
{\tt braindead} chooses the first legal card, when asked to
play a card.

%{{{ braindead.pl

<<braindead.pl>>=
<<rec_terminate>>
<<rec_ack_event>>
<<who_am_i>>
<<players>>
<<matches>>
<<card_played>>
<<trick_done>>
<<game_done>>
<<match_done>>
<<game_aborted>>
<<invited>>
<<invitation>>
<<message>>
<<broadcast>>
<<deal>>
<<play_card>>
<<cheating>>

toolbus :-	tb_tool(Tool), tb_host(Host), tb_port(Port), tb_tid(Tid),
		tb_new_connection(Tool, Host, Port, Tid, Cid),
		tb_connect(Cid), tb_eventloop.
@

%}}}

%{{{ rec_terminate(Cid,Msg)

Terminate the robot player.

<<rec_terminate>>=
rec_terminate(_,_) :- halt.
@

%}}}
%{{{ rec_ack_event(Cid,Event)

{\tt braindead} just ignores these acknowledgements.

<<rec_ack_event>>=
rec_ack_event(_,_).
@

%}}}
%{{{ who_am_i(Result,Cid,Pid)

{\tt braindead} is asked to give some information about himself.
The result must be strings, so we need to 'stringify' some atoms.
The result should be something like this:
\begin{verbatim}
i-am("braindead(Pid)","robot","random","0.1")
\end{verbatim}
The translation of {\tt i\_am} to {\tt i-am} is done by
the ToolBus interface code.

<<who_am_i>>=
who_am_i(i_am(Name,Type,Level,Version),_,Pid) :-
		string_to_atom(Prefix,'braindead('),
		string_to_atom(Id, Pid),
		string_concat(Prefix,Id,Temp),
		string_to_atom(Postfix, ')'),
		string_concat(Temp,Postfix,Name),
		string_to_atom(Type,robot),
		string_to_atom(Level,random),
		string_to_atom(Version,'0.1').
@

%}}}
%{{{ players(Cid,Players)

The set of players has changed. {\tt braindead} is not really interested.

<<players>>=
players(_,_).
@

%}}}
%{{{ matches(Cid,Matches)

The set of matches has changed. {\tt braindead} is not really interested.

<<matches>>=
matches(_,_).
@

%}}}
%{{{ card_played(Cid,Pid,Gid,Round,Player,Card)

Some player in the game has played a card. {\tt braindead} is not really
interested.

<<card_played>>=
card_played(_,_,_,_,_,_).
@

%}}}
%{{{ trick_done(Cid,Pid,Gid,Round,Winner,Score,Played)

A trick has finished.
{\tt braindead} will indicate immediately that he is ready for the
next trick.

<<trick_done>>=
trick_done(Cid,Pid,Gid,_,_,_,_) :- tb_send(Cid,snd_event(next_trick(Pid,Gid))).
@

%}}}
%{{{ game_done(Cid,Pid,Gid,Scores)

A game has finished.
{\tt braindead} always wants to play another game.

<<game_done>>=
game_done(Cid,Pid,Gid,_) :- tb_send(Cid,snd_event(next_game(Pid,Gid,true))).
@

%}}}
%{{{ match_done(Cid,Pid,Gid,Quitting)

Somebody didn't want to continue with the match.
{\tt braindead} doesn't really care.

<<match_done>>=
match_done(_,_,_,_).
@

%}}}
%{{{ game_aborted(Cid,Pid,Gid,By)

Somebody aborted the game.
{\tt braindead} doesn't really care.

<<game_aborted>>=
game_aborted(_,_,_,_).
@

%}}}
%{{{ invited(Result,Cid,Pid,Gid,By)

{\tt braindead} received an invitation from another player.
Friendly as he is, he always accepts the invitation.

<<invited>>=
invited(invited(Pid,Gid,By,true),_,Pid,Gid,By).
@

%}}}
%{{{ invitation(Cid,Pid,Gid,By,Accepted)

As {\tt braindead} is to shy to send invitation, he never gets
a reply either. Consequently, this predicate will never be called.

<<invitation>>=
invitation(_,_,_,_,_) :- fail.
@

%}}}
%{{{ message(Cid,Pid,Gid,Msg,From)

Somebody send {\tt braindead} a message, but {\tt braindead} is to shy
to react, and so he just ignores messages.

<<message>>=
message(_,_,_,_,_).
@

%}}}
%{{{ broadcast(Cid,Pid,Msg,From)

{\tt braindead} just ignores broadcasted messages.

<<broadcast>>=
broadcast(_,_,_,_).
@

%}}}
%{{{ deal(Cid,Pid,Gid,Cards)

{\tt braindead} doesn't need to remember his cards, because he makes
his decision to play a card solely by looking at the first legal card
presented to him in {\tt play\_card}.

<<deal>>=
deal(_,_,_,_).
@

%}}}
%{{{ play_card(Cid,Pid,Gid,Round,Played,Legal)

{\tt braindead} always plays the first card in the list of legal cards.

<<play_card>>=
play_card(Cid,Pid,Gid,Round,_,[First|_]) :- 
		tb_send(Cid,snd_event(play_card(Pid,Gid,Round,First))).
@

%}}}
%{{{ cheating(Cid,Pid,Gid,Round,Legal,Card)

{\tt braindead} isn't really capable of cheating, but if somebody
modified him to cheat, this predicate will be called.

<<cheating>>=
cheating(_,_,_,_,_,_) :- 
    write('arghhh.... the impossible has happened, braindead has cheated!').
@

%}}}

