
			The ToolBus interpreter
                        =======================

		     Version 0.9.17 (June 1996)
                     -------------------------------


What is the ToolBus?
--------------------

The ToolBus is a novel software architecture intended for the
flexible development of cooperating, distributed applications
and is described in detail in:

	J.A Bergstra & P. Klint
	The ToolBus: a component interconnection architecture,
	Technical Report P9408,
	Programming Research Group, University of Amsterdam, 1994
and
	J.A Bergstra & P. Klint
	The Discrete Time ToolBus,
	Technical Report, P9502,
	Programming Research Group, University of Amsterdam, 1995

This version implements the ToolBus as described in the second report above.
It is not fully compatible with earlier versions (see ``Guide to ToolBus
Programming'' for a detailed list of differences).

Table of contents of distribution
---------------------------------

	README		This file
	INSTALL		Information file describing the installation procedure.
	DIFFERENCES	Differences with previous versions of the ToolBus
	CHANGES		A log of changes
	configure	Configuration program (shell script)
	configure.in	Template for configure file
	Makefile.in	Template for the toplevel makefile
	src		Sources of the ToolBus interpreter
	test		Test programs
	adapters	Adapters for connecting Unix programs to the ToolBus
	demos		Demonstration programs
	doc		Documentation (Guide to ToolBus Programming)
	bin		Empty directory where binaries can be installed
	lib		Empty directory where library files can be installed
	include		Empty directory where include files can be installed

Installation steps
------------------

(1) Configure the distribution by typing

	./configure

    This is a shell script that checks various features of your system and
    generates Makefiles in this directory tree. For more information about
    the configuration procedure see the file INSTALL.

    By default, all software will be installed in the current directory. You can
    change this to some other directory, say ``/usr/local'', by
    calling configure as follows:

	./configure --prefix=/usr/local

    [If you also have the GEL package (Graph Exchange Language) and want to
    compile some GEL-related programs in this distribution, type (probably
    adding a --prefix argument as just described):

	./configure --with-gel

    It is assumed that GEL resides at the same level in the file hierarchy,
    i.e. in a brother/sister directory of the current one. If GEL resides at
    another location, say ``my-absolute-gel-dir'', then type

	./configure --with-gel=my-absolute-geldir

    Note 1: make sure that the GEL directory is on your search path, since
    	the programs gel2b and gel2a are used by some of the GEL-related
	programs in this distribution.
    Note 2: GEL is currently only supported on a very experimental basis.
    ]

(2) Compile the sources by typing:

	make

    This will compile the sources in `src' and `adapters' and it will
    compile and run test programs in `test'. It will also format the
    documentation in `doc'.

(3) If the previous went well type

	make install

    to install the software

(4) Generate the documentation by typing:

	make doc

(5) If one of the previous steps generates errors go back to step (1) and 
    do one of the following:
    (a) The configure file has been generated by the utility ``autoconf''
    utility (see INSTALL). You may need to modify configure.in
    to reflect features of your system.
    (b) As a last resort, you can manually edit the generated Makefiles
    to reflect features of your system.

(6) I suggest that you include an absolute path name in your
    search path (shell variable PATH) that corresponds to the
    "bin" directory where the ToolBus binaries have been installed.
    [If you used ``with-gel'' configuration option, include the GeL
    directory in your search path as well.]
    This will make it easier to run the demos. If, in addition, you
    want to run the demo's simultaneously on more than one
    host machine, then you should also include absolute path
    names for each demo directory in your search path.

(7) To compile all demos type

	make demos

    It is also possible to go to a specific demo and compile it,
    for instance,

	cd demos/calc
	make

    will compile the ``calc'' demo.

(8) Then change directory to one of the demos and run it.
    For details see below.

(9) Report strange behaviour to me (Paul.Klint@cwi.nl or paulk@fwi.uva.nl)

(10) Also report ideas, suggestions, etc.

Enjoy!

Paul Klint

-----------------------------------------------------------------

CAVEATS
=======
(1) WARNING: this software is still under development and is not
    yet completely stable. Changes will be made to its functionality
    without notice.
(2) This software has been tested on SUN4 (SOLARIS & SunOs), SGI (IRIX), 
    PC (Linux), RS6000 (AIX).


ABOUT THE DEMOS
===============

The demo's make use of a user-interface construction system called
Tcl/Tk, in particular a program called "wish" (for windowing shell).
Tcl is an extensible, interpreted language. Tk is an extension to Tcl
which provides the programmer with an interface to the X11 windowing
system.
Tcl-7.3 and Tk-3.6 are available at harbor.ecn.purdue.edu:/pub/tcl/distrib
They are available at our site, too, just in case...

For all clarity: the ToolBus implementation itself is completely
self-contained and does not depend on Tcl/Tk. The demo's, however,
make use of it.

Calculator
----------

Run this demo by typing:

	toolbus calc.tb

A menu will appear with three buttons:
(a) Pushing the Calc putton requires you to type prefix
    expressions like: plus(10,20). Only, plus, mul and numbers are
    allowed.
(b) Pushing the Time button gives the current time
(c) Pushing the Log button gives a log of calculations.

Note: try adding the batch tool to the toolbus in calc.tb

Editor
------

Run this demo by typing:

	toolbus top.tb

A Menu will appear with three buttons:
(a) Pushing Edit leads to a dialogue asking about a filename.
    Note: *any* file name is good, since we always display the
    *same* file.
(b) Pushing Close leads to a dialogue asking about a filename.
    The editor in question will be closed.
(c) Pushing Quit terminates the session.

Note: try clicking in an edit window using the middle mouse button.
Note: try the Tree menu.

Auction
-------

Run this demo by typing:

	toolbus auction.tb

It will display the auction master's window. To execute individual
bidders execute
	bidder -name your-name
or
	bidder -name your-name -TB_HOST other-machine

if bidder and ToolBus are running on different machines.

Constraints
-----------
Run this demo by typing:

	toolbus cons.tb

A canvas will appear with three colored balls. Try to move
any ball and observe how some balls are moved back to
satisfy the imposed constraints.
Suggestion: First remove the lines labelled "constraint" in cons.tb.
This will allow unconstrained movement of the balls. 
(This can be done by adding the start-of-comment symbol %% at
the beginning of the corresponding line).
Next add constraints one-by-one and observe the effect.

Game
----
Run this demo by typing:

	toolbus game.tb

Two game boards will appear. You can push a square on either
board and the result will appear on both boards.
This demo does not yet contain rules-of-the-game and
is incomplete.

Wave
----

Run this demo by typing:

	toolbus wave.tb

It will simulate a one-dimensional wave equation.

Perl
----

Run this demo by typing:

	toolbus test.tb

It is a simple illustration of the use of Perl for writing
ToolBus tools.

Hello
-----

Contains all versions of the ``hello'' example as described
in ``A Guide to ToolBus Programmaing''.

Other demo's
------------

The other demo's are still under development.
