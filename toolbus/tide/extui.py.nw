
<<extui.py>>=
from Tkinter import *

<<class UIElement>>
<<class ExtensibleUI>>
@

%{{{ class UIElement
The class {\tt UIElement} encapsulates user interface elements.
<<class UIElement>>=
class UIElement:
	def __init__(self, master, widget, event, constraints):
		self.master = master
		self.widget = widget
		self.event = event
		self.constraints = constraints

	def set_event(self, event):
		self.event = event

	def set_constraints(self, constraints):
		self.constraints = constraints

	def get_widget(self):
		return self.widget

	def activate(self):
		self.master.action("button", self.event, self.constraints)

	def update(self, fsets):
		on = 0
		if fsets == [] and self.constraints == []:
			on = 1
		for fset in fsets:
			ok = 1
			if fset == None:
				if not self.constraints == []:
					ok = 0
			else:
				for c in self.constraints:
					if not fset.satisfies(c):
						ok = 0
			if ok:
				on = 1
		if on:
			self.widget["state"] = "normal"
		else:
			self.widget["state"] = "disabled"
@
%}}}
%{{{ class ExtensibleUI

<<class ExtensibleUI>>=
class ExtensibleUI:
	<<EUI.__init__>>
	<<EUI.add_menu_item>>
	<<EUI.add_toolbar_button>>
	<<EUI.add_button>>
	<<EUI.update_ui>>
@

%{{{ __init__

<<EUI.__init__>>=
def __init__(self, master, mframe, tframe, bframe):
	self.mymaster      = master
	self.menu_frame    = mframe
	self.toolbar_frame = tframe
	self.button_frame  = bframe
	self.menu_items = { }
	self.toolbar_buttons = { }
	self.buttons = { }
	self.menu_groups = { }
	self.toolbar_groups = { }
	self.button_groups = { }
@

%}}}
%{{{ add_menu_item

<<EUI.add_menu_item>>=
@

%}}}
%{{{ add_toolbar_button

<<EUI.add_toolbar_button>>=
def add_toolbar_button(self, group, file, event, constraints):
	if self.toolbar_buttons.has_key(file):
		self.toolbar_buttons[file].set_event(event)
		self.toolbar_buttons[file].set_constraints(constraints)
	else:
		if group == "":
			frame = self.toolbar_frame
		else:
			if not self.toolbar_groups.has_key(group):
				frame = Frame(self.toolbar_frame, {"borderwidth":"2",
						"relief":"groove"})
				frame.pack({"side":"left", "fill":"x"})
				self.toolbar_groups[group] = frame
			else:
				frame = self.toolbar_groups[group]

		button = Button(frame, {"bitmap":"@bitmaps/%s" % file})
		el = UIElement(self.mymaster, button, event, constraints)
		button["command"] = el.activate
		button.pack({"side":"left"})
		self.toolbar_buttons[file] = el
@

%}}}
%{{{ add_button

<<EUI.add_button>>=
def add_button(self, group, text, event, constraints):
	if self.toolbar_buttons.has_key(text):
		self.buttons[text].set_event(event)
		self.buttons[text].set_constraints(constraints)
	else:
		if group == "":
			frame = self.button_frame
		else:
			if not self.button_groups.has_key(group):
				frame = Frame(self.button_frame, {"borderwidth":"2",
						"relief":"groove"})
				frame.pack({"side":"top", "fill":"x"})
				frame.label = Label(frame, {"text":group})
				frame.label.pack({"side":"top","fill":"x"})
				self.button_groups[group] = frame
			else:
				frame = self.button_groups[group]

		button = Button(frame, {"text":text})
		el = UIElement(self.mymaster, button, event, constraints)
		button["command"] = el.activate
		button.pack({"side":"top", "fill":"x"})
		self.buttons[text] = el
@

%}}}

%{{{ update_ui

<<EUI.update_ui>>=
def update_ui(self, fsets):
	for item in self.menu_items.values():
		item.update(fsets)
	for button in self.toolbar_buttons.values():
		button.update(fsets)
	for button in self.buttons.values():
		button.update(fsets)
@

%}}}

%}}}




