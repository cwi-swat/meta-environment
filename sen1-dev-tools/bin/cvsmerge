#! /bin/env python

import sys
import os
import posix
import time
import stat
import pwd
import random


version = "0.0.0"


#
# Output
#

def usage( exitCode ):
    sys.stderr.write( """usage: cvsmerge  begin-branch  <branch-name>
       cvsmerge  import-from-trunk
       cvsmerge  end-branch  <branch-name>
       cvsmerge  [-v | --version]
       cvsmerge  [-? | -h | --help]\n""" )
    sys.exit( exitCode )


def log( string="" ):
    logFile.seek(0, 2)
    logFile.write( "+ " + string + "\n" )
    logFile.flush()


def info( string="" ):
    log( "cvsmerge: " + string )
    sys.stdout.write( string + "\n" )
    

def error( string ):
    log( "cvsmerge: " + string )
    sys.stderr.write( "cvsmerge: " + string + "\n" )
    sys.exit( 1 )


#
# CVS Interface
#

def cvsGetModuleName():
    log( "cvsGetModuleName" )
    repoFile = open( "CVS/Repository" )
    name = repoFile.readline()
    repoFile.close()
    return name[:-1]


def cvsDoCVS( command ):
    log( command )
    os.system( command )


def cvsGetStickyTagCwd():
    log( "cvsGetStickyTagCwd" )
    command = ("(cvs status -v" +
               " | grep --max-count=1 'Sticky Tag:'" +
               " | awk '{print $3}') 2>> %s" % logFilename)
    log( command )
    pin = os.popen( command )
    lines = pin.readlines()
    pin.close()
    if lines and lines[0]:
        return lines[0][:-1]
    else:
        raise "cannot read sticky tag"


def cvsGetTagNameCount( branchTag ):
    log( "cvsGetTagNameCount" )
    command = ("(cvs status -v " +
               " | egrep '\((branch:|revision:)'" +
               " | grep '%s') 2>> %s" % (branchTag, logFilename))
    log( command )
    pin = os.popen( command )
    lines = pin.readlines()
    pin.close()
    if lines:
        return len(lines)
    else:
        return 0


def cvsGetNotUpToDateList():
    log( "cvsGetNotUpToDateList" )
    pin = os.popen( "(cvs status" +
                    " | grep 'Status:'" +
                    " | grep -v 'Up-to-date') 2>> %s" % logFilename )
    lines = pin.readlines()
    pin.close()
    return lines


def cvsCreateBranch( branchTag ):
    command = "cvs tag -b %s >> %s 2>&1" % (branchTag, logFilename)
    cvsDoCVS( command )


def cvsTagCurrent( progressTag ):
    command = "cvs tag %s >> %s 2>&1" % (progressTag, logFilename)
    cvsDoCVS( command )


def cvsRemoteTagHead( frozenHeadTag, moduleName ):
    command = ("cvs rtag -r HEAD %s %s >> %s 2>&1" %
                (frozenHeadTag, moduleName, logFilename))
    cvsDoCVS( command )


def cvsMergeChanges( progressTag, frozenHeadTag ):
    log( "cvs update -j %s -j %s" % (progressTag, frozenHeadTag))
    os.system( "(cvs update -j %s -j %s 2>&1)" % (progressTag, frozenHeadTag) +
               " | tee %s" % errorFilename +
               " | tee --append %s" % logFilename +
               " | grep -v 'cvs update:'" )


def cvsMoveTag( moduleName, frozenHeadTag, progressTag ):
    command = ("cvs rtag -F -r %s %s %s >> %s 2>&1" %
                (frozenHeadTag, progressTag, moduleName, logFilename))
    cvsDoCVS( command )    


def cvsRemoveTag( moduleName, frozenHeadTag ):
    command = ("cvs rtag -d %s %s >> %s 2>&1" %
                (frozenHeadTag, moduleName, logFilename))
    cvsDoCVS( command )    


def cvsDifferenceTags( progressTag, frozenHeadTag ):
    log( "cvs diff -r %s -r %s" % (progressTag, frozenHeadTag) )
    pin = os.popen( "cvs diff -r %s -r %s 2>> %s" %
                (progressTag, frozenHeadTag, logFilename) )
    return pin.readline()


def cvsCatFile( frozenHeadTag, moduleName, fileName, newName ):
    command = ("cvs checkout -p -r %s %s/%s > %s 2>> %s" %
                (frozenHeadTag, moduleName, fileName, newName, logFilename))
    cvsDoCVS( command )


#
# Precondition Validation
#

def assertArgumentCount( count, args ):    
    if len(args) != count:
        error( "wrong number of arguments" )


def assertInWorkingCopy():
    mode = os.stat("CVS")[stat.ST_MODE]
    if not stat.S_ISDIR(mode):
        error( "the current working directory is not a CVS working copy" )


def assertInTrunkWorkingCopy():
    assertInWorkingCopy()
    branchTag = cvsGetStickyTagCwd()
    if branchTag != "(none)":
        error("the current working directory is not a CVS TRUNK working copy")


def assertInBranchWorkingCopy():
    assertInWorkingCopy()
    branchTag = cvsGetStickyTagCwd()    
    if branchTag == "(none)":
        error("the current working directory is not a CVS BRANCH working copy")


def assertValidBranchCreation( branchTag, progressTag ):
    if cvsGetTagNameCount(branchTag) != 0:
        error("tag name '%s' is already in use in this subtree" % branchTag)

    if cvsGetTagNameCount(progressTag) != 0:
        error("tag name '%s' is already in use in this subtree" % progressTag)


def assertValidBranchUse( branchTag, progressTag ):
    if cvsGetTagNameCount(branchTag) == 0:
        error( "tag name '%s' not found in this subtree" % branchTag )

    if cvsGetTagNameCount(progressTag) == 0:
        error( "tag name '%s' not found in this subtree" % progressTag )


def assertWorkingCopyUpToDate( typeOfWC ):
    files = cvsGetNotUpToDateList()
    if len(files) != 0:
        error("working copy not up to date wrt the head of the %s" % typeOfWC)


def assertProgressIsAtFrozenHead( progressTag, frozenHeadTag ):
    diffs = cvsDifferenceTags( progressTag, frozenHeadTag )
    if diffs != "":
        error( "branch is not up-to-date wrt the head of the trunk" )


#
# Support routines
#

def createFrozenHeadTag():
    return "fht_" + pwd.getpwuid(os.getuid())[0] + "_" + str(os.getpid())


def getUserOkay( message ):
    sys.stdout.write( "\nAre you sure? [y/N] " )    
    answer = sys.stdin.readline()
    sys.stdout.write( "\n" )
    if answer != "y\n":
        error( message )


def processCollisions( frozenHeadTag, moduleName ):
    collision = 0
    pin = os.popen("egrep 'cvs update: file .* exists, but has been added in revision %s' %s" % (frozenHeadTag, errorFilename))
    line = pin.readline()

    if line:
        collision = 1
        info("One or more collisions occured on the following files.")
        info()

    while line:
        index = line.find(" exists")
        if index == -1:
            error( "cannot find filename in error file." )
        fileName = line[17:index]       # 17 = "cvs update ..."
        print "  '%s'" % fileName
        randomString = ".%06d" % random.uniform(0, 100000)
        os.rename( fileName, fileName + randomString + ".branch" )
        cvsCatFile( frozenHeadTag, moduleName, fileName,
                fileName + randomString + ".trunk" )
        fd = posix.open( fileName, posix.O_CREAT, 0 )
        posix.close( fd )
        line = pin.readline()

    if collision:
        info()
        info("A collison occurs when a file is created both on the trunk")
        info("and a branch with the same name. These revisions are available")
        info("as <file>.<X>.trunk and <file>.<X>.branch, respectively")
        info("(X is some random number). Manual merging of these revisions")
        info("is required to solve the collision.")

#
# Operations
#

def beginBranch( branchTag ):
    log( "begin branch '%s'" % branchTag )
        
    progressTag = branchTag + "_progress"

    assertInTrunkWorkingCopy()
    assertValidBranchCreation( branchTag, progressTag )
    assertWorkingCopyUpToDate( "trunk" )
    
    cvsCreateBranch( branchTag )
    cvsTagCurrent( progressTag )
    
    info( "Created branch '%s' with progress tag '%s'" %
            (branchTag, progressTag) )
    info( "Do not forget to switch to this branch!" )
    info()


def importFromTrunk():
    log( "import changes from trunk" )

    assertInBranchWorkingCopy()    

    branchTag = cvsGetStickyTagCwd()
    progressTag = branchTag + "_progress"

    assertValidBranchUse( branchTag, progressTag )
    assertWorkingCopyUpToDate( "branch" )

    frozenHeadTag = createFrozenHeadTag()
    moduleName = cvsGetModuleName()

    info( "About to import (merge) changes from the trunk with the working" )
    info( "copy of module '%s' (branch '%s')." % (moduleName, branchTag) )
    getUserOkay( "Import of changes from trunk aborted." )

    cvsRemoteTagHead( frozenHeadTag, moduleName )
    cvsMergeChanges( progressTag, frozenHeadTag )    
    processCollisions( frozenHeadTag, moduleName )
    cvsMoveTag( moduleName, frozenHeadTag, progressTag )
    cvsRemoveTag( moduleName, frozenHeadTag )
    os.remove( errorFilename )

    info()    
    info("Merged the latest changes from the trunk into the working copy")
    info("of branch '%s' from module '%s'.\n" % (branchTag, moduleName) )
    info("Don't forget to check for conflicts and commit the merged changes.")
    info()


def endBranch( branchTag ):
    log( "end branch '%s'" % branchTag )
    
    progressTag = branchTag + "_progress"

    assertInTrunkWorkingCopy
    assertValidBranchUse( branchTag, progressTag )
    assertWorkingCopyUpToDate( "trunk" )

    frozenHeadTag = createFrozenHeadTag()
    moduleName = cvsGetModuleName()
        
    cvsRemoteTagHead( frozenHeadTag, moduleName )

    assertProgressIsAtFrozenHead( progressTag, frozenHeadTag )
    
    info("About to merge the changes from branch '%s' with" % branchTag)
    info("the working copy of the trunk of module '%s'." % moduleName)
    getUserOkay( "Import of changes from trunk aborted." )

    cvsMergeChanges( progressTag, branchTag )    
    cvsRemoveTag( moduleName, frozenHeadTag )
    os.remove( errorFilename )

    info()
    info("Merged the changes from branch '%s' with the working copy of" %
            branchTag)
    info("the trunk of module '%s'.\n" % moduleName)
    info("Don't forget to check for conflicts and commit the merged changes.")
    info("When no problem has occurred, remove the tag '%s'." % progressTag ) 
    info()


#
# Main
#

random.seed()

logFilename = "/var/tmp/cvsmerge.log.%d" % os.getpid()
errorFilename = "/var/tmp/cvsmerge.error.%d" % os.getpid()

if len(sys.argv) < 2:
    usage(1)

if sys.argv[1] == '-?' or sys.argv[1] == '-h' or sys.argv[1] == '--help':
    usage(0)

if sys.argv[1] == '-v' or sys.argv[1] == '--version':
    print "cvsmerge version %s" % version
    sys.exit(0)

command = sys.argv[1]
args = sys.argv[2:]

print "Logging output to: %s\n" % logFilename
logFile = open(logFilename, "w")

log( time.strftime("%a, %d %b %Y %H:%M:%S") )
log( "Executing: " + command + " " + str(args) )
log()

if command == "begin" or command == "begin-branch":
    assertArgumentCount( 1, args )
    beginBranch( args[0] )
elif command == "import" or command == "import-from-trunk":
    assertArgumentCount( 0, args )
    importFromTrunk()
elif command == "end" or command == "end-branch":
    assertArgumentCount( 1, args )
    endBranch( args[0] )
else:
    usage(1)
