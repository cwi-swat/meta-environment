[
  [ParseTree, tree, term(l("term"),
                         w(""),
                         l("X"),
                         w(""),
	                 l("X"),
	                 <layout-before-tree(Layout)>,
	                 <tree(Tree)>,
	                 <layout-after-tree(Layout)>,
	                 no-abbreviations) 
  ],
  

  [ModuleName, default, id(<id(String)>)],

  [Tree, layout, <layout(Layout)>],
  [Tree, var, <var(Var)>], 
  [Tree, appl, appl(<prod(Production)>,
                    w(""),
                    <args(Args)>
                   )
  ],
  [Tree, list, list(<iter(Symbol)>,
                    w(""),
                    <args(Args)>
                   )
  ],
  [Tree, lexical, <lexical(Lexical)>],
  [Tree, unquoted-literal, <literal(Literal)>],
  [Tree, quoted-literal, <qliteral(QLiteral)>],
  [Tree, separator, <separator(Separator)>],

  [Var, default, var(<name(String)>,<symbol(Symbol)>)],


  [Production, default, prod(id(<module-name(String)>),
                       w(""),
                       <lhs(Symbols)>,
                       w(""),
                       l("->"),
                       w(""),
                       <rhs(Symbol)>,
                       w(""),
                       <attrs(Attrs)>
                      )
  ],
  
  [Symbol, iter-star, iter(<symbol(Symbol)>,
                    w(""),
                    l("*")
                   )
  ],
  [Symbol, iter-plus, iter(<symbol(Symbol)>,
                    w(""),
                    l("+")
                   )
  ],
  [Symbol, iter-star-sep, iter-sep(l("{"),
                           w(""),
                           <symbol(Symbol)>,
                           w(""),
                           <separator(Separator)>,
                           w(""),
                           l("}"),
                           w(""),
                           l("*"))],
  [Symbol, iter-plus-sep, iter-sep(l("{"),
                           w(""),
                           <symbol(Symbol)>,
                           w(""),
                           <separator(Literal)>,
                           w(""),
                           l("}"),
                           w(""),
                           l("+"))],

 [Literal, default, l(<chars(String)>)],
 [QLiteral, default, ql(<chars(String)>)],
 [Lexical, default, lex(<chars(String)>,<symbol(Symbol)>)],  
 [Separator, default, sep(<chars(String)>)],
 [Layout, default, w(<chars(String)>)], 

 [Args, default, [<head(Tree)>,<[tail(Args)]>]]
]
