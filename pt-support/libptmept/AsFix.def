definition

module languages/asfix/syntax/Annotations

imports languages/asfix/syntax/Tree
imports languages/aterm/syntax/ATerms

exports

context-free syntax

Tree Annotation -> Tree {cons("annotated")} 

module languages/asfix/syntax/Attributes

imports languages/aterm/syntax/ATerms

exports
  sorts Attributes Attrs Attr Associativity

  context-free syntax
    "no-attrs"                       -> Attributes  {cons("no-attrs")}
    "attrs" "(" attributes:Attrs ")" -> Attributes  {cons("attrs")}

    "[" {Attr ","}+ "]" -> Attrs {cons("many")}

    "assoc" "(" associativity:Associativity ")" -> Attr {cons("assoc")}
    "term" "(" aterm:ATerm ")"                  -> Attr {cons("term")} 
    "id" "(" module-name:StrCon ")"             -> Attr {cons("id")}

    "bracket" -> Attr {cons("bracket")}
    "reject"  -> Attr {cons("reject")}
    "prefer"  -> Attr {cons("prefer")}
    "avoid"   -> Attr {cons("avoid")}

    "left"      -> Associativity {cons("left")}
    "right"     -> Associativity {cons("right")}
    "assoc"     -> Associativity {cons("assoc")}
    "non-assoc" -> Associativity {cons("non-assoc")}


module languages/asfix/syntax/Parsetree
 
imports languages/asfix/syntax/Tree 
imports languages/aterm/syntax/IntCon

exports
sorts ParseTree 

context-free syntax

parsetree(top:Tree,amb-cnt:NatCon) -> ParseTree  {cons("top")}
module languages/asfix/syntax/Symbol

imports basic/StrCon
	basic/NatCon

exports
 
sorts Symbol Symbols CharRange CharRanges

context-free syntax

"empty"                                                  -> Symbol   {cons("empty")}
lit(string:StrCon)                                     -> Symbol   {cons("lit")}
cf(symbol:Symbol)                                        -> Symbol   {cons("cf")}
lex(symbol:Symbol)                                       -> Symbol   {cons("lex")}
opt(symbol:Symbol)                                       -> Symbol   {cons("opt")}
alt(lhs:Symbol,rhs:Symbol)                               -> Symbol   {cons("alt")}
seq(symbols:Symbols)                                     -> Symbol   {cons("seq")}
tuple(head:Symbol,rest:Symbols)                          -> Symbol   {cons("tuple")}
sort(string:StrCon)                                    -> Symbol   {cons("sort")}
iter(symbol:Symbol)                                      -> Symbol   {cons("iter")}
iter-star(symbol:Symbol)                                 -> Symbol   {cons("iter-star")}
iter-sep(symbol:Symbol,separator:Symbol)                 -> Symbol   {cons("iter-sep")}
iter-star-sep(symbol:Symbol,separator:Symbol)            -> Symbol   {cons("iter-star-sep")}
iter-n(symbol:Symbol,number:NatCon)                      -> Symbol   {cons("iter-n")}
"iter-sep-n" "(" symbol:Symbol comma1:"," separator:Symbol comma2:"," number:NatCon ")" -> Symbol  {cons("iter-sep-n")}
func(symbols:Symbols,symbol:Symbol)                      -> Symbol  {cons("func")}
varsym(symbol:Symbol)                                    -> Symbol  {cons("varsym")}
"layout"                                                 -> Symbol  {cons("layout")}
char-class(CharRanges)                                   -> Symbol  {cons("char-class")}
strategy(lhs:Symbol,rhs:Symbol)                          -> Symbol  {cons("strategy")}
parameterized-sort(sort:StrCon,parameters:Symbols)     -> Symbol  {cons("parameterized-sort")}

"[" {Symbol ","}* "]"          -> Symbols  {cons("list")}

"[" { CharRange ","}* "]"      -> CharRanges {cons("list")}  

integer:NatCon                 -> CharRange  {cons("character")}
range(start:NatCon,end:NatCon) -> CharRange {cons("range")}

hiddens
  context-free start-symbols
    Symbol
module languages/asfix/syntax/Tree

imports languages/asfix/syntax/Annotations
imports languages/asfix/syntax/Symbol
imports languages/asfix/syntax/Attributes

exports

sorts Tree Args Production

context-free syntax

appl(prod:Production,args:Args)          -> Tree {cons("appl")}
cycle(symbol:Symbol,cycle-length:NatCon) -> Tree {cons("cycle")}
amb(args:Args)                  -> Tree {cons("amb")}
character:NatCon                -> Tree {cons("char")}

"[" {Tree ","}* "]"             -> Args {cons("list")}

"prod" "(" lhs:Symbols comma1:"," rhs:Symbol comma2:"," attributes:Attributes ")" -> Production {cons("default")}
list(rhs:Symbol)                                   -> Production {cons("list")}

hiddens

context-free start-symbols
  Tree

module languages/aterm/syntax/ATerms

imports languages/aterm/syntax/IntCon 
        languages/aterm/syntax/RealCon
	basic/StrCon
	basic/IdentifierCon

exports
  sorts AFun ATerm Annotation

  context-free syntax
	StrCon 	-> AFun {cons("quoted")}
	IdCon 	-> AFun {cons("unquoted")}

  context-free syntax
	IntCon 					-> ATerm {cons("int")}
	RealCon					-> ATerm {cons("real")}
	fun:AFun 				-> ATerm {cons("fun")}
	fun:AFun "(" args:{ATerm ","}+ ")" 	-> ATerm {cons("appl")}
	"<" type:ATerm ">" 			-> ATerm {cons("placeholder")}
	"[" elems:{ATerm ","}* "]" 		-> ATerm {cons("list")}
	trm:ATerm Annotation 			-> ATerm {cons("annotated")}

  context-free syntax
	"{" annos:{ ATerm ","}+ "}" 		-> Annotation {cons("default")}

hiddens
  context-free start-symbols 
    ATerm
module languages/aterm/syntax/IntCon

imports basic/Whitespace
	basic/NatCon

hiddens
  context-free start-symbols 
    IntCon

exports
  sorts IntCon
  context-free syntax
    NatCon         -> IntCon {cons("natural")}
    pos:"+" NatCon -> IntCon {cons("positive")}
    neg:"-" NatCon -> IntCon {cons("negative")}module languages/aterm/syntax/RealCon

imports languages/aterm/syntax/IntCon

hiddens
  context-free start-symbols 
    RealCon

exports
  sorts OptExp RealCon

  context-free syntax
    "e" IntCon -> OptExp {cons("present")}
               -> OptExp {cons("absent")}

    base:IntCon "." decimal:NatCon exp:OptExp  -> RealCon {cons("real-con")}module basic/StrCon

exports

sorts StrCon StrChar

lexical syntax
    "\\n"                      -> StrChar {cons("newline")}
    "\\t"                      -> StrChar {cons("tab")}
    "\\\""                     -> StrChar {cons("quote")}
    "\\\\"                     -> StrChar {cons("backslash")}
    "\\" a:[0-9]b:[0-9]c:[0-9] -> StrChar {cons("decimal")}
    ~[\0-\31\n\t\"\\]          -> StrChar {cons("normal")}

    [\"] chars:StrChar* [\"]   -> StrCon  {cons("default")}
module basic/NatCon

exports

sorts NatCon

lexical syntax
  
 [0-9]+ -> NatCon {cons("digits")}

lexical restrictions

 NatCon -/- [0-9]

module basic/IdentifierCon

exports

sorts IdCon

lexical syntax

head:[A-Za-z] tail:[A-Za-z\-0-9]* -> IdCon {cons("default")}

lexical restrictions

IdCon -/- [A-Za-z\-0-9]

module basic/Whitespace

exports
  lexical syntax
    [\ \t\n\r]	-> LAYOUT {cons("whitespace")}

  context-free restrictions
    LAYOUT? -/- [\ \t\n\r]
