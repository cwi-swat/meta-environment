 definition module languages/aterm/syntax/IntCon

imports basic/Whitespace

exports
  sorts NatCon IntCon
  lexical syntax   
    [0-9]+ -> NatCon  {cons("digits")}
  context-free syntax
    NatCon     -> IntCon {cons("natural")}
    pos:"+" NatCon -> IntCon {cons("positive")}
    neg:"-" NatCon -> IntCon {cons("negative")} module languages/asfix/syntax/Annotations

imports languages/asfix/syntax/Tree
imports languages/aterm/syntax/ATerms

exports

context-free syntax

Tree Ann -> Tree {cons("annotated")} module languages/asfix/syntax/Tree

imports languages/asfix/syntax/Annotations
imports languages/aterm/syntax/Literals

exports

sorts Tree Args Production

context-free syntax

appl(prod:Production,args:Args) -> Tree {cons("appl")}
character:NatCon                -> Tree {cons("char")}
lit(string:QLiteral)            -> Tree {cons("lit")}
amb(args:Args)                  -> Tree {cons("amb")}
"[" {Tree ","}* "]"             -> Args {cons("list")}

"prod" "(" lhs:Symbols comma1:"," rhs:Symbol comma2:"," attributes:Attributes ")" -> Production {cons("default")}
list(rhs:Symbol)                                   -> Production {cons("list")} module languages/asfix/syntax/Symbol

imports languages/aterm/syntax/Literals

exports
 
sorts Symbol Symbols CharRange CharRanges

context-free syntax

empty                                                    -> Symbol  {cons("empty")}
lit(string:QLiteral)                                     -> Symbol  {cons("lit")}
cf(symbol:Symbol)                                        -> Symbol   {cons("cf")}
lex(symbol:Symbol)                                       -> Symbol   {cons("lex")}
opt(symbol:Symbol)                                       -> Symbol   {cons("opt")}
alt(lhs:Symbol,rhs:Symbol)                               -> Symbol   {cons("alt")}
seq(lhs:Symbol,rhs:Symbol)                               -> Symbol {cons("seq")}
tuple(head:Symbol,rest:Symbols)                          -> Symbol   {cons("tuple")}
sort(string:QLiteral)                                    -> Symbol   {cons("sort")}
iter(symbol:Symbol)                                      -> Symbol   {cons("iter")}
iter-star(symbol:Symbol)                                 -> Symbol   {cons("iter-star")}
iter-sep(symbol:Symbol,separator:Symbol)                 -> Symbol   {cons("iter-sep")}
iter-star-sep(symbol:Symbol,separator:Symbol)            -> Symbol   {cons("iter-star-sep")}
iter-n(symbol:Symbol,number:NatCon)                      -> Symbol   {cons("iter-n")}
"iter-sep-n" "(" symbol:Symbol comma1:"," separator:Symbol comma2:"," number:NatCon ")" -> Symbol  {cons("iter-sep-n")}
func(symbols:Symbols,symbol:Symbol)                      -> Symbol  {cons("func")}
varsym(symbol:Symbol)                                    -> Symbol  {cons("varsym")}
layout                                                   -> Symbol  {cons("layout")}
char-class(CharRanges)                                   -> Symbol  {cons("char-class")}
strategy(lhs:Symbol,rhs:Symbol)                          -> Symbol {cons("strategy")}
parametrized-sort(sort:QLiteral,parameters:Symbols)       -> Symbol  {cons("parametrized-sort")}

"[" {Symbol ","}* "]"          -> Symbols  {cons("list")}

"[" { CharRange ","}* "]"      -> CharRanges {cons("list")}  

integer: NatCon                 -> CharRange  {cons("character")}
range(start:NatCon,end:NatCon) -> CharRange {cons("range")} module languages/aterm/syntax/RealCon
imports languages/aterm/syntax/IntCon
exports
  sorts OptExp RealCon
  context-free syntax
    "e" IntCon                -> OptExp {cons("present")}
                              -> OptExp {cons("absent")}
    IntCon "." NatCon OptExp  -> RealCon {cons("real-con")} module languages/aterm/syntax/ATerms
imports languages/aterm/syntax/Literals 
        languages/aterm/syntax/IntCon 
        languages/aterm/syntax/RealCon
exports
  sorts ATermList ACon AFun ATerm Ann
  context-free syntax
    "[" elems:{ ATerm ","}* "]"       -> ATermList {cons("not-empty")}
    IntCon                            -> ACon      {cons("int")}
    RealCon                           -> ACon      {cons("real")}
    Literal                           -> AFun
    ACon                              -> ATerm     {cons("constant")}
    list:ATermList                    -> ATerm     {cons("list")}
    fun:AFun                          -> ATerm     {cons("fun")}
    fun:AFun "(" args:{ ATerm ","}+ ")"      -> ATerm     {cons("appl")}
    "{" annos:{ ATerm ","}+ "}"                    -> Ann       {cons("annotation")}
    ACon Ann                          -> ATerm     {cons("annotated-constant")}
    list:ATermList Ann                -> ATerm     {cons("annotated-list")}
    fun:AFun Ann                      -> ATerm     {cons("annotated-fun")}
    fun:AFun "(" args:{ ATerm ","}+ ")" Ann  -> ATerm     {cons("annotated-appl")} module basic/Whitespace

exports
  lexical syntax
    [\ \t\n\r]	-> LAYOUT
  context-free restrictions
    LAYOUT? -/- [\ \t\n\r] module languages/aterm/syntax/Literals
imports basic/Whitespace

hiddens
  sorts AlphaNumericalEscChar DecimalEscChar EscChar L-Char

exports
  sorts QLiteral
  lexical syntax
    "\\" ~[012]                    -> AlphaNumericalEscChar {cons("default")}

    "\\" [01] [0-9] [0-9]          -> DecimalEscChar {cons("dec0_199")}
    "\\" "2" [0-4] [0-9]           -> DecimalEscChar {cons("dec200_249")}
    "\\" "2" "5" [0-5]             -> DecimalEscChar {cons("dec250_255")}

    alpha:AlphaNumericalEscChar  -> EscChar {cons("alpha-numeric")}
    decimal:DecimalEscChar       -> EscChar {cons("decimal")}

    ~[\000-\031\"\\] \/ [\t\n\r] -> L-Char {cons("normal")}
    EscChar                      -> L-Char {cons("escaped")}

    "\"" chars:L-Char* "\""        -> QLiteral {cons("quoted")}

  sorts UQLiteral
  lexical syntax
    [a-z]                          -> UQLiteral {cons("one-char")}
    [a-z][A-Za-z0-9\-]*[A-Za-z0-9] -> UQLiteral {cons("more-chars")}

  sorts Literal
  context-free syntax
    QLiteral  -> Literal {cons("qlit")}
    UQLiteral -> Literal {cons("uqlit")} module languages/asfix/syntax/Attributes

imports languages/aterm/syntax/Literals 
        languages/aterm/syntax/ATerms

exports
  sorts Attributes Attrs Attr Associativity

  context-free syntax
    "no-attrs"                       -> Attributes  {cons("no-attrs")}
    "attrs" "(" attributes:Attrs ")" -> Attributes  {cons("attrs")}

    "[" {Attr ","}+ "]" -> Attrs {cons("many")}

    "assoc" "(" associativity:Associativity ")" -> Attr {cons("assoc")}
    "term" "(" aterm:ATerm ")"                  -> Attr {cons("term")} 
    "id" "(" module-name:QLiteral ")"            -> Attr {cons("id")}

    "bracket" -> Attr {cons("bracket")}
    "reject"  -> Attr {cons("reject")}
    "prefer"  -> Attr {cons("prefer")}
    "avoid"   -> Attr {cons("avoid")}

    "left"      -> Associativity {cons("left")}
    "right"     -> Associativity {cons("right")}
    "assoc"     -> Associativity {cons("assoc")}
    "non-assoc" -> Associativity {cons("non-assoc")}

    "bracket"   -> ATerm {reject}
    "reject"    -> ATerm {reject}
    "prefer"    -> ATerm {reject}
    "avoid"     -> ATerm {reject}
    "left"      -> ATerm {reject}
    "right"     -> ATerm {reject}
    "assoc"     -> ATerm {reject}
    "non-assoc" -> ATerm {reject}
    id(QLiteral) -> ATerm {reject} module languages/asfix/syntax/Parsetree
 
imports languages/asfix/syntax/Attributes
imports languages/asfix/syntax/Symbol
imports languages/asfix/syntax/Tree 
imports languages/aterm/syntax/IntCon

exports
sorts ParseTree 

context-free syntax

parsetree(top:Tree,amb-cnt:NatCon) -> ParseTree  {cons("top")} 