[
  [ParseTree, Tree, parsetree(appl(prod(<lhs(Symbols)>,
                                        sort("<START>"),
                                        no-attrs),
                                   [<layout-before-tree(Tree)>,
                                    <tree(Tree)>,
                                    <layout-after-tree(Tree)>]),
                              <amb-cnt(int)>)],

  [Tree, appl, appl(<prod(Production)>,
                    <args(Args)>)],

  [Tree, char, <character(int)>],

  [Tree, Lit, lit(<string(str)>)],

  [Tree, flat-layout, flatlayout(<string(str)>)],

  [Tree, Amb, amb(<args(Args)>)],

  [Production, Default, prod(<lhs(Symbols)>,
                             <rhs(Symbol)>,
                             <attributes(Attributes)>
                            )
  ],

  [Production, List, list(<rhs(Symbol)>)],

  [Attributes, no-attrs, no-attrs],
  [Attributes, attrs, attrs(<attrs(Attrs)>)],

  [Attrs, many, [<head(Attr)>,<[tail(Attrs)]>]],
  [Attrs, single, [<head(Attr)>]], 

  [Attr, cons       , cons(<string(str)>)   ],
  [Attr, id         , id(<module-name(str)>)],
  [Attr, aterm      , atr(<term(ATerm)>)    ],


  [ATerm, bracket    , "bracket"        ],
  [ATerm, left       , "left"           ],
  [ATerm, right      , "right"          ],
  [ATerm, assoc      , "assoc"          ],
  [ATerm, non-assoc  , "non-assoc"      ],
  [ATerm, memo       , "memo"           ],
  [ATerm, reject     , "reject"         ],
  [ATerm, prefer     , "prefer"         ],
  [ATerm, avoid      , "avoid"          ],
  [ATerm, constructor, "constructor"    ],
  [ATerm, traverse   , "traverse"       ],

  [Args, list, [<head(Tree)>,<[tail(Args)]>]],
  [Args, empty, []],

  [Symbol, lit, lit(<string(str)>)],

  [Symbol, cf, cf(<symbol(Symbol)>)],

  [Symbol, lex, lex(<symbol(Symbol)>)],

  [Symbol, empty, empty],

  [Symbol, seq, seq(<symbols(Symbols)>)],

  [Symbol, opt, opt(<symbol(Symbol)>)], 

  [Symbol, alt, alt(<lhs(Symbol)>,<rhs(Symbol)>)], 

  [Symbol, pair, pair(<lhs(Symbol)>,<rhs(Symbol)>)], 

  [Symbol, sort, sort(<string(str)>)], 

  [Symbol, iter-plus, iter(<symbol(Symbol)>)],

  [Symbol, iter-star, iter-star(<symbol(Symbol)>)],

  [Symbol, iter-plus-sep, iter-sep(<symbol(Symbol)>,<separator(Symbol)>)],

  [Symbol, iter-star-sep, iter-star-sep(<symbol(Symbol)>,<separator(Symbol)>)],

  [Symbol, iter-n, iter-n(<symbol(Symbol)>,<number(int)>)],

  [Symbol, iter-sep-n, iter-sep-n(<symbol(Symbol)>,<separator(Symbol)>,
                                  <number(int)>)],

  [Symbol, perm, perm(<symbols(Symbols)>)],

  [Symbol, set, set(<symbol(Symbol)>)],

  [Symbol, func, func(<symbols(Symbols)>,<symbol(Symbol)>)],

  [Symbol, var-sym, varsym(<symbol(Symbol)>)],

  [Symbol, layout, layout],
 
  [Symbol, char-class, char-class(<ranges(CharRanges)>)],

  [Symbols, list, [<head(Symbol)>,<[tail(Symbols)]>]],
  [Symbols, empty, []],

  [CharRange, character, <integer(int)>],
  [CharRange, range, range(<start(int)>,<end(int)>)],

  [CharRanges, list, [<head(CharRange)>,<[tail(CharRanges)]>]],
  [CharRanges, empty, []]
]
