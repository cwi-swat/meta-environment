definition
module Main
exports
  sorts Iter Iter-sep Iter-star Iter-star-sep
        Nesting-iter-sep1 Nesting-iter-sep2 Nesting-iter-star-sep
        Empty-iter-star-sep Alt1a Alt1b Alt2a Alt2b Alt3a Alt3b Alt4a
	Seq SeqOpt1 SeqOpt2 SeqOpt3 Var1 Var2

  lexical syntax
    [\ \t\n] -> LAYOUT
    [a-z]  -> A
    [A-Z] -> B

  context-free restrictions
    LAYOUT? -/- [\ \t\n]

  context-free syntax
    A*           -> Iter-star             {cons("Iter-star")}
    A+           -> Iter                  {cons("Iter")}
    {A ","}*     -> Iter-star-sep         {cons("Iter-star-sep")}
    {A ","}+     -> Iter-sep              {cons("Iter-sep")}
   
    {A* ";"}*    -> Nesting-iter-star-sep {cons("Nesting-iter-star-sep")}
   
    {A* ";"}+    -> Nesting-iter-sep1     {cons("Nesting-iter-sep1")}
    {A+ B+}+     -> Nesting-iter-sep2     {cons("Nesting-iter-sep2")}

    {A B}*       -> Empty-iter-star-sep   {cons("Empty-iter-star-sep")}

    A|B|"aap"    -> Alt1a {cons("Alt1a")}
    A|B|"aap"    -> Alt1b {cons("Alt1b")}
    (A A A)      -> Seq {cons("Seq")}
    (A A A)?     -> SeqOpt1 {cons("SeqOpt1")}
    ("aap" A)*   -> SeqOpt2 {cons("SeqOpt2")}
    {("aap" A) ","}* -> SeqOpt3 {cons("SeqOpt3")}


    "f" A ((A B) | B) -> Alt2a {cons("Alt2a")}
    "f" A ((A B) | B) -> Alt2b {cons("Alt2b")}

    (A | B)      -> Alt4a {cons("Alt4a")}


  lexical syntax
    "aap" | "noot" -> Alt3a {cons("Alt3a")}
    "aap" | "noot" -> Alt3b {cons("Alt3b")}


  lexical syntax
    [A-Za-z]+	-> Identifier
  context-free restrictions
    Identifier -/- [A-Za-z]
  context-free syntax
    Identifier	-> Var1 {cons("Var1")}
    Identifier	-> Var2 {cons("Var2")}
