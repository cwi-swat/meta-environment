module MBE
imports Layout
imports Water
exports
  context-free start-symbols Input

  context-free syntax
    Chunk*    -> Input {cons("Input")}
    Water     -> Chunk {cons("Water")}
    Island    -> Chunk {cons("Island")}
    Method    -> Chunk {cons("Method")}
    Comment   -> Chunk {cons("Comment")}

  lexical syntax
    [A-Za-z\_\$] [A-Za-z0-9\_\$]*                             -> Identifier            
    "\\" [u]+ [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] -> UnicodeEscape         
    ~[\'\\]                                                   -> SingleCharacter       
    "'" SingleCharacter "'"                                   -> CharacterLiteral      
    "\\" [btnfr\"\'\\]                                        -> EscapeSequence        
    "\\" [0-7]                                                -> EscapeSequence        
    "\\" [0-7] [0-7]                                          -> EscapeSequence        
    "\\" [0-3] [0-7] [0-7]                                    -> EscapeSequence        
    UnicodeEscape                                             -> StringCharacter       
    ~[\"\\]                                                   -> StringCharacter       
    EscapeSequence                                            -> StringCharacter       
    [A-Za-z\_\$] [A-Za-z0-9\_\$]*                             -> Identifier            
    "\"" StringCharacter* "\""                                -> StringLiteral         {cons("StringCharacter-s")}

  lexical restrictions
    Identifier -/- [a-zA-Z0-9\_\$]

  context-free syntax
    CharacterLiteral      -> Literal        {cons("CharacterLiteral")}
    StringLiteral         -> Literal        {cons("StringLiteral")}

  context-free syntax
    {Identifier "."}+             -> Name       {cons("Identifier")}
    {Identifier "."}+ "." "class" -> Name       {cons("class")}
    Identifier                    -> SimpleName {cons("Identifier")}

  context-free syntax
    PrimitiveType         -> Type                 {cons("PrimitiveType")}
    ReferenceType         -> Type                 {cons("ReferenceType")}
    NumericType           -> PrimitiveType        {cons("NumericType")}
    "boolean"             -> PrimitiveType        {cons("boolean")}
    IntegralType          -> NumericType          {cons("IntegralType")}
    FloatingPointType     -> NumericType          {cons("FloatingPointType")}
    "byte"                -> IntegralType         {cons("byte")}
    "short"               -> IntegralType         {cons("short")}
    "int"                 -> IntegralType         {cons("int")}
    "long"                -> IntegralType         {cons("long")}
    "char"                -> IntegralType         {cons("char")}
    "float"               -> FloatingPointType    {cons("float")}
    "double"              -> FloatingPointType    {cons("double")}
    "void"                -> Type                 {cons("void")}
    "final" Type          -> Type                 {cons("FinalType")}
    ClassOrInterfaceType  -> ReferenceType        {cons("ClassOrInterfaceType")}
    ArrayType             -> ReferenceType        {cons("ArrayType")}
    Name                  -> ClassOrInterfaceType {cons("Name")}
    ClassOrInterfaceType  -> ClassType            {cons("ClassOrInterfaceType1")}
    ClassOrInterfaceType  -> InterfaceType        {cons("ClassOrInterfaceType2")}
    PrimitiveType "[" "]" -> ArrayType            {cons("PrimitiveType1")}
    Name "[" "]"          -> ArrayType            {cons("Name1")}
    ArrayType "[" "]"     -> ArrayType            {cons("ArrayType1")}

  context-free syntax
    "public"       -> Modifier {cons("public")}
    "protected"    -> Modifier {cons("protected")}
    "private"      -> Modifier {cons("private")}
    "static"       -> Modifier {cons("static")}
    "abstract"     -> Modifier {cons("abstract")}
    "final"        -> Modifier {cons("final")}
    "native"       -> Modifier {cons("native")}
    "synchronized" -> Modifier {cons("synchronized1")}
    "transient"    -> Modifier {cons("transient")}
    "volatile"     -> Modifier {cons("volatile")}

  lexical syntax
    ~[\ \t\n\{\}]+ -> NOTCURLY

  lexical restrictions
    NOTCURLY -/- ~[\ \t\n\{\}]

  context-free syntax
    MethodHeader MethodBody  -> Method {cons("Method")}
    Modifier* Type MethodDeclarator Throws? 
                             -> MethodHeader {cons("MethodHeader")}
    Identifier "(" {FormalParameter ","}* ")" 
                             -> MethodDeclarator {cons("MethodDeclarator")}
    MethodDeclarator "[" "]" -> MethodDeclarator

    Identifier               -> VariableDeclaratorId
    VariableDeclaratorId "[" "]" 
                             -> VariableDeclaratorId
    Type VariableDeclaratorId 
                             -> FormalParameter {cons("Parameter")}

    "throws" {ClassType ","}+ 
                             -> Throws {cons("Throws")}
    Block                    -> MethodBody {cons("MethodBody")}
    "{" (NotCurlyOrComment|Block)* "}" 
                             -> Block {cons("Block")}

    NOTCURLY                 -> NotCurlyOrComment {avoid}
    Comment                  -> NotCurlyOrComment {cons("Comment")}

  lexical syntax
    "/*" ( ~[\*] | Asterisk )* "*/" -> Comment  
    [\*]                            -> Asterisk 
    "//" ~[\n]* [\n]                -> Comment  

  lexical restrictions
    Asterisk -/- [\/]

