definition
module basic/Booleans

imports basic/BoolCon
exports
  sorts Boolean

  context-free syntax
    BoolCon                     -> Boolean {cons("constant")}
    lhs:Boolean "|" rhs:Boolean -> Boolean {left, cons("or")}
    lhs:Boolean "&" rhs:Boolean -> Boolean {left, cons("and")}
    "not" "(" Boolean ")" 	-> Boolean {cons("not")}
    "(" Boolean ")"       	-> Boolean {bracket, cons("bracket")}

  context-free priorities
    Boolean "&" Boolean -> Boolean >
    Boolean "|" Boolean -> Boolean

hiddens
  context-free start-symbols Boolean

  imports
    basic/Comments
  variables
    "Bool"[0-9]* 	-> Boolean
    "Bool-con"[0-9]* 	-> BoolCon

module basic/StrCon

exports

sorts StrCon Normal Escaped


lexical syntax
    ~[\0-\31\"\\\n] -> Normal {cons("default")}

    "\\n" | "\\t" |  "\\\"" | "\\\\" -> Escaped {cons("special-character")}
    "\\" [0-7][0-7][0-7]             -> Escaped {cons("octal")}

    "\"" (Normal | Escaped)* ("\\\n" (Normal | Escaped)*)* "\"" -> StrCon {cons("default")}
module basic/BoolCon

exports

sorts BoolCon
context-free syntax

    "true"  -> BoolCon {cons("true")}
    "false" -> BoolCon {cons("false")}module utilities/Measure

exports

sorts Measure

context-free syntax
  "less"     -> Measure {cons("less")}
  "greater"  -> Measure {cons("greater")}
  "equal"    -> Measure {cons("equal")}
module utilities/IOResults[Sort]

imports basic/Bytes
imports basic/Integers
imports basic/Feedback

exports 

sorts ParseResult
context-free syntax

  "parse-tree" "(" left-layout:Bytes  "," 
                   tree:Sort          "," 
                   right-layout:Bytes ","
                   amb-cnt:NatCon
               ")"                   -> ParseResult {cons("success")}

  "parse-error" "(" Feedback ")"     -> ParseResult {cons("failure")}
 
sorts BytesResult
context-free syntax

  "bytes" "(" value:Bytes ")" -> BytesResult {cons("success")}
  "bytes-error" "(" Feedback ")" -> BytesResult {cons("failure")}

sorts WriteResult
context-free syntax

  "written" -> WriteResult {cons("success")}
  "write-error" "(" Feedback ")" -> WriteResult {cons("failure")}
