module asdf/functions

imports

  type-check/subtype
  asdf/asdf-sem-sec
  asdf/lower-case
  containers/List[<DataOp, FunResult>]

exports

sorts

  FunctionDefs TypeInfo SubTypes DataOpSigs

context-free syntax

  get-type-info(AS-Module)	-> TypeInfo

  <Signatures, SubTypes, DataOpSigs>	-> TypeInfo

  List[[<DataOp, FunResult>]]		-> DataOpSigs

  get-signatures(AS-Module)	-> Signatures

  get-sigs(AS-Module, Signatures)	-> Signatures {traversal(accu, break, top-down)}
  get-sigs(AS-Section*, Signatures)	-> Signatures {traversal(accu, break, top-down)}
  get-sigs(AS-FunctionSig, Signatures)	-> Signatures {traversal(accu, break, top-down)}

  get-subtypes(AS-Module, SubTypes)	
			  -> SubTypes {traversal(accu, break, top-down)}
  get-subtypes(AS-Requires-Production, SubTypes)	
			  -> SubTypes {traversal(accu, break, top-down)}

  get-subs(AtomicType, AS-Requires-Rhs, SubTypes)	  -> SubTypes 

  get-dataop-sigs(AS-Module, DataOpSigs)  
			     -> DataOpSigs {traversal(accu, break, top-down)}

  get-dataop-sigs(AS-Requires-Production, DataOpSigs)  
			     -> DataOpSigs {traversal(accu, break, top-down)}

  get-dataop-sigs(AtomicType, AS-Requires-Rhs, DataOpSigs)	 -> DataOpSigs 

  get-selectors(AtomicType, {(Literal ":" Sort) ","}*)	
					  -> List[[<DataOp, FunResult>]]

  get-dataop-type({(Literal ":" Sort) ","}*)	-> Type

  sort-to-type(Sort)	  -> AtomicType

  join-type-info(TypeInfo, TypeInfo)  -> TypeInfo

  get-function-defs(AS-Module)	     -> FunctionDefs

  get-fun-defs(AS-Module, FunctionDefs)	-> FunctionDefs {traversal(accu, break, top-down)}
  get-fun-defs(AS-Section*, FunctionDefs)	-> FunctionDefs {traversal(accu, break, top-down)}
  get-fun-defs(AS-FunctionDef, FunctionDefs)	-> FunctionDefs {traversal(accu, break, top-down)}

  lookup-signature(SignatureEnv, ActionType, Literal) 
		-> ActionType {traversal(accu, break, bottom-up)}
  lookup-signature(FunctionSignature, ActionType, Literal) 
		-> ActionType {traversal(accu, break, bottom-up)}

  {AS-FunctionDef ","}* 	-> SortWithPosition

hiddens variables

  "$ASM"		-> AS-Module
  "$MN"			-> ModuleName
  "$IS*"		-> ImpSection*
  "$AS*"		-> AS-Section*
  "$FS*"[0-9]?		-> {AS-FunctionSig ","}*
  "$FS"[0-9]?		-> AS-FunctionSig
  "$FD*"		-> {AS-FunctionDef ","}*
  "$FD"			-> AS-FunctionDef
  "$LT"[0-9]?		-> Literal
  "$FR"[0-9]?		-> FunResult
  "$SO"[0-9]?		-> Sort
  "$SFR"[0-9]?"*"	-> { SingleFunResult "&" }*
  "$FR"[0-9]?		-> FunResult
  "$TY"[0-9]?		-> Type
  "$ATY"[0-9]?		-> AtomicType    
  "$TY"[0-9]?"*"	-> { Type ","}*

  "$STS"[0-9]?		-> List[[<AtomicType, AtomicType>]]
  "$DOS"[0-9]?		-> List[[<DataOp, FunResult>]]

  "$ARR"[0-9]?		-> AS-Requires-Rhs
  "$CH"[0-9]?		-> CHAR
  "$CH"[0-9]?"*"	-> CHAR*
  "$CH"[0-9]?"+"	-> CHAR+
  "$LT"[0-9]?		-> Literal

  "$LS"[0-9]?"*"	-> {(Literal ":" Sort) ","}*

