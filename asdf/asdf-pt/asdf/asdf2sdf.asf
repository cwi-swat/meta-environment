equations

  [t-1] Section* := $sections-to-sdf(AS-Section*),
        Import*1 := $remove-duplets($extract-imports(AS-Section*,)),
	Import*2 := $remove(Import*1, ModuleName)
        =======================================
        asdf2sdf(module ModuleName ImpSection* AS-Section*) =
module ModuleName 
ImpSection* 
imports asdf/an
imports basic/Whitespace
imports Import*2
exports sorts Action

Section*

  [t-2] $sections-to-asf(AS-Section*) == eqlist()
	=======================================
	asdf2asf(module ModuleName ImpSection* AS-Section*) =

  [t-2] eqlist(ASFequation+) := $sections-to-asf(AS-Section*),
	ASFEquations := equations 
ASFequation+
	=======================================
	asdf2asf(module ModuleName ImpSection* AS-Section*) = ASFEquations

  [ia-1] moduleid($CH+1"/"$CH+2) := ModuleName 
	 ========================================
	 $import-an(ModuleName) = 

  [default-ia-2] $import-an(ModuleName) = moduleid("A""c""t""i""o""n""/""F""u""l""l""-""A""N")

  [tss-1] $sections-to-sdf() = 

  [tss-2] Section*1 := $section-to-sdf(AS-Section),
          Section*2 := $sections-to-sdf(AS-Section*)
          ===========================================
          $sections-to-sdf(AS-Section AS-Section*) = 
Section*1 
Section*2

  [tss-1] $sections-to-asf() = eqlist()

  [tss-2] eqlist(ASFequation*1) := $section-to-asf(AS-Section),
          eqlist(ASFequation*2) := $sections-to-asf(AS-Section*)
          ===========================================
          $sections-to-asf(AS-Section AS-Section*) = 
eqlist(ASFequation*1 

ASFequation*2)


  [ts-1] $section-to-sdf(syntax ) = 

  [ts-2] Grammar := $transform-syntax(AS-Syntax+)
         ===============================================
         $section-to-sdf(syntax AS-Syntax+) = 
exports 
Grammar

  [ts-3] $section-to-sdf(requires ) = 

  [ts-4] Grammar := $transform-requires(AS-Requires+)
         ===============================================
         $section-to-sdf(requires AS-Requires+) = 
exports 
Grammar

  [ts-5] $section-to-sdf(semantics ) = 

  [ts-6] Grammar := $transform-semantics(AS-Semantics+)
         ===============================================
         $section-to-sdf(semantics AS-Semantics+) = 
exports 
Grammar
  
  [ts-7] $section-to-sdf(sdf-section Section*) = Section*

  [default-ts-7] $section-to-sdf(AS-Section) = 

  [ts-8] $section-to-asf(semantics ) = eqlist()

  [ts-6] eqlist(ASFequation*) := $get-equations(AS-Semantics+)
         ===============================================
         $section-to-asf(semantics AS-Semantics+) = eqlist(ASFequation*)
	 
  [default-ts-7] $section-to-asf(AS-Section) = eqlist()

  [tsy-1] Grammar1 := $transform-syntax(AS-Syntax),
          Grammar2 := $transform-syntax(AS-Syntax+)
	  =======================================
	  $transform-syntax(AS-Syntax AS-Syntax+) = Grammar1 
Grammar2

  [tsy-3] $transform-syntax(Sort ::= AS-Syntax-Rhs) = 
sorts Sort
context-free syntax
  $transform-syntax-rhs(Sort, AS-Syntax-Rhs)

  [tsr-1] $transform-syntax-rhs(Sort, AS-Syntax-Rhs1 | AS-Syntax-Rhs2) = 
$transform-syntax-rhs(Sort, AS-Syntax-Rhs1)
$transform-syntax-rhs(Sort, AS-Syntax-Rhs2)

  [tsr-2] $transform-syntax-rhs(Sort1, Sort2) = Sort2 -> Sort1

  [tsr-2] $transform-syntax-rhs(Sort, Literal) = Literal -> Sort

  [tsr-3] $transform-syntax-rhs(Sort, Literal(Symbol,*) ) = Literal(Symbol,*) -> Sort

  [trq-1] Grammar1 := $transform-requires(AS-Requires),
          Grammar2 := $transform-requires(AS-Requires+)
          ================================================
          $transform-requires(AS-Requires AS-Requires+) = Grammar1 
Grammar2

  [trq-2] $transform-requires(AS-Variable) = $transform-variable(AS-Variable)

  [trq-3] $transform-requires(AS-Requires-Production) = $transform-production(AS-Requires-Production)

  [trq-4] $transform-requires(AS-Constant) = $transform-constant(AS-Constant)


  [tsm-1] Grammar1 := $transform-semantics(AS-Semantics),
          Grammar2 := $transform-semantics(AS-Semantics+)
	  =======================================
	  $transform-semantics(AS-Semantics AS-Semantics+) = Grammar1 
Grammar2

  [tsm-2] $transform-semantics(Literal : Sort1 -> FNR) = context-free syntax
  Literal Sort1 -> sort("A""c""t""i""o""n")

  [tsm-3] $transform-semantics(AS-Eqs-Tag AS-Eqs-Lhs = A) = 
context-free syntax

  [tsm-1] eqlist(ASFequation*1) := $get-equations(AS-Semantics),
          eqlist(ASFequation*2) := $get-equations(AS-Semantics+)
	  =======================================
	  $get-equations(AS-Semantics AS-Semantics+) = eqlist(ASFequation*1
ASFequation*2)

  [tsm-2] $get-equations(AS-Semantics) = eqlist() when Literal : Sort1 -> FNR := AS-Semantics

  [tsm-3] $get-equations(AS-Eqs-Tag AS-Eqs-Lhs = A) = eqlist(AS-Eqs-Tag AS-Eqs-Lhs = A)


  [default-tp-2] $transform-production(Sort ::= AS-Requires-Rhs) = 
context-free syntax
  $transform-requires-rhs(Sort, AS-Requires-Rhs) 

  [trhs-1] Production+1 := $transform-requires-rhs(Sort, AS-Requires-Rhs1),
            Production+2 := $transform-requires-rhs(Sort, AS-Requires-Rhs2)
            =========================================================
            $transform-requires-rhs(Sort, AS-Requires-Rhs1 | AS-Requires-Rhs2) = 
Production+1
  Production+2

  [trhs-2] $transform-requires-rhs(Sort1, Sort2) = Sort2 -> Sort1

  [trhs-2] $transform-requires-rhs(Sort, Literal) = Literal -> Sort

  [trhs-3] $transform-requires-rhs(Sort, uqliteral($CH+)(Symbol,*) ) = qliteral("""$CH+""") -> PrefixDataOp

  [trhs-3] $transform-requires-rhs(Sort, uqliteral($CH+)(LCS*) ) = 
qliteral("""$CH+""")	-> sort("S""o""r""t")
qliteral("""$CH+""") -> PrefixDataOp
$transform-decons(LCS*)

  [trhs-4] Sort == sort($CH+1)
	   ========================
	   $transform-requires-rhs(sort($CH+1), uqliteral($CH+2) Sort ) = qliteral("""$CH+2""") -> sort("P""r""e""f""i""x"$CH+1)
sort("P""r""e""f""i""x"$CH+1) Sort -> sort($CH+1)

  [default-trhs-4] $transform-requires-rhs(Sort, uqliteral($CH+) Sort1 ) = 
qliteral("""$CH+""") Sort1 -> Sort

  [trhs-5] Sort == sort($CH+1)
	   ========================
	   $transform-requires-rhs(sort($CH+1), Sort uqliteral($CH+2) Sort) = qliteral("""$CH+2""") -> sort("I""n""f""i""x"$CH+1)
Sort sort("I""n""f""i""x"$CH+1) Sort -> sort($CH+1)

  [default-trhs-5] $transform-requires-rhs(Sort, Sort1 uqliteral($CH+) Sort2) = 
Sort1 qliteral("""$CH+""") Sort2	-> Sort

  [td-1] $transform-decons(uqliteral($CH+) : Sort, LCS*) = 
qliteral("""$CH+""")	-> PrefixDataOp
$transform-decons(LCS*)

  [td-2] $transform-decons() = 

  [tv-1] $transform-variable(varlexprefix($CH+) : Sort) = 
sorts Sort
variables qliteral("""$CH+""")[0-9\']* 		-> Sort
	  qliteral("""$CH+""")[0-9\']*"+"	-> Sort+
	  qliteral("""$CH+""")[0-9\']*"*"	-> Sort*

  [tc-1] $transform-constant(Literal : Sort) = 
context-free syntax
  Literal -> Sort

  [ei-1] $extract-imports(sort($CH+),Import*) = 
         $add-to(moduleid($CH+), Import*)

  [ei-2] $extract-imports(Sort ::= AS-Requires-Rhs, Import*) = $extract-req-imports(AS-Requires-Rhs, Import*)

  [ei-2] $extract-imports(Literal : Sort, Import*) = $extract-req-imports(Sort, Import*)
   
  [ei-2] $extract-imports(semantics AS-Semantics*,Import*) = Import*

  [ei-3] $extract-imports(sdf-section Section*,Import*) = Import*

  [ei-4] $extract-imports(VarLexPrefix : Sort, Import*) = $extract-imports(Sort, Import*)

  [ei-5] $extract-req-imports(sort($CH+),Import*) = 
         $add-to(moduleid("D""a""t""a""/"$CH+), Import*)

  [ei-6] $extract-req-imports(Literal(LCS*),Import*) = Import*

   
  [at-1] $add-to(Import, Import*) = Import Import*

  [remove-1] $remove(Import*1 Import Import*2, Import) = $remove(Import*1 Import*2, Import)
  
  [default-remove-2] $remove(Import*, Import) = Import*

  [remove-duplets-1] $remove-duplets(Import*1 Import Import*2 Import Import*3) = $remove-duplets(Import*1 Import Import*2 Import*3)

  [default-remove-duplets-2] $remove-duplets(Import*) = Import*
 