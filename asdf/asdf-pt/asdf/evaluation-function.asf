equations

[get-eval-env-1]

   get-eval-env(<$STS, $DCS, $DOS>) = 
            <new-table,
	     0,
	     fail,
	     0,
	     $STS,
	     $DCS,
	     $DOS>

[get-constants-1] get-constants(uqliteral($CH+) : $SO, $DCS) = 
		  <data($CH+), sort-to-type($SO)>:$DCS

[get-eval-info-1]

    get-eval-info($ASM) = 
	   <get-subtypes($ASM, []), 
	    get-constants($ASM, []),
	    get-eval-dataop($ASM, [])>

[get-eval-use-1]
    get-eval-use($LT : $ASA, $LS*) = use-to-type($ASA)

[use-to-type-1] 

   bytes($CH2*) := chars-to-lower-case(bytes($CH1*))
   =================================================================
   use-to-type(sort($CH1*)) = atomictype($CH2*)

[use-to-type-2] 

   $ATY := atomictype("a""c""t""i""o""n")
   =======================================================================
   use-to-type(Action & $SFR1*) = $ATY

[get-eval-prefixdataop-1]
    get-eval-prefixdataop($LT : $ASA, $LS*) = use-to-char($LT)

[use-to-char-1] 
   use-to-char(uqliteral($CH1$CH1*)) = prefixdataop($CH1$CH1*)


[get-eval-dataop-1]
   get-eval-dataop($SO ::= $ARR, $DOS) = 
   get-eval-dataop(sort-to-type($SO), $ARR, $DOS)

[get-eval-dataop-2]
   $DOS2 := concat([<get-eval-prefixdataop($LS*),datasel(atomictype($CH+),give the get-eval-use($LS*))>], $DOS1)
   =======================================================================
   get-eval-dataop($ATY, uqliteral($CH+)($LS*), $DOS1) = 
      <prefixdataop($CH+),datacon(atomictype($CH+),get-eval-use($LS*))>:$DOS2

[get-eval-dataop-3]
   get-eval-dataop($ATY, $ARR1 | $ARR2, $DOS) = 
      get-eval-dataop($ATY, $ARR1, get-eval-dataop($ATY, $ARR2, $DOS))

[default-get-eval-dataop-1]
   get-eval-dataop($ATY, $ARR, $DOS) = $DOS

[join-eval-info-1] 

   join-eval-info(<$STS1,$DCS1,$DOS1>, 
		  <$STS2,$DCS2,$DOS2>) = 
			<concat-unique($STS1, $STS2),
			 concat-unique($DCS1, $DCS2),
			 concat-unique($DOS1, $DOS2)>
