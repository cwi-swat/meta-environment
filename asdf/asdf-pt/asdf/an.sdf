module asdf/an

exports

imports

sorts
  
   Action Yielder DataOp PrefixDataOp InfixAction PrefixAction 
   InfixDataOp Data Datum Index Type AtmYielder

context-free start-symbols

  Action

%%%%%%%%%%%%%%%
%% Kernel AN %%
%%%%%%%%%%%%%%%

context-free syntax

  "result" Data		-> Action
  "give" DataOp		-> Action
  "check" DataOp	-> Action

   PrefixAction Action		-> Action 
   Action InfixAction Action	-> Action {left, prefer}


lexical syntax

  "copy"		-> Action
  "skip"		-> Action
  "then"		-> InfixAction
  "and-then"		-> InfixAction
  "and"			-> InfixAction
  "indivisibly"		-> PrefixAction
  "unfold"		-> Action
  "unfolding"		-> PrefixAction
  "throw"		-> Action
  "catch"		-> InfixAction
  "err"			-> Action
  "and-catch"		-> InfixAction
  "fail"		-> Action
  "else"		-> InfixAction
  "choose-nat"		-> Action

  "copy-bindings"	-> Action
  "scope"		-> InfixAction

  "create"		-> Action
  "inspect"		-> Action
  "update"		-> Action

  "enact"		-> Action
  "apply"		-> Action
  "close"		-> Action
  "recursively"		-> PrefixAction

  "activate"		-> Action
  "deactivate"		-> Action
  "give-current-agent"	-> Action
  "send"		-> Action
  "receive"		-> Action
  "give-current-time"	-> Action

  "disj-union"		-> PrefixDataOp {prefer}
  "binding"		-> PrefixDataOp {prefer}
  "bound"		-> PrefixDataOp {prefer}
  "overriding"		-> PrefixDataOp {prefer}

  "no-bindings"		-> Datum {prefer}

%%%%%%%%%%%%%
%% Full AN %%
%%%%%%%%%%%%%

context-free syntax

  "give"  AtmYielder	-> Action
  "given" AtmYielder	-> Action
  "check" AtmYielder	-> Action
  Action AtmYielder	-> Action {right}
  Action DataOp		-> Action {right}


  Data			-> AtmYielder
  DataOp		-> Yielder
  AtmYielder		-> Yielder
  "current-bindings"	-> AtmYielder
  "bound-to" Yielder	-> AtmYielder
  "stored-at" Yielder	-> AtmYielder
  "closure" Yielder	-> AtmYielder

  "it"			-> DataOp

  "maybe"		-> PrefixAction

  "bind"		-> Action
  "furthermore"		-> PrefixAction
  "before"		-> InfixAction
	
  Yielder InfixDataOp Yielder	-> Yielder {left}

  PrefixDataOp Yielder		-> Yielder
  "(" {Yielder ","}+ ")" 	-> AtmYielder
	
  InfixAction			-> InfixDataOp  {avoid}
  PrefixAction			-> PrefixDataOp  {avoid}

  "(" Action ")"		-> Action 

context-free priorities

  { PrefixDataOp Yielder 	-> Yielder }
  >
  { "bound-to" Yielder	  -> AtmYielder
    "stored-at" Yielder	  -> AtmYielder
    "closure" Yielder	  -> AtmYielder }
  >
  { Yielder InfixDataOp Yielder	-> Yielder {left}}

context-free priorities

  { "(" Data ")"	-> Data }
  >
  { Action   -> Data}
  >
  { Yielder InfixDataOp Yielder		-> Yielder {left}}

context-free priorities

  { Action AtmYielder	-> Action }
  >
  { "give" DataOp       -> Action
    "check" DataOp      -> Action }
  >
  { "give" AtmYielder 	-> Action 
    "given" AtmYielder 	-> Action 
    "check" AtmYielder	-> Action}
  >
  { PrefixAction Action         -> Action }
  >
  { Action InfixAction Action	-> Action }
	

%%%%%%%%
% Data %
%%%%%%%%

context-free syntax

  "#" Index       -> PrefixDataOp
  "the" Type		-> PrefixDataOp

lexical syntax

  "-1" | [1-9][0-9]*   -> Index

context-free syntax

  Datum 	-> Data 

  "(" Data ")"	-> Data	{bracket}

  Action	-> Data

lexical syntax

%%  [0-9]+                  -> IntConst
%%  "\""~[\"]*"\""          -> StrConst
%%  [a-zA-Z][a-zA-Z0-9]*    -> IdConst

%%  IntConst | StrConst | IdConst   -> Cons

  "="			-> InfixDataOp

  "not" | "def"  	-> PrefixDataOp {prefer}

context-free syntax
        
  InfixDataOp     -> DataOp
  PrefixDataOp    -> DataOp

