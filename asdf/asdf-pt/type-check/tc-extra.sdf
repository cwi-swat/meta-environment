module type-check/tc-extra

imports

  type-check/environment
  asdf/an-supplement 

exports

sorts

  Answers

context-free syntax

  check-infallible(AS-FunctionDef, AS-FunctionSig, Answer)
				-> Answers

  check-terminates(AS-FunctionDef, AS-FunctionSig, Environment)
				-> Answers
  terminates(AS-FunctionDef, Answers, Signatures)	
				-> Answers {traversal(accu, break, top-down)}
  terminates(Action, Answers, Signatures)	
				-> Answers {traversal(accu, break, top-down)}

  check-closed(AS-FunctionDef, AS-FunctionSig, Environment)
				-> Answers
  closed(AS-FunctionDef, Answers, Signatures)	
				-> Answers {traversal(accu, break, top-down)}
  closed(Action, Answers, Signatures)	
				-> Answers {traversal(accu, break, top-down)}
  
  check-ineffective(AS-FunctionDef, AS-FunctionSig, Environment)
				-> Answers
  ineffective(AS-FunctionDef, Answers, Signatures)	
				-> Answers {traversal(accu, break, top-down)}
  ineffective(Action, Answers, Signatures)	
				-> Answers {traversal(accu, break, top-down)}
  
  check-uncreative(AS-FunctionDef, AS-FunctionSig, Environment)
				-> Answers
  uncreative(AS-FunctionDef, Answers, Signatures)	
				-> Answers {traversal(accu, break, top-down)}
  uncreative(Action, Answers, Signatures)	
				-> Answers {traversal(accu, break, top-down)}
  
hiddens

variables

  "$AC"[1-9]?	-> Action
  "$ANS"[1-9]?	-> Answer
  "$SS"[0-9]?	-> Signatures
  "$CO"[1-9]?	-> Constructor
  "$LT"[1-9]?	-> Literal
  "$SO"[1-9]?	-> Sort
  "$AFS"[1-9]?	-> AS-FunctionSig
  "$AFS"[1-9]?"*"	-> {AS-FunctionSig ","}*
  "$FD"[1-9]?	-> AS-FunctionDef
  "$SFR"[0-9]?	-> SingleFunResult
  "$SFR"[0-9]?"*"	-> { SingleFunResult "&" }*
  "$ENV"[0-9]?	-> Environment
