equations

[check-infallible-1] 

  check-infallible($FD, $LT : $SO -> $AT1 & infallible & $AT2, yes) = 
      error("Type error", [localized("Semantic function can fail", 
			get-location($FD))])


[default-check-infallible-1] check-infallible($FD, $AFS, $ANS) = yes

[check-terminates-1] 

  $ANS := terminates($FD, yes, get-signatures($ENV))
  ======================================================
  check-terminates($FD, $LT : $SO -> $AT1 & terminates & $AT2, $ENV) = $ANS

[default-check-terminates-1] check-terminates($FD, $AFS, $ENV) = yes

[terminates-1] 

     $AC == unfold
     ===================================
     terminates($AC, $ANS, $SS) = $ANS error("Type error", 
          [localized("Semantic function might not terminate due to unfold", 
			get-location($AC))])

[terminates-2] 

     $AC == enact
     ===================================
     terminates($AC, $ANS, $SS) = $ANS error("Type error", 
          [localized("Semantic function might not terminate due to enact", 
			get-location($AC))])

[terminates-3] 

     $AC == apply
     ===================================
     terminates($AC, $ANS, $SS) = $ANS error("Type error", 
          [localized("Semantic function might not terminate due to apply", 
			get-location($AC))])

[terminates-3] 

     $LT $CO := $AC,
     sigs($AFS1*, $AFS1, $AFS2*) := $SS,
     $LT == get-fun-name($AFS1),
     terminates($AFS1) == no
     ===================================
     terminates($AC, $ANS, $SS) = $ANS error("Type error", 
[localized("Semantic function might not terminate due to semantic function not terminating", 
			get-location($AC))])

[check-closed-1] 

  $ANS := closed($FD, yes, get-signatures($ENV))
  ======================================================
  check-closed($FD, $LT : $SO -> $AT1 & closed & $AT2, $ENV) = $ANS

[default-check-closed-1] check-closed($FD, $AFS, $ENV) = yes

[closed-1]      

     $AC == give bound
     ===================================
     closed($AC, $ANS, $SS) = $ANS error("Type error", 
          [localized("Semantic function is not closed due to use of bound", 
			get-location($AC))])

[closed-2] 

     $LT $CO := $AC,
     sigs($AFS1*, $AFS1, $AFS2*) := $SS,
     $LT == get-fun-name($AFS1),
     closed($AFS1) == no
     ===================================
     closed($AC, $ANS, $SS) = $ANS error("Type error", 
[localized("Semantic function is not closed due to semantic function not being closed", 
			get-location($AC))])

[check-ineffective-1] 

  $ANS := ineffective($FD, yes, get-signatures($ENV))
  ======================================================
  check-ineffective($FD, $LT : $SO -> $AT1 & ineffective & $AT2, $ENV) = $ANS

[default-check-ineffective-1] check-ineffective($FD, $AFS, $ENV) = yes

[ineffective-1]      

     $AC == update
     ===================================
     ineffective($AC, $ANS, $SS) = $ANS error("Type error", 
          [localized("Semantic function is not ineffective due to use of update", 
			get-location($AC))])

[ineffective-2] 

     $AC == enact
     ===================================
     ineffective($AC, $ANS, $SS) = $ANS error("Type error", 
          [localized("Semantic function is not ineffective due to enact", 
			get-location($AC))])

[ineffective-3] 

     $AC == apply
     ===================================
     ineffective($AC, $ANS, $SS) = $ANS error("Type error", 
          [localized("Semantic function is not ineffective due to apply", 
			get-location($AC))])

[ineffective-4] 

     $LT $CO := $AC,
     sigs($AFS1*, $AFS1, $AFS2*) := $SS,
     $LT == get-fun-name($AFS1),
     ineffective($AFS1) == no
     ===================================
     ineffective($AC, $ANS, $SS) = $ANS error("Type error", 
[localized("Semantic function is not ineffective due to semantic function not being ineffective", 
			get-location($AC))])

[check-uncreative-1] 

  $ANS := uncreative($FD, yes, get-signatures($ENV))
  ======================================================
  check-uncreative($FD, $LT : $SO -> $AT1 & uncreative & $AT2, $ENV) = $ANS

[default-check-uncreative-1] check-uncreative($FD, $AFS, $ENV) = yes

[uncreative-1]      

     $AC == create
     ===================================
     uncreative($AC, $ANS, $SS) = $ANS error("Type error", 
       [localized("Semantic function is not uncreative due to use of update", 
			get-location($AC))])

[uncreative-2] 

     $AC == enact
     ===================================
     uncreative($AC, $ANS, $SS) = $ANS error("Type error", 
          [localized("Semantic function is not uncreative due to enact", 
			get-location($AC))])

[uncreative-3] 

     $AC == apply
     ===================================
     uncreative($AC, $ANS, $SS) = $ANS error("Type error", 
          [localized("Semantic function is not uncreative due to apply", 
			get-location($AC))])

[uncreative-4] 

     $LT $CO := $AC,
     sigs($AFS1*, $AFS1, $AFS2*) := $SS,
     $LT == get-fun-name($AFS1),
     uncreative($AFS1) == no
     ===================================
     uncreative($AC, $ANS, $SS) = $ANS error("Type error", 
[localized("Semantic function is not uncreative due to semantic function not being uncreative", 
			get-location($AC))])
