equations

[initial-1] initial-dataop-sigs = 
	     [<binding, using (token, bindable) & giving bindings>,
	      <bound, using (bindings, token) & giving bindable>,
	      <overriding, using (bindings, bindings) & giving bindings>,
	      <disj-union, using (bindings, bindings) & giving bindings>,
	      <not, using boolean & giving boolean>,
	      <def, using data & giving boolean>,
	      <+, using (integer, integer) & giving integer>,
	      <*, using (integer, integer) & giving integer>,
	      <-, using (integer, integer) & giving integer>,
	      <<, using (integer, integer) & giving integer>,
	      <else, using (action, action) & giving action>
	      ]

[brackets-1] ($TY) = $TY

[tcd-1] typecheck-data((), $EN) = <giving (), $EN>

[tcd-3] 

   <giving $TY1 & $AT1, $EN2> := typecheck-data($D1, $EN1),
   <giving $TY2 & $AT2, $EN3> := typecheck-data($D2, $EN2)
   ========================================================
   typecheck-data(($D1, $D2), $EN1) = <giving ($TY1, $TY2), $EN3>

[tcd-4] 

   <giving $TY & $AT1, $EN2> := typecheck-data($D1, $EN1),
   <giving ($TY*) & $AT2, $EN3> := typecheck-data(($D2, $D+), $EN2)
   ================================================================
   typecheck-data(($D1, $D2, $D+), $EN1) = <giving ($TY, $TY*), $EN3>

[tcd-5] typecheck-data($N, $EN) = <giving integer, $EN>

[tcd-6] typecheck-data($B, $EN) = <giving boolean, $EN>

[tcd-7] typecheck-data($A, $EN) = typecheck-action($A, $EN)

[tcd-8] typecheck-data(token($TK), $EN) = <giving token($TK), $EN>

[tcd-9] typecheck-data(no-bindings, $EN) = <giving bindings, $EN>

[tcd-10] typecheck-data($VR, $EN) = <giving data, $EN>

[tcd-10] [$DT1*, <$DO, $TY>, $DT2*] := get-data-constants($EN)
	 ==============================================================
	 typecheck-dataop($DO, $EN) = <giving $TY, $EN>

[tcdo-1] [$DF1*, <$DO, $FR>, $DF2*] := get-dataop-sigs($EN)
	 ==============================================================
	 typecheck-dataop($DO, $EN) = <$FR, $EN>


[tcdo-select-1] 
		
         <$TV, $EN2> := new-type-var($EN1)
	 ===================================================================
	 typecheck-dataop(#1, $EN1) = <using ($TV, data) & giving $TV, $EN2>

[tcdo-select-2] 

     <$TV, $EN2> := new-type-var($EN1)
     ==========================================================================
     typecheck-dataop(#2, $EN1) = <using (datum, $TV, data) & giving $TV, $EN2>

[tcdo-select-3] 

     <$TV, $EN2> := new-type-var($EN1)
     =========================================================================
     typecheck-dataop(#3, $EN1) = 
			  <using (datum, datum, $TV, data) & giving $TV, $EN2>

[tcdo-select-1] typecheck-dataop(#$IN, $EN) = <using data & giving data, $EN>

[default-tcdo] 

      # index($CH+) := $DO,
      $SC := "Wrong number of arguments for #" || strcon(""" $CH+ """)
      ================================================================
      typecheck-dataop($DO, $EN) = <error("Type error", 
				     [localized($SC, get-location($DO))]), $EN>

[tcdo-the-sort-1] 

      typecheck-dataop(the $TY, $EN) = <using data & giving $TY, $EN>
	 	
[default-tcdo] 

      the $TY := $DO
      ====================================================================
      typecheck-dataop($DO, $EN) = <error("Type error", 
   [localized("Can't project to this sort", get-location($DO))]), $EN>

[tcdo-it-1] 

     <$TV, $EN2> := new-type-var($EN1)
     ===========================================================
     typecheck-dataop(it, $EN1) = <using $TV & giving $TV, $EN2>

[tcdo-equal] 

     typecheck-dataop(=, $EN) = <using (datum, datum) & giving boolean, $EN>

[tcdo-def] typecheck-dataop(def, $EN) = <using data & giving boolean, $EN>

[tcdp-1] <$AT, $EN2> := typecheck-dataop($DO, $EN1),
	 boolean == get-giving($AT),
	 $TY := get-using($AT)
	 ===========================================================
	 typecheck-datapred($DO, $EN1) = 
				 <using $TY & giving $TY & raising (), $EN2>

[default-tcdo] 

      prefixdataop($CH+) := $DO,
      $SC := "Bad argument for " || strcon(""" $CH+ """)
      ===============================================================
      typecheck-dataop($DO, $EN) = <error("Type error", 
				    [localized($SC, get-location($DO))]), $EN>

[default-tcdo] 

      infixdataop($CH+) := $DO,
      $SC := "Bad argument for " || strcon(""" $CH+ """)
      ===============================================================
      typecheck-dataop($DO, $EN) = <error("Type error", 
                                 [localized($SC, get-location($DO))]), $EN>
