equations

[initial-1] initial-dataop-sigs = 
     [<binding, using (token, bindable) & giving bindings & std-at>,
      <bound, using (bindings, token) & giving bindable & std-at>,
      <overriding, using (bindings, bindings) & giving bindings & std-at>,
      <disj-union, using (bindings, bindings) & giving bindings & std-at>,
      <not, using boolean & giving boolean & std-at>,
      <def, using data & giving boolean & std-at>,
      <+, using (integer, integer) & giving integer & std-at>,
      <*, using (integer, integer) & giving integer & std-at>,
      <-, using (integer, integer) & giving integer & std-at>,
      <<, using (integer, integer) & giving integer & std-at>,
      <else, using (action, action) & giving action & std-at>
      ]

[brackets-1] ($TY) = $TY

[tcd-1] typecheck-data((), $EN) = <giving (), $EN>

[tcd-2] typecheck-data(($D), $EN) = typecheck-data($D, $EN)

[tcd-3] 

   <giving $TY1 & $SAT1*, $EN2> := typecheck-data($D1, $EN1),
   <giving $TY2 & $SAT2*, $EN3> := typecheck-data($D2, $EN2)
   ========================================================
   typecheck-data(($D1, $D2), $EN1) = <giving ($TY1, $TY2), $EN3>

[tcd-4] 

   <giving $TY & $SAT1*, $EN2> := typecheck-data($D1, $EN1),
   <giving ($TY*) & $SAT2*, $EN3> := typecheck-data(($D2, $D+), $EN2)
   ================================================================
   typecheck-data(($D1, $D2, $D+), $EN1) = <giving ($TY, $TY*), $EN3>

[tcd-5] typecheck-data($N, $EN) = <giving integer, $EN>

[tcd-6] typecheck-data($B, $EN) = <giving boolean, $EN>

[tcd-7] <$AT, $EN2> := typecheck-action($A, $EN1)
	===================================================
	typecheck-data($A, $EN1) = <giving ($AT), $EN2>

[tcd-8] typecheck-data(token($TK), $EN) = <giving token, $EN>

[tcd-9] typecheck-data(no-bindings, $EN) = <giving bindings, $EN>

[tcd-10] typecheck-data($VR, $EN) = <giving data, $EN>

[tcd-10] [$DT1*, <$DO, $TY>, $DT2*] := get-data-constants($EN)
	 ==============================================================
	 typecheck-dataop($DO, $EN) = <giving $TY & raising empty & 
					      std-at, $EN>

[tcdo-1] [$DF1*, <$DO, $FR>, $DF2*] := get-dataop-sigs($EN)
	 ==============================================================
	 typecheck-dataop($DO, $EN) = <$FR, $EN>


[tcdo-select-1] 
		
         <$TV, $EN2> := new-type-var($EN1)
	 ===================================================================
	 typecheck-dataop(#1, $EN1) = 
			     <using ($TV, data) & giving $TV & 
				    raising empty & std-at, $EN2>

[tcdo-select-2] 

     <$TV, $EN2> := new-type-var($EN1)
     ===================================================================
     typecheck-dataop(#2, $EN1) = 
 		  <using (datum, $TV, data) & giving $TV & 
			 raising empty & std-at, $EN2>

[tcdo-select-3] 

     <$TV, $EN2> := new-type-var($EN1)
     =========================================================================
     typecheck-dataop(#3, $EN1) = 
	         <using (datum, datum, $TV, data) & giving $TV & 
			raising empty & std-at, $EN2>

[tcdo-select-1] typecheck-dataop(#$IN, $EN) = 
				      <using data & giving data & 
					     raising empty & std-at, $EN>

[tcdo-the-sort-1] 

      <$TV, $EN2> := new-type-var($EN1)
      ==================================================================
      typecheck-dataop(the $TY, $EN1) = <using $TV & giving $TY & 
					      raising () & std-at, $EN2>
	 	
[tcdo-it-1] 

     <$TV, $EN2> := new-type-var($EN1)
     ====================================================================
     typecheck-dataop(it, $EN1) = <using $TV & giving $TV & 
				raising empty & std-at, $EN2>

[tcdo-equal] 

     typecheck-dataop(=, $EN) = 
		    <using (datum, datum) & giving boolean & 
			   raising empty & std-at, $EN>

[tcdo-def] typecheck-dataop(def, $EN) = 
			      <using data & giving boolean & 
				     raising empty & std-at, $EN>

[tcdp-1] <$AT, $EN2> := typecheck-dataop($DO, $EN1),
	 boolean == get-giving($AT),
	 $TY := get-using($AT)
	 ===========================================================
	 typecheck-datapred($DO, $EN1) = 
		<using $TY & giving $TY & raising () & std-at, $EN2>

[default-tcdo] 

      prefixdataop($CH+) := $DO,
      $SC := "Bad argument for " || strcon(""" $CH+ """)
      ===============================================================
      typecheck-dataop($DO, $EN) = <error("Type error", 
				    [localized($SC, get-location($DO))]), $EN>

[default-tcdo] 

      infixdataop($CH+) := $DO,
      $SC := "Bad argument for " || strcon(""" $CH+ """)
      ===============================================================
      typecheck-dataop($DO, $EN) = <error("Type error", 
                                 [localized($SC, get-location($DO))]), $EN>
