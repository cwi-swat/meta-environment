equations

[tcm-1] defs() == get-function-defs($AM)
	=====================================================
	typecheck($AM, sigs($AFS*)) = gen-summary(yes)

[tcm-1] defs($FD+) := get-function-defs($AM),
	sigs($AFS2*) := remove-dobble-sigs(sigs($AFS1*)),
	$ENV := set-signatures(empty-env, sigs($AFS2*)),
	$ANS := typecheck-definitions(defs($FD+), $ENV),
	$SUM := gen-summary($ANS)
	=====================================================
	typecheck($AM, sigs($AFS1*)) = $SUM

[tcd-1] $ANS1 := typecheck-definitions(defs($FD), $ENV),
	$ANS2 := typecheck-definitions(defs($FD+), $ENV)
        ====================================================
        typecheck-definitions(defs($FD, $FD+), $ENV) = $ANS1 $ANS2

[tcd-3] 	

      sigs($AFS1*, $AFS1, $AFS2*) := get-signatures($ENV),
      $LT == get-fun-name($AFS1),
      $TY1 := get-using($AFS1),
      $TY2 := get-giving($AFS1),
      $TY3 := get-raising($AFS1),
      AR[nor=$TY4, exc=$TY5, $END] := typecheck-action($AC, $TY1, $ENV),
      yes == $TY4 subtype-of $TY2, 
      yes == $TY5 subtype-of $TY3
      =========================================================================
      typecheck-definitions(defs($ET $LT $CO = $AC), $ENV) = yes

[tcd-4] 

      sigs($AFS1*, $AFS1, $AFS2*) := get-signatures($ENV),
      $LT == get-fun-name($AFS1),
      $TY1 := get-using($AFS1),
      $ER := typecheck-action($AC, $TY1, $ENV)
      ========================================================================
      typecheck-definitions(defs($ET $LT $CO = $AC), $ENV) = $ER

[default-tcd] typecheck-definitions(defs($FD*), $ENV) = 
	      error("Type error", 
	         [localized("Error in function definitions", get-location($FD*))])

[tca-function] 

      sigs($AFS1*, $AFS1, $AFS2*) := get-signatures($ENV),
      $LT == get-fun-name($AFS1),
      $TY2 := get-using($AFS1),
      $TY3 := get-giving($AFS1),
      $TY4 := get-raising($AFS1),
      $TY5 := unify($TY1, $TY2)
      ============================================================
      typecheck-action($LT $CO, $TY1, $ENV) = AR[nor=$TY3, exc=$TY4, no]

[default-function] typecheck-action($LT $CO, $TY1, $ENV) = 
		error("Type error", 
	          [localized("Unable to find semantic function with right type", 
			get-location($LT $CO))])


[feedback-0] yes $ANS = $ANS

[feedback-0] $ANS yes = $ANS

[feedback-1] 

  summary("","",[$ER1, $ER1*, info("Type check OK", [localized("", file($SC))]), $ER2*]) =
	      summary("","",[$ER1, $ER1*, $ER2*])

[feedback-2] 

  summary("","",[$ER1*, info("Type check OK", [localized("", file($SC))]), $ER2, $ER2*]) =
	      summary("","",[$ER1*, $ER2, $ER2*])

 
[summary-1] $ER := $AN,
	    summary("", "",[$ER*]) := gen-summary($ANS)
	    ===========================================
	    gen-summary($AN $ANS) = summary("", "", [$ER, $ER*])

[default-summary-1] $ER := $AN
	    ===========================================
	    gen-summary($AN) = summary("", "", [$ER])

[default-summary-3] 

            gen-summary(yes) = summary("","",[info("Type check OK", [localized("", file(""))])])
