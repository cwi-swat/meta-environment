equations

[tcm-1] defs() == get-function-defs($AM)
	=====================================================
	typecheck($AM, $TI) = gen-summary(yes)

[tcm-1] <sigs($AFS1*), $STS, $DOS1, $DCS> := $TI,	
	defs($FD+) := get-function-defs($AM),
	sigs($AFS2*) := remove-dobble-sigs(sigs($AFS1*),type-info-to-env($TI)),
	$EN1 := set-signatures(type-info-to-env($TI), sigs($AFS2*)),
	$LDF1 := get-dataop-sigs($EN1),
	$LDF2 := initial-dataop-sigs,
	$DOS2 := concat($LDF1, $LDF2),
        $DOS3 := remove-dobble-dataops($DOS2, $EN1),
        $EN2 := set-dataop-sigs($EN1, $DOS3),
	$ANS := typecheck-definitions(defs($FD+), $EN2),
	$SUM := gen-summary($ANS)
	=====================================================
	typecheck($AM, $TI) = $SUM

[tcd-1] $ANS1 := typecheck-definitions(defs($FD), $EN),
	$ANS2 := typecheck-definitions(defs($FD+), $EN)
        ====================================================
        typecheck-definitions(defs($FD, $FD+), $EN) = $ANS1 $ANS2

[tcd-3] 	

      $ET $LT $CO = $AC := $FD,
      sigs($AFS1*, $AFS1, $AFS2*) := get-signatures($EN),
      $LT == get-fun-name($AFS1),
      $ANS1 := check-typing($FD, $AFS1, $EN)
      ===================================================
      typecheck-definitions(defs($FD), $EN) = $ANS1

[check-typing-1]

      <$AT1, $EN2> := typecheck-action($AC, $EN1),
      <$M1, $LC> := solve(vmap(), get-constraints($EN2), $EN2),
      $AT2 := replace-vars($AT1, $M1),
      $LT : $SO -> $AT3 := $AFS,
      $M2 := st(($AT2), ($AT3), $EN1),
      $ANS1 := map-consistent(insert($M2, $M1), $EN1)
      =====================================================================
      check-typing($ET $LT $CO = $AC, $AFS, $EN1) = $ANS1

%%[check-typing-2] 

%%      <$ER, $EN2> := typecheck-action($AC, $EN1)
%%      ========================================================================
%%      check-typing($ET $LT $CO = $AC, $AFS, $EN1) = $ER

%%[default-check-typing] 

%%  check-typing($FD, $AFS, $EN) = 
%%	 error("Type error", 
%%	     [localized("Error in function definitions", get-location($FD))])

[tca-function] 

      sigs($AFS1*, $LT : $SO -> $AT, $AFS2*) := get-signatures($EN)
      ============================================================
      typecheck-action($LT $CO, $EN) = <$AT, $EN>

[default-function] typecheck-action($LT $CO, $EN) = 
		<error("Type error", 
          [localized("Unable to find semantic function with right type", 
			get-location($LT $CO))]), $EN>

[feedback-0] yes $ANS = $ANS

[feedback-0] $ANS yes = $ANS

[feedback-1] 

  summary("","",[$ER1, $ER1*, info("Type check OK", [localized("", file($SC))]), $ER2*]) =
	      summary("","",[$ER1, $ER1*, $ER2*])

[feedback-2] 

  summary("","",[$ER1*, info("Type check OK", [localized("", file($SC))]), $ER2, $ER2*]) =
	      summary("","",[$ER1*, $ER2, $ER2*])

 
[summary-1] $ER := $AN,
	    summary("", "",[$ER*]) := gen-summary($ANS)
	    ===========================================
	    gen-summary($AN $ANS) = summary("", "", [$ER, $ER*])

[default-summary-1] $ER := $AN
	    ===========================================
	    gen-summary($AN) = summary("", "", [$ER])

[default-summary-3] 

            gen-summary(yes) = summary("","",[info("Type check OK", [localized("", file(""))])])
