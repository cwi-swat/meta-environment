module type-check/types

imports 

  basic/Errors
  type-check/pos-annotate
  type-check/types/asdf-types

exports 

sorts 

  ActionResult Answer

exports

context-free syntax

%% Types

  "action" "[" AMusing? AMgiving? AMraising? "]" 	-> ActionType
  "using" Type	 	-> AMusing
  "giving" Type	 	-> AMgiving
  "raising" Type	-> AMraising
  ActionType		-> Type

  "AR" "[" NormalType"," ExceptionalType"," ExcepNoData "]" 
				-> ActionResult
  "nor" "=" Type		-> NormalType
  "exc" "=" Type		-> ExceptionalType
  "yes" | "no"			-> ExcepNoData

  ActionResult  		-> Type

 
%% Type operators

  type-concat(Type, Type) 	-> Type
  unify(Type, Type) 		-> Type

  Type subtype-of Type 			-> Answer
  ExcepNoData answerOr ExcepNoData 	-> ExcepNoData

  highest-type(Type, Type)	-> Type
  lowest-type(Type, Type)	-> Type

%% Error messages

  Error+ 			-> ActionResult
		
lexical syntax

  "value"	-> AtomicType

  "yes"		-> Answer
  "no"		-> Answer

  "empty"	-> Type {prefer}

hiddens 

variables

  "AT"[1-9]?	-> ActionType	
  "END"[1-9]?	-> ExcepNoData
  "TY"[1-9]?	-> Type
  "TY"[1-9]?"*"	-> {Type ","}*
  "SW"[1-9]?	-> TypeWithPosition

sorts

  DataType ActionType NormalType ExceptionalType ExcepNoData 
  AMusing AMgiving AMraising 

