module type-check/types

imports 

  basic/Errors
  type-check/pos-annotate
  type-check/subtype
  basic/Integers

exports 

sorts 

  ActionType Answer TypeVariable ActionTypeVariable

exports

context-free syntax

%% Types

  "std-at"	     -> ActionType

  ActionType "\\" SingleActionType	-> ActionType

  infallible(ActionType)		-> SingleActionType
  closed(ActionType)		-> SingleActionType

%% Type variables

  TypeVariable		-> Type
  ActionTypeVariable	-> ActionType

  "_V"Integer		-> TypeVariable
  "_AV"Integer		-> ActionTypeVariable

%% Type operators

  concat(Type, Type) 	-> Type
  lub(Type, Type, Environment)	-> Type
  glb(Type, Type, Environment)	-> Type

  action-type-and(ActionType, ActionType)	-> ActionType

  highest-type(Type, Type, Environment)	-> Type
  lowest-type(Type, Type, Environment)	-> Type

%% Error messages

  Error+ 			-> ActionType

context-free priorities

  { ActionType "&" ActionType	-> ActionType {left}}
  >
  { ActionType "\\" SingleActionType	-> ActionType }
	
hiddens 

variables

  "$AN"[1-9]?	-> Answer
  "$EN"[0-9]?	-> Environment
  "$TY"[1-9]?	-> Type
  "$AT"[0-9]?	-> ActionType
  "$SAT"[0-9]?	-> SingleActionType
  "$TY"[1-9]?"*"	-> {Type ","}*
  "$STS"[0-9]?		-> List[[<AtomicType, AtomicType>]]

sorts

  DataType ActionType NormalType ExceptionalType ExcepNoData 
  AMusing AMgiving AMraising 

