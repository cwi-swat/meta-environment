module type-check/environment

imports 

  asdf/functions
  type-check/types  

exports

context-free syntax

%% Signatures , Unfold type

  <Signatures, ActionType>	-> Environment

  get-signatures(Environment)  -> Signatures
  get-unfold-type(Environment)	   -> ActionType

  set-signatures(Environment, Signatures)		-> Environment
  set-unfold-type(Environment, ActionType)		-> Environment

  "empty-env"						-> Environment

  get-fun-name(AS-FunctionSig)	-> Literal
  get-using(AS-FunctionSig)	-> Type
  get-giving(AS-FunctionSig)	-> Type
  get-raising(AS-FunctionSig)	-> Type
  remove-using(FunResult)	-> { SingleFunResult "&" }*
  remove-giving(FunResult)	-> { SingleFunResult "&" }*
  remove-raising(FunResult)	-> { SingleFunResult "&" }*
  remove-failing(FunResult)	-> { SingleFunResult "&" }*
  remove-action(FunResult)	-> { SingleFunResult "&" }*
  remove-dobble-sigs(Signatures)	-> Signatures
  join-results({ SingleFunResult "&" }*, FunResult)	-> { SingleFunResult "&" }+


hiddens variables

  "SIGS"[0-9]?	-> Signatures
  "AT"[0-9]?	-> ActionType
  "$LT"[0-9]?		-> Literal
  "$SO"[0-9]?		-> Sort
  "$FR"[0-9]?		-> FunResult
  "$SFR"[0-9]?"+"	-> { SingleFunResult "&" }+
  "$SFR"[0-9]?"*"	-> { SingleFunResult "&" }*
  "$TY"[0-9]?		-> Type
  "$FS"[0-9]?		-> AS-FunctionSig
  "$FS"[0-9]?"*"	-> {AS-FunctionSig ","}*