equations

[empty-1] empty-env = 
	  <sigs(), [], initial-dataop-sigs, action[]>

[type-info-1] 

   type-info-to-env(<$SIGS, $STS, $DOS>) = <$SIGS, $STS, $DOS, action[]>

[get-1] get-signatures(<$SIGS, $STS, $DOS, $AT>) = $SIGS

[get-2] get-subtypes(<$SIGS, $STS, $DOS, $AT>) = $STS

[get-3] get-dataop-sigs(<$SIGS, $STS, $DOS, $AT>) = $DOS

[get-4] get-unfold-type(<$SIGS, $STS, $DOS, $AT>) = $AT

[set-1] set-signatures(<$SIGS1, $STS, $DOS, $AT>, $SIGS2) = 
				      <$SIGS2, $STS, $DOS, $AT>

[set-2] set-subtypes(<$SIGS, $STS1, $DOS, $AT>, $STS2) = 
				      <$SIGS, $STS2, $DOS, $AT>

[set-3] set-dataop-sigs(<$SIGS, $STS, $DOS1, $AT>, $DOS2) = 
				      <$SIGS, $STS, $DOS2, $AT>

[set-4] set-unfold-type(<$SIGS, $STS, $DOS, $AT1>, $AT2) = 
				      <$SIGS, $STS, $DOS, $AT2>

[get-fun-name-1] get-fun-name($LT : $SO -> $FR) = $LT

[get-using-1] get-using($LT : $SO -> $SFR1* & using $TY & $SFR2*) = $TY

[default-get-using-1] get-using($FS) = data

[get-giving-1] get-giving($LT : $SO -> $SFR1* & giving $TY & $SFR2*) = $TY

[default-get-giving-1] get-giving($FS) = empty

[get-raising-1] get-raising($LT : $SO -> $SFR1* & raising $TY & $SFR2*) = $TY

[default-get-raising-1] get-raising($FS) = empty

[terminates-1] terminates($LT : $SO -> $SFR1* & terminates & $SFR2*) = yes

[default-terminates-1] terminates($FS) = no

[remove-using-1] remove-using($SFR1* & using $TY & $SFR2*) = $SFR1* & $SFR2*

[default-remove-using-1] remove-using($SFR+) = $SFR+

[remove-giving-1] remove-giving($SFR1* & giving $TY & $SFR2*) = $SFR1* & $SFR2*

[default-remove-giving-1] remove-giving($SFR+) = $SFR+

[rm-raising-1] remove-raising($SFR1* & raising $TY & $SFR2*) = $SFR1* & $SFR2*

[default-remove-raising-1] remove-raising($SFR+) = $SFR+

[rm-infallible-1] remove-infallible($SFR1* & infallible & $SFR2*) = $SFR1* & $SFR2*

[default-remove-infallible-1] remove-infallible($SFR+) = $SFR+

[rm-action-1] remove-action($SFR1* & Action & $SFR2*) = $SFR1* & $SFR2*

[default-remove-action-1] remove-action($SFR+) = $SFR+

[rm-dobble-sigs-1] 

    $LT : $SO -> $FR1 := $FS1,
    $LT : $SO -> $FR2 := $FS2,
    $SFR1+ := $FR1,
    $FR3 := join-results($SFR1+, $FR2, $STS),
    $FS3 := $LT : $SO -> $FR3
    =======================================================================
    remove-dobble-sigs(sigs($FS1*, $FS1, $FS2*, $FS2, $FS3*), $STS) = 
                    remove-dobble-sigs(sigs($FS1*, $FS3, $FS2*, $FS3*), $STS)

[default-rm-dobble-sigs-2] 

    remove-dobble-sigs(sigs($FS1*), $STS) = sigs($FS1*)

[join-res-1] 
	     
    $TY2 := get-using(test : Test -> $FR),
    $TY3 := lowest-type($TY1, $TY2, $STS)
    ==================================================================
    join-results($SFR1* & using $TY1 & $SFR2*, $FR, $STS) = 
    using $TY3 & join-results($SFR1* & $SFR2*, Action & remove-using($FR),$STS)

[join-res-2] 
	     
    $TY2 := get-giving(test : Test -> $FR),
    $TY3 := highest-type($TY1, $TY2, $STS)
    ==================================================================
    join-results($SFR1* & giving $TY1 & $SFR2*, $FR, $STS) = giving $TY3 & 
	     join-results($SFR1* & $SFR2*, Action & remove-giving($FR), $STS)

[join-res-3] 
	     
    $TY2 := get-raising(test : Test -> $FR),
    $TY3 := highest-type($TY1, $TY2, $STS)
    ==================================================================
    join-results($SFR1* & raising $TY1 & $SFR2*, $FR, $STS) = raising $TY3 & 
	      join-results($SFR1* & $SFR2*, Action & remove-raising($FR), $STS)

[join-res-3] 
	     
    join-results($SFR1* & infallible & $SFR2*, $FR, $STS) = infallible & 
         join-results($SFR1* & $SFR2*, Action & remove-infallible($FR),$STS)

[join-res-4] 
	     
    join-results(Action & $SFR1*, $FR, $STS) = 
            Action & join-results($SFR1*, Action & remove-action($FR), $STS)

[join-res-5]

    join-results(, $SFR+, $STS) = $SFR+

