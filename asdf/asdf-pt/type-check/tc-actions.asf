equations

[tca-bracket] typecheck-action(($A), $EN) = typecheck-action($A, $EN)

[tca-copy] 

      <$TV, $EN2> := new-type-var($EN1)
      ======================================================================
      typecheck-action(copy, $EN1) = <using $TV & giving $TV & std-at, $EN2>

[tca-then] 

      <$AT1, $EN2> := typecheck-action($A1, $EN1),
      <$AT2, $EN3> := typecheck-action($A2, $EN2),
      $TY1 := get-giving($AT1),
      $TY1 != empty,
      $TY2 := get-using($AT2),
      subtype-of($TY1, $TY2, $EN3) == yes,
      $TY3 := lub(get-raising($AT1), get-raising($AT2), $EN3)
      ===================================================================
      typecheck-action($A1 then $A2, $EN1) = <using get-using($AT1) &
					      giving get-giving($AT2) &
					      raising $TY3 & 
					      action-type-and($AT1, $AT2), 
					      $EN3>

[tca-and-then] 

      <$AT1, $EN2> := typecheck-action($A1, $EN1),
      <$AT2, $EN3> := typecheck-action($A2, $EN2),
      $TY1 := glb(get-using($AT1), get-using($AT2), $EN1),
      $TY2 := concat(get-giving($AT1), get-giving($AT2)),
      $TY3 := lub(get-raising($AT1), get-raising($AT2), $EN1)
      =======================================================================
      typecheck-action($A1 and-then $A2, $EN1) = <using $TY1 &
						  giving $TY2 &
						  raising $TY3 &
						  action-type-and($AT1, $AT2), 
						  $EN3>

[tca-and] 

   typecheck-action($A1 and $A2, $EN) = typecheck-action($A1 and-then $A2, $EN)

[tca-result] 

   <$AT1, $EN2> := typecheck-data($D, $EN1)
   =========================================================
   typecheck-action(result $D, $EN1) = <$AT1 & std-at, $EN2> 

[default-result] 

      result $D := $A
      =====================================================
      typecheck-action($A, $EN) = <error("Type error", 
		   [localized("Type error at result", get-location($A))]), $EN>

[tca-give] 

      typecheck-action(give $DO, $EN) = typecheck-dataop($DO, $EN) 

[tca-check] 

     typecheck-action(check $DO, $EN) = typecheck-datapred($DO, $EN) 

[tca-indivisibly] 
 
     typecheck-action(indivisibly $A, $EN) = typecheck-action($A, $EN) 

[tca-throw] 

      <$TV, $EN2> := new-type-var($EN1)
      ======================================================================
      typecheck-action(throw, $EN1) = <using $TV & raising $TV & std-at, $EN2>

[tca-catch] 

      <$AT1, $EN2> := typecheck-action($A1, $EN1),
      <$AT2, $EN3> := typecheck-action($A2, $EN2),
      $TY1 := get-raising($AT1),
      $TY1 != empty,
      $TY2 := get-using($AT2),
      subtype-of($TY1, $TY2, $EN3) == yes,
      $TY3 := lub(get-giving($AT1), get-giving($AT2), $EN3)
      ===================================================================
      typecheck-action($A1 catch $A2, $EN1) = <using get-using($AT1) &
					       giving $TY3 &
					       raising get-raising($AT2) & 
					       action-type-and($AT1, $AT2), 
					       $EN3>

[tca-fail] typecheck-action(fail, $EN) = <std-at \ infallible, $EN>

[tca-else] 

      <$AT1, $EN2> := typecheck-action($A1, $EN1),
      <$AT2, $EN3> := typecheck-action($A2, $EN2),
      $TY1 := glb(get-using($AT1), get-using($AT2), $EN3),
      $TY2 := lub(get-giving($AT1), get-giving($AT2), $EN3),
      $TY3 := lub(get-raising($AT1), get-raising($AT2), $EN3),
      not-in(infallible, $AT1) == yes
      ===================================================================
      typecheck-action($A1 else $A2, $EN1) = <using $TY1 &
					      giving $TY2 &
					      raising $TY3 &
					      action-type-and($AT1, $AT2) &
					      infallible($AT2), 
					      $EN3>

[tca-choose-nat] 

    typecheck-action(choose-nat, $EN) = <giving integer & std-at, $EN>

[tca-unfolding] 

    typecheck-action(unfolding $A, $EN) = fix(3, $A, $EN)

[tca-unfold] 

    typecheck-action(unfold, $EN) = <get-unfold-type($EN), $EN>

[tca-recursively] 

    <$AT1, $EN2> := typecheck-action($A, $EN1),
    get-giving($AT1) == bindings
    =====================================================================
    typecheck-action(recursively $A, $EN1) = <$AT1, $EN2>

[tca-copy-bindings] 

    typecheck-action(copy-bindings, $EN) = <giving bindings & std-at \ closed, $EN>

[tca-scope-1] 

      <$AT1, $EN2> := typecheck-action($A1, $EN1),
      <$AT2, $EN3> := typecheck-action($A2, $EN2),
      bindings == get-giving($AT1),
      $TY1 := glb(get-using($AT1), get-using($AT2), $EN3),
      $TY2 := lub(get-raising($AT1), get-raising($AT2), $EN3)
      ===================================================================
      typecheck-action($A1 scope $A2, $EN1) = <using $TY1 &
				 	       giving get-giving($AT2) &
					       raising $TY2 & 
					       action-type-and($AT1, $AT2) &
					       closed($AT1), 
					       $EN3>

[tca-enact] 	  

     <$ATV, $EN2> := new-action-type-var($EN1)
     ======================================================================
     typecheck-action(enact, $EN1) = <using (using () & $ATV) & 
			              $ATV \ terminates,
				      $EN2>

[default-enact] 

    $A == enact
    ====================================================================
    typecheck-action($A, $EN) = <error("Type error", 
   [localized("Enact expects an action", get-location($A))]), $EN>

[tca-apply] 	  

     <$TV, $EN2> := new-type-var($EN1),
     <$ATV, $EN3> := new-action-type-var($EN2)
     ======================================================================
     typecheck-action(apply, $EN1) = <using (using $TV & $ATV, $TV) & 
				      $ATV \ terminates,
				      $EN3>

[default-tca-apply] 	  

    $A == apply
    =================================================================
    typecheck-action($A, $EN) = <error("Type error", 
       [localized("Apply expects an action and data", get-location($A))]), $EN>

[tca-close]

    <$ATV, $EN2> := new-action-type-var($EN1)
    ===================================================================
    typecheck-action(close, $EN1) = 
			  <using $ATV & giving ($ATV & closed) & std-at, $EN2>

[default-tca-close]
	
    $A == close
    ===================================================================
    typecheck-action($A, $EN) = <error("Type error", 
       [localized("Close expects an action", get-location($A))]), $EN>


[tca-create] 

    typecheck-action(create, $EN) = <using storable & giving cell & 
				     std-at \ uncreative, $EN>

[default-create] 

    $A == create
    ====================================================================
    typecheck-action($A, $EN) = <error("Type error", 
        [localized("Create expects a storable", get-location($A))]), $EN>

[tca-update] 

    typecheck-action(update, $EN) = <using (cell, storable) & giving () &
				     raising () & std-at \ ineffective, $EN>

[default-update] 

    $A == update
    ============================================================
    typecheck-action($A, $EN) = <error("Type error", 
   [localized("Update expects a cell and a storable", get-location($A))]), $EN>

[tca-inspect] 

    typecheck-action(inspect, $EN) = <using cell & giving storable &
				      raising () & std-at \ stable, $EN>

[default-inspect]

    $A == inspect
    ===========================================================
    typecheck-action($A, $EN) = <error("Type error", 
        [localized("Inspect expects a cell", get-location($A))]), $EN>



[default-infix-action] 

    infixaction($CH+) := $IA,
    $SC := "Type error at " || strcon(""" $CH+ """)
    ============================================================
    typecheck-action($A1 $IA $A2, $EN) = <error("Type error", 
        [localized($SC, get-location($IA))]), $EN>

