equations

[tca-bracket] typecheck-action(($A), $TY, $EN) = typecheck-action($A, $TY, $EN)

[tca-copy] typecheck-action(copy, $TY, $EN) = AR[nor=$TY, exc=empty, no]

[tca-skip] typecheck-action(skip, $TY, $EN) = AR[nor=(), exc=empty, no]

[tca-then] 

      AR[nor=$TY2, exc=$TY3, $ANS1] := typecheck-action($A1, $TY1, $EN),
      $TY2 != empty,
      AR[nor=$TY4, exc=$TY5, $ANS2] := typecheck-action($A2, $TY2, $EN),
      $TY6 := unify($TY3, $TY5, get-subtypes($EN))
      ==========================================================
      typecheck-action($A1 then $A2, $TY1, $EN) = 
			AR[nor=$TY4, exc=$TY6, $ANS1 answerOr $ANS2] 

[tca-then] 

      AR[nor=$TY2, exc=$TY3, $ANS1] := typecheck-action($A1, $TY1, $EN),
      $TY2 != empty,
      $ER+ := typecheck-action($A2, $TY2, $EN)
      ==========================================
      typecheck-action($A1 then $A2, $TY1, $EN) = $ER+

[tca-then] 

      AR[nor=empty, exc=$TY2, $ANS1] := typecheck-action($A1, $TY1, $EN)
      ====================================================================
      typecheck-action($A1 then $A2, $TY1, $EN) = AR[nor=empty, exc=$TY2, $ANS1] 


[tca-then] 

      $ER+ := typecheck-action($A1, $TY1, $EN)
      ==========================================
      typecheck-action($A1 then $A2, $TY1, $EN) = $ER+


[tca-and-then] 

      AR[nor=$TY2, exc=$TY3, $ANS1] := typecheck-action($A1, $TY1, $EN),
      AR[nor=$TY4, exc=$TY5, $ANS2] := typecheck-action($A2, $TY1, $EN),
      $TY6 := type-concat($TY2, $TY4),
      $TY7 := unify($TY3, $TY5, get-subtypes($EN))
      =====================================================
      typecheck-action($A1 and-then $A2, $TY1, $EN) = 
		   AR[nor=$TY6, exc=$TY7, $ANS1 answerOr $ANS2] 

[tca-and-then] 

      $ER+ := typecheck-action($A1, $TY1, $EN)
      ==============================================
      typecheck-action($A1 and-then $A2, $TY1, $EN) = $ER+

[tca-and-then] 

      $ER+ := typecheck-action($A2, $TY1, $EN)
      ==============================================
      typecheck-action($A1 and-then $A2, $TY1, $EN) = $ER+

[tca-and] typecheck-action($A1 and $A2, $TY1, $EN) = 
	  typecheck-action($A1 and-then $A2, $TY1, $EN)

[tca-result] 

      $TY2 := typecheck-data($D, $EN)  
      ================================================================
      typecheck-action(result $D, $TY1, $EN) = AR[nor=$TY2, exc=empty, no] 


[default-result] 

      result $D := $A
      =====================================================
      typecheck-action($A, $TY1, $EN) = error("Type error", 
		   [localized("Type error at result", get-location($A))])
		

[tca-give] 

        typecheck-action(give $DO, $TY, $EN) = typecheck-dataop($DO, $TY, $EN) 

[tca-check] 

     typecheck-action(check $DO, $TY, $EN) = typecheck-datapred($DO, $TY, $EN) 

[tca-indivisibly] typecheck-action(indivisibly $A, $TY, $EN) = 
			typecheck-action($A, $TY, $EN) 

[tca-throw] typecheck-action(throw, $TY, $EN) = AR[nor=empty, exc=$TY, no]

[tca-catch] 

    AR[nor=$TY2, exc=$TY3, $ANS1] := typecheck-action($A1, $TY1, $EN),
    $TY3 != empty, 
    AR[nor=$TY4, exc=$TY5, $ANS2] := typecheck-action($A2, $TY3, $EN),
    $TY6 := unify($TY2, $TY4, get-subtypes($EN)),
    $ANS3 := $ANS1 answerOr $ANS2
    ===================================================================
    typecheck-action($A1 catch $A2, $TY1, $EN) = AR[nor=$TY6, exc=$TY5, $ANS3] 

[tca-catch] 

    AR[nor=$TY2, exc=$TY3, $ANS1] := typecheck-action($A1, $TY1, $EN),
    $TY3 != empty, 
    $ER+ := typecheck-action($A2, $TY3, $EN)
    ===================================================
    typecheck-action($A1 catch $A2, $TY1, $EN) = $ER+

[tca-catch] 

    $ER+ := typecheck-action($A1, $TY1, $EN)
    ===================================================
    typecheck-action($A1 catch $A2, $TY1, $EN) = $ER+


[tca-catch] 

    AR[nor=$TY2, exc=empty, $ANS1] := typecheck-action($A1, $TY1, $EN)
    ===================================================================
    typecheck-action($A1 catch $A2, $TY1, $EN) = AR[nor=$TY2, exc=empty,$ANS1] 
       

[default-tca-catch] 

    AR[nor=$TY2, exc=$TY3, $ANS1] := typecheck-action($A1, $TY1, $EN),
    AR[nor=$TY4, exc=$TY5, $ANS2] := typecheck-action($A2, (), $EN),
    $TY6 := unify($TY2, $TY4, get-subtypes($EN)),
    $ANS3 := $ANS1 answerOr $ANS2
    ===================================================================
    typecheck-action($A1 catch $A2, $TY1, $EN) = AR[nor=$TY6, exc=$TY5, $ANS3] 

[default-tca-catch] 

    AR[nor=$TY2, exc=$TY3, $ANS1] := typecheck-action($A1, $TY1, $EN),
    $ER+ := typecheck-action($A2, (), $EN)
    ==========================================================
    typecheck-action($A1 catch $A2, $TY1, $EN) = $ER+

[tca-err] typecheck-action(err, $TY, $EN) = AR[nor=empty, exc=(), no]

[tca-fail] typecheck-action(fail, $TY, $EN) = AR[nor=empty, exc=empty, yes]

[tca-maybe-1] 

  AR[nor=$TY1, exc=$TY2, $ANS] := typecheck-action($A, $TY, $EN),
  $TY2 != empty
  ==================================================
  typecheck-action(maybe $A, $TY, $EN) = AR[nor=$TY1, exc=empty, yes]


[tca-maybe-2] 

  AR[nor=$TY1, exc=empty, $ANS] := typecheck-action($A, $TY, $EN)
  ==================================================
  typecheck-action(maybe $A, $TY, $EN) = AR[nor=$TY1, exc=empty, $ANS]

[tca-maybe-3] 

  $ER+ := typecheck-action($A, $TY, $EN)
  ==================================================
  typecheck-action(maybe $A, $TY, $EN) = $ER+


[tca-else] 


    AR[nor=$TY2, exc=$TY3, $ANS1] := typecheck-action($A1, $TY1, $EN),
    AR[nor=$TY4, exc=$TY5, $ANS2] := typecheck-action($A2, $TY1, $EN),
    $TY6 := unify($TY2, $TY4, get-subtypes($EN)),
    $TY7 := unify($TY3, $TY5, get-subtypes($EN))
    ==================================================================
    typecheck-action($A1 else $A2, $TY1, $EN) = AR[nor=$TY6, exc=$TY7, $ANS2]

[tca-else] 

    AR[nor=$TY2, exc=$TY3, $ANS1] := typecheck-action($A1, $TY1, $EN),
    $ER+ := typecheck-action($A2, $TY1, $EN)
    ==================================================
    typecheck-action($A1 else $A2, $TY1, $EN) = $ER+

[tca-else] 

    $ER+ := typecheck-action($A1, $TY1, $EN)
    ==========================================
    typecheck-action($A1 else $A2, $TY1, $EN) = $ER+
	

[tca-choose-nat] 

    typecheck-action(choose-nat, $TY, $EN) = AR[nor=integer, exc=empty, no]

[tca-unfolding] 

    typecheck-action(unfolding $A, $TY, $EN) = typecheck-action($A, $TY, $EN)

[tca-unfold] typecheck-action(unfold, $TY, $EN) = AR[nor=data, exc=data, yes]

[tca-recursively] 

    AR[nor=$TY1, exc=$TY2, $ANS] := typecheck-action($A, $TY, $EN),
    subtype-of($TY1, bindings, get-subtypes($EN)) == yes
    =====================================================================
    typecheck-action(recursively $A, $TY, $EN) = AR[nor=$TY1, exc=$TY2, $ANS]

[default-tca-recursively] 

    $ER+ := typecheck-action($A, $TY, $EN)
    =====================================================================
    typecheck-action(recursively $A, $TY, $EN) = $ER+

[tca-copy-bindings] 

    typecheck-action(copy-bindings, $TY, $EN) = AR[nor=bindings, exc=empty, no]

[tca-scope-1] 

    AR[nor=$TY1, exc=$TY2, $ANS1] := typecheck-action($A1, $TY, $EN),
    AR[nor=$TY3, exc=$TY4, $ANS2] := typecheck-action($A2, $TY, $EN),
    subtype-of($TY1, bindings, get-subtypes($EN)) == yes,
    $TY5 := unify($TY2, $TY4, get-subtypes($EN)),
    $ANS3 := $ANS1 answerOr $ANS2
    ===================================================================
    typecheck-action($A1 scope $A2, $TY, $EN) = AR[nor=$TY3, exc=$TY5, $ANS3]

[tca-scope-2] 

    AR[nor=$TY1, exc=$TY2, $ANS1] := typecheck-action($A1, $TY, $EN),
    subtype-of($TY1, bindings, get-subtypes($EN)) == yes,
    $ER+ := typecheck-action($A2, $TY1, $EN)
    ====================================================
    typecheck-action($A1 scope $A2, $TY, $EN) = $ER+

[tca-scope-2] 

    AR[nor=empty, exc=$TY2, $ANS1] := typecheck-action($A1, $TY, $EN)
    ====================================================
    typecheck-action($A1 scope $A2, $TY, $EN) = AR[nor=empty, exc=$TY2, $ANS1]

[tca-scope-3] 

    $ER+ := typecheck-action($A1, $TY1, $EN)
    ===========================================
    typecheck-action($A1 scope $A2, $TY1, $EN) = $ER+
	    

[tca-enact] 	  

    subtype-of($TY, action, get-subtypes($EN))  == yes
    ================================================================
    typecheck-action(enact, $TY, $EN) = AR[nor=data, exc=data, yes] 


[default-enact] 

    $A == enact
    ====================================================================
    typecheck-action($A, $TY, $EN) = error("Type error", 
   [localized("Enact expects an action", get-location($A))])

[tca-apply] 	  

    subtype-of($TY1, action, get-subtypes($EN))  == yes
    =================================================================
    typecheck-action(apply, ($TY1, $TY*), $EN) = AR[nor=data, exc=data, yes] 

[default-tca-apply] 	  

    $A == apply
    =================================================================
    typecheck-action($A, ($TY1, $TY*), $EN) = error("Type error", 
       [localized("Apply expects an action and data", get-location($A))])


[tca-close]
	
    subtype-of($TY1, action, get-subtypes($EN))  == yes
    ===================================================================
    typecheck-action(close, $TY1, $EN) = AR[nor=$TY1, exc=empty, no]

[default-tca-close]
	
    $A == close
    ===================================================================
    typecheck-action($A, $TY1, $EN) = error("Type error", 
       [localized("Close expects an action", get-location($A))])


[tca-create] 

    subtype-of($TY, storable, get-subtypes($EN)) == yes 
    ================================================================
    typecheck-action(create, $TY, $EN) = AR[nor=cell($TY), exc=empty, no]  


[default-create] 

    $A == create
    ====================================================================
    typecheck-action($A, $TY, $EN) = error("Type error", 
        [localized("Create expects a storable", get-location($A))])

[tca-update] 

    subtype-of($TY, (cell, storable), get-subtypes($EN)) == yes 
    ============================================================
    typecheck-action(update, $TY, $EN) = AR[nor=(), exc=(), no]

[default-update] 

    $A == update
    ============================================================
    typecheck-action($A, $TY, $EN) = error("Type error", 
        [localized("Update expects a cell and a storable", get-location($A))])


[tca-14] typecheck-action(inspect, cell($TY), $EN) = AR[nor=$TY, exc=(), no]

[tca-14] 

    subtype-of($TY, cell, get-subtypes($EN)) == yes 
    ====================================================================
    typecheck-action(inspect, $TY, $EN) = AR[nor=storable, exc=empty, no]
	 

[default-inspect]

    $A == inspect
    ===========================================================
    typecheck-action($A, $TY, $EN) = error("Type error", 
        [localized("Inspect expects a cell", get-location($A))])



[default-infix-action] 

    infixaction($CH+) := $IA,
    $SC := "Type error at " || strcon(""" $CH+ """)
    ============================================================
    typecheck-action($A1 $IA $A2, $TY1, $EN) = error("Type error", 
        [localized($SC, get-location($IA))])

