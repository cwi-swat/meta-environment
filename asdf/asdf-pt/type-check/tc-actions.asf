equations

[std-at-1] std-at = infallible & closed & terminates & stable & 
		    ineffective & uncreative

[tca-bracket] typecheck-action(($A), $EN) = typecheck-action($A, $EN)

[tca-copy] 

   <$TV, $EN2> := new-type-var($EN1)
   ======================================================================
   typecheck-action(copy, $EN1) = <trans-act-type(using $TV & 
				   giving $TV & raising empty & std-at), $EN2>

[tca-then] 

   $SU := localized("Problem at then", get-location($A2)),
   <$AT1, $EN2> := typecheck-action($A1, $EN1),
   <$AT2, $EN3> := typecheck-action($A2, $EN2),
   $TY1 := get-giving($AT1),
   $EN4 := not-equal($TY1, empty, $SU, $EN3),
   $TY2 := get-using($AT2),
   $EN5 := subtype-of($TY1, $TY2, $SU, $EN4),
   <$TY3, $EN6> := lub(get-raising($AT1), get-raising($AT2), $SU, $EN5),
   <$AT3, $EN7> := action-type-and($AT1, $AT2, $SU, $EN6),
   $AT4 := set-using(set-giving(set-raising($AT3, $TY3), 
				get-giving($AT2)), get-using($AT1))
   ===================================================================
   typecheck-action($A1 then $A2, $EN1) = <$AT4, $EN7>

[tca-and-then] 

   $SU := localized("Problem at and-then", get-location($A2)),
   <$AT1, $EN2> := typecheck-action($A1, $EN1),
   <$AT2, $EN3> := typecheck-action($A2, $EN2),
   <$TY1, $EN4> := glb(get-using($AT1), get-using($AT2), $SU, $EN3),
   <$TY2, $EN5> := concat(get-giving($AT1), get-giving($AT2), $SU, $EN4),
   <$TY3, $EN6> := lub(get-raising($AT1), get-raising($AT2), $SU, $EN5),
   <$AT3, $EN7> := action-type-and($AT1, $AT2, $SU, $EN6),
   $AT4 := set-using(set-giving(set-raising($AT3, $TY3), $TY2), $TY1)
   =======================================================================
   typecheck-action($A1 and-then $A2, $EN1) = <$AT4, $EN7>

[tca-and] 

   typecheck-action($A1 and $A2, $EN) = typecheck-action($A1 and-then $A2, $EN)

[tca-result] 

   <$SAT1, $EN2> := typecheck-data($D, $EN1)
   =========================================================
   typecheck-action(result $D, $EN1) = 
     <trans-act-type(using data & $SAT1 & raising empty & std-at), $EN2> 

[default-result] 

   result $D := $A
   =====================================================
   typecheck-action($A, $EN) = <error("Type check report", 
		   [localized("Type error at result", get-location($A))]), $EN>

[tca-give] 

   typecheck-action(give $DO, $EN) = typecheck-dataop($DO, $EN) 

[tca-check] 

   typecheck-action(check $DO, $EN) = typecheck-datapred($DO, $EN) 

[tca-indivisibly] 
 
   typecheck-action(indivisibly $A, $EN) = typecheck-action($A, $EN) 

[tca-choose-nat]

   typecheck-action(choose-nat, $EN) = 
        <trans-act-type(using data & giving integer & std-at), $EN>

[tca-unfolding] 

   <$AT2, $EN2> := action-of-vars($EN1),
   $EN3 := set-unfold-type($EN2, $AT2)
   =================================================================
   typecheck-action(unfolding $A, $EN1) = typecheck-action($A, $EN3)

[tca-unfold] 

   $A == unfold,
   $SU := localized("Problem at unfold", get-location($A)),
   $AT := get-unfold-type($EN1),
   $EN2 := not-in(terminates, $AT, $SU, $EN1)
   =============================================================
   typecheck-action($A, $EN1) = <$AT, $EN2>

[tca-throw] 

   <$TV, $EN2> := new-type-var($EN1)
   ======================================================================
   typecheck-action(throw, $EN1) = <trans-act-type(using $TV & 
				 giving empty & raising $TV & std-at), $EN2>

[tca-catch] 

   $SU := localized("Problem at catch", get-location($A2)),
   <$AT1, $EN2> := typecheck-action($A1, $EN1),
   <$AT2, $EN3> := typecheck-action($A2, $EN2),
   $TY1 := get-raising($AT1),
   $EN4 := not-equal($TY1, empty, $SU, $EN3),
   $TY2 := get-using($AT2),
   $EN5 := subtype-of($TY1, $TY2, $SU, $EN4),
   <$TY3, $EN6> := lub(get-giving($AT1), get-giving($AT2), $SU, $EN5),
   <$AT3, $EN7> := action-type-and($AT1, $AT2, $SU, $EN6),
   $AT4 := set-using(set-giving(set-raising($AT3, get-raising($AT2)), 
				$TY3), get-using($AT1))
   ===================================================================
   typecheck-action($A1 catch $A2, $EN1) = <$AT4, $EN7>

[tca-fail] typecheck-action(fail, $EN) = <trans-act-type(using data & 
		     giving empty & raising empty & std-at \ infallible), $EN>

[tca-else] 

   $SU := localized("Problem at else", get-location($A2)),
   <$AT1, $EN2> := typecheck-action($A1, $EN1),
   <$AT2, $EN3> := typecheck-action($A2, $EN2),
   <$TY1, $EN4> := glb(get-using($AT1), get-using($AT2), $SU, $EN3),
   <$TY2, $EN5> := lub(get-giving($AT1), get-giving($AT2), $SU, $EN4),
   <$TY3, $EN6> := lub(get-raising($AT1), get-raising($AT2), $SU, $EN5),
   $EN7 := not-in(infallible, $AT1, $SU, $EN6),
   <$AT3, $EN8> := action-type-and($AT1, $AT2, $SU, $EN7),
   $AT4 := infallible($AT2, $AT3),
   $AT5 := set-using(set-giving(set-raising($AT4, $TY3), $TY2), $TY1)
   ===================================================================
   typecheck-action($A1 else $A2, $EN1) = <$AT5, $EN8>

[tca-recursively] 

   $SU := localized("Problem at recursively", get-location($A)),
   <$AT1, $EN2> := typecheck-action($A, $EN1),
   $EN3 := subtype-of(get-giving($AT1), bindings, $SU, $EN2)
   =====================================================================
   typecheck-action(recursively $A, $EN1) = <$AT1, $EN3>

[tca-copy-bindings] 

   typecheck-action(copy-bindings, $EN) = 
  <trans-act-type(using data & giving bindings & std-at \ closed), $EN>

[tca-scope-1] 

   $SU := localized("Problem at scope", get-location($A2)),
   <$AT1, $EN2> := typecheck-action($A1, $EN1),
   <$AT2, $EN3> := typecheck-action($A2, $EN2),
   $EN4 := subtype-of(get-giving($AT1), bindings, $SU, $EN3),
   <$TY1, $EN5> := glb(get-using($AT1), get-using($AT2), $SU, $EN4),
   <$TY2, $EN6> := lub(get-raising($AT1), get-raising($AT2), $SU, $EN5),
   <$AT3, $EN7> := action-type-and($AT1, $AT2, $SU, $EN6),
   $AT4 := closed($AT1, $AT3),
   $AT5 := set-using(set-giving(set-raising($AT4, $TY2),get-giving($AT2)),$TY1)
   ===================================================================
   typecheck-action($A1 scope $A2, $EN1) = <$AT5, $EN7>

[tca-apply] 	  

     $A == apply,
     $SU := localized("Problem at apply", get-location($A)),
     <$AT1, $EN2> := action-of-vars($EN1),
     $AT2 := set-using($AT1, (($AT1), get-using($AT1))) \ terminates
     ======================================================================
     typecheck-action($A, $EN1) = <$AT2, $EN2>

[default-tca-apply] 	  

    $A == apply
    =================================================================
    typecheck-action($A, $EN) = <error("Type check report", 
       [localized("Apply expects an action and data", get-location($A))]), $EN>

[tca-close]

    <$AT1, $EN2> := action-of-vars($EN1),
    act($TY1, $TY2, $TY3, $TY4, $TY5, $TY6, $TY7, $TY8, $TY9) := $AT1,
    $AT2 := act($TY1, $TY2, $TY3, $TY4, empty, $TY6, $TY7, $TY8, $TY9)   
    ===================================================================
    typecheck-action(close, $EN1) = <trans-act-type(using ($AT1) & 
			    giving ($AT2) & raising empty & std-at), $EN2>

[default-tca-close]
	
    $A == close
    ===================================================================
    typecheck-action($A, $EN) = <error("Type check report", 
       [localized("Close expects an action", get-location($A))]), $EN>


[tca-create] 

    typecheck-action(create, $EN) = <trans-act-type(using storable & 
				  giving cell & std-at \ uncreative), $EN>

[default-create] 

    $A == create
    ====================================================================
    typecheck-action($A, $EN) = <error("Type check report", 
        [localized("Create expects a storable", get-location($A))]), $EN>

[tca-update] 

    typecheck-action(update, $EN) = 
        <trans-act-type(using (cell, storable) & giving () &
				     raising () & std-at \ ineffective), $EN>

[default-update] 

    $A == update
    ============================================================
    typecheck-action($A, $EN) = <error("Type check report", 
   [localized("Update expects a cell and a storable", get-location($A))]), $EN>

[tca-inspect] 

    typecheck-action(inspect, $EN) = <trans-act-type(using cell & 
			  giving storable & raising () & std-at \ stable), $EN>

[default-inspect]

    $A == inspect
    ===========================================================
    typecheck-action($A, $EN) = <error("Type check report", 
        [localized("Inspect expects a cell", get-location($A))]), $EN>



[default-infix-action] 

    infixaction($CH+) := $IA,
    $SC := "Type error at " || strcon(""" $CH+ """)
    ============================================================
    typecheck-action($A1 $IA $A2, $EN) = <error("Type check report", 
        [localized($SC, get-location($IA))]), $EN>

