#! /bin/sh

# {{{ variables

     prefix=__PREFIX__
exec_prefix=${prefix}/libexec
     bindir=${prefix}/bin
    datadir=${prefix}/share
    PKGDATA=${datadir}/sdf-apigen
        PRG=`basename $0`
     APIGEN=__APIGEN__

# }}}

# {{{ usage()

usage() {
cat << ENDCAT >&2
Usage: $PRG -i <sdf2-specification> [options]

Parameters:
  
  -i | --input  <FILE>    specify input specification      [?]
  -f | --folding          enable folding mode              [off]
  -o | --output <DIR>     specify basedir for output       [.]
  -p | --package <STR>    specify package                  [""]
  -t | --visitable        visitable enabled                [off]
  -j | --jtom             generate jtom interface          [off]
  -e | --expand-cons      propagate cons-annotations       [on]
  -r | --remove-cons      remove cons-annotations          [off]
  -I | --imploded         create API for imploded terms    [off]
  -v | --verbose          be verbose during generation     [off]
  -h | --help             display this information

Example: ${PRG} -r -i Booleans.sdf -p booleans

ENDCAT
}

# }}}
# {{{  info()

info () {
  if [ $VERBOSE -gt 0 ]; then
    echo $* >&2
   fi
}

# }}}
# {{{  error()

error() {
  echo "${PRG}: $*" >&2
  exit 1
}

# }}}
# {{{  require()

require() {
  [ -f $1 ] || error "no such file: $1"
}

# }}}

# {{{  default settings

# settings/options
INPUT=""
OUTPUT="."
VERBOSE=0
IMPLODEDOPT=""
CONSOPT='-e'
JTOMOPT=""
JTOM=0
FOLDINGOPT=""
VISITABLEOPT=""
GENBOTTOMSORT=1

# binaries
SDF2TOADT=${bindir}/sdf2-to-adt
ADTTOJAVA=${APIGEN}/bin/adt-to-java
# }}}

# {{{  handle command line options

if [ $# -eq 0 ]; then
  usage
  exit 1
fi

while [ $# -gt 0 ]
do
  case $1 in
    -f | --folding)
      FOLDINGOPT='-f';;

    -e | --expand-cons)
      CONSOPT='-e';;

    -r | --remove-cons)
      CONSOPT='-r';;

    -i | --input)
      shift; INPUT=$1 ;;

    -o | --output)
      shift; OUTPUT=$1 ;;

    -p | --package)
      shift; PACKAGE=$1 ;;

    -t | --visitable)
      VISITABLEOPT='-t' ;;

    -j | --jtom)
      JTOMOPT='-j'
      JTOM=1 ;;

    -I | --imploded)
      IMPLODEDOPT='-I'
      GENBOTTOMSORT=0 ;;

    -v | --verbose)
      VERBOSE=1 ;;

    -h | --help)
      usage; exit 0 ;;

    *)
      error "unknown option: $1"
  esac
  shift
done

# }}}

# {{{ sanity checks and variable setup

if [ "a${INPUT}" = "a" ]; then
  error "no input file specified (use -i <file>)"
else
  require ${INPUT}
fi

BASE=`basename ${INPUT} .sdf`
BASE=`basename ${BASE} .def`
# }}}

# {{{  err()

err() {
  error "Bailing out!"
}

# }}}
# {{{  generate Java from SDF
info "Generating Java code in ${OUTPUT}/${PACKAGE} from ${INPUT}:"

info " generating ADT "
${SDF2TOADT} ${IMPLODEDOPT} ${CONSOPT} ${VERBOSEOPT} \
             -i ${INPUT} -o ${BASE}.adt || err

info " generating CHARLIST.java"
if [ ${GENBOTTOMSORT} -gt 0 ]; then
  info " generating API for bottom sorts"
  sed "s@__PACKAGE__@${PACKAGE}@g" < ${PKGDATA}/CHARLIST.java.template > \
    ${OUTPUT}/${PACKAGE}/CHARLIST.java
  sed "s@__PACKAGE__@${PACKAGE}@g" < ${PKGDATA}/CHARLIST_String.java.template > \
      ${OUTPUT}/${PACKAGE}/CHARLIST_String.java
fi

info " generating java from ADT "
${ADTTOJAVA} ${FOLDINGOPT} ${JTOMOPT} ${VERBOSEOPT} ${VISITABLEOPT} \
             -i ${BASE}.adt -o ${OUTPUT} -p ${PACKAGE} 

if [ ${JTOM} -gt 0 ]; then
  info "adding CHARLIST to Tom signature file"
  cat ${PKGDATA}/CHARLIST.t.template >> ${OUTPUT}/${PACKAGE}/${BASE}.t
fi

# }}}
