#! /bin/sh

# {{{ variables

     prefix=__PREFIX__
     bindir=__BINDIR__
    PKGDATA=__PKGDATA__
        PRG=`basename $0`
     APIGEN=__APIGEN__
    SDF2ADT=__SDF2ADT__

# }}}

# {{{ usage()

usage() {
cat << ENDCAT >&2
Usage: $PRG -i <sdf2-specification> [options]

Parameters:
 
  -b | --bottom           generate bottom sorts only       [off]
  -i | --input  <FILE>    specify input specification      [?]
  -o | --output <STEM>    generate <STEM>.[ch] etc.        [improvised]
  -P | --prefix <STR>     specify API-prefix               [""]
  -e | --expand-cons      propagate cons-annotations       [on]
  -r | --remove-cons      remove cons-annotations          [off]
  -I | --imploded         create API for imploded terms    [off]
  -C | --compat-term      generate old term conv. macros   [off]
  -t | --no-timestamp     do not output timestamps         [off]
  -v | --verbose          be verbose during generation     [off]
  -h | --help             display this information

Example: ${PRG} -r -i Booleans.sdf -p booleans

ENDCAT
}

# }}}
# {{{  info()

info () {
  if [ $VERBOSE -gt 0 ]; then
    echo $* >&2
   fi
}

# }}}
# {{{  error()

error() {
  echo "${PRG}: $*" >&2
  exit 1
}

# }}}
# {{{  require()

require() {
  [ -f $1 ] || error "no such file: $1"
}

# }}}

# {{{  default settings

# settings/options
ONLYBOTTOM=0
INPUT=""
OUTPUT=""
VERBOSE=0
VERBOSEOPT=""
IMPLODEDOPT=""
CONSOPT='-e'
PREFIX=""
COMPATTERMOPT=""
TIMESTAMPOPT=""
GENBOTTOMSORT=1

# binaries
SDF2TOADT=${bindir}/sdf2-to-adt
ADTTOC=${APIGEN}/bin/adt-to-c
# }}}

# {{{  handle command line options

if [ $# -eq 0 ]; then
  usage
  exit 1
fi

while [ $# -gt 0 ]
do
  case $1 in
    -b | --bottom)
      ONLYBOTTOM=1;;

    -C | --compat-term)
      COMPATTERMOPT='-C';;

    -e | --expand-cons)
      CONSOPT='-e';;

    -r | --remove-cons)
      CONSOPT='-r';;

    -i | --input)
      shift; INPUT=$1 ;;

    -o | --output)
      shift; OUTPUT=$1 ;;

    -P | --prefix)
      shift; PREFIX=$1 ;;

    -t | --no-timestamp)
      TIMESTAMPOPT='-t';;

    -I | --imploded)
      IMPLODEDOPT='-I'
      GENBOTTOMSORT=0 ;;

    -v | --verbose)
      VERBOSE=1
      VERBOSEOPT='-v' ;;

    -h | --help)
      usage; exit 0 ;;

    *)
      error "unknown option: $1"
  esac
  shift
done

# }}}

# {{{ sanity checks and variable setup

if [ ${ONLYBOTTOM} -eq 0 ]; then
  if [ "a${INPUT}" = "a" ]; then
    error "no input file specified (use -i <file>)"
  else
    require ${INPUT}
  fi

fi

if [ "a${OUTPUT}" = "a" ]; then
  BASE=`basename ${INPUT} .sdf`
  BASE=`basename ${BASE} .def`
  OUTPUT=${BASE}
fi

# }}}

# {{{  err()

err() {
  error "Bailing out!"
}

# }}}
# {{{  generate C from SDF
set -x
if [ ${ONLYBOTTOM} -eq 0 ]; then
  info " generating ${OUTPUT}.adt "
  ${SDF2TOADT} ${IMPLODEDOPT} ${CONSOPT} ${VERBOSEOPT} \
             -i ${INPUT} -o ${OUTPUT}.adt || err
fi

if [ ${GENBOTTOMSORT} -gt 0 ]; then
  info " generating ${OUTPUT}.pro"
  sed "s@__NAME__@${PREFIX}@g" < ${PKGDATA}/CHARLIST.h.template > \
    ${OUTPUT}.pro
  info " generating ${OUTPUT}_bottom.c"
  sed "s@__NAME__@${PREFIX}@g;\
       s@__STEM__@${OUTPUT}@g" < ${PKGDATA}/CHARLIST.c.template > \
    ${OUTPUT}_bottom.c
fi

if [ ${ONLYBOTTOM} -eq 0 ]; then
  info " generating C from ADT "
  ${ADTTOC} ${COMPATTERMOPT} ${TIMESTAMPOPT} ${VERBOSEOPT} \
               -i ${OUTPUT}.adt -o ${OUTPUT} -P ${PREFIX} -p ${OUTPUT}.pro 
fi

# }}}
