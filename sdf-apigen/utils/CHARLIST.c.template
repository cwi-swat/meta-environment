#ifndef __NAME__CHARLIST_IMPL
#define __NAME__CHARLIST_IMPL
#include <string.h>

typedef struct ___NAME__CHARLIST *__NAME__CHARLIST;
typedef struct ATerm ___NAME__CHARLIST;

ATermList __NAME__convertStringToChars(char *str)
{
  int i;
  ATermList list = ATempty;

  for(i = strlen(str) - 1; i >= 0; i--) {
    list = ATinsert(list, (ATerm) ATmakeInt(str[i]));
  }

  return list;
}

char * __NAME__convertCharsToString(ATermList list)
{
  int i;
  char *tmp = (char*) malloc((1 + ATgetLength(list)) * sizeof(char));

  for(i = 0; !ATisEmpty(list); list = ATgetNext(list), i++) {
    tmp[i] = ATgetInt((ATermInt) ATgetFirst(list));
  }

  return tmp;
}

ATbool __NAME__isValidCHARLIST(__NAME__CHARLIST arg)
{
  return ATtrue;
}

ATbool __NAME__isCHARLISTString(__NAME__CHARLIST arg)
{
  return ATtrue;
}

char*  __NAME__getCHARLISTString(__NAME__CHARLIST arg)
{
  return __NAME__convertCharsToString((ATermList) arg);
}

__NAME__CHARLIST  __NAME__setCHARLISTString(__NAME__CHARLIST arg, char *str)
{
  return (__NAME__CHARLIST) __NAME__convertStringToChars(str);
}

ATerm  __NAME__CHARLISTToTerm(__NAME__CHARLIST arg)
{
  return (ATerm) arg;
}

__NAME__CHARLIST __NAME__CHARLISTFromTerm(ATerm trm)
{
  return (__NAME__CHARLIST) trm;
}

__NAME__CHARLIST __NAME__makeCHARLISTString(char *str)
{
  return (__NAME__CHARLIST) __NAME__convertStringToChars(str);
}


#endif
