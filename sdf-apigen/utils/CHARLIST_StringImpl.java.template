__PACKAGEDECL__

public class CHARLIST_StringImpl
extends CHARLIST
{
  static private aterm.ATerm pattern = null;
  static private aterm.ATerm listpattern = null;

  protected aterm.ATerm getPattern() {
    return pattern;
  }
  private static int index_string = 0;

  public Object clone() {
    CHARLIST_String clone = new CHARLIST_String();
     clone.init(hashCode(), getAnnotations(), getAFun(), getArgumentArray());
    return clone;
  }

  protected aterm.ATermAppl make(aterm.AFun fun, aterm.ATerm[] i_args, aterm.ATermList annos) {
    return get__NAME__Factory().makeCHARLIST_String(fun, i_args, annos);
  }
  static public void initializePattern()
  {
    pattern = getStaticFactory().parse("<str>");
    listpattern = getStaticFactory().parse("[<list>]");
  }


  static public CHARLIST fromTerm(aterm.ATerm trm)
  {
    java.util.List children = trm.match(listpattern);
    if (children != null) {
      CHARLIST tmp = getStatic__NAME__Factory().makeCHARLIST_String(convertCharsToString((aterm.ATermList) trm));
      tmp.setTerm(trm);
      return tmp;
    }
    else {
      return null;
    }
  }

  public aterm.ATerm toTerm() {
    if(term == null) {
      setTerm(convertStringToChars(((aterm.ATermAppl) getArgument(0)).getAFun().getName()));
    }
    return term;
  }

  public boolean isString()
  {
    return true;
  }

  public boolean hasString()
  {
    return true;
  }

  public String getString()
  {
   return ((aterm.ATermAppl) this.getArgument(index_string)).getAFun().getName();
  }

  public CHARLIST setString(String _string)
  {
    return (CHARLIST) this.setArgument(getFactory().makeAppl(getFactory().makeAFun(_string, 0, true)), index_string);
  }

  private static String convertCharsToString(aterm.ATermList list) {
    byte[] bytes = new byte[list.getLength()];

    for (int i = 0; !list.isEmpty(); i++)  {
      aterm.ATermInt head = (aterm.ATermInt) list.getFirst();
      byte b = (byte) head.getInt();
      bytes[i] = b;
      list = list.getNext();
    }

    return new String(bytes);
  }

  private aterm.ATermList convertStringToChars(String str)
  {
    byte[] bytes = str.getBytes();
    aterm.ATermList list = getFactory().makeList();

    for(int i = bytes.length - 1; i >= 0; i--) {
      list = list.insert(getFactory().makeInt(bytes[i]));
    }

    return list;
  }
 


}
