package __PACKAGE__;

/* This code is added by sdf-apigen to each library to provide an implementation
 * for the bottom sort CHARLIST, which is present in every ADT generated
 * from an SDF2 definition.
 *
 * This code should exactly mimic the interface as generated by adt-to-java.
 */

import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;
import aterm.ATermList;

public class CHARLIST
{
  private String str = null;
  protected ATermList term = null;
  private static aterm.ATermFactory factory = null;

  static public void initialize(aterm.ATermFactory f)
  {
    factory = f;
  }

  public aterm.ATerm toTerm()
  {
    return (aterm.ATerm) term;
  }

  public String toString()
  {
    return this.term.toString();
  }

  static CHARLIST fromString(String str)
  {
    aterm.ATerm trm = factory.parse(str);
    return fromTerm(trm);
  }

  static CHARLIST fromTextFile(InputStream stream) throws aterm.ParseError, IOException
  {
    aterm.ATerm trm = factory.readFromTextFile(stream);
    return fromTerm(trm);
  }

  public boolean isEqual(Layout peer)
  {
    return term.isEqual(peer.toTerm());
  }

  static public CHARLIST fromTerm(aterm.ATerm trm)
  {
    if (trm.getType() == trm.LIST) {
      return new CHARLIST(convertCharsToString((ATermList) trm));
    }
    
    throw new RuntimeException("This is not a CHARLIST: " + trm);
  }

  public CHARLIST (String str)
  {
    this.term = convertStringToChars(str);
    this.str = str;
  }

  public String getString()
  {
    if (this.str == null) {
      this.str = convertCharsToString(this.term);
      return this.str;
    }
    else {
      return str;
    }
  }

  public CHARLIST setString(String str) {
    return new CHARLIST(str);
  }

  private static String convertCharsToString(ATermList list) {
    byte[] bytes = new byte[list.getLength()];
    
    /* TODO: deal with escaping issues */
    for (int i = 0; !list.isEmpty(); i++)  {
      aterm.ATermInt head = (aterm.ATermInt) list.getFirst();
      byte b = (byte) head.getInt();
      bytes[i] = b;
      list = list.getNext();
    }

    return new String(bytes);
  }
  
  private static ATermList convertStringToChars(String str)
  {
    byte[] bytes = str.getBytes();
    ATermList list = factory.makeList();
    
    /* TODO: deal with escaping issues */
    for(int i = bytes.length - 1; i >= 0; i--) {
      list = list.insert(factory.makeInt(bytes[i]));
    }
    
    return list;
  }
}
  
  

