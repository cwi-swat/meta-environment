package __PACKAGE__;

/* This code is added by sdf-apigen to each library to provide an implementation
 * for the bottom sort CHARLIST, which is present in every ADT generated
 * from an SDF2 definition.
 *
 * This code should exactly mimic the interface as generated by adt-to-java.
 */

import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;
import aterm.ATermList;

abstract public class CHARLIST
{
  protected ATermList term = null;
  private static aterm.ATermFactory factory = null;

  static public void initialize(aterm.ATermFactory f)
  {
    factory = f;
  }

  public aterm.ATerm toTerm()
  {
    return (aterm.ATerm) term;
  }

  public String toString()
  {
    return this.term.toString();
  }

  static CHARLIST fromString(String str)
  {
    aterm.ATerm trm = factory.parse(str);
    return fromTerm(trm);
  }

  static CHARLIST fromTextFile(InputStream stream) throws aterm.ParseError, IOException
  {
    aterm.ATerm trm = factory.readFromTextFile(stream);
    return fromTerm(trm);
  }

  public boolean isEqual(CHARLIST peer)
  {
    return term.isEqual(peer.toTerm());
  }

  static public CHARLIST fromTerm(aterm.ATerm trm)
  { 
    CHARLIST tmp;
    
    if ((tmp = CHARLIST_String.fromTerm(trm)) != null) {
      return tmp;
    }

    throw new RuntimeException("This is not a CHARLIST: " + trm);
  }

  public boolean isString() {
    return false;
  }

  public boolean hasString() {
    return false;
  }

  public String getString() {
    throw new RuntimeException("This CHARLIST has no String");
  }

  public CHARLIST setString(String str) {
    throw new RuntimeException("This CHARLIST has no String");
  }

}
  
