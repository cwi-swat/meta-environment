equations

  [equ-build-asfix-prod]
  $AFArgs    := build-asfix-prod-args($SymbolType, $Symbol*),
  $AFSort    := sort-to-lit($Sort),
  $AFAttrs   := build-asfix-attrs($Attributes, $ConsOption)
  ===>
  build-asfix-prod($SymbolType, no-module-name, $Symbol*, $Sort, $Attributes, 
                   $ConsOption) =
    prod([$AFArgs],$SymbolType(sort($AFSort)),$AFAttrs)

  [equ-build-asfix-prod]
  $ModName  != no-module-name,
  $AFArgs    := build-asfix-prod-args($SymbolType, $Symbol*),
  $AFSort    := sort-to-lit($Sort),
  $AFAttrs   := build-asfix-attrs($ModName, $Attributes, $ConsOption)
  ===>
  build-asfix-prod($SymbolType, $ModName, $Symbol*, $Sort, $Attributes, 
                   $ConsOption) =
    prod([$AFArgs],$SymbolType(sort($AFSort)),$AFAttrs)

[equ-sort-to-afun]
  sort-to-afun(sort($Char*)) = uqliteral($Char*)

[equ-build-asfix-prod-args-empty]
  build-asfix-prod-args($SymbolType, ) =

[equ-build-asfix-prod-args-single]
  build-asfix-prod-args($SymbolType, $Symbol) = 
    build-asfix-prod-arg($SymbolType, $Symbol)

[equ-build-asfix-cf-prod-args-divide]
  $AFArg := build-asfix-prod-arg(cf, $Symbol),
  $AFArgs := build-asfix-prod-args(cf, $Symbol+)
  ===>
  build-asfix-prod-args(cf, $Symbol $Symbol+) = 
    $AFArg,cf(opt(layout)),$AFArgs

[equ-build-asfix-lex-prod-args-divide]
  $AFArg := build-asfix-prod-arg(lex, $Symbol),
  $AFArgs := build-asfix-prod-args(lex, $Symbol+)
  ===>
  build-asfix-prod-args(lex, $Symbol $Symbol+) = 
    $AFArg,$AFArgs

[default-equ-build-asfix-prod-arg-strip-label]
  build-asfix-prod-arg($SymbolType, $Label : $Symbol) = 
    build-asfix-prod-arg($SymbolType, $Symbol)

[default-equ-build-asfix-prod-arg-strip-param]
  uqliteral($c*) := sdflit-to-afun($Label),
  $FieldId := uqliteral($c* "-" "s""o""r""t")
  ===>
  build-asfix-prod-arg($SymbolType, $Label : <$Symbol-PARAM>) = 
  cf(sort(<$FieldId(str)>))
    

[equ-build-asfix-prod-arg-sort]
  build-asfix-prod-arg($SymbolType, $Sort) = 
    $SymbolType(sort(sort-to-lit($Sort)))

[equ-build-asfix-prod-arg-qlit]
  build-asfix-prod-arg($SymbolType, $QLit) = lit(sdflit-to-lit($QLit))

[equ-build-asfix-prod-arg-uqlit]
  build-asfix-prod-arg($SymbolType, $UQLit) = lit(sdflit-to-lit($UQLit))

[equ-build-asfix-prod-arg-charclass]
  build-asfix-prod-arg(lex, $CharClass) = 
    build-asfix-charclass($CharClass)

[equ-build-asfix-prod-arg-iter-star]
  build-asfix-prod-arg($SymbolType, $Label : $Symbol *) = 
	build-asfix-iter-star($SymbolType, $Symbol)

[equ-build-asfix-prod-arg-iter-plus]
  build-asfix-prod-arg(lex, $Symbol +) = 
	build-asfix-iter-plus(lex, $Symbol)

[equ-build-asfix-prod-arg-iter-star]
  build-asfix-prod-arg(lex, $Symbol *) = 
	build-asfix-iter-star(lex, $Symbol)

[equ-build-asfix-prod-arg-iter-plus]
  build-asfix-prod-arg($SymbolType, $Label : $Symbol +) = 
	build-asfix-iter-plus($SymbolType, $Symbol)

[equ-build-asfix-prod-arg-iter-sep-star]
  build-asfix-prod-arg(cf, $Label : { $Sort $Sep } *) = 
	build-asfix-iter-star-sep($Sort, $Sep)

[equ-build-asfix-prod-arg-iter-sep-plus]
  build-asfix-prod-arg(cf, $Label : { $Sort $Sep } +) = 
	build-asfix-iter-plus-sep($Sort, $Sep)

[equ-build-asfix-charclass]
  build-asfix-charclass([$CharRanges]) = 
    charclass(build-asfix-charranges($CharRanges))

[equ-build-asfix-singlechar-charrange]
  build-asfix-charranges(numchar("\" $Char*)) = 
    [natcon($Char*)]

[equ-build-asfix-multiplechars-charrange]
  build-asfix-charranges(numchar("\" $Char*1)-numchar("\" $Char*2)) = 
    [range(natcon($Char*1),natcon($Char*2))]

[equ-build-asfix-multiple-charrange]
  [$AFArgs1] := build-asfix-charranges($CharRanges1),
  [$AFArgs2] := build-asfix-charranges($CharRanges2)
  ===>
  build-asfix-charranges($CharRanges1 $CharRanges2) = [$AFArgs1,$AFArgs2]

[equ-sdflit-to-lit]
  sdflit-to-lit($Literal) = $Literal

[equ-build-asfix-appl-args-empty]
  build-asfix-appl-args() =

[equ-build-asfix-appl-args-single]
  build-asfix-appl-args($Symbol) = build-asfix-appl-arg($Symbol)

[equ-build-asfix-appl-args-divide-explicit-label]
  $AFArg := build-asfix-appl-arg($Label:$Symbol),
  $AFArgs := build-asfix-appl-args($Symbol+),
  $FieldId := afun-concat(ws after sdflit-to-afun($Label)),
  $FieldWs := <$FieldId(OptLayout)>
  ===>
  build-asfix-appl-args($Label:$Symbol $Symbol+) = 
    $AFArg, $FieldWs, $AFArgs

[default-build-asfix-appl-args-divide-implicit-label]
  $AFArg := build-asfix-appl-arg($Literal),
  $AFArgs := build-asfix-appl-args($Symbol+),
  $FieldId := afun-concat(ws after sdflit-to-lit($Literal)),
  $FieldWs := <$FieldId(OptLayout)>
  ===>
  build-asfix-appl-args($Literal $Symbol+) = $AFArg, $FieldWs, $AFArgs

[equ-build-asfix-appl-arg-parameterized]
  $FieldId := sdflit-to-afun($Label)
  ===>
  build-asfix-appl-arg($Label:<$Symbol-PARAM>) = <$FieldId(term)>

[equ-build-asfix-appl-arg-labeled-literal]
  build-asfix-appl-arg($Label:$Literal) = lit(sdflit-to-lit($Literal))

[equ-build-asfix-appl-arg-unlabeled-literal]
  build-asfix-appl-arg($Literal) = lit(sdflit-to-lit($Literal))

[equ-build-asfix-appl-arg-sort]
  $FieldId := sdflit-to-afun($Label),
  $FieldType := sort-to-afun($Sort)
  ===>
  build-asfix-appl-arg($Label:$Sort) = <$FieldId($FieldType)>

[equ-build-asfix-appl-arg-iter-star]
  $FieldId := sdflit-to-afun($Label),
  $FieldType := afun-concat(sort-to-afun($Sort) $FieldId)
  ===>
  build-asfix-appl-arg($Label:$Sort *) = 
    appl(list(build-asfix-iter-star(cf, $Sort)),<$FieldId($FieldType)>)

% Plus-list transformed into star-list because AsFix1 demands this! %
[equ-build-asfix-appl-arg-iter-plus]
  $FieldId := sdflit-to-afun($Label),
  $FieldType := afun-concat(sort-to-afun($Sort) $FieldId)
  ===>
  build-asfix-appl-arg($Label:$Sort +) = 
    appl(list(build-asfix-iter-plus(cf, $Sort)),<$FieldId($FieldType)>)

[equ-build-asfix-appl-arg-iter-sep-star]
  $FieldId := sdflit-to-afun($Label),
  $FieldType := afun-concat(sort-to-afun($Sort) $FieldId)
  ===>
  build-asfix-appl-arg($Label:{ $Sort $Sep }*) =
    appl(list(build-asfix-iter-star-sep($Sort,$Sep)),
         <$FieldId($FieldType)>)

% Plus-list transformed into star-list because AsFix1 demands this! %
[equ-build-asfix-appl-arg-iter-sep-plus]
  $FieldId := sdflit-to-afun($Label),
  $FieldType := afun-concat(sort-to-afun($Sort) $FieldId)
  ===>
  build-asfix-appl-arg($Label:{ $Sort $Sep }+) = 
    appl(list(build-asfix-iter-plus-sep($Sort,$Sep)),
         <$FieldId($FieldType)>)

[equ-build-asfix-iter-star]
  $ElemSortName := sort-to-lit($Sort)
  ===>  
  build-asfix-iter-star($SymbolType, $Sort) = 
    $SymbolType(iter-star(sort($ElemSortName)))

[equ-build-asfix-iter-star]
  $ElemSortName := sort-to-lit($Sort)
  ===>  
  build-asfix-iter-plus($SymbolType, $Sort) = 
    $SymbolType(iter(sort($ElemSortName)))

[equ-build-asfix-iter-star]
  build-asfix-iter-star(lex, $CharClass) = 
    lex(iter-star(build-asfix-charclass($CharClass)))

[equ-build-asfix-iter-star]
  build-asfix-iter-plus($SymbolType, $CharClass) = 
    lex(iter(build-asfix-charclass($CharClass)))

[equ-build-asfix-iter-sep]
  sort($Char*) := $Sort,
  $ElemSortName := qliteral(""" $Char* """),
  $AFSep := sdflit-to-lit($Sep)
  ===>  
  build-asfix-iter-star-sep($Sort, $Sep) = 
	cf(iter-star-sep(sort($ElemSortName),lit($AFSep)))

[equ-build-asfix-iter-sep]
  sort($Char*) := $Sort,
  $ElemSortName := qliteral(""" $Char* """),
  $AFSep := sdflit-to-lit($Sep)
  ===>  
  build-asfix-iter-plus-sep($Sort, $Sep) = 
	cf(iter-sep(sort($ElemSortName),lit($AFSep)))

equations

[identity]  sdflit-to-afun($Literal) = $Literal