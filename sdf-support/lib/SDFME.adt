[ constructor ( Grammar , aliases , appl ( prod ( [ lit ( "aliases" ) , cf ( opt ( layout ) ) , cf ( sort ( "Aliases" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "aliases" ) ) ] ) ) , [ lit ( "aliases" ) , < "ws-after-aliases" ( OptLayout ) > , < "Aliases" ( Aliases ) > ] ) ) , constructor ( Alias , alias , appl ( prod ( [ cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "->" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) ] , cf ( sort ( "Alias" ) ) , attrs ( [ term ( cons ( "alias" ) ) ] ) ) , [ < "Symbol" ( Symbol ) > , < "ws-after-Symbol" ( OptLayout ) > , lit ( "->" ) , < ws-after-arrow ( OptLayout ) > , < alias ( Symbol ) > ] ) ) , constructor ( Aliases , Default , appl ( prod ( [ cf ( iter-star ( sort ( "Alias" ) ) ) ] , cf ( sort ( "Aliases" ) ) , no-attrs ) , [ appl ( list ( cf ( iter-star ( sort ( "Alias" ) ) ) ) , < list ( Alias-list ) > ) ] ) ) , separated-list ( Alias-list , Alias , [ < ws-after-head ( OptLayout ) > ] ) , constructor ( Lookahead , char-class , appl ( prod ( [ cf ( sort ( "CharClass" ) ) ] , cf ( sort ( "Lookahead" ) ) , attrs ( [ term ( cons ( "char-class" ) ) ] ) ) , [ < "CharClass" ( CharClass ) > ] ) ) , constructor ( Lookahead , seq , appl ( prod ( [ cf ( sort ( "CharClass" ) ) , cf ( opt ( layout ) ) , lit ( "." ) , cf ( opt ( layout ) ) , cf ( sort ( "Lookaheads" ) ) ] , cf ( sort ( "Lookahead" ) ) , attrs ( [ term ( cons ( "seq" ) ) ] ) ) , [ < head ( CharClass ) > , < ws-after-head ( OptLayout ) > , lit ( "." ) , < "ws-after-." ( OptLayout ) > , < tail ( Lookaheads ) > ] ) ) , constructor ( Lookaheads , single , appl ( prod ( [ cf ( sort ( "Lookahead" ) ) ] , cf ( sort ( "Lookaheads" ) ) , attrs ( [ term ( cons ( "single" ) ) ] ) ) , [ < "Lookahead" ( Lookahead ) > ] ) ) , constructor ( Lookaheads , alt , appl ( prod ( [ cf ( sort ( "Lookaheads" ) ) , cf ( opt ( layout ) ) , lit ( "|" ) , cf ( opt ( layout ) ) , cf ( sort ( "Lookaheads" ) ) ] , cf ( sort ( "Lookaheads" ) ) , attrs ( [ term ( cons ( "alt" ) ) , assoc ( right ) ] ) ) , [ < "left" ( Lookaheads ) > , < "ws-after-left" ( OptLayout ) > , lit ( "|" ) , < "ws-after-|" ( OptLayout ) > , < "right" ( Lookaheads ) > ] ) ) , constructor ( Lookaheads , Bracket , appl ( prod ( [ lit ( "(" ) , cf ( opt ( layout ) ) , cf ( sort ( "Lookaheads" ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "Lookaheads" ) ) , attrs ( [ bracket ] ) ) , [ lit ( "(" ) , < "ws-after-(" ( OptLayout ) > , < "Lookaheads" ( Lookaheads ) > , < "ws-after-Lookaheads" ( OptLayout ) > , lit ( ")" ) ] ) ) , constructor ( Lookaheads , list , appl ( prod ( [ lit ( "[[" ) , cf ( opt ( layout ) ) , cf ( iter-star-sep ( sort ( "Lookahead" ) , lit ( "," ) ) ) , cf ( opt ( layout ) ) , lit ( "]]" ) ] , cf ( sort ( "Lookaheads" ) ) , attrs ( [ term ( cons ( "list" ) ) ] ) ) , [ lit ( "[[" ) , < "ws-after-[[" ( OptLayout ) > , appl ( list ( cf ( iter-star-sep ( sort ( "Lookahead" ) , lit ( "," ) ) ) ) , < list ( Lookahead-list ) > ) , < ws-after-list ( OptLayout ) > , lit ( "]]" ) ] ) ) , separated-list ( Lookahead-list , Lookahead , [ < ws-after-head ( OptLayout ) > , lit ( "," ) , < ws-after-sep ( OptLayout ) > ] ) , constructor ( Restriction , follow , appl ( prod ( [ cf ( sort ( "Symbols" ) ) , cf ( opt ( layout ) ) , lit ( "-/-" ) , cf ( opt ( layout ) ) , cf ( sort ( "Lookaheads" ) ) ] , cf ( sort ( "Restriction" ) ) , attrs ( [ term ( cons ( "follow" ) ) ] ) ) , [ < "Symbols" ( Symbols ) > , < "ws-after-Symbols" ( OptLayout ) > , lit ( "-/-" ) , < "ws-after--/-" ( OptLayout ) > , < "Lookaheads" ( Lookaheads ) > ] ) ) , constructor ( Restrictions , Default , appl ( prod ( [ cf ( iter-star ( sort ( "Restriction" ) ) ) ] , cf ( sort ( "Restrictions" ) ) , no-attrs ) , [ appl ( list ( cf ( iter-star ( sort ( "Restriction" ) ) ) ) , < list ( Restriction-list ) > ) ] ) ) , separated-list ( Restriction-list , Restriction , [ < ws-after-head ( OptLayout ) > ] ) , constructor ( Grammar , restrictions , appl ( prod ( [ lit ( "restrictions" ) , cf ( opt ( layout ) ) , cf ( sort ( "Restrictions" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "restrictions" ) ) ] ) ) , [ lit ( "restrictions" ) , < "ws-after-restrictions" ( OptLayout ) > , < "Restrictions" ( Restrictions ) > ] ) ) , constructor ( Attribute , reject , appl ( prod ( [ lit ( "reject" ) ] , cf ( sort ( "Attribute" ) ) , attrs ( [ term ( cons ( "reject" ) ) ] ) ) , [ lit ( "reject" ) ] ) ) , constructor ( Attribute , prefer , appl ( prod ( [ lit ( "prefer" ) ] , cf ( sort ( "Attribute" ) ) , attrs ( [ term ( cons ( "prefer" ) ) ] ) ) , [ lit ( "prefer" ) ] ) ) , constructor ( Attribute , avoid , appl ( prod ( [ lit ( "avoid" ) ] , cf ( sort ( "Attribute" ) ) , attrs ( [ term ( cons ( "avoid" ) ) ] ) ) , [ lit ( "avoid" ) ] ) ) , constructor ( Symbol , label , appl ( prod ( [ cf ( sort ( "Literal" ) ) , cf ( opt ( layout ) ) , lit ( ":" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "label" ) ) ] ) ) , [ < label ( Literal ) > , < ws-after-label ( OptLayout ) > , lit ( ":" ) , < "ws-after-:" ( OptLayout ) > , < "Symbol" ( Symbol ) > ] ) ) , constructor ( Symbol , lit , appl ( prod ( [ cf ( sort ( "Literal" ) ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "lit" ) ) ] ) ) , [ < "Literal" ( Literal ) > ] ) ) , constructor ( Production , prod-fun , appl ( prod ( [ cf ( sort ( "Literal" ) ) , cf ( opt ( layout ) ) , lit ( "(" ) , cf ( opt ( layout ) ) , cf ( iter-star-sep ( sort ( "Symbol" ) , lit ( "," ) ) ) , cf ( opt ( layout ) ) , lit ( ")" ) , cf ( opt ( layout ) ) , lit ( "->" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Attributes" ) ) ] , cf ( sort ( "Production" ) ) , attrs ( [ avoid , term ( cons ( "prod-fun" ) ) ] ) ) , [ < function-symbol ( Literal ) > , < ws-after-function-symbol ( OptLayout ) > , lit ( "(" ) , < "ws-after-(" ( OptLayout ) > , appl ( list ( cf ( iter-star-sep ( sort ( "Symbol" ) , lit ( "," ) ) ) ) , < arguments ( Symbol-arguments ) > ) , < ws-after-arguments ( OptLayout ) > , lit ( ")" ) , < "ws-after-)" ( OptLayout ) > , lit ( "->" ) , < "ws-after-->" ( OptLayout ) > , < result ( Symbol ) > , < ws-after-result ( OptLayout ) > , < "Attributes" ( Attributes ) > ] ) ) , separated-list ( Symbol-arguments , Symbol , [ < ws-after-head ( OptLayout ) > , lit ( "," ) , < ws-after-sep ( OptLayout ) > ] ) , constructor ( Grammar , kernel-start-symbols , appl ( prod ( [ lit ( "start-symbols" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbols" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "kernel-start-symbols" ) ) ] ) ) , [ lit ( "start-symbols" ) , < "ws-after-start-symbols" ( OptLayout ) > , < "Symbols" ( Symbols ) > ] ) ) , constructor ( Grammar , lexical-start-symbols , appl ( prod ( [ lit ( "lexical" ) , cf ( opt ( layout ) ) , lit ( "start-symbols" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbols" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "lexical-start-symbols" ) ) ] ) ) , [ lit ( "lexical" ) , < "ws-after-lexical" ( OptLayout ) > , lit ( "start-symbols" ) , < "ws-after-start-symbols" ( OptLayout ) > , < "Symbols" ( Symbols ) > ] ) ) , constructor ( Grammar , context-free-start-symbols , appl ( prod ( [ lit ( "context-free" ) , cf ( opt ( layout ) ) , lit ( "start-symbols" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbols" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "context-free-start-symbols" ) ) ] ) ) , [ lit ( "context-free" ) , < "ws-after-context-free" ( OptLayout ) > , lit ( "start-symbols" ) , < "ws-after-start-symbols" ( OptLayout ) > , < "Symbols" ( Symbols ) > ] ) ) , constructor ( Sort , one-char , appl ( prod ( [ lex ( sort ( "Sort" ) ) ] , cf ( sort ( "Sort" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < string ( chars ) > ) ] ) ) , constructor ( Sort , more-chars , appl ( prod ( [ lex ( sort ( "Sort" ) ) ] , cf ( sort ( "Sort" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < string ( chars ) > ) ] ) ) , constructor ( Symbol , sort , appl ( prod ( [ cf ( sort ( "Sort" ) ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "sort" ) ) ] ) ) , [ < "Sort" ( Sort ) > ] ) ) , constructor ( Symbol , parameterized-sort , appl ( prod ( [ cf ( sort ( "Sort" ) ) , cf ( opt ( layout ) ) , lit ( "[[" ) , cf ( opt ( layout ) ) , cf ( iter-sep ( sort ( "Symbol" ) , lit ( "," ) ) ) , cf ( opt ( layout ) ) , lit ( "]]" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "parameterized-sort" ) ) ] ) ) , [ < "Sort" ( Sort ) > , < "ws-after-Sort" ( OptLayout ) > , lit ( "[[" ) , < "ws-after-[[" ( OptLayout ) > , appl ( list ( cf ( iter-sep ( sort ( "Symbol" ) , lit ( "," ) ) ) ) , < parameters ( Symbol-parameters ) > ) , < ws-after-parameters ( OptLayout ) > , lit ( "]]" ) ] ) ) , separated-list ( Symbol-parameters , Symbol , [ < ws-after-head ( OptLayout ) > , lit ( "," ) , < ws-after-sep ( OptLayout ) > ] ) , constructor ( Grammar , sorts , appl ( prod ( [ lit ( "sorts" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbols" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "sorts" ) ) ] ) ) , [ lit ( "sorts" ) , < "ws-after-sorts" ( OptLayout ) > , < "Symbols" ( Symbols ) > ] ) ) , constructor ( NumChar , digits , appl ( prod ( [ lex ( sort ( "NumChar" ) ) ] , cf ( sort ( "NumChar" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < string ( chars ) > ) ] ) ) , constructor ( ShortChar , regular , appl ( prod ( [ lex ( sort ( "ShortChar" ) ) ] , cf ( sort ( "ShortChar" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < string ( chars ) > ) ] ) ) , constructor ( ShortChar , escaped , appl ( prod ( [ lex ( sort ( "ShortChar" ) ) ] , cf ( sort ( "ShortChar" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < string ( chars ) > ) ] ) ) , constructor ( Character , numeric , appl ( prod ( [ cf ( sort ( "NumChar" ) ) ] , cf ( sort ( "Character" ) ) , attrs ( [ term ( cons ( "numeric" ) ) ] ) ) , [ < "NumChar" ( NumChar ) > ] ) ) , constructor ( Character , short , appl ( prod ( [ cf ( sort ( "ShortChar" ) ) ] , cf ( sort ( "Character" ) ) , attrs ( [ term ( cons ( "short" ) ) ] ) ) , [ < "ShortChar" ( ShortChar ) > ] ) ) , constructor ( Character , top , appl ( prod ( [ lit ( "\\TOP" ) ] , cf ( sort ( "Character" ) ) , attrs ( [ term ( cons ( "top" ) ) ] ) ) , [ lit ( "\\TOP" ) ] ) ) , constructor ( Character , eof , appl ( prod ( [ lit ( "\\EOF" ) ] , cf ( sort ( "Character" ) ) , attrs ( [ term ( cons ( "eof" ) ) ] ) ) , [ lit ( "\\EOF" ) ] ) ) , constructor ( Character , bot , appl ( prod ( [ lit ( "\\BOT" ) ] , cf ( sort ( "Character" ) ) , attrs ( [ term ( cons ( "bot" ) ) ] ) ) , [ lit ( "\\BOT" ) ] ) ) , constructor ( Character , label_start , appl ( prod ( [ lit ( "\\LABEL_START" ) ] , cf ( sort ( "Character" ) ) , attrs ( [ term ( cons ( "label_start" ) ) ] ) ) , [ lit ( "\\LABEL_START" ) ] ) ) , constructor ( CharRange , Default , appl ( prod ( [ cf ( sort ( "Character" ) ) ] , cf ( sort ( "CharRange" ) ) , no-attrs ) , [ < "Character" ( Character ) > ] ) ) , constructor ( CharRange , range , appl ( prod ( [ cf ( sort ( "Character" ) ) , cf ( opt ( layout ) ) , lit ( "-" ) , cf ( opt ( layout ) ) , cf ( sort ( "Character" ) ) ] , cf ( sort ( "CharRange" ) ) , attrs ( [ term ( cons ( "range" ) ) ] ) ) , [ < start ( Character ) > , < ws-after-start ( OptLayout ) > , lit ( "-" ) , < "ws-after--" ( OptLayout ) > , < end ( Character ) > ] ) ) , constructor ( CharRanges , Default , appl ( prod ( [ cf ( sort ( "CharRange" ) ) ] , cf ( sort ( "CharRanges" ) ) , no-attrs ) , [ < "CharRange" ( CharRange ) > ] ) ) , constructor ( CharRanges , conc , appl ( prod ( [ cf ( sort ( "CharRanges" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "CharRanges" ) ) ] , cf ( sort ( "CharRanges" ) ) , attrs ( [ term ( cons ( "conc" ) ) , assoc ( right ) , term ( memo ) ] ) ) , [ < "left" ( CharRanges ) > , < "ws-after-left" ( OptLayout ) > , < "right" ( CharRanges ) > ] ) ) , constructor ( CharRanges , Bracket , appl ( prod ( [ lit ( "(" ) , cf ( opt ( layout ) ) , cf ( sort ( "CharRanges" ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "CharRanges" ) ) , attrs ( [ bracket ] ) ) , [ lit ( "(" ) , < "ws-after-(" ( OptLayout ) > , < "CharRanges" ( CharRanges ) > , < "ws-after-CharRanges" ( OptLayout ) > , lit ( ")" ) ] ) ) , constructor ( OptCharRanges , absent , appl ( prod ( [  ] , cf ( sort ( "OptCharRanges" ) ) , attrs ( [ term ( cons ( "absent" ) ) ] ) ) , [  ] ) ) , constructor ( OptCharRanges , present , appl ( prod ( [ cf ( sort ( "CharRanges" ) ) ] , cf ( sort ( "OptCharRanges" ) ) , attrs ( [ term ( cons ( "present" ) ) ] ) ) , [ < "CharRanges" ( CharRanges ) > ] ) ) , constructor ( CharClass , simple-charclass , appl ( prod ( [ lit ( "[" ) , cf ( opt ( layout ) ) , cf ( sort ( "OptCharRanges" ) ) , cf ( opt ( layout ) ) , lit ( "]" ) ] , cf ( sort ( "CharClass" ) ) , attrs ( [ term ( cons ( "simple-charclass" ) ) ] ) ) , [ lit ( "[" ) , < "ws-after-[" ( OptLayout ) > , < "OptCharRanges" ( OptCharRanges ) > , < "ws-after-OptCharRanges" ( OptLayout ) > , lit ( "]" ) ] ) ) , constructor ( CharClass , comp , appl ( prod ( [ lit ( "~" ) , cf ( opt ( layout ) ) , cf ( sort ( "CharClass" ) ) ] , cf ( sort ( "CharClass" ) ) , attrs ( [ term ( cons ( "comp" ) ) ] ) ) , [ lit ( "~" ) , < "ws-after-~" ( OptLayout ) > , < "CharClass" ( CharClass ) > ] ) ) , constructor ( CharClass , diff , appl ( prod ( [ cf ( sort ( "CharClass" ) ) , cf ( opt ( layout ) ) , lit ( "/" ) , cf ( opt ( layout ) ) , cf ( sort ( "CharClass" ) ) ] , cf ( sort ( "CharClass" ) ) , attrs ( [ term ( cons ( "diff" ) ) , assoc ( left ) , term ( memo ) ] ) ) , [ < "left" ( CharClass ) > , < "ws-after-left" ( OptLayout ) > , lit ( "/" ) , < "ws-after-/" ( OptLayout ) > , < "right" ( CharClass ) > ] ) ) , constructor ( CharClass , isect , appl ( prod ( [ cf ( sort ( "CharClass" ) ) , cf ( opt ( layout ) ) , lit ( "/\\" ) , cf ( opt ( layout ) ) , cf ( sort ( "CharClass" ) ) ] , cf ( sort ( "CharClass" ) ) , attrs ( [ term ( cons ( "isect" ) ) , assoc ( left ) , term ( memo ) ] ) ) , [ < "left" ( CharClass ) > , < "ws-after-left" ( OptLayout ) > , lit ( "/\\" ) , < "ws-after-/\\" ( OptLayout ) > , < "right" ( CharClass ) > ] ) ) , constructor ( CharClass , union , appl ( prod ( [ cf ( sort ( "CharClass" ) ) , cf ( opt ( layout ) ) , lit ( "\\/" ) , cf ( opt ( layout ) ) , cf ( sort ( "CharClass" ) ) ] , cf ( sort ( "CharClass" ) ) , attrs ( [ term ( cons ( "union" ) ) , assoc ( left ) ] ) ) , [ < "left" ( CharClass ) > , < "ws-after-left" ( OptLayout ) > , lit ( "\\/" ) , < "ws-after-\\/" ( OptLayout ) > , < "right" ( CharClass ) > ] ) ) , constructor ( CharClass , Default , appl ( prod ( [ lit ( "(" ) , cf ( opt ( layout ) ) , cf ( sort ( "CharClass" ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "CharClass" ) ) , attrs ( [ bracket , avoid ] ) ) , [ lit ( "(" ) , < "ws-after-(" ( OptLayout ) > , < "CharClass" ( CharClass ) > , < "ws-after-CharClass" ( OptLayout ) > , lit ( ")" ) ] ) ) , constructor ( Symbol , char-class , appl ( prod ( [ cf ( sort ( "CharClass" ) ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "char-class" ) ) ] ) ) , [ < "CharClass" ( CharClass ) > ] ) ) , constructor ( Associativity , left , appl ( prod ( [ lit ( "left" ) ] , cf ( sort ( "Associativity" ) ) , attrs ( [ term ( cons ( "left" ) ) ] ) ) , [ lit ( "left" ) ] ) ) , constructor ( Associativity , right , appl ( prod ( [ lit ( "right" ) ] , cf ( sort ( "Associativity" ) ) , attrs ( [ term ( cons ( "right" ) ) ] ) ) , [ lit ( "right" ) ] ) ) , constructor ( Associativity , non-assoc , appl ( prod ( [ lit ( "non-assoc" ) ] , cf ( sort ( "Associativity" ) ) , attrs ( [ term ( cons ( "non-assoc" ) ) ] ) ) , [ lit ( "non-assoc" ) ] ) ) , constructor ( Associativity , assoc , appl ( prod ( [ lit ( "assoc" ) ] , cf ( sort ( "Associativity" ) ) , attrs ( [ term ( cons ( "assoc" ) ) ] ) ) , [ lit ( "assoc" ) ] ) ) , constructor ( Attribute , bracket , appl ( prod ( [ lit ( "bracket" ) ] , cf ( sort ( "Attribute" ) ) , attrs ( [ term ( cons ( "bracket" ) ) ] ) ) , [ lit ( "bracket" ) ] ) ) , constructor ( Attribute , assoc , appl ( prod ( [ cf ( sort ( "Associativity" ) ) ] , cf ( sort ( "Attribute" ) ) , attrs ( [ term ( cons ( "assoc" ) ) ] ) ) , [ < "Associativity" ( Associativity ) > ] ) ) , constructor ( Group , simple-group , appl ( prod ( [ cf ( sort ( "Production" ) ) ] , cf ( sort ( "Group" ) ) , attrs ( [ term ( cons ( "simple-group" ) ) ] ) ) , [ < "Production" ( Production ) > ] ) ) , constructor ( Group , prods-group , appl ( prod ( [ lit ( "{" ) , cf ( opt ( layout ) ) , cf ( sort ( "Productions" ) ) , cf ( opt ( layout ) ) , lit ( "}" ) ] , cf ( sort ( "Group" ) ) , attrs ( [ term ( cons ( "prods-group" ) ) ] ) ) , [ lit ( "{" ) , < "ws-after-{" ( OptLayout ) > , < "Productions" ( Productions ) > , < "ws-after-Productions" ( OptLayout ) > , lit ( "}" ) ] ) ) , constructor ( Group , assoc-group , appl ( prod ( [ lit ( "{" ) , cf ( opt ( layout ) ) , cf ( sort ( "Associativity" ) ) , cf ( opt ( layout ) ) , lit ( ":" ) , cf ( opt ( layout ) ) , cf ( sort ( "Productions" ) ) , cf ( opt ( layout ) ) , lit ( "}" ) ] , cf ( sort ( "Group" ) ) , attrs ( [ term ( cons ( "assoc-group" ) ) ] ) ) , [ lit ( "{" ) , < "ws-after-{" ( OptLayout ) > , < "Associativity" ( Associativity ) > , < "ws-after-Associativity" ( OptLayout ) > , lit ( ":" ) , < "ws-after-:" ( OptLayout ) > , < "Productions" ( Productions ) > , < "ws-after-Productions" ( OptLayout ) > , lit ( "}" ) ] ) ) , constructor ( Priority , chain , appl ( prod ( [ cf ( iter-sep ( sort ( "Group" ) , lit ( ">" ) ) ) ] , cf ( sort ( "Priority" ) ) , attrs ( [ term ( cons ( "chain" ) ) ] ) ) , [ appl ( list ( cf ( iter-sep ( sort ( "Group" ) , lit ( ">" ) ) ) ) , < list ( Group-list ) > ) ] ) ) , separated-list ( Group-list , Group , [ < ws-after-head ( OptLayout ) > , lit ( ">" ) , < ws-after-sep ( OptLayout ) > ] ) , constructor ( Priority , assoc , appl ( prod ( [ cf ( sort ( "Group" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Associativity" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Group" ) ) ] , cf ( sort ( "Priority" ) ) , attrs ( [ term ( cons ( "assoc" ) ) ] ) ) , [ < "left" ( Group ) > , < "ws-after-left" ( OptLayout ) > , < "Associativity" ( Associativity ) > , < "ws-after-Associativity" ( OptLayout ) > , < "right" ( Group ) > ] ) ) , constructor ( Priorities , Default , appl ( prod ( [ cf ( iter-star-sep ( sort ( "Priority" ) , lit ( "," ) ) ) ] , cf ( sort ( "Priorities" ) ) , no-attrs ) , [ appl ( list ( cf ( iter-star-sep ( sort ( "Priority" ) , lit ( "," ) ) ) ) , < list ( Priority-list ) > ) ] ) ) , separated-list ( Priority-list , Priority , [ < ws-after-head ( OptLayout ) > , lit ( "," ) , < ws-after-sep ( OptLayout ) > ] ) , constructor ( Grammar , priorities , appl ( prod ( [ lit ( "priorities" ) , cf ( opt ( layout ) ) , cf ( sort ( "Priorities" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "priorities" ) ) ] ) ) , [ lit ( "priorities" ) , < "ws-after-priorities" ( OptLayout ) > , < "Priorities" ( Priorities ) > ] ) ) , constructor ( Symbol , lifting , appl ( prod ( [ lit ( "`" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "`" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "lifting" ) ) ] ) ) , [ lit ( "`" ) , < ws-after-left-quote ( OptLayout ) > , < "Symbol" ( Symbol ) > , < "ws-after-Symbol" ( OptLayout ) > , lit ( "`" ) ] ) ) , constructor ( Symbol , empty , appl ( prod ( [ lit ( "(" ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "empty" ) ) ] ) ) , [ lit ( "(" ) , < "ws-after-(" ( OptLayout ) > , lit ( ")" ) ] ) ) , constructor ( Symbol , seq , appl ( prod ( [ lit ( "(" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , cf ( iter ( sort ( "Symbol" ) ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "seq" ) ) ] ) ) , [ lit ( "(" ) , < "ws-after-(" ( OptLayout ) > , < head ( Symbol ) > , < ws-after-head ( OptLayout ) > , appl ( list ( cf ( iter ( sort ( "Symbol" ) ) ) ) , < tail ( Symbol-tail ) > ) , < ws-after-tail ( OptLayout ) > , lit ( ")" ) ] ) ) , separated-list ( Symbol-tail , Symbol , [ < ws-after-head ( OptLayout ) > ] ) , constructor ( Symbol , opt , appl ( prod ( [ cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "?" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "opt" ) ) ] ) ) , [ < "Symbol" ( Symbol ) > , < "ws-after-Symbol" ( OptLayout ) > , lit ( "?" ) ] ) ) , constructor ( Symbol , iter , appl ( prod ( [ cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "+" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "iter" ) ) ] ) ) , [ < "Symbol" ( Symbol ) > , < "ws-after-Symbol" ( OptLayout ) > , lit ( "+" ) ] ) ) , constructor ( Symbol , iter-star , appl ( prod ( [ cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "*" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "iter-star" ) ) ] ) ) , [ < "Symbol" ( Symbol ) > , < "ws-after-Symbol" ( OptLayout ) > , lit ( "*" ) ] ) ) , constructor ( Symbol , iter-sep , appl ( prod ( [ lit ( "{" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "}" ) , cf ( opt ( layout ) ) , lit ( "+" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "iter-sep" ) ) ] ) ) , [ lit ( "{" ) , < "ws-after-{" ( OptLayout ) > , < "Symbol" ( Symbol ) > , < "ws-after-Symbol" ( OptLayout ) > , < sep ( Symbol ) > , < ws-after-sep ( OptLayout ) > , lit ( "}" ) , < "ws-after-}" ( OptLayout ) > , lit ( "+" ) ] ) ) , constructor ( Symbol , iter-star-sep , appl ( prod ( [ lit ( "{" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "}" ) , cf ( opt ( layout ) ) , lit ( "*" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "iter-star-sep" ) ) ] ) ) , [ lit ( "{" ) , < "ws-after-{" ( OptLayout ) > , < "Symbol" ( Symbol ) > , < "ws-after-Symbol" ( OptLayout ) > , < sep ( Symbol ) > , < ws-after-sep ( OptLayout ) > , lit ( "}" ) , < "ws-after-}" ( OptLayout ) > , lit ( "*" ) ] ) ) , constructor ( Symbol , iter-n , appl ( prod ( [ cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "NatCon" ) ) , cf ( opt ( layout ) ) , lit ( "+" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "iter-n" ) ) ] ) ) , [ < "Symbol" ( Symbol ) > , < "ws-after-Symbol" ( OptLayout ) > , < n ( NatCon ) > , < ws-after-n ( OptLayout ) > , lit ( "+" ) ] ) ) , constructor ( Symbol , iter-sep-n , appl ( prod ( [ lit ( "{" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "}" ) , cf ( opt ( layout ) ) , cf ( sort ( "NatCon" ) ) , cf ( opt ( layout ) ) , lit ( "+" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "iter-sep-n" ) ) ] ) ) , [ lit ( "{" ) , < "ws-after-{" ( OptLayout ) > , < "Symbol" ( Symbol ) > , < "ws-after-Symbol" ( OptLayout ) > , < sep ( Symbol ) > , < ws-after-sep ( OptLayout ) > , lit ( "}" ) , < "ws-after-}" ( OptLayout ) > , < n ( NatCon ) > , < ws-after-n ( OptLayout ) > , lit ( "+" ) ] ) ) , constructor ( Symbol , tuple , appl ( prod ( [ lit ( "<" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "," ) , cf ( opt ( layout ) ) , cf ( iter-sep ( sort ( "Symbol" ) , lit ( "," ) ) ) , cf ( opt ( layout ) ) , lit ( ">" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "tuple" ) ) ] ) ) , [ lit ( "<" ) , < "ws-after-<" ( OptLayout ) > , < head ( Symbol ) > , < ws-after-head ( OptLayout ) > , lit ( "," ) , < "ws-after-," ( OptLayout ) > , appl ( list ( cf ( iter-sep ( sort ( "Symbol" ) , lit ( "," ) ) ) ) , < rest ( Symbol-rest ) > ) , < ws-after-rest ( OptLayout ) > , lit ( ">" ) ] ) ) , separated-list ( Symbol-rest , Symbol , [ < ws-after-head ( OptLayout ) > , lit ( "," ) , < ws-after-sep ( OptLayout ) > ] ) , constructor ( Symbol , pair , appl ( prod ( [ cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "#" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ assoc ( right ) , term ( cons ( "pair" ) ) ] ) ) , [ < "left" ( Symbol ) > , < "ws-after-left" ( OptLayout ) > , lit ( "#" ) , < "ws-after-#" ( OptLayout ) > , < "right" ( Symbol ) > ] ) ) , constructor ( Symbol , func , appl ( prod ( [ lit ( "(" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbols" ) ) , cf ( opt ( layout ) ) , lit ( "=>" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "func" ) ) ] ) ) , [ lit ( "(" ) , < "ws-after-(" ( OptLayout ) > , < arguments ( Symbols ) > , < ws-after-arguments ( OptLayout ) > , lit ( "=>" ) , < "ws-after-=>" ( OptLayout ) > , < results ( Symbol ) > , < ws-after-results ( OptLayout ) > , lit ( ")" ) ] ) ) , constructor ( Symbol , alt , appl ( prod ( [ cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "|" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ assoc ( right ) , term ( cons ( "alt" ) ) ] ) ) , [ < "left" ( Symbol ) > , < "ws-after-left" ( OptLayout ) > , lit ( "|" ) , < "ws-after-|" ( OptLayout ) > , < "right" ( Symbol ) > ] ) ) , constructor ( Symbol , strategy , appl ( prod ( [ lit ( "(" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "->" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "strategy" ) ) ] ) ) , [ lit ( "(" ) , < "ws-after-(" ( OptLayout ) > , < "left" ( Symbol ) > , < "ws-after-left" ( OptLayout ) > , lit ( "->" ) , < "ws-after-->" ( OptLayout ) > , < "right" ( Symbol ) > , < "ws-after-right" ( OptLayout ) > , lit ( ")" ) ] ) ) , constructor ( Renamings , renamings , appl ( prod ( [ lit ( "[" ) , cf ( opt ( layout ) ) , cf ( iter-star ( sort ( "Renaming" ) ) ) , cf ( opt ( layout ) ) , lit ( "]" ) ] , cf ( sort ( "Renamings" ) ) , attrs ( [ term ( cons ( "renamings" ) ) ] ) ) , [ lit ( "[" ) , < "ws-after-[" ( OptLayout ) > , appl ( list ( cf ( iter-star ( sort ( "Renaming" ) ) ) ) , < list ( Renaming-list ) > ) , < ws-after-list ( OptLayout ) > , lit ( "]" ) ] ) ) , separated-list ( Renaming-list , Renaming , [ < ws-after-head ( OptLayout ) > ] ) , constructor ( Renaming , symbol , appl ( prod ( [ cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "=>" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) ] , cf ( sort ( "Renaming" ) ) , attrs ( [ term ( cons ( "symbol" ) ) ] ) ) , [ < from ( Symbol ) > , < ws-after-from ( OptLayout ) > , lit ( "=>" ) , < "ws-after-=>" ( OptLayout ) > , < to ( Symbol ) > ] ) ) , constructor ( Renaming , production , appl ( prod ( [ cf ( sort ( "Production" ) ) , cf ( opt ( layout ) ) , lit ( "=>" ) , cf ( opt ( layout ) ) , cf ( sort ( "Production" ) ) ] , cf ( sort ( "Renaming" ) ) , attrs ( [ term ( cons ( "production" ) ) ] ) ) , [ < from-prod ( Production ) > , < ws-after-from-prod ( OptLayout ) > , lit ( "=>" ) , < "ws-after-=>" ( OptLayout ) > , < to-prod ( Production ) > ] ) ) , constructor ( ModuleWord , word , appl ( prod ( [ lex ( sort ( "ModuleWord" ) ) ] , cf ( sort ( "ModuleWord" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < string ( chars ) > ) ] ) ) , constructor ( ModuleId , word , appl ( prod ( [ lex ( sort ( "ModuleId" ) ) ] , cf ( sort ( "ModuleId" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < string ( chars ) > ) ] ) ) , constructor ( ModuleId , slash-word , appl ( prod ( [ lex ( sort ( "ModuleId" ) ) ] , cf ( sort ( "ModuleId" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < string ( chars ) > ) ] ) ) , constructor ( ModuleId , word-slash-word , appl ( prod ( [ lex ( sort ( "ModuleId" ) ) ] , cf ( sort ( "ModuleId" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < string ( chars ) > ) ] ) ) , constructor ( Definition , Default , appl ( prod ( [ cf ( iter-star ( sort ( "Module" ) ) ) ] , cf ( sort ( "Definition" ) ) , no-attrs ) , [ appl ( list ( cf ( iter-star ( sort ( "Module" ) ) ) ) , < list ( Module-list ) > ) ] ) ) , separated-list ( Module-list , Module , [ < ws-after-head ( OptLayout ) > ] ) , constructor ( Module , module , appl ( prod ( [ lit ( "module" ) , cf ( opt ( layout ) ) , cf ( sort ( "ModuleName" ) ) , cf ( opt ( layout ) ) , cf ( iter-star ( sort ( "ImpSection" ) ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Sections" ) ) ] , cf ( sort ( "Module" ) ) , attrs ( [ term ( cons ( "module" ) ) ] ) ) , [ lit ( "module" ) , < "ws-after-module" ( OptLayout ) > , < "ModuleName" ( ModuleName ) > , < "ws-after-ModuleName" ( OptLayout ) > , appl ( list ( cf ( iter-star ( sort ( "ImpSection" ) ) ) ) , < list ( ImpSection-list ) > ) , < ws-after-list ( OptLayout ) > , < "Sections" ( Sections ) > ] ) ) , separated-list ( ImpSection-list , ImpSection , [ < ws-after-head ( OptLayout ) > ] ) , constructor ( Section , exports , appl ( prod ( [ lit ( "exports" ) , cf ( opt ( layout ) ) , cf ( sort ( "Grammar" ) ) ] , cf ( sort ( "Section" ) ) , attrs ( [ term ( cons ( "exports" ) ) ] ) ) , [ lit ( "exports" ) , < "ws-after-exports" ( OptLayout ) > , < "Grammar" ( Grammar ) > ] ) ) , constructor ( Section , hiddens , appl ( prod ( [ lit ( "hiddens" ) , cf ( opt ( layout ) ) , cf ( sort ( "Grammar" ) ) ] , cf ( sort ( "Section" ) ) , attrs ( [ term ( cons ( "hiddens" ) ) ] ) ) , [ lit ( "hiddens" ) , < "ws-after-hiddens" ( OptLayout ) > , < "Grammar" ( Grammar ) > ] ) ) , constructor ( Sections , Default , appl ( prod ( [ cf ( iter-star ( sort ( "Section" ) ) ) ] , cf ( sort ( "Sections" ) ) , no-attrs ) , [ appl ( list ( cf ( iter-star ( sort ( "Section" ) ) ) ) , < list ( Section-list ) > ) ] ) ) , separated-list ( Section-list , Section , [ < ws-after-head ( OptLayout ) > ] ) , constructor ( ModuleName , unparameterized , appl ( prod ( [ cf ( sort ( "ModuleId" ) ) ] , cf ( sort ( "ModuleName" ) ) , attrs ( [ term ( cons ( "unparameterized" ) ) ] ) ) , [ < "ModuleId" ( ModuleId ) > ] ) ) , constructor ( ModuleName , parameterized , appl ( prod ( [ cf ( sort ( "ModuleId" ) ) , cf ( opt ( layout ) ) , lit ( "[" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbols" ) ) , cf ( opt ( layout ) ) , lit ( "]" ) ] , cf ( sort ( "ModuleName" ) ) , attrs ( [ term ( cons ( "parameterized" ) ) ] ) ) , [ < "ModuleId" ( ModuleId ) > , < "ws-after-ModuleId" ( OptLayout ) > , lit ( "[" ) , < "ws-after-[" ( OptLayout ) > , < params ( Symbols ) > , < ws-after-params ( OptLayout ) > , lit ( "]" ) ] ) ) , constructor ( Attribute , id , appl ( prod ( [ lit ( "id" ) , cf ( opt ( layout ) ) , lit ( "(" ) , cf ( opt ( layout ) ) , cf ( sort ( "ModuleName" ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "Attribute" ) ) , attrs ( [ term ( cons ( "id" ) ) ] ) ) , [ lit ( "id" ) , < "ws-after-id" ( OptLayout ) > , lit ( "(" ) , < "ws-after-(" ( OptLayout ) > , < "ModuleName" ( ModuleName ) > , < "ws-after-ModuleName" ( OptLayout ) > , lit ( ")" ) ] ) ) , constructor ( ImpSection , imports , appl ( prod ( [ lit ( "imports" ) , cf ( opt ( layout ) ) , cf ( sort ( "Imports" ) ) ] , cf ( sort ( "ImpSection" ) ) , attrs ( [ term ( cons ( "imports" ) ) ] ) ) , [ lit ( "imports" ) , < "ws-after-imports" ( OptLayout ) > , < list ( Imports ) > ] ) ) , constructor ( Grammar , imp-section , appl ( prod ( [ cf ( sort ( "ImpSection" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "imp-section" ) ) ] ) ) , [ < "ImpSection" ( ImpSection ) > ] ) ) , constructor ( Imports , Default , appl ( prod ( [ cf ( iter-star ( sort ( "Import" ) ) ) ] , cf ( sort ( "Imports" ) ) , no-attrs ) , [ appl ( list ( cf ( iter-star ( sort ( "Import" ) ) ) ) , < list ( Import-list ) > ) ] ) ) , separated-list ( Import-list , Import , [ < ws-after-head ( OptLayout ) > ] ) , constructor ( Import , module , appl ( prod ( [ cf ( sort ( "ModuleName" ) ) ] , cf ( sort ( "Import" ) ) , attrs ( [ term ( cons ( "module" ) ) ] ) ) , [ < "ModuleName" ( ModuleName ) > ] ) ) , constructor ( Import , renamed-module , appl ( prod ( [ cf ( sort ( "ModuleName" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Renamings" ) ) ] , cf ( sort ( "Import" ) ) , attrs ( [ term ( cons ( "renamed-module" ) ) ] ) ) , [ < "ModuleName" ( ModuleName ) > , < "ws-after-ModuleName" ( OptLayout ) > , < "Renamings" ( Renamings ) > ] ) ) , constructor ( Import , Bracket , appl ( prod ( [ lit ( "(" ) , cf ( opt ( layout ) ) , cf ( sort ( "Import" ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "Import" ) ) , attrs ( [ bracket ] ) ) , [ lit ( "(" ) , < "ws-after-(" ( OptLayout ) > , < "Import" ( Import ) > , < "ws-after-Import" ( OptLayout ) > , lit ( ")" ) ] ) ) , constructor ( Grammar , lexical-syntax , appl ( prod ( [ lit ( "lexical" ) , cf ( opt ( layout ) ) , lit ( "syntax" ) , cf ( opt ( layout ) ) , cf ( sort ( "Productions" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "lexical-syntax" ) ) ] ) ) , [ lit ( "lexical" ) , < "ws-after-lexical" ( OptLayout ) > , lit ( "syntax" ) , < "ws-after-syntax" ( OptLayout ) > , < "Productions" ( Productions ) > ] ) ) , constructor ( Grammar , context-free-syntax , appl ( prod ( [ lit ( "context-free" ) , cf ( opt ( layout ) ) , lit ( "syntax" ) , cf ( opt ( layout ) ) , cf ( sort ( "Productions" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "context-free-syntax" ) ) ] ) ) , [ lit ( "context-free" ) , < "ws-after-context-free" ( OptLayout ) > , lit ( "syntax" ) , < "ws-after-syntax" ( OptLayout ) > , < "Productions" ( Productions ) > ] ) ) , constructor ( Grammar , variables , appl ( prod ( [ lit ( "variables" ) , cf ( opt ( layout ) ) , cf ( sort ( "Productions" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "variables" ) ) ] ) ) , [ lit ( "variables" ) , < "ws-after-variables" ( OptLayout ) > , < "Productions" ( Productions ) > ] ) ) , constructor ( Grammar , lexical-variables , appl ( prod ( [ lit ( "lexical" ) , cf ( opt ( layout ) ) , lit ( "variables" ) , cf ( opt ( layout ) ) , cf ( sort ( "Productions" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "lexical-variables" ) ) ] ) ) , [ lit ( "lexical" ) , < "ws-after-lexical" ( OptLayout ) > , lit ( "variables" ) , < "ws-after-variables" ( OptLayout ) > , < "Productions" ( Productions ) > ] ) ) , constructor ( Symbol , cf , appl ( prod ( [ lit ( "<" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "-CF" ) , cf ( opt ( layout ) ) , lit ( ">" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "cf" ) ) ] ) ) , [ lit ( "<" ) , < "ws-after-<" ( OptLayout ) > , < "Symbol" ( Symbol ) > , < "ws-after-Symbol" ( OptLayout ) > , lit ( "-CF" ) , < "ws-after--CF" ( OptLayout ) > , lit ( ">" ) ] ) ) , constructor ( Symbol , lex , appl ( prod ( [ lit ( "<" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "-LEX" ) , cf ( opt ( layout ) ) , lit ( ">" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "lex" ) ) ] ) ) , [ lit ( "<" ) , < "ws-after-<" ( OptLayout ) > , < "Symbol" ( Symbol ) > , < "ws-after-Symbol" ( OptLayout ) > , lit ( "-LEX" ) , < "ws-after--LEX" ( OptLayout ) > , lit ( ">" ) ] ) ) , constructor ( Symbol , varsym , appl ( prod ( [ lit ( "<" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "-VAR" ) , cf ( opt ( layout ) ) , lit ( ">" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "varsym" ) ) ] ) ) , [ lit ( "<" ) , < "ws-after-<" ( OptLayout ) > , < "Symbol" ( Symbol ) > , < "ws-after-Symbol" ( OptLayout ) > , lit ( "-VAR" ) , < "ws-after--VAR" ( OptLayout ) > , lit ( ">" ) ] ) ) , constructor ( Symbol , layout , appl ( prod ( [ lit ( "LAYOUT" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "layout" ) ) ] ) ) , [ lit ( "LAYOUT" ) ] ) ) , constructor ( Grammar , empty-grammar , appl ( prod ( [ lit ( "(/)" ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "empty-grammar" ) ) ] ) ) , [ lit ( "(/)" ) ] ) ) , constructor ( Grammar , conc-grammars , appl ( prod ( [ cf ( sort ( "Grammar" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Grammar" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ assoc ( assoc ) , term ( cons ( "conc-grammars" ) ) ] ) ) , [ < "left" ( Grammar ) > , < "ws-after-left" ( OptLayout ) > , < "right" ( Grammar ) > ] ) ) , constructor ( Grammar , Bracket , appl ( prod ( [ lit ( "(" ) , cf ( opt ( layout ) ) , cf ( sort ( "Grammar" ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ bracket ] ) ) , [ lit ( "(" ) , < "ws-after-(" ( OptLayout ) > , < "Grammar" ( Grammar ) > , < "ws-after-Grammar" ( OptLayout ) > , lit ( ")" ) ] ) ) , constructor ( Symbol , Bracket , appl ( prod ( [ lit ( "(" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ bracket ] ) ) , [ lit ( "(" ) , < "ws-after-(" ( OptLayout ) > , < "Symbol" ( Symbol ) > , < "ws-after-Symbol" ( OptLayout ) > , lit ( ")" ) ] ) ) , constructor ( Symbols , Default , appl ( prod ( [ cf ( iter-star ( sort ( "Symbol" ) ) ) ] , cf ( sort ( "Symbols" ) ) , no-attrs ) , [ appl ( list ( cf ( iter-star ( sort ( "Symbol" ) ) ) ) , < list ( Symbol-list ) > ) ] ) ) , separated-list ( Symbol-list , Symbol , [ < ws-after-head ( OptLayout ) > ] ) , constructor ( OptExp , present , appl ( prod ( [ lit ( "e" ) , cf ( opt ( layout ) ) , cf ( sort ( "IntCon" ) ) ] , cf ( sort ( "OptExp" ) ) , attrs ( [ term ( cons ( "present" ) ) ] ) ) , [ lit ( "e" ) , < "ws-after-e" ( OptLayout ) > , < "IntCon" ( IntCon ) > ] ) ) , constructor ( OptExp , absent , appl ( prod ( [  ] , cf ( sort ( "OptExp" ) ) , attrs ( [ term ( cons ( "absent" ) ) ] ) ) , [  ] ) ) , constructor ( RealCon , real-con , appl ( prod ( [ cf ( sort ( "IntCon" ) ) , cf ( opt ( layout ) ) , lit ( "." ) , cf ( opt ( layout ) ) , cf ( sort ( "NatCon" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "OptExp" ) ) ] , cf ( sort ( "RealCon" ) ) , attrs ( [ term ( cons ( "real-con" ) ) ] ) ) , [ < "IntCon" ( IntCon ) > , < "ws-after-IntCon" ( OptLayout ) > , lit ( "." ) , < "ws-after-." ( OptLayout ) > , < "NatCon" ( NatCon ) > , < "ws-after-NatCon" ( OptLayout ) > , < "OptExp" ( OptExp ) > ] ) ) , constructor ( NatCon , digits , appl ( prod ( [ lex ( sort ( "NatCon" ) ) ] , cf ( sort ( "NatCon" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < string ( chars ) > ) ] ) ) , constructor ( IntCon , natural , appl ( prod ( [ cf ( sort ( "NatCon" ) ) ] , cf ( sort ( "IntCon" ) ) , attrs ( [ term ( cons ( "natural" ) ) ] ) ) , [ < "NatCon" ( NatCon ) > ] ) ) , constructor ( IntCon , positive , appl ( prod ( [ lit ( "+" ) , cf ( opt ( layout ) ) , cf ( sort ( "NatCon" ) ) ] , cf ( sort ( "IntCon" ) ) , attrs ( [ term ( cons ( "positive" ) ) ] ) ) , [ lit ( "+" ) , < ws-after-pos ( OptLayout ) > , < "NatCon" ( NatCon ) > ] ) ) , constructor ( IntCon , negative , appl ( prod ( [ lit ( "-" ) , cf ( opt ( layout ) ) , cf ( sort ( "NatCon" ) ) ] , cf ( sort ( "IntCon" ) ) , attrs ( [ term ( cons ( "negative" ) ) ] ) ) , [ lit ( "-" ) , < ws-after-neg ( OptLayout ) > , < "NatCon" ( NatCon ) > ] ) ) , constructor ( AlphaNumericalEscChar , default , appl ( prod ( [ lex ( sort ( "AlphaNumericalEscChar" ) ) ] , cf ( sort ( "AlphaNumericalEscChar" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < string ( chars ) > ) ] ) ) , constructor ( DecimalEscChar , dec0_199 , appl ( prod ( [ lex ( sort ( "DecimalEscChar" ) ) ] , cf ( sort ( "DecimalEscChar" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < string ( chars ) > ) ] ) ) , constructor ( DecimalEscChar , dec200_249 , appl ( prod ( [ lex ( sort ( "DecimalEscChar" ) ) ] , cf ( sort ( "DecimalEscChar" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < string ( chars ) > ) ] ) ) , constructor ( DecimalEscChar , dec250_255 , appl ( prod ( [ lex ( sort ( "DecimalEscChar" ) ) ] , cf ( sort ( "DecimalEscChar" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < string ( chars ) > ) ] ) ) , constructor ( EscChar , alpha-numeric , appl ( prod ( [ lex ( sort ( "EscChar" ) ) ] , cf ( sort ( "EscChar" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < string ( chars ) > ) ] ) ) , constructor ( EscChar , decimal , appl ( prod ( [ lex ( sort ( "EscChar" ) ) ] , cf ( sort ( "EscChar" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < string ( chars ) > ) ] ) ) , constructor ( L-Char , normal , appl ( prod ( [ lex ( sort ( "L-Char" ) ) ] , cf ( sort ( "L-Char" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < string ( chars ) > ) ] ) ) , constructor ( L-Char , escaped , appl ( prod ( [ lex ( sort ( "L-Char" ) ) ] , cf ( sort ( "L-Char" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < string ( chars ) > ) ] ) ) , constructor ( QLiteral , quoted , appl ( prod ( [ lex ( sort ( "QLiteral" ) ) ] , cf ( sort ( "QLiteral" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < string ( chars ) > ) ] ) ) , constructor ( UQLiteral , one-char , appl ( prod ( [ lex ( sort ( "UQLiteral" ) ) ] , cf ( sort ( "UQLiteral" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < string ( chars ) > ) ] ) ) , constructor ( UQLiteral , more-chars , appl ( prod ( [ lex ( sort ( "UQLiteral" ) ) ] , cf ( sort ( "UQLiteral" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < string ( chars ) > ) ] ) ) , constructor ( Literal , qlit , appl ( prod ( [ cf ( sort ( "QLiteral" ) ) ] , cf ( sort ( "Literal" ) ) , attrs ( [ term ( cons ( "qlit" ) ) ] ) ) , [ < "QLiteral" ( QLiteral ) > ] ) ) , constructor ( Literal , uqlit , appl ( prod ( [ cf ( sort ( "UQLiteral" ) ) ] , cf ( sort ( "Literal" ) ) , attrs ( [ term ( cons ( "uqlit" ) ) ] ) ) , [ < "UQLiteral" ( UQLiteral ) > ] ) ) , constructor ( ATermList , not-empty , appl ( prod ( [ lit ( "[" ) , cf ( opt ( layout ) ) , cf ( iter-star-sep ( sort ( "ATerm" ) , lit ( "," ) ) ) , cf ( opt ( layout ) ) , lit ( "]" ) ] , cf ( sort ( "ATermList" ) ) , attrs ( [ term ( cons ( "not-empty" ) ) ] ) ) , [ lit ( "[" ) , < "ws-after-[" ( OptLayout ) > , appl ( list ( cf ( iter-star-sep ( sort ( "ATerm" ) , lit ( "," ) ) ) ) , < elems ( ATerm-elems ) > ) , < ws-after-elems ( OptLayout ) > , lit ( "]" ) ] ) ) , separated-list ( ATerm-elems , ATerm , [ < ws-after-head ( OptLayout ) > , lit ( "," ) , < ws-after-sep ( OptLayout ) > ] ) , constructor ( ACon , int , appl ( prod ( [ cf ( sort ( "IntCon" ) ) ] , cf ( sort ( "ACon" ) ) , attrs ( [ term ( cons ( "int" ) ) ] ) ) , [ < "IntCon" ( IntCon ) > ] ) ) , constructor ( ACon , real , appl ( prod ( [ cf ( sort ( "RealCon" ) ) ] , cf ( sort ( "ACon" ) ) , attrs ( [ term ( cons ( "real" ) ) ] ) ) , [ < "RealCon" ( RealCon ) > ] ) ) , constructor ( AFun , Default , appl ( prod ( [ cf ( sort ( "Literal" ) ) ] , cf ( sort ( "AFun" ) ) , no-attrs ) , [ < "Literal" ( Literal ) > ] ) ) , constructor ( ATerm , constant , appl ( prod ( [ cf ( sort ( "ACon" ) ) ] , cf ( sort ( "ATerm" ) ) , attrs ( [ term ( cons ( "constant" ) ) ] ) ) , [ < "ACon" ( ACon ) > ] ) ) , constructor ( ATerm , list , appl ( prod ( [ cf ( sort ( "ATermList" ) ) ] , cf ( sort ( "ATerm" ) ) , attrs ( [ term ( cons ( "list" ) ) ] ) ) , [ < list ( ATermList ) > ] ) ) , constructor ( ATerm , fun , appl ( prod ( [ cf ( sort ( "AFun" ) ) ] , cf ( sort ( "ATerm" ) ) , attrs ( [ term ( cons ( "fun" ) ) ] ) ) , [ < fun ( AFun ) > ] ) ) , constructor ( ATerm , appl , appl ( prod ( [ cf ( sort ( "AFun" ) ) , cf ( opt ( layout ) ) , lit ( "(" ) , cf ( opt ( layout ) ) , cf ( iter-sep ( sort ( "ATerm" ) , lit ( "," ) ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "ATerm" ) ) , attrs ( [ term ( cons ( "appl" ) ) ] ) ) , [ < fun ( AFun ) > , < ws-after-fun ( OptLayout ) > , lit ( "(" ) , < "ws-after-(" ( OptLayout ) > , appl ( list ( cf ( iter-sep ( sort ( "ATerm" ) , lit ( "," ) ) ) ) , < args ( ATerm-args ) > ) , < ws-after-args ( OptLayout ) > , lit ( ")" ) ] ) ) , separated-list ( ATerm-args , ATerm , [ < ws-after-head ( OptLayout ) > , lit ( "," ) , < ws-after-sep ( OptLayout ) > ] ) , constructor ( Ann , annotation , appl ( prod ( [ lit ( "{" ) , cf ( opt ( layout ) ) , cf ( iter-sep ( sort ( "ATerm" ) , lit ( "," ) ) ) , cf ( opt ( layout ) ) , lit ( "}" ) ] , cf ( sort ( "Ann" ) ) , attrs ( [ term ( cons ( "annotation" ) ) ] ) ) , [ lit ( "{" ) , < "ws-after-{" ( OptLayout ) > , appl ( list ( cf ( iter-sep ( sort ( "ATerm" ) , lit ( "," ) ) ) ) , < annos ( ATerm-annos ) > ) , < ws-after-annos ( OptLayout ) > , lit ( "}" ) ] ) ) , separated-list ( ATerm-annos , ATerm , [ < ws-after-head ( OptLayout ) > , lit ( "," ) , < ws-after-sep ( OptLayout ) > ] ) , constructor ( ATerm , annotated-constant , appl ( prod ( [ cf ( sort ( "ACon" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Ann" ) ) ] , cf ( sort ( "ATerm" ) ) , attrs ( [ term ( cons ( "annotated-constant" ) ) ] ) ) , [ < "ACon" ( ACon ) > , < "ws-after-ACon" ( OptLayout ) > , < "Ann" ( Ann ) > ] ) ) , constructor ( ATerm , annotated-list , appl ( prod ( [ cf ( sort ( "ATermList" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Ann" ) ) ] , cf ( sort ( "ATerm" ) ) , attrs ( [ term ( cons ( "annotated-list" ) ) ] ) ) , [ < list ( ATermList ) > , < ws-after-list ( OptLayout ) > , < "Ann" ( Ann ) > ] ) ) , constructor ( ATerm , annotated-fun , appl ( prod ( [ cf ( sort ( "AFun" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Ann" ) ) ] , cf ( sort ( "ATerm" ) ) , attrs ( [ term ( cons ( "annotated-fun" ) ) ] ) ) , [ < fun ( AFun ) > , < ws-after-fun ( OptLayout ) > , < "Ann" ( Ann ) > ] ) ) , constructor ( ATerm , annotated-appl , appl ( prod ( [ cf ( sort ( "AFun" ) ) , cf ( opt ( layout ) ) , lit ( "(" ) , cf ( opt ( layout ) ) , cf ( iter-sep ( sort ( "ATerm" ) , lit ( "," ) ) ) , cf ( opt ( layout ) ) , lit ( ")" ) , cf ( opt ( layout ) ) , cf ( sort ( "Ann" ) ) ] , cf ( sort ( "ATerm" ) ) , attrs ( [ term ( cons ( "annotated-appl" ) ) ] ) ) , [ < fun ( AFun ) > , < ws-after-fun ( OptLayout ) > , lit ( "(" ) , < "ws-after-(" ( OptLayout ) > , appl ( list ( cf ( iter-sep ( sort ( "ATerm" ) , lit ( "," ) ) ) ) , < args ( ATerm-args ) > ) , < ws-after-args ( OptLayout ) > , lit ( ")" ) , < "ws-after-)" ( OptLayout ) > , < "Ann" ( Ann ) > ] ) ) , constructor ( Attribute , term , appl ( prod ( [ cf ( sort ( "ATerm" ) ) ] , cf ( sort ( "Attribute" ) ) , attrs ( [ term ( cons ( "term" ) ) , avoid ] ) ) , [ < aterm ( ATerm ) > ] ) ) , constructor ( Attributes , attrs , appl ( prod ( [ lit ( "{" ) , cf ( opt ( layout ) ) , cf ( iter-star-sep ( sort ( "Attribute" ) , lit ( "," ) ) ) , cf ( opt ( layout ) ) , lit ( "}" ) ] , cf ( sort ( "Attributes" ) ) , attrs ( [ term ( cons ( "attrs" ) ) ] ) ) , [ lit ( "{" ) , < "ws-after-{" ( OptLayout ) > , appl ( list ( cf ( iter-star-sep ( sort ( "Attribute" ) , lit ( "," ) ) ) ) , < list ( Attribute-list ) > ) , < ws-after-list ( OptLayout ) > , lit ( "}" ) ] ) ) , separated-list ( Attribute-list , Attribute , [ < ws-after-head ( OptLayout ) > , lit ( "," ) , < ws-after-sep ( OptLayout ) > ] ) , constructor ( Attributes , no-attrs , appl ( prod ( [  ] , cf ( sort ( "Attributes" ) ) , attrs ( [ term ( cons ( "no-attrs" ) ) ] ) ) , [  ] ) ) , constructor ( Production , prod , appl ( prod ( [ cf ( sort ( "Symbols" ) ) , cf ( opt ( layout ) ) , lit ( "->" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Attributes" ) ) ] , cf ( sort ( "Production" ) ) , attrs ( [ term ( cons ( "prod" ) ) ] ) ) , [ < "Symbols" ( Symbols ) > , < "ws-after-Symbols" ( OptLayout ) > , lit ( "->" ) , < "ws-after-->" ( OptLayout ) > , < result ( Symbol ) > , < ws-after-result ( OptLayout ) > , < "Attributes" ( Attributes ) > ] ) ) , constructor ( Productions , Default , appl ( prod ( [ cf ( iter-star ( sort ( "Production" ) ) ) ] , cf ( sort ( "Productions" ) ) , no-attrs ) , [ appl ( list ( cf ( iter-star ( sort ( "Production" ) ) ) ) , < list ( Production-list ) > ) ] ) ) , separated-list ( Production-list , Production , [ < ws-after-head ( OptLayout ) > ] ) , constructor ( Grammar , syntax , appl ( prod ( [ lit ( "syntax" ) , cf ( opt ( layout ) ) , cf ( sort ( "Productions" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "syntax" ) ) ] ) ) , [ lit ( "syntax" ) , < "ws-after-syntax" ( OptLayout ) > , < "Productions" ( Productions ) > ] ) ) , constructor ( Symbol , start , appl ( prod ( [ lit ( "<START>" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "start" ) ) ] ) ) , [ lit ( "<START>" ) ] ) ) , constructor ( Symbol , file-start , appl ( prod ( [ lit ( "<Start>" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "file-start" ) ) ] ) ) , [ lit ( "<Start>" ) ] ) ) , constructor ( Grammar , lexical-priorities , appl ( prod ( [ lit ( "lexical" ) , cf ( opt ( layout ) ) , lit ( "priorities" ) , cf ( opt ( layout ) ) , cf ( sort ( "Priorities" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "lexical-priorities" ) ) ] ) ) , [ lit ( "lexical" ) , < "ws-after-lexical" ( OptLayout ) > , lit ( "priorities" ) , < "ws-after-priorities" ( OptLayout ) > , < "Priorities" ( Priorities ) > ] ) ) , constructor ( Grammar , context-free-priorities , appl ( prod ( [ lit ( "context-free" ) , cf ( opt ( layout ) ) , lit ( "priorities" ) , cf ( opt ( layout ) ) , cf ( sort ( "Priorities" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "context-free-priorities" ) ) ] ) ) , [ lit ( "context-free" ) , < "ws-after-context-free" ( OptLayout ) > , lit ( "priorities" ) , < "ws-after-priorities" ( OptLayout ) > , < "Priorities" ( Priorities ) > ] ) ) , constructor ( Grammar , lexical-restrictions , appl ( prod ( [ lit ( "lexical" ) , cf ( opt ( layout ) ) , lit ( "restrictions" ) , cf ( opt ( layout ) ) , cf ( sort ( "Restrictions" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "lexical-restrictions" ) ) ] ) ) , [ lit ( "lexical" ) , < "ws-after-lexical" ( OptLayout ) > , lit ( "restrictions" ) , < "ws-after-restrictions" ( OptLayout ) > , < "Restrictions" ( Restrictions ) > ] ) ) , constructor ( Grammar , context-free-restrictions , appl ( prod ( [ lit ( "context-free" ) , cf ( opt ( layout ) ) , lit ( "restrictions" ) , cf ( opt ( layout ) ) , cf ( sort ( "Restrictions" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "context-free-restrictions" ) ) ] ) ) , [ lit ( "context-free" ) , < "ws-after-context-free" ( OptLayout ) > , lit ( "restrictions" ) , < "ws-after-restrictions" ( OptLayout ) > , < "Restrictions" ( Restrictions ) > ] ) ) , constructor ( SDF , definition , appl ( prod ( [ lit ( "definition" ) , cf ( opt ( layout ) ) , cf ( sort ( "Definition" ) ) ] , cf ( sort ( "SDF" ) ) , attrs ( [ term ( cons ( "definition" ) ) ] ) ) , [ lit ( "definition" ) , < "ws-after-definition" ( OptLayout ) > , < "Definition" ( Definition ) > ] ) ) , constructor ( OptLayout , Absent , appl ( prod ( [  ] , cf ( opt ( layout ) ) , no-attrs ) , [  ] ) ) , constructor ( OptLayout , Present , appl ( prod ( [ cf ( layout ) ] , cf ( opt ( layout ) ) , no-attrs ) , < string ( chars ) > ) ) , constructor ( Start , SDF , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "SDF" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-SDF ( SDF ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , Productions , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Productions" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Productions ( Productions ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , Production , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Production" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Production ( Production ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , Attributes , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Attributes" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Attributes ( Attributes ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , Attribute , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Attribute" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Attribute ( Attribute ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , Ann , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Ann" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Ann ( Ann ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , ATerm , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "ATerm" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-ATerm ( ATerm ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , AFun , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "AFun" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-AFun ( AFun ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , ACon , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "ACon" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-ACon ( ACon ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , ATermList , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "ATermList" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-ATermList ( ATermList ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , QLiteral , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "QLiteral" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-QLiteral ( QLiteral ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , UQLiteral , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "UQLiteral" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-UQLiteral ( UQLiteral ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , Literal , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Literal" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Literal ( Literal ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , IntCon , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "IntCon" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-IntCon ( IntCon ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , NatCon , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "NatCon" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-NatCon ( NatCon ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , RealCon , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "RealCon" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-RealCon ( RealCon ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , OptExp , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "OptExp" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-OptExp ( OptExp ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , Symbols , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Symbols" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Symbols ( Symbols ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , Symbol , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Symbol ( Symbol ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , Grammar , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Grammar" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Grammar ( Grammar ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , ImpSection , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "ImpSection" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-ImpSection ( ImpSection ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , Definition , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Definition" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Definition ( Definition ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , Module , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Module" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Module ( Module ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , Sections , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Sections" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Sections ( Sections ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , Section , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Section" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Section ( Section ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , Imports , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Imports" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Imports ( Imports ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , Import , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Import" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Import ( Import ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , ModuleName , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "ModuleName" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-ModuleName ( ModuleName ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , ModuleId , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "ModuleId" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-ModuleId ( ModuleId ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , Renamings , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Renamings" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Renamings ( Renamings ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , Renaming , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Renaming" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Renaming ( Renaming ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , Priorities , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Priorities" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Priorities ( Priorities ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , Priority , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Priority" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Priority ( Priority ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , Group , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Group" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Group ( Group ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , Associativity , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Associativity" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Associativity ( Associativity ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , CharClass , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "CharClass" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-CharClass ( CharClass ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , ShortChar , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "ShortChar" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-ShortChar ( ShortChar ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , NumChar , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "NumChar" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-NumChar ( NumChar ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , Character , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Character" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Character ( Character ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , Sort , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Sort" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Sort ( Sort ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , Restrictions , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Restrictions" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Restrictions ( Restrictions ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , Restriction , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Restriction" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Restriction ( Restriction ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , Lookaheads , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Lookaheads" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Lookaheads ( Lookaheads ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , Lookahead , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Lookahead" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Lookahead ( Lookahead ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , Aliases , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Aliases" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Aliases ( Aliases ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( Start , Alias , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Alias" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Alias ( Alias ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ) ]