[ [ Grammar , aliases , appl ( prod ( [ lit ( "aliases" ) , cf ( opt ( layout ) ) , cf ( sort ( "Aliases" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "aliases" ) ) ] ) ) , [ lit ( "aliases" ) , < "ws-after-aliases" ( OptLayout ) > , < Aliases ( Aliases ) > ] ) ] , [ Alias , alias , appl ( prod ( [ cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "->" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) ] , cf ( sort ( "Alias" ) ) , attrs ( [ term ( cons ( "alias" ) ) ] ) ) , [ < Symbol ( Symbol ) > , < ws-after-Symbol ( OptLayout ) > , lit ( "->" ) , < ws-after-arrow ( OptLayout ) > , < alias ( Symbol ) > ] ) ] , [ Aliases , Default , appl ( prod ( [ cf ( iter-star ( sort ( "Alias" ) ) ) ] , cf ( sort ( "Aliases" ) ) , no-attrs ) , [ appl ( list ( cf ( iter-star ( sort ( "Alias" ) ) ) ) , < list ( Alias-list ) > ) ] ) ] , [ Alias-list , empty , [  ] ] , [ Alias-list , single , [ < head ( Alias ) > ] ] , [ Alias-list , many , [ < head ( Alias ) > , < ws-after-first ( OptLayout ) > , < [ tail ( Alias-list ) ] > ] ] , [ Lookahead , char-class , appl ( prod ( [ cf ( sort ( "CharClass" ) ) ] , cf ( sort ( "Lookahead" ) ) , attrs ( [ term ( cons ( "char-class" ) ) ] ) ) , [ < CharClass ( CharClass ) > ] ) ] , [ Lookahead , seq , appl ( prod ( [ cf ( sort ( "CharClass" ) ) , cf ( opt ( layout ) ) , lit ( "." ) , cf ( opt ( layout ) ) , cf ( sort ( "Lookaheads" ) ) ] , cf ( sort ( "Lookahead" ) ) , attrs ( [ term ( cons ( "seq" ) ) ] ) ) , [ < head ( CharClass ) > , < ws-after-head ( OptLayout ) > , lit ( "." ) , < "ws-after-." ( OptLayout ) > , < tail ( Lookaheads ) > ] ) ] , [ Lookaheads , single , appl ( prod ( [ cf ( sort ( "Lookahead" ) ) ] , cf ( sort ( "Lookaheads" ) ) , attrs ( [ term ( cons ( "single" ) ) ] ) ) , [ < Lookahead ( Lookahead ) > ] ) ] , [ Lookaheads , alt , appl ( prod ( [ cf ( sort ( "Lookaheads" ) ) , cf ( opt ( layout ) ) , lit ( "|" ) , cf ( opt ( layout ) ) , cf ( sort ( "Lookaheads" ) ) ] , cf ( sort ( "Lookaheads" ) ) , attrs ( [ term ( cons ( "alt" ) ) , assoc ( right ) ] ) ) , [ < left ( Lookaheads ) > , < ws-after-left ( OptLayout ) > , lit ( "|" ) , < "ws-after-|" ( OptLayout ) > , < right ( Lookaheads ) > ] ) ] , [ Lookaheads , Bracket , appl ( prod ( [ lit ( "(" ) , cf ( opt ( layout ) ) , cf ( sort ( "Lookaheads" ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "Lookaheads" ) ) , attrs ( [ bracket ] ) ) , [ lit ( "(" ) , < "ws-after-(" ( OptLayout ) > , < Lookaheads ( Lookaheads ) > , < ws-after-Lookaheads ( OptLayout ) > , lit ( ")" ) ] ) ] , [ Lookaheads , list , appl ( prod ( [ lit ( "[[" ) , cf ( opt ( layout ) ) , cf ( iter-star-sep ( sort ( "Lookahead" ) , lit ( "," ) ) ) , cf ( opt ( layout ) ) , lit ( "]]" ) ] , cf ( sort ( "Lookaheads" ) ) , attrs ( [ term ( cons ( "list" ) ) ] ) ) , [ lit ( "[[" ) , < "ws-after-[[" ( OptLayout ) > , appl ( list ( cf ( iter-star-sep ( sort ( "Lookahead" ) , lit ( "," ) ) ) ) , < list ( Lookahead-list ) > ) , < ws-after-list ( OptLayout ) > , lit ( "]]" ) ] ) ] , [ Lookahead-list , empty , [  ] ] , [ Lookahead-list , single , [ < head ( Lookahead ) > ] ] , [ Lookahead-list , many , [ < head ( Lookahead ) > , < ws-after-first ( OptLayout ) > , lit ( < sep ( str ) > ) , < ws-after-sep ( OptLayout ) > , < [ tail ( Lookahead-list ) ] > ] ] , [ Restriction , follow , appl ( prod ( [ cf ( sort ( "Symbols" ) ) , cf ( opt ( layout ) ) , lit ( "-/-" ) , cf ( opt ( layout ) ) , cf ( sort ( "Lookaheads" ) ) ] , cf ( sort ( "Restriction" ) ) , attrs ( [ term ( cons ( "follow" ) ) ] ) ) , [ < Symbols ( Symbols ) > , < ws-after-Symbols ( OptLayout ) > , lit ( "-/-" ) , < "ws-after--/-" ( OptLayout ) > , < Lookaheads ( Lookaheads ) > ] ) ] , [ Restrictions , Default , appl ( prod ( [ cf ( iter-star ( sort ( "Restriction" ) ) ) ] , cf ( sort ( "Restrictions" ) ) , no-attrs ) , [ appl ( list ( cf ( iter-star ( sort ( "Restriction" ) ) ) ) , < list ( Restriction-list ) > ) ] ) ] , [ Restriction-list , empty , [  ] ] , [ Restriction-list , single , [ < head ( Restriction ) > ] ] , [ Restriction-list , many , [ < head ( Restriction ) > , < ws-after-first ( OptLayout ) > , < [ tail ( Restriction-list ) ] > ] ] , [ Grammar , restrictions , appl ( prod ( [ lit ( "restrictions" ) , cf ( opt ( layout ) ) , cf ( sort ( "Restrictions" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "restrictions" ) ) ] ) ) , [ lit ( "restrictions" ) , < "ws-after-restrictions" ( OptLayout ) > , < Restrictions ( Restrictions ) > ] ) ] , [ Attribute , reject , appl ( prod ( [ lit ( "reject" ) ] , cf ( sort ( "Attribute" ) ) , attrs ( [ term ( cons ( "reject" ) ) ] ) ) , [ lit ( "reject" ) ] ) ] , [ Attribute , prefer , appl ( prod ( [ lit ( "prefer" ) ] , cf ( sort ( "Attribute" ) ) , attrs ( [ term ( cons ( "prefer" ) ) ] ) ) , [ lit ( "prefer" ) ] ) ] , [ Attribute , avoid , appl ( prod ( [ lit ( "avoid" ) ] , cf ( sort ( "Attribute" ) ) , attrs ( [ term ( cons ( "avoid" ) ) ] ) ) , [ lit ( "avoid" ) ] ) ] , [ Symbol , label , appl ( prod ( [ cf ( sort ( "Literal" ) ) , cf ( opt ( layout ) ) , lit ( ":" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "label" ) ) ] ) ) , [ < label ( Literal ) > , < ws-after-label ( OptLayout ) > , lit ( ":" ) , < "ws-after-:" ( OptLayout ) > , < Symbol ( Symbol ) > ] ) ] , [ UQLiteral , one-char , appl ( prod ( [ lex ( sort ( "UQLiteral" ) ) ] , cf ( sort ( "UQLiteral" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < chars ( CHARLIST ) > ) ] ) ] , [ UQLiteral , more-chars , appl ( prod ( [ lex ( sort ( "UQLiteral" ) ) ] , cf ( sort ( "UQLiteral" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < chars ( CHARLIST ) > ) ] ) ] , [ Literal , uqlit , appl ( prod ( [ cf ( sort ( "UQLiteral" ) ) ] , cf ( sort ( "Literal" ) ) , attrs ( [ term ( cons ( "uqlit" ) ) ] ) ) , [ < UQLiteral ( UQLiteral ) > ] ) ] , [ Symbol , lit , appl ( prod ( [ cf ( sort ( "Literal" ) ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "lit" ) ) ] ) ) , [ < Literal ( Literal ) > ] ) ] , [ Production , prod-fun , appl ( prod ( [ cf ( sort ( "Literal" ) ) , cf ( opt ( layout ) ) , lit ( "(" ) , cf ( opt ( layout ) ) , cf ( iter-star-sep ( sort ( "Symbol" ) , lit ( "," ) ) ) , cf ( opt ( layout ) ) , lit ( ")" ) , cf ( opt ( layout ) ) , lit ( "->" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Attributes" ) ) ] , cf ( sort ( "Production" ) ) , attrs ( [ avoid , term ( cons ( "prod-fun" ) ) ] ) ) , [ < function-symbol ( Literal ) > , < ws-after-function-symbol ( OptLayout ) > , lit ( "(" ) , < "ws-after-(" ( OptLayout ) > , appl ( list ( cf ( iter-star-sep ( sort ( "Symbol" ) , lit ( "," ) ) ) ) , < arguments ( Symbol-arguments ) > ) , < ws-after-arguments ( OptLayout ) > , lit ( ")" ) , < "ws-after-)" ( OptLayout ) > , lit ( "->" ) , < "ws-after-->" ( OptLayout ) > , < result ( Symbol ) > , < ws-after-result ( OptLayout ) > , < Attributes ( Attributes ) > ] ) ] , [ Symbol-arguments , empty , [  ] ] , [ Symbol-arguments , single , [ < head ( Symbol ) > ] ] , [ Symbol-arguments , many , [ < head ( Symbol ) > , < ws-after-first ( OptLayout ) > , lit ( < sep ( str ) > ) , < ws-after-sep ( OptLayout ) > , < [ tail ( Symbol-arguments ) ] > ] ] , [ Sort , one-char , appl ( prod ( [ lex ( sort ( "Sort" ) ) ] , cf ( sort ( "Sort" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < chars ( CHARLIST ) > ) ] ) ] , [ Sort , more-chars , appl ( prod ( [ lex ( sort ( "Sort" ) ) ] , cf ( sort ( "Sort" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < chars ( CHARLIST ) > ) ] ) ] , [ Symbol , sort , appl ( prod ( [ cf ( sort ( "Sort" ) ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "sort" ) ) ] ) ) , [ < Sort ( Sort ) > ] ) ] , [ Symbol , parameterized-sort , appl ( prod ( [ cf ( sort ( "Sort" ) ) , cf ( opt ( layout ) ) , lit ( "[[" ) , cf ( opt ( layout ) ) , cf ( iter-sep ( sort ( "Symbol" ) , lit ( "," ) ) ) , cf ( opt ( layout ) ) , lit ( "]]" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "parameterized-sort" ) ) ] ) ) , [ < Sort ( Sort ) > , < ws-after-Sort ( OptLayout ) > , lit ( "[[" ) , < "ws-after-[[" ( OptLayout ) > , appl ( list ( cf ( iter-sep ( sort ( "Symbol" ) , lit ( "," ) ) ) ) , < parameters ( Symbol-parameters ) > ) , < ws-after-parameters ( OptLayout ) > , lit ( "]]" ) ] ) ] , [ Symbol-parameters , single , [ < head ( Symbol ) > ] ] , [ Symbol-parameters , many , [ < head ( Symbol ) > , < ws-after-first ( OptLayout ) > , lit ( < sep ( str ) > ) , < ws-after-sep ( OptLayout ) > , < [ tail ( Symbol-parameters ) ] > ] ] , [ Grammar , sorts , appl ( prod ( [ lit ( "sorts" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbols" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "sorts" ) ) ] ) ) , [ lit ( "sorts" ) , < "ws-after-sorts" ( OptLayout ) > , < Symbols ( Symbols ) > ] ) ] , [ NumChar , digits , appl ( prod ( [ lex ( sort ( "NumChar" ) ) ] , cf ( sort ( "NumChar" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < chars ( CHARLIST ) > ) ] ) ] , [ ShortChar , regular , appl ( prod ( [ lex ( sort ( "ShortChar" ) ) ] , cf ( sort ( "ShortChar" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < chars ( CHARLIST ) > ) ] ) ] , [ ShortChar , escaped , appl ( prod ( [ lex ( sort ( "ShortChar" ) ) ] , cf ( sort ( "ShortChar" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < chars ( CHARLIST ) > ) ] ) ] , [ Character , numeric , appl ( prod ( [ cf ( sort ( "NumChar" ) ) ] , cf ( sort ( "Character" ) ) , attrs ( [ term ( cons ( "numeric" ) ) ] ) ) , [ < NumChar ( NumChar ) > ] ) ] , [ Character , short , appl ( prod ( [ cf ( sort ( "ShortChar" ) ) ] , cf ( sort ( "Character" ) ) , attrs ( [ term ( cons ( "short" ) ) ] ) ) , [ < ShortChar ( ShortChar ) > ] ) ] , [ Character , top , appl ( prod ( [ lit ( "\\TOP" ) ] , cf ( sort ( "Character" ) ) , attrs ( [ term ( cons ( "top" ) ) ] ) ) , [ lit ( "\\TOP" ) ] ) ] , [ Character , eof , appl ( prod ( [ lit ( "\\EOF" ) ] , cf ( sort ( "Character" ) ) , attrs ( [ term ( cons ( "eof" ) ) ] ) ) , [ lit ( "\\EOF" ) ] ) ] , [ Character , bot , appl ( prod ( [ lit ( "\\BOT" ) ] , cf ( sort ( "Character" ) ) , attrs ( [ term ( cons ( "bot" ) ) ] ) ) , [ lit ( "\\BOT" ) ] ) ] , [ Character , label_start , appl ( prod ( [ lit ( "\\LABEL_START" ) ] , cf ( sort ( "Character" ) ) , attrs ( [ term ( cons ( "label_start" ) ) ] ) ) , [ lit ( "\\LABEL_START" ) ] ) ] , [ CharRange , Default , appl ( prod ( [ cf ( sort ( "Character" ) ) ] , cf ( sort ( "CharRange" ) ) , no-attrs ) , [ < Character ( Character ) > ] ) ] , [ CharRange , range , appl ( prod ( [ cf ( sort ( "Character" ) ) , cf ( opt ( layout ) ) , lit ( "-" ) , cf ( opt ( layout ) ) , cf ( sort ( "Character" ) ) ] , cf ( sort ( "CharRange" ) ) , attrs ( [ term ( cons ( "range" ) ) ] ) ) , [ < start ( Character ) > , < ws-after-start ( OptLayout ) > , lit ( "-" ) , < "ws-after--" ( OptLayout ) > , < end ( Character ) > ] ) ] , [ CharRanges , Default , appl ( prod ( [ cf ( sort ( "CharRange" ) ) ] , cf ( sort ( "CharRanges" ) ) , no-attrs ) , [ < CharRange ( CharRange ) > ] ) ] , [ CharRanges , conc , appl ( prod ( [ cf ( sort ( "CharRanges" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "CharRanges" ) ) ] , cf ( sort ( "CharRanges" ) ) , attrs ( [ term ( cons ( "conc" ) ) , assoc ( right ) , term ( memo ) ] ) ) , [ < left ( CharRanges ) > , < ws-after-left ( OptLayout ) > , < right ( CharRanges ) > ] ) ] , [ CharRanges , Bracket , appl ( prod ( [ lit ( "(" ) , cf ( opt ( layout ) ) , cf ( sort ( "CharRanges" ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "CharRanges" ) ) , attrs ( [ bracket ] ) ) , [ lit ( "(" ) , < "ws-after-(" ( OptLayout ) > , < CharRanges ( CharRanges ) > , < ws-after-CharRanges ( OptLayout ) > , lit ( ")" ) ] ) ] , [ OptCharRanges , absent , appl ( prod ( [  ] , cf ( sort ( "OptCharRanges" ) ) , attrs ( [ term ( cons ( "absent" ) ) ] ) ) , [  ] ) ] , [ OptCharRanges , present , appl ( prod ( [ cf ( sort ( "CharRanges" ) ) ] , cf ( sort ( "OptCharRanges" ) ) , attrs ( [ term ( cons ( "present" ) ) ] ) ) , [ < CharRanges ( CharRanges ) > ] ) ] , [ CharClass , simple-charclass , appl ( prod ( [ lit ( "[" ) , cf ( opt ( layout ) ) , cf ( sort ( "OptCharRanges" ) ) , cf ( opt ( layout ) ) , lit ( "]" ) ] , cf ( sort ( "CharClass" ) ) , attrs ( [ term ( cons ( "simple-charclass" ) ) ] ) ) , [ lit ( "[" ) , < "ws-after-[" ( OptLayout ) > , < OptCharRanges ( OptCharRanges ) > , < ws-after-OptCharRanges ( OptLayout ) > , lit ( "]" ) ] ) ] , [ CharClass , comp , appl ( prod ( [ lit ( "~" ) , cf ( opt ( layout ) ) , cf ( sort ( "CharClass" ) ) ] , cf ( sort ( "CharClass" ) ) , attrs ( [ term ( cons ( "comp" ) ) ] ) ) , [ lit ( "~" ) , < "ws-after-~" ( OptLayout ) > , < CharClass ( CharClass ) > ] ) ] , [ CharClass , diff , appl ( prod ( [ cf ( sort ( "CharClass" ) ) , cf ( opt ( layout ) ) , lit ( "/" ) , cf ( opt ( layout ) ) , cf ( sort ( "CharClass" ) ) ] , cf ( sort ( "CharClass" ) ) , attrs ( [ term ( cons ( "diff" ) ) , assoc ( left ) , term ( memo ) ] ) ) , [ < left ( CharClass ) > , < ws-after-left ( OptLayout ) > , lit ( "/" ) , < "ws-after-/" ( OptLayout ) > , < right ( CharClass ) > ] ) ] , [ CharClass , isect , appl ( prod ( [ cf ( sort ( "CharClass" ) ) , cf ( opt ( layout ) ) , lit ( "/\\" ) , cf ( opt ( layout ) ) , cf ( sort ( "CharClass" ) ) ] , cf ( sort ( "CharClass" ) ) , attrs ( [ term ( cons ( "isect" ) ) , assoc ( left ) , term ( memo ) ] ) ) , [ < left ( CharClass ) > , < ws-after-left ( OptLayout ) > , lit ( "/\\" ) , < "ws-after-/\\" ( OptLayout ) > , < right ( CharClass ) > ] ) ] , [ CharClass , union , appl ( prod ( [ cf ( sort ( "CharClass" ) ) , cf ( opt ( layout ) ) , lit ( "\\/" ) , cf ( opt ( layout ) ) , cf ( sort ( "CharClass" ) ) ] , cf ( sort ( "CharClass" ) ) , attrs ( [ term ( cons ( "union" ) ) , assoc ( left ) ] ) ) , [ < left ( CharClass ) > , < ws-after-left ( OptLayout ) > , lit ( "\\/" ) , < "ws-after-\\/" ( OptLayout ) > , < right ( CharClass ) > ] ) ] , [ CharClass , Bracket , appl ( prod ( [ lit ( "(" ) , cf ( opt ( layout ) ) , cf ( sort ( "CharClass" ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "CharClass" ) ) , attrs ( [ bracket ] ) ) , [ lit ( "(" ) , < "ws-after-(" ( OptLayout ) > , < CharClass ( CharClass ) > , < ws-after-CharClass ( OptLayout ) > , lit ( ")" ) ] ) ] , [ Symbol , char-class , appl ( prod ( [ cf ( sort ( "CharClass" ) ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "char-class" ) ) ] ) ) , [ < CharClass ( CharClass ) > ] ) ] , [ Associativity , left , appl ( prod ( [ lit ( "left" ) ] , cf ( sort ( "Associativity" ) ) , attrs ( [ term ( cons ( "left" ) ) ] ) ) , [ lit ( "left" ) ] ) ] , [ Associativity , right , appl ( prod ( [ lit ( "right" ) ] , cf ( sort ( "Associativity" ) ) , attrs ( [ term ( cons ( "right" ) ) ] ) ) , [ lit ( "right" ) ] ) ] , [ Associativity , non-assoc , appl ( prod ( [ lit ( "non-assoc" ) ] , cf ( sort ( "Associativity" ) ) , attrs ( [ term ( cons ( "non-assoc" ) ) ] ) ) , [ lit ( "non-assoc" ) ] ) ] , [ Associativity , assoc , appl ( prod ( [ lit ( "assoc" ) ] , cf ( sort ( "Associativity" ) ) , attrs ( [ term ( cons ( "assoc" ) ) ] ) ) , [ lit ( "assoc" ) ] ) ] , [ Attribute , bracket , appl ( prod ( [ lit ( "bracket" ) ] , cf ( sort ( "Attribute" ) ) , attrs ( [ term ( cons ( "bracket" ) ) ] ) ) , [ lit ( "bracket" ) ] ) ] , [ Attribute , assoc , appl ( prod ( [ cf ( sort ( "Associativity" ) ) ] , cf ( sort ( "Attribute" ) ) , attrs ( [ term ( cons ( "assoc" ) ) ] ) ) , [ < Associativity ( Associativity ) > ] ) ] , [ Group , simple-group , appl ( prod ( [ cf ( sort ( "Production" ) ) ] , cf ( sort ( "Group" ) ) , attrs ( [ term ( cons ( "simple-group" ) ) ] ) ) , [ < Production ( Production ) > ] ) ] , [ Group , prods-group , appl ( prod ( [ lit ( "{" ) , cf ( opt ( layout ) ) , cf ( sort ( "Productions" ) ) , cf ( opt ( layout ) ) , lit ( "}" ) ] , cf ( sort ( "Group" ) ) , attrs ( [ term ( cons ( "prods-group" ) ) ] ) ) , [ lit ( "{" ) , < "ws-after-{" ( OptLayout ) > , < Productions ( Productions ) > , < ws-after-Productions ( OptLayout ) > , lit ( "}" ) ] ) ] , [ Group , assoc-group , appl ( prod ( [ lit ( "{" ) , cf ( opt ( layout ) ) , cf ( sort ( "Associativity" ) ) , cf ( opt ( layout ) ) , lit ( ":" ) , cf ( opt ( layout ) ) , cf ( sort ( "Productions" ) ) , cf ( opt ( layout ) ) , lit ( "}" ) ] , cf ( sort ( "Group" ) ) , attrs ( [ term ( cons ( "assoc-group" ) ) ] ) ) , [ lit ( "{" ) , < "ws-after-{" ( OptLayout ) > , < Associativity ( Associativity ) > , < ws-after-Associativity ( OptLayout ) > , lit ( ":" ) , < "ws-after-:" ( OptLayout ) > , < Productions ( Productions ) > , < ws-after-Productions ( OptLayout ) > , lit ( "}" ) ] ) ] , [ Priority , chain , appl ( prod ( [ cf ( iter-sep ( sort ( "Group" ) , lit ( ">" ) ) ) ] , cf ( sort ( "Priority" ) ) , attrs ( [ term ( cons ( "chain" ) ) ] ) ) , [ appl ( list ( cf ( iter-sep ( sort ( "Group" ) , lit ( ">" ) ) ) ) , < list ( Group-list ) > ) ] ) ] , [ Group-list , single , [ < head ( Group ) > ] ] , [ Group-list , many , [ < head ( Group ) > , < ws-after-first ( OptLayout ) > , lit ( < sep ( str ) > ) , < ws-after-sep ( OptLayout ) > , < [ tail ( Group-list ) ] > ] ] , [ Priority , assoc , appl ( prod ( [ cf ( sort ( "Group" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Associativity" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Group" ) ) ] , cf ( sort ( "Priority" ) ) , attrs ( [ term ( cons ( "assoc" ) ) ] ) ) , [ < left ( Group ) > , < ws-after-left ( OptLayout ) > , < Associativity ( Associativity ) > , < ws-after-Associativity ( OptLayout ) > , < right ( Group ) > ] ) ] , [ Priorities , Default , appl ( prod ( [ cf ( iter-star-sep ( sort ( "Priority" ) , lit ( "," ) ) ) ] , cf ( sort ( "Priorities" ) ) , no-attrs ) , [ appl ( list ( cf ( iter-star-sep ( sort ( "Priority" ) , lit ( "," ) ) ) ) , < list ( Priority-list ) > ) ] ) ] , [ Priority-list , empty , [  ] ] , [ Priority-list , single , [ < head ( Priority ) > ] ] , [ Priority-list , many , [ < head ( Priority ) > , < ws-after-first ( OptLayout ) > , lit ( < sep ( str ) > ) , < ws-after-sep ( OptLayout ) > , < [ tail ( Priority-list ) ] > ] ] , [ Grammar , priorities , appl ( prod ( [ lit ( "priorities" ) , cf ( opt ( layout ) ) , cf ( sort ( "Priorities" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "priorities" ) ) ] ) ) , [ lit ( "priorities" ) , < "ws-after-priorities" ( OptLayout ) > , < Priorities ( Priorities ) > ] ) ] , [ Symbol , lifting , appl ( prod ( [ lit ( "`" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "`" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "lifting" ) ) ] ) ) , [ lit ( "`" ) , < ws-after-left-quote ( OptLayout ) > , < Symbol ( Symbol ) > , < ws-after-Symbol ( OptLayout ) > , lit ( "`" ) ] ) ] , [ Symbol , empty , appl ( prod ( [ lit ( "(" ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "empty" ) ) ] ) ) , [ lit ( "(" ) , < "ws-after-(" ( OptLayout ) > , lit ( ")" ) ] ) ] , [ Symbol , seq , appl ( prod ( [ lit ( "(" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , cf ( iter ( sort ( "Symbol" ) ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "seq" ) ) ] ) ) , [ lit ( "(" ) , < "ws-after-(" ( OptLayout ) > , < head ( Symbol ) > , < ws-after-head ( OptLayout ) > , appl ( list ( cf ( iter ( sort ( "Symbol" ) ) ) ) , < tail ( Symbol-tail ) > ) , < ws-after-tail ( OptLayout ) > , lit ( ")" ) ] ) ] , [ Symbol-tail , single , [ < head ( Symbol ) > ] ] , [ Symbol-tail , many , [ < head ( Symbol ) > , < ws-after-first ( OptLayout ) > , < [ tail ( Symbol-tail ) ] > ] ] , [ Symbol , opt , appl ( prod ( [ cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "?" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "opt" ) ) ] ) ) , [ < Symbol ( Symbol ) > , < ws-after-Symbol ( OptLayout ) > , lit ( "?" ) ] ) ] , [ Symbol , iter , appl ( prod ( [ cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "+" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "iter" ) ) ] ) ) , [ < Symbol ( Symbol ) > , < ws-after-Symbol ( OptLayout ) > , lit ( "+" ) ] ) ] , [ Symbol , iter-star , appl ( prod ( [ cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "*" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "iter-star" ) ) ] ) ) , [ < Symbol ( Symbol ) > , < ws-after-Symbol ( OptLayout ) > , lit ( "*" ) ] ) ] , [ Symbol , iter-sep , appl ( prod ( [ lit ( "{" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "}" ) , cf ( opt ( layout ) ) , lit ( "+" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "iter-sep" ) ) ] ) ) , [ lit ( "{" ) , < "ws-after-{" ( OptLayout ) > , < Symbol ( Symbol ) > , < ws-after-Symbol ( OptLayout ) > , < sep ( Symbol ) > , < ws-after-sep ( OptLayout ) > , lit ( "}" ) , < "ws-after-}" ( OptLayout ) > , lit ( "+" ) ] ) ] , [ Symbol , iter-star-sep , appl ( prod ( [ lit ( "{" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "}" ) , cf ( opt ( layout ) ) , lit ( "*" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "iter-star-sep" ) ) ] ) ) , [ lit ( "{" ) , < "ws-after-{" ( OptLayout ) > , < Symbol ( Symbol ) > , < ws-after-Symbol ( OptLayout ) > , < sep ( Symbol ) > , < ws-after-sep ( OptLayout ) > , lit ( "}" ) , < "ws-after-}" ( OptLayout ) > , lit ( "*" ) ] ) ] , [ Symbol , iter-n , appl ( prod ( [ cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "NatCon" ) ) , cf ( opt ( layout ) ) , lit ( "+" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "iter-n" ) ) ] ) ) , [ < Symbol ( Symbol ) > , < ws-after-Symbol ( OptLayout ) > , < n ( NatCon ) > , < ws-after-n ( OptLayout ) > , lit ( "+" ) ] ) ] , [ Symbol , iter-sep-n , appl ( prod ( [ lit ( "{" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "}" ) , cf ( opt ( layout ) ) , cf ( sort ( "NatCon" ) ) , cf ( opt ( layout ) ) , lit ( "+" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "iter-sep-n" ) ) ] ) ) , [ lit ( "{" ) , < "ws-after-{" ( OptLayout ) > , < Symbol ( Symbol ) > , < ws-after-Symbol ( OptLayout ) > , < sep ( Symbol ) > , < ws-after-sep ( OptLayout ) > , lit ( "}" ) , < "ws-after-}" ( OptLayout ) > , < n ( NatCon ) > , < ws-after-n ( OptLayout ) > , lit ( "+" ) ] ) ] , [ Symbol , set , appl ( prod ( [ lit ( "Set" ) , cf ( opt ( layout ) ) , lit ( "[" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "]" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "set" ) ) ] ) ) , [ lit ( "Set" ) , < "ws-after-Set" ( OptLayout ) > , lit ( "[" ) , < "ws-after-[" ( OptLayout ) > , < Symbol ( Symbol ) > , < ws-after-Symbol ( OptLayout ) > , lit ( "]" ) ] ) ] , [ Symbol , pair , appl ( prod ( [ cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "#" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ assoc ( right ) , term ( cons ( "pair" ) ) ] ) ) , [ < left ( Symbol ) > , < ws-after-left ( OptLayout ) > , lit ( "#" ) , < "ws-after-#" ( OptLayout ) > , < right ( Symbol ) > ] ) ] , [ Symbol , func , appl ( prod ( [ lit ( "(" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbols" ) ) , cf ( opt ( layout ) ) , lit ( "=>" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "func" ) ) ] ) ) , [ lit ( "(" ) , < "ws-after-(" ( OptLayout ) > , < arguments ( Symbols ) > , < ws-after-arguments ( OptLayout ) > , lit ( "=>" ) , < "ws-after-=>" ( OptLayout ) > , < results ( Symbol ) > , < ws-after-results ( OptLayout ) > , lit ( ")" ) ] ) ] , [ Symbol , alt , appl ( prod ( [ cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "|" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ assoc ( right ) , term ( cons ( "alt" ) ) ] ) ) , [ < left ( Symbol ) > , < ws-after-left ( OptLayout ) > , lit ( "|" ) , < "ws-after-|" ( OptLayout ) > , < right ( Symbol ) > ] ) ] , [ Symbol , perm , appl ( prod ( [ lit ( "<<" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbols" ) ) , cf ( opt ( layout ) ) , lit ( ">>" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "perm" ) ) ] ) ) , [ lit ( "<<" ) , < "ws-after-<<" ( OptLayout ) > , < Symbols ( Symbols ) > , < ws-after-Symbols ( OptLayout ) > , lit ( ">>" ) ] ) ] , [ Renamings , renamings , appl ( prod ( [ lit ( "[" ) , cf ( opt ( layout ) ) , cf ( iter-star ( sort ( "Renaming" ) ) ) , cf ( opt ( layout ) ) , lit ( "]" ) ] , cf ( sort ( "Renamings" ) ) , attrs ( [ term ( cons ( "renamings" ) ) ] ) ) , [ lit ( "[" ) , < "ws-after-[" ( OptLayout ) > , appl ( list ( cf ( iter-star ( sort ( "Renaming" ) ) ) ) , < list ( Renaming-list ) > ) , < ws-after-list ( OptLayout ) > , lit ( "]" ) ] ) ] , [ Renaming-list , empty , [  ] ] , [ Renaming-list , single , [ < head ( Renaming ) > ] ] , [ Renaming-list , many , [ < head ( Renaming ) > , < ws-after-first ( OptLayout ) > , < [ tail ( Renaming-list ) ] > ] ] , [ Renaming , symbol , appl ( prod ( [ cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "=>" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) ] , cf ( sort ( "Renaming" ) ) , attrs ( [ term ( cons ( "symbol" ) ) ] ) ) , [ < from ( Symbol ) > , < ws-after-from ( OptLayout ) > , lit ( "=>" ) , < "ws-after-=>" ( OptLayout ) > , < to ( Symbol ) > ] ) ] , [ Renaming , production , appl ( prod ( [ cf ( sort ( "Production" ) ) , cf ( opt ( layout ) ) , lit ( "=>" ) , cf ( opt ( layout ) ) , cf ( sort ( "Production" ) ) ] , cf ( sort ( "Renaming" ) ) , attrs ( [ term ( cons ( "production" ) ) ] ) ) , [ < from-prod ( Production ) > , < ws-after-from-prod ( OptLayout ) > , lit ( "=>" ) , < "ws-after-=>" ( OptLayout ) > , < to-prod ( Production ) > ] ) ] , [ ModuleWord , word , appl ( prod ( [ lex ( sort ( "ModuleWord" ) ) ] , cf ( sort ( "ModuleWord" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < chars ( CHARLIST ) > ) ] ) ] , [ ModuleId , word , appl ( prod ( [ lex ( sort ( "ModuleId" ) ) ] , cf ( sort ( "ModuleId" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < chars ( CHARLIST ) > ) ] ) ] , [ ModuleId , slash-word , appl ( prod ( [ lex ( sort ( "ModuleId" ) ) ] , cf ( sort ( "ModuleId" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < chars ( CHARLIST ) > ) ] ) ] , [ ModuleId , word-slash-word , appl ( prod ( [ lex ( sort ( "ModuleId" ) ) ] , cf ( sort ( "ModuleId" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < chars ( CHARLIST ) > ) ] ) ] , [ Definition , Default , appl ( prod ( [ cf ( iter-star ( sort ( "Module" ) ) ) ] , cf ( sort ( "Definition" ) ) , no-attrs ) , [ appl ( list ( cf ( iter-star ( sort ( "Module" ) ) ) ) , < list ( Module-list ) > ) ] ) ] , [ Module-list , empty , [  ] ] , [ Module-list , single , [ < head ( Module ) > ] ] , [ Module-list , many , [ < head ( Module ) > , < ws-after-first ( OptLayout ) > , < [ tail ( Module-list ) ] > ] ] , [ Module , module , appl ( prod ( [ lit ( "module" ) , cf ( opt ( layout ) ) , cf ( sort ( "ModuleName" ) ) , cf ( opt ( layout ) ) , cf ( iter-star ( sort ( "ImpSection" ) ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Sections" ) ) ] , cf ( sort ( "Module" ) ) , attrs ( [ term ( cons ( "module" ) ) ] ) ) , [ lit ( "module" ) , < "ws-after-module" ( OptLayout ) > , < ModuleName ( ModuleName ) > , < ws-after-ModuleName ( OptLayout ) > , appl ( list ( cf ( iter-star ( sort ( "ImpSection" ) ) ) ) , < list ( ImpSection-list ) > ) , < ws-after-list ( OptLayout ) > , < Sections ( Sections ) > ] ) ] , [ ImpSection-list , empty , [  ] ] , [ ImpSection-list , single , [ < head ( ImpSection ) > ] ] , [ ImpSection-list , many , [ < head ( ImpSection ) > , < ws-after-first ( OptLayout ) > , < [ tail ( ImpSection-list ) ] > ] ] , [ Section , exports , appl ( prod ( [ lit ( "exports" ) , cf ( opt ( layout ) ) , cf ( sort ( "Grammar" ) ) ] , cf ( sort ( "Section" ) ) , attrs ( [ term ( cons ( "exports" ) ) ] ) ) , [ lit ( "exports" ) , < "ws-after-exports" ( OptLayout ) > , < Grammar ( Grammar ) > ] ) ] , [ Section , hiddens , appl ( prod ( [ lit ( "hiddens" ) , cf ( opt ( layout ) ) , cf ( sort ( "Grammar" ) ) ] , cf ( sort ( "Section" ) ) , attrs ( [ term ( cons ( "hiddens" ) ) ] ) ) , [ lit ( "hiddens" ) , < "ws-after-hiddens" ( OptLayout ) > , < Grammar ( Grammar ) > ] ) ] , [ Sections , Default , appl ( prod ( [ cf ( iter-star ( sort ( "Section" ) ) ) ] , cf ( sort ( "Sections" ) ) , no-attrs ) , [ appl ( list ( cf ( iter-star ( sort ( "Section" ) ) ) ) , < list ( Section-list ) > ) ] ) ] , [ Section-list , empty , [  ] ] , [ Section-list , single , [ < head ( Section ) > ] ] , [ Section-list , many , [ < head ( Section ) > , < ws-after-first ( OptLayout ) > , < [ tail ( Section-list ) ] > ] ] , [ ModuleName , unparameterized , appl ( prod ( [ cf ( sort ( "ModuleId" ) ) ] , cf ( sort ( "ModuleName" ) ) , attrs ( [ term ( cons ( "unparameterized" ) ) ] ) ) , [ < ModuleId ( ModuleId ) > ] ) ] , [ ModuleName , parameterized , appl ( prod ( [ cf ( sort ( "ModuleId" ) ) , cf ( opt ( layout ) ) , lit ( "[" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbols" ) ) , cf ( opt ( layout ) ) , lit ( "]" ) ] , cf ( sort ( "ModuleName" ) ) , attrs ( [ term ( cons ( "parameterized" ) ) ] ) ) , [ < ModuleId ( ModuleId ) > , < ws-after-ModuleId ( OptLayout ) > , lit ( "[" ) , < "ws-after-[" ( OptLayout ) > , < params ( Symbols ) > , < ws-after-params ( OptLayout ) > , lit ( "]" ) ] ) ] , [ Attribute , id , appl ( prod ( [ lit ( "id" ) , cf ( opt ( layout ) ) , lit ( "(" ) , cf ( opt ( layout ) ) , cf ( sort ( "ModuleName" ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "Attribute" ) ) , attrs ( [ term ( cons ( "id" ) ) ] ) ) , [ lit ( "id" ) , < "ws-after-id" ( OptLayout ) > , lit ( "(" ) , < "ws-after-(" ( OptLayout ) > , < ModuleName ( ModuleName ) > , < ws-after-ModuleName ( OptLayout ) > , lit ( ")" ) ] ) ] , [ ImpSection , imports , appl ( prod ( [ lit ( "imports" ) , cf ( opt ( layout ) ) , cf ( sort ( "Imports" ) ) ] , cf ( sort ( "ImpSection" ) ) , attrs ( [ term ( cons ( "imports" ) ) ] ) ) , [ lit ( "imports" ) , < "ws-after-imports" ( OptLayout ) > , < list ( Imports ) > ] ) ] , [ Grammar , imp-section , appl ( prod ( [ cf ( sort ( "ImpSection" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "imp-section" ) ) ] ) ) , [ < ImpSection ( ImpSection ) > ] ) ] , [ Imports , Default , appl ( prod ( [ cf ( iter-star ( sort ( "Import" ) ) ) ] , cf ( sort ( "Imports" ) ) , no-attrs ) , [ appl ( list ( cf ( iter-star ( sort ( "Import" ) ) ) ) , < list ( Import-list ) > ) ] ) ] , [ Import-list , empty , [  ] ] , [ Import-list , single , [ < head ( Import ) > ] ] , [ Import-list , many , [ < head ( Import ) > , < ws-after-first ( OptLayout ) > , < [ tail ( Import-list ) ] > ] ] , [ Import , module , appl ( prod ( [ cf ( sort ( "ModuleName" ) ) ] , cf ( sort ( "Import" ) ) , attrs ( [ term ( cons ( "module" ) ) ] ) ) , [ < ModuleName ( ModuleName ) > ] ) ] , [ Import , renamed-module , appl ( prod ( [ cf ( sort ( "ModuleName" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Renamings" ) ) ] , cf ( sort ( "Import" ) ) , attrs ( [ term ( cons ( "renamed-module" ) ) ] ) ) , [ < ModuleName ( ModuleName ) > , < ws-after-ModuleName ( OptLayout ) > , < Renamings ( Renamings ) > ] ) ] , [ Import , Bracket , appl ( prod ( [ lit ( "(" ) , cf ( opt ( layout ) ) , cf ( sort ( "Import" ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "Import" ) ) , attrs ( [ bracket ] ) ) , [ lit ( "(" ) , < "ws-after-(" ( OptLayout ) > , < Import ( Import ) > , < ws-after-Import ( OptLayout ) > , lit ( ")" ) ] ) ] , [ Grammar , lexical-syntax , appl ( prod ( [ lit ( "lexical" ) , cf ( opt ( layout ) ) , lit ( "syntax" ) , cf ( opt ( layout ) ) , cf ( sort ( "Productions" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "lexical-syntax" ) ) ] ) ) , [ lit ( "lexical" ) , < "ws-after-lexical" ( OptLayout ) > , lit ( "syntax" ) , < "ws-after-syntax" ( OptLayout ) > , < Productions ( Productions ) > ] ) ] , [ Grammar , context-free-syntax , appl ( prod ( [ lit ( "context-free" ) , cf ( opt ( layout ) ) , lit ( "syntax" ) , cf ( opt ( layout ) ) , cf ( sort ( "Productions" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "context-free-syntax" ) ) ] ) ) , [ lit ( "context-free" ) , < "ws-after-context-free" ( OptLayout ) > , lit ( "syntax" ) , < "ws-after-syntax" ( OptLayout ) > , < Productions ( Productions ) > ] ) ] , [ Grammar , variables , appl ( prod ( [ lit ( "variables" ) , cf ( opt ( layout ) ) , cf ( sort ( "Productions" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "variables" ) ) ] ) ) , [ lit ( "variables" ) , < "ws-after-variables" ( OptLayout ) > , < Productions ( Productions ) > ] ) ] , [ Grammar , lexical-variables , appl ( prod ( [ lit ( "lexical" ) , cf ( opt ( layout ) ) , lit ( "variables" ) , cf ( opt ( layout ) ) , cf ( sort ( "Productions" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "lexical-variables" ) ) ] ) ) , [ lit ( "lexical" ) , < "ws-after-lexical" ( OptLayout ) > , lit ( "variables" ) , < "ws-after-variables" ( OptLayout ) > , < Productions ( Productions ) > ] ) ] , [ Symbol , cf , appl ( prod ( [ lit ( "<" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "-CF" ) , cf ( opt ( layout ) ) , lit ( ">" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "cf" ) ) ] ) ) , [ lit ( "<" ) , < "ws-after-<" ( OptLayout ) > , < Symbol ( Symbol ) > , < ws-after-Symbol ( OptLayout ) > , lit ( "-CF" ) , < "ws-after--CF" ( OptLayout ) > , lit ( ">" ) ] ) ] , [ Symbol , lex , appl ( prod ( [ lit ( "<" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "-LEX" ) , cf ( opt ( layout ) ) , lit ( ">" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "lex" ) ) ] ) ) , [ lit ( "<" ) , < "ws-after-<" ( OptLayout ) > , < Symbol ( Symbol ) > , < ws-after-Symbol ( OptLayout ) > , lit ( "-LEX" ) , < "ws-after--LEX" ( OptLayout ) > , lit ( ">" ) ] ) ] , [ Symbol , varsym , appl ( prod ( [ lit ( "<" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "-VAR" ) , cf ( opt ( layout ) ) , lit ( ">" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "varsym" ) ) ] ) ) , [ lit ( "<" ) , < "ws-after-<" ( OptLayout ) > , < Symbol ( Symbol ) > , < ws-after-Symbol ( OptLayout ) > , lit ( "-VAR" ) , < "ws-after--VAR" ( OptLayout ) > , lit ( ">" ) ] ) ] , [ Symbol , layout , appl ( prod ( [ lit ( "LAYOUT" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "layout" ) ) ] ) ) , [ lit ( "LAYOUT" ) ] ) ] , [ Grammar , empty-grammar , appl ( prod ( [ lit ( "(/)" ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "empty-grammar" ) ) ] ) ) , [ lit ( "(/)" ) ] ) ] , [ Grammar , conc-grammars , appl ( prod ( [ cf ( sort ( "Grammar" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Grammar" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ assoc ( assoc ) , term ( cons ( "conc-grammars" ) ) ] ) ) , [ < left ( Grammar ) > , < ws-after-left ( OptLayout ) > , < right ( Grammar ) > ] ) ] , [ Grammar , Bracket , appl ( prod ( [ lit ( "(" ) , cf ( opt ( layout ) ) , cf ( sort ( "Grammar" ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ bracket ] ) ) , [ lit ( "(" ) , < "ws-after-(" ( OptLayout ) > , < Grammar ( Grammar ) > , < ws-after-Grammar ( OptLayout ) > , lit ( ")" ) ] ) ] , [ Symbol , Bracket , appl ( prod ( [ lit ( "(" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ bracket ] ) ) , [ lit ( "(" ) , < "ws-after-(" ( OptLayout ) > , < Symbol ( Symbol ) > , < ws-after-Symbol ( OptLayout ) > , lit ( ")" ) ] ) ] , [ Symbols , Default , appl ( prod ( [ cf ( iter-star ( sort ( "Symbol" ) ) ) ] , cf ( sort ( "Symbols" ) ) , no-attrs ) , [ appl ( list ( cf ( iter-star ( sort ( "Symbol" ) ) ) ) , < list ( Symbol-list ) > ) ] ) ] , [ Symbol-list , empty , [  ] ] , [ Symbol-list , single , [ < head ( Symbol ) > ] ] , [ Symbol-list , many , [ < head ( Symbol ) > , < ws-after-first ( OptLayout ) > , < [ tail ( Symbol-list ) ] > ] ] , [ OptExp , present , appl ( prod ( [ lit ( "e" ) , cf ( opt ( layout ) ) , cf ( sort ( "IntCon" ) ) ] , cf ( sort ( "OptExp" ) ) , attrs ( [ term ( cons ( "present" ) ) ] ) ) , [ lit ( "e" ) , < "ws-after-e" ( OptLayout ) > , < IntCon ( IntCon ) > ] ) ] , [ OptExp , absent , appl ( prod ( [  ] , cf ( sort ( "OptExp" ) ) , attrs ( [ term ( cons ( "absent" ) ) ] ) ) , [  ] ) ] , [ RealCon , real-con , appl ( prod ( [ cf ( sort ( "IntCon" ) ) , cf ( opt ( layout ) ) , lit ( "." ) , cf ( opt ( layout ) ) , cf ( sort ( "NatCon" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "OptExp" ) ) ] , cf ( sort ( "RealCon" ) ) , attrs ( [ term ( cons ( "real-con" ) ) ] ) ) , [ < IntCon ( IntCon ) > , < ws-after-IntCon ( OptLayout ) > , lit ( "." ) , < "ws-after-." ( OptLayout ) > , < NatCon ( NatCon ) > , < ws-after-NatCon ( OptLayout ) > , < OptExp ( OptExp ) > ] ) ] , [ NatCon , digits , appl ( prod ( [ lex ( sort ( "NatCon" ) ) ] , cf ( sort ( "NatCon" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < chars ( CHARLIST ) > ) ] ) ] , [ IntCon , natural , appl ( prod ( [ cf ( sort ( "NatCon" ) ) ] , cf ( sort ( "IntCon" ) ) , attrs ( [ term ( cons ( "natural" ) ) ] ) ) , [ < NatCon ( NatCon ) > ] ) ] , [ IntCon , positive , appl ( prod ( [ lit ( "+" ) , cf ( opt ( layout ) ) , cf ( sort ( "NatCon" ) ) ] , cf ( sort ( "IntCon" ) ) , attrs ( [ term ( cons ( "positive" ) ) ] ) ) , [ lit ( "+" ) , < ws-after-pos ( OptLayout ) > , < NatCon ( NatCon ) > ] ) ] , [ IntCon , negative , appl ( prod ( [ lit ( "-" ) , cf ( opt ( layout ) ) , cf ( sort ( "NatCon" ) ) ] , cf ( sort ( "IntCon" ) ) , attrs ( [ term ( cons ( "negative" ) ) ] ) ) , [ lit ( "-" ) , < ws-after-neg ( OptLayout ) > , < NatCon ( NatCon ) > ] ) ] , [ AlphaNumericalEscChar , default , appl ( prod ( [ lex ( sort ( "AlphaNumericalEscChar" ) ) ] , cf ( sort ( "AlphaNumericalEscChar" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < chars ( CHARLIST ) > ) ] ) ] , [ DecimalEscChar , dec0_199 , appl ( prod ( [ lex ( sort ( "DecimalEscChar" ) ) ] , cf ( sort ( "DecimalEscChar" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < chars ( CHARLIST ) > ) ] ) ] , [ DecimalEscChar , dec200_249 , appl ( prod ( [ lex ( sort ( "DecimalEscChar" ) ) ] , cf ( sort ( "DecimalEscChar" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < chars ( CHARLIST ) > ) ] ) ] , [ DecimalEscChar , dec250_255 , appl ( prod ( [ lex ( sort ( "DecimalEscChar" ) ) ] , cf ( sort ( "DecimalEscChar" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < chars ( CHARLIST ) > ) ] ) ] , [ EscChar , alpha-numeric , appl ( prod ( [ lex ( sort ( "EscChar" ) ) ] , cf ( sort ( "EscChar" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < chars ( CHARLIST ) > ) ] ) ] , [ EscChar , decimal , appl ( prod ( [ lex ( sort ( "EscChar" ) ) ] , cf ( sort ( "EscChar" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < chars ( CHARLIST ) > ) ] ) ] , [ L-Char , normal , appl ( prod ( [ lex ( sort ( "L-Char" ) ) ] , cf ( sort ( "L-Char" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < chars ( CHARLIST ) > ) ] ) ] , [ L-Char , escaped , appl ( prod ( [ lex ( sort ( "L-Char" ) ) ] , cf ( sort ( "L-Char" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < chars ( CHARLIST ) > ) ] ) ] , [ Literal , quoted , appl ( prod ( [ lex ( sort ( "Literal" ) ) ] , cf ( sort ( "Literal" ) ) , no-attrs ) , [ appl ( list ( iter-star ( char-class ( [ range ( 0 , 255 ) ] ) ) ) , < chars ( CHARLIST ) > ) ] ) ] , [ ATermList , not-empty , appl ( prod ( [ lit ( "[" ) , cf ( opt ( layout ) ) , cf ( iter-star-sep ( sort ( "ATerm" ) , lit ( "," ) ) ) , cf ( opt ( layout ) ) , lit ( "]" ) ] , cf ( sort ( "ATermList" ) ) , attrs ( [ term ( cons ( "not-empty" ) ) ] ) ) , [ lit ( "[" ) , < "ws-after-[" ( OptLayout ) > , appl ( list ( cf ( iter-star-sep ( sort ( "ATerm" ) , lit ( "," ) ) ) ) , < elems ( ATerm-elems ) > ) , < ws-after-elems ( OptLayout ) > , lit ( "]" ) ] ) ] , [ ATerm-elems , empty , [  ] ] , [ ATerm-elems , single , [ < head ( ATerm ) > ] ] , [ ATerm-elems , many , [ < head ( ATerm ) > , < ws-after-first ( OptLayout ) > , lit ( < sep ( str ) > ) , < ws-after-sep ( OptLayout ) > , < [ tail ( ATerm-elems ) ] > ] ] , [ ACon , int , appl ( prod ( [ cf ( sort ( "IntCon" ) ) ] , cf ( sort ( "ACon" ) ) , attrs ( [ term ( cons ( "int" ) ) ] ) ) , [ < IntCon ( IntCon ) > ] ) ] , [ ACon , real , appl ( prod ( [ cf ( sort ( "RealCon" ) ) ] , cf ( sort ( "ACon" ) ) , attrs ( [ term ( cons ( "real" ) ) ] ) ) , [ < RealCon ( RealCon ) > ] ) ] , [ AFun , Default , appl ( prod ( [ cf ( sort ( "Literal" ) ) ] , cf ( sort ( "AFun" ) ) , no-attrs ) , [ < Literal ( Literal ) > ] ) ] , [ ATerm , constant , appl ( prod ( [ cf ( sort ( "ACon" ) ) ] , cf ( sort ( "ATerm" ) ) , attrs ( [ term ( cons ( "constant" ) ) ] ) ) , [ < ACon ( ACon ) > ] ) ] , [ ATerm , list , appl ( prod ( [ cf ( sort ( "ATermList" ) ) ] , cf ( sort ( "ATerm" ) ) , attrs ( [ term ( cons ( "list" ) ) ] ) ) , [ < list ( ATermList ) > ] ) ] , [ ATerm , fun , appl ( prod ( [ cf ( sort ( "AFun" ) ) ] , cf ( sort ( "ATerm" ) ) , attrs ( [ term ( cons ( "fun" ) ) ] ) ) , [ < fun ( AFun ) > ] ) ] , [ ATerm , appl , appl ( prod ( [ cf ( sort ( "AFun" ) ) , cf ( opt ( layout ) ) , lit ( "(" ) , cf ( opt ( layout ) ) , cf ( iter-sep ( sort ( "ATerm" ) , lit ( "," ) ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "ATerm" ) ) , attrs ( [ term ( cons ( "appl" ) ) ] ) ) , [ < fun ( AFun ) > , < ws-after-fun ( OptLayout ) > , lit ( "(" ) , < "ws-after-(" ( OptLayout ) > , appl ( list ( cf ( iter-sep ( sort ( "ATerm" ) , lit ( "," ) ) ) ) , < args ( ATerm-args ) > ) , < ws-after-args ( OptLayout ) > , lit ( ")" ) ] ) ] , [ ATerm-args , single , [ < head ( ATerm ) > ] ] , [ ATerm-args , many , [ < head ( ATerm ) > , < ws-after-first ( OptLayout ) > , lit ( < sep ( str ) > ) , < ws-after-sep ( OptLayout ) > , < [ tail ( ATerm-args ) ] > ] ] , [ Ann , annotation , appl ( prod ( [ lit ( "{" ) , cf ( opt ( layout ) ) , cf ( iter-sep ( sort ( "ATerm" ) , lit ( "," ) ) ) , cf ( opt ( layout ) ) , lit ( "}" ) ] , cf ( sort ( "Ann" ) ) , attrs ( [ term ( cons ( "annotation" ) ) ] ) ) , [ lit ( "{" ) , < "ws-after-{" ( OptLayout ) > , appl ( list ( cf ( iter-sep ( sort ( "ATerm" ) , lit ( "," ) ) ) ) , < annos ( ATerm-annos ) > ) , < ws-after-annos ( OptLayout ) > , lit ( "}" ) ] ) ] , [ ATerm-annos , single , [ < head ( ATerm ) > ] ] , [ ATerm-annos , many , [ < head ( ATerm ) > , < ws-after-first ( OptLayout ) > , lit ( < sep ( str ) > ) , < ws-after-sep ( OptLayout ) > , < [ tail ( ATerm-annos ) ] > ] ] , [ ATerm , annotated-constant , appl ( prod ( [ cf ( sort ( "ACon" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Ann" ) ) ] , cf ( sort ( "ATerm" ) ) , attrs ( [ term ( cons ( "annotated-constant" ) ) ] ) ) , [ < ACon ( ACon ) > , < ws-after-ACon ( OptLayout ) > , < Ann ( Ann ) > ] ) ] , [ ATerm , annotated-list , appl ( prod ( [ cf ( sort ( "ATermList" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Ann" ) ) ] , cf ( sort ( "ATerm" ) ) , attrs ( [ term ( cons ( "annotated-list" ) ) ] ) ) , [ < list ( ATermList ) > , < ws-after-list ( OptLayout ) > , < Ann ( Ann ) > ] ) ] , [ ATerm , annotated-fun , appl ( prod ( [ cf ( sort ( "AFun" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Ann" ) ) ] , cf ( sort ( "ATerm" ) ) , attrs ( [ term ( cons ( "annotated-fun" ) ) ] ) ) , [ < fun ( AFun ) > , < ws-after-fun ( OptLayout ) > , < Ann ( Ann ) > ] ) ] , [ ATerm , annotated-appl , appl ( prod ( [ cf ( sort ( "AFun" ) ) , cf ( opt ( layout ) ) , lit ( "(" ) , cf ( opt ( layout ) ) , cf ( iter-sep ( sort ( "ATerm" ) , lit ( "," ) ) ) , cf ( opt ( layout ) ) , lit ( ")" ) , cf ( opt ( layout ) ) , cf ( sort ( "Ann" ) ) ] , cf ( sort ( "ATerm" ) ) , attrs ( [ term ( cons ( "annotated-appl" ) ) ] ) ) , [ < fun ( AFun ) > , < ws-after-fun ( OptLayout ) > , lit ( "(" ) , < "ws-after-(" ( OptLayout ) > , appl ( list ( cf ( iter-sep ( sort ( "ATerm" ) , lit ( "," ) ) ) ) , < args ( ATerm-args ) > ) , < ws-after-args ( OptLayout ) > , lit ( ")" ) , < "ws-after-)" ( OptLayout ) > , < Ann ( Ann ) > ] ) ] , [ Attribute , term , appl ( prod ( [ cf ( sort ( "ATerm" ) ) ] , cf ( sort ( "Attribute" ) ) , attrs ( [ term ( cons ( "term" ) ) , avoid ] ) ) , [ < aterm ( ATerm ) > ] ) ] , [ Attributes , attrs , appl ( prod ( [ lit ( "{" ) , cf ( opt ( layout ) ) , cf ( iter-star-sep ( sort ( "Attribute" ) , lit ( "," ) ) ) , cf ( opt ( layout ) ) , lit ( "}" ) ] , cf ( sort ( "Attributes" ) ) , attrs ( [ term ( cons ( "attrs" ) ) ] ) ) , [ lit ( "{" ) , < "ws-after-{" ( OptLayout ) > , appl ( list ( cf ( iter-star-sep ( sort ( "Attribute" ) , lit ( "," ) ) ) ) , < list ( Attribute-list ) > ) , < ws-after-list ( OptLayout ) > , lit ( "}" ) ] ) ] , [ Attribute-list , empty , [  ] ] , [ Attribute-list , single , [ < head ( Attribute ) > ] ] , [ Attribute-list , many , [ < head ( Attribute ) > , < ws-after-first ( OptLayout ) > , lit ( < sep ( str ) > ) , < ws-after-sep ( OptLayout ) > , < [ tail ( Attribute-list ) ] > ] ] , [ Attributes , no-attrs , appl ( prod ( [  ] , cf ( sort ( "Attributes" ) ) , attrs ( [ term ( cons ( "no-attrs" ) ) ] ) ) , [  ] ) ] , [ Production , prod , appl ( prod ( [ cf ( sort ( "Symbols" ) ) , cf ( opt ( layout ) ) , lit ( "->" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Attributes" ) ) ] , cf ( sort ( "Production" ) ) , attrs ( [ term ( cons ( "prod" ) ) ] ) ) , [ < Symbols ( Symbols ) > , < ws-after-Symbols ( OptLayout ) > , lit ( "->" ) , < "ws-after-->" ( OptLayout ) > , < result ( Symbol ) > , < ws-after-result ( OptLayout ) > , < Attributes ( Attributes ) > ] ) ] , [ Productions , Default , appl ( prod ( [ cf ( iter-star ( sort ( "Production" ) ) ) ] , cf ( sort ( "Productions" ) ) , no-attrs ) , [ appl ( list ( cf ( iter-star ( sort ( "Production" ) ) ) ) , < list ( Production-list ) > ) ] ) ] , [ Production-list , empty , [  ] ] , [ Production-list , single , [ < head ( Production ) > ] ] , [ Production-list , many , [ < head ( Production ) > , < ws-after-first ( OptLayout ) > , < [ tail ( Production-list ) ] > ] ] , [ Grammar , syntax , appl ( prod ( [ lit ( "syntax" ) , cf ( opt ( layout ) ) , cf ( sort ( "Productions" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "syntax" ) ) ] ) ) , [ lit ( "syntax" ) , < "ws-after-syntax" ( OptLayout ) > , < Productions ( Productions ) > ] ) ] , [ Symbol , start , appl ( prod ( [ lit ( "<START>" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "start" ) ) ] ) ) , [ lit ( "<START>" ) ] ) ] , [ Symbol , file-start , appl ( prod ( [ lit ( "<Start>" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "file-start" ) ) ] ) ) , [ lit ( "<Start>" ) ] ) ] , [ Grammar , lexical-priorities , appl ( prod ( [ lit ( "lexical" ) , cf ( opt ( layout ) ) , lit ( "priorities" ) , cf ( opt ( layout ) ) , cf ( sort ( "Priorities" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "lexical-priorities" ) ) ] ) ) , [ lit ( "lexical" ) , < "ws-after-lexical" ( OptLayout ) > , lit ( "priorities" ) , < "ws-after-priorities" ( OptLayout ) > , < Priorities ( Priorities ) > ] ) ] , [ Grammar , context-free-priorities , appl ( prod ( [ lit ( "context-free" ) , cf ( opt ( layout ) ) , lit ( "priorities" ) , cf ( opt ( layout ) ) , cf ( sort ( "Priorities" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "context-free-priorities" ) ) ] ) ) , [ lit ( "context-free" ) , < "ws-after-context-free" ( OptLayout ) > , lit ( "priorities" ) , < "ws-after-priorities" ( OptLayout ) > , < Priorities ( Priorities ) > ] ) ] , [ Grammar , lexical-restrictions , appl ( prod ( [ lit ( "lexical" ) , cf ( opt ( layout ) ) , lit ( "restrictions" ) , cf ( opt ( layout ) ) , cf ( sort ( "Restrictions" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "lexical-restrictions" ) ) ] ) ) , [ lit ( "lexical" ) , < "ws-after-lexical" ( OptLayout ) > , lit ( "restrictions" ) , < "ws-after-restrictions" ( OptLayout ) > , < Restrictions ( Restrictions ) > ] ) ] , [ Grammar , context-free-restrictions , appl ( prod ( [ lit ( "context-free" ) , cf ( opt ( layout ) ) , lit ( "restrictions" ) , cf ( opt ( layout ) ) , cf ( sort ( "Restrictions" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "context-free-restrictions" ) ) ] ) ) , [ lit ( "context-free" ) , < "ws-after-context-free" ( OptLayout ) > , lit ( "restrictions" ) , < "ws-after-restrictions" ( OptLayout ) > , < Restrictions ( Restrictions ) > ] ) ] , [ SDF , definition , appl ( prod ( [ lit ( "definition" ) , cf ( opt ( layout ) ) , cf ( sort ( "Definition" ) ) ] , cf ( sort ( "SDF" ) ) , attrs ( [ term ( cons ( "definition" ) ) ] ) ) , [ lit ( "definition" ) , < "ws-after-definition" ( OptLayout ) > , < Definition ( Definition ) > ] ) ] , [ OptLayout , Absent , appl ( prod ( [  ] , cf ( opt ( layout ) ) , no-attrs ) , [  ] ) ] , [ OptLayout , Present , appl ( prod ( [ cf ( layout ) ] , cf ( opt ( layout ) ) , no-attrs ) , < chars ( CHARLIST ) > ) ] , [ Start , SDF , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "SDF" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-SDF ( SDF ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , Productions , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Productions" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Productions ( Productions ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , Production , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Production" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Production ( Production ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , Attributes , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Attributes" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Attributes ( Attributes ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , Attribute , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Attribute" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Attribute ( Attribute ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , Ann , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Ann" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Ann ( Ann ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , ATerm , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "ATerm" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-ATerm ( ATerm ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , AFun , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "AFun" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-AFun ( AFun ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , ACon , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "ACon" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-ACon ( ACon ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , ATermList , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "ATermList" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-ATermList ( ATermList ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , Literal , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Literal" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Literal ( Literal ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , IntCon , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "IntCon" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-IntCon ( IntCon ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , NatCon , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "NatCon" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-NatCon ( NatCon ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , RealCon , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "RealCon" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-RealCon ( RealCon ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , OptExp , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "OptExp" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-OptExp ( OptExp ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , Symbols , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Symbols" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Symbols ( Symbols ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , Symbol , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Symbol ( Symbol ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , Grammar , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Grammar" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Grammar ( Grammar ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , ImpSection , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "ImpSection" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-ImpSection ( ImpSection ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , Definition , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Definition" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Definition ( Definition ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , Module , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Module" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Module ( Module ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , Sections , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Sections" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Sections ( Sections ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , Section , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Section" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Section ( Section ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , Imports , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Imports" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Imports ( Imports ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , Import , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Import" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Import ( Import ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , ModuleName , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "ModuleName" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-ModuleName ( ModuleName ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , ModuleId , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "ModuleId" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-ModuleId ( ModuleId ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , Renamings , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Renamings" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Renamings ( Renamings ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , Renaming , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Renaming" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Renaming ( Renaming ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , Priorities , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Priorities" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Priorities ( Priorities ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , Priority , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Priority" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Priority ( Priority ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , Group , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Group" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Group ( Group ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , Associativity , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Associativity" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Associativity ( Associativity ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , CharClass , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "CharClass" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-CharClass ( CharClass ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , ShortChar , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "ShortChar" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-ShortChar ( ShortChar ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , NumChar , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "NumChar" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-NumChar ( NumChar ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , Character , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Character" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Character ( Character ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , Sort , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Sort" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Sort ( Sort ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , UQLiteral , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "UQLiteral" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-UQLiteral ( UQLiteral ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , Restrictions , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Restrictions" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Restrictions ( Restrictions ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , Restriction , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Restriction" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Restriction ( Restriction ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , Lookaheads , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Lookaheads" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Lookaheads ( Lookaheads ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , Lookahead , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Lookahead" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Lookahead ( Lookahead ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , Aliases , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Aliases" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Aliases ( Aliases ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] , [ Start , Alias , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Alias" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < ws-before ( OptLayout ) > , < top-Alias ( Alias ) > , < ws-after ( OptLayout ) > ] ) , < amb-cnt ( int ) > ) ] ]