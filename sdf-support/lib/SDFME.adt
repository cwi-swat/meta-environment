 [ constructor ( "OptLayout" , "Absent" , appl ( prod ( [  ] , cf ( opt ( layout ) ) , no-attrs ) , [  ] ) ) , constructor ( "OptLayout" , "Present" , appl ( prod ( [ cf ( layout ) ] , cf ( opt ( layout ) ) , no-attrs ) , [ < "layout" ( "Layout" ) > ] ) ) , constructor ( "Layout" , "Lex-to-cf" , appl ( prod ( [ lex ( iter ( layout ) ) ] , cf ( layout ) , no-attrs ) , [ appl ( list ( lex ( iter ( layout ) ) ) , < "list" ( "Lex-Layout-list" ) > ) ] ) ) , list ( "Lex-Layout-list" , "Lex-Layout" ) , constructor ( "AFun" , "quoted" , appl ( prod ( [ cf ( sort ( "StrCon" ) ) ] , cf ( sort ( "AFun" ) ) , attrs ( [ term ( cons ( "quoted" ) ) ] ) ) , [ < "StrCon" ( "StrCon" ) > ] ) ) , constructor ( "AFun" , "unquoted" , appl ( prod ( [ cf ( sort ( "IdCon" ) ) ] , cf ( sort ( "AFun" ) ) , attrs ( [ term ( cons ( "unquoted" ) ) ] ) ) , [ < "IdCon" ( "IdCon" ) > ] ) ) , constructor ( "ATerm" , "int" , appl ( prod ( [ cf ( sort ( "IntCon" ) ) ] , cf ( sort ( "ATerm" ) ) , attrs ( [ term ( cons ( "int" ) ) ] ) ) , [ < "IntCon" ( "IntCon" ) > ] ) ) , constructor ( "ATerm" , "real" , appl ( prod ( [ cf ( sort ( "RealCon" ) ) ] , cf ( sort ( "ATerm" ) ) , attrs ( [ term ( cons ( "real" ) ) ] ) ) , [ < "RealCon" ( "RealCon" ) > ] ) ) , constructor ( "ATerm" , "fun" , appl ( prod ( [ cf ( sort ( "AFun" ) ) ] , cf ( sort ( "ATerm" ) ) , attrs ( [ term ( cons ( "fun" ) ) ] ) ) , [ < "fun" ( "AFun" ) > ] ) ) , constructor ( "ATerm" , "appl" , appl ( prod ( [ cf ( sort ( "AFun" ) ) , cf ( opt ( layout ) ) , lit ( "(" ) , cf ( opt ( layout ) ) , cf ( iter-sep ( sort ( "ATerm" ) , lit ( "," ) ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "ATerm" ) ) , attrs ( [ term ( cons ( "appl" ) ) ] ) ) , [ < "fun" ( "AFun" ) > , < "ws-after-fun" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 40 ] ) ] , lit ( "(" ) , no-attrs ) , [ 40 ] ) , < "ws-after-(" ( "OptLayout" ) > , appl ( list ( cf ( iter-sep ( sort ( "ATerm" ) , lit ( "," ) ) ) ) , < "args" ( "ATerm-args" ) > ) , < "ws-after-args" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 41 ] ) ] , lit ( ")" ) , no-attrs ) , [ 41 ] ) ] ) ) , constructor ( "ATerm" , "placeholder" , appl ( prod ( [ lit ( "<" ) , cf ( opt ( layout ) ) , cf ( sort ( "ATerm" ) ) , cf ( opt ( layout ) ) , lit ( ">" ) ] , cf ( sort ( "ATerm" ) ) , attrs ( [ term ( cons ( "placeholder" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 60 ] ) ] , lit ( "<" ) , no-attrs ) , [ 60 ] ) , < "ws-after-<" ( "OptLayout" ) > , < "type" ( "ATerm" ) > , < "ws-after-type" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 62 ] ) ] , lit ( ">" ) , no-attrs ) , [ 62 ] ) ] ) ) , constructor ( "ATerm" , "list" , appl ( prod ( [ lit ( "[" ) , cf ( opt ( layout ) ) , cf ( iter-star-sep ( sort ( "ATerm" ) , lit ( "," ) ) ) , cf ( opt ( layout ) ) , lit ( "]" ) ] , cf ( sort ( "ATerm" ) ) , attrs ( [ term ( cons ( "list" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 91 ] ) ] , lit ( "[" ) , no-attrs ) , [ 91 ] ) , < "ws-after-[" ( "OptLayout" ) > , appl ( list ( cf ( iter-star-sep ( sort ( "ATerm" ) , lit ( "," ) ) ) ) , < "elems" ( "ATerm-elems" ) > ) , < "ws-after-elems" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 93 ] ) ] , lit ( "]" ) , no-attrs ) , [ 93 ] ) ] ) ) , constructor ( "ATerm" , "annotated" , appl ( prod ( [ cf ( sort ( "ATerm" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Annotation" ) ) ] , cf ( sort ( "ATerm" ) ) , attrs ( [ term ( cons ( "annotated" ) ) ] ) ) , [ < "trm" ( "ATerm" ) > , < "ws-after-trm" ( "OptLayout" ) > , < "Annotation" ( "Annotation" ) > ] ) ) , constructor ( "Annotation" , "default" , appl ( prod ( [ lit ( "{" ) , cf ( opt ( layout ) ) , cf ( iter-sep ( sort ( "ATerm" ) , lit ( "," ) ) ) , cf ( opt ( layout ) ) , lit ( "}" ) ] , cf ( sort ( "Annotation" ) ) , attrs ( [ term ( cons ( "default" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 123 ] ) ] , lit ( "{" ) , no-attrs ) , [ 123 ] ) , < "ws-after-{" ( "OptLayout" ) > , appl ( list ( cf ( iter-sep ( sort ( "ATerm" ) , lit ( "," ) ) ) ) , < "annos" ( "ATerm-annos" ) > ) , < "ws-after-annos" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 125 ] ) ] , lit ( "}" ) , no-attrs ) , [ 125 ] ) ] ) ) , constructor ( "Start" , "ATerm" , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "ATerm" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < "ws-before" ( "OptLayout" ) > , < "top-ATerm" ( "ATerm" ) > , < "ws-after" ( "OptLayout" ) > ] ) , < amb-cnt ( int ) > ) ) , separated-list ( "ATerm-args" , "ATerm" , [ < ws-after-head ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 44 ] ) ] , lit ( "," ) , no-attrs ) , [ 44 ] ) , < ws-after-sep ( "OptLayout" ) > ] ) , separated-list ( "ATerm-elems" , "ATerm" , [ < ws-after-head ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 44 ] ) ] , lit ( "," ) , no-attrs ) , [ 44 ] ) , < ws-after-sep ( "OptLayout" ) > ] ) , separated-list ( "ATerm-annos" , "ATerm" , [ < ws-after-head ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 44 ] ) ] , lit ( "," ) , no-attrs ) , [ 44 ] ) , < ws-after-sep ( "OptLayout" ) > ] ) , constructor ( "Start" , "IntCon" , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "IntCon" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < "ws-before" ( "OptLayout" ) > , < "top-IntCon" ( "IntCon" ) > , < "ws-after" ( "OptLayout" ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( "IntCon" , "natural" , appl ( prod ( [ cf ( sort ( "NatCon" ) ) ] , cf ( sort ( "IntCon" ) ) , attrs ( [ term ( cons ( "natural" ) ) ] ) ) , [ < "NatCon" ( "NatCon" ) > ] ) ) , constructor ( "IntCon" , "positive" , appl ( prod ( [ lit ( "+" ) , cf ( opt ( layout ) ) , cf ( sort ( "NatCon" ) ) ] , cf ( sort ( "IntCon" ) ) , attrs ( [ term ( cons ( "positive" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 43 ] ) ] , lit ( "+" ) , no-attrs ) , [ 43 ] ) , < "ws-after-pos" ( "OptLayout" ) > , < "NatCon" ( "NatCon" ) > ] ) ) , constructor ( "IntCon" , "negative" , appl ( prod ( [ lit ( "-" ) , cf ( opt ( layout ) ) , cf ( sort ( "NatCon" ) ) ] , cf ( sort ( "IntCon" ) ) , attrs ( [ term ( cons ( "negative" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 45 ] ) ] , lit ( "-" ) , no-attrs ) , [ 45 ] ) , < "ws-after-neg" ( "OptLayout" ) > , < "NatCon" ( "NatCon" ) > ] ) ) , constructor ( "Start" , "RealCon" , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "RealCon" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < "ws-before" ( "OptLayout" ) > , < "top-RealCon" ( "RealCon" ) > , < "ws-after" ( "OptLayout" ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( "OptExp" , "present" , appl ( prod ( [ lit ( "e" ) , cf ( opt ( layout ) ) , cf ( sort ( "IntCon" ) ) ] , cf ( sort ( "OptExp" ) ) , attrs ( [ term ( cons ( "present" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 101 ] ) ] , lit ( "e" ) , no-attrs ) , [ 101 ] ) , < "ws-after-e" ( "OptLayout" ) > , < "IntCon" ( "IntCon" ) > ] ) ) , constructor ( "OptExp" , "absent" , appl ( prod ( [  ] , cf ( sort ( "OptExp" ) ) , attrs ( [ term ( cons ( "absent" ) ) ] ) ) , [  ] ) ) , constructor ( "RealCon" , "real-con" , appl ( prod ( [ cf ( sort ( "IntCon" ) ) , cf ( opt ( layout ) ) , lit ( "." ) , cf ( opt ( layout ) ) , cf ( sort ( "NatCon" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "OptExp" ) ) ] , cf ( sort ( "RealCon" ) ) , attrs ( [ term ( cons ( "real-con" ) ) ] ) ) , [ < "base" ( "IntCon" ) > , < "ws-after-base" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 46 ] ) ] , lit ( "." ) , no-attrs ) , [ 46 ] ) , < "ws-after-." ( "OptLayout" ) > , < "decimal" ( "NatCon" ) > , < "ws-after-decimal" ( "OptLayout" ) > , < "exp" ( "OptExp" ) > ] ) ) , constructor ( "Grammar" , "aliases" , appl ( prod ( [ lit ( "aliases" ) , cf ( opt ( layout ) ) , cf ( sort ( "Aliases" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "aliases" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 97 ] ) , char-class ( [ 108 ] ) , char-class ( [ 105 ] ) , char-class ( [ 97 ] ) , char-class ( [ 115 ] ) , char-class ( [ 101 ] ) , char-class ( [ 115 ] ) ] , lit ( "aliases" ) , no-attrs ) , [ 97 , 108 , 105 , 97 , 115 , 101 , 115 ] ) , < "ws-after-aliases" ( "OptLayout" ) > , < "Aliases" ( "Aliases" ) > ] ) ) , constructor ( "Alias" , "alias" , appl ( prod ( [ cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "->" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) ] , cf ( sort ( "Alias" ) ) , attrs ( [ term ( cons ( "alias" ) ) ] ) ) , [ < "Symbol" ( "Symbol" ) > , < "ws-after-Symbol" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 45 ] ) , char-class ( [ 62 ] ) ] , lit ( "->" ) , no-attrs ) , [ 45 , 62 ] ) , < "ws-after-arrow" ( "OptLayout" ) > , < "alias" ( "Symbol" ) > ] ) ) , constructor ( "Aliases" , "Default" , appl ( prod ( [ cf ( iter-star ( sort ( "Alias" ) ) ) ] , cf ( sort ( "Aliases" ) ) , no-attrs ) , [ appl ( list ( cf ( iter-star ( sort ( "Alias" ) ) ) ) , < "list" ( "Alias-list" ) > ) ] ) ) , separated-list ( "Alias-list" , "Alias" , [ < ws-after-head ( "OptLayout" ) > ] ) , constructor ( "Grammar" , "lexical-syntax" , appl ( prod ( [ lit ( "lexical" ) , cf ( opt ( layout ) ) , lit ( "syntax" ) , cf ( opt ( layout ) ) , cf ( sort ( "Productions" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "lexical-syntax" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 108 ] ) , char-class ( [ 101 ] ) , char-class ( [ 120 ] ) , char-class ( [ 105 ] ) , char-class ( [ 99 ] ) , char-class ( [ 97 ] ) , char-class ( [ 108 ] ) ] , lit ( "lexical" ) , no-attrs ) , [ 108 , 101 , 120 , 105 , 99 , 97 , 108 ] ) , < "ws-after-lexical" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 115 ] ) , char-class ( [ 121 ] ) , char-class ( [ 110 ] ) , char-class ( [ 116 ] ) , char-class ( [ 97 ] ) , char-class ( [ 120 ] ) ] , lit ( "syntax" ) , no-attrs ) , [ 115 , 121 , 110 , 116 , 97 , 120 ] ) , < "ws-after-syntax" ( "OptLayout" ) > , < "Productions" ( "Productions" ) > ] ) ) , constructor ( "Grammar" , "context-free-syntax" , appl ( prod ( [ lit ( "context-free" ) , cf ( opt ( layout ) ) , lit ( "syntax" ) , cf ( opt ( layout ) ) , cf ( sort ( "Productions" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "context-free-syntax" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 99 ] ) , char-class ( [ 111 ] ) , char-class ( [ 110 ] ) , char-class ( [ 116 ] ) , char-class ( [ 101 ] ) , char-class ( [ 120 ] ) , char-class ( [ 116 ] ) , char-class ( [ 45 ] ) , char-class ( [ 102 ] ) , char-class ( [ 114 ] ) , char-class ( [ 101 ] ) , char-class ( [ 101 ] ) ] , lit ( "context-free" ) , no-attrs ) , [ 99 , 111 , 110 , 116 , 101 , 120 , 116 , 45 , 102 , 114 , 101 , 101 ] ) , < "ws-after-context-free" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 115 ] ) , char-class ( [ 121 ] ) , char-class ( [ 110 ] ) , char-class ( [ 116 ] ) , char-class ( [ 97 ] ) , char-class ( [ 120 ] ) ] , lit ( "syntax" ) , no-attrs ) , [ 115 , 121 , 110 , 116 , 97 , 120 ] ) , < "ws-after-syntax" ( "OptLayout" ) > , < "Productions" ( "Productions" ) > ] ) ) , constructor ( "Grammar" , "variables" , appl ( prod ( [ lit ( "variables" ) , cf ( opt ( layout ) ) , cf ( sort ( "Productions" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "variables" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 118 ] ) , char-class ( [ 97 ] ) , char-class ( [ 114 ] ) , char-class ( [ 105 ] ) , char-class ( [ 97 ] ) , char-class ( [ 98 ] ) , char-class ( [ 108 ] ) , char-class ( [ 101 ] ) , char-class ( [ 115 ] ) ] , lit ( "variables" ) , no-attrs ) , [ 118 , 97 , 114 , 105 , 97 , 98 , 108 , 101 , 115 ] ) , < "ws-after-variables" ( "OptLayout" ) > , < "Productions" ( "Productions" ) > ] ) ) , constructor ( "Grammar" , "lexical-variables" , appl ( prod ( [ lit ( "lexical" ) , cf ( opt ( layout ) ) , lit ( "variables" ) , cf ( opt ( layout ) ) , cf ( sort ( "Productions" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "lexical-variables" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 108 ] ) , char-class ( [ 101 ] ) , char-class ( [ 120 ] ) , char-class ( [ 105 ] ) , char-class ( [ 99 ] ) , char-class ( [ 97 ] ) , char-class ( [ 108 ] ) ] , lit ( "lexical" ) , no-attrs ) , [ 108 , 101 , 120 , 105 , 99 , 97 , 108 ] ) , < "ws-after-lexical" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 118 ] ) , char-class ( [ 97 ] ) , char-class ( [ 114 ] ) , char-class ( [ 105 ] ) , char-class ( [ 97 ] ) , char-class ( [ 98 ] ) , char-class ( [ 108 ] ) , char-class ( [ 101 ] ) , char-class ( [ 115 ] ) ] , lit ( "variables" ) , no-attrs ) , [ 118 , 97 , 114 , 105 , 97 , 98 , 108 , 101 , 115 ] ) , < "ws-after-variables" ( "OptLayout" ) > , < "Productions" ( "Productions" ) > ] ) ) , constructor ( "Symbol" , "cf" , appl ( prod ( [ lit ( "<" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "-CF" ) , cf ( opt ( layout ) ) , lit ( ">" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "cf" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 60 ] ) ] , lit ( "<" ) , no-attrs ) , [ 60 ] ) , < "ws-after-<" ( "OptLayout" ) > , < "Symbol" ( "Symbol" ) > , < "ws-after-Symbol" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 45 ] ) , char-class ( [ 67 ] ) , char-class ( [ 70 ] ) ] , lit ( "-CF" ) , no-attrs ) , [ 45 , 67 , 70 ] ) , < "ws-after--CF" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 62 ] ) ] , lit ( ">" ) , no-attrs ) , [ 62 ] ) ] ) ) , constructor ( "Symbol" , "lex" , appl ( prod ( [ lit ( "<" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "-LEX" ) , cf ( opt ( layout ) ) , lit ( ">" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "lex" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 60 ] ) ] , lit ( "<" ) , no-attrs ) , [ 60 ] ) , < "ws-after-<" ( "OptLayout" ) > , < "Symbol" ( "Symbol" ) > , < "ws-after-Symbol" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 45 ] ) , char-class ( [ 76 ] ) , char-class ( [ 69 ] ) , char-class ( [ 88 ] ) ] , lit ( "-LEX" ) , no-attrs ) , [ 45 , 76 , 69 , 88 ] ) , < "ws-after--LEX" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 62 ] ) ] , lit ( ">" ) , no-attrs ) , [ 62 ] ) ] ) ) , constructor ( "Symbol" , "varsym" , appl ( prod ( [ lit ( "<" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "-VAR" ) , cf ( opt ( layout ) ) , lit ( ">" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "varsym" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 60 ] ) ] , lit ( "<" ) , no-attrs ) , [ 60 ] ) , < "ws-after-<" ( "OptLayout" ) > , < "Symbol" ( "Symbol" ) > , < "ws-after-Symbol" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 45 ] ) , char-class ( [ 86 ] ) , char-class ( [ 65 ] ) , char-class ( [ 82 ] ) ] , lit ( "-VAR" ) , no-attrs ) , [ 45 , 86 , 65 , 82 ] ) , < "ws-after--VAR" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 62 ] ) ] , lit ( ">" ) , no-attrs ) , [ 62 ] ) ] ) ) , constructor ( "Symbol" , "layout" , appl ( prod ( [ lit ( "LAYOUT" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "layout" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 76 ] ) , char-class ( [ 65 ] ) , char-class ( [ 89 ] ) , char-class ( [ 79 ] ) , char-class ( [ 85 ] ) , char-class ( [ 84 ] ) ] , lit ( "LAYOUT" ) , no-attrs ) , [ 76 , 65 , 89 , 79 , 85 , 84 ] ) ] ) ) , constructor ( "Symbol" , "char-class" , appl ( prod ( [ cf ( sort ( "CharClass" ) ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "char-class" ) ) ] ) ) , [ < "CharClass" ( "CharClass" ) > ] ) ) , constructor ( "CharRange" , "Default" , appl ( prod ( [ cf ( sort ( "Character" ) ) ] , cf ( sort ( "CharRange" ) ) , no-attrs ) , [ < "Character" ( "Character" ) > ] ) ) , constructor ( "CharRange" , "range" , appl ( prod ( [ cf ( sort ( "Character" ) ) , cf ( opt ( layout ) ) , lit ( "-" ) , cf ( opt ( layout ) ) , cf ( sort ( "Character" ) ) ] , cf ( sort ( "CharRange" ) ) , attrs ( [ term ( cons ( "range" ) ) ] ) ) , [ < "start" ( "Character" ) > , < "ws-after-start" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 45 ] ) ] , lit ( "-" ) , no-attrs ) , [ 45 ] ) , < "ws-after--" ( "OptLayout" ) > , < "end" ( "Character" ) > ] ) ) , constructor ( "CharRanges" , "Default" , appl ( prod ( [ cf ( sort ( "CharRange" ) ) ] , cf ( sort ( "CharRanges" ) ) , no-attrs ) , [ < "CharRange" ( "CharRange" ) > ] ) ) , constructor ( "CharRanges" , "conc" , appl ( prod ( [ cf ( sort ( "CharRanges" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "CharRanges" ) ) ] , cf ( sort ( "CharRanges" ) ) , attrs ( [ term ( cons ( "conc" ) ) , assoc ( right ) , term ( memo ) ] ) ) , [ < "left" ( "CharRanges" ) > , < "ws-after-left" ( "OptLayout" ) > , < "right" ( "CharRanges" ) > ] ) ) , constructor ( "CharRanges" , "Bracket" , appl ( prod ( [ lit ( "(" ) , cf ( opt ( layout ) ) , cf ( sort ( "CharRanges" ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "CharRanges" ) ) , attrs ( [ bracket ] ) ) , [ appl ( prod ( [ char-class ( [ 40 ] ) ] , lit ( "(" ) , no-attrs ) , [ 40 ] ) , < "ws-after-(" ( "OptLayout" ) > , < "CharRanges" ( "CharRanges" ) > , < "ws-after-CharRanges" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 41 ] ) ] , lit ( ")" ) , no-attrs ) , [ 41 ] ) ] ) ) , constructor ( "OptCharRanges" , "absent" , appl ( prod ( [  ] , cf ( sort ( "OptCharRanges" ) ) , attrs ( [ term ( cons ( "absent" ) ) ] ) ) , [  ] ) ) , constructor ( "OptCharRanges" , "present" , appl ( prod ( [ cf ( sort ( "CharRanges" ) ) ] , cf ( sort ( "OptCharRanges" ) ) , attrs ( [ term ( cons ( "present" ) ) ] ) ) , [ < "CharRanges" ( "CharRanges" ) > ] ) ) , constructor ( "CharClass" , "simple-charclass" , appl ( prod ( [ lit ( "[" ) , cf ( opt ( layout ) ) , cf ( sort ( "OptCharRanges" ) ) , cf ( opt ( layout ) ) , lit ( "]" ) ] , cf ( sort ( "CharClass" ) ) , attrs ( [ term ( cons ( "simple-charclass" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 91 ] ) ] , lit ( "[" ) , no-attrs ) , [ 91 ] ) , < "ws-after-[" ( "OptLayout" ) > , < "OptCharRanges" ( "OptCharRanges" ) > , < "ws-after-OptCharRanges" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 93 ] ) ] , lit ( "]" ) , no-attrs ) , [ 93 ] ) ] ) ) , constructor ( "CharClass" , "comp" , appl ( prod ( [ lit ( "~" ) , cf ( opt ( layout ) ) , cf ( sort ( "CharClass" ) ) ] , cf ( sort ( "CharClass" ) ) , attrs ( [ term ( cons ( "comp" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 126 ] ) ] , lit ( "~" ) , no-attrs ) , [ 126 ] ) , < "ws-after-~" ( "OptLayout" ) > , < "CharClass" ( "CharClass" ) > ] ) ) , constructor ( "CharClass" , "diff" , appl ( prod ( [ cf ( sort ( "CharClass" ) ) , cf ( opt ( layout ) ) , lit ( "/" ) , cf ( opt ( layout ) ) , cf ( sort ( "CharClass" ) ) ] , cf ( sort ( "CharClass" ) ) , attrs ( [ term ( cons ( "diff" ) ) , assoc ( left ) , term ( memo ) ] ) ) , [ < "left" ( "CharClass" ) > , < "ws-after-left" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 47 ] ) ] , lit ( "/" ) , no-attrs ) , [ 47 ] ) , < "ws-after-/" ( "OptLayout" ) > , < "right" ( "CharClass" ) > ] ) ) , constructor ( "CharClass" , "isect" , appl ( prod ( [ cf ( sort ( "CharClass" ) ) , cf ( opt ( layout ) ) , lit ( "/\\" ) , cf ( opt ( layout ) ) , cf ( sort ( "CharClass" ) ) ] , cf ( sort ( "CharClass" ) ) , attrs ( [ term ( cons ( "isect" ) ) , assoc ( left ) , term ( memo ) ] ) ) , [ < "left" ( "CharClass" ) > , < "ws-after-left" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 47 ] ) , char-class ( [ 92 ] ) ] , lit ( "/\\" ) , no-attrs ) , [ 47 , 92 ] ) , < "ws-after-/\\" ( "OptLayout" ) > , < "right" ( "CharClass" ) > ] ) ) , constructor ( "CharClass" , "union" , appl ( prod ( [ cf ( sort ( "CharClass" ) ) , cf ( opt ( layout ) ) , lit ( "\\/" ) , cf ( opt ( layout ) ) , cf ( sort ( "CharClass" ) ) ] , cf ( sort ( "CharClass" ) ) , attrs ( [ term ( cons ( "union" ) ) , assoc ( left ) ] ) ) , [ < "left" ( "CharClass" ) > , < "ws-after-left" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 92 ] ) , char-class ( [ 47 ] ) ] , lit ( "\\/" ) , no-attrs ) , [ 92 , 47 ] ) , < "ws-after-\\/" ( "OptLayout" ) > , < "right" ( "CharClass" ) > ] ) ) , constructor ( "CharClass" , "Bracket" , appl ( prod ( [ lit ( "(" ) , cf ( opt ( layout ) ) , cf ( sort ( "CharClass" ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "CharClass" ) ) , attrs ( [ bracket , avoid ] ) ) , [ appl ( prod ( [ char-class ( [ 40 ] ) ] , lit ( "(" ) , no-attrs ) , [ 40 ] ) , < "ws-after-(" ( "OptLayout" ) > , < "CharClass" ( "CharClass" ) > , < "ws-after-CharClass" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 41 ] ) ] , lit ( ")" ) , no-attrs ) , [ 41 ] ) ] ) ) , constructor ( "Lex-NumChar" , "digits" , appl ( prod ( [ char-class ( [ 92 ] ) , lex ( iter ( char-class ( [ range ( 48 , 57 ) ] ) ) ) ] , lex ( sort ( "NumChar" ) ) , attrs ( [ term ( cons ( "digits" ) ) ] ) ) , [ 92 , appl ( list ( lex ( iter ( char-class ( [ range ( 48 , 57 ) ] ) ) ) ) , < "number" ( chars ) > ) ] ) ) , constructor ( "NumChar" , "Lex-to-cf" , appl ( prod ( [ lex ( sort ( "NumChar" ) ) ] , cf ( sort ( "NumChar" ) ) , no-attrs ) , [ < "NumChar" ( "Lex-NumChar" ) > ] ) ) , constructor ( "Lex-ShortChar" , "regular" , appl ( prod ( [ char-class ( [ range ( 48 , 57 ) , range ( 65 , 90 ) , range ( 97 , 122 ) ] ) ] , lex ( sort ( "ShortChar" ) ) , attrs ( [ term ( cons ( "regular" ) ) ] ) ) , [ < "character" ( char ) > ] ) ) , constructor ( "ShortChar" , "Lex-to-cf" , appl ( prod ( [ lex ( sort ( "ShortChar" ) ) ] , cf ( sort ( "ShortChar" ) ) , no-attrs ) , [ < "ShortChar" ( "Lex-ShortChar" ) > ] ) ) , constructor ( "Lex-ShortChar" , "escaped" , appl ( prod ( [ char-class ( [ 92 ] ) , char-class ( [ range ( 32 , 47 ) , range ( 58 , 64 ) , range ( 91 , 96 ) , 110 , 114 , 116 , range ( 123 , 255 ) ] ) ] , lex ( sort ( "ShortChar" ) ) , attrs ( [ term ( cons ( "escaped" ) ) ] ) ) , [ 92 , < "escape" ( char ) > ] ) ) , constructor ( "Character" , "numeric" , appl ( prod ( [ cf ( sort ( "NumChar" ) ) ] , cf ( sort ( "Character" ) ) , attrs ( [ term ( cons ( "numeric" ) ) ] ) ) , [ < "NumChar" ( "NumChar" ) > ] ) ) , constructor ( "Character" , "short" , appl ( prod ( [ cf ( sort ( "ShortChar" ) ) ] , cf ( sort ( "Character" ) ) , attrs ( [ term ( cons ( "short" ) ) ] ) ) , [ < "ShortChar" ( "ShortChar" ) > ] ) ) , constructor ( "Character" , "top" , appl ( prod ( [ lit ( "\\TOP" ) ] , cf ( sort ( "Character" ) ) , attrs ( [ term ( cons ( "top" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 92 ] ) , char-class ( [ 84 ] ) , char-class ( [ 79 ] ) , char-class ( [ 80 ] ) ] , lit ( "\\TOP" ) , no-attrs ) , [ 92 , 84 , 79 , 80 ] ) ] ) ) , constructor ( "Character" , "eof" , appl ( prod ( [ lit ( "\\EOF" ) ] , cf ( sort ( "Character" ) ) , attrs ( [ term ( cons ( "eof" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 92 ] ) , char-class ( [ 69 ] ) , char-class ( [ 79 ] ) , char-class ( [ 70 ] ) ] , lit ( "\\EOF" ) , no-attrs ) , [ 92 , 69 , 79 , 70 ] ) ] ) ) , constructor ( "Character" , "bot" , appl ( prod ( [ lit ( "\\BOT" ) ] , cf ( sort ( "Character" ) ) , attrs ( [ term ( cons ( "bot" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 92 ] ) , char-class ( [ 66 ] ) , char-class ( [ 79 ] ) , char-class ( [ 84 ] ) ] , lit ( "\\BOT" ) , no-attrs ) , [ 92 , 66 , 79 , 84 ] ) ] ) ) , constructor ( "Character" , "label_start" , appl ( prod ( [ lit ( "\\LABEL_START" ) ] , cf ( sort ( "Character" ) ) , attrs ( [ term ( cons ( "label_start" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 92 ] ) , char-class ( [ 76 ] ) , char-class ( [ 65 ] ) , char-class ( [ 66 ] ) , char-class ( [ 69 ] ) , char-class ( [ 76 ] ) , char-class ( [ 95 ] ) , char-class ( [ 83 ] ) , char-class ( [ 84 ] ) , char-class ( [ 65 ] ) , char-class ( [ 82 ] ) , char-class ( [ 84 ] ) ] , lit ( "\\LABEL_START" ) , no-attrs ) , [ 92 , 76 , 65 , 66 , 69 , 76 , 95 , 83 , 84 , 65 , 82 , 84 ] ) ] ) ) , constructor ( "Grammar" , "empty-grammar" , appl ( prod ( [ lit ( "(/)" ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "empty-grammar" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 40 ] ) , char-class ( [ 47 ] ) , char-class ( [ 41 ] ) ] , lit ( "(/)" ) , no-attrs ) , [ 40 , 47 , 41 ] ) ] ) ) , constructor ( "Grammar" , "conc-grammars" , appl ( prod ( [ cf ( sort ( "Grammar" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Grammar" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ assoc ( assoc ) , term ( cons ( "conc-grammars" ) ) ] ) ) , [ < "left" ( "Grammar" ) > , < "ws-after-left" ( "OptLayout" ) > , < "right" ( "Grammar" ) > ] ) ) , constructor ( "Grammar" , "Bracket" , appl ( prod ( [ lit ( "(" ) , cf ( opt ( layout ) ) , cf ( sort ( "Grammar" ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ bracket ] ) ) , [ appl ( prod ( [ char-class ( [ 40 ] ) ] , lit ( "(" ) , no-attrs ) , [ 40 ] ) , < "ws-after-(" ( "OptLayout" ) > , < "Grammar" ( "Grammar" ) > , < "ws-after-Grammar" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 41 ] ) ] , lit ( ")" ) , no-attrs ) , [ 41 ] ) ] ) ) , constructor ( "ATermAttribute" , "default" , appl ( prod ( [ cf ( sort ( "ATerm" ) ) ] , cf ( sort ( "ATermAttribute" ) ) , attrs ( [ term ( cons ( "default" ) ) ] ) ) , [ < "aterm" ( "ATerm" ) > ] ) ) , constructor ( "Attribute" , "term" , appl ( prod ( [ cf ( sort ( "ATermAttribute" ) ) ] , cf ( sort ( "Attribute" ) ) , attrs ( [ term ( cons ( "term" ) ) ] ) ) , [ < "ATermAttribute" ( "ATermAttribute" ) > ] ) ) , constructor ( "Attributes" , "attrs" , appl ( prod ( [ lit ( "{" ) , cf ( opt ( layout ) ) , cf ( iter-star-sep ( sort ( "Attribute" ) , lit ( "," ) ) ) , cf ( opt ( layout ) ) , lit ( "}" ) ] , cf ( sort ( "Attributes" ) ) , attrs ( [ term ( cons ( "attrs" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 123 ] ) ] , lit ( "{" ) , no-attrs ) , [ 123 ] ) , < "ws-after-{" ( "OptLayout" ) > , appl ( list ( cf ( iter-star-sep ( sort ( "Attribute" ) , lit ( "," ) ) ) ) , < "list" ( "Attribute-list" ) > ) , < "ws-after-list" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 125 ] ) ] , lit ( "}" ) , no-attrs ) , [ 125 ] ) ] ) ) , constructor ( "Attributes" , "no-attrs" , appl ( prod ( [  ] , cf ( sort ( "Attributes" ) ) , attrs ( [ term ( cons ( "no-attrs" ) ) ] ) ) , [  ] ) ) , constructor ( "Production" , "prod" , appl ( prod ( [ cf ( sort ( "Symbols" ) ) , cf ( opt ( layout ) ) , lit ( "->" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Attributes" ) ) ] , cf ( sort ( "Production" ) ) , attrs ( [ term ( cons ( "prod" ) ) ] ) ) , [ < "Symbols" ( "Symbols" ) > , < "ws-after-Symbols" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 45 ] ) , char-class ( [ 62 ] ) ] , lit ( "->" ) , no-attrs ) , [ 45 , 62 ] ) , < "ws-after-->" ( "OptLayout" ) > , < "result" ( "Symbol" ) > , < "ws-after-result" ( "OptLayout" ) > , < "Attributes" ( "Attributes" ) > ] ) ) , constructor ( "Productions" , "Default" , appl ( prod ( [ cf ( iter-star ( sort ( "Production" ) ) ) ] , cf ( sort ( "Productions" ) ) , no-attrs ) , [ appl ( list ( cf ( iter-star ( sort ( "Production" ) ) ) ) , < "list" ( "Production-list" ) > ) ] ) ) , constructor ( "Grammar" , "syntax" , appl ( prod ( [ lit ( "syntax" ) , cf ( opt ( layout ) ) , cf ( sort ( "Productions" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "syntax" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 115 ] ) , char-class ( [ 121 ] ) , char-class ( [ 110 ] ) , char-class ( [ 116 ] ) , char-class ( [ 97 ] ) , char-class ( [ 120 ] ) ] , lit ( "syntax" ) , no-attrs ) , [ 115 , 121 , 110 , 116 , 97 , 120 ] ) , < "ws-after-syntax" ( "OptLayout" ) > , < "Productions" ( "Productions" ) > ] ) ) , separated-list ( "Attribute-list" , "Attribute" , [ < ws-after-head ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 44 ] ) ] , lit ( "," ) , no-attrs ) , [ 44 ] ) , < ws-after-sep ( "OptLayout" ) > ] ) , separated-list ( "Production-list" , "Production" , [ < ws-after-head ( "OptLayout" ) > ] ) , constructor ( "Label" , "quoted" , appl ( prod ( [ cf ( sort ( "StrCon" ) ) ] , cf ( sort ( "Label" ) ) , attrs ( [ term ( cons ( "quoted" ) ) ] ) ) , [ < "StrCon" ( "StrCon" ) > ] ) ) , constructor ( "Label" , "unquoted" , appl ( prod ( [ cf ( sort ( "IdCon" ) ) ] , cf ( sort ( "Label" ) ) , attrs ( [ term ( cons ( "unquoted" ) ) ] ) ) , [ < "IdCon" ( "IdCon" ) > ] ) ) , constructor ( "Symbol" , "label" , appl ( prod ( [ cf ( sort ( "Label" ) ) , cf ( opt ( layout ) ) , lit ( ":" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "label" ) ) ] ) ) , [ < "Label" ( "Label" ) > , < "ws-after-Label" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 58 ] ) ] , lit ( ":" ) , no-attrs ) , [ 58 ] ) , < "ws-after-:" ( "OptLayout" ) > , < "Symbol" ( "Symbol" ) > ] ) ) , constructor ( "Symbol" , "lifting" , appl ( prod ( [ lit ( "`" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "`" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "lifting" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 96 ] ) ] , lit ( "`" ) , no-attrs ) , [ 96 ] ) , < "ws-after-left-quote" ( "OptLayout" ) > , < "Symbol" ( "Symbol" ) > , < "ws-after-Symbol" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 96 ] ) ] , lit ( "`" ) , no-attrs ) , [ 96 ] ) ] ) ) , constructor ( "Lex-SingleQuotedStrChar" , "newline" , appl ( prod ( [ lit ( "\\n" ) ] , lex ( sort ( "SingleQuotedStrChar" ) ) , attrs ( [ term ( cons ( "newline" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 92 ] ) , char-class ( [ 110 ] ) ] , lit ( "\\n" ) , no-attrs ) , [ 92 , 110 ] ) ] ) ) , constructor ( "SingleQuotedStrChar" , "Lex-to-cf" , appl ( prod ( [ lex ( sort ( "SingleQuotedStrChar" ) ) ] , cf ( sort ( "SingleQuotedStrChar" ) ) , no-attrs ) , [ < "SingleQuotedStrChar" ( "Lex-SingleQuotedStrChar" ) > ] ) ) , constructor ( "Lex-SingleQuotedStrChar" , "tab" , appl ( prod ( [ lit ( "\\t" ) ] , lex ( sort ( "SingleQuotedStrChar" ) ) , attrs ( [ term ( cons ( "tab" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 92 ] ) , char-class ( [ 116 ] ) ] , lit ( "\\t" ) , no-attrs ) , [ 92 , 116 ] ) ] ) ) , constructor ( "Lex-SingleQuotedStrChar" , "quote" , appl ( prod ( [ lit ( "\\'" ) ] , lex ( sort ( "SingleQuotedStrChar" ) ) , attrs ( [ term ( cons ( "quote" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 92 ] ) , char-class ( [ 39 ] ) ] , lit ( "\\'" ) , no-attrs ) , [ 92 , 39 ] ) ] ) ) , constructor ( "Lex-SingleQuotedStrChar" , "backslash" , appl ( prod ( [ lit ( "\\\\" ) ] , lex ( sort ( "SingleQuotedStrChar" ) ) , attrs ( [ term ( cons ( "backslash" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 92 ] ) , char-class ( [ 92 ] ) ] , lit ( "\\\\" ) , no-attrs ) , [ 92 , 92 ] ) ] ) ) , constructor ( "Lex-SingleQuotedStrChar" , "decimal" , appl ( prod ( [ lit ( "\\" ) , char-class ( [ range ( 48 , 57 ) ] ) , char-class ( [ range ( 48 , 57 ) ] ) , char-class ( [ range ( 48 , 57 ) ] ) ] , lex ( sort ( "SingleQuotedStrChar" ) ) , attrs ( [ term ( cons ( "decimal" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 92 ] ) ] , lit ( "\\" ) , no-attrs ) , [ 92 ] ) , < "a" ( char ) > , < "b" ( char ) > , < "c" ( char ) > ] ) ) , constructor ( "Lex-SingleQuotedStrChar" , "normal" , appl ( prod ( [ char-class ( [ range ( 32 , 38 ) , range ( 40 , 91 ) , range ( 93 , 255 ) ] ) ] , lex ( sort ( "SingleQuotedStrChar" ) ) , attrs ( [ term ( cons ( "normal" ) ) ] ) ) , [ < "ch" ( char ) > ] ) ) , constructor ( "Lex-SingleQuotedStrCon" , "default" , appl ( prod ( [ char-class ( [ 39 ] ) , lex ( iter-star ( sort ( "SingleQuotedStrChar" ) ) ) , char-class ( [ 39 ] ) ] , lex ( sort ( "SingleQuotedStrCon" ) ) , attrs ( [ term ( cons ( "default" ) ) ] ) ) , [ 39 , appl ( list ( lex ( iter-star ( sort ( "SingleQuotedStrChar" ) ) ) ) , < "chars" ( "Lex-SingleQuotedStrChar-chars" ) > ) , 39 ] ) ) , constructor ( "SingleQuotedStrCon" , "Lex-to-cf" , appl ( prod ( [ lex ( sort ( "SingleQuotedStrCon" ) ) ] , cf ( sort ( "SingleQuotedStrCon" ) ) , no-attrs ) , [ < "SingleQuotedStrCon" ( "Lex-SingleQuotedStrCon" ) > ] ) ) , constructor ( "FunctionName" , "unquoted-fun" , appl ( prod ( [ cf ( sort ( "IdCon" ) ) ] , cf ( sort ( "FunctionName" ) ) , attrs ( [ term ( cons ( "unquoted-fun" ) ) ] ) ) , [ < "IdCon" ( "IdCon" ) > ] ) ) , constructor ( "FunctionName" , "quoted-fun" , appl ( prod ( [ cf ( sort ( "StrCon" ) ) ] , cf ( sort ( "FunctionName" ) ) , attrs ( [ term ( cons ( "quoted-fun" ) ) ] ) ) , [ < "StrCon" ( "StrCon" ) > ] ) ) , constructor ( "Symbol" , "lit" , appl ( prod ( [ cf ( sort ( "StrCon" ) ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "lit" ) ) ] ) ) , [ < "string" ( "StrCon" ) > ] ) ) , constructor ( "Symbol" , "ci-lit" , appl ( prod ( [ cf ( sort ( "SingleQuotedStrCon" ) ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "ci-lit" ) ) ] ) ) , [ < "ci-string" ( "SingleQuotedStrCon" ) > ] ) ) , constructor ( "Production" , "prefix-fun" , appl ( prod ( [ cf ( sort ( "FunctionName" ) ) , cf ( opt ( layout ) ) , lit ( "(" ) , cf ( opt ( layout ) ) , cf ( iter-star-sep ( sort ( "Symbol" ) , lit ( "," ) ) ) , cf ( opt ( layout ) ) , lit ( ")" ) , cf ( opt ( layout ) ) , lit ( "->" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Attributes" ) ) ] , cf ( sort ( "Production" ) ) , attrs ( [ avoid , term ( cons ( "prefix-fun" ) ) ] ) ) , [ < "fun" ( "FunctionName" ) > , < "ws-after-fun" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 40 ] ) ] , lit ( "(" ) , no-attrs ) , [ 40 ] ) , < "ws-after-(" ( "OptLayout" ) > , appl ( list ( cf ( iter-star-sep ( sort ( "Symbol" ) , lit ( "," ) ) ) ) , < "arguments" ( "Symbol-arguments" ) > ) , < "ws-after-arguments" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 41 ] ) ] , lit ( ")" ) , no-attrs ) , [ 41 ] ) , < "ws-after-)" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 45 ] ) , char-class ( [ 62 ] ) ] , lit ( "->" ) , no-attrs ) , [ 45 , 62 ] ) , < "ws-after-->" ( "OptLayout" ) > , < "result" ( "Symbol" ) > , < "ws-after-result" ( "OptLayout" ) > , < "Attributes" ( "Attributes" ) > ] ) ) , list ( "Lex-SingleQuotedStrChar-chars" , "Lex-SingleQuotedStrChar" ) , separated-list ( "Symbol-arguments" , "Symbol" , [ < ws-after-head ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 44 ] ) ] , lit ( "," ) , no-attrs ) , [ 44 ] ) , < ws-after-sep ( "OptLayout" ) > ] ) , constructor ( "Start" , "Module" , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "Module" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < "ws-before" ( "OptLayout" ) > , < "top-Module" ( "Module" ) > , < "ws-after" ( "OptLayout" ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( "Lex-ModuleWord" , "word" , appl ( prod ( [ lex ( iter ( char-class ( [ 45 , range ( 48 , 57 ) , range ( 65 , 90 ) , 95 , range ( 97 , 122 ) ] ) ) ) ] , lex ( sort ( "ModuleWord" ) ) , attrs ( [ term ( cons ( "word" ) ) ] ) ) , [ appl ( list ( lex ( iter ( char-class ( [ 45 , range ( 48 , 57 ) , range ( 65 , 90 ) , 95 , range ( 97 , 122 ) ] ) ) ) ) , < "letters" ( chars ) > ) ] ) ) , constructor ( "ModuleWord" , "Lex-to-cf" , appl ( prod ( [ lex ( sort ( "ModuleWord" ) ) ] , cf ( sort ( "ModuleWord" ) ) , no-attrs ) , [ < "ModuleWord" ( "Lex-ModuleWord" ) > ] ) ) , constructor ( "Lex-ModuleId" , "leaf" , appl ( prod ( [ lex ( sort ( "ModuleWord" ) ) ] , lex ( sort ( "ModuleId" ) ) , attrs ( [ term ( cons ( "leaf" ) ) ] ) ) , [ < "ModuleWord" ( "Lex-ModuleWord" ) > ] ) ) , constructor ( "ModuleId" , "Lex-to-cf" , appl ( prod ( [ lex ( sort ( "ModuleId" ) ) ] , cf ( sort ( "ModuleId" ) ) , no-attrs ) , [ < "ModuleId" ( "Lex-ModuleId" ) > ] ) ) , constructor ( "Lex-ModuleId" , "root" , appl ( prod ( [ lit ( "/" ) , lex ( sort ( "ModuleId" ) ) ] , lex ( sort ( "ModuleId" ) ) , attrs ( [ term ( cons ( "root" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 47 ] ) ] , lit ( "/" ) , no-attrs ) , [ 47 ] ) , < "basename" ( "Lex-ModuleId" ) > ] ) ) , constructor ( "Lex-ModuleId" , "path" , appl ( prod ( [ lex ( sort ( "ModuleWord" ) ) , lit ( "/" ) , lex ( sort ( "ModuleId" ) ) ] , lex ( sort ( "ModuleId" ) ) , attrs ( [ term ( cons ( "path" ) ) ] ) ) , [ < "dirname" ( "Lex-ModuleWord" ) > , appl ( prod ( [ char-class ( [ 47 ] ) ] , lit ( "/" ) , no-attrs ) , [ 47 ] ) , < "basename" ( "Lex-ModuleId" ) > ] ) ) , constructor ( "Definition" , "Default" , appl ( prod ( [ cf ( iter-star ( sort ( "Module" ) ) ) ] , cf ( sort ( "Definition" ) ) , no-attrs ) , [ appl ( list ( cf ( iter-star ( sort ( "Module" ) ) ) ) , < "list" ( "Module-list" ) > ) ] ) ) , constructor ( "Module" , "module" , appl ( prod ( [ lit ( "module" ) , cf ( opt ( layout ) ) , cf ( sort ( "ModuleName" ) ) , cf ( opt ( layout ) ) , cf ( iter-star ( sort ( "ImpSection" ) ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Sections" ) ) ] , cf ( sort ( "Module" ) ) , attrs ( [ term ( cons ( "module" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 109 ] ) , char-class ( [ 111 ] ) , char-class ( [ 100 ] ) , char-class ( [ 117 ] ) , char-class ( [ 108 ] ) , char-class ( [ 101 ] ) ] , lit ( "module" ) , no-attrs ) , [ 109 , 111 , 100 , 117 , 108 , 101 ] ) , < "ws-after-module" ( "OptLayout" ) > , < "ModuleName" ( "ModuleName" ) > , < "ws-after-ModuleName" ( "OptLayout" ) > , appl ( list ( cf ( iter-star ( sort ( "ImpSection" ) ) ) ) , < "list" ( "ImpSection-list" ) > ) , < "ws-after-list" ( "OptLayout" ) > , < "Sections" ( "Sections" ) > ] ) ) , constructor ( "Section" , "exports" , appl ( prod ( [ lit ( "exports" ) , cf ( opt ( layout ) ) , cf ( sort ( "Grammar" ) ) ] , cf ( sort ( "Section" ) ) , attrs ( [ term ( cons ( "exports" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 101 ] ) , char-class ( [ 120 ] ) , char-class ( [ 112 ] ) , char-class ( [ 111 ] ) , char-class ( [ 114 ] ) , char-class ( [ 116 ] ) , char-class ( [ 115 ] ) ] , lit ( "exports" ) , no-attrs ) , [ 101 , 120 , 112 , 111 , 114 , 116 , 115 ] ) , < "ws-after-exports" ( "OptLayout" ) > , < "Grammar" ( "Grammar" ) > ] ) ) , constructor ( "Section" , "hiddens" , appl ( prod ( [ lit ( "hiddens" ) , cf ( opt ( layout ) ) , cf ( sort ( "Grammar" ) ) ] , cf ( sort ( "Section" ) ) , attrs ( [ term ( cons ( "hiddens" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 104 ] ) , char-class ( [ 105 ] ) , char-class ( [ 100 ] ) , char-class ( [ 100 ] ) , char-class ( [ 101 ] ) , char-class ( [ 110 ] ) , char-class ( [ 115 ] ) ] , lit ( "hiddens" ) , no-attrs ) , [ 104 , 105 , 100 , 100 , 101 , 110 , 115 ] ) , < "ws-after-hiddens" ( "OptLayout" ) > , < "Grammar" ( "Grammar" ) > ] ) ) , constructor ( "Sections" , "Default" , appl ( prod ( [ cf ( iter-star ( sort ( "Section" ) ) ) ] , cf ( sort ( "Sections" ) ) , no-attrs ) , [ appl ( list ( cf ( iter-star ( sort ( "Section" ) ) ) ) , < "list" ( "Section-list" ) > ) ] ) ) , constructor ( "ModuleName" , "unparameterized" , appl ( prod ( [ cf ( sort ( "ModuleId" ) ) ] , cf ( sort ( "ModuleName" ) ) , attrs ( [ term ( cons ( "unparameterized" ) ) ] ) ) , [ < "ModuleId" ( "ModuleId" ) > ] ) ) , constructor ( "ModuleName" , "parameterized" , appl ( prod ( [ cf ( sort ( "ModuleId" ) ) , cf ( opt ( layout ) ) , lit ( "[" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbols" ) ) , cf ( opt ( layout ) ) , lit ( "]" ) ] , cf ( sort ( "ModuleName" ) ) , attrs ( [ term ( cons ( "parameterized" ) ) ] ) ) , [ < "ModuleId" ( "ModuleId" ) > , < "ws-after-ModuleId" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 91 ] ) ] , lit ( "[" ) , no-attrs ) , [ 91 ] ) , < "ws-after-[" ( "OptLayout" ) > , < "params" ( "Symbols" ) > , < "ws-after-params" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 93 ] ) ] , lit ( "]" ) , no-attrs ) , [ 93 ] ) ] ) ) , constructor ( "Attribute" , "id" , appl ( prod ( [ lit ( "id" ) , cf ( opt ( layout ) ) , lit ( "(" ) , cf ( opt ( layout ) ) , cf ( sort ( "ModuleName" ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "Attribute" ) ) , attrs ( [ term ( cons ( "id" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 105 ] ) , char-class ( [ 100 ] ) ] , lit ( "id" ) , no-attrs ) , [ 105 , 100 ] ) , < "ws-after-id" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 40 ] ) ] , lit ( "(" ) , no-attrs ) , [ 40 ] ) , < "ws-after-(" ( "OptLayout" ) > , < "ModuleName" ( "ModuleName" ) > , < "ws-after-ModuleName" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 41 ] ) ] , lit ( ")" ) , no-attrs ) , [ 41 ] ) ] ) ) , constructor ( "ImpSection" , "imports" , appl ( prod ( [ lit ( "imports" ) , cf ( opt ( layout ) ) , cf ( sort ( "Imports" ) ) ] , cf ( sort ( "ImpSection" ) ) , attrs ( [ term ( cons ( "imports" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 105 ] ) , char-class ( [ 109 ] ) , char-class ( [ 112 ] ) , char-class ( [ 111 ] ) , char-class ( [ 114 ] ) , char-class ( [ 116 ] ) , char-class ( [ 115 ] ) ] , lit ( "imports" ) , no-attrs ) , [ 105 , 109 , 112 , 111 , 114 , 116 , 115 ] ) , < "ws-after-imports" ( "OptLayout" ) > , < "list" ( "Imports" ) > ] ) ) , constructor ( "Grammar" , "imp-section" , appl ( prod ( [ cf ( sort ( "ImpSection" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "imp-section" ) ) ] ) ) , [ < "ImpSection" ( "ImpSection" ) > ] ) ) , constructor ( "Imports" , "Default" , appl ( prod ( [ cf ( iter-star ( sort ( "Import" ) ) ) ] , cf ( sort ( "Imports" ) ) , no-attrs ) , [ appl ( list ( cf ( iter-star ( sort ( "Import" ) ) ) ) , < "list" ( "Import-list" ) > ) ] ) ) , constructor ( "Import" , "module" , appl ( prod ( [ cf ( sort ( "ModuleName" ) ) ] , cf ( sort ( "Import" ) ) , attrs ( [ term ( cons ( "module" ) ) ] ) ) , [ < "ModuleName" ( "ModuleName" ) > ] ) ) , constructor ( "Import" , "renamed-module" , appl ( prod ( [ cf ( sort ( "ModuleName" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Renamings" ) ) ] , cf ( sort ( "Import" ) ) , attrs ( [ term ( cons ( "renamed-module" ) ) ] ) ) , [ < "ModuleName" ( "ModuleName" ) > , < "ws-after-ModuleName" ( "OptLayout" ) > , < "Renamings" ( "Renamings" ) > ] ) ) , constructor ( "Import" , "Bracket" , appl ( prod ( [ lit ( "(" ) , cf ( opt ( layout ) ) , cf ( sort ( "Import" ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "Import" ) ) , attrs ( [ bracket ] ) ) , [ appl ( prod ( [ char-class ( [ 40 ] ) ] , lit ( "(" ) , no-attrs ) , [ 40 ] ) , < "ws-after-(" ( "OptLayout" ) > , < "Import" ( "Import" ) > , < "ws-after-Import" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 41 ] ) ] , lit ( ")" ) , no-attrs ) , [ 41 ] ) ] ) ) , separated-list ( "Module-list" , "Module" , [ < ws-after-head ( "OptLayout" ) > ] ) , separated-list ( "ImpSection-list" , "ImpSection" , [ < ws-after-head ( "OptLayout" ) > ] ) , separated-list ( "Section-list" , "Section" , [ < ws-after-head ( "OptLayout" ) > ] ) , separated-list ( "Import-list" , "Import" , [ < ws-after-head ( "OptLayout" ) > ] ) , constructor ( "Property" , "nullable-symbols" , appl ( prod ( [ lit ( "nullable" ) , cf ( opt ( layout ) ) , lit ( "symbols" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbols" ) ) ] , cf ( sort ( "Property" ) ) , attrs ( [ term ( cons ( "nullable-symbols" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 110 ] ) , char-class ( [ 117 ] ) , char-class ( [ 108 ] ) , char-class ( [ 108 ] ) , char-class ( [ 97 ] ) , char-class ( [ 98 ] ) , char-class ( [ 108 ] ) , char-class ( [ 101 ] ) ] , lit ( "nullable" ) , no-attrs ) , [ 110 , 117 , 108 , 108 , 97 , 98 , 108 , 101 ] ) , < "ws-after-nullable" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 115 ] ) , char-class ( [ 121 ] ) , char-class ( [ 109 ] ) , char-class ( [ 98 ] ) , char-class ( [ 111 ] ) , char-class ( [ 108 ] ) , char-class ( [ 115 ] ) ] , lit ( "symbols" ) , no-attrs ) , [ 115 , 121 , 109 , 98 , 111 , 108 , 115 ] ) , < "ws-after-symbols" ( "OptLayout" ) > , < "Symbols" ( "Symbols" ) > ] ) ) , constructor ( "Associativity" , "left" , appl ( prod ( [ lit ( "left" ) ] , cf ( sort ( "Associativity" ) ) , attrs ( [ term ( cons ( "left" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 108 ] ) , char-class ( [ 101 ] ) , char-class ( [ 102 ] ) , char-class ( [ 116 ] ) ] , lit ( "left" ) , no-attrs ) , [ 108 , 101 , 102 , 116 ] ) ] ) ) , constructor ( "Associativity" , "right" , appl ( prod ( [ lit ( "right" ) ] , cf ( sort ( "Associativity" ) ) , attrs ( [ term ( cons ( "right" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 114 ] ) , char-class ( [ 105 ] ) , char-class ( [ 103 ] ) , char-class ( [ 104 ] ) , char-class ( [ 116 ] ) ] , lit ( "right" ) , no-attrs ) , [ 114 , 105 , 103 , 104 , 116 ] ) ] ) ) , constructor ( "Associativity" , "non-assoc" , appl ( prod ( [ lit ( "non-assoc" ) ] , cf ( sort ( "Associativity" ) ) , attrs ( [ term ( cons ( "non-assoc" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 110 ] ) , char-class ( [ 111 ] ) , char-class ( [ 110 ] ) , char-class ( [ 45 ] ) , char-class ( [ 97 ] ) , char-class ( [ 115 ] ) , char-class ( [ 115 ] ) , char-class ( [ 111 ] ) , char-class ( [ 99 ] ) ] , lit ( "non-assoc" ) , no-attrs ) , [ 110 , 111 , 110 , 45 , 97 , 115 , 115 , 111 , 99 ] ) ] ) ) , constructor ( "Associativity" , "assoc" , appl ( prod ( [ lit ( "assoc" ) ] , cf ( sort ( "Associativity" ) ) , attrs ( [ term ( cons ( "assoc" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 97 ] ) , char-class ( [ 115 ] ) , char-class ( [ 115 ] ) , char-class ( [ 111 ] ) , char-class ( [ 99 ] ) ] , lit ( "assoc" ) , no-attrs ) , [ 97 , 115 , 115 , 111 , 99 ] ) ] ) ) , constructor ( "Attribute" , "bracket" , appl ( prod ( [ lit ( "bracket" ) ] , cf ( sort ( "Attribute" ) ) , attrs ( [ term ( cons ( "bracket" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 98 ] ) , char-class ( [ 114 ] ) , char-class ( [ 97 ] ) , char-class ( [ 99 ] ) , char-class ( [ 107 ] ) , char-class ( [ 101 ] ) , char-class ( [ 116 ] ) ] , lit ( "bracket" ) , no-attrs ) , [ 98 , 114 , 97 , 99 , 107 , 101 , 116 ] ) ] ) ) , constructor ( "Attribute" , "assoc" , appl ( prod ( [ cf ( sort ( "Associativity" ) ) ] , cf ( sort ( "Attribute" ) ) , attrs ( [ term ( cons ( "assoc" ) ) ] ) ) , [ < "Associativity" ( "Associativity" ) > ] ) ) , constructor ( "ArgumentIndicator" , "default" , appl ( prod ( [ lit ( "<" ) , cf ( opt ( layout ) ) , cf ( iter-sep ( sort ( "NatCon" ) , lit ( "," ) ) ) , cf ( opt ( layout ) ) , lit ( ">" ) ] , cf ( sort ( "ArgumentIndicator" ) ) , attrs ( [ term ( cons ( "default" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 60 ] ) ] , lit ( "<" ) , no-attrs ) , [ 60 ] ) , < "ws-after-<" ( "OptLayout" ) > , appl ( list ( cf ( iter-sep ( sort ( "NatCon" ) , lit ( "," ) ) ) ) , < "arguments" ( "NatCon-arguments" ) > ) , < "ws-after-arguments" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 62 ] ) ] , lit ( ">" ) , no-attrs ) , [ 62 ] ) ] ) ) , constructor ( "Group" , "with-arguments" , appl ( prod ( [ cf ( sort ( "Group" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "ArgumentIndicator" ) ) ] , cf ( sort ( "Group" ) ) , attrs ( [ assoc ( non-assoc ) , term ( cons ( "with-arguments" ) ) ] ) ) , [ < "Group" ( "Group" ) > , < "ws-after-Group" ( "OptLayout" ) > , < "ArgumentIndicator" ( "ArgumentIndicator" ) > ] ) ) , constructor ( "Group" , "simple-group" , appl ( prod ( [ cf ( sort ( "Production" ) ) ] , cf ( sort ( "Group" ) ) , attrs ( [ term ( cons ( "simple-group" ) ) ] ) ) , [ < "Production" ( "Production" ) > ] ) ) , constructor ( "Group" , "prods-group" , appl ( prod ( [ lit ( "{" ) , cf ( opt ( layout ) ) , cf ( sort ( "Productions" ) ) , cf ( opt ( layout ) ) , lit ( "}" ) ] , cf ( sort ( "Group" ) ) , attrs ( [ term ( cons ( "prods-group" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 123 ] ) ] , lit ( "{" ) , no-attrs ) , [ 123 ] ) , < "ws-after-{" ( "OptLayout" ) > , < "Productions" ( "Productions" ) > , < "ws-after-Productions" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 125 ] ) ] , lit ( "}" ) , no-attrs ) , [ 125 ] ) ] ) ) , constructor ( "Group" , "assoc-group" , appl ( prod ( [ lit ( "{" ) , cf ( opt ( layout ) ) , cf ( sort ( "Associativity" ) ) , cf ( opt ( layout ) ) , lit ( ":" ) , cf ( opt ( layout ) ) , cf ( sort ( "Productions" ) ) , cf ( opt ( layout ) ) , lit ( "}" ) ] , cf ( sort ( "Group" ) ) , attrs ( [ term ( cons ( "assoc-group" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 123 ] ) ] , lit ( "{" ) , no-attrs ) , [ 123 ] ) , < "ws-after-{" ( "OptLayout" ) > , < "Associativity" ( "Associativity" ) > , < "ws-after-Associativity" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 58 ] ) ] , lit ( ":" ) , no-attrs ) , [ 58 ] ) , < "ws-after-:" ( "OptLayout" ) > , < "Productions" ( "Productions" ) > , < "ws-after-Productions" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 125 ] ) ] , lit ( "}" ) , no-attrs ) , [ 125 ] ) ] ) ) , constructor ( "Priority" , "chain" , appl ( prod ( [ cf ( iter-sep ( sort ( "Group" ) , lit ( ">" ) ) ) ] , cf ( sort ( "Priority" ) ) , attrs ( [ term ( cons ( "chain" ) ) ] ) ) , [ appl ( list ( cf ( iter-sep ( sort ( "Group" ) , lit ( ">" ) ) ) ) , < "list" ( "Group-list" ) > ) ] ) ) , constructor ( "Priority" , "assoc" , appl ( prod ( [ cf ( sort ( "Group" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Associativity" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Group" ) ) ] , cf ( sort ( "Priority" ) ) , attrs ( [ term ( cons ( "assoc" ) ) ] ) ) , [ < "left" ( "Group" ) > , < "ws-after-left" ( "OptLayout" ) > , < "Associativity" ( "Associativity" ) > , < "ws-after-Associativity" ( "OptLayout" ) > , < "right" ( "Group" ) > ] ) ) , constructor ( "Priorities" , "Default" , appl ( prod ( [ cf ( iter-star-sep ( sort ( "Priority" ) , lit ( "," ) ) ) ] , cf ( sort ( "Priorities" ) ) , no-attrs ) , [ appl ( list ( cf ( iter-star-sep ( sort ( "Priority" ) , lit ( "," ) ) ) ) , < "list" ( "Priority-list" ) > ) ] ) ) , constructor ( "Grammar" , "priorities" , appl ( prod ( [ lit ( "priorities" ) , cf ( opt ( layout ) ) , cf ( sort ( "Priorities" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "priorities" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 112 ] ) , char-class ( [ 114 ] ) , char-class ( [ 105 ] ) , char-class ( [ 111 ] ) , char-class ( [ 114 ] ) , char-class ( [ 105 ] ) , char-class ( [ 116 ] ) , char-class ( [ 105 ] ) , char-class ( [ 101 ] ) , char-class ( [ 115 ] ) ] , lit ( "priorities" ) , no-attrs ) , [ 112 , 114 , 105 , 111 , 114 , 105 , 116 , 105 , 101 , 115 ] ) , < "ws-after-priorities" ( "OptLayout" ) > , < "Priorities" ( "Priorities" ) > ] ) ) , separated-list ( "NatCon-arguments" , "NatCon" , [ < ws-after-head ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 44 ] ) ] , lit ( "," ) , no-attrs ) , [ 44 ] ) , < ws-after-sep ( "OptLayout" ) > ] ) , separated-list ( "Group-list" , "Group" , [ < ws-after-head ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 62 ] ) ] , lit ( ">" ) , no-attrs ) , [ 62 ] ) , < ws-after-sep ( "OptLayout" ) > ] ) , separated-list ( "Priority-list" , "Priority" , [ < ws-after-head ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 44 ] ) ] , lit ( "," ) , no-attrs ) , [ 44 ] ) , < ws-after-sep ( "OptLayout" ) > ] ) , constructor ( "Grammar" , "properties" , appl ( prod ( [ lit ( "properties" ) , cf ( opt ( layout ) ) , cf ( iter-star ( sort ( "Property" ) ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "properties" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 112 ] ) , char-class ( [ 114 ] ) , char-class ( [ 111 ] ) , char-class ( [ 112 ] ) , char-class ( [ 101 ] ) , char-class ( [ 114 ] ) , char-class ( [ 116 ] ) , char-class ( [ 105 ] ) , char-class ( [ 101 ] ) , char-class ( [ 115 ] ) ] , lit ( "properties" ) , no-attrs ) , [ 112 , 114 , 111 , 112 , 101 , 114 , 116 , 105 , 101 , 115 ] ) , < "ws-after-properties" ( "OptLayout" ) > , appl ( list ( cf ( iter-star ( sort ( "Property" ) ) ) ) , < "list" ( "Property-list" ) > ) ] ) ) , separated-list ( "Property-list" , "Property" , [ < ws-after-head ( "OptLayout" ) > ] ) , constructor ( "Symbol" , "empty" , appl ( prod ( [ lit ( "(" ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "empty" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 40 ] ) ] , lit ( "(" ) , no-attrs ) , [ 40 ] ) , < "ws-after-(" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 41 ] ) ] , lit ( ")" ) , no-attrs ) , [ 41 ] ) ] ) ) , constructor ( "Symbol" , "seq" , appl ( prod ( [ lit ( "(" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , cf ( iter ( sort ( "Symbol" ) ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "seq" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 40 ] ) ] , lit ( "(" ) , no-attrs ) , [ 40 ] ) , < "ws-after-(" ( "OptLayout" ) > , < "head" ( "Symbol" ) > , < "ws-after-head" ( "OptLayout" ) > , appl ( list ( cf ( iter ( sort ( "Symbol" ) ) ) ) , < "tail" ( "Symbol-tail" ) > ) , < "ws-after-tail" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 41 ] ) ] , lit ( ")" ) , no-attrs ) , [ 41 ] ) ] ) ) , constructor ( "Symbol" , "opt" , appl ( prod ( [ cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "?" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "opt" ) ) ] ) ) , [ < "Symbol" ( "Symbol" ) > , < "ws-after-Symbol" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 63 ] ) ] , lit ( "?" ) , no-attrs ) , [ 63 ] ) ] ) ) , constructor ( "Symbol" , "iter" , appl ( prod ( [ cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "+" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "iter" ) ) ] ) ) , [ < "Symbol" ( "Symbol" ) > , < "ws-after-Symbol" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 43 ] ) ] , lit ( "+" ) , no-attrs ) , [ 43 ] ) ] ) ) , constructor ( "Symbol" , "iter-star" , appl ( prod ( [ cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "*" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "iter-star" ) ) ] ) ) , [ < "Symbol" ( "Symbol" ) > , < "ws-after-Symbol" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 42 ] ) ] , lit ( "*" ) , no-attrs ) , [ 42 ] ) ] ) ) , constructor ( "Symbol" , "iter-sep" , appl ( prod ( [ lit ( "{" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "}" ) , cf ( opt ( layout ) ) , lit ( "+" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "iter-sep" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 123 ] ) ] , lit ( "{" ) , no-attrs ) , [ 123 ] ) , < "ws-after-{" ( "OptLayout" ) > , < "Symbol" ( "Symbol" ) > , < "ws-after-Symbol" ( "OptLayout" ) > , < "sep" ( "Symbol" ) > , < "ws-after-sep" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 125 ] ) ] , lit ( "}" ) , no-attrs ) , [ 125 ] ) , < "ws-after-}" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 43 ] ) ] , lit ( "+" ) , no-attrs ) , [ 43 ] ) ] ) ) , constructor ( "Symbol" , "iter-star-sep" , appl ( prod ( [ lit ( "{" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "}" ) , cf ( opt ( layout ) ) , lit ( "*" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "iter-star-sep" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 123 ] ) ] , lit ( "{" ) , no-attrs ) , [ 123 ] ) , < "ws-after-{" ( "OptLayout" ) > , < "Symbol" ( "Symbol" ) > , < "ws-after-Symbol" ( "OptLayout" ) > , < "sep" ( "Symbol" ) > , < "ws-after-sep" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 125 ] ) ] , lit ( "}" ) , no-attrs ) , [ 125 ] ) , < "ws-after-}" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 42 ] ) ] , lit ( "*" ) , no-attrs ) , [ 42 ] ) ] ) ) , constructor ( "Symbol" , "tuple" , appl ( prod ( [ lit ( "<" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "," ) , cf ( opt ( layout ) ) , cf ( iter-sep ( sort ( "Symbol" ) , lit ( "," ) ) ) , cf ( opt ( layout ) ) , lit ( ">" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "tuple" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 60 ] ) ] , lit ( "<" ) , no-attrs ) , [ 60 ] ) , < "ws-after-<" ( "OptLayout" ) > , < "head" ( "Symbol" ) > , < "ws-after-head" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 44 ] ) ] , lit ( "," ) , no-attrs ) , [ 44 ] ) , < "ws-after-," ( "OptLayout" ) > , appl ( list ( cf ( iter-sep ( sort ( "Symbol" ) , lit ( "," ) ) ) ) , < "rest" ( "Symbol-rest" ) > ) , < "ws-after-rest" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 62 ] ) ] , lit ( ">" ) , no-attrs ) , [ 62 ] ) ] ) ) , constructor ( "Symbol" , "func" , appl ( prod ( [ lit ( "(" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbols" ) ) , cf ( opt ( layout ) ) , lit ( "=>" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "func" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 40 ] ) ] , lit ( "(" ) , no-attrs ) , [ 40 ] ) , < "ws-after-(" ( "OptLayout" ) > , < "arguments" ( "Symbols" ) > , < "ws-after-arguments" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 61 ] ) , char-class ( [ 62 ] ) ] , lit ( "=>" ) , no-attrs ) , [ 61 , 62 ] ) , < "ws-after-=>" ( "OptLayout" ) > , < "results" ( "Symbol" ) > , < "ws-after-results" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 41 ] ) ] , lit ( ")" ) , no-attrs ) , [ 41 ] ) ] ) ) , constructor ( "Symbol" , "alt" , appl ( prod ( [ cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "|" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ assoc ( right ) , term ( cons ( "alt" ) ) ] ) ) , [ < "left" ( "Symbol" ) > , < "ws-after-left" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 124 ] ) ] , lit ( "|" ) , no-attrs ) , [ 124 ] ) , < "ws-after-|" ( "OptLayout" ) > , < "right" ( "Symbol" ) > ] ) ) , constructor ( "Symbol" , "strategy" , appl ( prod ( [ lit ( "(" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "->" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "strategy" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 40 ] ) ] , lit ( "(" ) , no-attrs ) , [ 40 ] ) , < "ws-after-(" ( "OptLayout" ) > , < "left" ( "Symbol" ) > , < "ws-after-left" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 45 ] ) , char-class ( [ 62 ] ) ] , lit ( "->" ) , no-attrs ) , [ 45 , 62 ] ) , < "ws-after-->" ( "OptLayout" ) > , < "right" ( "Symbol" ) > , < "ws-after-right" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 41 ] ) ] , lit ( ")" ) , no-attrs ) , [ 41 ] ) ] ) ) , separated-list ( "Symbol-tail" , "Symbol" , [ < ws-after-head ( "OptLayout" ) > ] ) , separated-list ( "Symbol-rest" , "Symbol" , [ < ws-after-head ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 44 ] ) ] , lit ( "," ) , no-attrs ) , [ 44 ] ) , < ws-after-sep ( "OptLayout" ) > ] ) , constructor ( "Renamings" , "renamings" , appl ( prod ( [ lit ( "[" ) , cf ( opt ( layout ) ) , cf ( iter-star ( sort ( "Renaming" ) ) ) , cf ( opt ( layout ) ) , lit ( "]" ) ] , cf ( sort ( "Renamings" ) ) , attrs ( [ term ( cons ( "renamings" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 91 ] ) ] , lit ( "[" ) , no-attrs ) , [ 91 ] ) , < "ws-after-[" ( "OptLayout" ) > , appl ( list ( cf ( iter-star ( sort ( "Renaming" ) ) ) ) , < "list" ( "Renaming-list" ) > ) , < "ws-after-list" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 93 ] ) ] , lit ( "]" ) , no-attrs ) , [ 93 ] ) ] ) ) , constructor ( "Renaming" , "symbol" , appl ( prod ( [ cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( "=>" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) ] , cf ( sort ( "Renaming" ) ) , attrs ( [ term ( cons ( "symbol" ) ) ] ) ) , [ < "from" ( "Symbol" ) > , < "ws-after-from" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 61 ] ) , char-class ( [ 62 ] ) ] , lit ( "=>" ) , no-attrs ) , [ 61 , 62 ] ) , < "ws-after-=>" ( "OptLayout" ) > , < "to" ( "Symbol" ) > ] ) ) , constructor ( "Renaming" , "production" , appl ( prod ( [ cf ( sort ( "Production" ) ) , cf ( opt ( layout ) ) , lit ( "=>" ) , cf ( opt ( layout ) ) , cf ( sort ( "Production" ) ) ] , cf ( sort ( "Renaming" ) ) , attrs ( [ term ( cons ( "production" ) ) ] ) ) , [ < "from-prod" ( "Production" ) > , < "ws-after-from-prod" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 61 ] ) , char-class ( [ 62 ] ) ] , lit ( "=>" ) , no-attrs ) , [ 61 , 62 ] ) , < "ws-after-=>" ( "OptLayout" ) > , < "to-prod" ( "Production" ) > ] ) ) , separated-list ( "Renaming-list" , "Renaming" , [ < ws-after-head ( "OptLayout" ) > ] ) , constructor ( "Lookahead" , "char-class" , appl ( prod ( [ cf ( sort ( "CharClass" ) ) ] , cf ( sort ( "Lookahead" ) ) , attrs ( [ term ( cons ( "char-class" ) ) ] ) ) , [ < "CharClass" ( "CharClass" ) > ] ) ) , constructor ( "Lookahead" , "seq" , appl ( prod ( [ cf ( sort ( "CharClass" ) ) , cf ( opt ( layout ) ) , lit ( "." ) , cf ( opt ( layout ) ) , cf ( sort ( "Lookaheads" ) ) ] , cf ( sort ( "Lookahead" ) ) , attrs ( [ term ( cons ( "seq" ) ) ] ) ) , [ < "head" ( "CharClass" ) > , < "ws-after-head" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 46 ] ) ] , lit ( "." ) , no-attrs ) , [ 46 ] ) , < "ws-after-." ( "OptLayout" ) > , < "tail" ( "Lookaheads" ) > ] ) ) , constructor ( "Lookaheads" , "single" , appl ( prod ( [ cf ( sort ( "Lookahead" ) ) ] , cf ( sort ( "Lookaheads" ) ) , attrs ( [ term ( cons ( "single" ) ) ] ) ) , [ < "Lookahead" ( "Lookahead" ) > ] ) ) , constructor ( "Lookaheads" , "alt" , appl ( prod ( [ cf ( sort ( "Lookaheads" ) ) , cf ( opt ( layout ) ) , lit ( "|" ) , cf ( opt ( layout ) ) , cf ( sort ( "Lookaheads" ) ) ] , cf ( sort ( "Lookaheads" ) ) , attrs ( [ term ( cons ( "alt" ) ) , assoc ( right ) ] ) ) , [ < "left" ( "Lookaheads" ) > , < "ws-after-left" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 124 ] ) ] , lit ( "|" ) , no-attrs ) , [ 124 ] ) , < "ws-after-|" ( "OptLayout" ) > , < "right" ( "Lookaheads" ) > ] ) ) , constructor ( "Lookaheads" , "Bracket" , appl ( prod ( [ lit ( "(" ) , cf ( opt ( layout ) ) , cf ( sort ( "Lookaheads" ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "Lookaheads" ) ) , attrs ( [ bracket ] ) ) , [ appl ( prod ( [ char-class ( [ 40 ] ) ] , lit ( "(" ) , no-attrs ) , [ 40 ] ) , < "ws-after-(" ( "OptLayout" ) > , < "Lookaheads" ( "Lookaheads" ) > , < "ws-after-Lookaheads" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 41 ] ) ] , lit ( ")" ) , no-attrs ) , [ 41 ] ) ] ) ) , constructor ( "Lookaheads" , "list" , appl ( prod ( [ lit ( "[[" ) , cf ( opt ( layout ) ) , cf ( iter-star-sep ( sort ( "Lookahead" ) , lit ( "," ) ) ) , cf ( opt ( layout ) ) , lit ( "]]" ) ] , cf ( sort ( "Lookaheads" ) ) , attrs ( [ term ( cons ( "list" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 91 ] ) , char-class ( [ 91 ] ) ] , lit ( "[[" ) , no-attrs ) , [ 91 , 91 ] ) , < "ws-after-[[" ( "OptLayout" ) > , appl ( list ( cf ( iter-star-sep ( sort ( "Lookahead" ) , lit ( "," ) ) ) ) , < "list" ( "Lookahead-list" ) > ) , < "ws-after-list" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 93 ] ) , char-class ( [ 93 ] ) ] , lit ( "]]" ) , no-attrs ) , [ 93 , 93 ] ) ] ) ) , constructor ( "Restriction" , "follow" , appl ( prod ( [ cf ( sort ( "Symbols" ) ) , cf ( opt ( layout ) ) , lit ( "-/-" ) , cf ( opt ( layout ) ) , cf ( sort ( "Lookaheads" ) ) ] , cf ( sort ( "Restriction" ) ) , attrs ( [ term ( cons ( "follow" ) ) ] ) ) , [ < "Symbols" ( "Symbols" ) > , < "ws-after-Symbols" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 45 ] ) , char-class ( [ 47 ] ) , char-class ( [ 45 ] ) ] , lit ( "-/-" ) , no-attrs ) , [ 45 , 47 , 45 ] ) , < "ws-after--/-" ( "OptLayout" ) > , < "Lookaheads" ( "Lookaheads" ) > ] ) ) , constructor ( "Restrictions" , "Default" , appl ( prod ( [ cf ( iter-star ( sort ( "Restriction" ) ) ) ] , cf ( sort ( "Restrictions" ) ) , no-attrs ) , [ appl ( list ( cf ( iter-star ( sort ( "Restriction" ) ) ) ) , < "list" ( "Restriction-list" ) > ) ] ) ) , constructor ( "Grammar" , "restrictions" , appl ( prod ( [ lit ( "restrictions" ) , cf ( opt ( layout ) ) , cf ( sort ( "Restrictions" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "restrictions" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 114 ] ) , char-class ( [ 101 ] ) , char-class ( [ 115 ] ) , char-class ( [ 116 ] ) , char-class ( [ 114 ] ) , char-class ( [ 105 ] ) , char-class ( [ 99 ] ) , char-class ( [ 116 ] ) , char-class ( [ 105 ] ) , char-class ( [ 111 ] ) , char-class ( [ 110 ] ) , char-class ( [ 115 ] ) ] , lit ( "restrictions" ) , no-attrs ) , [ 114 , 101 , 115 , 116 , 114 , 105 , 99 , 116 , 105 , 111 , 110 , 115 ] ) , < "ws-after-restrictions" ( "OptLayout" ) > , < "Restrictions" ( "Restrictions" ) > ] ) ) , constructor ( "Attribute" , "reject" , appl ( prod ( [ lit ( "reject" ) ] , cf ( sort ( "Attribute" ) ) , attrs ( [ term ( cons ( "reject" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 114 ] ) , char-class ( [ 101 ] ) , char-class ( [ 106 ] ) , char-class ( [ 101 ] ) , char-class ( [ 99 ] ) , char-class ( [ 116 ] ) ] , lit ( "reject" ) , no-attrs ) , [ 114 , 101 , 106 , 101 , 99 , 116 ] ) ] ) ) , constructor ( "Attribute" , "prefer" , appl ( prod ( [ lit ( "prefer" ) ] , cf ( sort ( "Attribute" ) ) , attrs ( [ term ( cons ( "prefer" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 112 ] ) , char-class ( [ 114 ] ) , char-class ( [ 101 ] ) , char-class ( [ 102 ] ) , char-class ( [ 101 ] ) , char-class ( [ 114 ] ) ] , lit ( "prefer" ) , no-attrs ) , [ 112 , 114 , 101 , 102 , 101 , 114 ] ) ] ) ) , constructor ( "Attribute" , "avoid" , appl ( prod ( [ lit ( "avoid" ) ] , cf ( sort ( "Attribute" ) ) , attrs ( [ term ( cons ( "avoid" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 97 ] ) , char-class ( [ 118 ] ) , char-class ( [ 111 ] ) , char-class ( [ 105 ] ) , char-class ( [ 100 ] ) ] , lit ( "avoid" ) , no-attrs ) , [ 97 , 118 , 111 , 105 , 100 ] ) ] ) ) , separated-list ( "Lookahead-list" , "Lookahead" , [ < ws-after-head ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 44 ] ) ] , lit ( "," ) , no-attrs ) , [ 44 ] ) , < ws-after-sep ( "OptLayout" ) > ] ) , separated-list ( "Restriction-list" , "Restriction" , [ < ws-after-head ( "OptLayout" ) > ] ) , constructor ( "RightNullableProduction" , "default" , appl ( prod ( [ cf ( sort ( "Production" ) ) , cf ( opt ( layout ) ) , cf ( sort ( "NatCon" ) ) ] , cf ( sort ( "RightNullableProduction" ) ) , attrs ( [ term ( cons ( "default" ) ) ] ) ) , [ < "Production" ( "Production" ) > , < "ws-after-Production" ( "OptLayout" ) > , < "prefix-length" ( "NatCon" ) > ] ) ) , constructor ( "Property" , "right-nullable-productions" , appl ( prod ( [ lit ( "right" ) , cf ( opt ( layout ) ) , lit ( "nullable" ) , cf ( opt ( layout ) ) , lit ( "productions" ) , cf ( opt ( layout ) ) , cf ( iter-star ( sort ( "RightNullableProduction" ) ) ) ] , cf ( sort ( "Property" ) ) , attrs ( [ term ( cons ( "right-nullable-productions" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 114 ] ) , char-class ( [ 105 ] ) , char-class ( [ 103 ] ) , char-class ( [ 104 ] ) , char-class ( [ 116 ] ) ] , lit ( "right" ) , no-attrs ) , [ 114 , 105 , 103 , 104 , 116 ] ) , < "ws-after-right" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 110 ] ) , char-class ( [ 117 ] ) , char-class ( [ 108 ] ) , char-class ( [ 108 ] ) , char-class ( [ 97 ] ) , char-class ( [ 98 ] ) , char-class ( [ 108 ] ) , char-class ( [ 101 ] ) ] , lit ( "nullable" ) , no-attrs ) , [ 110 , 117 , 108 , 108 , 97 , 98 , 108 , 101 ] ) , < "ws-after-nullable" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 112 ] ) , char-class ( [ 114 ] ) , char-class ( [ 111 ] ) , char-class ( [ 100 ] ) , char-class ( [ 117 ] ) , char-class ( [ 99 ] ) , char-class ( [ 116 ] ) , char-class ( [ 105 ] ) , char-class ( [ 111 ] ) , char-class ( [ 110 ] ) , char-class ( [ 115 ] ) ] , lit ( "productions" ) , no-attrs ) , [ 112 , 114 , 111 , 100 , 117 , 99 , 116 , 105 , 111 , 110 , 115 ] ) , < "ws-after-productions" ( "OptLayout" ) > , appl ( list ( cf ( iter-star ( sort ( "RightNullableProduction" ) ) ) ) , < "list" ( "RightNullableProduction-list" ) > ) ] ) ) , separated-list ( "RightNullableProduction-list" , "RightNullableProduction" , [ < ws-after-head ( "OptLayout" ) > ] ) , constructor ( "Sort" , "Lex-to-cf" , appl ( prod ( [ lex ( sort ( "Sort" ) ) ] , cf ( sort ( "Sort" ) ) , no-attrs ) , [ < "Sort" ( "Lex-Sort" ) > ] ) ) , constructor ( "Start" , "SDF" , parsetree ( appl ( prod ( [ cf ( opt ( layout ) ) , cf ( sort ( "SDF" ) ) , cf ( opt ( layout ) ) ] , sort ( "<START>" ) , no-attrs ) , [ < "ws-before" ( "OptLayout" ) > , < "top-SDF" ( "SDF" ) > , < "ws-after" ( "OptLayout" ) > ] ) , < amb-cnt ( int ) > ) ) , constructor ( "Symbol" , "start" , appl ( prod ( [ lit ( "<START>" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "start" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 60 ] ) , char-class ( [ 83 ] ) , char-class ( [ 84 ] ) , char-class ( [ 65 ] ) , char-class ( [ 82 ] ) , char-class ( [ 84 ] ) , char-class ( [ 62 ] ) ] , lit ( "<START>" ) , no-attrs ) , [ 60 , 83 , 84 , 65 , 82 , 84 , 62 ] ) ] ) ) , constructor ( "Symbol" , "file-start" , appl ( prod ( [ lit ( "<Start>" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "file-start" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 60 ] ) , char-class ( [ 83 ] ) , char-class ( [ 116 ] ) , char-class ( [ 97 ] ) , char-class ( [ 114 ] ) , char-class ( [ 116 ] ) , char-class ( [ 62 ] ) ] , lit ( "<Start>" ) , no-attrs ) , [ 60 , 83 , 116 , 97 , 114 , 116 , 62 ] ) ] ) ) , constructor ( "Grammar" , "lexical-priorities" , appl ( prod ( [ lit ( "lexical" ) , cf ( opt ( layout ) ) , lit ( "priorities" ) , cf ( opt ( layout ) ) , cf ( sort ( "Priorities" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "lexical-priorities" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 108 ] ) , char-class ( [ 101 ] ) , char-class ( [ 120 ] ) , char-class ( [ 105 ] ) , char-class ( [ 99 ] ) , char-class ( [ 97 ] ) , char-class ( [ 108 ] ) ] , lit ( "lexical" ) , no-attrs ) , [ 108 , 101 , 120 , 105 , 99 , 97 , 108 ] ) , < "ws-after-lexical" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 112 ] ) , char-class ( [ 114 ] ) , char-class ( [ 105 ] ) , char-class ( [ 111 ] ) , char-class ( [ 114 ] ) , char-class ( [ 105 ] ) , char-class ( [ 116 ] ) , char-class ( [ 105 ] ) , char-class ( [ 101 ] ) , char-class ( [ 115 ] ) ] , lit ( "priorities" ) , no-attrs ) , [ 112 , 114 , 105 , 111 , 114 , 105 , 116 , 105 , 101 , 115 ] ) , < "ws-after-priorities" ( "OptLayout" ) > , < "Priorities" ( "Priorities" ) > ] ) ) , constructor ( "Grammar" , "context-free-priorities" , appl ( prod ( [ lit ( "context-free" ) , cf ( opt ( layout ) ) , lit ( "priorities" ) , cf ( opt ( layout ) ) , cf ( sort ( "Priorities" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "context-free-priorities" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 99 ] ) , char-class ( [ 111 ] ) , char-class ( [ 110 ] ) , char-class ( [ 116 ] ) , char-class ( [ 101 ] ) , char-class ( [ 120 ] ) , char-class ( [ 116 ] ) , char-class ( [ 45 ] ) , char-class ( [ 102 ] ) , char-class ( [ 114 ] ) , char-class ( [ 101 ] ) , char-class ( [ 101 ] ) ] , lit ( "context-free" ) , no-attrs ) , [ 99 , 111 , 110 , 116 , 101 , 120 , 116 , 45 , 102 , 114 , 101 , 101 ] ) , < "ws-after-context-free" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 112 ] ) , char-class ( [ 114 ] ) , char-class ( [ 105 ] ) , char-class ( [ 111 ] ) , char-class ( [ 114 ] ) , char-class ( [ 105 ] ) , char-class ( [ 116 ] ) , char-class ( [ 105 ] ) , char-class ( [ 101 ] ) , char-class ( [ 115 ] ) ] , lit ( "priorities" ) , no-attrs ) , [ 112 , 114 , 105 , 111 , 114 , 105 , 116 , 105 , 101 , 115 ] ) , < "ws-after-priorities" ( "OptLayout" ) > , < "Priorities" ( "Priorities" ) > ] ) ) , constructor ( "Grammar" , "lexical-restrictions" , appl ( prod ( [ lit ( "lexical" ) , cf ( opt ( layout ) ) , lit ( "restrictions" ) , cf ( opt ( layout ) ) , cf ( sort ( "Restrictions" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "lexical-restrictions" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 108 ] ) , char-class ( [ 101 ] ) , char-class ( [ 120 ] ) , char-class ( [ 105 ] ) , char-class ( [ 99 ] ) , char-class ( [ 97 ] ) , char-class ( [ 108 ] ) ] , lit ( "lexical" ) , no-attrs ) , [ 108 , 101 , 120 , 105 , 99 , 97 , 108 ] ) , < "ws-after-lexical" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 114 ] ) , char-class ( [ 101 ] ) , char-class ( [ 115 ] ) , char-class ( [ 116 ] ) , char-class ( [ 114 ] ) , char-class ( [ 105 ] ) , char-class ( [ 99 ] ) , char-class ( [ 116 ] ) , char-class ( [ 105 ] ) , char-class ( [ 111 ] ) , char-class ( [ 110 ] ) , char-class ( [ 115 ] ) ] , lit ( "restrictions" ) , no-attrs ) , [ 114 , 101 , 115 , 116 , 114 , 105 , 99 , 116 , 105 , 111 , 110 , 115 ] ) , < "ws-after-restrictions" ( "OptLayout" ) > , < "Restrictions" ( "Restrictions" ) > ] ) ) , constructor ( "Grammar" , "context-free-restrictions" , appl ( prod ( [ lit ( "context-free" ) , cf ( opt ( layout ) ) , lit ( "restrictions" ) , cf ( opt ( layout ) ) , cf ( sort ( "Restrictions" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "context-free-restrictions" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 99 ] ) , char-class ( [ 111 ] ) , char-class ( [ 110 ] ) , char-class ( [ 116 ] ) , char-class ( [ 101 ] ) , char-class ( [ 120 ] ) , char-class ( [ 116 ] ) , char-class ( [ 45 ] ) , char-class ( [ 102 ] ) , char-class ( [ 114 ] ) , char-class ( [ 101 ] ) , char-class ( [ 101 ] ) ] , lit ( "context-free" ) , no-attrs ) , [ 99 , 111 , 110 , 116 , 101 , 120 , 116 , 45 , 102 , 114 , 101 , 101 ] ) , < "ws-after-context-free" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 114 ] ) , char-class ( [ 101 ] ) , char-class ( [ 115 ] ) , char-class ( [ 116 ] ) , char-class ( [ 114 ] ) , char-class ( [ 105 ] ) , char-class ( [ 99 ] ) , char-class ( [ 116 ] ) , char-class ( [ 105 ] ) , char-class ( [ 111 ] ) , char-class ( [ 110 ] ) , char-class ( [ 115 ] ) ] , lit ( "restrictions" ) , no-attrs ) , [ 114 , 101 , 115 , 116 , 114 , 105 , 99 , 116 , 105 , 111 , 110 , 115 ] ) , < "ws-after-restrictions" ( "OptLayout" ) > , < "Restrictions" ( "Restrictions" ) > ] ) ) , constructor ( "SDF" , "definition" , appl ( prod ( [ lit ( "definition" ) , cf ( opt ( layout ) ) , cf ( sort ( "Definition" ) ) ] , cf ( sort ( "SDF" ) ) , attrs ( [ term ( cons ( "definition" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 100 ] ) , char-class ( [ 101 ] ) , char-class ( [ 102 ] ) , char-class ( [ 105 ] ) , char-class ( [ 110 ] ) , char-class ( [ 105 ] ) , char-class ( [ 116 ] ) , char-class ( [ 105 ] ) , char-class ( [ 111 ] ) , char-class ( [ 110 ] ) ] , lit ( "definition" ) , no-attrs ) , [ 100 , 101 , 102 , 105 , 110 , 105 , 116 , 105 , 111 , 110 ] ) , < "ws-after-definition" ( "OptLayout" ) > , < "Definition" ( "Definition" ) > ] ) ) , constructor ( "Lex-Sort" , "one-char" , appl ( prod ( [ char-class ( [ range ( 65 , 90 ) ] ) ] , lex ( sort ( "Sort" ) ) , attrs ( [ term ( cons ( "one-char" ) ) ] ) ) , [ < "head" ( char ) > ] ) ) , constructor ( "Lex-Sort" , "more-chars" , appl ( prod ( [ char-class ( [ range ( 65 , 90 ) ] ) , lex ( iter-star ( char-class ( [ 45 , range ( 48 , 57 ) , range ( 65 , 90 ) , range ( 97 , 122 ) ] ) ) ) , char-class ( [ range ( 48 , 57 ) , range ( 65 , 90 ) , range ( 97 , 122 ) ] ) ] , lex ( sort ( "Sort" ) ) , attrs ( [ term ( cons ( "more-chars" ) ) ] ) ) , [ < "head" ( char ) > , appl ( list ( lex ( iter-star ( char-class ( [ 45 , range ( 48 , 57 ) , range ( 65 , 90 ) , range ( 97 , 122 ) ] ) ) ) ) , < "middle" ( chars ) > ) , < "last" ( char ) > ] ) ) , constructor ( "Symbol" , "sort" , appl ( prod ( [ cf ( sort ( "Sort" ) ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "sort" ) ) ] ) ) , [ < "Sort" ( "Sort" ) > ] ) ) , constructor ( "Symbol" , "parameterized-sort" , appl ( prod ( [ cf ( sort ( "Sort" ) ) , cf ( opt ( layout ) ) , lit ( "[[" ) , cf ( opt ( layout ) ) , cf ( iter-sep ( sort ( "Symbol" ) , lit ( "," ) ) ) , cf ( opt ( layout ) ) , lit ( "]]" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ term ( cons ( "parameterized-sort" ) ) ] ) ) , [ < "Sort" ( "Sort" ) > , < "ws-after-Sort" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 91 ] ) , char-class ( [ 91 ] ) ] , lit ( "[[" ) , no-attrs ) , [ 91 , 91 ] ) , < "ws-after-[[" ( "OptLayout" ) > , appl ( list ( cf ( iter-sep ( sort ( "Symbol" ) , lit ( "," ) ) ) ) , < "parameters" ( "Symbol-parameters" ) > ) , < "ws-after-parameters" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 93 ] ) , char-class ( [ 93 ] ) ] , lit ( "]]" ) , no-attrs ) , [ 93 , 93 ] ) ] ) ) , constructor ( "Grammar" , "sorts" , appl ( prod ( [ lit ( "sorts" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbols" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "sorts" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 115 ] ) , char-class ( [ 111 ] ) , char-class ( [ 114 ] ) , char-class ( [ 116 ] ) , char-class ( [ 115 ] ) ] , lit ( "sorts" ) , no-attrs ) , [ 115 , 111 , 114 , 116 , 115 ] ) , < "ws-after-sorts" ( "OptLayout" ) > , < "Symbols" ( "Symbols" ) > ] ) ) , separated-list ( "Symbol-parameters" , "Symbol" , [ < ws-after-head ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 44 ] ) ] , lit ( "," ) , no-attrs ) , [ 44 ] ) , < ws-after-sep ( "OptLayout" ) > ] ) , constructor ( "Grammar" , "kernel-start-symbols" , appl ( prod ( [ lit ( "start-symbols" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbols" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "kernel-start-symbols" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 115 ] ) , char-class ( [ 116 ] ) , char-class ( [ 97 ] ) , char-class ( [ 114 ] ) , char-class ( [ 116 ] ) , char-class ( [ 45 ] ) , char-class ( [ 115 ] ) , char-class ( [ 121 ] ) , char-class ( [ 109 ] ) , char-class ( [ 98 ] ) , char-class ( [ 111 ] ) , char-class ( [ 108 ] ) , char-class ( [ 115 ] ) ] , lit ( "start-symbols" ) , no-attrs ) , [ 115 , 116 , 97 , 114 , 116 , 45 , 115 , 121 , 109 , 98 , 111 , 108 , 115 ] ) , < "ws-after-start-symbols" ( "OptLayout" ) > , < "Symbols" ( "Symbols" ) > ] ) ) , constructor ( "Grammar" , "lexical-start-symbols" , appl ( prod ( [ lit ( "lexical" ) , cf ( opt ( layout ) ) , lit ( "start-symbols" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbols" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "lexical-start-symbols" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 108 ] ) , char-class ( [ 101 ] ) , char-class ( [ 120 ] ) , char-class ( [ 105 ] ) , char-class ( [ 99 ] ) , char-class ( [ 97 ] ) , char-class ( [ 108 ] ) ] , lit ( "lexical" ) , no-attrs ) , [ 108 , 101 , 120 , 105 , 99 , 97 , 108 ] ) , < "ws-after-lexical" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 115 ] ) , char-class ( [ 116 ] ) , char-class ( [ 97 ] ) , char-class ( [ 114 ] ) , char-class ( [ 116 ] ) , char-class ( [ 45 ] ) , char-class ( [ 115 ] ) , char-class ( [ 121 ] ) , char-class ( [ 109 ] ) , char-class ( [ 98 ] ) , char-class ( [ 111 ] ) , char-class ( [ 108 ] ) , char-class ( [ 115 ] ) ] , lit ( "start-symbols" ) , no-attrs ) , [ 115 , 116 , 97 , 114 , 116 , 45 , 115 , 121 , 109 , 98 , 111 , 108 , 115 ] ) , < "ws-after-start-symbols" ( "OptLayout" ) > , < "Symbols" ( "Symbols" ) > ] ) ) , constructor ( "Grammar" , "context-free-start-symbols" , appl ( prod ( [ lit ( "context-free" ) , cf ( opt ( layout ) ) , lit ( "start-symbols" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbols" ) ) ] , cf ( sort ( "Grammar" ) ) , attrs ( [ term ( cons ( "context-free-start-symbols" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 99 ] ) , char-class ( [ 111 ] ) , char-class ( [ 110 ] ) , char-class ( [ 116 ] ) , char-class ( [ 101 ] ) , char-class ( [ 120 ] ) , char-class ( [ 116 ] ) , char-class ( [ 45 ] ) , char-class ( [ 102 ] ) , char-class ( [ 114 ] ) , char-class ( [ 101 ] ) , char-class ( [ 101 ] ) ] , lit ( "context-free" ) , no-attrs ) , [ 99 , 111 , 110 , 116 , 101 , 120 , 116 , 45 , 102 , 114 , 101 , 101 ] ) , < "ws-after-context-free" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 115 ] ) , char-class ( [ 116 ] ) , char-class ( [ 97 ] ) , char-class ( [ 114 ] ) , char-class ( [ 116 ] ) , char-class ( [ 45 ] ) , char-class ( [ 115 ] ) , char-class ( [ 121 ] ) , char-class ( [ 109 ] ) , char-class ( [ 98 ] ) , char-class ( [ 111 ] ) , char-class ( [ 108 ] ) , char-class ( [ 115 ] ) ] , lit ( "start-symbols" ) , no-attrs ) , [ 115 , 116 , 97 , 114 , 116 , 45 , 115 , 121 , 109 , 98 , 111 , 108 , 115 ] ) , < "ws-after-start-symbols" ( "OptLayout" ) > , < "Symbols" ( "Symbols" ) > ] ) ) , constructor ( "Symbol" , "Bracket" , appl ( prod ( [ lit ( "(" ) , cf ( opt ( layout ) ) , cf ( sort ( "Symbol" ) ) , cf ( opt ( layout ) ) , lit ( ")" ) ] , cf ( sort ( "Symbol" ) ) , attrs ( [ bracket ] ) ) , [ appl ( prod ( [ char-class ( [ 40 ] ) ] , lit ( "(" ) , no-attrs ) , [ 40 ] ) , < "ws-after-(" ( "OptLayout" ) > , < "Symbol" ( "Symbol" ) > , < "ws-after-Symbol" ( "OptLayout" ) > , appl ( prod ( [ char-class ( [ 41 ] ) ] , lit ( ")" ) , no-attrs ) , [ 41 ] ) ] ) ) , constructor ( "Symbols" , "Default" , appl ( prod ( [ cf ( iter-star ( sort ( "Symbol" ) ) ) ] , cf ( sort ( "Symbols" ) ) , no-attrs ) , [ appl ( list ( cf ( iter-star ( sort ( "Symbol" ) ) ) ) , < "list" ( "Symbol-list" ) > ) ] ) ) , separated-list ( "Symbol-list" , "Symbol" , [ < ws-after-head ( "OptLayout" ) > ] ) , constructor ( "Lex-Layout" , "whitespace" , appl ( prod ( [ char-class ( [ range ( 9 , 10 ) , 13 , 32 ] ) ] , lex ( layout ) , attrs ( [ term ( cons ( "whitespace" ) ) ] ) ) , [ < "ch" ( char ) > ] ) ) , constructor ( "Lex-StrChar" , "newline" , appl ( prod ( [ lit ( "\\n" ) ] , lex ( sort ( "StrChar" ) ) , attrs ( [ term ( cons ( "newline" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 92 ] ) , char-class ( [ 110 ] ) ] , lit ( "\\n" ) , no-attrs ) , [ 92 , 110 ] ) ] ) ) , constructor ( "StrChar" , "Lex-to-cf" , appl ( prod ( [ lex ( sort ( "StrChar" ) ) ] , cf ( sort ( "StrChar" ) ) , no-attrs ) , [ < "StrChar" ( "Lex-StrChar" ) > ] ) ) , constructor ( "Lex-StrChar" , "tab" , appl ( prod ( [ lit ( "\\t" ) ] , lex ( sort ( "StrChar" ) ) , attrs ( [ term ( cons ( "tab" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 92 ] ) , char-class ( [ 116 ] ) ] , lit ( "\\t" ) , no-attrs ) , [ 92 , 116 ] ) ] ) ) , constructor ( "Lex-StrChar" , "quote" , appl ( prod ( [ lit ( "\\\"" ) ] , lex ( sort ( "StrChar" ) ) , attrs ( [ term ( cons ( "quote" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 92 ] ) , char-class ( [ 34 ] ) ] , lit ( "\\\"" ) , no-attrs ) , [ 92 , 34 ] ) ] ) ) , constructor ( "Lex-StrChar" , "backslash" , appl ( prod ( [ lit ( "\\\\" ) ] , lex ( sort ( "StrChar" ) ) , attrs ( [ term ( cons ( "backslash" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 92 ] ) , char-class ( [ 92 ] ) ] , lit ( "\\\\" ) , no-attrs ) , [ 92 , 92 ] ) ] ) ) , constructor ( "Lex-StrChar" , "decimal" , appl ( prod ( [ lit ( "\\" ) , char-class ( [ range ( 48 , 57 ) ] ) , char-class ( [ range ( 48 , 57 ) ] ) , char-class ( [ range ( 48 , 57 ) ] ) ] , lex ( sort ( "StrChar" ) ) , attrs ( [ term ( cons ( "decimal" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 92 ] ) ] , lit ( "\\" ) , no-attrs ) , [ 92 ] ) , < "a" ( char ) > , < "b" ( char ) > , < "c" ( char ) > ] ) ) , constructor ( "Lex-StrChar" , "normal" , appl ( prod ( [ char-class ( [ range ( 32 , 33 ) , range ( 35 , 91 ) , range ( 93 , 255 ) ] ) ] , lex ( sort ( "StrChar" ) ) , attrs ( [ term ( cons ( "normal" ) ) ] ) ) , [ < "ch" ( char ) > ] ) ) , constructor ( "Lex-StrCon" , "default" , appl ( prod ( [ char-class ( [ 34 ] ) , lex ( iter-star ( sort ( "StrChar" ) ) ) , char-class ( [ 34 ] ) ] , lex ( sort ( "StrCon" ) ) , attrs ( [ term ( cons ( "default" ) ) ] ) ) , [ 34 , appl ( list ( lex ( iter-star ( sort ( "StrChar" ) ) ) ) , < "chars" ( "Lex-StrChar-chars" ) > ) , 34 ] ) ) , constructor ( "StrCon" , "Lex-to-cf" , appl ( prod ( [ lex ( sort ( "StrCon" ) ) ] , cf ( sort ( "StrCon" ) ) , no-attrs ) , [ < "StrCon" ( "Lex-StrCon" ) > ] ) ) , list ( "Lex-StrChar-chars" , "Lex-StrChar" ) , constructor ( "Lex-NatCon" , "digits" , appl ( prod ( [ lex ( iter ( char-class ( [ range ( 48 , 57 ) ] ) ) ) ] , lex ( sort ( "NatCon" ) ) , attrs ( [ term ( cons ( "digits" ) ) ] ) ) , [ appl ( list ( lex ( iter ( char-class ( [ range ( 48 , 57 ) ] ) ) ) ) , < "list" ( chars ) > ) ] ) ) , constructor ( "NatCon" , "Lex-to-cf" , appl ( prod ( [ lex ( sort ( "NatCon" ) ) ] , cf ( sort ( "NatCon" ) ) , no-attrs ) , [ < "NatCon" ( "Lex-NatCon" ) > ] ) ) , constructor ( "Lex-IdCon" , "default" , appl ( prod ( [ char-class ( [ range ( 65 , 90 ) , range ( 97 , 122 ) ] ) , lex ( iter-star ( char-class ( [ 45 , range ( 48 , 57 ) , range ( 65 , 90 ) , range ( 97 , 122 ) ] ) ) ) ] , lex ( sort ( "IdCon" ) ) , attrs ( [ term ( cons ( "default" ) ) ] ) ) , [ < "head" ( char ) > , appl ( list ( lex ( iter-star ( char-class ( [ 45 , range ( 48 , 57 ) , range ( 65 , 90 ) , range ( 97 , 122 ) ] ) ) ) ) , < "tail" ( chars ) > ) ] ) ) , constructor ( "IdCon" , "Lex-to-cf" , appl ( prod ( [ lex ( sort ( "IdCon" ) ) ] , cf ( sort ( "IdCon" ) ) , no-attrs ) , [ < "IdCon" ( "Lex-IdCon" ) > ] ) ) , constructor ( "Lex-Layout" , "line" , appl ( prod ( [ lit ( "%%" ) , lex ( iter-star ( char-class ( [ range ( 0 , 9 ) , range ( 11 , 255 ) ] ) ) ) , lit ( "\n" ) ] , lex ( layout ) , attrs ( [ term ( cons ( "line" ) ) , term ( category ( "Comment" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 37 ] ) , char-class ( [ 37 ] ) ] , lit ( "%%" ) , no-attrs ) , [ 37 , 37 ] ) , appl ( list ( lex ( iter-star ( char-class ( [ range ( 0 , 9 ) , range ( 11 , 255 ) ] ) ) ) ) , < "line" ( chars ) > ) , appl ( prod ( [ char-class ( [ 10 ] ) ] , lit ( "\n" ) , no-attrs ) , [ 10 ] ) ] ) ) , constructor ( "Lex-Layout" , "nested" , appl ( prod ( [ lit ( "%" ) , lex ( iter ( char-class ( [ range ( 0 , 9 ) , range ( 11 , 36 ) , range ( 38 , 255 ) ] ) ) ) , lit ( "%" ) ] , lex ( layout ) , attrs ( [ term ( cons ( "nested" ) ) , term ( category ( "Comment" ) ) ] ) ) , [ appl ( prod ( [ char-class ( [ 37 ] ) ] , lit ( "%" ) , no-attrs ) , [ 37 ] ) , appl ( list ( lex ( iter ( char-class ( [ range ( 0 , 9 ) , range ( 11 , 36 ) , range ( 38 , 255 ) ] ) ) ) ) , < "content" ( chars ) > ) , appl ( prod ( [ char-class ( [ 37 ] ) ] , lit ( "%" ) , no-attrs ) , [ 37 ] ) ] ) ) ] 