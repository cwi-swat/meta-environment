[ [ Symbol
, start
, appl ( prod ( [ lit ( "<START>" ) ]
, cf ( sort ( "Symbol" ) )
, attrs ( [ id ( "Sdf2-Syntax" ) ] ) )
, [ lit ( "<START>" ) ] ) ]
, [ Symbol
, file-start
, appl ( prod ( [ lit ( "<Start>" ) ]
, cf ( sort ( "Symbol" ) )
, attrs ( [ id ( "Sdf2-Syntax" ) ] ) )
, [ lit ( "<Start>" ) ] ) ]
, [ Grammar
, lexical-priorities
, appl ( prod ( [ lit ( "lexical" )
, cf ( opt ( layout ) )
, lit ( "priorities" )
, cf ( opt ( layout ) )
, cf ( sort ( "Priorities" ) ) ]
, cf ( sort ( "Grammar" ) )
, attrs ( [ id ( "Sdf2-Syntax" ) ] ) )
, [ lit ( "lexical" )
, < "ws-after-lexical" ( Layout ) >
, lit ( "priorities" )
, < "ws-after-priorities" ( Layout ) >
, < Priorities ( Priorities ) > ] ) ]
, [ Grammar
, context-free-priorities
, appl ( prod ( [ lit ( "context-free" )
, cf ( opt ( layout ) )
, lit ( "priorities" )
, cf ( opt ( layout ) )
, cf ( sort ( "Priorities" ) ) ]
, cf ( sort ( "Grammar" ) )
, attrs ( [ id ( "Sdf2-Syntax" ) ] ) )
, [ lit ( "context-free" )
, < "ws-after-context-free" ( Layout ) >
, lit ( "priorities" )
, < "ws-after-priorities" ( Layout ) >
, < Priorities ( Priorities ) > ] ) ]
, [ Grammar
, lexical-restrictions
, appl ( prod ( [ lit ( "lexical" )
, cf ( opt ( layout ) )
, lit ( "restrictions" )
, cf ( opt ( layout ) )
, cf ( sort ( "Restrictions" ) ) ]
, cf ( sort ( "Grammar" ) )
, attrs ( [ id ( "Sdf2-Syntax" ) ] ) )
, [ lit ( "lexical" )
, < "ws-after-lexical" ( Layout ) >
, lit ( "restrictions" )
, < "ws-after-restrictions" ( Layout ) >
, < Restrictions ( Restrictions ) > ] ) ]
, [ Grammar
, context-free-restrictions
, appl ( prod ( [ lit ( "context-free" )
, cf ( opt ( layout ) )
, lit ( "restrictions" )
, cf ( opt ( layout ) )
, cf ( sort ( "Restrictions" ) ) ]
, cf ( sort ( "Grammar" ) )
, attrs ( [ id ( "Sdf2-Syntax" ) ] ) )
, [ lit ( "context-free" )
, < "ws-after-context-free" ( Layout ) >
, lit ( "restrictions" )
, < "ws-after-restrictions" ( Layout ) >
, < Restrictions ( Restrictions ) > ] ) ]
, [ SDF
, definition
, appl ( prod ( [ lit ( "definition" )
, cf ( opt ( layout ) )
, cf ( sort ( "Definition" ) ) ]
, cf ( sort ( "SDF" ) )
, attrs ( [ id ( "Sdf2-Syntax" ) ] ) )
, [ lit ( "definition" )
, < "ws-after-definition" ( Layout ) >
, < Definition ( Definition ) > ] ) ]
, [ Attributes
, attrs
, appl ( prod ( [ lit ( "{" )
, cf ( opt ( layout ) )
, cf ( iter-star-sep ( sort ( "Attribute" )
, lit ( "," ) ) )
, cf ( opt ( layout ) )
, lit ( "}" ) ]
, cf ( sort ( "Attributes" ) )
, attrs ( [ id ( "Kernel-Sdf-Syntax" ) ] ) )
, [ lit ( "{" )
, < "ws-after-{" ( Layout ) >
, < list ( Attribute-list ) >
, < ws-after-list ( Layout ) >
, lit ( "}" ) ] ) ]
, [ Attribute-list
, empty
, [  ] ]
, [ Attribute-list
, single
, [ < head ( Attribute ) > ] ]
, [ Attribute-list
, many
, [ < head ( Attribute ) >
, < ws-after-first ( Layout ) >
, lit ( < sep ( str ) > )
, < ws-after-sep ( Layout ) >
, < [ tail ( Attribute-list ) ] > ] ]
, [ Attributes
, no-attrs
, appl ( prod ( [  ]
, cf ( sort ( "Attributes" ) )
, attrs ( [ id ( "Kernel-Sdf-Syntax" ) ] ) )
, [  ] ) ]
, [ Production
, prod
, appl ( prod ( [ cf ( sort ( "Symbols" ) )
, cf ( opt ( layout ) )
, lit ( "->" )
, cf ( opt ( layout ) )
, cf ( sort ( "Symbol" ) )
, cf ( opt ( layout ) )
, cf ( sort ( "Attributes" ) ) ]
, cf ( sort ( "Production" ) )
, attrs ( [ id ( "Kernel-Sdf-Syntax" ) ] ) )
, [ < Symbols ( Symbols ) >
, < ws-after-Symbols ( Layout ) >
, lit ( "->" )
, < "ws-after-->" ( Layout ) >
, < result ( Symbol ) >
, < ws-after-result ( Layout ) >
, < Attributes ( Attributes ) > ] ) ]
, [ Productions
, Default
, appl ( prod ( [ cf ( iter-star ( sort ( "Production" ) ) ) ]
, cf ( sort ( "Productions" ) )
, attrs ( [ id ( "Kernel-Sdf-Syntax" ) ] ) )
, [ < list ( Production-list ) > ] ) ]
, [ Production-list
, empty
, [  ] ]
, [ Production-list
, single
, [ < head ( Production ) > ] ]
, [ Production-list
, many
, [ < head ( Production ) >
, < ws-after-first ( Layout ) >
, < [ tail ( Production-list ) ] > ] ]
, [ Grammar
, syntax
, appl ( prod ( [ lit ( "syntax" )
, cf ( opt ( layout ) )
, cf ( sort ( "Productions" ) ) ]
, cf ( sort ( "Grammar" ) )
, attrs ( [ id ( "Kernel-Sdf-Syntax" ) ] ) )
, [ lit ( "syntax" )
, < "ws-after-syntax" ( Layout ) >
, < Productions ( Productions ) > ] ) ]
, [ Grammar
, lexical-syntax
, appl ( prod ( [ lit ( "lexical" )
, cf ( opt ( layout ) )
, lit ( "syntax" )
, cf ( opt ( layout ) )
, cf ( sort ( "Productions" ) ) ]
, cf ( sort ( "Grammar" ) )
, attrs ( [ id ( "Basic-Sdf-Syntax" ) ] ) )
, [ lit ( "lexical" )
, < "ws-after-lexical" ( Layout ) >
, lit ( "syntax" )
, < "ws-after-syntax" ( Layout ) >
, < Productions ( Productions ) > ] ) ]
, [ Grammar
, context-free-syntax
, appl ( prod ( [ lit ( "context-free" )
, cf ( opt ( layout ) )
, lit ( "syntax" )
, cf ( opt ( layout ) )
, cf ( sort ( "Productions" ) ) ]
, cf ( sort ( "Grammar" ) )
, attrs ( [ id ( "Basic-Sdf-Syntax" ) ] ) )
, [ lit ( "context-free" )
, < "ws-after-context-free" ( Layout ) >
, lit ( "syntax" )
, < "ws-after-syntax" ( Layout ) >
, < Productions ( Productions ) > ] ) ]
, [ Grammar
, variables
, appl ( prod ( [ lit ( "variables" )
, cf ( opt ( layout ) )
, cf ( sort ( "Productions" ) ) ]
, cf ( sort ( "Grammar" ) )
, attrs ( [ id ( "Basic-Sdf-Syntax" ) ] ) )
, [ lit ( "variables" )
, < "ws-after-variables" ( Layout ) >
, < Productions ( Productions ) > ] ) ]
, [ Grammar
, lexical-variables
, appl ( prod ( [ lit ( "lexical" )
, cf ( opt ( layout ) )
, lit ( "variables" )
, cf ( opt ( layout ) )
, cf ( sort ( "Productions" ) ) ]
, cf ( sort ( "Grammar" ) )
, attrs ( [ id ( "Basic-Sdf-Syntax" ) ] ) )
, [ lit ( "lexical" )
, < "ws-after-lexical" ( Layout ) >
, lit ( "variables" )
, < "ws-after-variables" ( Layout ) >
, < Productions ( Productions ) > ] ) ]
, [ Symbol
, cf
, appl ( prod ( [ lit ( "<" )
, cf ( opt ( layout ) )
, cf ( sort ( "Symbol" ) )
, cf ( opt ( layout ) )
, lit ( "-CF" )
, cf ( opt ( layout ) )
, lit ( ">" ) ]
, cf ( sort ( "Symbol" ) )
, attrs ( [ id ( "Basic-Sdf-Syntax" ) ] ) )
, [ lit ( "<" )
, < "ws-after-<" ( Layout ) >
, < Symbol ( Symbol ) >
, < ws-after-Symbol ( Layout ) >
, lit ( "-CF" )
, < "ws-after--CF" ( Layout ) >
, lit ( ">" ) ] ) ]
, [ Symbol
, lex
, appl ( prod ( [ lit ( "<" )
, cf ( opt ( layout ) )
, cf ( sort ( "Symbol" ) )
, cf ( opt ( layout ) )
, lit ( "-LEX" )
, cf ( opt ( layout ) )
, lit ( ">" ) ]
, cf ( sort ( "Symbol" ) )
, attrs ( [ id ( "Basic-Sdf-Syntax" ) ] ) )
, [ lit ( "<" )
, < "ws-after-<" ( Layout ) >
, < Symbol ( Symbol ) >
, < ws-after-Symbol ( Layout ) >
, lit ( "-LEX" )
, < "ws-after--LEX" ( Layout ) >
, lit ( ">" ) ] ) ]
, [ Symbol
, varsym
, appl ( prod ( [ lit ( "<" )
, cf ( opt ( layout ) )
, cf ( sort ( "Symbol" ) )
, cf ( opt ( layout ) )
, lit ( "-VAR" )
, cf ( opt ( layout ) )
, lit ( ">" ) ]
, cf ( sort ( "Symbol" ) )
, attrs ( [ id ( "Basic-Sdf-Syntax" ) ] ) )
, [ lit ( "<" )
, < "ws-after-<" ( Layout ) >
, < Symbol ( Symbol ) >
, < ws-after-Symbol ( Layout ) >
, lit ( "-VAR" )
, < "ws-after--VAR" ( Layout ) >
, lit ( ">" ) ] ) ]
, [ Symbol
, layout
, appl ( prod ( [ lit ( "LAYOUT" ) ]
, cf ( sort ( "Symbol" ) )
, attrs ( [ id ( "Basic-Sdf-Syntax" ) ] ) )
, [ lit ( "LAYOUT" ) ] ) ]
, [ ModuleWord
, lex-to-cf
, appl ( prod ( [ lex ( sort ( "ModuleWord" ) ) ]
, cf ( sort ( "ModuleWord" ) )
, no-attrs )
, [ < lex ( Lexical ) > ] ) ]
, [ ModuleId
, lex-to-cf
, appl ( prod ( [ lex ( sort ( "ModuleId" ) ) ]
, cf ( sort ( "ModuleId" ) )
, no-attrs )
, [ < lex ( Lexical ) > ] ) ]
, [ Definition
, Default
, appl ( prod ( [ cf ( iter-star ( sort ( "Module" ) ) ) ]
, cf ( sort ( "Definition" ) )
, attrs ( [ id ( "Modular-Sdf-Syntax" ) ] ) )
, [ < list ( Module-list ) > ] ) ]
, [ Module-list
, empty
, [  ] ]
, [ Module-list
, single
, [ < head ( Module ) > ] ]
, [ Module-list
, many
, [ < head ( Module ) >
, < ws-after-first ( Layout ) >
, < [ tail ( Module-list ) ] > ] ]
, [ Module
, module
, appl ( prod ( [ lit ( "module" )
, cf ( opt ( layout ) )
, cf ( sort ( "ModuleName" ) )
, cf ( opt ( layout ) )
, cf ( iter-star ( sort ( "ImpSection" ) ) )
, cf ( opt ( layout ) )
, cf ( sort ( "Sections" ) ) ]
, cf ( sort ( "Module" ) )
, attrs ( [ id ( "Modular-Sdf-Syntax" ) ] ) )
, [ lit ( "module" )
, < "ws-after-module" ( Layout ) >
, < ModuleName ( ModuleName ) >
, < ws-after-ModuleName ( Layout ) >
, < list ( ImpSection-list ) >
, < ws-after-list ( Layout ) >
, < Sections ( Sections ) > ] ) ]
, [ ImpSection-list
, empty
, [  ] ]
, [ ImpSection-list
, single
, [ < head ( ImpSection ) > ] ]
, [ ImpSection-list
, many
, [ < head ( ImpSection ) >
, < ws-after-first ( Layout ) >
, < [ tail ( ImpSection-list ) ] > ] ]
, [ Section
, exports
, appl ( prod ( [ lit ( "exports" )
, cf ( opt ( layout ) )
, cf ( sort ( "Grammar" ) ) ]
, cf ( sort ( "Section" ) )
, attrs ( [ id ( "Modular-Sdf-Syntax" ) ] ) )
, [ lit ( "exports" )
, < "ws-after-exports" ( Layout ) >
, < Grammar ( Grammar ) > ] ) ]
, [ Section
, hiddens
, appl ( prod ( [ lit ( "hiddens" )
, cf ( opt ( layout ) )
, cf ( sort ( "Grammar" ) ) ]
, cf ( sort ( "Section" ) )
, attrs ( [ id ( "Modular-Sdf-Syntax" ) ] ) )
, [ lit ( "hiddens" )
, < "ws-after-hiddens" ( Layout ) >
, < Grammar ( Grammar ) > ] ) ]
, [ Sections
, Default
, appl ( prod ( [ cf ( iter-star ( sort ( "Section" ) ) ) ]
, cf ( sort ( "Sections" ) )
, attrs ( [ id ( "Modular-Sdf-Syntax" ) ] ) )
, [ < list ( Section-list ) > ] ) ]
, [ Section-list
, empty
, [  ] ]
, [ Section-list
, single
, [ < head ( Section ) > ] ]
, [ Section-list
, many
, [ < head ( Section ) >
, < ws-after-first ( Layout ) >
, < [ tail ( Section-list ) ] > ] ]
, [ ModuleName
, unparameterized
, appl ( prod ( [ cf ( sort ( "ModuleId" ) ) ]
, cf ( sort ( "ModuleName" ) )
, attrs ( [ id ( "Modular-Sdf-Syntax" ) ] ) )
, [ < ModuleId ( ModuleId ) > ] ) ]
, [ ModuleName
, parameterized
, appl ( prod ( [ cf ( sort ( "ModuleId" ) )
, cf ( opt ( layout ) )
, lit ( "[" )
, cf ( opt ( layout ) )
, cf ( sort ( "Symbols" ) )
, cf ( opt ( layout ) )
, lit ( "]" ) ]
, cf ( sort ( "ModuleName" ) )
, attrs ( [ id ( "Modular-Sdf-Syntax" ) ] ) )
, [ < ModuleId ( ModuleId ) >
, < ws-after-ModuleId ( Layout ) >
, lit ( "[" )
, < "ws-after-[" ( Layout ) >
, < params ( Symbols ) >
, < ws-after-params ( Layout ) >
, lit ( "]" ) ] ) ]
, [ Attribute
, id
, appl ( prod ( [ lit ( "id" )
, cf ( opt ( layout ) )
, lit ( "(" )
, cf ( opt ( layout ) )
, cf ( sort ( "ModuleName" ) )
, cf ( opt ( layout ) )
, lit ( ")" ) ]
, cf ( sort ( "Attribute" ) )
, attrs ( [ id ( "Modular-Sdf-Syntax" ) ] ) )
, [ lit ( "id" )
, < "ws-after-id" ( Layout ) >
, lit ( "(" )
, < "ws-after-(" ( Layout ) >
, < ModuleName ( ModuleName ) >
, < ws-after-ModuleName ( Layout ) >
, lit ( ")" ) ] ) ]
, [ ImpSection
, imports
, appl ( prod ( [ lit ( "imports" )
, cf ( opt ( layout ) )
, cf ( sort ( "Imports" ) ) ]
, cf ( sort ( "ImpSection" ) )
, attrs ( [ id ( "Modular-Sdf-Syntax" ) ] ) )
, [ lit ( "imports" )
, < "ws-after-imports" ( Layout ) >
, < list ( Imports ) > ] ) ]
, [ Grammar
, imp-section
, appl ( prod ( [ cf ( sort ( "ImpSection" ) ) ]
, cf ( sort ( "Grammar" ) )
, attrs ( [ id ( "Modular-Sdf-Syntax" ) ] ) )
, [ < ImpSection ( ImpSection ) > ] ) ]
, [ Imports
, Default
, appl ( prod ( [ cf ( iter-star ( sort ( "Import" ) ) ) ]
, cf ( sort ( "Imports" ) )
, attrs ( [ id ( "Modular-Sdf-Syntax" ) ] ) )
, [ < list ( Import-list ) > ] ) ]
, [ Import-list
, empty
, [  ] ]
, [ Import-list
, single
, [ < head ( Import ) > ] ]
, [ Import-list
, many
, [ < head ( Import ) >
, < ws-after-first ( Layout ) >
, < [ tail ( Import-list ) ] > ] ]
, [ Import
, module
, appl ( prod ( [ cf ( sort ( "ModuleName" ) ) ]
, cf ( sort ( "Import" ) )
, attrs ( [ id ( "Modular-Sdf-Syntax" ) ] ) )
, [ < ModuleName ( ModuleName ) > ] ) ]
, [ Import
, renamed-module
, appl ( prod ( [ cf ( sort ( "ModuleName" ) )
, cf ( opt ( layout ) )
, cf ( sort ( "Renamings" ) ) ]
, cf ( sort ( "Import" ) )
, attrs ( [ id ( "Modular-Sdf-Syntax" ) ] ) )
, [ < ModuleName ( ModuleName ) >
, < ws-after-ModuleName ( Layout ) >
, < Renamings ( Renamings ) > ] ) ]
, [ Import
, Bracket
, appl ( prod ( [ lit ( "(" )
, cf ( opt ( layout ) )
, cf ( sort ( "Import" ) )
, cf ( opt ( layout ) )
, lit ( ")" ) ]
, cf ( sort ( "Import" ) )
, attrs ( [ atr ( "bracket" )
, id ( "Modular-Sdf-Syntax" ) ] ) )
, [ lit ( "(" )
, < "ws-after-(" ( Layout ) >
, < Import ( Import ) >
, < ws-after-Import ( Layout ) >
, lit ( ")" ) ] ) ]
, [ Symbol
, empty
, appl ( prod ( [ lit ( "(" )
, cf ( opt ( layout ) )
, lit ( ")" ) ]
, cf ( sort ( "Symbol" ) )
, attrs ( [ id ( "Regular-Sdf-Syntax" ) ] ) )
, [ lit ( "(" )
, < "ws-after-(" ( Layout ) >
, lit ( ")" ) ] ) ]
, [ Symbol
, seq
, appl ( prod ( [ lit ( "(" )
, cf ( opt ( layout ) )
, cf ( sort ( "Symbol" ) )
, cf ( opt ( layout ) )
, cf ( iter ( sort ( "Symbol" ) ) )
, cf ( opt ( layout ) )
, lit ( ")" ) ]
, cf ( sort ( "Symbol" ) )
, attrs ( [ id ( "Regular-Sdf-Syntax" ) ] ) )
, [ lit ( "(" )
, < "ws-after-(" ( Layout ) >
, < head ( Symbol ) >
, < ws-after-head ( Layout ) >
, < tail ( Symbol-tail ) >
, < ws-after-tail ( Layout ) >
, lit ( ")" ) ] ) ]
, [ Symbol-tail
, single
, [ < head ( Symbol ) > ] ]
, [ Symbol-tail
, many
, [ < head ( Symbol ) >
, < ws-after-first ( Layout ) >
, < [ tail ( Symbol-tail ) ] > ] ]
, [ Symbol
, opt
, appl ( prod ( [ cf ( sort ( "Symbol" ) )
, cf ( opt ( layout ) )
, lit ( "?" ) ]
, cf ( sort ( "Symbol" ) )
, attrs ( [ id ( "Regular-Sdf-Syntax" ) ] ) )
, [ < Symbol ( Symbol ) >
, < ws-after-Symbol ( Layout ) >
, lit ( "?" ) ] ) ]
, [ Symbol
, iter
, appl ( prod ( [ cf ( sort ( "Symbol" ) )
, cf ( opt ( layout ) )
, lit ( "+" ) ]
, cf ( sort ( "Symbol" ) )
, attrs ( [ id ( "Regular-Sdf-Syntax" ) ] ) )
, [ < Symbol ( Symbol ) >
, < ws-after-Symbol ( Layout ) >
, lit ( "+" ) ] ) ]
, [ Symbol
, iter-star
, appl ( prod ( [ cf ( sort ( "Symbol" ) )
, cf ( opt ( layout ) )
, lit ( "*" ) ]
, cf ( sort ( "Symbol" ) )
, attrs ( [ id ( "Regular-Sdf-Syntax" ) ] ) )
, [ < Symbol ( Symbol ) >
, < ws-after-Symbol ( Layout ) >
, lit ( "*" ) ] ) ]
, [ Symbol
, iter-sep
, appl ( prod ( [ lit ( "{" )
, cf ( opt ( layout ) )
, cf ( sort ( "Symbol" ) )
, cf ( opt ( layout ) )
, cf ( sort ( "Symbol" ) )
, cf ( opt ( layout ) )
, lit ( "}" )
, cf ( opt ( layout ) )
, lit ( "+" ) ]
, cf ( sort ( "Symbol" ) )
, attrs ( [ id ( "Regular-Sdf-Syntax" ) ] ) )
, [ lit ( "{" )
, < "ws-after-{" ( Layout ) >
, < Symbol ( Symbol ) >
, < ws-after-Symbol ( Layout ) >
, < sep ( Symbol ) >
, < ws-after-sep ( Layout ) >
, lit ( "}" )
, < "ws-after-}" ( Layout ) >
, lit ( "+" ) ] ) ]
, [ Symbol
, iter-star-sep
, appl ( prod ( [ lit ( "{" )
, cf ( opt ( layout ) )
, cf ( sort ( "Symbol" ) )
, cf ( opt ( layout ) )
, cf ( sort ( "Symbol" ) )
, cf ( opt ( layout ) )
, lit ( "}" )
, cf ( opt ( layout ) )
, lit ( "*" ) ]
, cf ( sort ( "Symbol" ) )
, attrs ( [ id ( "Regular-Sdf-Syntax" ) ] ) )
, [ lit ( "{" )
, < "ws-after-{" ( Layout ) >
, < Symbol ( Symbol ) >
, < ws-after-Symbol ( Layout ) >
, < sep ( Symbol ) >
, < ws-after-sep ( Layout ) >
, lit ( "}" )
, < "ws-after-}" ( Layout ) >
, lit ( "*" ) ] ) ]
, [ Symbol
, iter-n
, appl ( prod ( [ cf ( sort ( "Symbol" ) )
, cf ( opt ( layout ) )
, cf ( sort ( "NatCon" ) )
, cf ( opt ( layout ) )
, lit ( "+" ) ]
, cf ( sort ( "Symbol" ) )
, attrs ( [ id ( "Regular-Sdf-Syntax" ) ] ) )
, [ < Symbol ( Symbol ) >
, < ws-after-Symbol ( Layout ) >
, < n ( NatCon ) >
, < ws-after-n ( Layout ) >
, lit ( "+" ) ] ) ]
, [ Symbol
, iter-sep-n
, appl ( prod ( [ lit ( "{" )
, cf ( opt ( layout ) )
, cf ( sort ( "Symbol" ) )
, cf ( opt ( layout ) )
, cf ( sort ( "Symbol" ) )
, cf ( opt ( layout ) )
, lit ( "}" )
, cf ( opt ( layout ) )
, cf ( sort ( "NatCon" ) )
, cf ( opt ( layout ) )
, lit ( "+" ) ]
, cf ( sort ( "Symbol" ) )
, attrs ( [ id ( "Regular-Sdf-Syntax" ) ] ) )
, [ lit ( "{" )
, < "ws-after-{" ( Layout ) >
, < Symbol ( Symbol ) >
, < ws-after-Symbol ( Layout ) >
, < sep ( Symbol ) >
, < ws-after-sep ( Layout ) >
, lit ( "}" )
, < "ws-after-}" ( Layout ) >
, < n ( NatCon ) >
, < ws-after-n ( Layout ) >
, lit ( "+" ) ] ) ]
, [ Symbol
, set
, appl ( prod ( [ lit ( "Set" )
, cf ( opt ( layout ) )
, lit ( "[" )
, cf ( opt ( layout ) )
, cf ( sort ( "Symbol" ) )
, cf ( opt ( layout ) )
, lit ( "]" ) ]
, cf ( sort ( "Symbol" ) )
, attrs ( [ id ( "Regular-Sdf-Syntax" ) ] ) )
, [ lit ( "Set" )
, < "ws-after-Set" ( Layout ) >
, lit ( "[" )
, < "ws-after-[" ( Layout ) >
, < Symbol ( Symbol ) >
, < ws-after-Symbol ( Layout ) >
, lit ( "]" ) ] ) ]
, [ Symbol
, pair
, appl ( prod ( [ cf ( sort ( "Symbol" ) )
, cf ( opt ( layout ) )
, lit ( "#" )
, cf ( opt ( layout ) )
, cf ( sort ( "Symbol" ) ) ]
, cf ( sort ( "Symbol" ) )
, attrs ( [ atr ( "right" )
, id ( "Regular-Sdf-Syntax" ) ] ) )
, [ < left ( Symbol ) >
, < ws-after-left ( Layout ) >
, lit ( "#" )
, < "ws-after-#" ( Layout ) >
, < right ( Symbol ) > ] ) ]
, [ Symbol
, func
, appl ( prod ( [ lit ( "(" )
, cf ( opt ( layout ) )
, cf ( sort ( "Symbols" ) )
, cf ( opt ( layout ) )
, lit ( "=>" )
, cf ( opt ( layout ) )
, cf ( sort ( "Symbol" ) )
, cf ( opt ( layout ) )
, lit ( ")" ) ]
, cf ( sort ( "Symbol" ) )
, attrs ( [ id ( "Regular-Sdf-Syntax" ) ] ) )
, [ lit ( "(" )
, < "ws-after-(" ( Layout ) >
, < arguments ( Symbols ) >
, < ws-after-arguments ( Layout ) >
, lit ( "=>" )
, < "ws-after-=>" ( Layout ) >
, < results ( Symbol ) >
, < ws-after-results ( Layout ) >
, lit ( ")" ) ] ) ]
, [ Symbol
, alt
, appl ( prod ( [ cf ( sort ( "Symbol" ) )
, cf ( opt ( layout ) )
, lit ( "|" )
, cf ( opt ( layout ) )
, cf ( sort ( "Symbol" ) ) ]
, cf ( sort ( "Symbol" ) )
, attrs ( [ atr ( "right" )
, id ( "Regular-Sdf-Syntax" ) ] ) )
, [ < left ( Symbol ) >
, < ws-after-left ( Layout ) >
, lit ( "|" )
, < "ws-after-|" ( Layout ) >
, < right ( Symbol ) > ] ) ]
, [ Symbol
, perm
, appl ( prod ( [ lit ( "<<" )
, cf ( opt ( layout ) )
, cf ( sort ( "Symbols" ) )
, cf ( opt ( layout ) )
, lit ( ">>" ) ]
, cf ( sort ( "Symbol" ) )
, attrs ( [ id ( "Regular-Sdf-Syntax" ) ] ) )
, [ lit ( "<<" )
, < "ws-after-<<" ( Layout ) >
, < Symbols ( Symbols ) >
, < ws-after-Symbols ( Layout ) >
, lit ( ">>" ) ] ) ]
, [ Associativity
, left
, appl ( prod ( [ lit ( "left" ) ]
, cf ( sort ( "Associativity" ) )
, attrs ( [ id ( "Priority-Sdf-Syntax" ) ] ) )
, [ lit ( "left" ) ] ) ]
, [ Associativity
, right
, appl ( prod ( [ lit ( "right" ) ]
, cf ( sort ( "Associativity" ) )
, attrs ( [ id ( "Priority-Sdf-Syntax" ) ] ) )
, [ lit ( "right" ) ] ) ]
, [ Associativity
, non-assoc
, appl ( prod ( [ lit ( "non-assoc" ) ]
, cf ( sort ( "Associativity" ) )
, attrs ( [ id ( "Priority-Sdf-Syntax" ) ] ) )
, [ lit ( "non-assoc" ) ] ) ]
, [ Associativity
, assoc
, appl ( prod ( [ lit ( "assoc" ) ]
, cf ( sort ( "Associativity" ) )
, attrs ( [ id ( "Priority-Sdf-Syntax" ) ] ) )
, [ lit ( "assoc" ) ] ) ]
, [ Attribute
, bracket
, appl ( prod ( [ lit ( "bracket" ) ]
, cf ( sort ( "Attribute" ) )
, attrs ( [ id ( "Priority-Sdf-Syntax" ) ] ) )
, [ lit ( "bracket" ) ] ) ]
, [ Attribute
, atr
, appl ( prod ( [ cf ( sort ( "Associativity" ) ) ]
, cf ( sort ( "Attribute" ) )
, attrs ( [ id ( "Priority-Sdf-Syntax" ) ] ) )
, [ < Associativity ( Associativity ) > ] ) ]
, [ Group
, simple-group
, appl ( prod ( [ cf ( sort ( "Production" ) ) ]
, cf ( sort ( "Group" ) )
, attrs ( [ id ( "Priority-Sdf-Syntax" ) ] ) )
, [ < Production ( Production ) > ] ) ]
, [ Group
, prods-group
, appl ( prod ( [ lit ( "{" )
, cf ( opt ( layout ) )
, cf ( sort ( "Productions" ) )
, cf ( opt ( layout ) )
, lit ( "}" ) ]
, cf ( sort ( "Group" ) )
, attrs ( [ id ( "Priority-Sdf-Syntax" ) ] ) )
, [ lit ( "{" )
, < "ws-after-{" ( Layout ) >
, < Productions ( Productions ) >
, < ws-after-Productions ( Layout ) >
, lit ( "}" ) ] ) ]
, [ Group
, assoc-group
, appl ( prod ( [ lit ( "{" )
, cf ( opt ( layout ) )
, cf ( sort ( "Associativity" ) )
, cf ( opt ( layout ) )
, lit ( ":" )
, cf ( opt ( layout ) )
, cf ( sort ( "Productions" ) )
, cf ( opt ( layout ) )
, lit ( "}" ) ]
, cf ( sort ( "Group" ) )
, attrs ( [ id ( "Priority-Sdf-Syntax" ) ] ) )
, [ lit ( "{" )
, < "ws-after-{" ( Layout ) >
, < Associativity ( Associativity ) >
, < ws-after-Associativity ( Layout ) >
, lit ( ":" )
, < "ws-after-:" ( Layout ) >
, < Productions ( Productions ) >
, < ws-after-Productions ( Layout ) >
, lit ( "}" ) ] ) ]
, [ Priority
, chain
, appl ( prod ( [ cf ( iter-sep ( sort ( "Group" )
, lit ( ">" ) ) ) ]
, cf ( sort ( "Priority" ) )
, attrs ( [ id ( "Priority-Sdf-Syntax" ) ] ) )
, [ < list ( Group-list ) > ] ) ]
, [ Group-list
, single
, [ < head ( Group ) > ] ]
, [ Group-list
, many
, [ < head ( Group ) >
, < ws-after-first ( Layout ) >
, lit ( < sep ( str ) > )
, < ws-after-sep ( Layout ) >
, < [ tail ( Group-list ) ] > ] ]
, [ Priority
, assoc
, appl ( prod ( [ cf ( sort ( "Group" ) )
, cf ( opt ( layout ) )
, cf ( sort ( "Associativity" ) )
, cf ( opt ( layout ) )
, cf ( sort ( "Group" ) ) ]
, cf ( sort ( "Priority" ) )
, attrs ( [ id ( "Priority-Sdf-Syntax" ) ] ) )
, [ < left ( Group ) >
, < ws-after-left ( Layout ) >
, < Associativity ( Associativity ) >
, < ws-after-Associativity ( Layout ) >
, < right ( Group ) > ] ) ]
, [ Priorities
, Default
, appl ( prod ( [ cf ( iter-star-sep ( sort ( "Priority" )
, lit ( "," ) ) ) ]
, cf ( sort ( "Priorities" ) )
, attrs ( [ id ( "Priority-Sdf-Syntax" ) ] ) )
, [ < list ( Priority-list ) > ] ) ]
, [ Priority-list
, empty
, [  ] ]
, [ Priority-list
, single
, [ < head ( Priority ) > ] ]
, [ Priority-list
, many
, [ < head ( Priority ) >
, < ws-after-first ( Layout ) >
, lit ( < sep ( str ) > )
, < ws-after-sep ( Layout ) >
, < [ tail ( Priority-list ) ] > ] ]
, [ Grammar
, priorities
, appl ( prod ( [ lit ( "priorities" )
, cf ( opt ( layout ) )
, cf ( sort ( "Priorities" ) ) ]
, cf ( sort ( "Grammar" ) )
, attrs ( [ id ( "Priority-Sdf-Syntax" ) ] ) )
, [ lit ( "priorities" )
, < "ws-after-priorities" ( Layout ) >
, < Priorities ( Priorities ) > ] ) ]
, [ Symbol
, char-class
, appl ( prod ( [ cf ( sort ( "CharClass" ) ) ]
, cf ( sort ( "Symbol" ) )
, attrs ( [ id ( "CC-Sdf-Syntax" ) ] ) )
, [ < CharClass ( CharClass ) > ] ) ]
, [ Sort
, lex-to-cf
, appl ( prod ( [ lex ( sort ( "Sort" ) ) ]
, cf ( sort ( "Sort" ) )
, no-attrs )
, [ < lex ( Lexical ) > ] ) ]
, [ Symbol
, sort
, appl ( prod ( [ cf ( sort ( "Sort" ) ) ]
, cf ( sort ( "Symbol" ) )
, attrs ( [ id ( "Sorts-Sdf-Syntax" ) ] ) )
, [ < Sort ( Sort ) > ] ) ]
, [ Grammar
, sorts
, appl ( prod ( [ lit ( "sorts" )
, cf ( opt ( layout ) )
, cf ( sort ( "Symbols" ) ) ]
, cf ( sort ( "Grammar" ) )
, attrs ( [ id ( "Sorts-Sdf-Syntax" ) ] ) )
, [ lit ( "sorts" )
, < "ws-after-sorts" ( Layout ) >
, < Symbols ( Symbols ) > ] ) ]
, [ UQLiteral
, lex-to-cf
, appl ( prod ( [ lex ( sort ( "UQLiteral" ) ) ]
, cf ( sort ( "UQLiteral" ) )
, no-attrs )
, [ < lex ( Lexical ) > ] ) ]
, [ Literal
, uqlit
, appl ( prod ( [ cf ( sort ( "UQLiteral" ) ) ]
, cf ( sort ( "Literal" ) )
, attrs ( [ id ( "Literals-Sdf-Syntax" ) ] ) )
, [ < UQLiteral ( UQLiteral ) > ] ) ]
, [ Symbol
, lit
, appl ( prod ( [ cf ( sort ( "Literal" ) ) ]
, cf ( sort ( "Symbol" ) )
, attrs ( [ id ( "Literals-Sdf-Syntax" ) ] ) )
, [ < Literal ( Literal ) > ] ) ]
, [ Production
, prod-fun
, appl ( prod ( [ cf ( sort ( "Literal" ) )
, cf ( opt ( layout ) )
, lit ( "(" )
, cf ( opt ( layout ) )
, cf ( iter-star-sep ( sort ( "Symbol" )
, lit ( "," ) ) )
, cf ( opt ( layout ) )
, lit ( ")" )
, cf ( opt ( layout ) )
, lit ( "->" )
, cf ( opt ( layout ) )
, cf ( sort ( "Symbol" ) )
, cf ( opt ( layout ) )
, cf ( sort ( "Attributes" ) ) ]
, cf ( sort ( "Production" ) )
, attrs ( [ atr ( "avoid" )
, id ( "Literals-Sdf-Syntax" ) ] ) )
, [ < function-symbol ( Literal ) >
, < ws-after-function-symbol ( Layout ) >
, lit ( "(" )
, < "ws-after-(" ( Layout ) >
, < arguments ( Symbol-arguments ) >
, < ws-after-arguments ( Layout ) >
, lit ( ")" )
, < "ws-after-)" ( Layout ) >
, lit ( "->" )
, < "ws-after-->" ( Layout ) >
, < result ( Symbol ) >
, < ws-after-result ( Layout ) >
, < Attributes ( Attributes ) > ] ) ]
, [ Symbol-arguments
, empty
, [  ] ]
, [ Symbol-arguments
, single
, [ < head ( Symbol ) > ] ]
, [ Symbol-arguments
, many
, [ < head ( Symbol ) >
, < ws-after-first ( Layout ) >
, lit ( < sep ( str ) > )
, < ws-after-sep ( Layout ) >
, < [ tail ( Symbol-arguments ) ] > ] ]
, [ Symbol
, label
, appl ( prod ( [ cf ( sort ( "Literal" ) )
, cf ( opt ( layout ) )
, lit ( ":" )
, cf ( opt ( layout ) )
, cf ( sort ( "Symbol" ) ) ]
, cf ( sort ( "Symbol" ) )
, attrs ( [ id ( "Label-Sdf-Syntax" ) ] ) )
, [ < label ( Literal ) >
, < ws-after-label ( Layout ) >
, lit ( ":" )
, < "ws-after-:" ( Layout ) >
, < Symbol ( Symbol ) > ] ) ]
, [ Attribute
, cons
, appl ( prod ( [ lit ( "cons" )
, cf ( opt ( layout ) )
, lit ( "(" )
, cf ( opt ( layout ) )
, cf ( sort ( "ATerm" ) )
, cf ( opt ( layout ) )
, lit ( ")" ) ]
, cf ( sort ( "Attribute" ) )
, attrs ( [ id ( "Label-Sdf-Syntax" ) ] ) )
, [ lit ( "cons" )
, < "ws-after-cons" ( Layout ) >
, lit ( "(" )
, < "ws-after-(" ( Layout ) >
, < term ( ATerm ) >
, < ws-after-term ( Layout ) >
, lit ( ")" ) ] ) ]
, [ Attribute
, constructor
, appl ( prod ( [ lit ( "constructor" ) ]
, cf ( sort ( "Attribute" ) )
, attrs ( [ id ( "Label-Sdf-Syntax" ) ] ) )
, [ lit ( "constructor" ) ] ) ]
, [ Attribute
, memo
, appl ( prod ( [ lit ( "memo" ) ]
, cf ( sort ( "Attribute" ) )
, attrs ( [ id ( "Label-Sdf-Syntax" ) ] ) )
, [ lit ( "memo" ) ] ) ]
, [ Attribute
, traverse
, appl ( prod ( [ lit ( "traverse" ) ]
, cf ( sort ( "Attribute" ) )
, attrs ( [ id ( "Label-Sdf-Syntax" ) ] ) )
, [ lit ( "traverse" ) ] ) ]
, [ Lookahead
, char-class
, appl ( prod ( [ cf ( sort ( "CharClass" ) ) ]
, cf ( sort ( "Lookahead" ) )
, attrs ( [ id ( "Restrictions-Sdf-Syntax" ) ] ) )
, [ < CharClass ( CharClass ) > ] ) ]
, [ Lookahead
, seq
, appl ( prod ( [ cf ( sort ( "CharClass" ) )
, cf ( opt ( layout ) )
, lit ( "." )
, cf ( opt ( layout ) )
, cf ( sort ( "Lookaheads" ) ) ]
, cf ( sort ( "Lookahead" ) )
, attrs ( [ id ( "Restrictions-Sdf-Syntax" ) ] ) )
, [ < head ( CharClass ) >
, < ws-after-head ( Layout ) >
, lit ( "." )
, < "ws-after-." ( Layout ) >
, < tail ( Lookaheads ) > ] ) ]
, [ Lookaheads
, single
, appl ( prod ( [ cf ( sort ( "Lookahead" ) ) ]
, cf ( sort ( "Lookaheads" ) )
, attrs ( [ id ( "Restrictions-Sdf-Syntax" ) ] ) )
, [ < Lookahead ( Lookahead ) > ] ) ]
, [ Lookaheads
, alt
, appl ( prod ( [ cf ( sort ( "Lookaheads" ) )
, cf ( opt ( layout ) )
, lit ( "|" )
, cf ( opt ( layout ) )
, cf ( sort ( "Lookaheads" ) ) ]
, cf ( sort ( "Lookaheads" ) )
, attrs ( [ atr ( "right" )
, id ( "Restrictions-Sdf-Syntax" ) ] ) )
, [ < left ( Lookaheads ) >
, < ws-after-left ( Layout ) >
, lit ( "|" )
, < "ws-after-|" ( Layout ) >
, < right ( Lookaheads ) > ] ) ]
, [ Lookaheads
, Bracket
, appl ( prod ( [ lit ( "(" )
, cf ( opt ( layout ) )
, cf ( sort ( "Lookaheads" ) )
, cf ( opt ( layout ) )
, lit ( ")" ) ]
, cf ( sort ( "Lookaheads" ) )
, attrs ( [ atr ( "bracket" )
, id ( "Restrictions-Sdf-Syntax" ) ] ) )
, [ lit ( "(" )
, < "ws-after-(" ( Layout ) >
, < Lookaheads ( Lookaheads ) >
, < ws-after-Lookaheads ( Layout ) >
, lit ( ")" ) ] ) ]
, [ Lookaheads
, list
, appl ( prod ( [ lit ( "[[" )
, cf ( opt ( layout ) )
, cf ( iter-star-sep ( sort ( "Lookahead" )
, lit ( "," ) ) )
, cf ( opt ( layout ) )
, lit ( "]]" ) ]
, cf ( sort ( "Lookaheads" ) )
, attrs ( [ id ( "Restrictions-Sdf-Syntax" ) ] ) )
, [ lit ( "[[" )
, < "ws-after-[[" ( Layout ) >
, < list ( Lookahead-list ) >
, < ws-after-list ( Layout ) >
, lit ( "]]" ) ] ) ]
, [ Lookahead-list
, empty
, [  ] ]
, [ Lookahead-list
, single
, [ < head ( Lookahead ) > ] ]
, [ Lookahead-list
, many
, [ < head ( Lookahead ) >
, < ws-after-first ( Layout ) >
, lit ( < sep ( str ) > )
, < ws-after-sep ( Layout ) >
, < [ tail ( Lookahead-list ) ] > ] ]
, [ Restriction
, follow
, appl ( prod ( [ cf ( sort ( "Symbols" ) )
, cf ( opt ( layout ) )
, lit ( "-/-" )
, cf ( opt ( layout ) )
, cf ( sort ( "Lookaheads" ) ) ]
, cf ( sort ( "Restriction" ) )
, attrs ( [ id ( "Restrictions-Sdf-Syntax" ) ] ) )
, [ < Symbols ( Symbols ) >
, < ws-after-Symbols ( Layout ) >
, lit ( "-/-" )
, < "ws-after--/-" ( Layout ) >
, < Lookaheads ( Lookaheads ) > ] ) ]
, [ Restrictions
, Default
, appl ( prod ( [ cf ( iter-star ( sort ( "Restriction" ) ) ) ]
, cf ( sort ( "Restrictions" ) )
, attrs ( [ id ( "Restrictions-Sdf-Syntax" ) ] ) )
, [ < list ( Restriction-list ) > ] ) ]
, [ Restriction-list
, empty
, [  ] ]
, [ Restriction-list
, single
, [ < head ( Restriction ) > ] ]
, [ Restriction-list
, many
, [ < head ( Restriction ) >
, < ws-after-first ( Layout ) >
, < [ tail ( Restriction-list ) ] > ] ]
, [ Grammar
, restrictions
, appl ( prod ( [ lit ( "restrictions" )
, cf ( opt ( layout ) )
, cf ( sort ( "Restrictions" ) ) ]
, cf ( sort ( "Grammar" ) )
, attrs ( [ id ( "Restrictions-Sdf-Syntax" ) ] ) )
, [ lit ( "restrictions" )
, < "ws-after-restrictions" ( Layout ) >
, < Restrictions ( Restrictions ) > ] ) ]
, [ Attribute
, reject
, appl ( prod ( [ lit ( "reject" ) ]
, cf ( sort ( "Attribute" ) )
, attrs ( [ id ( "Restrictions-Sdf-Syntax" ) ] ) )
, [ lit ( "reject" ) ] ) ]
, [ Attribute
, prefer
, appl ( prod ( [ lit ( "prefer" ) ]
, cf ( sort ( "Attribute" ) )
, attrs ( [ id ( "Restrictions-Sdf-Syntax" ) ] ) )
, [ lit ( "prefer" ) ] ) ]
, [ Attribute
, avoid
, appl ( prod ( [ lit ( "avoid" ) ]
, cf ( sort ( "Attribute" ) )
, attrs ( [ id ( "Restrictions-Sdf-Syntax" ) ] ) )
, [ lit ( "avoid" ) ] ) ]
, [ Grammar
, aliases
, appl ( prod ( [ lit ( "aliases" )
, cf ( opt ( layout ) )
, cf ( sort ( "Aliases" ) ) ]
, cf ( sort ( "Grammar" ) )
, attrs ( [ id ( "Alias-Sdf-Syntax" ) ] ) )
, [ lit ( "aliases" )
, < "ws-after-aliases" ( Layout ) >
, < Aliases ( Aliases ) > ] ) ]
, [ Alias
, alias
, appl ( prod ( [ cf ( sort ( "Symbol" ) )
, cf ( opt ( layout ) )
, lit ( "->" )
, cf ( opt ( layout ) )
, cf ( sort ( "Symbol" ) ) ]
, cf ( sort ( "Alias" ) )
, attrs ( [ id ( "Alias-Sdf-Syntax" ) ] ) )
, [ < Symbol ( Symbol ) >
, < ws-after-Symbol ( Layout ) >
, lit ( "->" )
, < ws-after-arrow ( Layout ) >
, < alias ( Symbol ) > ] ) ]
, [ Aliases
, Default
, appl ( prod ( [ cf ( iter-star ( sort ( "Alias" ) ) ) ]
, cf ( sort ( "Aliases" ) )
, attrs ( [ id ( "Alias-Sdf-Syntax" ) ] ) )
, [ < list ( Alias-list ) > ] ) ]
, [ Alias-list
, empty
, [  ] ]
, [ Alias-list
, single
, [ < head ( Alias ) > ] ]
, [ Alias-list
, many
, [ < head ( Alias ) >
, < ws-after-first ( Layout ) >
, < [ tail ( Alias-list ) ] > ] ]
, [ Symbol
, Bracket
, appl ( prod ( [ lit ( "(" )
, cf ( opt ( layout ) )
, cf ( sort ( "Symbol" ) )
, cf ( opt ( layout ) )
, lit ( ")" ) ]
, cf ( sort ( "Symbol" ) )
, attrs ( [ atr ( "bracket" )
, id ( "Symbols" ) ] ) )
, [ lit ( "(" )
, < "ws-after-(" ( Layout ) >
, < Symbol ( Symbol ) >
, < ws-after-Symbol ( Layout ) >
, lit ( ")" ) ] ) ]
, [ Symbols
, Default
, appl ( prod ( [ cf ( iter-star ( sort ( "Symbol" ) ) ) ]
, cf ( sort ( "Symbols" ) )
, attrs ( [ id ( "Symbols" ) ] ) )
, [ < list ( Symbol-list ) > ] ) ]
, [ Symbol-list
, empty
, [  ] ]
, [ Symbol-list
, single
, [ < head ( Symbol ) > ] ]
, [ Symbol-list
, many
, [ < head ( Symbol ) >
, < ws-after-first ( Layout ) >
, < [ tail ( Symbol-list ) ] > ] ]
, [ Grammar
, empty-grammar
, appl ( prod ( [ lit ( "(/)" ) ]
, cf ( sort ( "Grammar" ) )
, attrs ( [ id ( "Grammar-Syntax" ) ] ) )
, [ lit ( "(/)" ) ] ) ]
, [ Grammar
, conc-grammars
, appl ( prod ( [ cf ( sort ( "Grammar" ) )
, cf ( opt ( layout ) )
, cf ( sort ( "Grammar" ) ) ]
, cf ( sort ( "Grammar" ) )
, attrs ( [ atr ( "assoc" )
, id ( "Grammar-Syntax" ) ] ) )
, [ < left ( Grammar ) >
, < ws-after-left ( Layout ) >
, < right ( Grammar ) > ] ) ]
, [ Grammar
, Bracket
, appl ( prod ( [ lit ( "(" )
, cf ( opt ( layout ) )
, cf ( sort ( "Grammar" ) )
, cf ( opt ( layout ) )
, lit ( ")" ) ]
, cf ( sort ( "Grammar" ) )
, attrs ( [ atr ( "bracket" )
, id ( "Grammar-Syntax" ) ] ) )
, [ lit ( "(" )
, < "ws-after-(" ( Layout ) >
, < Grammar ( Grammar ) >
, < ws-after-Grammar ( Layout ) >
, lit ( ")" ) ] ) ]
, [ Renamings
, renamings
, appl ( prod ( [ lit ( "[" )
, cf ( opt ( layout ) )
, cf ( iter-star ( sort ( "Renaming" ) ) )
, cf ( opt ( layout ) )
, lit ( "]" ) ]
, cf ( sort ( "Renamings" ) )
, attrs ( [ id ( "Renaming-Sdf-Syntax" ) ] ) )
, [ lit ( "[" )
, < "ws-after-[" ( Layout ) >
, < list ( Renaming-list ) >
, < ws-after-list ( Layout ) >
, lit ( "]" ) ] ) ]
, [ Renaming-list
, empty
, [  ] ]
, [ Renaming-list
, single
, [ < head ( Renaming ) > ] ]
, [ Renaming-list
, many
, [ < head ( Renaming ) >
, < ws-after-first ( Layout ) >
, < [ tail ( Renaming-list ) ] > ] ]
, [ Renaming
, symbol
, appl ( prod ( [ cf ( sort ( "Symbol" ) )
, cf ( opt ( layout ) )
, lit ( "=>" )
, cf ( opt ( layout ) )
, cf ( sort ( "Symbol" ) ) ]
, cf ( sort ( "Renaming" ) )
, attrs ( [ id ( "Renaming-Sdf-Syntax" ) ] ) )
, [ < from ( Symbol ) >
, < ws-after-from ( Layout ) >
, lit ( "=>" )
, < "ws-after-=>" ( Layout ) >
, < to ( Symbol ) > ] ) ]
, [ Renaming
, production
, appl ( prod ( [ cf ( sort ( "Production" ) )
, cf ( opt ( layout ) )
, lit ( "=>" )
, cf ( opt ( layout ) )
, cf ( sort ( "Production" ) ) ]
, cf ( sort ( "Renaming" ) )
, attrs ( [ id ( "Renaming-Sdf-Syntax" ) ] ) )
, [ < from ( Production ) >
, < ws-after-from ( Layout ) >
, lit ( "=>" )
, < "ws-after-=>" ( Layout ) >
, < to ( Production ) > ] ) ]
, [ NatCon
, lex-to-cf
, appl ( prod ( [ lex ( sort ( "NatCon" ) ) ]
, cf ( sort ( "NatCon" ) )
, no-attrs )
, [ < lex ( Lexical ) > ] ) ]
, [ IntCon
, natural
, appl ( prod ( [ cf ( sort ( "NatCon" ) ) ]
, cf ( sort ( "IntCon" ) )
, attrs ( [ id ( "IntCon" ) ] ) )
, [ < NatCon ( NatCon ) > ] ) ]
, [ IntCon
, positive
, appl ( prod ( [ lit ( "+" )
, cf ( opt ( layout ) )
, cf ( sort ( "NatCon" ) ) ]
, cf ( sort ( "IntCon" ) )
, attrs ( [ id ( "IntCon" ) ] ) )
, [ lit ( "+" )
, < ws-after-pos ( Layout ) >
, < NatCon ( NatCon ) > ] ) ]
, [ IntCon
, negative
, appl ( prod ( [ lit ( "-" )
, cf ( opt ( layout ) )
, cf ( sort ( "NatCon" ) ) ]
, cf ( sort ( "IntCon" ) )
, attrs ( [ id ( "IntCon" ) ] ) )
, [ lit ( "-" )
, < ws-after-neg ( Layout ) >
, < NatCon ( NatCon ) > ] ) ]
, [ CharRange
, Default
, appl ( prod ( [ cf ( sort ( "Character" ) ) ]
, cf ( sort ( "CharRange" ) )
, attrs ( [ id ( "Character-Class-Syntax" ) ] ) )
, [ < Character ( Character ) > ] ) ]
, [ CharRange
, range
, appl ( prod ( [ cf ( sort ( "Character" ) )
, cf ( opt ( layout ) )
, lit ( "-" )
, cf ( opt ( layout ) )
, cf ( sort ( "Character" ) ) ]
, cf ( sort ( "CharRange" ) )
, attrs ( [ id ( "Character-Class-Syntax" ) ] ) )
, [ < start ( Character ) >
, < ws-after-start ( Layout ) >
, lit ( "-" )
, < "ws-after--" ( Layout ) >
, < end ( Character ) > ] ) ]
, [ CharRanges
, Default
, appl ( prod ( [ cf ( sort ( "CharRange" ) ) ]
, cf ( sort ( "CharRanges" ) )
, attrs ( [ id ( "Character-Class-Syntax" ) ] ) )
, [ < CharRange ( CharRange ) > ] ) ]
, [ CharRanges
, conc
, appl ( prod ( [ cf ( sort ( "CharRanges" ) )
, cf ( opt ( layout ) )
, cf ( sort ( "CharRanges" ) ) ]
, cf ( sort ( "CharRanges" ) )
, attrs ( [ atr ( "right" )
, atr ( "memo" )
, id ( "Character-Class-Syntax" ) ] ) )
, [ < left ( CharRanges ) >
, < ws-after-left ( Layout ) >
, < right ( CharRanges ) > ] ) ]
, [ CharRanges
, Bracket
, appl ( prod ( [ lit ( "(" )
, cf ( opt ( layout ) )
, cf ( sort ( "CharRanges" ) )
, cf ( opt ( layout ) )
, lit ( ")" ) ]
, cf ( sort ( "CharRanges" ) )
, attrs ( [ atr ( "bracket" )
, id ( "Character-Class-Syntax" ) ] ) )
, [ lit ( "(" )
, < "ws-after-(" ( Layout ) >
, < CharRanges ( CharRanges ) >
, < ws-after-CharRanges ( Layout ) >
, lit ( ")" ) ] ) ]
, [ OptCharRanges
, absent
, appl ( prod ( [  ]
, cf ( sort ( "OptCharRanges" ) )
, attrs ( [ id ( "Character-Class-Syntax" ) ] ) )
, [  ] ) ]
, [ OptCharRanges
, present
, appl ( prod ( [ cf ( sort ( "CharRanges" ) ) ]
, cf ( sort ( "OptCharRanges" ) )
, attrs ( [ id ( "Character-Class-Syntax" ) ] ) )
, [ < CharRanges ( CharRanges ) > ] ) ]
, [ CharClass
, simple-charclass
, appl ( prod ( [ lit ( "[" )
, cf ( opt ( layout ) )
, cf ( sort ( "OptCharRanges" ) )
, cf ( opt ( layout ) )
, lit ( "]" ) ]
, cf ( sort ( "CharClass" ) )
, attrs ( [ id ( "Character-Class-Syntax" ) ] ) )
, [ lit ( "[" )
, < "ws-after-[" ( Layout ) >
, < OptCharRanges ( OptCharRanges ) >
, < ws-after-OptCharRanges ( Layout ) >
, lit ( "]" ) ] ) ]
, [ CharClass
, comp
, appl ( prod ( [ lit ( "~" )
, cf ( opt ( layout ) )
, cf ( sort ( "CharClass" ) ) ]
, cf ( sort ( "CharClass" ) )
, attrs ( [ id ( "Character-Class-Syntax" ) ] ) )
, [ lit ( "~" )
, < "ws-after-~" ( Layout ) >
, < CharClass ( CharClass ) > ] ) ]
, [ CharClass
, diff
, appl ( prod ( [ cf ( sort ( "CharClass" ) )
, cf ( opt ( layout ) )
, lit ( "/" )
, cf ( opt ( layout ) )
, cf ( sort ( "CharClass" ) ) ]
, cf ( sort ( "CharClass" ) )
, attrs ( [ atr ( "left" )
, atr ( "memo" )
, id ( "Character-Class-Syntax" ) ] ) )
, [ < left ( CharClass ) >
, < ws-after-left ( Layout ) >
, lit ( "/" )
, < "ws-after-/" ( Layout ) >
, < right ( CharClass ) > ] ) ]
, [ CharClass
, isect
, appl ( prod ( [ cf ( sort ( "CharClass" ) )
, cf ( opt ( layout ) )
, lit ( "/\\" )
, cf ( opt ( layout ) )
, cf ( sort ( "CharClass" ) ) ]
, cf ( sort ( "CharClass" ) )
, attrs ( [ atr ( "left" )
, atr ( "memo" )
, id ( "Character-Class-Syntax" ) ] ) )
, [ < left ( CharClass ) >
, < ws-after-left ( Layout ) >
, lit ( "/\\" )
, < "ws-after-/\\" ( Layout ) >
, < right ( CharClass ) > ] ) ]
, [ CharClass
, union
, appl ( prod ( [ cf ( sort ( "CharClass" ) )
, cf ( opt ( layout ) )
, lit ( "\\/" )
, cf ( opt ( layout ) )
, cf ( sort ( "CharClass" ) ) ]
, cf ( sort ( "CharClass" ) )
, attrs ( [ atr ( "left" )
, id ( "Character-Class-Syntax" ) ] ) )
, [ < left ( CharClass ) >
, < ws-after-left ( Layout ) >
, lit ( "\\/" )
, < "ws-after-\\/" ( Layout ) >
, < right ( CharClass ) > ] ) ]
, [ CharClass
, Bracket
, appl ( prod ( [ lit ( "(" )
, cf ( opt ( layout ) )
, cf ( sort ( "CharClass" ) )
, cf ( opt ( layout ) )
, lit ( ")" ) ]
, cf ( sort ( "CharClass" ) )
, attrs ( [ atr ( "bracket" )
, id ( "Character-Class-Syntax" ) ] ) )
, [ lit ( "(" )
, < "ws-after-(" ( Layout ) >
, < CharClass ( CharClass ) >
, < ws-after-CharClass ( Layout ) >
, lit ( ")" ) ] ) ]
, [ AlphaNumericalEscChar
, lex-to-cf
, appl ( prod ( [ lex ( sort ( "AlphaNumericalEscChar" ) ) ]
, cf ( sort ( "AlphaNumericalEscChar" ) )
, no-attrs )
, [ < lex ( Lexical ) > ] ) ]
, [ DecimalEscChar
, lex-to-cf
, appl ( prod ( [ lex ( sort ( "DecimalEscChar" ) ) ]
, cf ( sort ( "DecimalEscChar" ) )
, no-attrs )
, [ < lex ( Lexical ) > ] ) ]
, [ EscChar
, lex-to-cf
, appl ( prod ( [ lex ( sort ( "EscChar" ) ) ]
, cf ( sort ( "EscChar" ) )
, no-attrs )
, [ < lex ( Lexical ) > ] ) ]
, [ L-Char
, lex-to-cf
, appl ( prod ( [ lex ( sort ( "L-Char" ) ) ]
, cf ( sort ( "L-Char" ) )
, no-attrs )
, [ < lex ( Lexical ) > ] ) ]
, [ Literal
, lex-to-cf
, appl ( prod ( [ lex ( sort ( "Literal" ) ) ]
, cf ( sort ( "Literal" ) )
, no-attrs )
, [ < lex ( Lexical ) > ] ) ]
, [ ATerms
, aterm
, appl ( prod ( [ cf ( sort ( "ATerm" ) ) ]
, cf ( sort ( "ATerms" ) )
, attrs ( [ id ( "ATerms" ) ] ) )
, [ < term ( ATerm ) > ] ) ]
, [ ATerms
, cons
, appl ( prod ( [ cf ( sort ( "ATerm" ) )
, cf ( opt ( layout ) )
, lit ( "," )
, cf ( opt ( layout ) )
, cf ( sort ( "ATerms" ) ) ]
, cf ( sort ( "ATerms" ) )
, attrs ( [ id ( "ATerms" ) ] ) )
, [ < head ( ATerm ) >
, < ws-after-head ( Layout ) >
, lit ( "," )
, < "ws-after-," ( Layout ) >
, < tail ( ATerms ) > ] ) ]
, [ ATermList
, empty
, appl ( prod ( [ lit ( "[" )
, cf ( opt ( layout ) )
, lit ( "]" ) ]
, cf ( sort ( "ATermList" ) )
, attrs ( [ id ( "ATerms" ) ] ) )
, [ lit ( "[" )
, < "ws-after-[" ( Layout ) >
, lit ( "]" ) ] ) ]
, [ ATermList
, not-empty
, appl ( prod ( [ lit ( "[" )
, cf ( opt ( layout ) )
, cf ( sort ( "ATerms" ) )
, cf ( opt ( layout ) )
, lit ( "]" ) ]
, cf ( sort ( "ATermList" ) )
, attrs ( [ id ( "ATerms" ) ] ) )
, [ lit ( "[" )
, < "ws-after-[" ( Layout ) >
, < ATerms ( ATerms ) >
, < ws-after-ATerms ( Layout ) >
, lit ( "]" ) ] ) ]
, [ ACon
, int
, appl ( prod ( [ cf ( sort ( "IntCon" ) ) ]
, cf ( sort ( "ACon" ) )
, attrs ( [ id ( "ATerms" ) ] ) )
, [ < IntCon ( IntCon ) > ] ) ]
, [ ACon
, real
, appl ( prod ( [ cf ( sort ( "RealCon" ) ) ]
, cf ( sort ( "ACon" ) )
, attrs ( [ id ( "ATerms" ) ] ) )
, [ < RealCon ( RealCon ) > ] ) ]
, [ AFun
, Default
, appl ( prod ( [ cf ( sort ( "Literal" ) ) ]
, cf ( sort ( "AFun" ) )
, attrs ( [ id ( "ATerms" ) ] ) )
, [ < Literal ( Literal ) > ] ) ]
, [ ATerm
, constant
, appl ( prod ( [ cf ( sort ( "ACon" ) ) ]
, cf ( sort ( "ATerm" ) )
, attrs ( [ id ( "ATerms" ) ] ) )
, [ < ACon ( ACon ) > ] ) ]
, [ ATerm
, list
, appl ( prod ( [ cf ( sort ( "ATermList" ) ) ]
, cf ( sort ( "ATerm" ) )
, attrs ( [ id ( "ATerms" ) ] ) )
, [ < list ( ATermList ) > ] ) ]
, [ ATerm
, fun
, appl ( prod ( [ cf ( sort ( "AFun" ) ) ]
, cf ( sort ( "ATerm" ) )
, attrs ( [ id ( "ATerms" ) ] ) )
, [ < fun ( AFun ) > ] ) ]
, [ ATerm
, appl
, appl ( prod ( [ cf ( sort ( "AFun" ) )
, cf ( opt ( layout ) )
, lit ( "(" )
, cf ( opt ( layout ) )
, cf ( sort ( "ATerms" ) )
, cf ( opt ( layout ) )
, lit ( ")" ) ]
, cf ( sort ( "ATerm" ) )
, attrs ( [ id ( "ATerms" ) ] ) )
, [ < fun ( AFun ) >
, < ws-after-fun ( Layout ) >
, lit ( "(" )
, < "ws-after-(" ( Layout ) >
, < args ( ATerms ) >
, < ws-after-args ( Layout ) >
, lit ( ")" ) ] ) ]
, [ Ann
, annotation
, appl ( prod ( [ lit ( "{" )
, cf ( opt ( layout ) )
, cf ( sort ( "ATerms" ) )
, cf ( opt ( layout ) )
, lit ( "}" ) ]
, cf ( sort ( "Ann" ) )
, attrs ( [ id ( "ATerms" ) ] ) )
, [ lit ( "{" )
, < "ws-after-{" ( Layout ) >
, < ATerms ( ATerms ) >
, < ws-after-ATerms ( Layout ) >
, lit ( "}" ) ] ) ]
, [ ATerm
, annotated-constant
, appl ( prod ( [ cf ( sort ( "ACon" ) )
, cf ( opt ( layout ) )
, cf ( sort ( "Ann" ) ) ]
, cf ( sort ( "ATerm" ) )
, attrs ( [ id ( "ATerms" ) ] ) )
, [ < ACon ( ACon ) >
, < ws-after-ACon ( Layout ) >
, < Ann ( Ann ) > ] ) ]
, [ ATerm
, annotated-list
, appl ( prod ( [ cf ( sort ( "ATermList" ) )
, cf ( opt ( layout ) )
, cf ( sort ( "Ann" ) ) ]
, cf ( sort ( "ATerm" ) )
, attrs ( [ id ( "ATerms" ) ] ) )
, [ < list ( ATermList ) >
, < ws-after-list ( Layout ) >
, < Ann ( Ann ) > ] ) ]
, [ ATerm
, annotated-fun
, appl ( prod ( [ cf ( sort ( "AFun" ) )
, cf ( opt ( layout ) )
, cf ( sort ( "Ann" ) ) ]
, cf ( sort ( "ATerm" ) )
, attrs ( [ id ( "ATerms" ) ] ) )
, [ < fun ( AFun ) >
, < ws-after-fun ( Layout ) >
, < Ann ( Ann ) > ] ) ]
, [ ATerm
, annotated-appl
, appl ( prod ( [ cf ( sort ( "AFun" ) )
, cf ( opt ( layout ) )
, lit ( "(" )
, cf ( opt ( layout ) )
, cf ( sort ( "ATerms" ) )
, cf ( opt ( layout ) )
, lit ( ")" )
, cf ( opt ( layout ) )
, cf ( sort ( "Ann" ) ) ]
, cf ( sort ( "ATerm" ) )
, attrs ( [ id ( "ATerms" ) ] ) )
, [ < fun ( AFun ) >
, < ws-after-fun ( Layout ) >
, lit ( "(" )
, < "ws-after-(" ( Layout ) >
, < args ( ATerms ) >
, < ws-after-args ( Layout ) >
, lit ( ")" )
, < "ws-after-)" ( Layout ) >
, < Ann ( Ann ) > ] ) ]
, [ TagId
, lex-to-cf
, appl ( prod ( [ lex ( sort ( "TagId" ) ) ]
, cf ( sort ( "TagId" ) )
, no-attrs )
, [ < lex ( Lexical ) > ] ) ]
, [ TagId
, empty
, appl ( prod ( [  ]
, cf ( sort ( "TagId" ) )
, attrs ( [ id ( "Layout" ) ] ) )
, [  ] ) ]
, [ NumChar
, lex-to-cf
, appl ( prod ( [ lex ( sort ( "NumChar" ) ) ]
, cf ( sort ( "NumChar" ) )
, no-attrs )
, [ < lex ( Lexical ) > ] ) ]
, [ ShortChar
, lex-to-cf
, appl ( prod ( [ lex ( sort ( "ShortChar" ) ) ]
, cf ( sort ( "ShortChar" ) )
, no-attrs )
, [ < lex ( Lexical ) > ] ) ]
, [ Character
, numeric
, appl ( prod ( [ cf ( sort ( "NumChar" ) ) ]
, cf ( sort ( "Character" ) )
, attrs ( [ id ( "Character-Syntax" ) ] ) )
, [ < NumChar ( NumChar ) > ] ) ]
, [ Character
, short
, appl ( prod ( [ cf ( sort ( "ShortChar" ) ) ]
, cf ( sort ( "Character" ) )
, attrs ( [ id ( "Character-Syntax" ) ] ) )
, [ < ShortChar ( ShortChar ) > ] ) ]
, [ Character
, top
, appl ( prod ( [ lit ( "\\TOP" ) ]
, cf ( sort ( "Character" ) )
, attrs ( [ id ( "Character-Syntax" ) ] ) )
, [ lit ( "\\TOP" ) ] ) ]
, [ Character
, eof
, appl ( prod ( [ lit ( "\\EOF" ) ]
, cf ( sort ( "Character" ) )
, attrs ( [ id ( "Character-Syntax" ) ] ) )
, [ lit ( "\\EOF" ) ] ) ]
, [ OptExp
, present
, appl ( prod ( [ lit ( "e" )
, cf ( opt ( layout ) )
, cf ( sort ( "IntCon" ) ) ]
, cf ( sort ( "OptExp" ) )
, attrs ( [ id ( "RealCon" ) ] ) )
, [ lit ( "e" )
, < "ws-after-e" ( Layout ) >
, < IntCon ( IntCon ) > ] ) ]
, [ OptExp
, absent
, appl ( prod ( [  ]
, cf ( sort ( "OptExp" ) )
, attrs ( [ id ( "RealCon" ) ] ) )
, [  ] ) ]
, [ RealCon
, real-con
, appl ( prod ( [ cf ( sort ( "IntCon" ) )
, cf ( opt ( layout ) )
, lit ( "." )
, cf ( opt ( layout ) )
, cf ( sort ( "NatCon" ) )
, cf ( opt ( layout ) )
, cf ( sort ( "OptExp" ) ) ]
, cf ( sort ( "RealCon" ) )
, attrs ( [ id ( "RealCon" ) ] ) )
, [ < IntCon ( IntCon ) >
, < ws-after-IntCon ( Layout ) >
, lit ( "." )
, < "ws-after-." ( Layout ) >
, < NatCon ( NatCon ) >
, < ws-after-NatCon ( Layout ) >
, < OptExp ( OptExp ) > ] ) ] ]