
tool sdf-modules is { command = "sdf-modules" }

process SdfModules is
let
 SM : sdf-modules,
 Modules : list,
 ModuleId : str,
 Imports : list,
 Import : term,
 Renamings : term,
 Module : term,
 Depending : list,
 Definition : term,
 Nodes : list,
 Edges : list,
 Path : str
in
  execute(sdf-modules, SM?) .
  (
    rec-msg(sm-get-module-id(Module?)) .
    snd-eval(SM, get-module-id(Module)) .
    rec-value(SM, module-id(ModuleId?)) .
    snd-msg(module-id(ModuleId))
  +
    rec-msg(sm-get-all-imports(Modules?, ModuleId?)) .
    snd-eval(SM, get-all-imports(Modules, ModuleId)) .
    rec-value(SM, all-imports(Imports?)) .
    snd-msg(sm-all-imports(Imports))
  +
    rec-msg(sm-get-all-depending-modules(Modules?, ModuleId?)) .
    snd-eval(SM, get-all-depending-modules(Modules, ModuleId)) .
    rec-value(SM, depending-modules(Depending?)) .
    snd-msg(sm-all-depending-modules(Depending))
  +
    rec-msg(sm-get-import-renamings(Import?)) .
    snd-eval(SM, get-import-renamings(Import)) .
    rec-value(SM, renamings(Renamings?)) .
    snd-msg(sm-renamings(Renamings))
  +
    rec-msg(sm-make-sdf-definition(Modules?)) .
    snd-eval(SM, make-sdf-definition(Modules)) .
    rec-value(SM, sdf-definition(Definition?)) .
    snd-msg(sm-sdf-definition(Definition))
  +
    rec-msg(sm-get-import-graph(Modules?)) .
    snd-eval(SM, get-import-graph(Modules)) .
    rec-value(SM, import-graph(Nodes?,Edges?)) .
    snd-msg(sm-import-graph(Nodes, Edges))
  +
    rec-msg(sm-is-valid-modulename-in-path(Path?, ModuleId?)) .
    snd-eval(SM, is-valid-modulename-in-path(Path, ModuleId)) .
    (
      rec-value(SM, yes) .
      snd-msg(modulename-is-valid)
    +
      rec-value(SM, no) .
      snd-msg(modulename-is-invalid)
    )  
  )
  *delta
endlet
