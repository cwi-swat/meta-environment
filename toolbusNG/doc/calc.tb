process UI is														// command="wish-adapter -script ui-calc.tcl"
     ( ( CALC-BUTTON() + LOG-BUTTON() ) * delta
     ||
       TIME-BUTTON() * delta
     ||
       QUIT-BUTTON()
     )
  endlet

process CALC-BUTTON is
  let  E : expr, V : int
  in
     event button(calc) .
     eval get-expr-dialog : expr .								// expr get-expr-dialog()
     ( value cancel               <<<<<<<<
     + value E?  . do display-value(V)						// void display-value(expr)
     ) . ack-event button(calc)
  endlet

process LOG-BUTTON is
  let N : int, L : log
  in
      event button(showLog)  .
      snd-msg showLog  .  rec-msg showLog(L?) .
      do display-log(L) .												// void display-log(log)
      ack-event button(calc)
  endlet

process TIME-BUTTON is
  let T : time, P : process
  in
      event button(showTime) .
      snd-msg showTime to P? . rec-msg showTime(T?) from P .
      do display-time(T) .				 								// void display-time(time)
      ack-event(showTime)
  endlet

tool QUIT-BUTTON is
  event button(quit) .
  shutdown("End of calc demo")

// -------------------------------------------------------------------------------

process CALC is															// command = "./calc"
  let E : expr, V : int
  in
     ( rec-msg compute(E?) from P? . 
       eval compute(E) : int .											// int compute(expr)
       value V? .
       snd-msg compute(E, V) to P . 
       snd-note compute(E, V)
     ) * delta
  endlet

// -------------------------------------------------------------------------------

process Clock is															// command = "./clock"
 let T : time, P : process
 in
     ( rec-msg showTime from P? .
       eval readTime : time .												// time readtime()
       value T? .
       snd-msg showTime(T) to P
     ) * delta
 endlet

// -------------------------------------------------------------------------------

process BATCH is														// command = "./batch"
  let E : expr, V : int
  in
     ( eval(fromFile) : expr .												// expr fromFile()
       value(E?)  .
       snd-msg compute(E). 
       rec-msg compute(E, V?).
       do toFile(E, V)															// void toFile(expr, int)
     ) * delta
  endlet

// -------------------------------------------------------------------------------

process  LOG is															 // command = "./log"
  let  E : str, V : int, L : log
  in
     ( rec-note compute(E?, V?) . do writeLog(E, V)			// void writeLog(expr,int)
     + 
       rec-msg(showLog) from P? . 
       eval(readLog) : log .													// log readLog()
       value(L?) .
       snd-msg readLog(L) to P
     ) * delta
  endlet
  
 // -------------------------------------------------------------------------------

toolbus(UI, CALC, LOG, CLOCK)

// -------------------------------------------------------------------------------

