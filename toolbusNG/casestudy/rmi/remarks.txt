Basic RMI:

four steps:
1. Write desired remote functionality in terms of Java Interface.
   - This interface must extend java.rmi.Remote;
   - each method in the interface must declare that it throws RemoteException:
   
   public interface AddressBook extends java.rmi.Remote {
     public void setAddress(String name, String address) throws java.rmi.RemoteException;
     public String getAddress(String name) throws java.rmi.RemoteException;
   }
   
2. Write a class implementing the interface in one of two ways:
   a) extend UnicastRemoteObject. Override constructor and super() will take
      care of registering the service with the rmi-registry. A constructor
      must be written that must throw RemoteException
   b) extend <whatever>. No automagic registration of instances is done, but
      instead must be manually exported to the rmi-registry at some opportune
      time by invoking UnicastRemoteObject.exportObject( ... );
   
   public class AddressBookImpl extends UnicastRemoteObject implements AddressBook {
     private HashTable addresses;
     public AddressBookImpl() throws RemoteException {
       super();
       hashTable = new HashTable();
       ...
     }
     public Address getAddress(String name) throws RemoteException {
       ...
     }
     public void setAddress(String name, Address address) throws RemoteException {
       ...
     }
   }

3. Write a Server class that creates an instance of the service-implementation and binds
   this instance to the rmi-registry using rmi naming mechanism:
   public class AddressBookServer {
     public static void main(String[] args) {
       try {
         AddressBook ab = new AddressBookImpl();
         Naming.bind("rmi://localhost:1099/AddressBookService", ab);
       } catch(Exception e) {
         System.out.println("Trouble: " + e);
       }
     }
   }
   In reality a host of exceptions can be thrown which should be taken care of properly.
   
4. Write a Client that declares a member of the interface type, and gets an implementation
   by querying the rmi-registry:
   public class RemoteClient {
     public static void main(String[] args) {
       try {
         AddressBook ab = (AddressBook) Naming.lookup("rmi://localhost/AddressBookService");
       } catch (Exception e) {
         ...
       }
       Address a1 = ab.getAddress("hayco");
     }
   }



DATA TRANSFER
-------------
[PASS BY VALUE]
* By default, local objects are passed by copy, which means that all data members (or fields)
  of an object are copied, except those marked as static or transient.
  Thus, in the AddressBook example, if Address is written as a class:
  
  public class Address implements Serializable {
    private String street;
    private int number;
    public Address(String street, int number) {this.street = street; this.number = number}
	public String getStreet() { return street;}
    public int getNumber() { return number;}
  }

  then the getAddress() method in AddressBookImpl returns serialized /copies/ of the corresponding
  Address instance.

[PASS BY REFERENCE]
* Remote objects are passed by reference. A reference to a remote object is actually a reference
  to a stub, which is a client-side proxy for the remote object.
  
  A class is made into a "remote object" by splitting it into an interface that extends Remote
  (see the AddressBook interface) and an implementation (as per the AddressBookImpl). Each instance
  is then required to be registered to the rmi-registry, either because the implementation extends
  UnicastRemoteObject, or by explicit invocation of UnicastRemoteObject.exportObject();
  
  Remote references can thus be obtained in two ways:
  1. by explicit lookups in the rmi-registry: Naming.lookup("rmi://localhost/AddressBookService");
  2. by parameter passing/return value: public Address getAddress(String name); will return a reference
     to a remote instance of the implementation of the Address interface.
     
  public interface Address extends java.rmi.Remote {
    public String getStreet() throws RemoteException;
    public int getNumber() throws RemoteException;
  }
  
  public class AddressImpl extends java.rmi.UnicastRemoteObject {
    private String street;
    private int number;
    public Address(String street, int number) throws RemoteException {
      super();
      this.street = street;
      this.number = number
    }
	public String getStreet() { return street;}
    public int getNumber() { return number;}
  }