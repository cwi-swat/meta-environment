/* The following code was generated by JFlex 1.3.5 on 9/21/07 11:57 AM */

package toolbus.parsercup;


/* Lexical syntax for ToolBus scripts */
import java.io.IOException;

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 9/21/07 11:57 AM from the specification file
 * <tt>file:/ufs/lankamp/workspace/ToolbusNG_InterTool/src/toolbus/parsercup/toolbus.jflex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int STRING = 1;
  final public static int YYINITIAL = 0;
  final public static int INCLUDE = 2;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\53"+
    "\1\47\1\0\1\6\2\0\1\54\1\55\1\5\1\20\1\56\1\10"+
    "\1\15\1\4\1\13\11\14\1\63\1\0\1\50\1\64\1\52\1\66"+
    "\1\0\4\12\1\17\25\12\1\61\1\51\1\62\1\0\1\11\1\0"+
    "\1\37\1\33\1\27\1\23\1\16\1\36\1\25\1\43\1\34\1\7"+
    "\1\41\1\42\1\24\1\22\1\30\1\35\1\7\1\26\1\21\1\31"+
    "\1\32\1\40\1\45\1\44\1\46\1\7\1\57\1\65\1\60\uff82\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    55,   110,   165,   220,   165,   275,   165,   330,   385, 
      440,   495,   550,   605,   165,   660,   715,   770,   825,   880, 
      935,   990,  1045,  1100,  1155,  1210,  1265,  1320,  1375,  1430, 
     1485,  1540,   165,  1595,   165,   165,   165,   165,   165,   165, 
      165,   165,  1650,   165,  1705,   165,  1760,  1815,   165,  1870, 
      165,   165,  1925,  1980,   550,  2035,  2090,  2145,  2200,   165, 
     2255,  2310,  2365,  2420,  2475,  2530,  2585,  2640,  2695,  2750, 
     2805,  2860,  2915,  2970,  3025,   385,   385,   385,  3080,   385, 
     3135,  3190,  3245,  3300,  3355,  3410,  3465,  3520,   165,   165, 
      165,   165,   165,   165,   165,  3575,  3630,  3685,  3740,  3795, 
     3850,  3905,  3960,  4015,  4070,  4125,  4180,  4235,  4290,  4345, 
     4400,  4455,  4510,  4565,   385,  4620,  4675,  4730,  4785,  4840, 
     4895,  4950,  5005,   385,  5060,  5115,  5170,  5225,  5280,  5335, 
     3575,  5390,  5445,   385,  5500,  5555,  5610,  5665,  5720,  5775, 
     5830,  5885,   385,  5940,  5995,  6050,   385,  6105,  6160,   385, 
     6215,  6270,  6325,  6380,  6435,  6490,   385,   385,  6545,  6600, 
     6655,  6710,  6765,  6820,  6820,  6875,  6930,  6985,  7040,  7095, 
     7150,  7205,  7260,  7315,  7370,  7425,  7480,  7535,   385,   385, 
     7590,  7645,  7700,  7755,  7810,  7865,  7920,  7975,   385,  8030, 
     8085,  8140,  8195,  8250,  8305,   385,  8360,  8415,  8470,  8525, 
     8580,  8635,  8690,   385,  8745,  8800,  8855,   385,  8910,  8965, 
     9020,  9075,  9130,  9185,  9240,  9295,  9350,  9405,  9460,  9515, 
     9570,  9625,   385,  9680,  9735,  9790,  9845,  9900,  9955,   385, 
    10010, 10065,   165, 10120, 10175, 10230,   165,   385, 10285, 10340, 
      385, 10395, 10450, 10505, 10560, 10615, 10670,   385, 10725, 10780, 
    10835,   385, 10890, 10945,   385,   385,   385, 11000, 11055,   385, 
    11110, 11165,   165, 11220,   165,   385,   385, 11275, 11330, 11385, 
      385, 11440,   385, 11495,   385, 11550, 11605, 11660, 11715, 11770, 
    11825, 11880,   165, 11935, 11990, 12045,   385,   385, 12100, 12155, 
      385, 12210,   385,   385, 12265,   385, 12320, 12375, 12430, 12485, 
    12540, 12595, 12650, 12705, 12760,   385,   385,   385, 12815, 12870, 
    12925,   385,   385, 12980,   385
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\12\1\13"+
    "\2\14\1\15\1\16\1\17\1\20\1\14\1\21\1\22"+
    "\1\23\1\24\2\12\1\25\1\26\1\12\1\27\1\30"+
    "\1\12\1\31\1\32\1\33\1\34\1\12\1\35\1\36"+
    "\1\37\3\12\1\40\1\41\1\4\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\2\4\46\57\1\60\1\57\1\61"+
    "\13\57\1\62\2\4\45\62\1\63\1\4\1\64\1\4"+
    "\13\62\71\0\1\6\70\0\1\65\1\66\67\0\1\65"+
    "\67\0\2\12\1\0\3\12\1\0\2\12\1\0\26\12"+
    "\33\0\2\67\61\0\6\14\1\0\2\14\1\0\26\14"+
    "\33\0\2\67\1\70\64\0\2\16\1\70\60\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\1\12\1\71\17\12"+
    "\1\72\1\12\1\73\2\12\72\0\1\74\23\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\1\12\1\75\7\12"+
    "\1\76\10\12\1\77\3\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\7\12\1\100\16\12\27\0\2\12"+
    "\1\0\3\12\1\0\1\101\1\12\1\0\26\12\27\0"+
    "\2\12\1\0\3\12\1\0\1\102\1\12\1\0\26\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\5\12"+
    "\1\103\1\12\1\104\11\12\1\105\4\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\5\12\1\106\1\12"+
    "\1\107\3\12\1\110\2\12\1\111\3\12\1\112\3\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\1\12"+
    "\1\113\24\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\1\114\1\115\13\12\1\116\10\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\5\12\1\117\20\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\13\12"+
    "\1\120\2\12\1\121\7\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\12\12\1\122\13\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\13\12\1\123\12\12"+
    "\27\0\2\12\1\0\3\12\1\0\1\124\1\12\1\0"+
    "\26\12\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\7\12\1\125\16\12\36\0\1\126\4\0\1\127\10\0"+
    "\1\130\104\0\1\131\100\0\1\132\67\0\1\133\1\0"+
    "\1\57\2\0\46\57\1\0\1\57\1\0\13\57\22\0"+
    "\1\134\3\0\1\135\2\0\1\136\21\0\1\137\13\0"+
    "\1\62\2\0\45\62\4\0\13\62\1\65\1\5\1\6"+
    "\64\65\5\140\1\141\61\140\13\0\2\142\61\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\2\12\1\143\23\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\1\144"+
    "\25\12\27\0\2\12\1\0\3\12\1\0\1\145\1\12"+
    "\1\0\26\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\2\12\1\146\23\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\12\12\1\147\13\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\11\12\1\150\14\12"+
    "\27\0\1\12\1\151\1\0\3\12\1\0\2\12\1\0"+
    "\26\12\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\21\12\1\152\4\12\27\0\2\12\1\0\3\12\1\0"+
    "\2\12\1\0\6\12\1\153\7\12\1\154\7\12\27\0"+
    "\2\12\1\0\3\12\1\0\1\155\1\12\1\0\26\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\3\12"+
    "\1\156\22\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\16\12\1\157\7\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\11\12\1\160\14\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\7\12\1\161\16\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\3\12"+
    "\1\162\22\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\11\12\1\163\14\12\27\0\2\12\1\0\3\12"+
    "\1\0\1\164\1\12\1\0\26\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\1\165\1\12\1\166\23\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\7\12"+
    "\1\167\3\12\1\170\12\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\21\12\1\171\4\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\1\172\25\12\27\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\1\12\1\173"+
    "\24\12\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\10\12\1\174\15\12\27\0\2\12\1\0\3\12\1\0"+
    "\2\12\1\0\1\175\25\12\42\0\1\176\62\0\1\177"+
    "\72\0\1\200\13\0\1\201\30\0\5\140\1\202\65\140"+
    "\1\203\1\202\61\140\13\0\2\142\1\0\2\204\56\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\21\12\1\205"+
    "\4\12\27\0\2\12\1\0\3\12\1\0\1\206\1\12"+
    "\1\0\26\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\6\12\1\207\17\12\27\0\1\12\1\210\1\0"+
    "\3\12\1\0\2\12\1\0\26\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\1\211\25\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\10\12\1\212\15\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\1\12"+
    "\1\213\24\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\10\12\1\214\5\12\1\215\7\12\27\0\1\12"+
    "\1\216\1\0\3\12\1\0\2\12\1\0\26\12\27\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\2\12\1\217"+
    "\23\12\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\16\12\1\220\7\12\27\0\2\12\1\0\3\12\1\0"+
    "\2\12\1\0\3\12\1\221\22\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\1\222\25\12\27\0\2\12"+
    "\1\0\3\12\1\0\1\223\1\12\1\0\26\12\27\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\21\12\1\224"+
    "\4\12\27\0\2\12\1\0\3\12\1\0\1\225\1\12"+
    "\1\0\26\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\1\12\1\226\24\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\11\12\1\227\14\12\27\0\2\12"+
    "\1\0\3\12\1\0\1\230\1\12\1\0\26\12\27\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\6\12\1\231"+
    "\17\12\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\1\12\1\232\24\12\27\0\2\12\1\0\3\12\1\0"+
    "\2\12\1\0\1\233\25\12\27\0\1\12\1\234\1\0"+
    "\3\12\1\0\2\12\1\0\26\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\2\12\1\235\23\12\27\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\10\12\1\236"+
    "\15\12\43\0\1\237\101\0\1\240\57\0\1\241\61\0"+
    "\1\242\1\243\43\0\4\140\1\6\1\202\61\140\10\0"+
    "\1\244\2\0\2\245\3\0\1\244\55\0\2\12\1\0"+
    "\3\12\1\0\1\246\1\12\1\0\26\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\11\12\1\247\14\12"+
    "\27\0\2\12\1\0\3\12\1\0\1\250\1\12\1\0"+
    "\1\12\1\251\1\252\1\253\2\12\1\254\1\12\1\255"+
    "\5\12\1\256\1\12\1\257\5\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\6\12\1\260\17\12\27\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\2\12\1\261"+
    "\23\12\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\7\12\1\262\16\12\27\0\2\12\1\0\3\12\1\0"+
    "\2\12\1\0\16\12\1\263\7\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\25\12\1\264\27\0\2\12"+
    "\1\0\3\12\1\0\1\265\1\12\1\0\1\12\1\266"+
    "\1\267\1\270\2\12\1\271\10\12\1\272\6\12\27\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\10\12\1\273"+
    "\15\12\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\16\12\1\274\7\12\27\0\2\12\1\0\3\12\1\0"+
    "\2\12\1\0\1\275\25\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\12\12\1\276\13\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\7\12\1\277\16\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\12\12"+
    "\1\300\13\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\15\12\1\301\10\12\27\0\2\12\1\0\3\12"+
    "\1\0\1\302\1\12\1\0\26\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\10\12\1\303\15\12\27\0"+
    "\2\12\1\0\3\12\1\0\1\304\1\12\1\0\26\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\2\12"+
    "\1\305\5\12\1\306\15\12\54\0\1\307\66\0\1\310"+
    "\74\0\1\311\47\0\1\312\61\0\1\313\63\0\2\245"+
    "\61\0\2\12\1\0\3\12\1\0\2\12\1\0\10\12"+
    "\1\314\15\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\10\12\1\315\15\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\17\12\1\316\6\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\7\12\1\317\16\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\7\12"+
    "\1\320\16\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\1\321\25\12\27\0\2\12\1\0\3\12\1\0"+
    "\2\12\1\0\16\12\1\322\7\12\27\0\2\12\1\0"+
    "\3\12\1\0\1\323\1\12\1\0\26\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\6\12\1\324\17\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\13\12"+
    "\1\325\12\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\5\12\1\326\20\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\7\12\1\327\16\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\10\12\1\330\15\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\17\12"+
    "\1\331\6\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\7\12\1\332\16\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\13\12\1\333\12\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\1\334\25\12\27\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\7\12\1\335"+
    "\16\12\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\16\12\1\336\7\12\27\0\2\12\1\0\3\12\1\0"+
    "\1\337\1\12\1\0\26\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\1\12\1\340\24\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\11\12\1\341\14\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\11\12"+
    "\1\342\14\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\1\343\25\12\27\0\2\12\1\0\3\12\1\0"+
    "\2\12\1\0\13\12\1\344\12\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\1\345\25\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\15\12\1\346\10\12"+
    "\27\0\2\12\1\0\3\12\1\0\1\347\1\12\1\0"+
    "\26\12\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\13\12\1\350\12\12\56\0\1\351\52\0\1\352\76\0"+
    "\1\353\52\0\1\354\106\0\1\355\37\0\2\12\1\0"+
    "\3\12\1\0\1\356\1\12\1\0\26\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\16\12\1\357\7\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\10\12"+
    "\1\360\15\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\4\12\1\361\21\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\1\12\1\362\24\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\5\12\1\363\20\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\20\12"+
    "\1\364\5\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\21\12\1\365\4\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\13\12\1\366\12\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\24\12\1\367\1\12"+
    "\27\0\2\12\1\0\3\12\1\0\1\370\1\12\1\0"+
    "\26\12\27\0\2\12\1\0\3\12\1\0\1\371\1\12"+
    "\1\0\26\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\10\12\1\372\15\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\1\373\25\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\4\12\1\374\21\12\27\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\1\12\1\375"+
    "\24\12\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\21\12\1\376\4\12\27\0\2\12\1\0\3\12\1\0"+
    "\2\12\1\0\2\12\1\377\23\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\1\u0100\25\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\10\12\1\u0101\15\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\6\12"+
    "\1\u0102\17\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\1\12\1\u0103\24\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\1\u0104\25\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\21\12\1\u0105\4\12\27\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\3\12\1\u0106"+
    "\22\12\36\0\1\u0107\73\0\1\u0108\101\0\1\u0109\37\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\21\12\1\u010a"+
    "\4\12\27\0\2\12\1\0\3\12\1\0\1\u010b\1\12"+
    "\1\0\26\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\6\12\1\u010c\17\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\3\12\1\u010d\22\12\27\0\1\12"+
    "\1\u010e\1\0\3\12\1\0\2\12\1\0\26\12\27\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\21\12\1\u010f"+
    "\4\12\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\12\12\1\u0110\13\12\27\0\2\12\1\0\3\12\1\0"+
    "\2\12\1\0\1\12\1\u0111\24\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\1\12\1\u0112\24\12\27\0"+
    "\2\12\1\0\3\12\1\0\1\u0113\1\12\1\0\26\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\6\12"+
    "\1\u0114\17\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\1\12\1\u0115\24\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\11\12\1\u0116\14\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\5\12\1\u0117\20\12"+
    "\27\0\2\12\1\0\3\12\1\0\1\u0118\1\12\1\0"+
    "\26\12\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\16\12\1\u0119\7\12\27\0\2\12\1\0\3\12\1\0"+
    "\1\u011a\1\12\1\0\26\12\36\0\1\u011b\57\0\2\12"+
    "\1\0\3\12\1\0\1\u011c\1\12\1\0\26\12\27\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\0\13\12\1\u011d"+
    "\12\12\27\0\2\12\1\0\3\12\1\0\1\u011e\1\12"+
    "\1\0\26\12\27\0\2\12\1\0\3\12\1\0\1\u011f"+
    "\1\12\1\0\26\12\27\0\2\12\1\0\3\12\1\0"+
    "\2\12\1\0\10\12\1\u0120\15\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\7\12\1\u0121\16\12\27\0"+
    "\2\12\1\0\3\12\1\0\1\u0122\1\12\1\0\26\12"+
    "\27\0\2\12\1\0\3\12\1\0\1\u0123\1\12\1\0"+
    "\26\12\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\13\12\1\u0124\12\12\27\0\2\12\1\0\3\12\1\0"+
    "\2\12\1\0\2\12\1\u0125\23\12\27\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\0\25\12\1\u0126\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\7\12\1\u0127\16\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\21\12"+
    "\1\u0128\4\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\1\12\1\u0129\24\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\17\12\1\u012a\6\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\1\12\1\u012b\24\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\6\12"+
    "\1\u012c\17\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\12\12\1\u012d\13\12\27\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\0\11\12\1\u012e\14\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\16\12\1\u012f\7\12"+
    "\27\0\2\12\1\0\3\12\1\0\1\u0130\1\12\1\0"+
    "\26\12\27\0\2\12\1\0\3\12\1\0\2\12\1\0"+
    "\1\12\1\u0131\24\12\27\0\2\12\1\0\3\12\1\0"+
    "\2\12\1\0\10\12\1\u0132\15\12\27\0\2\12\1\0"+
    "\3\12\1\0\1\u0133\1\12\1\0\26\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\10\12\1\u0134\15\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\10\12"+
    "\1\u0135\15\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\1\12\1\u0136\24\12\27\0\2\12\1\0\3\12"+
    "\1\0\1\u0137\1\12\1\0\26\12\27\0\2\12\1\0"+
    "\3\12\1\0\1\u0138\1\12\1\0\26\12\27\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\0\10\12\1\u0139\15\12"+
    "\27\0\2\12\1\0\3\12\1\0\2\12\1\0\6\12"+
    "\1\u013a\17\12\27\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\0\10\12\1\u013b\15\12\20\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_NO_MATCH = 2;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  0,  9,  1,  9,  1,  9,  1,  1,  1,  1,  1,  1,  9,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     9,  1,  9,  9,  9,  9,  9,  9,  9,  9,  1,  9,  1,  9,  1,  1, 
     9,  1,  9,  9,  0,  0,  0,  0,  1,  1,  1,  9,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  0,  0,  0,  9,  9,  9,  9,  9,  9,  9,  0, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0, 
     0,  0,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0, 
     0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  9,  0,  0,  0,  9,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  9,  0,  9,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[13035];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 140) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    
    yy_endRead+= numRead;  
    return false;
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }

  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            
            yy_input = yy_buffer_l[yy_currentPos_l++];
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 307: 
          {  return symbol(sym.ABS_TIMEOUT);  }
        case 316: break;
        case 306: 
          {  return symbol(sym.UNSUBSCRIBE);  }
        case 317: break;
        case 305: 
          {  return symbol(sym.REC_CONNECT);  }
        case 318: break;
        case 295: 
          {  return symbol(sym.SND_CANCEL);  }
        case 319: break;
        case 59: 
          {  return symbol(sym.RIGHTCHOICE);  }
        case 320: break;
        case 256: 
          {  return symbol(sym.REL_TIMEOUT);  }
        case 321: break;
        case 12: 
        case 13: 
          {  return symbol(sym.INT, new Integer(yytext()));  }
        case 322: break;
        case 293: 
          {  return symbol(sym.ABS_DELAY);  }
        case 323: break;
        case 292: 
          {  return symbol(sym.UNDEFINED);  }
        case 324: break;
        case 290: 
          {  return symbol(sym.REC_VALUE);  }
        case 325: break;
        case 287: 
          {  return symbol(sym.REC_EVENT);  }
        case 326: break;
        case 286: 
          {  return symbol(sym.SUBSCRIBE);  }
        case 327: break;
        case 274: 
          {  return symbol(sym.REC_NOTE);  }
        case 328: break;
        case 272: 
          {  return symbol(sym.SHUTDOWN);  }
        case 329: break;
        case 270: 
          {  return symbol(sym.SND_KILL);  }
        case 330: break;
        case 266: 
          {  return symbol(sym.SND_NOTE);  }
        case 331: break;
        case 45: 
          {  return symbol(sym.QUESTION);  }
        case 332: break;
        case 179: 
          {  return symbol(sym.REL_DELAY);  }
        case 333: break;
        case 265: 
          {  return symbol(sym.SND_EVAL);  }
        case 334: break;
        case 282: 
          {  yybegin(INCLUDE); return symbol(sym.INCLUDE);  }
        case 335: break;
        case 79: 
          {  return symbol(sym.FI);  }
        case 336: break;
        case 77: 
          {  return symbol(sym.IF);  }
        case 337: break;
        case 76: 
          {  return symbol(sym.IN);  }
        case 338: break;
        case 75: 
          {  return symbol(sym.IS);  }
        case 339: break;
        case 14: 
          {  return symbol(sym.SEQ);  }
        case 340: break;
        case 4: 
        case 5: 
          {  /* ignore */  }
        case 341: break;
        case 114: 
          {  return symbol(sym.TAU);  }
        case 342: break;
        case 123: 
          {  return symbol(sym.LET);  }
        case 343: break;
        case 130: 
          {  /* ignore */  }
        case 344: break;
        case 312: 
          {  return symbol(sym.SND_ACK_EVENT);  }
        case 345: break;
        case 311: 
          {  return symbol(sym.SND_TERMINATE);  }
        case 346: break;
        case 48: 
          {  yybegin(YYINITIAL); 
                                   return symbol(sym.STRING, 
                                   string.toString());  }
        case 347: break;
        case 42: 
          {  return symbol(sym.COLON);  }
        case 348: break;
        case 7: 
          {  return symbol(sym.ITER);  }
        case 349: break;
        case 35: 
          {  return symbol(sym.LPAR);  }
        case 350: break;
        case 36: 
          {  return symbol(sym.RPAR);  }
        case 351: break;
        case 37: 
          {  return symbol(sym.COMMA);  }
        case 352: break;
        case 133: 
          {  return symbol(sym.ELSE);  }
        case 353: break;
        case 142: 
          {  return symbol(sym.READ);  }
        case 354: break;
        case 146: 
          {  return symbol(sym.TRUE);  }
        case 355: break;
        case 147: 
          {  return symbol(sym.TOOL);  }
        case 356: break;
        case 149: 
          {  return symbol(sym.THEN);  }
        case 357: break;
        case 156: 
          {  return symbol(sym.KIND);  }
        case 358: break;
        case 157: 
          {  return symbol(sym.HOST);  }
        case 359: break;
        case 178: 
          {  return symbol(sym.DELTA);  }
        case 360: break;
        case 188: 
          {  return symbol(sym.CLASS);  }
        case 361: break;
        case 195: 
          {  return symbol(sym.FALSE);  }
        case 362: break;
        case 232: 
          {  return symbol(sym.ENDIF);  }
        case 363: break;
        case 236: 
          {  return symbol(sym.IFDEF);  }
        case 364: break;
        case 47: 
          {  string.append('\\');  }
        case 365: break;
        case 91: 
          {  string.append('\n');  }
        case 366: break;
        case 92: 
          {  string.append('\r');  }
        case 367: break;
        case 93: 
          {  string.append('\t');  }
        case 368: break;
        case 94: 
          {  string.append('\"');  }
        case 369: break;
        case 50: 
          {  string.setLength(0);  }
        case 370: break;
        case 314: 
          {  return symbol(sym.REC_DISCONNECT);  }
        case 371: break;
        case 11: 
          {  return symbol(sym.NAME, yytext());  }
        case 372: break;
        case 9: 
        case 15: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 56: 
        case 57: 
        case 58: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 78: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 124: 
        case 132: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 143: 
        case 144: 
        case 145: 
        case 148: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 196: 
        case 197: 
        case 204: 
        case 205: 
        case 206: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 230: 
        case 231: 
        case 238: 
        case 239: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 248: 
        case 249: 
        case 250: 
        case 252: 
        case 253: 
        case 257: 
        case 258: 
        case 260: 
        case 261: 
        case 267: 
        case 268: 
        case 269: 
        case 271: 
        case 273: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 283: 
        case 284: 
        case 285: 
        case 288: 
        case 289: 
        case 291: 
        case 294: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 308: 
        case 309: 
        case 310: 
        case 313: 
          {  return symbol(sym.IDENT, yytext());  }
        case 373: break;
        case 97: 
        case 164: 
          {  return symbol(sym.REAL, yytext());  }
        case 374: break;
        case 34: 
          {  string.setLength(0); yybegin(STRING);  }
        case 375: break;
        case 90: 
          {  return symbol(sym.FMERGE);  }
        case 376: break;
        case 89: 
          {  return symbol(sym.ASSIGN);  }
        case 377: break;
        case 88: 
          {  return symbol(sym.DISRUPT);  }
        case 378: break;
        case 51: 
          {  yybegin(YYINITIAL); 
                                   return symbol(sym.FILENAME, 
                                   string.toString());  }
        case 379: break;
        case 49: 
          {  string.append( yytext() );  }
        case 380: break;
        case 46: 
          {  string.append( yytext() );  }
        case 381: break;
        case 43: 
          {  return symbol(sym.EQUALS);  }
        case 382: break;
        case 41: 
          {  return symbol(sym.RSQUARE);  }
        case 383: break;
        case 16: 
          {  return symbol(sym.CHOICE);  }
        case 384: break;
        case 32: 
          {  return symbol(sym.LANGLE);  }
        case 385: break;
        case 33: 
          {  return symbol(sym.RANGLE);  }
        case 386: break;
        case 38: 
          {  return symbol(sym.LBRACE);  }
        case 387: break;
        case 39: 
          {  return symbol(sym.RBRACE);  }
        case 388: break;
        case 40: 
          {  return symbol(sym.LSQUARE);  }
        case 389: break;
        case 203: 
          {  return symbol(sym.ENDLET);  }
        case 390: break;
        case 207: 
          {  return symbol(sym.SND_DO);  }
        case 391: break;
        case 222: 
          {  return symbol(sym.CREATE);  }
        case 392: break;
        case 229: 
          {  return symbol(sym.PRINTF);  }
        case 393: break;
        case 237: 
          {  return symbol(sym.EXECUTE);  }
        case 394: break;
        case 240: 
          {  return symbol(sym.SND_MSG);  }
        case 395: break;
        case 247: 
          {  return symbol(sym.NO_NOTE);  }
        case 396: break;
        case 251: 
          {  return symbol(sym.REC_MSG);  }
        case 397: break;
        case 254: 
          {  return symbol(sym.COMMAND);  }
        case 398: break;
        case 255: 
          {  return symbol(sym.TOOLBUS);  }
        case 399: break;
        case 259: 
          {  return symbol(sym.PROCESS);  }
        case 400: break;
        case 262: 
          {  return symbol(sym.DEFINE);  }
        case 401: break;
        case 264: 
          {  return symbol(sym.IFNDEF);  }
        case 402: break;
        case 3: 
        case 6: 
        case 8: 
        case 10: 
        case 31: 
        case 44: 
          {  throw new Error("Illegal character <"+
                                                    yytext()+">");  }
        case 403: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          }
          yy_ScanError(YY_NO_MATCH);
      }
    }
  }
}
