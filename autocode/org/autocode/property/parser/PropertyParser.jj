PARSER_BEGIN(PropertyParser)

package org.autocode.property.parser;

import org.autocode.property.*;
import java.util.*;

public class PropertyParser
{
  //{{{ public static void main(String args[])

  public static void main(String args[]) throws ParseException
  {
    PropertyParser parser = new PropertyParser(System.in);
    PropertyForest forest = parser.PropertyFile();
    System.out.println("forest: " + forest);
  }

  //}}}
  //{{{ private static String unquote(String string)

  private static String unquote(String string)
  {
    return string.substring(1, string.length()-1);
  }

  //}}}
}

PARSER_END(PropertyParser)

//{{{ Whitespace

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}


//}}}
//{{{ Comments

SPECIAL_TOKEN : /* COMMENTS */
{
  <HASH_LINE_COMMENT: "#" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <SLASH_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}


//}}}
//{{{ Punctuation

TOKEN :
{
  <LBRACE: "{">
| <RBRACE: "}">
| <COMMA: ",">
| <PERIOD: ".">
| <ADD: "+=">
| <SET: ":=">
}   

//}}}
//{{{ Identifiers

TOKEN :
{
  < IDENTIFIER: <WILDCARD> | ( <LETTER> (<LETTER>|<DIGIT>|<DASH>)* )>
|
  < #LETTER:
      [
       "\u0024",
       "\u002d",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
| < #DASH: "-" >
| < #WILDCARD: "*" >
}


//}}}
//{{{ Literals

TOKEN :
{
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
   |  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
      >
   |
      < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
   |
      < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
   |
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
   |
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
   |
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >

}

//}}}

//{{{ PropertyFile

PropertyForest PropertyFile() :
{
  PropertyForest forest;
}
{
  forest=PropertyForest() <EOF>
  { return forest; }
}

//}}}

//{{{ PropertyForest

PropertyForest PropertyForest() :
{
  PropertyForest forest = new PropertyForest();
  PropertyTree tree;
  Token key;
  int type;
  List list;
  String value;
}
{
  (
    LOOKAHEAD(3)
    key=<IDENTIFIER>
    ( "+=" {type=PropertyTree.ADD;}
    | ":=" {type=PropertyTree.SET;}
    )
    "{" list=PropertyValueList() "}"
    {
      Iterator iter = list.iterator();
      while (iter.hasNext()) {
        tree = new PropertyTree(key.image, (String)iter.next(),
				new PropertyForest());
	tree.setType(PropertyTree.ADD);
	forest.addTree(tree);
      }
    }
  |
    LOOKAHEAD(2)
    key=<IDENTIFIER>
    ( "+=" {type=PropertyTree.ADD;}
    | ":=" {type=PropertyTree.SET;}
    )
    value=PropertyValue()
    {
      tree = new PropertyTree(key.image, value, new PropertyForest());
      tree.setType(PropertyTree.ADD);
      forest.addTree(tree);
    }
  |
    tree=PropertyTree() { forest.addTree(tree); }
  ) *
  { return forest; }
}

//}}}
//{{{ PropertyTree

PropertyTree PropertyTree() :
{
  Token key;
  Token field, type;
  List list;
  PropertyForest forest;
  String value;
}
{
  LOOKAHEAD(2)
  field=<IDENTIFIER> ":" type=<IDENTIFIER>
  {
   forest = new PropertyForest();
   forest.addTree(new PropertyTree("type", type.image,
				   new PropertyForest()));
   return new PropertyTree("field", field.image, forest);
  }
|
  key=<IDENTIFIER> value=PropertyValue() "{" forest=PropertyForest() "}"
  {
    return new PropertyTree(key.image, value, forest);
  }
}

//}}}

//{{{ PropertyValue

String PropertyValue() :
{
  Token string;
  String result;
}
{
   ( string=<IDENTIFIER> { result = string.image; }
   | string=<STRING_LITERAL> { result = unquote(string.image); }
   | string=<INTEGER_LITERAL> { result = string.image; }
   | string=<FLOATING_POINT_LITERAL> { result = string.image; }
   )
   { return result; }
}

//}}}
//{{{ PropertyValueList

List PropertyValueList() :
{
  List result = new LinkedList();
  String propValue;
}
{
  (
  propValue=PropertyValue() { result.add(propValue); }
  ( "," propValue=PropertyValue() { result.add(propValue); }
  ) *
  |
  { /* empty list allowed as well */ }
  )

  { return result; }
}

//}}}
