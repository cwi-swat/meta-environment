$Id$

Wed Mar 21 16:32:58 CET 2007 <jurgenv@cwi.nl>
 * semantics/asfe/src/*.c: little optimizations make interpreter twice
   as fast.

Fri Mar 16 09:00:42 CET 2007 <{jurgenv,kooiker}@cwi.nl>
 * semantics/asfc/src/*.c: manually adapted generated code of MuASF_dict.c to
 accomodate new interface of ATreadFromBinaryString. Regenerating produced
 error messages.

Wed Mar 14 16:03:42 CET 2007 <{economop,kooiker}@cwi.nl>
 * Merged using-refactored-asc-support branch into trunk.

Wed Mar 14 15:59:07 CET 2007 <{economop,kooiker}@cwi.nl>
 * Merged r20984-21815 via svnmerge from trunk.

Fri Mar  9 19:17:37 CET 2007 <jurgenv@cwi.nl>
 * semantics/**: made sure to use new lift/lower combo for speeding up
   normalization.

Thu Mar  8 19:09:31 CET 2007 <jurgenv@cwi.nl>
 * semantics/utils/lift-asf.c: added -t option for output of shared
   text instead of shared binary.

Wed Mar  7 16:37:21 CET 2007 <kooiker@cwi.nl>
 * syntax/asfsdf-checker/src/*:
   - regenerated after fixing warnings

Thu Mar  1 18:28:30 CET 2007 <{kooiker,jurgenv}@cwi.nl>
 *  semantics/asfc/src/Compiler.c: regenerated after bigfixes
    concerning Add-Range-Checks and the implementation of lexical
    transformations in the compiler. Bootstrapped three times.
 * semantics/asfc/src/asf2muasf.c: adapted to make sure it generates
   module id's that correspond to the syntax definition of module id's.

Thu Feb 22 11:15:51 CET 2007 <{jurgenv,kooiker}@cwi.nl>
 * semantics/asfc/src/Compiler.c: regenerated after bugfixes in 
   Add-Range-Checks and basic/Integers.

Tue Feb 13 10:14:55 CET 2007 <kooiker@cwi.nl>
 * semantics/asfc/src/c-code.c: fix overflow in implicit constant conversion
   gcc warning in parsetable

Thu Feb  8 15:59:44 CET 2007 <jurgenv@cwi.nl>
 * **/asfchecker.c: added check for use of lexical variables outside
   the context of a lexical constructor function.

Fri Jan 26 09:27:09 CET 2007 <jurgenv@cwi.nl>
 * **/*.c: adapted all compiled ASF specifications to new toasfix function.

Thu Jan 25 18:13:34 CET 2007 <jurgenv@cwi.nl>
 * semantics/asf-operations/ASF-Normalization.c: added normalization of start
   constructors to start productions. 

Thu Jan 25 15:49:32 CET 2007 <kooiker@cwi.nl>
 * semantics/asfe/src/asfe.c:
   - Check input file and run tests or rewrite term accordingly

Thu Jan 25 15:16:33 CET 2007 <jurgenv@cwi.nl>
 * syntax/addeqsyntax/src/Add-Eqs-Syntax.c: added generation of start
   constructors. For every start-symbol in SDF, a start constructor
   is generated in ASF: start(`Symbol`, Symbol). This can be used
   to address the layout surrounding a start symbol, and to make rewrite
   rules that trigger on the topmost level of a term. This will frequently
   make the use of apply-function unnecessary.
 * TODO: add normalization of start contructors.

Mon Jan 22 14:11:25 CET 2007 <economop@cwi.nl>
 * The last changes committed were a result of a merge with the trunk. 
   Merged revisions 20899-20974 via svnmerge from 
   svn+ssh://economop@svn.cwi.nl/asf/trunk

Mon Jan 22 14:04:55 CET 2007 <economop@cwi.nl>
 * semantics/asfe/src/equations.c: Changed ATprotect to ATprotectTerm to avoid 
 'dereferencing type punned pointer' warning.
 * semantics/asfc/src/c-code.c: Added cast. 

Wed Jan 10 16:43:45 CET 2007 <economop@cwi.nl>
 * Merged r20257-20898 via svnmerge from trunk.

Mon Dec 18 12:59:02 CET 2006 <jurgenv@cwi.nl>
 * semantics/asfc/src/c-compiler.c,Makefile.am: gcc uses
   CFLAGS variable (bound at compile-time of asfc) for compiling
   specifications.
 * semantics/asfc/src/Compiler.c: regenerated code with smarter and
   more efficient constant caching.
 * semantics/asf-operations/src/ASF-Normalizations.c: regenerated code
   with smarter and more efficient constant caching.

Tue Sep 19 17:16:33 CEST 2006 <economop@cwi.nl>
 * asf.pc.in: Added forgotten dependency.

Tue Sep 19 11:23:49 CEST 2006 <economop@cwi.nl>
 * Created branch to use refactored asc-support which is more typesafe. This 
   introduces a new dependency on ptable-support.
 * Removed vi folding marks.
 * Added svn keyword anchor ID to all files.
 * Added #ifndefs to header files.

Mon Jul 31 22:37:31 CEST 2006 <jurgenv@cwi.nl>
 * semantics/asfc/src/c-compiler.c,Makefile.am: the ASF compiler now
   uses libtool to link ASF compiled specifications. The size of
   the binaries reduces dramatically, also the link time is faster.
   Let's see how this holds up in terms of portability.
 * Makefile.am: toplevel Makefile.am installs the generated 'libtool'
   script in prefix/libexec for use by asfc later on.

Fri Jul  7 15:38:05 CEST 2006 <jurgenv@cwi.nl>
 * semantics/**/*.c: replaced PT_getArgsArgumentAt by PT_getArgsTreeAt

Mon Jun 19 07:48:56 CEST 2006 <kooiker@cwi.nl>
 * semantics/asfe/src/reduction.c:
   - Fix declaration after statement

Thu May 18 13:44:45 CEST 2006 <jurgenv@cwi.nl>
 * Bumped version to 2.1

Tue May 16 14:25:39 CEST 2006 <jurgenv@cwi.nl>
 * semantics/asfe/src/equations.c: fixed a bug in dealing
   with ambiguities. When the first argument of the outermost function
   of the left-hand side of a rule was an ambiguity constructor, this
   rule would never match.

Wed May  3 13:45:50 CEST 2006 <jurgenv@cwi.nl>
 * Bumped to 2.0

Tue Apr 25 16:39:22 CEST 2006 <jurgenv@cwi.nl>
 * semantics/asfe/src/debug.c: fixed small bug in TIDE interface
   concerning lookup of variables.

Mon Apr 24 22:30:02 CEST 2006 <jurgenv@cwi.nl>
 * semantics/asfe/src/{reduction.c,matching.c}: amb nodes are now lifted
   to constructors lazily (when needed). Innermost takes care to lower
   any ambiguity node that occurs in a normal form, such that the normal
   form will never contain an amb constructor. If an empty amb constructor
   is created, innermost will fail with an error message, and NOT return
   a reduced normal form.

Mon Apr 24 18:38:48 CEST 2006 <jurgenv@cwi.nl>
 * semantics/asfe/src/reduction.c: introduced full memoization on level
   0, but only when nothing was rewritten. Rewriting constants was still
   too expensive, especially in the context of ambiguities.
   

Fri Apr 21 16:47:56 CEST 2006 <jurgenv@cwi.nl>
 * semantics/asfe/src/reduction.c: re-introduced rewriting with ambiguities.
   The basic functionality is to lift ambiguity nodes to amb constructors.
 * rewriting of ambiguities is memoized to prevent exponential behavior
   when rewriting nested ambiguities. This is a hard necessity, without
   it a reasonably small file does not reduce in a reasonable time.
 * TODO: lower ambiguity constructors back to ambiguity nodes.

Wed Apr 19 17:35:39 CEST 2006 <jurgenv@cwi.nl>
 * semantics/asfc/src/Compiler.c: fixed two major bugs in the compiler:
   - it did not add range checks, which can lead to illegal terms
     being constructed, and then matches not succeeding, and them mayhem.
   - it generated array indexes that could run out of bounds in the
     context of tail recursion elimination.

Fri Mar 10 11:32:29 CET 2006 <kooiker@cwi.nl>
 * **/Makefile.am:
   Maintainers use ATerm-dbg library

Wed Mar  8 10:54:42 CET 2006 <jurgenv@cwi.nl>
 * semantics/asfe/src/matching: the matcher will ignore all layout that
   surrounds a star variable in a list. The reason is that if the 
   variable is bound to an empty list, the surrounding layout and separators
   do not exist. This may lead to unbound variables, which leads to
   general mayhem. 
 * semantics/asf-checker: asf-checker warns when interest is shown in layout
   next to a star variable. The 'quickfix' is to change the star variable
   to a plus variable.
 * semantics/*: layout is now first-class in ASF. This means we can
   match and construct layout like any other tree. 

Fri Feb 24 09:53:40 CET 2006 <jurgenv@cwi.nl>
 * semantics/asf/asf-operations: ASF-Normalization.c: the normalizer
   fixes a number of problems with traversal of lexicals and sub-lexicals.
   Currently, what is supported is transformers that visit lexicals,
   accumulators and even accumulating transformers. The precondition
   is that the first argument of the function contains a lexical pattern,
   and with trafo's also the right-hand side of the equation must be
   a lexical pattern.

Tue Jan 31 18:01:50 CET 2006 <jurgenv@cwi.nl>
 * asf/syntax/removevarsyntax: moved to pgen package

Fri Jan 27 14:46:45 CET 2006 <kooiker@cwi.nl>
 * asf/semantics/asfe/src/asfe.idef:
   - Debugging is now a parameter for asfe-rewrite

Wed Jan 18 17:00:38 CET 2006 <{kooiker,jurgenv}@cwi.nl>
 * **/Makefile.am: using ASC_INCLUDES and ASC_LD_FLAGS to compile
   generated code of ASF+SDF specifications
 * configure.in,package: removed dependency on sglr due to
   use of asc-support-config script.

Thu Jan  5 09:10:08 CET 2006 <jurgenv@cwi.nl>
 * **: added rudimentary support for case-insensitive literals. Their
   actual spelling is ignored when matching.
 * asfe: improved error messages with more than one cause.

Sat Aug 27 09:04:30 CEST 2005 <kooiker@cwi.nl>
 * semantics/test/Makefile.am: remove trailing backslash

Mon Aug 22 17:42:23 CEST 2005 <{jurgenv,storm}@cwi.nl>
 * semantics/asfc/src/Compiler.c: fixed major bug in ASF compiler,
   tail recursion elimination generated completely buggy code.

Mon Aug 22 15:27:27 CEST 2005 <jurgenv@cwi.nl>
 * semantics/asfc/src/Compiler.c: compiler now generates tests
   for character class inclusion.
 * semantics/asfe/src/matching.c: interpreter checks character
   class inclusion for variables that range over character classes.

Thu Aug 18 14:06:20 CEST 2005 <jurgenv@cwi.nl>
 * syntax/addeqssyntax/*: Added extra injection around lexical variables
   that range over a character class. The result of the injection encodes
   the original character class (surrounded by CHAR[[cc]]), such that
   the normalizer can retrieve the original type.
 * semantics/asfoperations/*: The ASF-Normalizer uses the information
   stored in the extra injection to retrieve the correct type of 
   a lexical variable.

Tue Aug 16 16:42:06 CEST 2005 <jurgenv@cwi.nl>
 *  asf/syntax/asfsdf-checker/spec/*.asf: The checker accumulates the
    errors and warnings now PER MODULE, such that only the errors for
    a specific module may be extracted, although the entire specification
    had to be analyzed to come up with these errors.

Mon Aug 15 16:37:05 CEST 2005 <jurgenv@cwi.nl>
 * asf/syntax/asfsdf-checker/spec/*.asf: renamed error messages and
   subjects of error messages to comply with the error message standard.

Mon Aug 15 15:08:29 CEST 2005 <jong@cwi.nl>
 * configure.in:
   - add libtool support

Mon Aug 15 14:31:44 CEST 2005 <jurgenv@cwi.nl>
 * * removed "right-hand side of matching condition is constant" warning.

Wed May  4 11:04:14 CEST 2005 <markvdb@cwi.nl>
 * semantics/asfe/src/reduction.c: 
   - added functionality to deal with "complete" attributes
     added to function which should complete be reduced.

Tue May  3 15:29:20 CEST 2005 <markvdb@cwi.nl>
 * Fixed a problem with respect to converting sorts into strings.

Tue Apr 12 17:05:18 CEST 2005 <markvdb@cwi.nl>
 * Upgraded the Sdf-Checker wrt structured lexicals.

Wed Mar 23 15:15:07 CET 2005 <kooiker@cwi.nl>
 * semantics/asfe/src/test-runner.c:
   - prettyTag adds external location to error message, the location of the
   tag is not available anymore after normalizing
   - testOne returns error and location of error 
   - runTests checks on error and passes location to prettyTag 
 * semantics/asfe/src/asfe.{idef,c,tif.h,tif.c}:
   - Removed unused variable ModuleName in run-tests
 * semantics/asfe/src/reduction.c:
   - Removed check on injection in rewriteArgs

Fri Feb 18 10:28:03 CET 2005 <jurgenv@cwi.nl>
 * When called from  the Meta-Environment, the compiler always produces a 
   binary that maps source-to-source by parsing and unparsing the input 
   and output

Thu Feb 17 16:08:51 CET 2005 <jurgenv@cwi.nl>
 * Added commandline option to asfc that activates parsing of
   input file with an available parsetable before rewriting. Now
   we don't need sglr or unparsePT anymore for a deployed ASF+SDF 
   specification.

Tue Feb  8 08:39:23 CET 2005 <jurgenv@cwi.nl>
 * Factored out lifting and lowering from ASF-Normalization spec into
   surrounding C code in asf-operations.
        - this enables keeping layout and annotations without the efficiency
          hazards.
 * Simplified asfe's tide interface w.r.t. variable lookup (finally using
   the location API instead of ATmatch's.

Mon Feb  7 16:39:27 CET 2005 <jurgenv@cwi.nl>
 * Added debugging and bootstrapping tool for ASF: lift-asf.

Fri Feb  4 16:33:56 CET 2005 <jurgenv@cwi.nl>
 * Compiler adapted such that constant lists are not translated to
   nested if-then-else, but to constant terms that are compared with
   term_equal.
 * Recompiler compiler and ASF-Normalization with the new compiler.

Tue Feb  1 17:51:04 CET 2005 <jurgenv@cwi.nl>
 * Changed ASF-Normalizer to deal with annotated specifications
 * Regenerated it, now the tide debugger can be used again

Wed Jan 26 13:35:13 CET 2005 <jurgenv@cwi.nl>
 * Reimplemented and regenerated remove-var-syntax
 * Moved specification of removevarsyntax to asf-library

Tue Jan 25 11:58:24 CET 2005 <jurgenv@cwi.nl>
 * TODO: reimplement and regenerate ASF-apigen
 * Removed implementation for "=" conditions. 
	* asf-upgrade tool is now dead
	* muasf still has = operator. TODO: remove and reimplement part
	  of the muasf2muasf code to fix.
	* asf-checker simplified
	* asf interpreter simplified.
 * ASF now implements structured lexicals:
	- Changes in all files due to API changes 
        - AddEqsSyntax generates different lexical constructor functions.
        * For each lexical syntax section a context-free syntax section
          is generated. Each production is copied and wrapped by a 
          prefix function, in the resulting productions each sortname is
          wrapped by CHARS[[ ]], and each character class too. 
        * Each lexical variables section is translated to a normal
          variables section by transforming the right-hand sides.
          Here too, each sort and cc are wrapped by CHARS[[ ]].
        * Each CHARS[[CC]] is defined by CHAR -> CHARS[[CC]], and
          CHAR is the SDF Character sort renamed to CHAR.
 	- A new tool asf-normalization, written in ASF+SDF has the following
	  functionality at the moment:
		* Mapping lexical constructor functions to lexical trees
		* Removing bracket productions
		* Removing the list wrappers on the lhs of an equation
		  for function that return lists.
	- IDEA: the ASF normalizer already reuses large parts of the SDF 
          normalizer. Why not more, and integrate renaming intro the 
	  ASF-normalizer. This will result in less ToolBus scripts, and
          more reuse.
	- Flattening of AsFix2 changed, which means the implementation
          for functions that return lists could be fixed in both the compiler
          and the interpreter.
        - Literal trees dissappeared, leading to changes in compiler and
          interpreter
        - Compiled specifications no longer rewrite traversal functions 
          that occur in the input term. This is for a number of reasons,
          one of them to simplify bootstrapping  the asf-normalizer.
	- Removed pre-processing from asf interpreter, since this
 	  task is now done by the asf-normalizer
 * Moved addeqssyntax specification to asf-library package
 * Moved compiler specification to asf-library package.
 	- replaced lexical encodings of function semantics ({ } for lists, 
	  _bu_ for bottom-up etc. by context-free FunId modifiers:
		* { FunId } = list
		* [ FunId ] = returns a list
		* | FunId Type Strat Cont | = traversal function
		* TRANSLATE [ FunId ] = list translation
	 	* IGNORE [ FunId ] = ignore during match (known wrapper)
	- TODO: extend modifier syntax with CONSTANT, CONSTRUCTOR, etc.
	  which will make the nametable and the signature superfluous in 
	  many parts of the compiler. Also, more finegrained control of 
	  which applications are CONSTRUCTORS and which aren't will allow
	  for optimizations!
	- Due to new representation of functions returning lists in AsFix, 
	  the are now better supported. 
		* No changes in the interpreter necessary, because it
		  actively flattens nested lists of the same type
	  	* A new module added to the muasf2muasf phase that fully
		  deals with functions that returns lists. The right-hand
	 	  sides of those functions are 'unwrapped'; the list
		  node is removed. This is because they are ALWAYS a
		  child of such a node anyway, thus their result must
		  be spliced in as a sublist. See also pt-support/ChangeLog.
		* Traversal functions that return lists are special;
		  accumulators need to be adapted because their result
		  must be equal to their argument type. Ergo, removing the
		  list node from the result means removing the list node
	   	  from their argument.
		  Transformers that visit a list must return the list 
		  node, so they are not 'unwrapped'. The reason is that
		  the call_kids.. functions eat up a list node, and thus
		  it is not replaced. To fix the extra list nodes at the
		  CALL sites of transformers that return lists, we put
		  the old remove_list run-time function around the calls.
	  	  This is the only place where remove_list is used now.
	- List matching in the interpreter was adapted to deal with the
	  new representation of literal separators.
	- Several new warnings added to asf-checker:
		- test if lexical (or context-free tree that ends up being
		  a lexical) is equal to its own sort name modulo 
		  capitalization.  Because people often use variable names 
                  that look like sort names, this warning detects if a 
                  lexical was intended to be a variable but was not defined.
		- Constant equality or inequality conditions
		- NB: Constant right-hand sides of matching conditions. 
		  This one is not clear yet, it may result in many false 
                  positives.
	- Bootstrapped ASF compiler and ASF normalizer.
 * Manually checked the ASF regression tests and regenerated them because
   of changed AsFix representation.

Fri Nov 19 16:30:44 CET 2004 <jurgenv@cwi.nl>
 * Merged whole package asf from 1.5 branch to trunk. Most changes had
   to be done in asf-checker. In asfsdf-checker something happened to,
   I removed the merged AsfSdfChecker.c file, keeping the one in the trunk.
   Other changes in asfsdfchecker.c I can not explain.

Fri Nov 19 14:58:25 CET 2004 <jurgenv@cwi.nl>
 * Replaced dependency on Tide by dependency on small package tide-support.

Mon Nov  1 14:53:06 CET 2004 <a.t.hofkamp@tue.nl,jurgenv@cwi.nl>
 * introduced Albert Hofkamps improvements to the asf-checker:
  - Support for {wild} and {strict} variable attributes added.
    A {wild} attribute indicates that the variable is a wildcard,
    warnings will be issued when you use a {wild} variable after it
    has been instantiated.
    A {strict} attributes indicates that the variable is intended to  
    be used after instantiation, if not a warning will be issued.
  - For backward compatibility, a variable without any attributes
    does not provoke any warnings.
  
Wed Sep 29 15:35:02 CEST 2004  <markvdb@cwi.nl>
 * Moved the cons attribute check from SdfChecker to AsfSdfChecker.

Tue Sep 28 15:51:07 CEST 2004 <jurgenv@cwi.nl>
 * Equations are now collected with a newline in between every equation,
   this helps in debugging dumped .eqs files. Otherwise it is completely
   useless.

Thu Sep 23 18:40:56 CEST 2004 <markvdb@cwi.nl>
 * Fixed the strange warnings wrt start-symbols.

Thu Sep 16 11:42:41 CEST 2004 <jurgenv@cwi.nl>
 * Merged Tide support for the asfe debugger from
   the asf-sdf-meta_1-5_tide branch into the asf-sdf-meta_1-5 branch
 * Bumped to 1.10

Thu Sep  9 10:30:26 CEST 2004 <markvdb@cwi.nl>
 * Regenerated the C code of the asfsdfchecker because
   of efficiency increasing refactorings.

Fri Aug 27 15:52:14 CEST 2004 <markvdb@cwi.nl>
 * Improved the specificity ordering of lists.

Fri Aug 27 14:43:11 CEST 2004 <jong@cwi.nl>
 * refactor to use new PT_yield functions in MEPT API

Fri Jul 16 15:18:45 CEST 2004 <markvdb@cwi.nl>
 * Added a warning on missing exported start symbols.
 * Improved the error messages on using charclasses in
   context-free syntax sections.

Thu Jun 10 09:41:41 CEST 2004 <{jong,jurgenv}@cwi.nl>
 * semantics/asfc/src/lex-cons.c: explicit cast to (int) in PT_makeTreeChar

Wed Jun  9 15:38:01 CEST 2004 <jong@cwi.nl>
 * semantics: regenerate APIs, fix resulting errors

Tue Jun  8 11:13:30 CEST 2004 <jurgenv@cwi.nl>
 * Regenerated muasf library and adapted asf2muasf.
 * Refactored implementation of traversal functions in the compiler. It
   is now a separate phase written as a transformation on the generated 
   C code of a traversal function.
 * Added implementation for the missing combinations of traversal attributes
   to the compiler: bottom-up,break and top-down,continue.
 * Added implementation for traversal functions that have no equations
   to the compiler.
 * Bootstrapped compiler three times

Mon May 24 10:02:19 CEST 2004 <markvdb@cwi.nl>
 * Promoted a number of asfsdf-checker warnings into errors.


Mon May 17 09:48:59 CEST 2004 <kooiker@cwi.nl>
 * semantics/asf-checker/src/Makefile.am: Added PT-Support to LD_ADD section 

Tue Jun  1 12:58:54 CEST 2004 <jurgenv@cwi.nl, sgmcorne@science.uva.nl>
 * Made asf package depend on tide package (always).
 * Tide is always enabled in the ASF interpreter.

Wed May 12 14:09:17 CEST 2004
 * Fixed bug 297, message wrt to use of CHAR were not clickable.


Fri May 14 11:13:45 CEST 2004 <jurgenv@cwi.nl>
 * Getters and setters were not generated by ASFSDFApigen because of
   a major oversight.

Wed May 12 14:09:17 CEST 2004
 * Fixed bug 297, message wrt to use of CHAR were not clickable.

Mon May 10 10:57:20 CEST 2004 <jurgenv@cwi.nl>
 * added new warning: If lexical is exactly the same as the sort name
   it is parsed over it was probably a variable!
 * Bumped version to 1.9

Thu May  6 21:09:33 CEST 2004 <markvdb@cwi.nl>
 * Fixed the command line version of AsfSdf-Checker.

Tue May  4 13:25:36 CEST 2004 <markvdb@cwi.nl>
 * Improved the clickable error messages and fixed bug 295.

Mon May  3 16:28:32 CEST 2004 <markvdb@cwi.nl>
* All clickable warnings and error messages have become
  clickable.
* Fixed the bugs reported by Paul and Jurgen.

Tue Apr 27 16:45:27 CEST 2004 <markvdb@cwi.nl>
* Fixed the erroneous error messages generated in case of circular
  imports, see bug 219.

Fri Apr 23 09:59:17 CEST 2004 <markvdb@cwi.nl>
 * Fixed the bug related to the specificity of empty lists
   and list variables. Added a related test.
 * Added context-free start symbol ASF-Module to generated
   equations syntax.

Mon Apr 19 16:18:50 CEST 2004 <jurgenv@cwi.nl>
 * compiler uses output file name instead of specification name
   to compute the binary name and the .idef and .tifs file names.

Fri Apr 16 17:26:37 CEST 2004
 * Fixed bug 267: if a default rule was entered before a
   non-default rule, it remained in front of the list of
   rules.

Wed Apr 14 14:27:07 CEST 2004 <markvdb@cwi.nl>
 * Regenerated the asfsdf-checker in order to detect CHAR sorts
   in production rules.
 * Removed a non-terminating rewriting, fixed bug 125.

Wed Apr 14 14:17:44 CEST 2004 <jurgenv@cwi.nl>
 * Generate equation syntax for context-free start symbols too.

Wed Apr 14 11:24:34 CEST 2004 <jurgenv@cwi.nl>
 * Fixed bugs in ASFSDF Api generator: variables names now contain
   underscores between type and postfix, labels are not used for
   variable names anymore.

Fri Mar 19 17:26:46 CET 2004 <markvdb@cwi.nl>
 * Fixed the bug reported by Jorgen Iversen and me wrt to
   atmp0010 and atmp0010, changed into atmp0_0_1_0 and
   atmp0_0_10.

Wed Apr 14 11:30:56 CEST 2004 <jurgenv@cwi.nl>
 * Fixed bugs in ASFSDF Api generator: variables names now contain
   underscores between type and postfix, labels are not used for
   variable names anymore.

Wed Apr 14 10:54:18 CEST 2004 <m336@cwi.nl>
 * Call asc-support functions with an SGLR_ParseTable, not ATerm

Tue Mar 23 11:03:14 CET 2004 <{jong,kooiker}@cwi.nl>
 * upgrade wrt to new MEPT API

Wed Mar 10 12:53:13 CET 2004 <{jong,kooiker}@cwi.nl>
 * Use new Error API
 * Upgrade static buffer sizes from 1024 10240 so construction of
   system()'able commandlines doesn't SEGV for now.

Wed Mar 10 09:56:02 CET 2004 <jurgenv@cwi.nl>
 * Added a new check to the asf-checker: functions that are wrapped in a 
   list on the left-hand side of a rule almost never rewrite. The reason
   is that people sometimes give the wrong return type to this function:
   it should have been a list but it is the element type of the list.

Tue Mar  2 15:42:10 CET 2004 <jurgenv@cwi.nl>
 * fixed a bug in the condition checker:
   id := f(id)
   was not recognized as an error because the left-hand side was processed
   first, indicating that id was indeed initialized, before the right-hand
   side was checker for uninitialized variables.

2004/02/16 (markvdb@cwi.nl)
 * Added the top module name to the asfsdf-checker.

Wed Feb 11 15:00:11 CET 2004 <jurgenv@cwi.nl>
 * Added a phase to asfc that removes unused variables after generating
   the C code

Tue Feb 10 15:27:49 CET 2004 <m336@cwi.nl>
 * upgrade auto* to: autoconf 2.59, automake 1.7.9, libtool 1.5.2


Mon Feb  9 11:39:22 CET 2004 <jurgenv@cwi.nl>
 * Added a prototype compiler from muASF to TOM+Java currently supporting
   only the following ASF features:
     - simple rewrite equations
     - default equations
 * Finished the asf-api specification; a generator for getters and setters
   and identification predicates in ASF+SDF. The input of the specification
   is an SDF-module, the output is a shadow SDF module with the same 
   parameters that implements getters and setters for all productions that
   have cons and label attributes.

2003/07/01 (jurgenv@cwi.nl)
 * In the compiler, the asf2muasf phase now adds the result type of every 
   function as an attribute to the funcdef in the signature. 
 * The compiler provides the types of the result of a builtin to
   every call to a builtin and so does the interpreter.

Mon Feb  2 16:43:59 CET 2004 <{jong,kooiker}@cwi.nl>
 * fix Makefile.am to get "distcheck" working

2003/01/29 (markvdb@cwi.nl)
 * Introduced the error support in the AsfSdfChecker.

2003/01/07 (jurgenv@cwi.nl)
 * Set version to 1.8
 * Link all compiled specifications against -lErrorAPI because asc-support
   needs that

2003/12/23 (jurgenv@cwi.nl)
 * added dependency on error-support

Mon Dec  8 15:11:54 CET 2003 <jong@cwi.nl>
 * syntax/asfsdf-checker/spec/*.asf: upgraded condition syntax

Thu Dec  4 15:33:42 CET 2003 <jong@cwi.nl>
 * semantics/asf-upgrade/.cvsignore added
 * syntax/asfsdf-checker/src/AsfSdf-Checker.c regenerated

2003/11/21 (jurgenv@cwi.nl)
 * Added dependency on sglr package because a new builtin uses libsglr

2003/11/10 ({markvdb,jurgenv}@cwi.nl)
 * Fixed a subtle bug in the implementation of := and !:= conditions
   in asfe. The interpreter did a lot of extra work for nothing.

2003/11/09 (jurgenv@cwi.nl)
 * Added implementation of "!:=" to the asfc compiler. For each negative
   match a new function is generated. The arguments of the function are
   the current variables in the context of the condition. The function
   returns either matchfailed or matchsucceeded. The original condition 
   is then replaced by an equality condition between matchfailed and a call
   to the newly generated function.
 * Upgraded condition syntax in the compiler specification
 * An ASF file is now an ASF-Module which consists of a list of ASF-Sections.
   An ASF-Section is either an equations sections or a tests sections for now.
 * Synchronized the three version of the ASF syntax, the one in
   Add-Eqs-Syntax, the one in asf-support/lib/Asf.label.def and the one
   in the asf-library
 * Updated asfoperations tool to be able to extract a list of equations or
   a list of tests from the new ASF module syntax
 * Regenerated Add-Eqs-Syntax to deal with the new ASF module syntax
 * Updated asfchecker and asfupgrader to deal with the new syntax
 * Simplified the detection and forwarding of builtin functions in asfe. This
   was possible because the ASFAPI functionality dissapppeared earlier.

2003/11/06 (jurgenv@cwi.nl)
 * Added "!:=" the condition operator that fails if a match succeeds and
   succeeds when a match fails.
 * Added implementation of "!:=" to the interpreter
 * Added checking of "!:=" operator to asf-checker. The variables that
   are used in the left-hand side of this operator are not instantiated
   so they may not be used afterwards by the other conditions or the
   right-hand side.
 * Removed addapisyntax functionality because it is never used. It should
   be replaced in the future by a specification generator that takes
   an annotated SDF2 definition and generates an ASF module with some
   setters and getters etc.

2003/11/05 (jurgenv@cwi.nl)
 * Added asfupgrader, a tool that upgrades the old condition syntax 
   automatically to the new syntax.

2003/11/04 (jurgenv@cwi.nl)
 * Added two new condition syntaxes: "==" equality and ":=" match.
   They are each translated to "=" now before interpreting or compiling. 
 * The asfchecker gives much more informative error messages when either of 
   the new condition syntaxes is used. 
 * In the future, the old "=" syntax will dissappear such that the code
   of the interpreter and the compiler can be simplified (and optimized).

2003/10/17 (markvdb@cwi.nl)
 * Added a message on deprecated unquoted literals.
 * Added a message on usage of non Sort symbols in
   right hand side of lexical functions.
 * Adapted the asf-checker in order to check the newly introduced tests.

2003/10/17 (jurgenv@cwi.nl)
 * Added syntax for writing positive and negative tests to ASF
 * Added test-runner and test-runner interface to asfe
 * Added conditional tests

2003/10/09 (markvdb@cwi.nl)
 * Added a check on ASF sorts.

2003/10/09 (jurgenv@cwi.nl)
 * Results from calls to builtin functions are always normalized before
   continuing. 

2003/10/07 (markvdb@cwi.nl)
 * Adapted to new tuples.

2003/10/06 (jurgenv@cwi.nl)
 * Extended asfc compiler to support calls to builtin functions. For each
   builtin function that is used in the equations an equation is generated
   that calls ASC_<builtin-name> function with the proper arguments.
 * Regenerated the compiler with the new code
 * Added implementations of all builtins for compiled specifications.
   Note that pos-info does not work because annotations are lost during the
   conversion from AsFix to muASF terms.
 * Removed toolbus communication builtins and support for these builtins
   from asfe.idef

2003/10/03 (markvdb@cwi.nl)
 * Removed the set and perm symbol in the library.

2003/10/03 (jurgenv@cwi.nl)
 * Fixed some tests by retrieving the original specification and regenerating
   the .eqs files and sometimes the input and output term files. The reasons
   for failing were:
     - the AsFix representation of the terms was out-of-date
     - the eqs file were regenerated from the specification, but the 
       specification was changed by accident somehow somewhere in the past

2003/10/02 (markvdb@cwi.nl)
 * Added ASF prefix to all sorts in the equations syntax.
 * Constructor information is no longer suppressed.
 * Regenerated AddEqsSyntax based on this new convention.
 * Regenerated all *eqs files in the test directory.

2003/10/01 (markvdb@cwi.nl)
 * Removed a number of warning generated by the asfsdfchecker.
 * Regenerated the asfsdf-checker.

2003/10/01 (markvdb@cwi.nl)
 * Added the imports of a number of specifications in order
   to be compatible with the new library.
 * Regenerated a number of C sources.

2003/09/25 (markvdb@cwi.nl)
 * Added a check to the asf-checker to check that the outermost
   function symbol of the left hand side of an equation is
   *NOT* a constructor.

2003/09/22 ({storm,jurgenv}@cwi.nl)
 * Changed implementation of ordering builtin to use a stable complete
   ordering.
 * Added Measure.sdf to generation of builtin term api.

2003/09/22 (jurgenv@cwi.nl)
 * Added lifting to PT_Trees and ATerms to builtin library
 * Added generic unparser to Bytes to builtin library

2003/09/20 (jurgenv@cwi.nl)
 * The asf-builtins library now contains a generated API from a selected
   number of modules in the asf-library package. Currently, only
   basic/Booleans is included. Modules can be added by editing a 
   make variable (after adding cons and label attributes in the SDF module).

2003/09/19 ({paulk,jurgenv}@cwi.nl)
 * Added very unsafe term comparison builtin to ASF. It's unsafe because
   it does not take LAYOUT and annotations into account. Obviously,
   we have a TODO.

2003/09/16 (jurgenv@cwi.nl)
 * Moved ASF+SDF library to new asf-library package

Tue Sep 16 15:19:19 CEST 2003 <jong@cwi.nl>
 * asf/library/sandbox/toolbus:
   - add extraction rules to find tool definitions
   - refine query to find unmatched sends 

Tue Sep  2 11:22:39 CEST 2003 <{jong,kooiker}@cwi.nl>
 * configure.in: bump to 1.7.2
 * semantics/asfc/src/asfc.c:
   - fix bug in deriving basename from "equations.eqs": the first '.'
     was used to find the extension, but this fails horribly if instead
     of 'equations.eqs" you feed it "../../path/to/equations.eqs".
     Introduced function 'basename' to properly derive basename.
   - patch basename function to also strip directory-prefix, if present.

2003/08/31 ({jong,jurgenv}@cwi.nl)
 * Set version to 1.7.1

2003/07/29 ({jurgenv,markvdb}@cwi.nl)
 * made RWsetError type-safe (it called PT_yieldTree on an ATerm, now
   it is always a PT_Tree)
 * Fixed a serious of by 10 error (wrote an error message into a buffer that
   was too small) 

2003/07/24 (markvdb@cwi.nl)
 * Added lexical restrictions on ModuleWord and ModuleId.
 * Added a warning when literals are detected in the right hand side
   of productions rules.

2003/07/16 (jurgenv@cwi.nl)
 * Fixed a bug in asfc, it could not deal with ATermLists in terms stored
   in attributes of productions.

2003/07/02 (jurgenv@cwi.nl)
 * Version 1.7

2003/06/26 (jurgenv@cwi.nl)
 * Added package definition file

2003/06/25 (jurgenv@cwi.nl)
 * Renamed modules of the asfc compiler specification to use
   compound module names.

Thu Jun 19 13:33:12 CEST 2003 <jong@cwi.nl>
 * Use compiled DisplayQuery
 * Add explicit packing of rewritten terms (these can also be huge!)
 * Improved term2str and make-signature
 * added bracket rule to basic/Strings

2003/06/19 ({jong,markvdb}@cwi.nl)
 * Removed "Id := process-id" in idef-generation

2003/06/11 (markvdb@cs.vu.nl)
 * Fixed a bug report by Ernst-Jan Verhoeven. Double star list
   variables resulted in wrong C code.

2003/05/19 ({jong,markvdb}@cwi.nl)
 * Added explicit ATBpack and ATBunpack.

2003/05/07 ({markvdb,jong}@cwi.nl)
 * Improved the AsfSdfChecker wrt error messages in combination with
   traversal functions.

2003/04/29 (markvdb@cwi.nl)
 * Fixed the annoying bug wrt unnecessary warnings in case of parameters.
 
2003/02/14 (jurgenv@cwi.nl)
 * Fixed a minor bug in asf-operations, renaming in modules that have no 
   "equations" keyword failed and resulted in an abort.

2003/04/01 (markvdb@cwi.nl)
 * Set no longer re-use the List module. 
 * Square brackets are replaced by curly brackets.

2003/03/31 (markvdb@cwi.nl)
 * Specificity ordering on equations introduced in asfe.
 * Added a test to check that asfe and asfc have the same behaviour.

2003/03/24 ({markvdb,iversen}@cwi.nl)
 * In asfe annotations are propagated over injections during rewriting.

2003/02/14 (jurgenv@cwi.nl)
 * Fixed a minor bug in concat-asf

2003/02/14 (jong@cwi.nl)
 * Fix some #include issues with strlen/strcmp

2003/02/18 (jurgenv@cwi.nl)
 * The files of the installed ASF+SDF library are no longer write-protected
   either. A different solution must be found to make these files read-only
   when opening them in the Meta-Environment.

2003/02/13 (jurgenv@cwi.nl)
 * The directories of the installed ASF+SDF library are no longer
   write-protected automatically.
 * ASF extended with new builtins that can generate ToolBus events from
   within a specification. This can be used to connect other tools to
   a specification or to let a specification influence the Meta-Environment 
   at run-time. For example: tb-snd-note(ATerm) sends a note into the
   ToolBus.
   
2003/02/12 (markvdb@cs.vu.nl)
 * Improved the asfchecker with respect to ambiguities.

2003/02/11 ({jong,markvdb})@cwi.nl)
 * Bumped into 1.7beta.
 * Added \r as character in quoted literals.
 * Improved AlphaNumericalEscChar.
 
2003/02/07 (jurgenv@cwi.nl)
 * Added new builtin get-term-anno to be able to retrieve posinfo information
   using asfe
 * Bumped to 1.7beta

2003/01/22 ({jong,jurgenv}@cwi.nl)
 * ToolBus support /required/ not /optional/ !!

2003/01/22 (markvdb@cwi.nl)
 * Release 1.6
 * LGPL license

2003/01/10 (markvdb@cwi.nl)
 * Added a test to test a bug reported by Paul.

2003/01/09 (jurgenv@cwi.nl)
 * Added asfix syntax to library

2002/10/31 (vandenbr@loria.fr)
 * simplified the code with respect to storing equations. In fact, this
   functionality has been complete removed.

2002/10/29 (vinju@loria.fr)
 * Made asf package independent of ToolBus tools by putting tool interfaces
   in repository and removing implicit build rules for idef2tif and tifstoc

2002/10/13 (vinju@loria.fr)
 * Meta-Environment scripting is put in a separate package: asfsdf-meta
 * Put syntax related tools in syntax subdirectory and semantics related
   tools in semantics directory to create a better overview in this 
   large package.
 * Incorporated asf-library package in this package. 
 * Moved builtins code from library to semantics.
 * Asfe accepts ambiguous terms when it is connected to the Meta-Environment

2002/10/09 (vinju@loria.fr)
 * Added dependency on meta package
 * Added directory meta-scripts that contains the meta-environment ToolBus
   interface. These two scripts with the meta package together form the
   ASF+SDF Meta-Environment now.
 * Added the 'meta' script that calls the 'generic-meta' script from the meta
   package with the correct ToolBus include path.

2002/10/08 (vinju@loria.fr)
 * Refactored asf-operations tool

2002/09/27 ({vinju,moreau}@loria.fr)
 * Moved generic symbol renaming functionality to pt-support

2002/09/27 (markvdb@cs.vu.nl)   
 * Added an operation to obtain the list of equations given a
   parse tree of the equations.

2002/09/26 (markvdb@cs.vu.nl)   
 * Moved the renaming and parameterization functionality for equations
   to the asf directory.

2002/09/09 (vandenbr@loria.fr)
 * Added "#!/bin/sh" to generated test scripts in order to make
   them work on CYGWIN.
   
2002/07/30 (jurgenv@cwi.nl)
 * Bumped to 1.6beta
 * Added asserts concerning ill formed ambiguity clusters in asfe.

2002/07/24 (jurgenv@cwi.nl)
 * Release 1.5

2002/07/16 (vandenbr@loria.fr, jurgenv@cwi.nl)
 * Fixed a bug in the asf interpreter concerning functions that return 
   lists but are not normalized to lists always.

2002/07/01 (vandenbr@loria.fr)
 * Lexical and ambiguity constructor explicitly added to the
   corresponding productions.

2002/06/27 (jurgenv@cwi.nl)
 * Simplified (list) matching and condition checking algorithms in asfe.

2002/06/26 (jurgenv@cwi.nl)
 * Improved asf-checker a bit. Less 'cascading' error messages. 
 * Removed 'instantiated and uninstantiated variables' error message.

2002/06/26 (vandenbr@loria.fr)
 * Fixed a number of small bugs.

2002/06/24 (vandenbr@loria.fr)
 * Improved the asfsdf-checker with respect to checking the traversal
   attributes.
 * First version of an asf-checker added.

2002/06/10 (markvdb@cs.vu.nl)
 * Fixed the "restore-brackets bug" reported on 27-03-2002.
 * Improved the compiler specification with respect to processing
   names.

2002/06/05 (jurgenv@cwi.nl)
 * Made concat-asf robust against empty input files

2002/06/05 (vandenbr@loria.fr)
 * Bug fix wrt. more than one list pattern in a list pattern.

2002/06/03 (jurgenv@cwi.nl)
 * Two new traversal directives added (interpreter only): 
   break and continue. A traversal function either breaks of traversal on
   the current branch after a successful application of a rewrite rule, 
   or continues traversing.

2002/05/31 (jurgenv@cwi.nl)
 * Added the notion of failure to the rewriting process in asfe. 
   Every rewrite step/traversal/built-in can return FAIL instead of a reduct. 
   Depending on the context different actions can now be activated for FAIL 
   and success. This can be used for experimenting with different traversal
   strategies.
 * Bumped version of asfe to 0.6

2002/05/22 (jurgenv@cwi.nl)
 * Fixed dependency bug on asf-library in configure.in

2002/05/22 (vandenbr@loria.fr)
 * Based the specifications of AddApiSyntax, AddEqsSyntax,
   AsfSdfChecker, RemoveVarSyntax on the Sdf version of the
   new asf-library.

2002/05/15 (jurgenv@cwi.nl)
 * Connected asfe to asf-builtins library
 * Added configure switch for asf-library (for builtins)

2002/05/14 (jurgenv@cwi.nl)
 * Fixed a bug in addeqssyntax that caused module with multiple import 
   sections to crash during parsetable generation.
   Example: "module A imports B imports C"

2002/05/13 (jurgenv@cwi.nl)
 * The asfc compiler renames slashes to underscores in the module name
   to cope with compound module names.
 * Bumped to 1.5beta

2002/04/19 (jurgenv@cwi.nl)
 * Release 1.4

2002/04/18 (vandenbr@loria.fr)
 * addapisyntax can now deal with parameterized sorts.
 * AsfSdfChecker checks whether production renamings are used,
   if so an error message is generated:
   "production-renamings-not-supported".

2002/17/04 (jurgenv@cwi.nl)
 * Fixed a bug in traversal functions with more than 7 arguments.

2002/27/03 (jurgenv@cwi.nl)
 * Made asfc call configured c compiler and use configured c compiler flags.

2002/03/26 (vandenbr@loria.fr)
 * Added a check on the use of character classes in context-free
   syntax sections.
   
2002/03/25 (vandenbr@loria.fr)
 * Regenerated the C code of the AsfSdf-Checker, because the
   Sdf-Checker can handle incomplete specifications and
   aliases.

2002/03/22 (vandenbr@loria.fr)
 * Restructured the Sdf-Checker, partly moved to asf directory.

2002/13/03 (jurgenv@cwi.nl)
 * Fixed a bug in asfc. The compiler ignored constant arguments of functions
   like: f("t" | "f") -> F in some cases.
 * Bumped asfc to 2.5

2002/03/04 (vandenbr@loria.fr)
 * Introduced parameterized sorts.

2002/02/27 (jurgenv@cwi.nl)
 * Fixed a bug in the is-<cons> builtin. If it returned false it would
   match correclty in the conditions.
 * Bumped to 1.4beta
 * Removed automatic predicate generation for prefix functions without
   a cons annotation.

2002/02/13 ({jurgenv,markvdb}@cwi.nl)
 * Released 1.3
 * Fixed memory leak in restore-brackets

2002/02/12 (jurgenv@cwi.nl)
 * Fixed a serious bug in the asf compiler. It couldn't handle lists
   at the top of matching conditions.
 * Set version of asfc to 2.4

2002/02/05 (jurgenv@cwi.nl)
 * Bumped to version 1.3

2002/02/05 (jurgenv@cwi.nl)
 * Improved usage message of concat-asf
 * Pos-info is no longer needed for asfe if debugging with Tide is 
   not activated.

2002/01/23 (jurgenv@cwi.nl)
 * Fixed a bug in addapisyntax; sequences were not supported.

2002/01/22 (jurgenv@cwi.nl)
 * Changed addapisyntax a bit after suggestions of P. Mosses. 
   1. You can use labels without a cons now.
   2. Added support for prefix functions. No constructor is generated
      but there is a predicate (is-<function-name>).

2002/01/16 (jurgenv@cwi.nl)
 * Added '-m' switch to asfe. If this switch is given the interpreter marks
   all new layout (introduced by the equations) such that a (partial)
   pretty-printer can take care of it.
 * Bumped version of asfe to 0.5.

2002/01/15 (jurgenv@cwi.nl)
 * Added a tool addapisyntax that add syntax based on cons attributes
   and labels. A cons attribute generates a prefix constructor function
   and an predicate function. A label generates a getter and a setter.
 * Added semantics for generated api syntax in the interpreter.
 * Added preliminary support for ASF primitives (or builtins) using the
   "builtin(<name>)" attribute.

2002/01/08 (vandenbr@loria.fr)
 * Adapted the edit-term script and moved functionality to the
    rewriter.
    
2001/12/17 (vandenbr@loria.fr)
 * Add a bracket restoration tool.

2001/12/14 (jurgenv@cwi.nl)
 * Added experimental support for accumulating transformers to the compiler.
 * Added tests for top-down and bottom-up accumulating transformers

2001/12/13 (jurgenv@cwi.nl)
 * Added support for traversal functions in the input term of a spec.
 * Added some test files for this.
 * Moved traversal function handling functionality from asfc to asc-support.
 * Bumped asfc version to 2.3
 * Bumped package version to 1.2.2beta

2001/12/06 (jurgenv@cwi.nl)
 * Fixed a bug in accumulating transformers. Results of such traversal
   functions had incorrect types and could not be used in conditions.

2001/11/29 (jurgenv@cwi.nl)
 * Adapted all components to cope with new production attributes (no 
   automatic quoting anymore).
 * Adapted regression tests by hand to check the changes.

2001/11/25 (mdejonge@cwi.nl)
 * package now uses toolbuslib package
 * extended functionality of program-check.m4 macros

2001/11/21 (jurgen@cwi.nl)
 * Fixed a bug in the compiler. Functions with list arguments were not
   compiled correctly, resulting in core dumps.
 * Bootstrapped compiler and regenerated addeqssyntax.
 * Bumped version of asfc to 2.2

2001/11/21 (jurgen@cwi.nl)
 * Bumped to 1.2.1
 * Fixed a (part of a) serious bug in the list matching code of asfe concerning 
   list separators.
 * Bumped version of asfe to 0.4
 * Added '-a' switch to asfe to activate rewriting of ambiguous terms.

2001/11/20 ({olivierp,jurgenv}@cwi.nl)
 * Fixed wrong tag reporting in error messages and TIDE stack trace.
 * Fixed a bug in the interpreter concerning uninitialized list variables
   in the right-hand side of an equation.
 * Fixed stack frame identification for TIDE in asfe.

2001/11/13 (jurgenv@cwi.nl)
 * Fixed bash compatibility bug in system call in asfc for SunOs.

2001/11/13 (markvdb@cwi.nl)
 * Replaced ASC_applyFunctionToTree by PT_applyFunctionToTree.
 * Removed unused argument from PT_applyFunctionToTree.

2001/11/12 (jurgenv@cwi.nl)
 * Added a '-l' option to asfe that replaces all layout by a single space
   in the output term (used for testing compatibility with compiled
   specificatons).
 * Moved tests of asfc and asfe to shared test directory. Results for
   interpreted and compiled specifications are now checked to be equal.
 * Added a number of tests for traversal functions and sdf2 symbols.
 * Moved apply-function tool to pt-support package

2001/11/07 (jurgenv@cwi.nl)
 * Fixed a bug in the compiler. More than one rewrite rules DIRECTLY over a 
   list were not handled correctly and resulted in runtime core dumps.
 * Added support for transformers that visit a list to the compiler.
 * NOTE: transformers and accumulators are now fully supported by the
   compiler.

2001/11/06 (jurgenv@cwi.nl)
 * Traversal functions in the compiler: 
   - added support for traversal functions with a single variable as the first
     argument in a defining equation.
   - added support for accumulators that return a list symbol directly.

2001/11/06 ({jurgenv,markvdb}@cwi.nl)
 * Removed module identifiers from productions:
   - Regenerated the compiler. 
   - Regenerated the MuASF library. 
 * Changed commandline options of asfc.
   - the name of a specification is automatically computed from the name
     of the input file. This can be overridden by the -n option.
   - if input is stdin, the -n option is obligatory.
   - the standalone compiler does not call gcc by default anymore, only
     if you provide the -c option. (the ToolBus version still compiler to
     binary by default).
 
2001/11/05 ({jurgenv,markvdb}@cwi.nl)
 * Removed module identifiers from productions:
   - Re-generated Add-Eqs-Syntax.c
   - Re-generated Remove-Var-Syntax.c
   - Adapted apply-function tool.

2001/11/02 (jurgenv@cwi.nl)
 * Added support for accumulators to the compiler.
 * RESTRICTION: accumulators that return a list sort are not supported yet.

2001/11/01 (jurgenv@cwi.nl)
 * Added support for traversal functions to the compiler (transformers only).
   Bottom-up or top-down with optionally extra variables.
 * RESTRICTION: just a variable as the first argument of a traversal
   function in the left-hand side of a defining equation are NOT allowed.
 * RESTRICTION: transformers that visit lists are not supported yet.

2001/10/25 (jurgenv@cwi.nl, markvdb@cwi.nl)
 * Optimized evaluator. Lexical constructor functions are now imploded
   to real lexical trees.

2001/10/11 (mdejonge@cwi.nl)
 * Added (generated) manual pages to EXTRA_DIST variable because not
   everybody has pod2man available

2001/10/01 (jurgenv@cwi.nl)
 * Refactored the rewriting code in the ASF interpreter. Divided the
   innermost rewriting function into smaller subfunctions.
 * Refactored the code for the traversal functions in the ASF interpreter.
   The interpreter now supports the following traversal attributes:
     - traversal(trafo,bottom-up), 
     - traversal(accu,bottom-up), 
     - traversal(trafo,accu,bottom-up), 
     - traversal(trafo,top-down), 
     - traversal(accu,top-down), 
     - traversal(trafo,accu,top-down) 
 * For backward compatibility the "traverse" attribute is still supported.

2001/09/27 (jurgenv@cwi.nl)
 * Made some important changes in the Sdf grammar:
     - added:   ATerm                      -> Attribute 
     - removed: "cons" "(" term:ATerm ")"  -> Attribute 
                "constructor"              -> Attribute 
                "memo"                     -> Attribute 
                "traverse"                 -> Attribute 
     - refactored the ATerm grammar a bit
 * NOTE: These changes affect any specification that imports the SDF 
         grammar.
 * Adapted compiler frontend to cope with new AsFix attribute format.
 * Changed regression tests terms of asfc and asfe to new AsFix attribute
   format.

2001/08/30 (markvdb@cwi.nl)
 * Improved the efficiency of the Integer addition in the compiler spec.

2001/08/28 (jong@cwi.nl)
 * Code improvements to satisfy gcc-3.0.1
 * version 1.2beta started

2001/08/14 (jong@cwi.nl)
 * Folded configure.in and weeded out some unused libs/dlopen/INSTDIR stuff
 * filtereqssyntaxtool now linked against $(SOCKLIBS)
 * filtereqssyntaxtool.idef added to EXTRA_DIST

2001/08/13 (jong@cwi.nl)
 * Added include directives for ToolBus in filtereqssyntax

2001/08/08 (jurgenv@cwi.nl)
 * Added a new tool: filtereqssyntax that disambiguates ASF equations
   and condition by choosing the least number of injections in the
   left-hand-side. In time, this filter can replace the generic injection 
   count filter in sglr.

2001/08/07 (mdejonge@cwi.nl)
 * asfc/src/c-code.c: Changed -DMAIN_<module-name> to -DASF_MAIN

2001/07/20 (jurgenv@cwi.nl)
 * Added rewriting of ambiguity clusters; addeqssyntax generates
   "amb({Symbol ","}+) -> Symbol" and asfe lifts ambiguity clusters
   to this syntax before rewriting and flattens them back when finished.
 * Fixed asfc such that modules with no equation compile to a binary
   that does nothing but building a normal form.
 * Set version of asfe to 0.3.
 * Set version of addeqssyntax to 2.1

2001/07/19 (jurgenv@cwi.nl)
 * Generalized the optimization for recursive list functions to
   any recursive function.
 * addeqssyntax adds syntax for each declared symbol too.

2001/07/18 (jurgenv@cwi.nl)
 * Fixed optimization of recursive list functions. In combination
   with automatic constructor detection, a large speedup can be
   expected.
 * asfc version to 2.1

2001/07/17 (jurgenv@cwi.nl)
 * Added automatic constructor detection to asfc

2001/07/17 (jong@cwi.nl)
 * version 1.0 released, bumped to 1.1

2001/07/16 (jong@cwi.nl)
 * documented bump to version 1.0

2001/07/12 (jong@cwi.nl)
  * patched Makefile.am's to comply with new location of -lATB

2001/07/10 (jurgenv@cwi.nl)
  * Added support for rewrite rules with a list as outermost function
    to asfc

2001/07/09 (jurgenv@cwi.nl)
  * started new collection of regression tests for asfc

2001/07/06 (jurgenv@cwi.nl, markvdb@cwi.nl)
  * version now 1.0
  * Removed C code generated by old compiler from RemoveVarSyntax.
  * Removed C code generated by old compiler from AddEqsSyntax.
  * Added C code generated by new compiler.

2001/07/04 (jurgenv@cwi.nl)
  * Replaced asfix2muasf frontend by a new frontend, written in C: asf2muasf
  * Removed reshuffling from the compiler
  * Slightly altered the backend, muasf2c to be able to handle asfix2me muasf.
  * Changed the interface of asfc to read in a .eqs file and print out C code.
  * Bootstrapped the compiler to obtain an AsFix2ME compliant asf compiler.
  * See also: asc-support package

2001/07/04 (markvdb@cwi.nl)
  * Removed a bug from the evaluator, which was there all the time,
    nested sublist were not treated correctly!

2001/06/18 (jurgenv@cwi.nl)
  * Fixed a compiler bug. Coming back from an optimized recursive
    function, checking of the expected function symbols was not done at all.

2001/06/15 ({jurgenv,olivierp}@cwi.nl)
  * Fixed bug in rewriting with layout
  * Changed TB interface to completely functional approach

2001/06/15 (markvdb@cwi.nl)
  * adapted apply-function in order to be AsFix2ME compatible.

2001/05/31 (jurgenv@cwi.nl)
  * changed extension .eqs to .asf in compiler specification

2001/05/30 (markvdb@cwi.nl)
  * Fixed a "bug" in addeqssyntax with respect to prefix functions.
  * Regenerated C code for Remove-Var-Syntax and Add-Eqs-Syntax.

2001/05/23 (markvdb@cwi.nl)
  * Released version 0.2, and bumped into 0.3.  
  * Bumped into version 0.2 in order to make distribution. 

2001/05/04 (markvdb@cwi.nl)
  * asc-support.h replaced by asc-support2.h in order to make
    recompilation of generated code independent of changes in
    libMEPT.

2001/04/27 (markvdb@cwi.nl)
  * Adapted asfe to support AsFix2ME to its full extent.

2001/03/23 (jurgenv@cwi.nl)
  * added concat-asf, a tool that reads in parse trees of .asf files and
    dumps their equations concatenated in a single list of equations.

2001/03/08 (jurgenv@cwi.nl)
  * addeqssyntax and removevarsyntax based on PT and SDF libraries

2001/03/02 (jurgenv@cwi.nl)
  * asfe keeps all ATerm annotations during rewriting
  * added one term for Pico-typecheck to test which contains pos-info

2001/02/22 (jurgenv@cwi.nl)
  * all ATerm annotations are removed from both equations and term 
    before asfe begins rewriting

2001/02/20 (jurgenv@cwi.nl)
  * asfe now based on ASF and PT support libraries
  * asfe can now only rewrite WITH layout

2001/02/6 (jurgenv@cwi.nl)
  * evaluator is renamed to asfe
  * compiler is renamed to asfc

2001/02/5 (jurgenv@cwi.nl)
  * asf contains the following components, which are inherited from
    the deprecated new-meta package: compiler, evaluator, addeqssyntax
    removevarsyntax, genmakefile, genamakefile
