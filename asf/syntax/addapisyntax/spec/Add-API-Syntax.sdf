module Add-API-Syntax

imports Integers Sdf2PT

exports

context-free syntax

add-api-syntax(SDF) -> SDF

hiddens

context-free syntax

add-api(Definition) -> Definition



context-free syntax

aa(Definition) -> Definition {traversal(trafo,top-down)}
aa(Grammar)    -> Grammar    {traversal(trafo,top-down)}

aaps(Production*, "lex" | "cf" ) -> Production*
aap(Production, "lex" | "cf")   -> Production*

context-free syntax
 
constructor(Production, "lex" | "cf") -> Production*
predicate  (Production, "lex" | "cf") -> Production*
getters    (Production, "lex" | "cf") -> Production*
setters    (Production, "lex" | "cf") -> Production*

make-constructor(Symbol*,Symbol,Literal,ATerm) -> Production*
make-predicate  (Symbol*,Symbol,Literal,ATerm) -> Production*
make-getters    (Symbol*,Symbol,Literal,ATerm) -> Production*
make-setters    (Symbol*,Symbol,Literal,ATerm) -> Production*

make-getters(Symbol*, Symbol, INT, ATerm) -> Production*
make-setters(Symbol*, Symbol, INT, ATerm) -> Production*

context-free syntax

unquote(Literal)   -> Literal
quote(Literal)     -> Literal
is-literal(Symbol) -> "true" | "false"
get-arguments(Symbol*) -> {Symbol ","}*

variables

"lex|cf"[0-9]*       -> "lex" | "cf"
"Definition"[0-9]*   -> Definition
"Module"[0-9]*       -> Module
"Production"[0-9]*   -> Production
"Production*"[0-9]*  -> Production*
"$"?"Literal"[0-9]*  -> Literal
"$"?"Symbol"[0-9]*   -> Symbol
"Lhs"                -> Symbol*
"Rhs"                -> Symbol
"Attributes"         -> Attributes
"c*"[0-9]*           -> CHAR*
"c+"[0-9]*           -> CHAR+
"c"[0-9]*            -> CHAR
"Term"[0-9]*         -> ATerm
"Intcon"[0-9]*       -> IntCon
"Attribute*"[0-9]*   -> {Attribute ","}*
"Symbol,*"[0-9]* -> {Symbol ","}*
"Symbol*"[0-9]*  -> Symbol*