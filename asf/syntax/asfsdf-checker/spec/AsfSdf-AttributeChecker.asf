equations

  [ca-1'1] check-asf-attributes(Definition) = check-attributes(Definition, {})

  [ca-1'2] get-module-name(Module) = $ModuleId,
           check-attributes-in-module(Module, <Msgs1,>, $ModuleId) = 
             <Msgs2, Production*>
           ======================
           check-attributes(Module, Msgs1) = Msgs2

  [ca-2'1] has-traversal-attribute(Production) = false
           ===========================================
           check-attributes-in-module(Production,
                                      <Msgs, Production*>, $ModuleId) = <Msgs, Production*>


  [ca-2'2] has-traversal-attribute(Production) = true,
           is-prefix-function(Production) = false
           ======================================
           check-attributes-in-module(Production,
                                      <Msgs, Production*>, $ModuleId) = 
<Msgs +
traversal-attributes-in-non-prefix-function($ModuleId, Production), Production*>

  [ca-2'3] has-traversal-attribute(Production) = true,
           is-prefix-function(Production) = true,
           consistent-defined(Production, Production*, $ModuleId) = consistent,
           check-form-production(Production, Msgs1, $ModuleId) = Msgs2
           ===========================================================
           check-attributes-in-module(Production,
                                      <Msgs1, Production*>, $ModuleId) = <Msgs2, Production*>

  [ca-2'4] has-traversal-attribute(Production) = true,
           is-prefix-function(Production) = true,
           consistent-defined(Production, Production*, $ModuleId) = not-found,
           check-form-production(Production, Msgs1, $ModuleId) = Msgs2,
           check-attributes-in-production(Production, Msgs2, $ModuleId) = Msgs3
           ====================================================================
           check-attributes-in-module(Production,
                                      <Msgs1, Production*>, $ModuleId) = <Msgs3, Production Production*>

  [ca-2'5] has-traversal-attribute(Production) = true,
           is-prefix-function(Production) = true,
           consistent-defined(Production, Production*, $ModuleId) = Msg,
           Msg != consistent,
           Msg != not-found 
           ================
           check-attributes-in-module(Production,
                                      <Msgs, Production*>, $ModuleId) = <Msgs + Msg, Production*>

  [ca-3'1] get-traversal-arguments(Production) = Aterm+,
           contains-only-traversal-attributes(Aterm+) = false
           ==================================================
           check-attributes-in-production(Production, Msgs, $ModuleId) = 
Msgs +
illegal-traversal-attribute($ModuleId, Production)

  [ca-3'2] get-traversal-arguments(Production) = Aterm+,
           contains-accu(Aterm+) | contains-trafo(Aterm+) = false,
           contains-break-or-continue(Aterm+) = true,
           contains-top-down-or-bottom-up(Aterm+) = true
           =============================================
           check-attributes-in-production(Production, Msgs, $ModuleId) = 
Msgs +
missing-trafo-and-or-accu-attribute($ModuleId, Production)

  [ca-3'3] get-traversal-arguments(Production) = Aterm+,
           contains-accu(Aterm+) | contains-trafo(Aterm+) = true,
           contains-break-or-continue(Aterm+) = false,
           contains-top-down-or-bottom-up(Aterm+) = true
           =============================================
           check-attributes-in-production(Production, Msgs, $ModuleId) = 
Msgs +
missing-break-or-continue-attribute($ModuleId, Production)

  [ca-3'4] get-traversal-arguments(Production) = Aterm+,
           contains-accu(Aterm+) | contains-trafo(Aterm+) = true,
           contains-break-or-continue(Aterm+) = true,
           contains-top-down-or-bottom-up(Aterm+) = false
           ==============================================
           check-attributes-in-production(Production, Msgs, $ModuleId) = 
Msgs +
missing-bottom-up-or-top-down-attribute($ModuleId, Production)

  [default-ca-2'5] check-attributes-in-production(Production, Msgs, $ModuleId) = Msgs

  [cf-1'1] get-traversal-arguments(Production) = Aterm+,
           contains-accu(Aterm+) = true,
           contains-trafo(Aterm+) = false,
           is-accu-definition(Production) = false
           ======================================
           check-form-production(Production, Msgs, $ModuleId) = 
Msgs +
accu-should-return-accumulated-type($ModuleId, Production)

  [cf-1'2] get-traversal-arguments(Production) = Aterm+,
           contains-trafo(Aterm+) = true,
           contains-accu(Aterm+) = false,
           is-trafo-definition(Production) = false
           =======================================
           check-form-production(Production, Msgs, $ModuleId) = 
Msgs +
trafo-should-return-traversed-type($ModuleId, Production)

  [cf-1'3] get-traversal-arguments(Production) = Aterm+,
           contains-trafo(Aterm+) = true,
           contains-accu(Aterm+) = true,
           is-accu-trafo-definition(Production) = false
           ============================================
           check-form-production(Production, Msgs, $ModuleId) = 
Msgs +
accutrafo-should-return-tuple-of-correct-types($ModuleId, Production)

  [default-cf-1'4] check-form-production(Production, Msgs, $ModuleId) = Msgs

  [iad-1'1] is-accu-definition($Literal1 ( $Symbol1, $Symbol2, $Symbol,*) -> $Symbol2 Attributes) = true

  [default-iad-1'2] is-accu-definition(Production) = false

  [itd-1'1] is-trafo-definition($Literal1 ( $Symbol, $Symbol,*) -> $Symbol Attributes) = true

  [default-itd-1'2] is-trafo-definition(Production) = false

  [iatd-1'1] is-accu-trafo-definition($Literal1 ( $Symbol1, $Symbol2, $Symbol,*) -> <$Symbol1, $Symbol2> Attributes) = true

  [default-iatd-1'2] is-accu-trafo-definition(Production) = false

  [ca-3'1] contains-accu(Aterm*1, accu, Aterm*2) = true

  [default-ca-3'2] contains-accu(Aterm*) = false

  [ct-3'1] contains-trafo(Aterm*1, trafo, Aterm*2) = true

  [default-ct-3'2] contains-trafo(Aterm*) = false

  [cbc-1'1] contains-break-or-continue(Aterm*1, break, Aterm*2) = true

  [cbc-1'2] contains-break-or-continue(Aterm*1, continue, Aterm*2) = true

  [default-cbc-1'3] contains-break-or-continue(Aterm*) = false

  [ctdbu-1'1] contains-top-down-or-bottom-up(Aterm*1, top-down, Aterm*2) = true

  [ctdbu-1'2] contains-top-down-or-bottom-up(Aterm*1, bottom-up, Aterm*2) = true

  [default-ctdbu-1'2] contains-top-down-or-bottom-up(Aterm*) = false

  [cota-1'1] contains-only-traversal-attributes() = true

  [cota-1'2] contains-only-traversal-attributes(Aterm*1, accu, Aterm*2) =
               contains-only-traversal-attributes(Aterm*1, Aterm*2)

  [cota-1'3] contains-only-traversal-attributes(Aterm*1, trafo, Aterm*2) =
               contains-only-traversal-attributes(Aterm*1, Aterm*2)

  [cota-1'4] contains-only-traversal-attributes(Aterm*1, break, Aterm*2) =
               contains-only-traversal-attributes(Aterm*1, Aterm*2)

  [cota-1'5] contains-only-traversal-attributes(Aterm*1, continue, Aterm*2) =
               contains-only-traversal-attributes(Aterm*1, Aterm*2)

  [cota-1'6] contains-only-traversal-attributes(Aterm*1, top-down, Aterm*2) =
               contains-only-traversal-attributes(Aterm*1, Aterm*2)

  [cota-1'7] contains-only-traversal-attributes(Aterm*1, bottom-up, Aterm*2) =
               contains-only-traversal-attributes(Aterm*1, Aterm*2)

  [default-cota-1'8] contains-only-traversal-attributes(Aterm+) = false

  [ipf-1'1] is-prefix-function($Literal($Symbol,*) -> $Symbol Attributes) = true 

  [default-ipf-1'2] is-prefix-function(Production) = false 

  [gta-1'1] get-traversal-arguments($Literal($Symbol,*) -> $Symbol {Attr*1, traversal(Aterm+), Attr*2}) = Aterm+

  [hta-1'1] has-traversal-attribute($Literal($Symbol,*) -> $Symbol {Attr*1, traversal(Aterm+), Attr*2}) = true

  [default-hta-1'1] has-traversal-attribute(Production) = false

  [hta-1'1] has-traversal-attribute({Attr*1, traversal(Aterm+), Attr*2}) = true

  [default-hta-1'1] has-traversal-attribute(Attributes) = false

  [cd-1'1] consistent-defined(Production, , $ModuleId) = not-found

  [cd-1'2] consistent-defined($Literal ( $Symbol1 , $Symbol,* ) -> $Symbol2 Attributes,
                              $Literal ( $Symbol3 , $Symbol,* ) -> $Symbol4 Attributes
                              Production*, 
                              $ModuleId) = consistent

  [cd-1'3] equal-arguments($Symbol,*1;$Symbol,*2) = false
           ==============================================
           consistent-defined($Literal ( $Symbol1 , $Symbol,*1 ) -> $Symbol2 Attributes1,
                              $Literal ( $Symbol3 , $Symbol,*2 ) -> $Symbol4 Attributes2
                              Production*, 
                              $ModuleId) = 
inconsistent-arguments-of-traversal-productions($ModuleId, $Literal ( $Symbol1 , $Symbol,*1 ) -> $Symbol2 Attributes1,
                                                           $Literal ( $Symbol3 , $Symbol,*2 ) -> $Symbol4 Attributes2)

  [cd-1'3] Attributes1 != Attributes2
           ==========================
           consistent-defined($Literal ( $Symbol1 , $Symbol,* ) -> $Symbol2 Attributes1,
                              $Literal ( $Symbol3 , $Symbol,* ) -> $Symbol4 Attributes2
                              Production*, 
                              $ModuleId) = 
inconsistent-traversal-attributes($ModuleId, $Literal ( $Symbol1 , $Symbol,* ) -> $Symbol2 Attributes1,
                                             $Literal ( $Symbol3 , $Symbol,* ) -> $Symbol4 Attributes2)

  [default-cd-1'4] consistent-defined(Production1, Production2 Production*, $ModuleId) =
                      consistent-defined(Production1, Production*, $ModuleId)

  [ea-1'1] equal-arguments($Symbol,*;$Symbol,*) = true

  [default-ea-1'1] equal-arguments($Symbol,*1;$Symbol,*2) = false
