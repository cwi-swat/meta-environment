module SymbolChecker

imports basic/Booleans 
imports SdfCheckerFeedback ModuleOperations
imports utilities/PosInfo[Symbol]

exports
  context-free start-symbols {Error ","}* 
  context-free syntax
    check-symbols(Definition) -> {Error ","}*

hiddens
  context-free syntax
    check-symbols(Definition, {Error ","}*)            -> {Error ","}* {traversal(accu, break, top-down)}
    check-symbols(Module, {Error ","}*)                -> {Error ","}* {traversal(accu, break, top-down)}
    check-symbols2(Module, {Error ","}*, ModuleId)      -> {Error ","}* {traversal(accu, break, top-down)}
    check-symbols2(Grammar, {Error ","}*, ModuleId)     -> {Error ","}* {traversal(accu, break, top-down)}
    check-symbols2(Production*, {Error ","}*, ModuleId) -> {Error ","}* {traversal(accu, break, top-down)}
    check-symbols2(Symbol, {Error ","}*, ModuleId)      -> {Error ","}* {traversal(accu, break, top-down)}

  context-free syntax
    check-charclass-symbols(Production*, {Error ","}*, ModuleId) -> {Error ","}* {traversal(accu, break, top-down)}
    check-charclass-symbols(Symbol, {Error ","}*, ModuleId)      -> {Error ","}* {traversal(accu, break, top-down)}

hiddens
  context-free syntax
    is-literal-symbol(Symbol)   -> Boolean
    is-list-symbol(Symbol)      -> Boolean
    is-charclass-symbol(Symbol) -> Boolean

hiddens
  variables
    "Module"[0-9]*     -> Module
    "$ModuleId"[0-9]*  -> ModuleId
    "Definition"[0-9]* -> Definition
    "Msgs"[0-9]*       -> {Error ","}*
    "$Symbol"[0-9]*    -> Symbol
    "$StrCon"[0-9]*   -> StrCon
    "NatCon"[0-9]*     -> NatCon
    "Prod*"[0-9]*      -> Production*
    "CC"[0-9]*         -> CharClass
   
    "$String"[0-9]* -> StrCon
    "$Location"[0-9]* -> Location
    
