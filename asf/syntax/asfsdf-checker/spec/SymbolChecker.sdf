module SymbolChecker

imports basic/Booleans 
imports SdfCheckerFeedback ModuleOperations

exports
  context-free syntax
    check-symbols(Definition) -> {Feedback ","}*

hiddens
  context-free syntax
    check-symbols(Definition, {Feedback ","}*)            -> {Feedback ","}* {traversal(accu, break, top-down)}
    check-symbols(Module, {Feedback ","}*)                -> {Feedback ","}* {traversal(accu, break, top-down)}
    check-symbols2(Module, {Feedback ","}*, ModuleId)      -> {Feedback ","}* {traversal(accu, break, top-down)}
    check-symbols2(Grammar, {Feedback ","}*, ModuleId)     -> {Feedback ","}* {traversal(accu, break, top-down)}
    check-symbols2(Production*, {Feedback ","}*, ModuleId) -> {Feedback ","}* {traversal(accu, break, top-down)}
    check-symbols2(Symbol, {Feedback ","}*, ModuleId)      -> {Feedback ","}* {traversal(accu, break, top-down)}

  context-free syntax
    check-charclass-list-symbols(Production*, {Feedback ","}*, ModuleId) -> {Feedback ","}* {traversal(accu, break, top-down)}
    check-charclass-list-symbols(Symbol, {Feedback ","}*, ModuleId)      -> {Feedback ","}* {traversal(accu, break, top-down)}

hiddens
  context-free syntax
    is-literal-symbol(Symbol)   -> Boolean
    is-list-symbol(Symbol)      -> Boolean
    is-charclass-symbol(Symbol) -> Boolean

hiddens
  variables
    "Module"[0-9]*     -> Module
    "$ModuleId"[0-9]*  -> ModuleId
    "Definition"[0-9]* -> Definition
    "Msgs"[0-9]*       -> {Feedback ","}*
    "$Symbol"[0-9]*    -> Symbol
    "$Literal"[0-9]*   -> Literal
    "NatCon"[0-9]*     -> NatCon
    "Prod*"[0-9]*      -> Production*
    "CC"[0-9]*         -> CharClass
   
    "$String"[0-9]* -> StrCon
    
