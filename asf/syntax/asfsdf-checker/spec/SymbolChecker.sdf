module SymbolChecker

imports basic/Booleans AsfSdf-Messages ModuleOperations

exports
  context-free syntax
    check-symbols(Definition) -> Messages

hiddens
  context-free syntax
    check-symbols(Definition, Messages)            -> Messages {traversal(accu, top-down)} %%{traversal(accu, break, top-down)}
    check-symbols(Module, Messages)                -> Messages {traversal(accu, top-down)} %%{traversal(accu, break, top-down)}
    check-symbols(Module, Messages, ModuleId)      -> Messages {traversal(accu, top-down)} %%{traversal(accu, break, top-down)}
    check-symbols(Grammar, Messages, ModuleId)     -> Messages {traversal(accu, top-down)} %%{traversal(accu, break, top-down)}
    check-symbols(Production*, Messages, ModuleId) -> Messages {traversal(accu, top-down)} %%{traversal(accu, break, top-down)}
    check-symbols(Symbol, Messages, ModuleId)      -> Messages {traversal(accu, top-down)} %%{traversal(accu, break, top-down)}

  context-free syntax
    check-charclass-list-symbols(Production*, Messages, ModuleId) -> Messages {traversal(accu, top-down)} %%{traversal(accu, break, top-down)}
    check-charclass-list-symbols(Symbol, Messages, ModuleId)      -> Messages {traversal(accu, top-down)} %%{traversal(accu, break, top-down)}

hiddens
  context-free syntax
    is-literal-symbol(Symbol)   -> Boolean
    is-list-symbol(Symbol)      -> Boolean
    is-charclass-symbol(Symbol) -> Boolean

hiddens
  variables
    "Module"[0-9]*     -> Module
    "$ModuleId"[0-9]*  -> ModuleId
    "Definition"[0-9]* -> Definition
    "Msgs"[0-9]*       -> Messages
    "$Symbol"[0-9]*    -> Symbol
    "$Literal"[0-9]*   -> Literal
    "NatCon"[0-9]*     -> NatCon
    "Prod*"[0-9]*      -> Production*
    "CC"[0-9]*         -> CharClass
    
