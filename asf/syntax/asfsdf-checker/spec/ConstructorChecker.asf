equations

  [cc-1'1] check-constructors(Definition, InfoMsgTuple) = 
             check-module-constructors(Definition, InfoMsgTuple)
	
  [cmc-1'1] $ModuleId := get-module-name(Module),
       
            imports(Import*) := get-all-imports(Module),
            constructors(SymbolCons*1) := 
              get-constructors(Import*, 
                             get-module-info(InfoMsgTuple1)),

            [constructors(SymbolCons*2), Msgs1] := 
              get-constructor-symbol-pairs(Module, 
                                         [constructors(SymbolCons*1), ], 
                                         $ModuleId),

            InfoMsgTuple2 := put-messages($ModuleId, Msgs1, InfoMsgTuple1),

            ModuleInfoTable1 := get-module-info(InfoMsgTuple2),
            ModuleInfoTable2 := put-constructor-info($ModuleId, 
                                 constructors(SymbolCons*2), 
                                 ModuleInfoTable1),
            InfoMsgTuple3 :=  put-module-info(ModuleInfoTable2, InfoMsgTuple2)
            =================================================================
            check-module-constructors(Module, InfoMsgTuple1) = InfoMsgTuple3

  [gcsp-1'1] get-constructor-symbol-pairs(context-free priorities Group+, 
                                          ConsMsgTuple,
                                          $ModuleId) = 
               check-constructor-in-priorities(Group+, 
                                               ConsMsgTuple,
                                               $ModuleId)

  [gcsp-1'2] get-constructor-symbol-pairs(priorities Group+, 
                                          ConsMsgTuple,
                                          $ModuleId) = 
               check-constructor-in-priorities(Group+, 
                                               ConsMsgTuple,
                                               $ModuleId)

  [gcsp-1'3] get-constructor-symbol-pairs(Symbol* -> Symbol Attrs,
                                          ConsMsgTuple,
                                          $ModuleId) =
               get-constructor-symbol-pairs2(Attrs, ConsMsgTuple, 
                                             $ModuleId, Symbol,
                                             Symbol* -> Symbol Attrs)

  [gcsp-1'4] get-constructor-symbol-pairs($FuncName(Symbol,*) -> Symbol Attrs,
                                          ConsMsgTuple,
                                          $ModuleId) =
               get-constructor-symbol-pairs2(Attrs, ConsMsgTuple, 
                                             $ModuleId, Symbol,
                                             $FuncName(Symbol,*) -> Symbol Attrs)

  [gcsp-2'1] cons( $AFun ) := $Attribute,
             contains(Symbol, $AFun, ConstructorSet) == true,
             $AFun2 := get($AFun, ConstructorSet)
             ====>
             get-constructor-symbol-pairs2($Attribute, 
                                           [ConstructorSet, Msgs], 
                                           $ModuleId, Symbol, Prod) =
               [ConstructorSet, 
                Msgs, 
                warning("constructor used more than once",
                      [localized("first occurrence", get-location($AFun)),
                       localized("second occurrence", get-location($AFun2))])]



  [gcsp-2'2] contains(Symbol, $AFun, ConstructorSet) == false
             ==================================================
             get-constructor-symbol-pairs2(cons( $AFun ), 
                                           [ConstructorSet, Msgs], 
                                           $ModuleId, Symbol, Prod) =
               [add(Symbol, $AFun, ConstructorSet), Msgs]

  [ccip-1'1] check-constructor-in-priorities(Symbol* -> Symbol Attrs,
                                             ConsMsgTuple,
                                             $ModuleId) =
               check-constructor-in-priorities2(Attrs, ConsMsgTuple, 
                                               $ModuleId, Symbol,
                                               Symbol* -> Symbol Attrs)

  [ccip-1'2] check-constructor-in-priorities($FuncName(Symbol,*) -> Symbol Attrs,
                                             ConsMsgTuple,
                                             $ModuleId) =
               check-constructor-in-priorities2(Attrs, ConsMsgTuple, 
                                               $ModuleId, Symbol,
                                               $FuncName(Symbol,*) -> Symbol Attrs)

  [ccip-2'1] contains(Symbol, $AFun, ConstructorSet) == true
             ====>
             check-constructor-in-priorities2(cons( $AFun ), 
                                              [ConstructorSet, Msgs], 
                                               $ModuleId, Symbol, Prod) = 
               [ConstructorSet, Msgs]

  [ccip-2'2] cons( $AFun ) := $Attribute,
             $Location := get-location($Attribute),
             contains(Symbol, $AFun, ConstructorSet) == false,
             $String1 := moduleid2str($ModuleId),
             $String2 := production2str(Prod),
             $String3 := "unknown constructor used in priorities"
             ====>
             check-constructor-in-priorities2($Attribute, 
                                              [ConstructorSet, Msgs], 
                                              $ModuleId, Symbol, Prod) =
               [ConstructorSet, 
                Msgs, make-warning($String3, $String2, $Location)]
