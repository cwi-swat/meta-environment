equations

  [cs-1'1] check-symbols(Definition) = check-symbols(Definition, )

  [cs-1'2] $ModuleId := get-module-name(Module)
           ====================================
           check-symbols(Module, Msgs) = 
             check-symbols2(Module, Msgs, $ModuleId)

  [cs-2'1] Msgs2 := check-symbols2(Prod*, Msgs1, $ModuleId),
           Msgs3 := check-charclass-list-symbols(Prod*, Msgs2, $ModuleId)
           =============================================================
           check-symbols2(context-free syntax Prod*, Msgs1, $ModuleId) =
             Msgs3

  [cs-2'1] {$Symbol1 $Symbol2}+ := $Symbol0,
           is-literal-symbol($Symbol2) == false,
           $Location := get-location($Symbol0),
           $String1 := moduleid2str($ModuleId),
           $String2 := "not supported symbol in " || $String1,
           $String3 := symbol2str($Symbol0)
           ====>
           check-symbols2($Symbol0, Msgs, $ModuleId) =
              Msgs, make-warning($String2, $String3, $Location)

  [cs-2'2] {$Symbol1 $Symbol2}* := $Symbol0,
           is-literal-symbol($Symbol2) == false,
           $Location := get-location($Symbol0),
           $String1 := moduleid2str($ModuleId),
           $String2 := "not supported symbol in " || $String1,
           $String3 := symbol2str($Symbol0)
           ====>
           check-symbols2($Symbol0, Msgs, $ModuleId) =
              Msgs, make-warning($String2, $String3, $Location)

  [cs-2'3] {$Symbol1 $Symbol2}NatCon+ := $Symbol0,
           is-literal-symbol($Symbol2) == false,
           $Location := get-location($Symbol0),
           $String1 := moduleid2str($ModuleId),
           $String2 := "not supported symbol in " || $String1,
           $String3 := symbol2str($Symbol0)
           ====>
           check-symbols2($Symbol0, Msgs, $ModuleId) =
              Msgs, make-warning($String2, $String3, $Location)

  [cs-2'4] $Symbol+ := $Symbol0,
           is-list-symbol($Symbol) == true,
           $Location := get-location($Symbol0),
           $String1 := moduleid2str($ModuleId),
           $String2 := "not supported symbol in " || $String1,
           $String3 := symbol2str($Symbol0)
           ====>
           check-symbols2($Symbol0, Msgs, $ModuleId) =
              Msgs, make-warning($String2, $String3, $Location)

  [cs-2'5] $Symbol* := $Symbol0,
           is-list-symbol($Symbol) == true,
           $Location := get-location($Symbol0),
           $String1 := moduleid2str($ModuleId),
           $String2 := "not supported symbol in " || $String1,
           $String3 := symbol2str($Symbol0)
           ====>
           check-symbols2($Symbol0, Msgs, $ModuleId) =
              Msgs, make-warning($String2, $String3, $Location)

  [cs-2'6] {$Symbol1 $Symbol2}+ := $Symbol0,
           is-list-symbol($Symbol1) == true,
           $Location := get-location($Symbol0),
           $String1 := moduleid2str($ModuleId),
           $String2 := "not supported symbol in " || $String1,
           $String3 := symbol2str($Symbol0)
           ====>
           check-symbols2($Symbol0, Msgs, $ModuleId) =
              Msgs, make-warning($String2, $String3, $Location)

  [cs-2'7] {$Symbol1 $Symbol2}* := $Symbol0,
           is-list-symbol($Symbol1) == true,
           $Location := get-location($Symbol0),
           $String1 := moduleid2str($ModuleId),
           $String2 := "not supported symbol in " || $String1,
           $String3 := symbol2str($Symbol0)
           ====>
           check-symbols2($Symbol0, Msgs, $ModuleId) =
              Msgs, make-warning($String2, $String3, $Location)

  [cs-2'8] {$Symbol1 $Symbol2}NatCon+ := $Symbol0,
           is-list-symbol($Symbol1) == true,
           $Location := get-location($Symbol0),
           $String1 := moduleid2str($ModuleId),
           $String2 := "not supported symbol in " || $String1,
           $String3 := symbol2str($Symbol0)
           ====>
           check-symbols2($Symbol0, Msgs, $ModuleId) =
              Msgs, make-warning($String2, $String3, $Location)

  [cs-4'1] $Symbol+ := $Symbol0,
           is-charclass-symbol($Symbol) == true,
           $Location := get-location($Symbol0),
           $String1 := moduleid2str($ModuleId),
           $String2 := "charclasses not allowed in context-free syntax in " || $String1,
           $String3 := symbol2str($Symbol0)
           ====>
           check-charclass-list-symbols($Symbol0, Msgs, $ModuleId) =
              Msgs, make-error($String2, $String3, $Location)

  [cs-4'2] $Symbol* := $Symbol0,
           is-charclass-symbol($Symbol) == true,
           $Location := get-location($Symbol0),
           $String1 := moduleid2str($ModuleId),
           $String2 := "charclasses not allowed in context-free syntax in " || $String1,
           $String3 := symbol2str($Symbol0)
           ====>
           check-charclass-list-symbols($Symbol0, Msgs, $ModuleId) =
              Msgs, make-error($String2, $String3, $Location)

  [cs-4'3] {$Symbol1 $Symbol2}+ := $Symbol0,
           is-charclass-symbol($Symbol1) == true,
           $Location := get-location($Symbol0),
           $String1 := moduleid2str($ModuleId),
           $String2 := "charclasses not allowed in context-free syntax in " || $String1,
           $String3 := symbol2str($Symbol0)
           ====>
           check-charclass-list-symbols($Symbol0, Msgs, $ModuleId) =
              Msgs, make-error($String2, $String3, $Location)

  [cs-4'4] {$Symbol1 $Symbol2}* := $Symbol0,
           is-charclass-symbol($Symbol1) == true,
           $Location := get-location($Symbol0),
           $String1 := moduleid2str($ModuleId),
           $String2 := "charclasses not allowed in context-free syntax in " || $String1,
           $String3 := symbol2str($Symbol0)
           ====>
           check-charclass-list-symbols($Symbol0, Msgs, $ModuleId) =
              Msgs, make-error($String2, $String3, $Location)

  [cs-4'5] {$Symbol1 $Symbol2}NatCon+ := $Symbol0,
           is-charclass-symbol($Symbol1) == true,
           $Location := get-location($Symbol0),
           $String1 := moduleid2str($ModuleId),
           $String2 := "charclasses not allowed in context-free syntax in " || $String1,
           $String3 := symbol2str($Symbol0)
           ====>
           check-charclass-list-symbols($Symbol0, Msgs, $ModuleId) =
              Msgs, make-error($String2, $String3, $Location)

  [ils-1'1] is-literal-symbol($Literal) = true

  [default-ils-1'2] is-literal-symbol($Symbol) = false

  [iccs-1'1] is-charclass-symbol(CC) = true

  [default-iccs-1'2] is-charclass-symbol($Symbol) = false

  [ils-2'1] is-list-symbol({$Symbol1 $Symbol2}+) = true

  [ils-2'2] is-list-symbol({$Symbol1 $Symbol2}*) = true

  [ils-2'3] is-list-symbol($Symbol*) = true

  [ils-2'4] is-list-symbol($Symbol+) = true

  [ils-2'5] is-list-symbol({$Symbol1 $Symbol2}NatCon+) = true

  [default-ils-2'6] is-list-symbol($Symbol) = false
