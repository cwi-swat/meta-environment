%%
%%    PGEN - the SDF2 parse table generator.
%%    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, 
%%    The Netherlands. 
%%
%%    This program is free software; you can redistribute it and/or modify
%%    it under the terms of the GNU General Public License as published by
%%    the Free Software Foundation; either version 2 of the License, or
%%    (at your option) any later version.
%%
%%    This program is distributed in the hope that it will be useful,
%%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%%    GNU General Public License for more details.
%%
%%    You should have received a copy of the GNU General Public License
%%    along with this program; if not, write to the Free Software
%%    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
%%
%%
%%    PGEN - the SDF2 parse table generator.
%%    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, 
%%                        The Netherlands.
%%
%%    This program is free software; you can redistribute it and/or modify
%%    it under the terms of the GNU General Public License as published by
%%    the Free Software Foundation; either version 2 of the License, or
%%    (at your option) any later version.
%%
%%    This program is distributed in the hope that it will be useful,
%%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%%    GNU General Public License for more details.
%%
%%    You should have received a copy of the GNU General Public License
%%    along with this program; if not, write to the Free Software
%%    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
%%
equations    

  [rms-1'1] remove-var-syntax(Sdf) = remove-var-syntax(Main, Sdf)

  [rms-1'2] remove-variables-from-modules(Module*1) = Module*2
            ==================================================
            remove-var-syntax(ModName, definition Module*1) =
              definition Module*2

  [rvfm-1'1] remove-variables-from-modules() = 

  [rvfm-1'2] remove-variables-from-module(Module1) = Module2,
             remove-variables-from-modules(Module*1) = Module*2
             ==================================================
             remove-variables-from-modules(Module1 Module*1) = 
               Module2 Module*2 

  [rvfm-2'1] remove-variables-from-sections(Section*1) = Section*2
             =====================================================
             remove-variables-from-module(module ModName 
                                          ImpSection* 
                                          Section*1) =
               module ModName ImpSection* Section*2

  [rvfs-1'1] remove-variables-from-sections() = 

  [rvfs-1'2] remove-variables-from-section(Section1) = Section*2,
             remove-variables-from-sections(Section*1) = Section*3
             =====================================================
             remove-variables-from-sections(Section1 Section*1) = 
               Section*2 Section*3 
  
  [rvfs-2'1] remove-variables-grammar(Grammar1) = Grammar2,
             Grammar2 != (/)
             ===============
             remove-variables-from-section(exports Grammar1) = 
               exports Grammar2
  
  [rvfs-2'2] remove-variables-grammar(Grammar1) = (/)
             =========================================
             remove-variables-from-section(exports Grammar1) = 
  
  [rvfs-2'3] remove-variables-grammar(Grammar1) = Grammar2,
             Grammar2 != (/)
             ===============
             remove-variables-from-section(hiddens Grammar1) = 
               hiddens Grammar2
  
  [rvfs-2'4] remove-variables-grammar(Grammar1) = (/)
             =========================================
             remove-variables-from-section(hiddens Grammar1) = 

  [rvg-1'4] remove-variables-grammar(Grammar1) = Grammar3,
            remove-variables-grammar(Grammar2) = Grammar4
            =============================================
            remove-variables-grammar(Grammar1 Grammar2) = Grammar3 ++ Grammar4

  [rvg-1'5] remove-variables-grammar(variables Prod*) = (/)

  [default-rvg-1'6] remove-variables-grammar(Grammar) = Grammar

  [gc-1'1] (/) ++ (/) = (/)

  [gc-1'2] Grammar != (/)
           ==============
           Grammar ++ (/) = Grammar

  [gc-1'3] Grammar != (/)
           ==============
           (/) ++ Grammar = Grammar

  [gc-1'4] Grammar1 != (/),
           Grammar2 != (/)
           ===============
           Grammar1 ++ Grammar2 = Grammar1 Grammar2
