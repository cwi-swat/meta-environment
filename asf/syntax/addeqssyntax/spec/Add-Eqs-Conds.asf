%%
%%    PGEN - the SDF2 parse table generator.
%%    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, The Netherlands. 
%%
%%    This program is free software; you can redistribute it and/or modify
%%    it under the terms of the GNU General Public License as published by
%%    the Free Software Foundation; either version 2 of the License, or
%%    (at your option) any later version.
%%
%%    This program is distributed in the hope that it will be useful,
%%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%%    GNU General Public License for more details.
%%
%%    You should have received a copy of the GNU General Public License
%%    along with this program; if not, write to the Free Software
%%    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
%%
equations

  [ceac-1'1] create-eqs-and-conds(, SymbolsSet) =

  [ceac-1'2] eqs-and-conds-for-mod(Module, SymbolsSet1) = (SymbolsSet2,Prod*1),
             create-eqs-and-conds(Module*, SymbolsSet1) = Prod*2
             ===================================================
             create-eqs-and-conds(Module Module*, SymbolsSet1) = Prod*1 Prod*2

  [eacfm-1'1] eqs-and-conds-for-mod(module ModName ImpSection* Section*, SymbolsSet) =
                eqs-and-conds-for-sections(Section*, SymbolsSet)

  [eacfs-1'1] eqs-and-conds-for-sections(, SymbolsSet) = (SymbolsSet,)

  [eacfs-1'2] eqs-and-conds-for-section(Section, SymbolsSet1) = (SymbolsSet2,Prod*1),
              eqs-and-conds-for-sections(Section*, SymbolsSet2) = (SymbolsSet3,Prod*2)
              ========================================================================
              eqs-and-conds-for-sections(Section Section*, SymbolsSet1) = 
                (SymbolsSet3,Prod*1 Prod*2)

  [eacfs-2'1] eqs-and-conds-for-section(exports Grammar, SymbolsSet1) =
                eqs-and-conds-for-grammar(Grammar, SymbolsSet1)

  [eacfs-2'2] eqs-and-conds-for-section(hiddens Grammar, SymbolsSet1) =
                eqs-and-conds-for-grammar(Grammar, SymbolsSet1)

  [eacfg-1'1] eqs-and-conds-for-grammar(Grammar1, SymbolsSet1) = (SymbolsSet2,Prod*1),
              eqs-and-conds-for-grammar(Grammar2, SymbolsSet2) = (SymbolsSet3,Prod*2)
              =======================================================================
              eqs-and-conds-for-grammar(Grammar1 Grammar2, SymbolsSet1) = 
                (SymbolsSet3,Prod*1 Prod*2)

  [eacfg-1'2] eqs-and-conds-for-grammar(lexical syntax Prod*, SymbolsSet) =
                eqs-and-conds-for-productions(Prod*, SymbolsSet)

  [eacfg-1'3] eqs-and-conds-for-grammar(context-free syntax Prod*, SymbolsSet) =
                eqs-and-conds-for-productions(Prod*, SymbolsSet)

  [default-eacfg-1'4] eqs-and-conds-for-grammar(Grammar, SymbolsSet) = (SymbolsSet,)

  [eacfp-1'1] eqs-and-conds-for-productions(, SymbolsSet) = (SymbolsSet,)

  [eacfp-1'2] eqs-and-conds-for-production(Prod, SymbolsSet1) = (SymbolsSet2, Prod*2),
              eqs-and-conds-for-productions(Prod*1, SymbolsSet2) = (SymbolsSet3, Prod*3)
              ==========================================================================
              eqs-and-conds-for-productions(Prod Prod*1, SymbolsSet1) =
                (SymbolsSet3, Prod*2 
                              Prod*3)

  [eacfp-2'1] includes(Symbol, SymbolsSet1) = false,
              add(Symbol, SymbolsSet1) = SymbolsSet2
              ======================================
              eqs-and-conds-for-production(Symbol* -> Symbol Attrs, SymbolsSet1) =
                (SymbolsSet2,
                 Symbol "=" Symbol  -> Equation
                 Symbol "=" Symbol  -> Condition
                 Symbol "!=" Symbol -> Condition)

  [eacfp-2'2] includes(Symbol, SymbolsSet1) = false,
              add(Symbol, SymbolsSet1) = SymbolsSet2
              ======================================
              eqs-and-conds-for-production(Literal(SymbolSep*) -> Symbol Attrs, 
                                           SymbolsSet1) =
                (SymbolsSet2,
                 Symbol "=" Symbol  -> Equation
                 Symbol "=" Symbol  -> Condition
                 Symbol "!=" Symbol -> Condition)

  [eacfp-2'2] includes(Symbol, SymbolsSet) = true
              ===================================
              eqs-and-conds-for-production(Symbol* -> Symbol Attrs, SymbolsSet) =
                (SymbolsSet,)

  [eacfp-2'2] includes(Symbol, SymbolsSet) = true
              ===================================
              eqs-and-conds-for-production(Literal(SymbolSep*) -> Symbol Attrs,
                                           SymbolsSet) =
                (SymbolsSet,)

  [in-1'1] includes(Symbol, []) = false

  [in-1'2] includes(Symbol, [Symbol Symbol*]) = true

  [in-1'3] Symbol1 != Symbol2
           ==================
           includes(Symbol1, [Symbol2 Symbol*]) = 
             includes(Symbol1, [Symbol*])

  [add-1'1] add(Symbol, [Symbol*]) = [Symbol Symbol*]
