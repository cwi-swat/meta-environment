%%
%%    PGEN - the SDF2 parse table generator.
%%    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, 
%%                        The Netherlands. 
%%
%%    This program is free software; you can redistribute it and/or modify
%%    it under the terms of the GNU General Public License as published by
%%    the Free Software Foundation; either version 2 of the License, or
%%    (at your option) any later version.
%%
%%    This program is distributed in the hope that it will be useful,
%%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%%    GNU General Public License for more details.
%%
%%    You should have received a copy of the GNU General Public License
%%    along with this program; if not, write to the Free Software
%%    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
%%

module Add-Eqs-Conds 

imports Sdf2 Booleans

exports
  sorts SymbolsSet
  context-free syntax
    "[" Symbol* "]" -> SymbolsSet
  context-free syntax
    "create-eqs-and-conds" "(" Definition "," SymbolsSet ")" -> Productions

hiddens
  sorts
    SymbolsSetProds
  context-free syntax
    "(" SymbolsSet "," Productions ")" -> SymbolsSetProds
  context-free syntax
    includes(Symbol, SymbolsSet) -> Bool
    add(Symbol, SymbolsSet)      -> SymbolsSet
  context-free syntax
    "eqs-and-conds-for-mod" "(" Module "," SymbolsSet ")"              -> SymbolsSetProds
    "eqs-and-conds-for-sections" "(" Section* "," SymbolsSet ")"       -> SymbolsSetProds
    "eqs-and-conds-for-section" "(" Section "," SymbolsSet ")"         -> SymbolsSetProds
    "eqs-and-conds-for-grammar" "(" Grammar "," SymbolsSet ")"         -> SymbolsSetProds
    "eqs-and-conds-for-productions" "(" Productions "," SymbolsSet ")" -> SymbolsSetProds
    "eqs-and-conds-for-production" "(" Production "," SymbolsSet ")"   -> SymbolsSetProds

hiddens
  variables
    "Attrs"[0-9]*        -> Attributes
    "ImpSection*"[0-9]*  -> ImpSection*
    "Grammar"[0-9]*      -> Grammar
    "ModName"[0-9]*      -> ModuleName
    "Module"[0-9]*       -> Module
    "Module*"[0-9]*      -> Module*
    "Prod"[0-9]*         -> Production
    "Prod*"[0-9]*        -> Production*
    "Section"[0-9]*      -> Section
    "Section*"[0-9]*     -> Section*
    "Symbol"[0-9]*       -> Symbol
    "Symbol*"[0-9]*      -> Symbol*
    "SymbolSep*"[0-9]*   -> {Symbol ","}*
    "Literal"[0-9]*      -> Literal
    "Sort"[0-9]*         -> Sort
    "SymbolsSet"[0-9]*   -> SymbolsSet
