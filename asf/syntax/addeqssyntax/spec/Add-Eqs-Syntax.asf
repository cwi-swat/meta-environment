equations

  [aem-1'1] add-equation-module(Sdf) = add-equation-module(Main,Sdf)

  [aem-1'2] create-eqs-and-conds(Module*1, [LAYOUT]) = Prod*1,
            add-lexical-constructor-function(Module*1) = Prod*2,
            add-tagid-rejects(Module*1) = Prod*3,
            %%add-var-lex-priorities(Module*1) = Prio*,
            add-prefer-vars(Module*1) = Module*2,
            add-eqs-to-module(ModName, Module*2) = Module*3
            ===============================================
            add-equation-module(ModName, definition Module*1) =
              definition
              Module*3
              module Characters
              exports
                sorts CHAR
                lexical syntax
                  [\"] ~[\257] [\"] -> CHAR {cons("default")}

              module Equations
              imports Characters
              exports
                sorts ASF-Tag 
                      ASF-TagId 
                      ASF-ConditionalEquation 
                      ASF-Equation 
                      ASF-Implies
                      ASF-Condition 
                      ASF-Equations
                lexical syntax
                  "===" [\=]* [\>]?   -> ASF-Implies {cons("default")}
                  "=" -> ASF-Condition {reject}
                  [shortchar("A")-shortchar("Z")
                   shortchar("a")-shortchar("z")
                   shortchar("0")-shortchar("9")
                   shortchar("\""'")]                   -> ASF-TagId {avoid,cons("one-char")}
                 [shortchar("A")-shortchar("Z")
                   shortchar("a")-shortchar("z")
                   shortchar("0")-shortchar("9")
                   shortchar("\""'")]
                  [shortchar("A")-shortchar("Z")
                   shortchar("a")-shortchar("z")
                   shortchar("0")-shortchar("9")
                   shortchar("\""'")shortchar("\""-")]*
                  [shortchar("A")-shortchar("Z")
                   shortchar("a")-shortchar("z")
                   shortchar("0")-shortchar("9")
                   shortchar("\""'")]                   -> ASF-TagId {avoid,cons("many-chars")}

                lexical restrictions
                  ASF-Implies -/- [\=]

                context-free syntax
                  {ASF-Condition ","}+          -> ASF-Conditions
                                                -> ASF-Equations {cons("absent")}
                  "equations" list:ASF-ConditionalEquation* -> ASF-Equations {cons("present")}
                  "equations" list:ASF-ConditionalEquation* "tests" test-list:ASF-TestEquation* -> ASF-Equations {cons("present-with-tests")}

ASF-Tag ASF-Condition -> ASF-TestEquation {cons("simple")}
ASF-Tag ASF-Conditions ASF-Implies ASF-Condition -> ASF-TestEquation {cons("implies")}
ASF-Tag ASF-Condition "when" ASF-Conditions      -> ASF-TestEquation {cons("when")}


                  ASF-Tag ASF-Equation                    -> ASF-ConditionalEquation {cons("simple")}
                  ASF-Tag ASF-Conditions ASF-Implies ASF-Equation -> ASF-ConditionalEquation {cons("implies")}
                  ASF-Tag ASF-Equation "when" ASF-Conditions  -> ASF-ConditionalEquation {cons("when")}
                  "[" "]"                         -> ASF-Tag {cons("empty")}
                  "[" ASF-TagId "]"               -> ASF-Tag {cons("not-empty")}
                  Prod*3


              module GEN-LexConsFuncs
              imports Characters
              exports
                context-free syntax
                  Prod*2

              module GEN-Equations
              imports GEN-LexConsFuncs Equations
              exports
                context-free syntax
                  Prod*1

  [aetm-1'1] add-eqs-to-module(ModuleId, Module*1
                                         module ModuleId
                                         ImpSection* imports Import*
                                         Section*
                                         Module*2) =
               Module*1
               module ModuleId
               ImpSection* imports Import* GEN-Equations
               Section*
               Module*2

  [aetm-1'2] add-eqs-to-module(ModuleId, Module*1
                                         module ModuleId
                                         Section*
                                         Module*2) =
               Module*1
               module ModuleId
               imports GEN-Equations
               Section*
               Module*2

  [aetm-1'3] add-eqs-to-module(ModuleId, Module*1
                                         module ModuleId[$Symbols]
                                         ImpSection* imports Import* 
                                         Section*
                                         Module*2) =
               Module*1
               module ModuleId[$Symbols]
               ImpSection* imports Import* GEN-Equations
               Section*
               Module*2

  [aetm-1'3] add-eqs-to-module(ModuleId, Module*1
                                         module ModuleId[$Symbols]
                                         Section*
                                         Module*2) =
               Module*1
               module ModuleId[$Symbols]
               imports GEN-Equations
               Section*
               Module*2

  [aetm-1'4] add-eqs-to-module(ModuleId [ $Symbols ], Module*) =
              add-eqs-to-module(ModuleId,Module*)
