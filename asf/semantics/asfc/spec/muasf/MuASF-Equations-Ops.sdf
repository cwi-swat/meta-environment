%%
%%    Meta-Environment - An environment for language prototyping.
%%    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, 
%%                        The Netherlands. 
%%
%%    This program is free software; you can redistribute it and/or modify
%%    it under the terms of the GNU General Public License as published by
%%    the Free Software Foundation; either version 2 of the License, or
%%    (at your option) any later version.
%%
%%    This program is distributed in the hope that it will be useful,
%%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%%    GNU General Public License for more details.
%%
%%    You should have received a copy of the GNU General Public License
%%    along with this program; if not, write to the Free Software
%%    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
%%
%% In the module {\tt MuASF-Basics} a number of datastructure
%% are defined to be used by the various transformation phases.
module  MuASF-Equations-Ops

imports MuASF-Signature-Ops VarEnv

exports
  sorts FuncTermPair FuncRuleTuple FuncRulePair FuncRuleStruct
        MsFuncTermPair MsFuncRulePair MsFuncRuleTuple MsFuncCondPair
        RuleListPair FuncTermTableTuple FuncRuleTableTuple FuncCondTableTuple
  context-free syntax
    "(" {FuncDef ";"}* "," {Rule ";"}* "," IntCon ")"    -> FuncRuleTuple
    "(" {FuncDef ";"}* "," {Rule ";"}* ")"               -> FuncRulePair
    "(" {FuncDef ";"}* "," TermList "," NameTable ")"    -> FuncTermTableTuple
    "(" {FuncDef ";"}* "," {Rule ";"}* "," NameTable ")" -> FuncRuleTableTuple
    "(" {FuncDef ";"}* "," {Cond "&"}* "," NameTable ")" -> FuncCondTableTuple
    "(" {Rule ";"}* "," {Rule ";"}* ")"                  -> RuleListPair

  context-free syntax
    create-new-rulesopt({Rule ";"}*)               -> RulesOpt
    addto-rulesopt(RulesOpt,{Rule ";"}*)           -> RulesOpt

  context-free syntax
    get-funid(Term)                   -> FunId
    get-funid(Rule)                   -> FunId
    get-funid(Term,{NamePair ","}*)   -> FunId
    get-funargs(Term)                 -> TermList
    get-funargs(Rule)                 -> TermList
    is-list-funid(FunId)              -> Bool
    is-trans-list-funid(FunId)        -> Bool
    is-list-var-term(Term)            -> Bool
    is-var-term(Term)                 -> Bool
    is-boolean-term(Term)             -> Bool
    is-default-rule(Rule)             -> Bool
    is-cons(Term)                     -> Bool
    term-contains-var(Term)           -> Bool
    args-contain-var({Term ","}*)     -> Bool
    make-trans-list-id(FunId)         -> FunId
    remove-trans-from-list-id(FunId)  -> FunId
    make-func(FunId,{Term ","}*)      -> Term
    make-list-func(FunId,{Term ","}*) -> Term
    prefix-id(FunId,FunId,IntCon)     -> FunId
    is-internal-funid(FunId)          -> Bool
    is-quoted-funid(FunId)            -> Bool
    is-plus-var(Term)                 -> Bool
    is-star-var(Term)                 -> Bool

  context-free syntax
    make-list-args({Term ","}*)  -> Term

  context-free syntax
    make-default-rule(Rule)                 -> Rule
    make-conditional-rule({Cond "&"}*,Rule) -> Rule
    make-rule(Bool,Term,Term)               -> Rule
    make-rule(Bool,{Cond "&"}*,Term,Term)   -> Rule

hiddens
  context-free syntax
    is-internal-funid-new(FunId)   -> Bool

hiddens
  variables
    "Char"[0-9]*    -> CHAR
    "Char*"[0-9]*   -> CHAR*
    "Char+"[0-9]*   -> CHAR+
