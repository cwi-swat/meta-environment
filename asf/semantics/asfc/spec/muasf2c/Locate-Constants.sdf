module muasf2c/Locate-Constants

imports muasf2c/MuASF-Conds2C


exports
  context-free syntax
    locate-constants-in-decls(ModId,Declaration-list-opt) -> Declaration-list-opt

hiddens
  context-free start-symbols
    Bool

  sorts CE-pair CEEI-tuple CEI-tuple CEELI-tuple
        CESI-tuple CESLI-tuple CEDI-tuple CEDLI-tuple
  context-free syntax
    "(" Expression "," Expression ")"                    -> CE-pair
    "(" {CE-pair ","}* "," IntCon ")"                      -> CEI-tuple

    "(" {CE-pair ","}* "," Declaration "," IntCon ")"      -> CEDI-tuple
    "(" {CE-pair ","}* "," Declaration-list "," IntCon ")" -> CEDLI-tuple

    "(" {CE-pair ","}* "," Expression "," IntCon ")"       -> CEEI-tuple
    "(" {CE-pair ","}* "," Argument-expression-list ","
        IntCon ")"                                         -> CEELI-tuple

    "(" {CE-pair ","}* "," Statement "," IntCon ")"          -> CESI-tuple
    "(" {CE-pair ","}* "," Statement-list-opt "," IntCon ")" -> CESLI-tuple
  context-free syntax
    locate-constants-in-decllist(Declaration-list,CEI-tuple)  -> CEDLI-tuple
    locate-constants-in-decl(Declaration,CEI-tuple)           -> CEDI-tuple
  context-free syntax
    locate-constants-in-stats(Statement-list-opt,CEI-tuple) -> CESLI-tuple
    locate-constants-in-statlist(Statement-list,CEI-tuple)  -> CESLI-tuple
    locate-constants-in-stat(Statement,CEI-tuple)           -> CESI-tuple
  context-free syntax
    locate-constants-in-expression(Expression,CEI-tuple)         -> CEEI-tuple
    locate-constants-in-expressions({Expression ","}*,CEI-tuple) -> CEELI-tuple
  context-free syntax
    expression-contains-variables(Expression)        -> Bool
    expressions-contain-variables({Expression ","}*) -> Bool
    is-make-char-function-call(Expression)           -> Bool
    is-function-call(Expression)                     -> Bool
    is-integer(Expression)                           -> Bool
    is-exit-func(Expression)                         -> Bool
    is-sym-symbol(Expression)                        -> Bool
    is-not-a-constant(Expression) -> Bool

  context-free syntax
    modname2iname(ModId) -> Identifier
  context-free syntax
    make-init-function(ModId,{CE-pair ","}*) -> Declaration-list-opt
    make-statements-function({CE-pair ","}*) -> FTS-tuple
    make-stats-function({CE-pair ","}+)      -> FTS-tuple
  context-free syntax
    add-to-ce-pairs(Expression,{CE-pair ","}*,IntCon) -> CEEI-tuple
  context-free syntax
    flatten-list-of-chars(Expression)            -> Expression
    compose-list-of-chars(Expression,Expression) -> Expression
    flatten-arguments({Expression ","}*)         -> Argument-expression-list

hiddens
  variables
    "Ident"[0-9]*      -> Identifier
    "Prime"[0-9]*      -> Primary-expression
    "ActualArg*"[0-9]* -> {Expression ","}*
    "ce-pair*"[0-9]*   -> {CE-pair ","}*
    "ce-pair+"[0-9]*   -> {CE-pair ","}+
    "Char*"[0-9]*      -> CHAR*
