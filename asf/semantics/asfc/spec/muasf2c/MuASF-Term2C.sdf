module MuASF-Term2C

imports Rules2C-Aux

exports
  context-free syntax
    cterms2cstats({Term ","}+,Expression,IntCon,IntCon) -> DCAS-tuple

  context-free syntax
    term2cstats(Bool,Term,C-env,C-env,FunId,
                {NamePair ","}*,IntCon)                     -> SlI-tuple
    term2carg(Bool,Term,C-env,C-env,IntCon,
              Expression,FunId,{NamePair ","}*)             -> ADS-tuple
    terms2cargs(Bool,{Term ","}+,C-env,C-env,IntCon,
                Expression,FunId,{NamePair ","}*)           -> ADS-tuple
    term2carg2(Bool,Term,C-env,C-env,IntCon,
               Expression,FunId,{NamePair ","}*)            -> ADS-tuple

  context-free syntax
    find-common-terms({C-Rule ";"}*,{NamePair ","}*,IntCon)  -> SRI-tuple
    second-term-common({C-Rule ";"}*,{NamePair ","}*,IntCon) -> SRI-tuple

  context-free syntax
    transform-call(Primary-expression,FunId,
                   {NamePair ","}*,{Expression ","}*)        -> Expression
    delay-args(Int,{Term ","}*,{Expression ","}*,
                 {NamePair ","}*)                            -> Argument-expression-list
    delay-term(Expression,{NamePair ","}*)                   -> Expression
    delay-terms({Expression ","}*,{NamePair ","}*)           -> Argument-expression-list
    is-special-name(Identifier)                              -> Bool
    unquote-plain-argument(Expression,FunId,{NamePair ","}*) -> Expression

  variables
    "Expression"[0-9]* -> Expression

hiddens
  variables
    "Ch"[0-9]*      -> CHAR
    "Char*"[0-9]*   -> CHAR*
    "Char+"[0-9]*   -> CHAR+
    "Int"[0-9]*     -> Int
