%%
%%    Meta-Environment - An environment for language prototyping.
%%    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, The Netherlands. 
%%
%%    This program is free software; you can redistribute it and/or modify
%%    it under the terms of the GNU General Public License as published by
%%    the Free Software Foundation; either version 2 of the License, or
%%    (at your option) any later version.
%%
%%    This program is distributed in the hope that it will be useful,
%%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%%    GNU General Public License for more details.
%%
%%    You should have received a copy of the GNU General Public License
%%    along with this program; if not, write to the Free Software
%%    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
%%
%%  MuASF-Rules2C
module MuASF-Rules2C

imports RenameVars Improve-C-code Transform-Constructors Locate-Constants

exports
  context-free syntax
    rulesopt2cfuncs(ModId,{FuncDef ";"}*,RulesOpt,NameTable)  -> FT-tuple
    sigargs2cstats(FunId,{SigArg ","}*)                 -> Statement-list-opt
    funargs2cstats(FunId,Argument-expression-list,TermList,{NamePair ","}*, IntCon) -> 
        SlI-tuple

hiddens
  context-free syntax
    restore-ignored-funids-in-nf(Argument-expression-list, TermList, {NamePair ","}*) -> 
                                                              Argument-expression-list
    restore-ignored-funids-in-arg(Expression, Term, {NamePair ","}*) -> Expression

  context-free syntax
    asfrules2cfuncs({FuncDef ";"}*,{Rule ";"}+,
                    {NamePair ","}*)                   -> FT-tuple
    asfrules2cfuncs({FuncDef ";"}*,{Rule ";"}*,
                    {Rule ";"}*,{NamePair ","}*)       -> FT-tuple
    asfrules2cfunc({Rule ";"}+,{NamePair ","}*)        -> Declaration
    funargs2cargs({Term ","}+,IntCon)                    -> PA-tuple
    asfrules2cstats({Rule ";"}*,{NamePair ","}*) -> SlI-tuple

  context-free syntax
    asfrules2cstats({C-Rule ";"}*,{C-Rule ";"}*,
                    {NamePair ","}*,IntCon)              -> SlI-tuple
    asfrules2cstats1({C-Rule ";"}*,
                     {NamePair ","}*,IntCon)             -> SlI-tuple
    asfrules2cstats2({C-Rule ";"}*,
                     {NamePair ","}*,IntCon)             -> SlI-tuple

  context-free syntax
    sigargs2cbuild({SigArg ","}+,IntCon) -> ADS-tuple

  context-free syntax
    list2cstats({C-Rule ";"}+,{NamePair ","}*,IntCon) -> SlI-tuple
    listpatterns2cstats({C-Rule ";"}*,Expression,
                        {NamePair ","}*,IntCon)       -> SlI-tuple
    listpattern2cstats({C-Rule ";"}+,Expression,
                       {NamePair ","}*,IntCon)        -> ADSI-tuple
    listpattern2cstats(Bool,{FV-Path ","}+,{C-Rule ";"}+,
                       Expression,{NamePair ","}*,
                       IntCon)                              -> ADSI-tuple

    
hiddens
  variables
    "Char"[0-9]*     -> CHAR
    "Char*"[0-9]*    -> CHAR*
    "Char+"[0-9]*    -> CHAR+
    "Aexp"[0-9]*     -> Expression
    "Eipair"[0-9]*   -> EI-pair
    "Eipair*"[0-9]*  -> {EI-pair ","}*
    "Eipair+"[0-9]*  -> {EI-pair ","}+
    "Cint"[0-9]*     -> Integer-constant
    "Expression+"[0-9]* -> { Expression ","}+
    "Expression"[0-9]* -> Expression
