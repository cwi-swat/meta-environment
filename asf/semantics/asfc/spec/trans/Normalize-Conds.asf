equations

  [nc-1'1] normalize-rulesopt(Rulesopt1) = Rulesopt2
           =========================================
           normalize-conditions(module Modid
                                       Signopt
                                       Rulesopt1) =
              module Modid
                     Signopt
                     Rulesopt2

  [nro-1'1] normalize-rulesopt() =

  [nro-1'2] normalize-rulesopt(rules) = rules

  [nro-1'3] normalize-rules(Rule+1) = Rule+2
            ================================
            normalize-rulesopt(rules Rule+1) = rules Rule+2

  [nr-1'1] normalize-rules(Rule) = normalize-rule(Rule)

  [nr-1'2] normalize-rule(Rule1) = Rule2,
           normalize-rules(Rule+1) = Rule+2
           ================================
           normalize-rules(Rule1; Rule+1) =  Rule2; Rule+2

%%%  [nr-2'1] normalize-rule(default:Term1 = Term2) = default:Term1 = Term2

%%%  [nr-2'2] normalize-rule(Term1 = Term2) = Term1 = Term2

  [nr-2'1] normalize-conds(Cond+1,1) = (,Cond+2,Aint)
           ==========================================
           normalize-rule(default:Cond+1 ==> Term1 = Term2) =
             default:Cond+2 ==> Term1 = Term2

  [nr-2'2] normalize-conds(Cond+1,1) = (,Cond+2,Aint)
           ==========================================
           normalize-rule(Cond+1 ==> Term1 = Term2) =
             Cond+2 ==> Term1 = Term2

  [default-nr-2'2] normalize-rule(Rule) = Rule

  [nc-1'1] normalize-conds(Cond,Aint) = normalize-cond(Cond,Aint)

  [nc-1'2] normalize-cond(Cond1,Aint1) = (,Cond+2,Aint2),
           normalize-conds(Cond+1,Aint2) = (,Cond+3,Aint3)
           ===============================================
           normalize-conds(Cond1 & Cond+1,Aint1) =  (,Cond+2 & Cond+3,Aint3)

  [nc-2'2] is-var-term(Term2) = true
           =========================
           normalize-cond(Term1 =: Term2,Aint) = (,Term1 =: Term2,Aint)

  [nc-2'3] normalize-terms(Term+1,Aint1) = (Term+2,Cond*,Aint2)
           ====================================================
           normalize-cond(Term1 =: Funid(Term+1),Aint1) =
             (,Term1 =: Funid(Term+2) & Cond*,Aint2)

  [default-nc-2'1] normalize-cond(Term1 =: Term2,Aint) = (,Term1 =: Term2,Aint)

  [nt-1'1] normalize-terms(Term,Aint) = normalize-term(Term,Aint)

  [nt-1'2] normalize-term(Term1,Aint1) = (Term2,Cond*1,Aint2),
           normalize-terms(Term+1,Aint2) = (Term+2,Cond*2,Aint3)
           =====================================================
           normalize-terms(Term1, Term+1,Aint1) =  (Term2,Term+2,Cond*1 & Cond*2,Aint3)

  [nt-2'1] is-var-term(Term) = true
           ========================
           normalize-term(Term,Aint) = (Term,,Aint)

  [nt-2'2] Aint = natcon(Char*),
           varid("C""V" Char*) = Term2,
           term-equal(Term2,Funid) =: t = Cond
           ===================================
           normalize-term(Funid,Aint) = (Term2,Cond,succ(Aint))

  [nt-2'3] is-list-funid(Funid) = false,
           Aint = natcon(Char*),
           varid("C""V" Char*) = Term2,
           normalize-terms(Term+1,succ(Aint)) = (Term+2,Cond*,Aint2),
           Term2 =: Funid(Term+2) = Cond
           ===================================
           normalize-term(Funid(Term+1),Aint) = (Term2,Cond & Cond*,Aint2)

  [nt-2'4] is-list-funid(Funid) = true,
           Aint = natcon(Char*),
           varid("C""V" Char*) = Term2,
           Term2 =: Funid(Term+) = Cond
           ============================
           normalize-term(Funid(Term+),Aint) = (Term2,Cond,succ(Aint))

  [nlir-1'1] normalize-list-in-term(Term1,1) = (Term3,Cond*,Aint),
             make-conditional-rule(Cond*,Term3 = Term2) = Rule1,
             make-default-rule(Rule1) = Rule2
             ================================
             normalize-list-in-rule(default:Term1 = Term2) = Rule2

  [nlir-1'2] normalize-list-in-term(Term1,1) = (Term3,Cond*,Aint),
             make-conditional-rule(Cond*,Term3 = Term2) = Rule
             =================================================
             normalize-list-in-rule(Term1 = Term2) = Rule

  [nlir-1'3] normalize-list-in-term(Term1,1) = (Term3,Cond*,Aint1),
             normalize-list-in-conds(Cond+1,Aint1) = (,Cond+2,Aint2)
             =======================================================
             normalize-list-in-rule(default:Cond+1 ==> Term1 = Term2) =
               default:Cond* & Cond+2 ==> Term3 = Term2

  [nlir-1'4] normalize-list-in-term(Term1,1) = (Term3,Cond*,Aint1),
             normalize-list-in-conds(Cond+1,Aint1) = (,Cond+2,Aint2)
             =======================================================
             normalize-list-in-rule(Cond+1 ==> Term1 = Term2) =
               Cond* & Cond+2 ==> Term3 = Term2

  [nlic-1'1] normalize-list-in-conds(Cond,Aint) = normalize-list-in-cond(Cond,Aint)

  [nlic-1'2] normalize-list-in-cond(Cond1,Aint1) = (,Cond+2,Aint2),
             normalize-list-in-conds(Cond+1,Aint2) = (,Cond+3,Aint3)
             =======================================================
             normalize-list-in-conds(Cond1 & Cond+1,Aint1) =  (,Cond+2 & Cond+3,Aint3)

  [nlic-2'1] is-var-term(Term2) = true
             =========================
             normalize-list-in-cond(Term1 =: Term2,Aint) = (,Term1 =: Term2,Aint)

  [nlic-2'2] normalize-list-in-terms(Term+1,Aint1) = (Term+2,Cond*,Aint2)
             ============================================================
             normalize-list-in-cond(Term1 =: Funid(Term+1),Aint1) =
               (,Term1 =: Funid(Term+2) & Cond*,Aint2)

  [default-nlic-2'3] normalize-list-in-cond(Term1 =: Term2,Aint) = (,Term1 =: Term2,Aint)

  [nlit-1'1] is-list-funid(Funid) = false,
             normalize-list-in-terms(Term+1,Aint1) = (Term+2,Cond*,Aint2)
             ============================================================
             normalize-list-in-term(Funid(Term+1),Aint1) = (Funid(Term+2),Cond*,Aint2)

  [nlit-1'2] is-list-funid(Funid) = true,
             normalize-list-args(Term+1,Aint1) = (Term+2,Cond*,Aint2)
             ========================================================
             normalize-list-in-term(Funid(Term+1),Aint1) = (Funid(Term+2),Cond*,Aint2)

  [default-nlit-1'3] normalize-list-in-term(Term,Aint) = (Term,,Aint)

  [nlits-1'1] normalize-list-in-term(Term1,Aint1) = (Term2,Cond*1,Aint2),
              normalize-list-in-terms(Term+1,Aint2) = (Term+2,Cond*2,Aint3)
              =============================================================
              normalize-list-in-terms(Term1,Term+1,Aint1) =
                (Term2,Term+2,Cond*1 & Cond*2,Aint3)

  [nlits-1'2] normalize-list-in-terms(Term,Aint) =
                 normalize-list-in-term(Term,Aint)

  [nlas-1'1] normalize-list-arg(Term1,Aint1) = (Term3,Cond*1,Aint2),
             normalize-list-args(Term2,Aint2) = (Term4,Cond*2,Aint3)
             =========================================================
             normalize-list-args(cons(Term1,Term2),Aint1) =
               (cons(Term3,Term4),Cond*1 & Cond*2,Aint3)

  [default-nlas-1'2] normalize-list-args(Term,Aint) = normalize-list-arg(Term,Aint)

  [nla-2'1] Aint = natcon(Char*),
            varid("C""L""V" Char*) = Term2,
            normalize-list-in-terms(Term+1,succ(Aint)) = (Term+2,Cond*,Aint2),
            Term2 =: Funid(Term+2) = Cond
            =============================
            normalize-list-arg(Funid(Term+1),Aint) = (Term2,Cond & Cond*,Aint2)

  [default-nla-2'2] normalize-list-arg(Term,Aint) = (Term,,Aint)

%%%  [tll-1'3] Term1 = Funid1(Term+),
%%%            prefix-id("lookup__",Funid1,Aint1) = Funid2
%%%            ===========================================
%%%            transform-list-rule(Cond+ ==> Term1 = Term2,Aint1) =
%%%              transform-list-conds(Funid2(Term+),Cond+,,Term1,Term2,1)

%%%  [tlc-1'1] contains-zero-or-one-list-vars-in-cond(Term1 =: Term2) = true,
%%%            term-contains-var(Term2) = true
%%%            ===============================
%%%            transform-list-conds(Funid1(Term+1),Term1 =: Term2 & Cond+1,
%%%                            Cond*2,Term3,Term4,Aint) =
%%%              transform-list-conds(Funid1(Term+1,Term2),Cond+1,
%%%                              Cond*2 & Term1 =: Term2,Term3,Term4,Aint)

%%%  [tlc-1'2] contains-zero-or-one-list-vars-in-cond(Term1 =: Term2) = true,
%%%            term-contains-var(Term2) = false
%%%            ================================
%%%            transform-list-conds(Funid1(Term+1),Term1 =: Term2 & Cond+1,
%%%                            Cond*2,Term3,Term4,Aint) =
%%%              transform-list-conds(Funid1(Term+1),Cond+1,
%%%                              Cond*2 & Term1 =: Term2,Term3,Term4,Aint)

%%%  [tlc-1'3] contains-zero-or-one-list-vars-in-cond(Term1 =: Term2) = false,
%%%            newvar(succ(Aint),OkV) = Varid,
%%%            make-new-funcdef(Funid1(Term+1,Term1),Funid1) = Funcdef,
%%%            make-conditional-rule(Cond*1,Funid1(Term+1,Term2) = ok(Term4)) = Rule
%%%            =====================================================================
%%%            transform-list-conds(Funid1(Term+1),Term1 =: Term2 & Cond*1,
%%%                            Cond*2,Term3,Term4,Aint) =
%%%              (Funcdef,
%%%               Cond*2 & Funid1(Term+1,Term1) =: ok(Varid)
%%%               ==>
%%%               Term3 = Varid;
%%%               Rule,succ(succ(Aint)))

%%%  [default-tlc-1'4] transform-list-conds(Term1,Cond & Cond+1,
%%%                                    Cond*2,Term3,Term4,Aint) =
%%%                      transform-list-conds(Term1,Cond+1,
%%%                                      Cond*2 & Cond,Term3,Term4,Aint)
