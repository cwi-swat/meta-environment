%%
%%    Meta-Environment - An environment for language prototyping.
%%    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, The Netherlands. 
%%
%%    This program is free software; you can redistribute it and/or modify
%%    it under the terms of the GNU General Public License as published by
%%    the Free Software Foundation; either version 2 of the License, or
%%    (at your option) any later version.
%%
%%    This program is distributed in the hope that it will be useful,
%%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%%    GNU General Public License for more details.
%%
%%    You should have received a copy of the GNU General Public License
%%    along with this program; if not, write to the Free Software
%%    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
%%
%% The module {\tt Remove-Lists} takes care of the
%% transformation of rewrite rules with list
%% matching into rewrite rules without
%% list matching. The current specification only
%% deals with:
%% \begin{itemize}
%% \item list constructs in which at most one list
%% variable occurs.
%% \end{itemize}
%%
%% This specification is not yet complete. Extentions are
%% \begin{itemize}
%% \item set-like transformations.
%% \end{itemize}
module Remove-Lists

imports RenameVars Normalize-Conds Trans-Set-Pats

exports
  context-free syntax
    remove-list-matching(Module) -> Module

hiddens
  context-free syntax
    rem-lists-from-ruleopt(RulesOpt)           -> FuncRulePair
    rem-lists-from-rules({Rule ";"}*,IntCon)     -> FuncRuleTuple
    rem-lists-from-rule(Rule,IntCon)             -> FuncRuleTuple
    rem-listvars-from-rules({Rule ";"}*,IntCon)  -> FuncRuleTuple
    rem-listvars-from-rule(Rule,IntCon)          -> FuncRuleTuple
    rem-lists-from-simple-rule(Bool,Rule,IntCon) -> FuncRuleTuple
    %%%rem-lists-from-simple-rule(Rule,AInt) -> FuncRuleTuple
    rem-lists-from-default-rule(Rule,IntCon)     -> FuncRuleTuple
    remove-simple-lists(Rule)                  -> Rule

  context-free syntax
    rem-lists-from-lhs-term(Term,IntVarEnv)             -> Term-CList-VarEnv
    rem-lists-from-lhs-terms({Term ","}+,IntVarEnv)     -> Term-CList-VarEnv
    rem-lists-from-rhs-term(Term,IntVarEnv)             -> Term-CList-VarEnv
    rem-lists-from-rhs-terms({Term ","}+,IntVarEnv)     -> Term-CList-VarEnv
    rem-lists-from-cond(Cond,IntVarEnv)                 -> CList-VarEnv
    rem-lists-from-conds({Cond "&"}+,IntVarEnv)         -> CList-VarEnv
    transform-lhs-list-terms({Term ","}+,IntVarEnv)     -> Term-CList-VarEnv
    transform-rhs-list-terms({Term ","}+,IntVarEnv)     -> Term-CList-VarEnv
    transform-no-list-terms({Term ","}+,IntVarEnv)      -> Term-CList-VarEnv
    transform-lhs-list-var(Term,IntVarEnv)              -> Term-CList-VarEnv
    transform-rhs-list-var(Term,IntVarEnv)              -> Term-CList-VarEnv
    transform-lhs-single-term({Term ","}+,IntVarEnv)    -> Term-CList-VarEnv
    transform-lhs-double-terms({Term ","}+,IntVarEnv)   -> Term-CList-VarEnv
    transform-lhs-multiple-terms({Term ","}+,IntVarEnv) -> Term-CList-VarEnv
