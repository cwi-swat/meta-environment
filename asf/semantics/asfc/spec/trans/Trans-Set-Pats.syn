%%
%%    Meta-Environment - An environment for language prototyping.
%%    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, The Netherlands. 
%%
%%    This program is free software; you can redistribute it and/or modify
%%    it under the terms of the GNU General Public License as published by
%%    the Free Software Foundation; either version 2 of the License, or
%%    (at your option) any later version.
%%
%%    This program is distributed in the hope that it will be useful,
%%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%%    GNU General Public License for more details.
%%
%%    You should have received a copy of the GNU General Public License
%%    along with this program; if not, write to the Free Software
%%    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
%%
%% The module {\tt Trans-Lookup-Pats} takes care of transforming
%% rewrite rules with lookup-like list matching patterns into
%% rewrite rules which traverse recursively through the lists.

imports Check-List-Pats

exports
  context-free syntax
    transform-special-rule(Rule,IntCon) -> FuncRuleTuple

hiddens
  context-free syntax
    transform-set-rule(FunId,{Cond "&"}+,Term,IntCon) -> FuncRuleTuple

%%%hiddens
%%%  context-free syntax
%%%    get-list-type(Term)              -> FunId
%%%    find-list-type(TermList)         -> FunId
%%%    get-first-var-in-lhs(Term)       -> Term
%%%    find-first-var-in-lhs(TermList)  -> Term
%%%    get-second-var-in-lhs(Term)      -> Term
%%%    find-second-var-in-lhs(TermList) -> Term
%%%    get-var-in-rhs(Term)             -> Term
%%%    find-var-in-rhs(TermList)        -> Term
