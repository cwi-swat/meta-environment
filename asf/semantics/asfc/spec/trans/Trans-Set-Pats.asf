%%
%%    Meta-Environment - An environment for language prototyping.
%%    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, The Netherlands. 
%%
%%    This program is free software; you can redistribute it and/or modify
%%    it under the terms of the GNU General Public License as published by
%%    the Free Software Foundation; either version 2 of the License, or
%%    (at your option) any later version.
%%
%%    This program is distributed in the hope that it will be useful,
%%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%%    GNU General Public License for more details.
%%
%%    You should have received a copy of the GNU General Public License
%%    along with this program; if not, write to the Free Software
%%    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
%%
equations

  [tll-1'1] is-like-rule("set",Cond+ ==> Term1 = Term2) = true,
            Term1 = Funid1(Term+),
            prefix-id("new__",Funid1,Aint1) = Funid2
            ========================================
            transform-special-rule(Cond+ ==> Term1 = Term2,Aint1) =
              transform-set-rule(Funid2,Cond+,Term1,1)

%% The function {\tt transform-lhs} transforms a list matching
%% pattern into a set of recursive functions.

  [tl-1'1] newvar(Aint,New) = Varid1,
           newvar(Aint,List) = Varid2,
           newvar(succ(Aint),New) = Varid3
           ===============================
           transform-set-rule(Funid1,Cond+,
                              Funid3(Funid4(cons(Term1,
                                                 cons(Term2,
                                                      cons(Term3,
                                                           cons(Term4,Term5)))))),Aint) =
             (,
              Cond+ &
              Funid3(Funid4(cons(Term2,Term5))) =: Funid3(Funid4(Varid1,*Varid2)) &
              Funid3(Funid4(cons(Term1,cons(Varid1,cons(Term3,*Varid2))))) =: Varid3
              ==>
              Funid3(Funid4(cons(Term1,
                                 cons(Term2,
                                      cons(Term3,
                                           cons(Term4,Term5)))))) =
                Varid3,
              succ(Aint))

%% Functions to initialize the lookup pattern in the argument list.
%%%  [glt-1'1] is-list-funid(Funid2) = true,
%%%            is-list-elem-list-elem-list(cons(Term1,Term2)) = true
%%%            =====================================================
%%%            get-list-type(Funid2(cons(Term1,Term2))) = Funid2

%%%  [glt-1'2] is-list-funid(Funid1) = false,
%%%            is-list-funid(Funid2) = true
%%%            ============================
%%%            get-list-type(Funid1(Funid2(Term+1))) = get-list-type(Funid2(Term+1))

%%%  [glt-1'3] is-list-funid(Funid1) = false
%%%            =============================
%%%            get-list-type(Funid1(Term+1)) = find-list-type(Term+1)

%%%  [flp-1'1] contains-lhs-pattern("set",Term) = true
%%%            =====================================
%%%            find-list-type(Term,Term*2) = get-list-type(Term)

%%%  [flp-1'2] contains-lhs-pattern("set",Term) = false
%%%            ======================================
%%%            find-list-type(Term,Term+) = find-list-type(Term+)

%%%  [fvl-1'1] is-list-funid(Funid2) = true,
%%%            is-list-elem-list-elem-list(cons(Term1,
%%%                                             cons(Term2,
%%%                                                  cons(Term3,
%%%                                                       cons(Term4,Term5))))) = true
%%%            =======================================================================
%%%            get-first-var-in-lhs(Funid2(cons(Term1,
%%%                                             cons(Term2,
%%%                                                  cons(Term3,
%%%                                                       cons(Term4,Term5)))))) =
%%%              Term2

%%%  [fvl-1'2] is-list-funid(Funid1) = false,
%%%            is-list-funid(Funid2) = true
%%%            ============================
%%%            get-first-var-in-lhs(Funid1(Funid2(Term+1))) =
%%%              get-first-var-in-lhs(Funid2(Term+1))

%%%  [fvl-1'3] is-list-funid(Funid1) = false
%%%            =============================
%%%            get-first-var-in-lhs(Funid1(Term+1)) = find-first-var-in-lhs(Term+1)

%%%  [fvl-1'1] contains-lhs-pattern("set",Term) = true
%%%            =====================================
%%%            find-first-var-in-lhs(Term,Term*2) = get-first-var-in-lhs(Term)

%%%  [fvl-1'2] contains-lhs-pattern("set",Term) = false
%%%            ======================================
%%%            find-first-var-in-lhs(Term,Term+) = find-first-var-in-lhs(Term+)

%%%  [svl-1'1] is-list-funid(Funid2) = true,
%%%            is-list-elem-list-elem-list(cons(Term1,
%%%                                             cons(Term2,
%%%                                                  cons(Term3,
%%%                                                       cons(Term4,Term5))))) = true
%%%            =======================================================================
%%%            get-second-var-in-lhs(Funid2(cons(Term1,
%%%                                              cons(Term2,
%%%                                                   cons(Term3,
%%%                                                        cons(Term4,Term5)))))) =
%%%              Term4

%%%  [svl-1'2] is-list-funid(Funid1) = false,
%%%            is-list-funid(Funid2) = true
%%%            ============================
%%%            get-second-var-in-lhs(Funid1(Funid2(Term+1))) =
%%%              get-second-var-in-lhs(Funid2(Term+1))

%%%  [svl-1'3] is-list-funid(Funid1) = false
%%%            =============================
%%%            get-second-var-in-lhs(Funid1(Term+1)) = find-second-var-in-lhs(Term+1)

%%%  [svl-1'1] contains-lhs-pattern("set",Term) = true
%%%            =====================================
%%%            find-second-var-in-lhs(Term,Term*2) = get-second-var-in-lhs(Term)

%%%  [svl-1'2] contains-lhs-pattern("set",Term) = false
%%%            ======================================
%%%            find-second-var-in-lhs(Term,Term+) = find-second-var-in-lhs(Term+)

%%%  [vr-1'1] is-list-funid(Funid2) = true,
%%%           is-list-elem-list-list(cons(Term1,
%%%                                       cons(Term2,
%%%                                            cons(Term3,Term4)))) = true
%%%           ============================================================
%%%           get-var-in-rhs(Funid2(cons(Term1,
%%%                                      cons(Term2,
%%%                                            cons(Term3,Term4))))) =
%%%             Term2

%%%  [vr-1'2] is-list-funid(Funid2) = true,
%%%           is-list-list-elem-list(cons(Term1,
%%%                                       cons(Term2,
%%%                                            cons(Term3,Term4)))) = true
%%%           ============================================================
%%%           get-var-in-rhs(Funid2(cons(Term1,
%%%                                      cons(Term2,
%%%                                            cons(Term3,Term4))))) =
%%%             Term3

%%%  [vr-1'2] is-list-funid(Funid1) = false,
%%%           is-list-funid(Funid2) = true
%%%           ============================
%%%           get-var-in-rhs(Funid1(Funid2(Term+1))) =
%%%             get-var-in-rhs(Funid2(Term+1))

%%%  [vr-1'3] is-list-funid(Funid1) = false
%%%           =============================
%%%           get-var-in-rhs(Funid1(Term+1)) = find-var-in-rhs(Term+1)

%%%  [fvr-1'1] contains-rhs-pattern("set",Term) = true
%%%            =====================================
%%%            find-var-in-rhs(Term,Term*2) = get-var-in-rhs(Term)

%%%  [fvr-1'2] contains-rhs-pattern("set",Term) = false
%%%            ======================================
%%%            find-var-in-rhs(Term,Term+) = find-var-in-rhs(Term+)
