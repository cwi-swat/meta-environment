%% The module {\tt  Make-Matching-Conds} transforms the
%% the positive and negative conditions into
%% matching conditions. In order to perform
%% this task it is essential that:
%% \begin{enumerate}
%% \item No default rewrite rules are used.
%% \item The functions in the conditions are
%% defined in the signature. So, this transformation
%% can only be performed when the specification is flattened.
%% Or, when translating \asfix\ to one of \msasf\ formalisms.
%% \end{enumerate}
module Make-Assign-Conds-C

imports MuASF-Equations-Ops

exports
  context-free syntax
    make-matching-conds(Module) -> Module

hiddens
  context-free syntax
    make-mc-ruleopt(RulesOpt)  -> RuleList
    make-mc-rules({Rule ";"}*) -> RuleList
    make-mc-rule(Rule)         -> Rule
  context-free syntax
    inspect-term(Term,IntVarEnv)         -> IntVarEnv
    inspect-terms({Term ","}+,IntVarEnv) -> IntVarEnv
    make-mc-conds({Cond "&"}+,IntVarEnv) -> CList-VarEnv
    make-mc-cond(Cond,IntVarEnv)         -> CList-VarEnv

hiddens
  variables
    "Char*"[0-9]*     -> CHAR*
    "Char+"[0-9]*     -> CHAR+
    "Cond"[0-9]*      -> Cond
    "Cond+"[0-9]*     -> {Cond "&"}+
    "Cond*"[0-9]*     -> {Cond "&"}*
    "Funid"[0-9]*     -> FunId
    "Rulesopt"[0-9]*  -> RulesOpt
    "Rule"[0-9]*      -> Rule
    "Rule+"[0-9]*     -> {Rule ";"}+
    "Ivarenv"[0-9]*   -> IntVarEnv
    "Term+"[0-9]*     -> {Term ","}+
    "Term"[0-9]*      -> Term
