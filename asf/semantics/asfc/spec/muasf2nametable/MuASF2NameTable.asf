equations

[m2n]
Nametable := create-name-table(Signopt,(,funid("l""f""_" Char*),1,1)),
Signopt3 := rename-signatureopt(Signopt, Nametable),
Rulesopt2 := rename-rulesopt(Rulesopt, Nametable),
Module2 := module modid(Char*) Signopt3 Rulesopt2
===>
muasf2nametable(module modid(Char*) Signopt Rulesopt) = (Module2, Nametable)

[rn-0]
rename-signatureopt(signature Funcdef*, Nametable) = 
signature rename-funcdeflist(Funcdef*, Nametable)

[rn-0-2]
rename-signatureopt(,Nametable) =

[rn-1]
rename-funcdeflist(, Nametable) = 

[rn-2]
Funcdef2 := rename-funcdef(Funcdef, Nametable),
Funcdef*2 := rename-funcdeflist(Funcdef*, Nametable)
===>
rename-funcdeflist(Funcdef; Funcdef*, Nametable) = Funcdef2; Funcdef*2

[rn-3]
rename-funcdef(Funid,Nametable) = rename-funid(Funid,Nametable)

[rn-4]
rename-funcdef(Funid Attrs,Nametable) = rename-funid(Funid,Nametable) Attrs

[rn-5]
rename-funcdef(Funid(Sigarg+) Attrs,Nametable) = 
rename-funid(Funid,Nametable)(Sigarg+) Attrs

[rn-6]
rename-funcdef(Funid(Sigarg+),Nametable) = 
rename-funid(Funid,Nametable)(Sigarg+)

[rn-7]
rename-funid(Funid,(Namepair*,Funid2,Aint0,Aint1)) = 
pn-lookup(normal-prod(Funid),Namepair*)

[rn-8]
rename-rulesopt(rules Rule*,Nametable) = rules rename-rulelist(Rule*,Nametable)

[rn-8-2]
rename-rulesopt(,Nametable) = 

[rn-9]
rename-rulelist(,Nametable) =

[rn-10]
Rule2 := rename-rule(Rule,Nametable),
Rule*2 := rename-rulelist(Rule*,Nametable)
===>
rename-rulelist(Rule; Rule*,Nametable) = Rule2 ; Rule*2

[rn-11]
Term3 := rename-term(Term1,Nametable),
Term4 := rename-term(Term2,Nametable)
===>
rename-rule(Term1 = Term2,Nametable) =
Term3 = Term4


[rn-12]
Term3 := rename-term(Term1,Nametable),
Term4 := rename-term(Term2,Nametable)
===>
rename-rule(default: Term1 = Term2,Nametable) =
default: Term3 = Term4


[rn-13]
Term3 := rename-term(Term1,Nametable),
Term4 := rename-term(Term2,Nametable),
Condlist2 := rename-condlist(Condlist,Nametable)
===>
rename-rule(Condlist ==> Term1 = Term2,Nametable) =
Condlist2 ==> Term3 = Term4

[rn-14]
Term3 := rename-term(Term1,Nametable),
Term4 := rename-term(Term2,Nametable),
Condlist2 := rename-condlist(Condlist,Nametable)
===>
rename-rule(default: Condlist ==> Term1 = Term2,Nametable) =
default: Condlist2 ==> Term3 = Term4

[rn-15]
Cond2 := rename-cond(Cond,Nametable),
Cond*2 := rename-condlist(Cond*,Nametable)
===>
rename-condlist(Cond & Cond*,Nametable) = Cond2 & Cond*2

[rn-16]
rename-condlist(,Nametable) =

[rn-17]
Term3 := rename-term(Term1,Nametable),
Term4 := rename-term(Term2,Nametable)
===>
rename-cond(Term1 == Term2,Nametable) =
Term3 == Term4

[rn-18]
Term3 := rename-term(Term1,Nametable),
Term4 := rename-term(Term2,Nametable)
===>
rename-cond(Term1 != Term2,Nametable) =
Term3 != Term4

[rn-18-2]
Term3 := rename-term(Term1,Nametable),
Term4 := rename-term(Term2,Nametable)
===>
rename-cond(Term1 =:! Term2,Nametable) =
Term3 =:! Term4

[rn-19]
rename-term(Funid,Nametable) = rename-funid(Funid,Nametable)

[rn-20]
Funid2 := rename-funid(Funid,Nametable),
Term+2 := rename-termlist(Term+,Nametable)
===>
rename-term(Funid(Term+),Nametable) = Funid2(Term+2)

[rn-21]
rename-term(Term1 : Term2, Nametable) = rename-term(Term1,Nametable) : Term2

[default-rn-19]
rename-term(Term,Nametable) = Term


[rn-21]
rename-termlist(Term,Nametable) = rename-term(Term,Nametable)

[rn-22]
Term2 := rename-term(Term,Nametable),
Term+2 := rename-termlist(Term+,Nametable)
===>
rename-termlist(Term, Term+,Nametable) = Term2, Term+2


[cnt-1'1] 
create-name-table(,Nametable) = Nametable

[cnt-1'2] 
create-name-table(signature ,Nametable) = Nametable

[cnt-1'3] 
Nametable2 := funcdefs2table(Funcdef+,Nametable1)
===>
create-name-table(signature Funcdef+,Nametable1) = Nametable2

[f2t-1'1] 
funcdefs2table(Funcdef,Nametable) =
funcdef2table(Funcdef,Nametable)

[f2t-1'2]
Nametable2 := funcdef2table(Funcdef,Nametable1),
Nametable3 := funcdefs2table(Funcdef+,Nametable2)
===>
funcdefs2table(Funcdef;Funcdef+,Nametable1) = Nametable3

[f2t-2'1]
(Namepair*, Funid, Aint0, Aint1) := Nametable1,
Nametable2 := (Namepair*, Funid, succ(Aint0), Aint1), 
Funid2 := construct-funid(Funid1, Aint0),
Funid3 := normal-prod(Funid1),
Nametable3 := nt-add(Funid3,Funid2,Nametable2)
===>
funcdef2table(Funid1(Sigarg+),Nametable1) = Nametable3

[f2t-2'2]
(Namepair*, Funid, Aint0, Aint1) := Nametable1,
Nametable2 := (Namepair*, Funid, succ(Aint0), Aint1),
{Term+} := Attrs,
Funid2 := construct-funid(Funid1, Aint0, Term+),
Funid3 := normal-prod(Funid1),
Nametable3 := nt-add(Funid3,Funid2,Term+,Nametable2)
===>
funcdef2table(Funid1(Sigarg+) Attrs,Nametable1) = Nametable3

[f2t-2'3]
(Namepair*, Funid, Aint0, Aint1) := Nametable1,
Nametable2 := (Namepair*, Funid, succ(Aint0), Aint1),
Funid2 := construct-funid(Funid1,Aint0),
Funid3 := normal-prod(Funid1),
Nametable3 := nt-add(Funid3,Funid2,Nametable2)
===>
funcdef2table(Funid1,Nametable1) = Nametable3

[f2t-2'4]
(Namepair*, Funid, Aint0, Aint1) := Nametable1,
Nametable2 := (Namepair*, Funid, succ(Aint0), Aint1),
{Term+} := Attrs,
Funid2 := construct-funid(Funid1,Aint0,Term+),
Funid3 := normal-prod(Funid1),
Nametable3 := nt-add(Funid3,Funid2,Term+,Nametable2)
===>
funcdef2table(Funid1 Attrs,Nametable1) = Nametable3

[cf-0]
construct-funid(funid(""""l""i""s""t""(" Char+2 ")""""),natcon(Char+)) = 
funid(""""{" "l""f""_""l""i""s""t""_" Char+ "}"""")

[cf-1]
construct-funid(funid(""""p""r""o""d""(" Char+2 ")""""),natcon(Char+)) = 
funid("l""f""_" Char+)

%% Function that return lists are prefixed with LIST by the frontend
[cf-3]
construct-funid(funid(""""L""I""S""T""p""r""o""d""(" Char+2 ")""""),natcon(Char+)) =
funid(""""[" "l""f""_" Char+ "]"""")

[cf-3]
funid(Char*1) := strategy-id(Term+),
funid(Char*2)  := type-id(Term+),
funid(Char*3) := continuation-id(Term+)
====>
construct-funid(funid(""""L""I""S""T""p""r""o""d""(" Char+2 ")""""),natcon(Char+),
                Term*1,traversal(Term+),Term*2) =
funid(""""[" "l""f""_" Char*2 "_" Char*1 "_" Char*3 "_" Char+ "]"""")

[cf-5]
funid(Char*1) := strategy-id(Term+),
funid(Char*2)  := type-id(Term+),
funid(Char*3) := continuation-id(Term+)
====>
construct-funid(funid(""""p""r""o""d""("Char+3")""""),natcon(Char+),
                Term*1,traversal(Term+),Term*2) =
  funid("l""f""_" Char*2 "_" Char*1 "_" Char*3 "_" Char+)

[default-cf-2]
construct-funid(Funid,Aint0, Term+) = 
construct-funid(Funid,Aint0)

equations

[si] strategy-id(Term*1,top-down,Term*2) = td
[default-si] strategy-id(Term*) = bu

[ti] type-id(Term*1,trafo,Term*2,accu,Term*3) = accutrafo
[ti] type-id(Term*1,accu,Term*2,trafo,Term*3) = accutrafo
[default-ti] type-id(Term*1,trafo,Term*2) = trafo
[default-ti] type-id(Term*1,accu,Term*2)  = accu

[ci-cont] continuation-id(Term*1, continue, Term*2) = continue
[ci-break] continuation-id(Term*1, break, Term*2) = break
[default] continuation-id(Term*1, bottom-up, Term*2) = continue
[default] continuation-id(Term*1, top-down, Term*2) = break

equations

[np-0] 
normal-prod(funid(""""L""I""S""T""p""r""o""d""(" Char+3 ")"""")) =
funid(""""p""r""o""d""(" Char+3 ")"""")

[default-np]
 normal-prod(Funid) = Funid
