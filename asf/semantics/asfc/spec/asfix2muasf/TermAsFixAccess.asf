%%
%%    Meta-Environment - An environment for language prototyping.
%%    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam,
%%                        The Netherlands.
%%
%%    This program is free software; you can redistribute it and/or modify
%%    it under the terms of the GNU General Public License as published by
%%    the Free Software Foundation; either version 2 of the License, or
%%    (at your option) any later version.
%%
%%    This program is distributed in the hope that it will be useful,
%%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%%    GNU General Public License for more details.
%%
%%    You should have received a copy of the GNU General Public License
%%    along with this program; if not, write to the Free Software
%%    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
%%
equations 

  [ilip-0] is-list-injection-production(prod(id(Aterm1),Ws0,
                                            [iter(Aterm2,Ws1,l(L0))],
                                            Ws2, l(L1),
                                            Ws3, $Symbol2, Ws4, no-attrs)) = true

  [ilip-1] is-list-injection-production(prod(id(Aterm1),Ws0,
                                       [iter-sep(l("{"), Ws1, Aterm2,Ws2, Aterm3, 
                                                 Ws3, l("}"), Ws4, l(L2))],
                                        Ws5, l(L3),
                                        Ws6, $Symbol2, Ws7, no-attrs)) = true

  [default-ilip] is-list-injection-production(Aterm) = false

  [ra-1'1] remove-annotation(Aterm) = term(Aterm)

  [itcf-1'1] is-production-prod(Prod) = true
             ===============================
             is-term-production(appl(Prod,Ws,CfArgs)) = true

  [itcf-1'1] is-prefix-production-prod(Prod) = true
             ======================================
             is-term-production(appl(Prod,Ws,CfArgs)) = true

  [default-itcf-1'2] is-term-production(Aterm) = false

  [itcf-1'1] is-ceq-equ-prod(Prod) = true
             ============================
             is-term-ceq(appl(Prod,Ws,Args)) = true

  [itcf-1'2] is-ceq-when-prod(Prod) = true
             =============================
             is-term-ceq(appl(Prod,Ws,Args)) = true

  [itcf-1'3] is-ceq-impl-prod(Prod) = true
             =============================
             is-term-ceq(appl(Prod,Ws,Args)) = true

  [default-itcf-1'4] is-term-ceq(Aterm) = false

  [iit-1'1] is-iter-star-prod(Prod) = true
            ==============================
            is-iter-term(appl(Prod,Ws,Args)) = true

  [iit-1'2] is-iter-plus-prod(Prod) = true
            ==============================
            is-iter-term(appl(Prod,Ws,Args)) = true

  [default-iit-1'3] is-iter-term(Aterm) = false

  [iist-1'1] is-iter-sep-star-prod(Prod) = true
             ==================================
             is-iter-sep-term(appl(Prod,Ws,Args)) = true

  [iist-1'2] is-iter-sep-plus-prod(Prod) = true
             ==================================
             is-iter-sep-term(appl(Prod,Ws,Args)) = true

  [default-iist-1'3] is-iter-sep-term(Aterm) = false

  [ivt-1'1] is-var-term(var($Literal,SortIter)) = true

  [default-ivt-1'2] is-var-term(Aterm) = false

  [ilt-1'1] is-lex-term(lex($Literal,SortIter)) = true

  [default-ilt-1'2] is-lex-term(Aterm) = false

  [iat-1'1] is-appl-term(appl(Prod,Ws,Args)) = true

  [default-iat-1'2] is-appl-term(Aterm) = false

  [ilt-1'1] is-list-term(list(Iter,Ws,Args)) = true

  [default-ilt-1'2] is-list-term(Aterm) = false

  [idt-1'1] is-tag-prod(Prod1) = true,
            index(Args1,2) = lex(literal(""" "d" "e" "f" "a" "u" "l" "t" "-" Char* """),$Sort)
            =================================================================================
            is-default-tag(appl(Prod1,Ws1,Args1)) = true

  [default-idt-1'2] is-default-tag(Aterm) = false

  [ipct-1'1] is-pos-cond-prod(Prod) = true
             =============================
             is-pos-cond-term(appl(Prod,Ws,Args)) = true

  [default-ipct-1'2] is-pos-cond-term(Aterm) = false

  [inct-1'1] is-neg-cond-prod(Prod) = true
             =============================
             is-neg-cond-term(appl(Prod,Ws,Args)) = true

  [default-inct-1'2] is-neg-cond-term(Aterm) = false

  [get-1'1] is-ceq-equ-prod(Prod) = true
            ============================
            get-equ-type(appl(Prod,Ws,Args)) = ceq-equ

  [get-1'2] is-ceq-when-prod(Prod) = true
            =============================
            get-equ-type(appl(Prod,Ws,Args)) = ceq-when

  [get-1'3] is-ceq-impl-prod(Prod) = true
            =============================
            get-equ-type(appl(Prod,Ws,Args)) = ceq-impl

  [get-1'1] is-ceq-equ-prod(Prod) = true
            ============================
            get-tag-equ(appl(Prod,Ws,Args)) = index(Args,0)

  [get-1'2] is-ceq-when-prod(Prod) = true
            =============================
            get-tag-equ(appl(Prod,Ws,Args)) = index(Args,0)

  [get-1'3] is-ceq-impl-prod(Prod) = true
            =============================
            get-tag-equ(appl(Prod,Ws,Args)) = index(Args,0)

  [gle-1'1] is-ceq-equ-prod(Prod1) = true,
            index(Args1,2) = appl(Prod2,Ws2,Args2),
            is-general-equ-prod(Prod2) = true
            =================================
            get-lhs-equ(appl(Prod1,Ws1,Args1)) = index(Args2,0)

  [gle-1'2] is-ceq-when-prod(Prod1) = true,
            index(Args1,2) = appl(Prod2,Ws2,Args2),
            is-general-equ-prod(Prod2) = true
            =================================
            get-lhs-equ(appl(Prod1,Ws1,Args1)) = index(Args2,0)

  [gle-1'3] is-ceq-impl-prod(Prod1) = true,
            index(Args1,6) = appl(Prod2,Ws2,Args2),
            is-general-equ-prod(Prod2) = true
            =================================
            get-lhs-equ(appl(Prod1,Ws1,Args1)) = index(Args2,0)

  [gre-1'1] is-ceq-equ-prod(Prod1) = true,
            index(Args1,2) = appl(Prod2,Ws2,Args2),
            is-general-equ-prod(Prod2) = true
            =================================
            get-rhs-equ(appl(Prod1,Ws1,Args1)) = index(Args2,4)

  [gre-1'2] is-ceq-when-prod(Prod1) = true,
            index(Args1,2) = appl(Prod2,Ws2,Args2),
            is-general-equ-prod(Prod2) = true
            =================================
            get-rhs-equ(appl(Prod1,Ws1,Args1)) = index(Args2,4)

  [gre-1'3] is-ceq-impl-prod(Prod1) = true,
            index(Args1,6) = appl(Prod2,Ws2,Args2),
            is-general-equ-prod(Prod2) = true
            =================================
            get-rhs-equ(appl(Prod1,Ws1,Args1)) = index(Args2,4)

  [gce-1'1] is-ceq-when-prod(Prod1) = true,
            index(Args1,6) = appl(Prod2,Ws2,[Aarg]),
            is-conditions-prod(Prod2) = true,
            Aarg = list(Iter,Ws3,Args3),
            is-condition-iter(Iter) = true
            ==============================
            get-conds-equ(appl(Prod1,Ws1,Args1)) = Args3

  [gce-1'2] is-ceq-impl-prod(Prod1) = true,
            index(Args1,2) = appl(Prod2,Ws2,[Aarg]),
            is-conditions-prod(Prod2) = true,
            Aarg = list(Iter,Ws3,Args3),
            is-condition-iter(Iter) = true
            ==============================
            get-conds-equ(appl(Prod1,Ws1,Args1)) = Args3

  [glc-1'1] is-pos-cond-prod(Prod) = true
            =============================
            get-lhs-cond(appl(Prod,Ws,Args)) = index(Args,0)

  [glc-1'2] is-neg-cond-prod(Prod) = true
            =============================
            get-lhs-cond(appl(Prod,Ws,Args)) = index(Args,0)

  [glc-1'1] is-pos-cond-prod(Prod) = true
            =============================
            get-rhs-cond(appl(Prod,Ws,Args)) = index(Args,4)

  [glc-1'2] is-neg-cond-prod(Prod) = true
            =============================
            get-rhs-cond(appl(Prod,Ws,Args)) = index(Args,4)

%% Functions to get various subparts of an production rule, etc.

  [tgap-1'1] is-production-prod(Prod1) = true,
             Symbols = appl(Prod2,Ws4,[SymbolList]),
             is-symbols-prod(Prod2) = true,
             SymbolList = list(Iter,Ws5,CfArgs),
             is-symbol-iter(Iter) = true
             ===========================
             term-get-args-prod(appl(Prod1,Ws0,[Symbols,Ws1,l("->"),Ws2,$Symbol,Ws3,Attr])) = CfArgs

  [tgap-1'2] is-prefix-production-prod(Prod1) = true,
             $Symbol2 = list(Iter,w(""),CfArgs)
             =======================================
             term-get-args-prod(appl(Prod1,Ws0,[$Symbol1,Ws1,l("("),Ws2,$Symbol2,Ws3,l(")"),Ws4,
                                     l("->"),Ws5,$Symbol3,Ws6,Attr])) = CfArgs

  [tgsp-1'1] is-production-prod(Prod) = true,
             $Symbol = appl(Prod2,Ws4,[$Sort]),
             is-sort-symbol-prod(Prod2) = true,
             $Sort = lex(literal(Char*),sort("Sort"))
             =======================================
             term-get-symbol-prod(appl(Prod,Ws0,[Symbols,Ws1,l("->"),Ws2,$Symbol,Ws3,Attr])) =
               sort(literal(Char*))

  [tgap-1'1] is-production-prod(Prod) = true
             ===============================
             term-get-attrs-prod(appl(Prod,Ws0,[Symbols,Ws1,l("->"),Ws2,$Symbol,Ws3,Attr])) = Attr

  [tgap-1'2] is-prefix-production-prod(Prod) = true
             =======================================
             term-get-attrs-prod(appl(Prod,Ws0,[$Symbol1,Ws1,l("("),Ws2,$Symbol2,Ws3,l(")"),Ws4,
                                     l("->"),Ws5,$Symbol3,Ws6,Attr])) = Attr

%% Various functions to check the productions.

  [ipp-1'1] is-production-prod(prod(id("Kernel-Sdf-Syntax"),w(""),[sort("Symbols"),
                               w(""),ql("->"),w(""),sort("Symbol"),w(""),
                               sort("Attributes")],w(""),l("->"),w(""),
                               sort("Production"),w(""),no-attrs)) = true

  [default-ipp-1'2] is-production-prod(Prod) = false

  [ippp-1'1] is-prefix-production-prod(prod(id("Literals-Sdf-Syntax"),w(""),[sort("Literal"),
                                       w(""),ql("("),w(""),iter-sep(l("{"),w(""),
                                       sort("Symbol"),w(""),ql(","),w(""),l("}"),w(""),
                                       l("*")),w(""),ql(")"),w(""),ql("->"),w(""),
                                       sort("Symbol"),w(""),sort("Attributes")],w(""),
                                       l("->"),w(""),sort("Production"),w(""),
                                       attrs(l("{"),w(""),[l("avoid")],w(""),l("}")))) = true

  [default-ippp-1'2] is-prefix-production-prod(Prod) = false

  [isp-1'1] is-symbols-prod(prod(id("Symbols"),w(""),[iter(sort("Symbol"),w(""),l("*"))],
                            w(""),l("->"),w(""),sort("Symbols"),w(""),no-attrs)) = true

  [default-isp-1'2] is-symbols-prod(Prod) = false

  [isp-1'1] is-symbol-iter(iter(sort("Symbol"),w(""),l("*"))) = true

  [default-isp-1'2] is-symbol-iter(Iter) = false

  [isp-1'1] is-symbol-itersep(iter-sep(l("{"),w(""),sort("Symbol"),w(""),ql(","),w(""),l("}"),w(""),l("*"))) = true

  [default-isp-1'2] is-symbol-itersep(Iter) = false

  [ilsp-1'1] is-literal-symbol-prod(prod(id("Literals-Sdf-Syntax"),w(""),[sort("Literal")],
                                   w(""),l("->"),w(""),sort("Symbol"),w(""),no-attrs)) = true

  [default-ilsp-1'2] is-literal-symbol-prod(Prod) = false

  [ilsp-1'1] is-uqliteral-prod(prod(id("Literals-Sdf-Syntax"),w(""),[sort("UQLiteral")],
                                   w(""),l("->"),w(""),sort("Literal"),w(""),no-attrs)) = true

  [default-ilsp-1'2] is-uqliteral-prod(Prod) = false

  [issp-1'1] is-sort-symbol-prod(prod(id("Sorts-Sdf-Syntax"),w(""),[sort("Sort")],w(""),l("->"),
                                w(""),sort("Symbol"),w(""),no-attrs)) = true

  [default-issp-1'2] is-sort-symbol-prod(Prod) = false

  [inap-1'1] is-no-attr-prod(prod(id("Kernel-Sdf-Syntax"),w(""),[],w(""),l("->"),
                                w(""),sort("Attributes"),w(""),no-attrs)) = true

  [default-inap-1'2] is-no-attr-prod(Prod) = false

  [iap-1'1] is-attr-prod(prod(id("Kernel-Sdf-Syntax"),w(""),[ql("{"),w(""),iter-sep(l("{"),
                         w(""),sort("Attribute"),w(""),ql(","),w(""),l("}"),w(""),l("*")),
                         w(""),ql("}")],w(""),l("->"),w(""),sort("Attributes"),w(""),no-attrs)) = true

  [default-iap-1'2] is-attr-prod(Prod) = false

  [iai-1'1] is-attr-iter(iter-sep(l("{"),w(""),sort("Attribute"),
                         w(""),ql(","),w(""),l("}"),w(""),l("*"))) = true

  [default-iai-1'2] is-attr-iter(Iter) = false

  [iai-1'1] is-bracket-attr-prod(prod(id("Priority-Sdf-Syntax"),w(""),[ql("bracket")],
                                 w(""),l("->"),w(""),sort("Attribute"),w(""),no-attrs)) = true

  [default-iai-1'2] is-bracket-attr-prod(Prod) = false

  [iai-1'1] is-constructor-attr-prod(prod(id("Label-Sdf-Syntax"),w(""),[ql("constructor")],
                                 w(""),l("->"),w(""),sort("Attribute"),w(""),no-attrs)) = true

  [default-iai-1'2] is-constructor-attr-prod(Prod) = false

  [iai-1'1] is-memo-attr-prod(prod(id("Label-Sdf-Syntax"),w(""),[ql("memo")],
                                 w(""),l("->"),w(""),sort("Attribute"),w(""),no-attrs)) = true

  [default-iai-1'2] is-memo-attr-prod(Prod) = false

  [iai-1'1] is-traverse-attr-prod(prod(id("Label-Sdf-Syntax"),w(""),[ql("traverse")],
                                 w(""),l("->"),w(""),sort("Attribute"),w(""),no-attrs)) = true

  [default-iai-1'2] is-traverse-attr-prod(Prod) = false

  [iai-1'1] is-reject-attr-prod(prod(id("Restrictions-Sdf-Syntax"),w(""),[ql("reject")],
                                 w(""),l("->"),w(""),sort("Attribute"),w(""),no-attrs)) = true

  [default-iai-1'2] is-reject-attr-prod(Prod) = false

  [iai-1'1] is-prefer-attr-prod(prod(id("Restrictions-Sdf-Syntax"),w(""),[ql("prefer")],
                                 w(""),l("->"),w(""),sort("Attribute"),w(""),no-attrs)) = true

  [default-iai-1'2] is-prefer-attr-prod(Prod) = false

  [iai-1'1] is-avoid-attr-prod(prod(id("Restrictions-Sdf-Syntax"),w(""),[ql("avoid")],
                                 w(""),l("->"),w(""),sort("Attribute"),w(""),no-attrs)) = true

  [default-iai-1'2] is-avoid-attr-prod(Prod) = false

  [iai-1'1] is-associativity-attr-prod(prod(id("Priority-Sdf-Syntax"),
                                       w(""),[sort("Associativity")],w(""),l("->"),w(""),sort("Attribute"),
                                       w(""),no-attrs)) = true

  [default-iai-1'2] is-associativity-attr-prod(Prod) = false

  [iai-1'1] is-left-assoc-prod(prod(id("Priority-Sdf-Syntax"),w(""),[ql("left")],
                               w(""),l("->"),w(""),sort("Associativity"),w(""),no-attrs)) = true

  [default-iai-1'2] is-left-assoc-prod(Prod) = false

  [iai-1'1] is-right-assoc-prod(prod(id("Priority-Sdf-Syntax"),w(""),[ql("right")],
                                w(""),l("->"),w(""),sort("Associativity"),w(""),no-attrs)) = true

  [default-iai-1'2] is-right-assoc-prod(Prod) = false

  [iai-1'1] is-assoc-assoc-prod(prod(id("Priority-Sdf-Syntax"),w(""),[ql("assoc")],
                                w(""),l("->"),w(""),sort("Associativity"),w(""),no-attrs)) = true

  [default-iai-1'2] is-assoc-assoc-prod(Prod) = false

  [iai-1'1] is-nonassoc-assoc-prod(prod(id("Priority-Sdf-Syntax"),w(""),[ql("non-assoc")],
                                w(""),l("->"),w(""),sort("Associativity"),w(""),no-attrs)) = true

  [default-iai-1'2] is-nonassoc-assoc-prod(Prod) = false

  [icep-1'1] is-ceq-equ-prod(prod(id("Equations"),w(""),[sort("Tag"),w(""),sort("Equation")],
                             w(""),l("->"),w(""),sort("CondEquation"),w(""),no-attrs)) = true

  [default-icep-1'2] is-ceq-equ-prod(Prod) = false

  [icwp-1'1] is-ceq-when-prod(prod(id("Equations"),w(""),[sort("Tag"),w(""),sort("Equation"),
                              w(""),ql("when"),w(""),sort("Conditions")],w(""),l("->"),
                              w(""),sort("CondEquation"),w(""),no-attrs)) = true

  [default-icwp-1'2] is-ceq-when-prod(Prod) = false

  [icip-1'1] is-ceq-impl-prod(prod(id("Equations"),w(""),[sort("Tag"),w(""),sort("Conditions"),
                              w(""),sort("Implies"),w(""),sort("Equation")],w(""),l("->"),
                              w(""),sort("CondEquation"),w(""),no-attrs)) = true

  [default-icip-1'2] is-ceq-impl-prod(Prod) = false

  [icp-1'1] is-general-equ-prod(prod(id("GEN-Equations"),w(""),[$Sort,w(""),ql("="),
                                w(""),$Sort],w(""),l("->"),w(""),sort("Equation"),w(""),no-attrs)) = true

  [default-icp-1'2] is-general-equ-prod(Prod) = false

  [itp-1'1] is-tag-prod(prod(id("Equations"),w(""),[ql("["),w(""),sort("TagId"),
                        w(""),ql("]")],w(""),l("->"),w(""),sort("Tag"),w(""),no-attrs)) = true

  [default-itp-1'2] is-tag-prod(Prod) = false

  [iip-1'1] is-iter-plus-prod(prod(id("Regular-Sdf-Syntax"),w(""),[sort("Symbol"),
                             w(""),ql("+")],w(""),l("->"),w(""),sort("Symbol"),w(""),no-attrs)) = true

  [default-iip-1'2] is-iter-plus-prod(Prod) = false

  [iip-1'1] is-iter-star-prod(prod(id("Regular-Sdf-Syntax"),w(""),[sort("Symbol"),
                             w(""),ql("*")],w(""),l("->"),w(""),sort("Symbol"),w(""),no-attrs)) = true

  [default-iip-1'2] is-iter-star-prod(Prod) = false

  [iip-1'1] is-iter-sep-plus-prod(prod(id("Regular-Sdf-Syntax"),w(""),[ql("{"),w(""),sort("Symbol"),
                             w(""),sort("Symbol"),w(""),ql("}"),w(""),ql("+")],w(""),l("->"),
                             w(""),sort("Symbol"),w(""),no-attrs)) = true

  [default-iip-1'2] is-iter-sep-plus-prod(Prod) = false

  [iip-1'1] is-iter-sep-star-prod(prod(id("Regular-Sdf-Syntax"),w(""),[ql("{"),w(""),sort("Symbol"),
                             w(""),sort("Symbol"),w(""),ql("}"),w(""),ql("*")],w(""),l("->"),
                             w(""),sort("Symbol"),w(""),no-attrs)) = true

  [default-iip-1'2] is-iter-sep-star-prod(Prod) = false

  [iip-1'1] is-conditions-prod(prod(id("Equations"),w(""),[iter-sep(l("{"),
                               w(""),sort("Condition"),w(""),ql(","),w(""),l("}"),w(""),l("+"))],
                               w(""),l("->"),w(""),sort("Conditions"),w(""),no-attrs)) = true

  [default-iip-1'2] is-conditions-prod(Prod) = false

  [isp-1'1] is-condition-iter(iter-sep(l("{"),w(""),sort("Condition"),w(""),ql(","),
                              w(""),l("}"),w(""),l("*"))) = true

  [default-isp-1'2] is-condition-iter(Iter) = false

  [iip-1'1] is-pos-cond-prod(prod(id("GEN-Equations"),
                             w(""),[$Sort,w(""),ql("="),w(""),$Sort],w(""),l("->"),
                             w(""),sort("Condition"),w(""),no-attrs)) = true

  [default-iip-1'2] is-pos-cond-prod(Prod) = false

  [iip-1'1] is-neg-cond-prod(prod(id("GEN-Equations"),
                             w(""),[$Sort,w(""),ql("!="),w(""),$Sort],w(""),l("->"),
                             w(""),sort("Condition"),w(""),no-attrs)) = true

  [default-iip-1'2] is-neg-cond-prod(Prod) = false
