equations

  [tceq2r-1'1] get-lhs-equ(CeqEqu) = Alhs,
               term2muasf(remove-annotation(Alhs),Nametable1) = (Funcdef*1,Term1,Nametable2),
               get-rhs-equ(CeqEqu) = Arhs,
               term2muasf(remove-annotation(Arhs),Nametable2) = (Funcdef*2,Term2,Nametable3),
               Funcdef*1 ++_ss Funcdef*2 = Funcdef*3,
               make-rule(is-default-tag(remove-annotation(get-tag-equ(CeqEqu))),Term1,Term2) = Rule
               ===================================================================================
               term-equ2rules(ceq-equ,CeqEqu,Nametable1) = (Funcdef*3,Rule,Nametable3)

  [tceq2r-1'2] get-lhs-equ(CeqEqu) = Alhs,
               term2muasf(remove-annotation(Alhs),Nametable1) = (Funcdef*1,Term1,Nametable2),
               get-rhs-equ(CeqEqu) = Arhs,
               term2muasf(remove-annotation(Arhs),Nametable2) = (Funcdef*2,Term2,Nametable3),
               get-conds-equ(CeqEqu) = Aconds,
               term-conds2muasf(Aconds,Nametable3) = (Funcdef*3,Cond+,Nametable4),
               Funcdef*1 ++_ss Funcdef*2 ++_ss Funcdef*3 = Funcdef*4,
               make-rule(is-default-tag(remove-annotation(get-tag-equ(CeqEqu))),Cond+,Term1,Term2) = Rule
               ==========================================================================================
               term-equ2rules(ceq-when,CeqEqu,Nametable1) = (Funcdef*4,Rule,Nametable4)

  [tceq2r-1'3] get-lhs-equ(CeqEqu) = Alhs,
               term2muasf(remove-annotation(Alhs),Nametable1) = (Funcdef*1,Term1,Nametable2),
               get-rhs-equ(CeqEqu) = Arhs,
               term2muasf(remove-annotation(Arhs),Nametable2) = (Funcdef*2,Term2,Nametable3),
               get-conds-equ(CeqEqu) = Aconds,
               term-conds2muasf(Aconds,Nametable3) = (Funcdef*3,Cond+,Nametable4),
               Funcdef*1 ++_ss Funcdef*2 ++_ss Funcdef*3 = Funcdef*4,
               make-rule(is-default-tag(remove-annotation(get-tag-equ(CeqEqu))),Cond+,Term1,Term2) = Rule
               ==========================================================================================
               term-equ2rules(ceq-impl,CeqEqu,Nametable1) = (Funcdef*4,Rule,Nametable4)

  [t2ma-1'1] is-var-term(Aterm) = true,
             avar2muvar(Aterm) = Var
             =======================
             term2muasf(Aterm,Nametable) = (,Var,Nametable)

  [t2ma-1'2] is-appl-term(Aterm) = true,
             Aterm[prod] = Afunc,
             is-bracket-func(Afunc) = true,
             Aterm[args] = Args
             ==================
             term2muasf(Aterm,Nametable1) = term-args2muasf(Args,Nametable1)

  [t2ma-1'3] is-appl-term(Aterm) = true,
             Aterm[prod] = Afunc,
             is-bracket-func(Afunc) = false,
             cffunc2id(Afunc) = Funid1,
             Afunc[attrs] = Attr,
             attrs2terms(Attr) = Term*1,
             nt-lookup(Funid1,Term*1,Nametable1) = (Funid2,Nametable2),
             Aterm[args] = Args,
             term-args2muasf(Args,Nametable2) = (Funcdef*1,Term*2,Nametable3),
             make-external-funcdef(Funid2,Term*2) = Funcdef,
             Funcdef ++_ss Funcdef*1 = Funcdef*2
             ===================================
             term2muasf(Aterm,Nametable1) =
               (Funcdef*2,make-func(Funid2,Term*2),Nametable3)

  [t2ma-1'4] is-list-term(Aterm) = true,
             Aterm[sym] = Afunc,
             iter2id(Afunc) = Funid1,
             ntl-lookup(Funid1,Nametable1) = (Funid2,Nametable2),
             Aterm[elems] = Args,
             term-listargs2muasf(Args,Nametable2) = (Funcdef*1,Term*,Nametable3),
             make-funcdef(Funid1,null)= Funcdef,
             Funcdef ++_ss Funcdef*1 = Funcdef*2
             ===================================
             term2muasf(Aterm,Nametable1) =
               (Funcdef*2,make-list-func(Funid1,Term*),Nametable3)

  [t2ma-1'5] is-lex-term(Aterm) = true,
             Aterm[sym] = sort("CHAR"),
             Aterm[name] = L,
             qlit2str(L) = Term
             ==================
             term2muasf(Aterm,Nametable) = (,Term,Nametable)

  [t2ma-1'6] is-lex-term(Aterm) = true,
             Aterm[sym] = sort(L1),
             L1 != literal(""" "C""H""A""R" """),
             Aterm[name] = L2,
             "{sort(\"CHAR\")}" = Funid1,
             ntl-lookup(Funid1,Nametable1) = (Funid2,Nametable2),
             make-funcdef(Funid1,null) = Funcdef1,
             make-lex-cons-func(L1) = Funid3,
             nt-lookup(Funid3,Nametable2) = (Funid4,Nametable3),
             make-external-funcdef(Funid4,null) = Funcdef2,
             lit2str(L2) = Term
             ==================
             term2muasf(Aterm,Nametable1) =
               (Funcdef1;Funcdef2,Funid4(Funid1(Term)),Nametable3)

  [default-t2ma-1'7] term2muasf(Aterm,Nametable) = (,,Nametable)

  [ta2ma-1'1] term-args2muasf([],Nametable) = (,,Nametable)

  [ta2ma-1'2] Args1 != [],
              get-iter-tail(Args1) = Args2,
              first(Args1) = Aterm,
              term2muasf(remove-annotation(Aterm),Nametable1) = (Funcdef*1,Term*1,Nametable2),
              term-args2muasf(Args2,Nametable2) = (Funcdef*2,Term*2,Nametable3),
              Funcdef*1 ++_ss Funcdef*2 = Funcdef*3
              =====================================
              term-args2muasf(Args1,Nametable1) = (Funcdef*3,Term*1,Term*2,Nametable3)

  [tla2ma-1'1] term-listargs2muasf([],Nametable) = (,,Nametable)

  [tla2ma-1'2] Args1 != [],
               get-iter-tail(Args1) = Args2,
               first(Args1) = Aterm,
               term2muasf(remove-annotation(Aterm),Nametable1) = (Funcdef*1,Term*1,Nametable2),
               term-listargs2muasf(Args2,Nametable2) = (Funcdef*2,Term*2,Nametable3),
               Funcdef*1 ++_ss Funcdef*2 = Funcdef*3,
               make-c-list-cons(Term*1,Term*2) = Term
               ======================================
               term-listargs2muasf(Args1,Nametable1) = (Funcdef*3,Term,Nametable3)

  [tcs2ma-1'1] term-conds2muasf([],Nametable) = (,,Nametable)

  [tcs2ma-1'2] Aconds1 != [],
               get-itersep-tail(Aconds1) = Aconds2,
               first(Aconds1) = Acond,
               term-cond2muasf(Acond,Nametable1) = (Funcdef*1,Cond1,Nametable2),
               term-conds2muasf(Aconds2,Nametable2) = (Funcdef*2,Cond*2,Nametable3),
               Funcdef*1 ++_ss Funcdef*2 = Funcdef*3
               =====================================
               term-conds2muasf(Aconds1,Nametable1) = (Funcdef*3,Cond1 & Cond*2,Nametable3)

  [tc2ma-1'2] is-pos-cond-term(Acond) = true,
              %%Acond[cop] = l("="),
              get-lhs-cond(Acond) = Alhs,
              term2muasf(remove-annotation(Alhs),Nametable1) = (Funcdef*1,Term1,Nametable2),
              get-rhs-cond(Acond) = Arhs,
              term2muasf(remove-annotation(Arhs),Nametable2) = (Funcdef*2,Term2,Nametable3),
              Funcdef*1 ++_ss Funcdef*2 = Funcdef*3
              =====================================
              term-cond2muasf(Acond,Nametable1) = (Funcdef*3,Term1 == Term2,Nametable3)

  [tc2ma-1'3] is-neg-cond-term(Acond) = true,
              %%Acond[cop] = l("!="),
              get-lhs-cond(Acond) = Alhs,
              term2muasf(remove-annotation(Alhs),Nametable1) = (Funcdef*1,Term1,Nametable2),
              get-rhs-cond(Acond) = Arhs,
              term2muasf(remove-annotation(Arhs),Nametable2) = (Funcdef*2,Term2,Nametable3),
              Funcdef*1 ++_ss Funcdef*2 = Funcdef*3
              =====================================
              term-cond2muasf(Acond,Nametable1) = (Funcdef*3,Term1 != Term2,Nametable3)

%% The function {\tt make-c-list-cons} normalizes the list matching patterns.
  [mclc-1'1] make-c-list-cons(Term,) = Term

  [mclc-1'2] make-c-list-cons(,Term) = Term

  [mclc-1'3] make-c-list-cons(cons(Term1,Term2),Term3) =
               make-c-list-cons(Term1,cons(Term2,Term3))

  [default-mclc-1'4] make-c-list-cons(Term1,Term2) = cons(Term1,Term2)
