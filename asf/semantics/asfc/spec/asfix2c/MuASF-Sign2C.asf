%%
%%    Meta-Environment - An environment for language prototyping.
%%    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, The Netherlands. 
%%
%%    This program is free software; you can redistribute it and/or modify
%%    it under the terms of the GNU General Public License as published by
%%    the Free Software Foundation; either version 2 of the License, or
%%    (at your option) any later version.
%%
%%    This program is distributed in the hope that it will be useful,
%%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%%    GNU General Public License for more details.
%%
%%    You should have received a copy of the GNU General Public License
%%    along with this program; if not, write to the Free Software
%%    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
%%
equations

  [so2c-1'1] modname2iname(Modid) = CConstant,
             modname2rname(Modid) = CConstant',
             namepairs2rstats(Namepair*) = Stat*1,
             namepairs2lstats(Namepair*) = Stat*2
             ====================================
             signopt2cfuncs(Modid,,(Namepair*,Funid,Aint1,Aint2)) =
               (,void CConstant()
                 {
                   Stat*1
                 }
                 void CConstant'()
                 {
                   Stat*2
                 })

  [so2c-1'2] modname2iname(Modid) = CConstant,
             modname2rname(Modid) = CConstant',
             namepairs2rstats(Namepair*) = Stat*1,
             namepairs2lstats(Namepair*) = Stat*2
             ====================================
             signopt2cfuncs(Modid,signature ,(Namepair*,Funid,Aint1,Aint2)) =
               (,void CConstant()
                 {
                   Stat*1
                 }
                 void CConstant'()
                 {
                   Stat*2
                 })

  [so2c-1'3] modname2iname(Modid) = CConstant,
             modname2rname(Modid) = CConstant',
             namepairs2rstats(Namepair*) = Stat*1,
             namepairs2lstats(Namepair*) = Stat*2,
             funcdefs2cfuncs(Funcdef+,Namepair*) = (Funcdef*,Decl*,Stat*3)
             =============================================================
             signopt2cfuncs(Modid,signature Funcdef+,(Namepair*,Funid,Aint1,Aint2)) =
               (Funcdef*,Decl* ++
                void CConstant()
                {
                  Stat*3 ++ Stat*1
                }
                void CConstant'()
                {
                  Stat*2
                })

  [fd2c-1'1] funcdefs2cfuncs(Funcdef,Namepair*) = funcdef2cfuncs(Funcdef,Namepair*)

  [fd2c-1'2] funcdef2cfuncs(Funcdef,Namepair*) = (Funcdef*1,Decl*1,Stat*1),
             funcdefs2cfuncs(Funcdef+,Namepair*) = (Funcdef*2,Decl*2,Stat*2)
             ===============================================================
             funcdefs2cfuncs(Funcdef;Funcdef+,Namepair*) =
               (Funcdef*1;Funcdef*2,
                Decl*1 ++ Decl*2,
                Stat*1 ++ Stat*2)

  [fd2c-2'1] pn-lookup(funid(""" "{" Char*1 "}" """),Namepair*) = funid(Char*2)
             ==================================================================
             funcdef2cfuncs(funid(""" "{" Char*1 "}" """),Namepair*) =
               (funid(Char*2),
                static Symbol identifier(Char*2 "s""y""m");
                static ATerm identifier(Char*2)();,
                identifier(Char*2 "s""y""m") =
                  ATmakeSymbol(identifier(""" "l""i""s""t""t""y""p""e""(" Char*1 ")" """),1,ATtrue);
                ATprotectSymbol(identifier(Char*2 "s""y""m"));)

  [fd2c-2'2] is-list-funid(funid(Char*1)) = false,
             np-lookup(funid(Char*1),Namepair*) = funid(Char*2),
             is-quoted-funid(funid(Char*2)) = true
             =====================================
             funcdef2cfuncs(funid(Char*1),Namepair*) =
               (funid(Char*1),
                static Symbol identifier(Char*1 "s""y""m");
                static ATerm identifier(Char*1)();,
                identifier(Char*1 "s""y""m") = ATmakeSymbol(identifier(Char*2),0,ATtrue);
                ATprotectSymbol(identifier(Char*1 "s""y""m"));)

  [fd2c-2'3] is-external(Annos) = false,
             is-list-funid(funid(Char*1)) = false,
             np-lookup(funid(Char*1),Namepair*) = funid(Char*2),
             is-quoted-funid(funid(Char*2)) = true
             =====================================
             funcdef2cfuncs(funid(Char*1) Annos,Namepair*) =
               (funid(Char*1) Annos,
                static Symbol identifier(Char*1 "s""y""m");
                static ATerm identifier(Char*1)();,
                identifier(Char*1 "s""y""m") = ATmakeSymbol(identifier(Char*2),0,ATtrue);
                ATprotectSymbol(identifier(Char*1 "s""y""m"));)

  [fd2c-2'4] is-list-funid(funid(Char*1)) = false,
             np-lookup(funid(Char*1),Namepair*) = funid(Char*2),
             is-quoted-funid(funid(Char*2)) = false
             ======================================
             funcdef2cfuncs(funid(Char*1),Namepair*) =
               (funid(Char*1),
                static Symbol identifier(Char*1 "s""y""m");
                static ATerm identifier(Char*1)();,
                identifier(Char*1 "s""y""m") = ATmakeSymbol(identifier(""" Char*2 """),0,ATfalse);
                ATprotectSymbol(identifier(Char*1 "s""y""m"));)

  [fd2c-2'5] is-external(Annos) = false,
             is-list-funid(funid(Char*1)) = false,
             np-lookup(funid(Char*1),Namepair*) = funid(Char*2),
             is-quoted-funid(funid(Char*2)) = false
             ======================================
             funcdef2cfuncs(funid(Char*1) Annos,Namepair*) =
               (funid(Char*1) Annos,
                static Symbol identifier(Char*1 "s""y""m");
                static ATerm identifier(Char*1)();,
                identifier(Char*1 "s""y""m") = ATmakeSymbol(identifier(""" Char*2 """),0,ATfalse);
                ATprotectSymbol(identifier(Char*1 "s""y""m"));)

  [fd2c-2'6] funcdef2cfuncs(funid(Char*) {external},Namepair*) =
               (,static Symbol identifier(Char* "s""y""m");
                 static funcptr identifier(Char*);,)

  [fd2c-2'7] pn-lookup(funid(""" "{" Char*1 "}" """),Namepair*) = funid(Char*2),
             sigargs2cargs(Sigarg+,1) = FormalArgs
             =====================================
             funcdef2cfuncs(funid(""" "{" Char*1 "}" """)(Sigarg+),Namepair*) =
               (funid(Char*2)(Sigarg+),
                static Symbol identifier(Char*2 "s""y""m");
                static ATerm identifier(Char*2)(FormalArgs);,
                identifier(Char*2 "s""y""m") =
                  ATmakeSymbol(identifier(""" "l""i""s""t""t""y""p""e""("
                                           Char*1 ")" """),1,ATtrue);
                ATprotectSymbol(identifier(Char*2 "s""y""m"));)

  [fd2c-2'8] is-list-funid(funid(Char*1)) = false,
             np-lookup(funid(Char*1),Namepair*) = funid(Char*2),
             is-quoted-funid(funid(Char*2)) = true,
             sigargs2cargs(Sigarg+,1) = FormalArgs,
             countsigargs(Sigarg+) = natcon(Char*3)
             ====================================
             funcdef2cfuncs(funid(Char*1)(Sigarg+),Namepair*) =
               (funid(Char*1)(Sigarg+),
                static Symbol identifier(Char*1 "s""y""m");
                static ATerm identifier(Char*1)(FormalArgs);,
                identifier(Char*1 "s""y""m") =
                  ATmakeSymbol(identifier(Char*2),integer-constant(Char*3),ATtrue);
                ATprotectSymbol(identifier(Char*1 "s""y""m"));)

  [fd2c-2'9] is-external(Annos) = false,
             is-list-funid(funid(Char*1)) = false,
             np-lookup(funid(Char*1),Namepair*) = funid(Char*2),
             is-quoted-funid(funid(Char*2)) = true,
             sigargs2cargs(Sigarg+,1) = FormalArgs,
             countsigargs(Sigarg+) = natcon(Char*3)
             ====================================
             funcdef2cfuncs(funid(Char*1)(Sigarg+) Annos,Namepair*) =
               (funid(Char*1)(Sigarg+) Annos,
                static Symbol identifier(Char*1 "s""y""m");
                static ATerm identifier(Char*1)(FormalArgs);,
                identifier(Char*1 "s""y""m") =
                  ATmakeSymbol(identifier(Char*2),integer-constant(Char*3),ATtrue);
                ATprotectSymbol(identifier(Char*1 "s""y""m"));)

  [fd2c-2'10] is-list-funid(funid(Char*1)) = false,
              np-lookup(funid(Char*1),Namepair*) = funid(Char*2),
              is-quoted-funid(funid(Char*2)) = false,
              sigargs2cargs(Sigarg+,1) = FormalArgs,
              countsigargs(Sigarg+) = natcon(Char*3)
              ======================================
              funcdef2cfuncs(funid(Char*1)(Sigarg+),Namepair*) =
                (funid(Char*1)(Sigarg+),
                 static Symbol identifier(Char*1 "s""y""m");
                 static ATerm identifier(Char*1)(FormalArgs);,
                 identifier(Char*1 "s""y""m") =
                   ATmakeSymbol(identifier(""" Char*2 """),integer-constant(Char*3),ATfalse);
                 ATprotectSymbol(identifier(Char*1 "s""y""m"));)

  [fd2c-2'11] is-external(Annos) = false,
              is-list-funid(funid(Char*1)) = false,
              np-lookup(funid(Char*1),Namepair*) = funid(Char*2),
              is-quoted-funid(funid(Char*2)) = false,
              sigargs2cargs(Sigarg+,1) = FormalArgs,
              countsigargs(Sigarg+) = natcon(Char*3)
              ======================================
              funcdef2cfuncs(funid(Char*1)(Sigarg+) Annos,Namepair*) =
                (funid(Char*1)(Sigarg+) Annos,
                 static Symbol identifier(Char*1 "s""y""m");
                 static ATerm identifier(Char*1)(FormalArgs);,
                 identifier(Char*1 "s""y""m") =
                   ATmakeSymbol(identifier(""" Char*2 """),integer-constant(Char*3),ATfalse);
                 ATprotectSymbol(identifier(Char*1 "s""y""m"));)

  [fd2c-2'10] sigargs2cargs(Sigarg+,1) = FormalArgs
              =====================================
              funcdef2cfuncs(funid(Char*)(Sigarg+) {external},Namepair*) =
                (,static Symbol identifier(Char* "s""y""m");
                  static funcptr identifier(Char*);,)

  [fa2ca-1'1] sigargs2cargs(Sigarg,natcon(Char*)) = ATerm identifier("a""r""g" Char*)

  [fa2ca-1'2] sigargs2cargs(Sigarg+,succ(Aint)) = FormalArgs,
              Aint = natcon(Char*)
              ====================
              sigargs2cargs(Sigarg,Sigarg+,Aint) =
                ATerm identifier("a""r""g" Char*) ++ FormalArgs

  [fa2ca-2'1] countsigargs(Sigarg) = 1

  [fa2ca-2'2] countsigargs(Sigarg+) = Aint
              ============================
              countsigargs(Sigarg,Sigarg+) = succ(Aint)

  [mn2cn-1'1] make-call-id(funid(Char*1)) = identifier(Char*2)
              ================================================
              modname2iname(modid(Char*1)) = identifier("r""e""g""i""s""t""e""r""_" Char*2)

  [mn2cn-1'1] make-call-id(funid(Char*1)) = identifier(Char*2)
              ================================================
              modname2rname(modid(Char*1)) = identifier("r""e""s""o""l""v""e""_" Char*2)

  [np2cs-1'1] namepairs2rstats() =

  [np2cs-1'2] namepairs2rstats(Namepair) = namepair2rstats(Namepair)

  [np2cs-1'3] namepairs2rstats(Namepair+,Namepair) =
                namepairs2rstats(Namepair+) ++ namepair2rstats(Namepair)

  [np2cs-2'1] namepair2rstats((funid(""" "{" Char*1 "}" """),funid("l" Char*2),Term*)) =
                         register_prod(ATparse(
                                       identifier(""" "l""i""s""t""t""y""p""e""(" Char*1 ")" """)),
                         identifier("l" Char*2),identifier("l" Char*2 "s""y""m"));

  [np2cs-2'2] is-list-funid(funid(Char*1)) = false
              ====================================
              namepair2rstats((funid(Char*1),funid("l" Char*2),Term*)) =
                         register_prod(ATparse(identifier(Char*1)),
                         identifier("l" Char*2),identifier("l" Char*2 "s""y""m"));

  [np2cs-2'3] is-quoted-funid(funid(Char*1)) = true
              =====================================
              namepair2rstats((funid(Char*1),funid("_" Char*2),Term*)) =
                         register_prod(ATparse(identifier(Char*1)),
                         identifier(Char*2),identifier(Char*2 "s""y""m"));

  [np2cs-2'4] is-quoted-funid(funid(Char*1)) = false
              ======================================
              namepair2rstats((funid(Char*1),funid("_" Char*2),Term*)) =
                         register_prod(ATparse(identifier(""" Char*1 """)),
                         identifier(Char*2),identifier(Char*2 "s""y""m"));

  [np2ls-2'5] namepair2rstats((funid(Char*1),funid("e" Char*2),Term*)) =

  [np2ls-1'1] namepairs2lstats() =

  [np2ls-1'1] namepairs2lstats(Namepair) = namepair2lstats(Namepair)

  [np2ls-1'2] namepairs2lstats(Namepair+,Namepair) =
                namepairs2lstats(Namepair+) ++ namepair2lstats(Namepair)

  [np2ls-2'1] namepair2lstats((funid(Char*1),funid("e" Char*2),Term*)) =
                identifier("e" Char*2) =
                         lookup_func(ATreadFromString(identifier(Char*1)));
                identifier("e" Char*2 "s""y""m") =
                         lookup_sym(ATreadFromString(identifier(Char*1)));

  [np2ls-2'2] namepair2lstats((funid(Char*1),funid("l" Char*2),Term*)) =

  [np2ls-2'3] namepair2lstats((funid(Char*1),funid("_" Char*2),Term*)) =
