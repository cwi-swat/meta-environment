%%
%%    Meta-Environment - An environment for language prototyping.
%%    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, The Netherlands. 
%%
%%    This program is free software; you can redistribute it and/or modify
%%    it under the terms of the GNU General Public License as published by
%%    the Free Software Foundation; either version 2 of the License, or
%%    (at your option) any later version.
%%
%%    This program is distributed in the hope that it will be useful,
%%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%%    GNU General Public License for more details.
%%
%%    You should have received a copy of the GNU General Public License
%%    along with this program; if not, write to the Free Software
%%    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
%%
%%  C-Basics
module C-Basics

imports  ATerm-Booleans C MuASF

exports
  sorts FTS-tuple FT-tuple C-env TE-pair ADS-tuple ADSI-tuple DCAS-tuple
        E-tuple PA-tuple
  context-free syntax
    "(" {FuncDef ";"}* "," Declaration-list-opt ","
        Statement-list-opt ")"                         -> FTS-tuple
    "(" {FuncDef ";"}* "," Declaration-list-opt ")"    -> FT-tuple
    "(" Term "," Expression ")"                        -> TE-pair
    "(" {TE-pair ","}* ")"                             -> C-env
    "(" Statement-list-opt "," C-env "," IntCon ")"    -> DCAS-tuple
    "(" Argument-expression-list ","
        Statement-list-opt "," IntCon ")"              -> ADS-tuple
    "(" Declaration-list-opt ","
        Statement-list-opt "," IntCon ")"              -> ADSI-tuple
    "(" Expression ")"                                 -> E-tuple
    "(" Parameter-list ","
        Argument-expression-list "," IntCon ")"        -> PA-tuple

exports
  context-free syntax
    Argument-expression-list "++" Argument-expression-list -> Argument-expression-list {left}
    Statement-list-opt "++" Statement-list-opt             -> Statement-list-opt {left}
    Statement-list-opt "++r" Statement-list-opt            -> Statement-list-opt
    Declaration-list-opt "++" Declaration-list-opt         -> Declaration-list-opt {left}
    Declaration-list-opt "++d" Statement-list-opt          -> Statement-list-opt
    Parameter-declaration "++" Parameter-list              -> Parameter-list
    C-env "++" C-env                                       -> C-env {left}

  context-free syntax
    celookup(Term,C-env)                     -> E-tuple
    cecontains(Term,C-env)                   -> Bool
    make-c-temp(IntCon)                      -> Primary-expression
    make-call-id(FunId)                      -> Primary-expression
    make-id-name(Identifier)                 -> FunId
    is-char(FunId)                           -> Bool
    translate-char(FunId)                    -> Expression

exports
  variables
    "Decls"[0-9]*        -> Declaration-list
    "Decl"[0-9]*         -> Declaration
    "Decl*"[0-9]*        -> Declaration-list-opt
    "Decl+"[0-9]*        -> Declaration+
    "ActualArg*"[0-9]*   -> {Expression ","}*
    "ActualArg+"[0-9]*   -> {Expression ","}+
    "FormalArg+"[0-9\']* -> {Parameter-declaration ","}+
    "Tepair*"[0-9]*      -> {TE-pair ","}*
    "Cenv"[0-9]*         -> C-env
    "Exp"[0-9]*          -> Expression
hiddens
  variables
    "Char"[0-9]*    -> CHAR
    "Char*"[0-9]*   -> CHAR*
    "Char+"[0-9]*   -> CHAR+
