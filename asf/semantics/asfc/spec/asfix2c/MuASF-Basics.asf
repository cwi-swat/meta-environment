equations

%% An auxilary function to construct the rule section of a
%% \muasf\ specification.
 [cnro-1'1] create-new-rulesopt() =

 [cnro-1'2] create-new-rulesopt(Rule+) = rules Rule+

%% An auxilary function to add new created rules
%% to the (existing) rule option.
 [ats-1'1] addto-rulesopt(,) =

 [ats-2'3] addto-rulesopt(rules,) =

 [ats-1'2] addto-rulesopt(,Rule+) = rules Rule+

 [ats-1'2] addto-rulesopt(rules,Rule+) = rules Rule+

 [ats-1'3] addto-rulesopt(rules Rule+,) = rules Rule+

 [ats-1'4] addto-rulesopt(rules Rule+1,Rule+2) =
             rules Rule+1;Rule+2

%% An auxilary function to get the function name of
%% a rewrite rule.
 [gfi-1'1] get-funid(Funid) = Funid

 [gfi-1'2] get-funid(Funid(Term+)) = Funid

 [gfi-2'1] get-funid(Term1 = Term2) = get-funid(Term1)

 [gfi-2'2] get-funid(Cond+ ==> Term1 = Term2) = get-funid(Term1)

 [gfi-2'3] get-funid(default:Term1 = Term2) = get-funid(Term1)

 [gfi-2'4] get-funid(default:Cond+ ==> Term1 = Term2) = get-funid(Term1)

%% An auxilary function to get the function args of
%% a rewrite rule.
 [gfa-1'1] get-funargs(Funid) =

 [gfa-1'2] get-funargs(Funid(Term+)) = Term+

 [gfa-2'1] get-funargs(Term1 = Term2) = get-funargs(Term1)

 [gfa-2'2] get-funargs(Cond+ ==> Term1 = Term2) = get-funargs(Term1)

 [gfa-2'3] get-funargs(default:Term1 = Term2) = get-funargs(Term1)

 [gfa-2'4] get-funargs(default:Cond+ ==> Term1 = Term2) = get-funargs(Term1)

%% The next rule adds conditions to a non-conditional rule
%% if this is needed.
 [mcr-1'1] make-conditional-rule(,Rule) = Rule

 [mcr-1'2] make-conditional-rule(Cond+,Term1 = Term2) =
             Cond+ ==> Term1 = Term2

 [mcr-1'3] make-conditional-rule(Cond+,default:Term1 = Term2) =
             default:Cond+ ==> Term1 = Term2

  [mr-1'1] make-rule(true,Term1,Term2) = default: Term1 = Term2

  [mr-1'2] make-rule(false,Term1,Term2) = Term1 = Term2

  [mr-2'1] make-rule(true,Cond+,Term1,Term2) = default: Cond+ ==> Term1 = Term2

  [mr-2'2] make-rule(false,Cond+,Term1,Term2) = Cond+ ==> Term1 = Term2

  [mr-2'3] make-rule(true,,Term1,Term2) = default: Term1 = Term2

  [mr-2'4] make-rule(false,,Term1,Term2) = Term1 = Term2

%% A function to check whether we are dealing with a list.
  [ilfi-1'1] is-list-funid(funid(""" "{" Char+ "}" """)) = true

  [default-ilfi-1'1] is-list-funid(Funid) = false

%% A function to check whether we are dealing with a list.
  [ilfi-1'1] is-trans-list-funid(funid(""" "{" Char+ "}" """)) = true

  [ilfi-1'1] is-trans-list-funid(funid(""" "{" Char+ "}" """ "-" "t""r""a""n""s")) = true

  [default-ilfi-1'1] is-trans-list-funid(Funid) = false

  [mtli-1'1] make-trans-list-id(funid(""" "{" Char+ "}" """)) =
               funid(""" "{" Char+ "}" """ "-" "t""r""a""n""s")

  [rtli-1'1] remove-trans-from-list-id(funid(""" "{" Char+ "}" """)) =
               funid(""" "{" Char+ "}" """)

  [trli-1'2] remove-trans-from-list-id(funid(""" "{" Char+ "}" """ "-" "t""r""a""n""s")) =
               funid(""" "{" Char+ "}" """)

  [ic-1'1] is-cons(funid("c""o""n""s")) = true

  [default-ic-1'2] is-cons(Funid) = false

  [ilvt-1'1] is-list-var-term(*Varid) = true

  [ilvt-1'2] is-list-var-term(+Varid) = true

  [default-ilvt-1'3] is-list-var-term(Term) = false

  [ic-1'1] is-quoted-funid(funid(""" Char* """)) = true

  [default-ic-1'2] is-quoted-funid(Funid) = false

  %%%[glt-1'1] get-list-type(funid(""" "{" "s""o""r""t""(""\"""" Char+ "\""""")" Char* "}" """)) = sortid(""" Char+ """)

  %%%[gsp-1'1] get-sort-prefix(funid(Char+ "\""""")" Char*)) = sortid(""" Char+ """)

  %%%[glt-1'1] get-list-type(funid(""" "{" "s""o""r""t""(""\"""" Char+ "}" """)) =
  %%%            get-sort-prefix(funid(Char+))

  [idr-1'1] is-default-rule(default:Term1 = Term2) = true

  [idr-1'2] is-default-rule(default:Cond* ==> Term1 = Term2) = true

  [default-idr-1'3] is-default-rule(Rule) = false

  [ibt-1'1] is-boolean-term(t) = true

  [ibt-1'2] is-boolean-term(f) = true

  [default-ibt-1'3] is-boolean-term(Term) = false

  [ivt-1'1] is-var-term(Varid) = true

  [ivt-1'2] is-var-term(*Varid) = true

  [ivt-1'3] is-var-term(+Varid) = true

  [default-ivt-1'4] is-var-term(Term) = false

%%%   [aava-1'1] are-all-var-args(Term) = is-var-term(Term)

%%%   [aava-1'2] are-all-var-args(Term,Term+) =
%%%                is-var-term(Term) /\ are-all-var-args(Term+)

%%%   [default-aava-1'3] are-all-var-args(Term+) = false

   [cv-1'1] is-var-term(Term) = true
            ========================
            term-contains-var(Term) = true

   [cv-1'1] is-var-term(Term) = false,
            get-funargs(Term) = Term*
            =========================
            term-contains-var(Term) = args-contain-var(Term*)

   [cv-2'1] args-contain-var() = false

   [cv-2'2] args-contain-var(Term,Term*) =
              term-contains-var(Term) \/ args-contain-var(Term*)

   [mf-1'1] make-func(Funid,) = Funid

   [mf-1'2] make-func(Funid,Term+)  = Funid(Term+)

%% Constructor function for list functions. If the
%% list is a list of characters a different constructor
%% function for the arguments should be applied.
  [mlf-1'1] make-list-func(Funid,) = Funid(null)

  [mlf-1'2] make-list-func(Funid,Term+) = Funid(Term+)

%% The conversion literals to string representation on the muASF level.
  [l2s-1'1] lit2str(L) = deslashed-lit2str(L)

  [ql2s-1'1] qlit2str(literal(""" "\" """ "\" """ """)) = null

  [ql2s-1'2] qlit2str(literal(""" "\" """ Char+ "\" """ """)) =
                              lit2str(literal(""" Char+ """))

  [default-ql2s-1'3] qlit2str(L) = lit2str(L)

  [dl2s-1'0] deslashed-lit2str(literal(""" """)) = null

  [dl2s-1'1] deslashed-lit2str(literal(""" Char """)) =
               char2id(literal(""" Char """))

  [dl2s-1'2] deslashed-lit2str(literal(""" "\" """ Char+ """)) =
               cons(funid("'" """),deslashed-lit2str(literal(""" Char+ """)))

  [dl2s-1'3] deslashed-lit2str(literal(""" "\" "\" Char+ """)) =
               cons(funid("\" "\"),deslashed-lit2str(literal(""" Char+ """)))

  [dl2s-1'4] deslashed-lit2str(literal(""" "\" """ """)) = funid("'" """)

  [dl2s-1'5] deslashed-lit2str(literal(""" "\" "\" """)) = funid("\" "\")

  [default-dl2s-1'6] deslashed-lit2str(literal(""" Char Char+ """)) =
                       cons(char2id(literal(""" Char """)),
                            deslashed-lit2str(literal(""" Char+ """)))

  [util5'1] char2id(literal(""" "\" """)) = funid("\" "\")

  [default-util5'2] char2id(literal(""" Char """)) = funid("'" Char)

  [mla-1'1] make-list-args(Term) = Term

  [mla-1'2] make-list-args(Term+) = Term2
            =============================
            make-list-args(Term1,Term+) = cons(Term1,Term2)

  [pi-1'1] funid(Char*1 Char*3) = funid(Char*4)
           ====================================
           prefix-id(funid(""" Char*1 """), funid(""" Char*2 """),natcon(Char*3)) =
              funid(""" Char*4 "_" "_" Char*2 """)

  [default-pi-1'2] funid(Char*1 Char*3) = funid(Char*4)
                    ====================================
                    prefix-id(funid(""" Char*1 """), funid(Char*2),natcon(Char*3)) =
                     funid(Char*4 "_" "_" Char*2)

  [iif-1'1] is-internal-funid(funid(""" "n""e""w""_""_" Char* """)) =
              is-internal-funid-new(funid(Char*))

%%%  [iif-1'2] is-internal-funid(funid(""" "l""o""o""k""u""p""_""_" Char* """)) =
%%%              is-internal-funid-aux(funid(Char*))

%%%  [iif-1'3] is-internal-funid(funid(""" "g""e""n""e""r""a""l""_""_" Char* """)) =
%%%              is-internal-funid-aux(funid(Char*))

  [iif-1'4] is-internal-funid(funid("n""e""w""_""_" Char*)) =
              is-internal-funid-new(funid(Char*))

%%%  [iif-1'5] is-internal-funid(funid("l""o""o""k""u""p""_""_" Char*)) =
%%%              is-internal-funid-aux(funid(Char*))

%%%  [iif-1'6] is-internal-funid(funid("g""e""n""e""r""a""l""_""_" Char*)) =
%%%              is-internal-funid-aux(funid(Char*))

  [default-iif-1'7] is-internal-funid(funid(Char*)) = false

  [iifn-1'1] natcon(Char*1) = Aint
             =====================
             is-internal-funid-new(funid(Char*1 "_""_" Char*2)) = true
%%%               is-internal-funid(funid(Char*2))

  [default-iifn-1'2] is-internal-funid-new(funid(Char*)) = false

 %%% [iifa-1'1] aint(Char*1) = Aint
 %%%            ===================
 %%%            is-internal-funid-aux(funid(Char*1 "_""_" Char*2)) = true

 %%% [default-iifa-1'2] is-internal-funid-aux(funid(Char*)) = false

%%%  [mna-1'1] make-new-args(,Aint) =

%%%  [mna-1'2] make-new-args(Term*1,succ(Aint)) = Term*2
%%%            =========================================
%%%            make-new-args(Term,Term*1,Aint) = newvar(Aint),Term*2

  [mdr-1'1] make-default-rule(Term1 = Term2) = default:Term1 = Term2

  [mdr-1'2] make-default-rule(Cond+ ==> Term1 = Term2) = default:Cond+ ==> Term1 = Term2
