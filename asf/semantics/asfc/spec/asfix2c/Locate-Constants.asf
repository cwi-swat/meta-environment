equations

  [lcid-1'1] modname2iname(Modid) = CConstant
             ================================
             locate-constants-in-decls(Modid,) =
               void CConstant()
                 {
                 }

  [lcid-1'2] modname2iname(Modid) = CConstant,
             locate-constants-in-decllist(Decl+1,(,0)) =
               (ce-pair*,Decl+2,Aint),
             make-init-function(Modid,ce-pair*) = Decl+3
             ===========================================
             locate-constants-in-decls(Modid,Decl+1) =
                 Decl+3 ++ Decl+2

  [lcid-2'1] locate-constants-in-decl(Decl1,(ce-pair*1,Aint1)) =
               (ce-pair*2,Decl2,Aint2)
             =========================
             locate-constants-in-decllist(Decl1,(ce-pair*1,Aint1)) =
               (ce-pair*2,Decl2,Aint2)

  [lcid-2'2] locate-constants-in-decllist(Decl+1,(ce-pair*1,Aint1)) =
               (ce-pair*2,Decl+2,Aint2),
             locate-constants-in-decl(Decl1,(ce-pair*2,Aint2)) =
               (ce-pair*3,Decl2,Aint3)
             =========================
             locate-constants-in-decllist(Decl+1 Decl1,(ce-pair*1,Aint1)) =
               (ce-pair*3,Decl+2 Decl2,Aint3)

  [lcid-3'1] locate-constants-in-stats(Stat*1,(ce-pair*1,Aint1)) =
               (ce-pair*2,Stat*2,Aint2)
             ==========================
             locate-constants-in-decl(ATerm Ident() { Stat*1 },(ce-pair*1,Aint1)) =
               (ce-pair*2,ATerm Ident() { Stat*2 },Aint2)

  [lcid-3'2] locate-constants-in-stats(Stat*1,(ce-pair*1,Aint1)) =
               (ce-pair*2,Stat*2,Aint2)
             ==========================
             locate-constants-in-decl(ATerm Ident(FormalArgs) { Stat*1 },(ce-pair*1,Aint1)) =
               (ce-pair*2,ATerm Ident(FormalArgs) { Stat*2 },Aint2)

  [lcid-3'3] locate-constants-in-stats(Stat*1,(ce-pair*1,Aint1)) =
               (ce-pair*2,Stat*2,Aint2),
             Ident = identifier(Char*)
             ==========================
             locate-constants-in-decl(ATerm Ident(FormalArgs) { Decl+ Stat*1 },(ce-pair*1,Aint1)) =
               ((identifier("t""a""b""l""e""_" Char*),NULL),ce-pair*2,
                ATerm Ident(FormalArgs) { Decl+ Stat*2 },Aint2)

  [lcis-1'1] locate-constants-in-stats(,(ce-pair*,Aint)) = (ce-pair*,,Aint)

  [lcis-1'2] locate-constants-in-statlist(Stat+1,(ce-pair*1,Aint1)) =
               (ce-pair*2,Stat+2,Aint2)
             ==========================
             locate-constants-in-stats(Stat+1,(ce-pair*1,Aint1)) = (ce-pair*2,Stat+2,Aint2)


  [lcis-2'1] locate-constants-in-stat(Stat1,(ce-pair*1,Aint1)) =
               (ce-pair*2,Stat2,Aint2)
             =========================
             locate-constants-in-statlist(Stat1,(ce-pair*1,Aint1)) =
               (ce-pair*2,Stat2,Aint2)

  [lcis-2'2] locate-constants-in-statlist(Stat+1,(ce-pair*1,Aint1)) =
               (ce-pair*2,Stat+2,Aint2),
             locate-constants-in-stat(Stat1,(ce-pair*2,Aint2)) =
               (ce-pair*3,Stat2,Aint3)
             =========================
             locate-constants-in-statlist(Stat+1 Stat1,(ce-pair*1,Aint1)) =
               (ce-pair*3,Stat+2 Stat2,Aint3)

  [lcis-3'1] locate-constants-in-stat(FUNC_ENTRY(Expression1,Expression2) ;,(ce-pair*,Aint)) =
               (ce-pair*,FUNC_ENTRY(Expression1,Expression2) ;,Aint)

  [lcis-3'1] locate-constants-in-stat(CONS_ENTRY(Expression1,Expression2) ;,(ce-pair*,Aint)) =
               (ce-pair*,CONS_ENTRY(Expression1,Expression2) ;,Aint)

  [default-lcis-3'1] flatten-list-of-chars(Expression1) = Expression2,
                     locate-constants-in-expression(Expression2,(ce-pair*1,Aint1)) =
                       (ce-pair*2,Expression3,Aint2)
                     ===============================
                     locate-constants-in-stat(Expression1 ;,(ce-pair*1,Aint1)) =
                       (ce-pair*2,Expression3 ;,Aint2)

  [lcis-3'2] locate-constants-in-stats(Stat*1,(ce-pair*1,Aint1)) =
               (ce-pair*2,Stat*2,Aint2)
             ==========================
             locate-constants-in-stat({Decl* Stat*1},(ce-pair*1,Aint1)) =
               (ce-pair*2,{Decl* Stat*2},Aint2)

  [lcis-3'3] flatten-list-of-chars(Expression1) = Expression2,
             locate-constants-in-expression(Expression2,(ce-pair*1,Aint1)) =
               (ce-pair*2,Expression3,Aint2),
             locate-constants-in-stat(Stat1,(ce-pair*2,Aint2)) =
               (ce-pair*3,Stat2,Aint3)
             =========================
             locate-constants-in-stat(if (Expression1) Stat1,(ce-pair*1,Aint1)) =
               (ce-pair*3,if (Expression3) Stat2,Aint3)

  [lcis-3'4] flatten-list-of-chars(Expression1) = Expression2,
             locate-constants-in-expression(Expression2,(ce-pair*1,Aint1)) =
               (ce-pair*2,Expression3,Aint2),
             locate-constants-in-stat(Stat1,(ce-pair*2,Aint2)) =
               (ce-pair*3,Stat3,Aint3),
             locate-constants-in-stat(Stat2,(ce-pair*3,Aint3)) =
               (ce-pair*4,Stat4,Aint4)
             =========================
             locate-constants-in-stat(if (Expression1) Stat1 else Stat2,
               (ce-pair*1,Aint1)) =
               (ce-pair*4,if (Expression3) Stat3 else Stat4,Aint4)

  [lcis-3'5] flatten-list-of-chars(Expression1) = Expression2,
             locate-constants-in-expression(Expression2,(ce-pair*1,Aint1)) =
               (ce-pair*2,Expression3,Aint2),
             locate-constants-in-stat(Stat1,(ce-pair*2,Aint2)) =
               (ce-pair*3,Stat2,Aint3)
             =========================
             locate-constants-in-stat(while (Expression1) Stat1,(ce-pair*1,Aint1)) =
               (ce-pair*3,while (Expression3) Stat2,Aint3)

%%%  [lcis-3'6] flatten-list-of-chars(Expression1) = Expression2,
%%%             locate-constants-in-expression(Expression2,(ce-pair*1,Aint1)) =
%%%               (ce-pair*2,Expression3,Aint2)
%%%             ==============================
%%%             locate-constants-in-stat(EXIT_FUNC(Expression1) ;,(ce-pair*1,Aint1)) =
%%%               (ce-pair*2,EXIT_FUNC(Expression3) ;,Aint2)

  [default-lcis-3'7] locate-constants-in-stat(Stat,(ce-pair*,Aint)) =
                       (ce-pair*,Stat,Aint)

  [lcie-1'1] is-integer(Expression) = false,
             is-make-char-function-call(Expression) = false,
             expression-contains-variables(Expression) = false,
             is-sym-symbol(Expression) = false,
             add-to-ce-pairs(Expression,ce-pair*1,Aint1) = (ce-pair*2,Ident,Aint2)
             =====================================================================
             locate-constants-in-expression(FUNC_EXIT(Expression),(ce-pair*1,Aint1)) =
               (ce-pair*2,FUNC_EXIT_CONST(Ident,Expression),Aint2)

  [lcie-1'1] is-integer(Expression) = false,
             is-make-char-function-call(Expression) = false,
             expression-contains-variables(Expression) = false,
             is-sym-symbol(Expression) = false,
             add-to-ce-pairs(Expression,ce-pair*1,Aint1) = (ce-pair*2,Ident,Aint2)
             =====================================================================
             locate-constants-in-expression(CONS_EXIT(Expression),(ce-pair*1,Aint1)) =
               (ce-pair*2,CONS_EXIT_CONST(Ident,Expression),Aint2)

  [lcie-1'2] is-integer(Expression) = false,
             is-exit-func(Expression) = false,
             is-make-char-function-call(Expression) = false,
             expression-contains-variables(Expression) = false,
             is-sym-symbol(Expression) = false,
             add-to-ce-pairs(Expression,ce-pair*1,Aint1) = (ce-pair*2,Ident,Aint2)
             =====================================================================
             locate-constants-in-expression(Expression,(ce-pair*1,Aint1)) =
               (ce-pair*2,(Ident ? Ident : (Ident = Expression)),Aint2)

  [lcie-1'3] Prime != identifier("m""a""k""e""_""c""h""a""r"),
             Prime != identifier("c""h""e""c""k""_""s""y""m"),
             Prime != identifier("F""U""N""C""_""E""X""I""T"),
             Prime != identifier("C""O""N""S""_""E""X""I""T"),
             expression-contains-variables(Prime(ActualArg*1)) = true,
             locate-constants-in-expressions(ActualArg*1,(ce-pair*1,Aint1)) =
               (ce-pair*2,ActualArg*2,Aint2)
             ==============================
             locate-constants-in-expression(Prime(ActualArg*1),(ce-pair*1,Aint1)) =
               (ce-pair*2,Prime(ActualArg*2),Aint2)

  [lcie-1'3] locate-constants-in-expression(Expression2,(ce-pair*1,Aint1)) =
               (ce-pair*2,Expression3,Aint2)
             ===============================
             locate-constants-in-expression(Expression1 = Expression2,(ce-pair*1,Aint1)) =
               (ce-pair*2,Expression1 = Expression3,Aint2)

  [default-lcie-1'4] locate-constants-in-expression(Expression,(ce-pair*,Aint)) =
                       (ce-pair*,Expression,Aint)

  [lcie-2'1] locate-constants-in-expressions(,(ce-pair*,Aint)) = (ce-pair*,,Aint)

  [lcie-2'2] locate-constants-in-expression(ActualArg1,(ce-pair*1,Aint1)) =
               (ce-pair*2,ActualArg2,Aint2),
             locate-constants-in-expressions(ActualArg*1,(ce-pair*2,Aint2)) =
               (ce-pair*3,ActualArg*2,Aint3)
             ===============================
             locate-constants-in-expressions(ActualArg1, ActualArg*1,(ce-pair*1,Aint1)) =
               (ce-pair*3,ActualArg2, ActualArg*2,Aint3)

  [ecv-1'1] expression-contains-variables((ATerm) ATmakeList(ActualArgs+)) = false

  [ecv-1'2] expressions-contain-variables(ActualArg*1) = Bool
            =================================================
            expression-contains-variables(Prime(ActualArg*1)) = Bool

  [ecv-1'3] expression-contains-variables(integer-constant(Char*)) = false

  [ecv-1'4] expression-contains-variables(identifier(Char* "s""y""m")) = false

  [default-ecv-1'5] expression-contains-variables(Expression) = true

  [escv-2'1] expressions-contain-variables() = false

  [escv-2'2] expression-contains-variables(ActualArg1) = Bool1,
             expressions-contain-variables(ActualArg*1) = Bool2
             ==================================================
             expressions-contain-variables(ActualArg1, ActualArg*1) = Bool1 \/ Bool2

  [ifc-1'1] is-make-char-function-call(make_char(integer-constant(Char*))) = true

  [default-ifc-1'1] is-make-char-function-call(Expression) = false

  [ifc-2'1] is-function-call(Prime(ActualArg*)) = true

  [default-ifc-2'1] is-function-call(Expression) = false

  [ifc-2'1] is-exit-func(FUNC_EXIT(Expression)) = true

  [ifc-2'1] is-exit-func(CONS_EXIT(Expression)) = true

  [default-ifc-2'1] is-exit-func(Expression) = false

  [ii-1'1] is-integer(integer-constant(Char*)) = true

  [default-ii-1'1] is-integer(Expression) = false

  [iss-1'1] is-sym-symbol(identifier(Char* "s""y""m")) = true

  [default-iss-1'1] is-sym-symbol(Expression) = false

  [mn2cn-1'1] make-call-id(funid(Char*1)) = identifier(Char*2)
              ================================================
              modname2iname(modid(Char*1)) = identifier("i""n""i""t""_" Char*2)

  [mif-1'1] modname2iname(Modid) = CConstant,
            make-statements-function(ce-pair*) = (,Decl*,Stat*)
            ===================================================
            make-init-function(Modid,ce-pair*) =
              Decl* ++
              void CConstant()
              {
                 Stat*
              }

  [msf-1'1] make-statements-function() = (,,)

  [msf-1'2] make-stats-function(ce-pair+) = (,Decl+,Stat+)
            ==============================================
            make-statements-function(ce-pair+) = (,Decl+,Stat+)

  [msf-2'1] Ident = identifier("t""a""b""l""e" Char*)
            =========================================
            make-stats-function((Ident,Expression)) =
              (,static ATermTable Ident;, create_table(Ident,0);)

  [default-msf-2'2] make-stats-function((Ident,Expression)) =
              (,static ATerm Ident = NULL ;, ATprotect(&Ident);)

  [msf-2'3] Ident = identifier("t""a""b""l""e" Char*),
            make-stats-function(ce-pair+) = (,Decl+,Stat+)
            ==============================================
            make-stats-function(ce-pair+,(Ident,Expression)) =
              (,Decl+ ATermTable Ident;, Stat+ create_table(Ident,0);)

  [default-msf-2'4] make-stats-function(ce-pair+) = (,Decl+,Stat+)
                    ==============================================
                    make-stats-function(ce-pair+,(Ident,Expression)) =
%%%              (,Decl+ static ATerm Ident  = NULL ;, Stat+ ATprotect(&Ident); Ident = Expression ;)
                    (,Decl+ static ATerm Ident  = NULL ;, Stat+ ATprotect(&Ident);)

  [acep-1'1] Aint1 = natcon(Char*),
             succ(Aint1) = Aint2,
             identifier("c""o""n""s""t""a""n""t" Char*) = Ident
             ==================================================
             add-to-ce-pairs(Expression,,Aint1) = ((Ident,Expression),Ident,Aint2)

  [acep-1'2] add-to-ce-pairs(Expression,(Ident,Expression),ce-pair*,Aint) =
               ((Ident,Expression),ce-pair*,Ident,Aint)

  [acep-1'3] Expression1 != Expression2,
             add-to-ce-pairs(Expression1,ce-pair*1,Aint1) =
               (ce-pair*2,Ident2,Aint2)
             ===============================
             add-to-ce-pairs(Expression1,(Ident1,Expression2),ce-pair*1,Aint1) =
               ((Ident1,Expression2),ce-pair*2,Ident2,Aint2)

  [flc-1'1] flatten-list-of-chars(Arg2) = Arg3
            ==================================
            flatten-list-of-chars(cons(make_list(make_char(Arg1)),Arg2)) =
              compose-list-of-chars(Arg1,Arg3)

  [default-flc-1'2] flatten-arguments(ActualArg*1) = ActualArg*2
                    ============================================
                    flatten-list-of-chars(Prime(ActualArg*1)) = Prime(ActualArg*2)

  [flc-1'3] flatten-list-of-chars(Expression2) = Expression3
            ================================================
            flatten-list-of-chars(Expression1 = Expression2) = Expression1 = Expression3

  [default-flc-1'4] is-function-call(Expression) = false
                    ====================================
                    flatten-list-of-chars(Expression) = Expression

  [fa-1'1] flatten-arguments() =

  [fa-1'2] flatten-list-of-chars(ActualArg1) = ActualArg2,
           flatten-arguments(ActualArg*1) = ActualArg*2
           ============================================
           flatten-arguments(ActualArg1,ActualArg*1) = ActualArg2,ActualArg*2

  [clc-1'1] compose-list-of-chars(Arg1,make_list(make_char(Arg2))) =
              (ATerm) ATmakeList (2, char_table[Arg1], char_table[Arg2] )

  [clc-1'2] succ(natcon(Char*1)) = natcon(Char*2)
            =====================================
            compose-list-of-chars(Arg1,(ATerm) ATmakeList(integer-constant(Char*1), ActualArgs+)) =
              (ATerm) ATmakeList (integer-constant(Char*2), char_table[Arg1], ActualArgs+)

  [default-clc-1'3] compose-list-of-chars(Arg1,Arg2) = cons(make_list_char(Arg1),Arg2)
