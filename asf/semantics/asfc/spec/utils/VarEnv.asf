equations

  [VE-1'1] enter(Term,[Pair*]) = [Term,Pair*]

  [VE-1'2] enter(Term,[Aint,Pair*]) = [Aint,Term,Pair*]

  [VE-2'1] includes(Term,[Aint,Pair*]) = includes(Term,[Pair*])

  [VE-2'2] includes(Term,[]) = false

  [VE-2'3] includes(Term,[Term,Pair*]) = true

  [VE-2'4] Term1 != Term2
           ==============
           includes(Term1,[Term2,Pair*]) =
             includes(Term1,[Pair*])

  [gv-4'1] gen-var(natcon(Char+)) = varid("V" Char+)

  [nv-4'1] newvar(natcon(Char+1),varid(Char+2)) =
             varid(Char+2 "n""e""w" Char+1)

  [nv-4'2] Varid2 := newvar(Aint,Varid1)
           ============================
           newvar(Aint,*Varid1) = *Varid2

  [nv-4'3] Varid2 := newvar(Aint,Varid1)
           ============================
           newvar(Aint,+Varid1) = +Varid2

  [nlv-1'1] newlistvar(natcon(Char+1)) =
              varid("V""l""i""s""t" Char+1)

  [nlv-2'1] newlistvar(*varid(Char+)) =
              varid(Char+ "l""i""s""t")

  [nlv-2'2] newlistvar(+varid(Char+)) =
              varid(Char+ "l""i""s""t")

  [gint-1'1] get-int([Aint,Pair*]) = Aint

  [pint-1'1] put-int(Aint1,[Aint2,Pair*]) = [Aint1,Pair*]

  [nv-1'1] newvar(natcon(Char+)) = varid("V" Char+)

  [vve-1'1] Varid2 := newvar(Aint)
            =====================
            vv-enter(Varid1,[Aint,]) = [Varid2,[succ(Aint),(Varid1,Varid2)]]

  [vve-1'2] vv-enter(Varid1,[Aint,(Varid1,Varid2),VvPair*]) =
              [Varid2,[Aint,(Varid1,Varid2),VvPair*]]

  [vve-1'3] Varid1 != Varid2,
            [Varid4,[Aint2,VvPair*2]] := vv-enter(Varid1,[Aint1,VvPair*1])
            =============================================================
            vv-enter(Varid1,[Aint1,(Varid2,Varid3),VvPair*1]) =
              [Varid4,[Aint2,(Varid2,Varid3),VvPair*2]]

  [u-1'1] Varid := gen-var(Aint)
          =====================
          unique([Aint,Pair*]) = Varid

  [l-1'1] natcon(Char*2) := Aint1
          ======================
          nt-lookup(Funid,(,funid(Char*1),Aint1,Aint2)) =
            (funid(Char*1 Char*2),
             ((Funid,funid(Char*1 Char*2),),funid(Char*1),succ(Aint1),Aint2))

  [l-1'2] nt-lookup(Funid1,((Funid1,Funid2,Term*),Namepair*1,Funid3,Aint1,Aint2)) =
            (Funid2,((Funid1,Funid2,Term*),Namepair*1,Funid3,Aint1,Aint2))

  [l-1'3] Funid1 != Funid2,
          (Funid5,(Namepair*2,Funid6,Aint3,Aint4)) :=
            nt-lookup(Funid1,(Namepair*1,Funid4,Aint1,Aint2))
          ====================================
          nt-lookup(Funid1,((Funid2,Funid3,Term*),Namepair*1,Funid4,Aint1,Aint2)) =
            (Funid5,((Funid2,Funid3,Term*),Namepair*2,Funid6,Aint3,Aint4))

  [l-2'1] natcon(Char*2) := Aint1
          ======================
          nt-lookup(Funid,Term*,(,funid(Char*1),Aint1,Aint2)) =
            (funid(Char*1 Char*2),
             ((Funid,funid(Char*1 Char*2),Term*),funid(Char*1),succ(Aint1),Aint2))

  [l-1'2] nt-lookup(Funid1,Term*1,((Funid1,Funid2,Term*2),Namepair*1,Funid3,Aint1,Aint2)) =
            (Funid2,((Funid1,Funid2,Term*2),Namepair*1,Funid3,Aint1,Aint2))

  [l-1'3] Funid1 != Funid2,
          (Funid5,(Namepair*2,Funid6,Aint3,Aint4)) :=
            nt-lookup(Funid1,Term*1,(Namepair*1,Funid4,Aint1,Aint2))
          ==========================================
          nt-lookup(Funid1,Term*1,((Funid2,Funid3,Term*2),Namepair*1,Funid4,Aint1,Aint2)) =
            (Funid5,((Funid2,Funid3,Term*2),Namepair*2,Funid6,Aint3,Aint4))

  [nta-1'1] nt-add(Funid1,Funid2,(,Funid3,Aint1,Aint2)) =
              ((Funid1,Funid2,),Funid3,Aint1,Aint2)

  [nta-1'2] nt-add(Funid1,Funid2,((Funid1,Funid2,Term*),Namepair*1,Funid3,Aint1,Aint2)) =
             ((Funid1,Funid2,Term*),Namepair*1,Funid3,Aint1,Aint2)

  [nta-1'3] Funid1 != Funid3,
            (Namepair*2,Funid6,Aint3,Aint4) :=
              nt-add(Funid1,Funid2,(Namepair*1,Funid5,Aint1,Aint2))
            =================================
            nt-add(Funid1,Funid2,((Funid3,Funid4,Term*),Namepair*1,Funid5,Aint1,Aint2)) =
              ((Funid3,Funid4,Term*),Namepair*2,Funid6,Aint3,Aint4)

  [nta-2'1] nt-add(Funid1,Funid2,Term*,(,Funid3,Aint1,Aint2)) =
              ((Funid1,Funid2,Term*),Funid3,Aint1,Aint2)

  [nta-1'2] nt-add(Funid1,Funid2,Term*1,((Funid1,Funid2,Term*2),Namepair*1,Funid3,Aint1,Aint2)) =
             ((Funid1,Funid2,Term*2),Namepair*1,Funid3,Aint1,Aint2)

  [nta-1'3] Funid1 != Funid3,
            (Namepair*2,Funid6,Aint3,Aint4) :=
              nt-add(Funid1,Funid2,Term*1,(Namepair*1,Funid5,Aint1,Aint2))
            =================================
            nt-add(Funid1,Funid2,Term*1,((Funid3,Funid4,Term*2),Namepair*1,Funid5,Aint1,Aint2)) =
              ((Funid3,Funid4,Term*2),Namepair*2,Funid6,Aint3,Aint4)

  [l-2'1] natcon(Char*2) := Aint2
          ======================
          ntl-lookup(Funid1,(,Funid2,Aint1,Aint2)) =
            (funid("l""f" Char*2),
             ((Funid1,funid("l""f" Char*2),),Funid2,Aint1,succ(Aint2)))

  [l-2'2] ntl-lookup(Funid1,((Funid1,Funid2,Term*),Namepair*1,Funid3,Aint1,Aint2)) =
            (Funid2,((Funid1,Funid2,Term*),Namepair*1,Funid3,Aint1,Aint2))

  [l-2'3] Funid1 != Funid2,
          (Funid5,(Namepair*2,Funid6,Aint3,Aint4)) :=
            ntl-lookup(Funid1,(Namepair*1,Funid4,Aint1,Aint2))
          ==========================================
          ntl-lookup(Funid1,((Funid2,Funid3,Term*),Namepair*1,Funid4,Aint1,Aint2)) =
            (Funid5,((Funid2,Funid3,Term*),Namepair*2,Funid6,Aint3,Aint4))

  [l-1'1] np-lookup(funid(Char*),) = funid(Char*)

  [l-1'2] np-lookup(Funid1,(Funid2,Funid1,Term*),Namepair*) = Funid2

  [l-1'3] Funid1 != Funid3
          ================
          np-lookup(Funid1,(Funid2,Funid3,Term*),Namepair*) =
            np-lookup(Funid1,Namepair*)

  [l-1'1] pn-lookup(funid(Char*),) = funid(""" Char* """)

  [l-1'2] pn-lookup(Funid1,(Funid1,Funid2,Term*),Namepair*) = Funid2

  [l-1'3] Funid1 != Funid2
          ================
          pn-lookup(Funid1,(Funid2,Funid3,Term*),Namepair*) =
            pn-lookup(Funid1,Namepair*)

  [il-1'1] is-delaying(Funid, ) = false

  [il-1'3] is-delaying(Funid,(Funid1,Funid,Term*1,delaying(Term+),Term*2),Namepair*) = true

  [il-1'4] funid(Char*1) := Funid,
           funid("_" Char*2) := Funid2,
           funid(Char*1) == funid(Char*2)
           =============================
           is-delaying(Funid,(Funid1,Funid2,Term*1,delaying(Term+),Term*2),Namepair*) = true

  [default-il-1'5] is-delaying(Funid1,(Funid2,Funid3,Term*),Namepair*) =
                     is-delaying(Funid1,Namepair*)

  [im-1'1] is-memo(Funid, ) = false

  [im-1'2] is-memo(Funid,(Funid1,Funid,Term*1,memo,Term*2),Namepair*) = true

  [im-1'3] funid(Char*1) := Funid,
           funid("_" Char*2) := Funid2,
           funid(Char*1) == funid(Char*2)
           =============================
           is-memo(Funid,(Funid1,Funid2,Term*1,memo,Term*2),Namepair*) = true

  [default-im-1'4] is-memo(Funid1,(Funid2,Funid3,Term*),Namepair*) =
                     is-memo(Funid1,Namepair*)

  [ic-1'1] is-constructor(Funid, ) = false

  [ic-1'2] is-constructor(Funid,(Funid1,Funid,Term*1,constructor,Term*2),Namepair*) = true

  [ic-1'3] funid(Char*1) := Funid,
           funid("_" Char*2) := Funid2,
           funid(Char*1) == funid(Char*2)
           =============================
           is-constructor(Funid,(Funid1,Funid2,Term*1,constructor,Term*2),Namepair*) = true

  [default-ic-1'4] is-constructor(Funid1,(Funid2,Funid3,Term*),Namepair*) =
                     is-constructor(Funid1,Namepair*)

  [gpa-1'1] get-delaying-args(Funid,(Funid1,Funid,
                                     Term*1,delaying(Term+),Term*2),Namepair*) = Term+

  [gpa-1'2] funid(Char*1) := Funid,
            funid("_" Char*2) := Funid2,
            funid(Char*1) == funid(Char*2)
            =============================
            get-delaying-args(Funid,(Funid1,Funid2,
                                     Term*1,delaying(Term+),Term*2),Namepair*) = Term+

  [default-gpa-1'3] get-delaying-args(Funid1,(Funid2,Funid3,Term*),Namepair*) =
                      get-delaying-args(Funid1,Namepair*)
