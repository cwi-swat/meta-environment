
%%
%% The module {\tt VarEnv} defines a number
%% of datastructures to store variables and
%% their types. These datastructures are
%% used during the various translation
%% processes.  Furthermore a number
%% access functions are defined to
%% store and retrieve information from
%% these datastructures.
module utils/VarEnv

imports utils/Integers-Extended
imports muasf/MuASF


exports
  sorts VarEnv IntVarEnv
  context-free syntax
    "[" {Term ","}* "]"            -> VarEnv
    "[" IntCon "," {Term ","}* "]" -> IntVarEnv

exports
  sorts VV-Pair VV-Struct IntVVarEnv
  context-free syntax
    "(" VarId "," VarId ")"           -> VV-Pair
    "[" IntCon "," {VV-Pair ","}* "]" -> IntVVarEnv
    "[" VarId "," IntVVarEnv "]"      -> VV-Struct
  context-free syntax
    newvar(IntCon)             -> Term
    vv-enter(VarId,IntVVarEnv) -> VV-Struct

%% The context-free syntax definitions of
%% the access functions.
  context-free syntax
    enter(Term,VarEnv)       -> VarEnv
    enter(Term,IntVarEnv)    -> IntVarEnv
    includes(Term,VarEnv)    -> Bool
    includes(Term,IntVarEnv) -> Bool

  context-free syntax
    gen-var(IntCon)           -> Term
    newvar(IntCon,Term)       -> Term
    newlistvar(IntCon)        -> VarId
    newlistvar(Term)          -> VarId
    get-int(IntVarEnv)        -> IntCon
    put-int(IntCon,IntVarEnv) -> IntVarEnv
    unique(IntVarEnv)         -> Term

  sorts
    Term-CList-VarEnv CList-VarEnv
  context-free syntax
    "(" {Term ","}* "," {Cond "&"}* ","
        IntVarEnv ")"                              -> Term-CList-VarEnv
    "(" {Cond "&"}* "," IntVarEnv ")"              -> CList-VarEnv

exports
  sorts NameTable NamePair IdTablePair
  context-free syntax
    "(" FunId "," FunId "," {Term ","}*")"                  -> NamePair
    "(" {NamePair ","}* "," FunId "," IntCon "," IntCon ")" -> NameTable
    "(" FunId "," NameTable ")"                             -> IdTablePair
    nt-lookup(FunId,NameTable)                              -> IdTablePair
    nt-lookup(FunId,TermList,NameTable)                     -> IdTablePair
    nt-add(FunId,FunId,NameTable)                           -> NameTable
    nt-add(FunId,FunId,TermList,NameTable)                  -> NameTable
    ntl-lookup(FunId,NameTable)                             -> IdTablePair
    np-lookup(FunId,{NamePair ","}*)                        -> FunId
    pn-lookup(FunId,{NamePair ","}*)                        -> FunId


exports
sorts MN-struct
  context-free syntax
    "(" Module "," NameTable ")" -> MN-struct

exports
  context-free syntax
    is-delaying(FunId,{NamePair ","}*)       -> Bool
    is-memo(FunId,{NamePair ","}*)           -> Bool
    is-constructor(FunId,{NamePair ","}*)    -> Bool
    get-delaying-args(FunId,{NamePair ","}*) -> TermList

exports
  variables
    "Nametable"[0-9]* -> NameTable
    "Namepair*"[0-9]* -> {NamePair ","}*
    "Namepair+"[0-9]* -> {NamePair ","}+
    "Namepair"[0-9]*  -> NamePair

exports
  variables
    "Varenv"[0-9]*   -> VarEnv
    "Ivarenv"[0-9]*  -> IntVarEnv
    "Ivvarenv"[0-9]* -> IntVVarEnv
    "VvPair*"[0-9]*  -> {VV-Pair ","}*
hiddens
  variables
    "Pair*"[0-9]*  -> {Term ","}*
    "Char*"[0-9]*  -> CHAR*
    "Char+"[0-9]*  -> CHAR+
