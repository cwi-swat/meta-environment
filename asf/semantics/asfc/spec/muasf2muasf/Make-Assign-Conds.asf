%%
%%    Meta-Environment - An environment for language prototyping.
%%    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, The Netherlands. 
%%
%%    This program is free software; you can redistribute it and/or modify
%%    it under the terms of the GNU General Public License as published by
%%    the Free Software Foundation; either version 2 of the License, or
%%    (at your option) any later version.
%%
%%    This program is distributed in the hope that it will be useful,
%%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%%    GNU General Public License for more details.
%%
%%    You should have received a copy of the GNU General Public License
%%    along with this program; if not, write to the Free Software
%%    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
%%
equations

  [mmc-1'1] make-mc-ruleopt(Rulesopt1) = Rule*,
            create-new-rulesopt(Rule*) = Rulesopt2
            ======================================
            make-matching-conds(module Modid
                                       Signopt
                                       Rulesopt1) =
              module Modid
                     Signopt
                     Rulesopt2

%% If there are no rules nothing needs to be done.
  [mro-1'1] make-mc-ruleopt() =

  [mro-1'2] make-mc-ruleopt(rules) =

%% If there are rules all rules are inspected one
%% by one.
  [mro-1'3] make-mc-rules(Rule+1) = Rule+2
            ==============================
            make-mc-ruleopt(rules Rule+1) = Rule+2

  [mrules-1'1] make-mc-rule(Rule1) = Rule2
               ===========================
               make-mc-rules(Rule1) = Rule2

  [mrules-1'2] make-mc-rule(Rule1) = Rule2,
               make-mc-rules(Rule+1) = Rule+2
               ==============================
               make-mc-rules(Rule1; Rule+1) = Rule2; Rule+2

%% First we deal with rewrite rules without conditions.
%%%  [mrule-1'1] make-mc-rule(default:Term1 = Term2) = default:Term1 = Term2

%%%  [mrule-1'2] make-mc-rule(Term1 = Term2) = Term1 = Term2

%% If a rule has conditions, all right-hand sides of the condition
%% should be checked and changed, as well.
  [mrule-1'1] inspect-term(Term1,[1,]) = Ivarenv1,
              make-mc-conds(Cond+1,Ivarenv1) = (Cond+2,Ivarenv2)
              ==================================================
              make-mc-rule(Cond+1 ==> Term1 = Term2) =
                Cond+2 ==> Term1 = Term2

  [mrule-1'2] inspect-term(Term1,[1,]) = Ivarenv1,
              make-mc-conds(Cond+1,Ivarenv1) = (Cond+2,Ivarenv2)
              ==================================================
              make-mc-rule(default:Cond+1 ==> Term1 = Term2) =
                default:Cond+2 ==> Term1 = Term2

  [default-mrule-1'3] make-mc-rule(Rule) = Rule

  [iterm-1'1] inspect-term(Funid,Ivarenv) = Ivarenv

  [iterm-1'2] inspect-terms(Term+,Ivarenv1) = Ivarenv2
              ========================================
              inspect-term(Funid(Term+),Ivarenv1) = Ivarenv2

%% If a term is variable it is first checked whether it is
%% a fresh one, fresh variables are ok and are inserted
%% in the list of used variables.
  [iterm-1'3] includes(Var,Ivarenv1) = false,
              enter(Var,Ivarenv1) = Ivarenv2
              ==============================
              inspect-term(Var,Ivarenv1) = Ivarenv2

  [iterm-1'4] includes(Var,Ivarenv) = true
              ============================
              inspect-term(Var,Ivarenv) = Ivarenv

  [its-1'1] inspect-terms(Term,Ivarenv) = inspect-term(Term,Ivarenv)

  [its-1'2] inspect-terms(Term,Ivarenv1) = Ivarenv2,
            inspect-terms(Term+,Ivarenv2) = Ivarenv3
            ========================================
            inspect-terms(Term,Term+,Ivarenv1) = Ivarenv3

  [mmccs-1'1] make-mc-conds(Cond,Ivarenv) = make-mc-cond(Cond,Ivarenv)

  [mmccs-1'2] make-mc-cond(Cond1,Ivarenv1) = (Cond2,Ivarenv2),
              make-mc-conds(Cond+1,Ivarenv2) = (Cond+2,Ivarenv3)
              ==================================================
              make-mc-conds(Cond1 & Cond+1,Ivarenv1) =
                (Cond2 & Cond+2,Ivarenv3)

  [mmcc-1'1] inspect-term(Term1,Ivarenv1) = Ivarenv2,
             Ivarenv1 != Ivarenv2,
             inspect-term(Term2,Ivarenv2) = Ivarenv3,
             Ivarenv2 = Ivarenv3
             ===================
             make-mc-cond(Term1 == Term2,Ivarenv1) = (Term2 =: Term1,Ivarenv3)

  [mmcc-1'2] inspect-term(Term1,Ivarenv1) = Ivarenv2,
             Ivarenv1 = Ivarenv2,
             inspect-term(Term2,Ivarenv2) = Ivarenv3,
             Ivarenv2 != Ivarenv3
             ====================
             make-mc-cond(Term1 == Term2,Ivarenv1) = (Term1 =: Term2,Ivarenv3)

  [mmcc-1'3] inspect-term(Term1,Ivarenv1) = Ivarenv2,
             Ivarenv1 = Ivarenv2,
             inspect-term(Term2,Ivarenv2) = Ivarenv3,
             Ivarenv2 = Ivarenv3
             ===================
             make-mc-cond(Term1 == Term2,Ivarenv1) =
               (term_equal(Term1,Term2) =: t,Ivarenv3)

  [mmcc-1'4] inspect-term(Term1,Ivarenv1) = Ivarenv2,
             Ivarenv1 = Ivarenv2,
             inspect-term(Term2,Ivarenv2) = Ivarenv3,
             Ivarenv2 = Ivarenv3
             ===================
             make-mc-cond(Term1 != Term2,Ivarenv1) =
               (term_equal(Term1,Term2) =: f,Ivarenv3)

  [mmcc-1'5] inspect-term(Term2,Ivarenv1) = Ivarenv2
             =======================================
             make-mc-cond(Term1 =: Term2,Ivarenv1) = (Term1 =: Term2,Ivarenv2)
