equations

  [tll-1'1] Term1 = Funid1(Term+),
            prefix-id("general__",Funid1,Aint1) = Funid2
            ===========================================
            transform-general-pat(Term1 = Term2,Aint1) =
              transform-general-lhs(Funid2,Term1,Term2,1)

  [tll-1'2] Term1 = Funid1(Term+),
            prefix-id("general__",Funid1,Aint1) = Funid2
            ============================================
            transform-general-pat(Cond+ ==> Term1 = Term2,Aint1) =
              transform-general-lhs(Funid2,Cond+,Term1,Term2,1)

%% The function {\tt transform-lhs} transforms a list matching
%% pattern into a set of recursive functions.
  [tgl-1'1] general-pattern(init-lhs,Term+1,Aint) = Term+2,
            general-pattern(init-rhs,Term+1,Aint) = Term+4,
            general-pattern(new-lhs,Term+1,Aint) = Term+5,
            general-cond-pattern(Term+1,Aint) = Term1,
            newvar(Aint,OkV) = Varid,
            newvar(Aint,Vlist) = Varid1,
            newvar(succ(Aint),Vlist) = Varid2,
            %%%make-new-funcdef(Funid2(Term+1,Varid1),Funid1) = Funcdef
            make-new-funcdef(Funid2(Term+4),Funid1) = Funcdef
            ========================================================
            transform-general-lhs(Funid1,Funid2(Term+1),Term2,Aint) =
              (Funcdef,
               not-empty-list(*Varid1) =: t &
               make-new-cond(list-head(*Varid1),Term1) &
               make-new-cond(list-tail(*Varid1),Varid2) &
               Funid1(Term+4) =: ok(Varid)
               ==>
               Funid2(Term+2) = Varid;
               Funid1(Term+5) = ok(Term2),succ(succ(Aint)))

  [tgl-1'2] general-pattern(init-lhs,Term+1,Aint) = Term+2,
            general-pattern(init-rhs,Term+1,Aint) = Term+4,
            general-pattern(new-lhs,Term+1,Aint) = Term+5,
            general-cond-pattern(Term+1,Aint) = Term1,
            newvar(Aint,OkV) = Varid,
            newvar(Aint,Vlist) = Varid1,
            newvar(succ(Aint),Vlist) = Varid2,
            %%%make-new-funcdef(Funid2(Term+1,Varid1),Funid1) = Funcdef
            make-new-funcdef(Funid2(Term+4),Funid1) = Funcdef
            ========================================================
            transform-general-lhs(Funid1,Cond+,Funid2(Term+1),Term2,Aint) =
              (Funcdef,
               not-empty-list(*Varid1) =: t &
               make-new-cond(list-head(*Varid1),Term1) &
               make-new-cond(list-tail(*Varid1),Varid2) &
               Funid1(Term+4) =: ok(Varid)
               ==>
               Funid2(Term+2) = Varid;
               Cond+ ==>
               Funid1(Term+5) = ok(Term2),succ(succ(Aint)))

%% Functions to initialize the lookup pattern in the argument list.
  [lp-1'1] is-list-funid(Funid2) = true,
           newvar(Aint,Vlist) = Varid
           ==========================
           general-pattern(init-lhs,Funid2(cons(Term1,Term2)),Aint) =
             Funid2(*Varid)

  [lp-1'2] is-list-funid(Funid2) = true,
           newvar(succ(Aint),Vlist) = Varid,
           term-contains-var(Term1) = true
           ===============================
           general-pattern(init-rhs,Funid2(cons(Term1,Term2)),Aint) =
             Term1,Funid2(Varid)

  [lp-1'3] is-list-funid(Funid2) = true,
           newvar(succ(Aint),Vlist) = Varid,
           term-contains-var(Term1) = false
           ================================
           general-pattern(init-rhs,Funid2(cons(Term1,Term2)),Aint) =
             Funid2(Varid)

  [lp-1'4] is-list-funid(Funid2) = true,
           term-contains-var(Term1) = true
           ===============================
           general-pattern(new-lhs,Funid2(cons(Term1,Term2)),Aint) =
             Term1,Funid2(Term2)

  [lp-1'5] is-list-funid(Funid2) = true,
           term-contains-var(Term1) = false
           ================================
           general-pattern(new-lhs,Funid2(cons(Term1,Term2)),Aint) =
             Funid2(Term2)

  [lp-1'6] general-pattern(Pattype,Term,Term+,Aint) =
             general-patterns(Pattype,Term,Term+,Aint)

  [lp-1'7] is-list-funid(Funid1) = false,
           is-list-funid(Funid2) = true,
           general-pattern(Pattype,Funid2(Term+1),Aint) = Term+2%%%,
           %%%add-funid(Funid1,Term+2) = Term+3
           =================================
           general-pattern(Pattype,Funid1(Funid2(Term+1)),Aint) = Term+2

%%%  [gp-1'7] is-list-funid(Funid1) = false,
%%%           is-list-funid(Funid2) = false,
%%%           general-pattern(Pattype,Funid2(Term+1),Aint) = Term+2
%%%           =====================================================
%%%           general-pattern(Pattype,Funid1(Funid2(Term+1)),Aint) = Funid1(Term+2)

  [gp-1'8] Pattype != init-lhs,
           is-list-funid(Funid1) = false,
           find-general-pattern(Pattype;Funid1;;Term+1;Aint) = Term+2
           ===============================================================
           general-pattern(Pattype,Funid1(Term+1),Aint) = Term+2   %%% was Funid1(Term,Term+1)

  [gp-1'9] is-list-funid(Funid1) = false,
           general-patterns(init-lhs,Term+1,Aint) = Term+2
           ===============================================
           general-pattern(init-lhs,Funid1(Term+1),Aint) = Funid1(Term+2) %%% was Funid1(Term,Term+1

  [default-lp-1'15] general-pattern(Pattype,Term,Aint) = Term

%% Functions to initialize the lookup pattern in the argument list.
  [lp-3'1] general-patterns(Pattype,Term,Aint) = general-pattern(Pattype,Term,Aint)

  [lp-3'2] general-pattern(Pattype,Term1,Aint) = Term+2,
           general-patterns(Pattype,Term+1,Aint) = Term+3
           =============================================
           general-patterns(Pattype,Term1,Term+1,Aint) = Term+2,Term+3

  [fgp-1'1] contains-general-pattern(Term) = true,
            general-pattern(Pattype,Term,Aint) = Term+2
            ==========================================
            find-general-pattern(Pattype;Funid;Term*1;Term,Term*2;Aint) = Term*1,Term+2,Term*2

  [fgp-1'2] contains-general-pattern(Term) = false
            ======================================
            find-general-pattern(Pattype;Funid;Term*;Term,Term+;Aint) =
              find-general-pattern(Pattype;Funid;Term*,Term;Term+;Aint)

  [gcp-1'1] is-list-funid(Funid2) = true
            ============================
            general-cond-pattern(Funid2(cons(Term1,Term2)),
                                 Aint) = Term1

  [gcp-1'2]  general-cond-pattern(Term,Term+,Aint) = general-cond-patterns(Term,Term+,Aint)

  [gcp-1'3] %%%is-list-funid(Funid1) = false,
            is-list-funid(Funid2) = true,
            general-cond-pattern(Funid2(Term+1),Aint) = Term
            ================================================
            general-cond-pattern(Funid1(Funid2(Term+1)),Aint) = Term %%%Funid1(Term)

  [gcp-1'4] is-list-funid(Funid1) = false,
             is-list-funid(Funid2) = false,
             general-cond-pattern(Funid2(Term+1),Aint) = Term
             =================================================
             general-cond-pattern(Funid1(Funid2(Term+1)),Aint) = Funid1(Term)

  [gcp-1'5] is-list-funid(Funid1) = false,
             general-cond-patterns(Term,Term+1,Aint) = Term2
             =============================================
             general-cond-pattern(Funid1(Term,Term+1),Aint) = Funid1(Term2)

  [default-gcp-1'6] general-cond-pattern(Term,Aint) = Term

  [spsr1-1'1] contains-general-pattern(Term) = true
              =================================
              general-cond-patterns(Term,Aint) = general-cond-pattern(Term,Aint)

  [spsr1-1'2] contains-general-pattern(Term) = true
              =================================
              general-cond-patterns(Term,Term+,Aint) = general-cond-pattern(Term,Aint)

  [spsr1-1'3] contains-general-pattern(Term) = false
              ==================================
              general-cond-patterns(Term,Term+,Aint) = general-cond-patterns(Term+,Aint)
