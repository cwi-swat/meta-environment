%%
%%    Meta-Environment - An environment for language prototyping.
%%    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, The Netherlands. 
%%
%%    This program is free software; you can redistribute it and/or modify
%%    it under the terms of the GNU General Public License as published by
%%    the Free Software Foundation; either version 2 of the License, or
%%    (at your option) any later version.
%%
%%    This program is distributed in the hope that it will be useful,
%%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%%    GNU General Public License for more details.
%%
%%    You should have received a copy of the GNU General Public License
%%    along with this program; if not, write to the Free Software
%%    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
%%
%%  Normalize-Conds

imports MuASF-Equations-Ops

exports
  context-free syntax
    normalize-conditions(Module) -> Module
    normalize-list-in-rule(Rule)  -> Rule

hiddens
  context-free syntax
    normalize-rulesopt(RulesOpt)  -> RulesOpt
    normalize-rules({Rule ";"}*)  -> RuleList
    normalize-rule(Rule)          -> Rule

hiddens
  sorts TC-tuple
  context-free syntax
    "(" {Term ","}* "," {Cond "&"}* "," IntCon")" -> TC-tuple
  context-free syntax
    normalize-conds({Cond "&"}+,IntCon)          -> TC-tuple
    normalize-cond(Cond,IntCon)                  -> TC-tuple
    normalize-list-in-conds({Cond "&"}+,IntCon)  -> TC-tuple
    normalize-list-in-cond(Cond,IntCon)          -> TC-tuple
  context-free syntax
    normalize-terms({Term ","}+,IntCon)         -> TC-tuple
    normalize-term(Term,IntCon)                 -> TC-tuple
    normalize-list-in-term(Term,IntCon)         -> TC-tuple
    normalize-list-in-terms({Term ","}+,IntCon) -> TC-tuple
    normalize-list-arg(Term,IntCon)             -> TC-tuple
    normalize-list-args({Term ","}+,IntCon)     -> TC-tuple

%%%exports
%%%  context-free syntax
%%%    transform-list-rule(Rule,AInt) -> FuncRuleTuple

%%%hiddens
%%%  context-free syntax
%%%    transform-list-conds(Term,{Cond "&"}+,
%%%                           {Cond "&"}*,Term,Term,AInt) -> FuncRuleTuple
hiddens
  variables
    Char[0-9]*       -> CHAR
    Char[\*][0-9]*   -> CHAR*
    Char[\+][0-9]*   -> CHAR+
