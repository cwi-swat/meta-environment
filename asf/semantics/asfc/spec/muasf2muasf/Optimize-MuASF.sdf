module Optimize-MuASF 

imports MuASF-Equations-Ops

exports

context-free syntax

  %% This is the main function that will call
  %% all optimizations on MuASF1
  optimize-muasf(Module, NameTable) -> MN-struct
  remove-dummy-list-ids(Module)     -> Module

hiddens

context-free syntax

  %% This optimization locates certain recursive functions
  %% over lists, transforms them and adds helper functions.
  %% It is supposed to save time by removing the overhead
  %% of matching and building constructor symbols between
  %% recursive calls.

  optimize-recursive-list-functions(Module, NameTable) -> MN-struct

  %% a lot of helper functions for the recursive-list optimization,
  %% also some structures are needed for keeping intermediate results

sorts Embedding EmbeddingAt FunIdHasEmbeddingAt Rules 

context-free syntax

  "unavailable" -> EmbeddingAt
  "unavailable" -> FunIdHasEmbeddingAt
  "[" FunId* "]" -> Embedding
	Embedding "at" Int -> EmbeddingAt
  FunId "has" EmbeddingAt -> FunIdHasEmbeddingAt

  call-helper-rules(RuleList, FunIdHasEmbeddingAt) -> RuleList
  change-calls-rules(RuleList, FunIdHasEmbeddingAt) -> RuleList
  change-calls-rule(Rule, FunIdHasEmbeddingAt) -> Rule

  make-recursive-funid(FunId) -> FunId
  make-helper-signature(FunIdHasEmbeddingAt, FuncDefList) -> FuncDef
  add-name-to-nametable(FunIdHasEmbeddingAt, NameTable) -> NameTable

  make-helper-rules(RuleList, FunIdHasEmbeddingAt) -> RuleList
  remove-emb-rules(RuleList, FunIdHasEmbeddingAt) -> RuleList
  remove-emb-rule(Rule, FunIdHasEmbeddingAt) -> Rule
  remove-emb-side(Term, FunIdHasEmbeddingAt) -> Term
  remove-emb-terms(TermList, FunIdHasEmbeddingAt) -> TermList
  remove-emb-term(Term, FunIdHasEmbeddingAt) -> Term
  remove-emb-conds(CondList, FunIdHasEmbeddingAt) -> CondList
  remove-emb-cond(Cond, FunIdHasEmbeddingAt) -> Cond
  remove-emb-args(TermList, EmbeddingAt) -> TermList
  remove-emb-arg(Term, Embedding) -> Term

  get-list-embedding(RuleList, NameTable) -> FunIdHasEmbeddingAt
  
  is-recursive(RuleList) -> Bool
  is-recursive(Rule) -> Bool
  term-calls-function(FunId, Term) -> Bool
  terms-call-function(FunId, TermList) -> Bool
  conds-call-function(FunId, CondList) -> Bool
  
  find-list-arg(RuleList, NameTable) -> FunIdHasEmbeddingAt
  find-la-rule(Rule, NameTable) -> FunIdHasEmbeddingAt
  find-la-terms(TermList, NameTable, Int) -> EmbeddingAt
  find-la-term(Term) -> Embedding

  are-constructors(Embedding, NameTable) -> Bool
  is-constructor(FunId, NameTable) -> Bool

  check-emb-term(Term, Embedding) -> Bool
  check-emb-terms(TermList, EmbeddingAt) -> Bool
  check-emb-lhs-rule(Rule, FunIdHasEmbeddingAt) -> Bool
  check-emb-lhs-rules(RuleList, FunIdHasEmbeddingAt) -> Bool

  check-emb-rhs-rule(Rule, FunIdHasEmbeddingAt) -> Bool
  check-emb-rhs-rules(RuleList, FunIdHasEmbeddingAt) -> Bool
  
variables

  "Rule+"[0-9]*    -> {Rule ";"}+
  "FunId"[0-9]*    -> FunId
  "FunId+"[0-9]*   -> FunId+
  "FunId*"[0-9]*   -> FunId*
  "SigArg"[0-9]*   -> SigArg
  "SigArg+"[0-9]*  -> {SigArg ","}+
  "Annotations"[0-9]* -> Annotations
  "Embedding"[0-9]* -> Embedding
  "EmbeddingAt"[0-9]* -> EmbeddingAt
  "FunIdHasEmbeddingAt"[0-9]* -> FunIdHasEmbeddingAt
  "Int"[0-9]*     -> IntCon
  "Char"[0-9]* -> CHAR
  "Char+"[0-9]* -> CHAR+
  "Char*"[0-9]* -> CHAR*
  "Nametable"[0-9]* -> NameTable
  "Namepair*"[0-9]* -> {NamePair ","}*
