%%
%%    Meta-Environment - An environment for language prototyping.
%%    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, The Netherlands. 
%%
%%    This program is free software; you can redistribute it and/or modify
%%    it under the terms of the GNU General Public License as published by
%%    the Free Software Foundation; either version 2 of the License, or
%%    (at your option) any later version.
%%
%%    This program is distributed in the hope that it will be useful,
%%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%%    GNU General Public License for more details.
%%
%%    You should have received a copy of the GNU General Public License
%%    along with this program; if not, write to the Free Software
%%    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
%%
equations
%%\noindent  For the uniform treatment of conditional and unconditional equations,
%% define the list of conditions of an unconditional equation to be the empty list.

   [conds-1] get-cons(T) = ceq-equ ===>  T[conditions] = []

%% Define the well-formedness predicate for conditional equations.
%% Note that there are certain properties for which we do {\em not} test here,
%% e.g., restrictions on variable occurrences.

    [wf-CondEquation-1]
        T[conditions] = Tl
        ======
        holds(wf-CondEquation, T) =
       %% is(CondEquation, T) /\
           eq-asfix-type(asfix-type-of(T[lhs]), asfix-type-of(T[rhs]))
           /\ for-all(wf-Condition, filter(is(Condition), Tl))

    [wf-Condition-1]
        holds(wf-Condition,T) =
        %%is(Condition, T) /\
        eq-asfix-type(asfix-type-of(T[lhs]), asfix-type-of(T[rhs]))
