%%
%%    Meta-Environment - An environment for language prototyping.
%%    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, The Netherlands. 
%%
%%    This program is free software; you can redistribute it and/or modify
%%    it under the terms of the GNU General Public License as published by
%%    the Free Software Foundation; either version 2 of the License, or
%%    (at your option) any later version.
%%
%%    This program is distributed in the hope that it will be useful,
%%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%%    GNU General Public License for more details.
%%
%%    You should have received a copy of the GNU General Public License
%%    along with this program; if not, write to the Free Software
%%    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
%%
%% Define the generic interface for parse trees.
module ParseTrees

imports Grammars
exports
   context-free syntax
      make(AFun, ATermList)                  -> ATerm
      init(AFun)                             -> ATerm
      get-cons(ATerm)                        -> AFun
      get-list-tail-with-sep(ATermList)      -> ATermList
      get-list-tail(ATermList)               -> ATermList
      wmap(ATerm, ATerm)                     -> ATermList
      "fun-wmap"                             -> AFun
      "wid"                                  -> AFun

      is-cons(AFun, ATerm)                   -> Bool
      is(Symbol, ATerm)                      -> Bool
      is(Symbol)                             -> AFun
      cons2lit(AFun)                         -> Literal
      position(AFun,ATermList, Int)          -> NatCon
      named-elem(AFun, ATermList, ATermList) -> ATerm

      %%%ATerm "[" AFun "]"                   -> ATerm

      ATerm "[" {AFun "."}+ "]"               -> ATerm

      %%%ATerm "[" AFun ":=" ATerm "]"       -> ATerm
      ATerm "[" {AFun "."}+ ":=" ATerm "]"   -> ATerm

      ATerm "[<" AFun "]"                    -> ATerm
      ATerm "[<" AFun ":=" ATerm "]"         -> ATerm

      ATerm "[>" AFun "]"                    -> ATerm
      ATerm "[>" AFun ":=" ATerm "]"         -> ATerm

      ATerm "[" {AFun "."}+ "++=" ATermList "]"  -> ATerm
      ATerm "[" {AFun "."}+ "@="  ATerm "]"      -> ATerm
      ATerm "[" {AFun "."}+ "*="  ATerm "]"      -> ATerm
      pp( ATerm )                                -> Literal

variables
      "Tvar" [0-9\']*   -> ATerm

hiddens
   variables
      [ABC][0-9\']*     -> Symbol
      "Lvar" [0-9\']*   -> Literal
      "Svar" [0-9\']*   -> AFun
      "Avar" [0-9\']*   -> ATerm
      "Bvar" [0-9\']*   -> ATerm
      "Iter"            -> Literal
      "Fields" [0-9\']* -> {AFun "."}+
