%%
%%    Meta-Environment - An environment for language prototyping.
%%    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, The Netherlands. 
%%
%%    This program is free software; you can redistribute it and/or modify
%%    it under the terms of the GNU General Public License as published by
%%    the Free Software Foundation; either version 2 of the License, or
%%    (at your option) any later version.
%%
%%    This program is distributed in the hope that it will be useful,
%%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%%    GNU General Public License for more details.
%%
%%    You should have received a copy of the GNU General Public License
%%    along with this program; if not, write to the Free Software
%%    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
%%
equations
%%\noindent Define concatenation of \spec{Symbols}  and \spec{Productions}.

[conc-1] \alpha ++ \beta = \alpha \beta
[conc-2] P*1 ++ P*2 = P*1 P*2

%% The purpose of normalizing a grammar is to give a uniform treatment to both
%% lexical and context-free productions.  This is achieved by taking lexical
%% productions unchanged and by transforming context-free productions such
%% that a \spec{Layout} non-terminal is inserted between each pair of adjacent
%% symbols in the left-hand side of the context-free rule.

%% Normalize a grammar by normalizing its context-free productions.

[normg-1] normg(lexical syntax P*1 context-free syntax P*2) = P*1 ++ normp(P*2)

%% Normalize a production by normalizing the symbols appearing at the left-hand side of the rule.

[normp-1] normp(\alpha -> A Attrs P*) = norm(\alpha) -> A Attrs ++ normp(P*)
[normp-2] normp() =

%% Normalize a sequence of symbols by inserting \spec{Layout} between
%% adjacent symbols.

[norm-1] norm(\alpha+ \beta+) = norm(\alpha+) ++ Layout ++ norm(\beta+)
[norm-2] norm() =
[norm-3] norm(A) = A
