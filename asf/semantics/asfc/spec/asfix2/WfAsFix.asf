%%
%%    Meta-Environment - An environment for language prototyping.
%%    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, The Netherlands. 
%%
%%    This program is free software; you can redistribute it and/or modify
%%    it under the terms of the GNU General Public License as published by
%%    the Free Software Foundation; either version 2 of the License, or
%%    (at your option) any later version.
%%
%%    This program is distributed in the hope that it will be useful,
%%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%%    GNU General Public License for more details.
%%
%%    You should have received a copy of the GNU General Public License
%%    along with this program; if not, write to the Free Software
%%    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
%%
equations

%% \noindent Define an auxiliary funxtion to expand abbreviated productions  with {\tt aprod} as constructor function
%% into a complete production rule (with constructor {\tt prod}).
%% $T_2$ is a list of pairs $T_2$ representing abbreviations.

[es-1] expand-aprod(Tl)(aprod(T)) = get(Tl,aprod(T))

%% Given an Aterm $T_1$ and a list of pairs $T_2$ representing abbreviations, expand all occurrences of
%% abbreviated productions using {\tt aprod} into ones using {\tt prod}.

[exp-1] expand(T, Tl) = replace-afun(aprod, T, expand-aprod(Tl))

[exp-mod-1] expand-module(T)  = expand(T, T[abbrevs][pairs])

[exp-term-1] expand-term(T)  = expand(T, T[abbrevs][pairs])

%% \noindent Define the well-formedness of a single module or term. Note that the module is first
%% expanded before its well-formedness is checked.

 [wf-Module-1]
     expand(T[equations][cond-equations], T[abbrevs][pairs]) = Tl
     ============================================================
     holds(wf-Module,T) =
     %%is(Module, T) /\
        for-all(wf-CondEquation, filter(is(Module), Tl))

%% Define the well-formedness of a named term in an \ASFIX\ specification. Note, again,
%% the expansion of the term before checking its well-formedness.

 [wf-Term-1]
    holds(wf-Term,T) = %%is(Term, T) /\
        holds(wf-AsFixTerm, expand(T[term], T[abbrevs][pairs]))

%% Define the well-formedness of a complete \ASFIX\ representation.
%% Note that there are certain properties for which we do {\em not} test here,
%% e.g., existence of all imported modules.

 [wf-AsFix-1]
   T[modules] = Tl1,
   T[terms] = Tl2
   ===============
   holds(wf-AsFix,T) =
    %%is(AsFix, T) /\
       for-all(wf-Module, filter(is(Module), Tl1)) /\
       for-all(wf-Term, filter(is(Term), Tl2))
