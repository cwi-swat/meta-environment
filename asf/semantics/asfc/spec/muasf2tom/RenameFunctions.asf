equations

[] subst(FunId1, Table) = FunId2
   when FunId2 := lookup(Table, FunId1)

equations

[constant] 
collect(FunId1 {Attribute*1, cons(funid("""c*""")), Attribute*2}, Table) =
store(Table,FunId1,funid(c*))

[function] 
collect(FunId1 (SigArg+) {Attribute*1, cons(funid("""c*""")), Attribute*2}, Table) =
store(Table,FunId1,funid(c*))

equations

[] rename-functions(module ModuleId SignatureOpt RulesOpt) = 
   module ModuleId
     SignatureOpt
     subst(RulesOpt, collect(SignatureOpt, new-table))

tests

[booleans]
rename-functions(
module Booleans 
signature 
  lf_1 { constructor ,type ( "cf(sort(\"BoolCon\"))" ) ,cons ( "true" ) };
  lf_2 ( _ ) { constructor ,type ( "cf(sort(\"Boolean\"))" ) ,cons ( "constant" ) };
  lf_3 ( _ ,_ ) { type ( "cf(sort(\"Boolean\"))" ) ,cons ( "or" ) ,left };
  lf_4 { constructor ,type ( "cf(sort(\"BoolCon\"))" ) ,cons ( "false" ) };
  lf_5 ( _ ,_ ) { type ( "cf(sort(\"Boolean\"))" ) ,cons ( "and" ) ,left };
  lf_6 ( _ ) { type ( "cf(sort(\"Boolean\"))" ) ,cons ( "not" ) } 

rules 
  lf_3 ( lf_2 ( lf_1 ) ,V_Bool ) = lf_2 ( lf_1 );
  lf_3 ( lf_2 ( lf_4 ) ,V_Bool ) = V_Bool;
  lf_5 ( lf_2 ( lf_1 ) ,V_Bool ) = V_Bool;
  lf_5 ( lf_2 ( lf_4 ) ,V_Bool ) = lf_2 ( lf_4 );
  lf_6 ( lf_2 ( lf_4 ) ) = lf_2 ( lf_1 );
  lf_6 ( lf_2 ( lf_1 ) ) = lf_2 ( lf_4 )
) ==
module Booleans
signature 
  lf_1 { constructor ,type ( "cf(sort(\"BoolCon\"))" ) ,cons ( "true" ) };
  lf_2 ( _ ) { constructor ,type ( "cf(sort(\"Boolean\"))" ) ,cons ( "constant" ) };
  lf_3 ( _ ,_ ) { type ( "cf(sort(\"Boolean\"))" ) ,cons ( "or" ) ,left };
  lf_4 { constructor ,type ( "cf(sort(\"BoolCon\"))" ) ,cons ( "false" ) };
  lf_5 ( _ ,_ ) { type ( "cf(sort(\"Boolean\"))" ) ,cons ( "and" ) ,left };
  lf_6 ( _ ) { type ( "cf(sort(\"Boolean\"))" ) ,cons ( "not" ) }
rules 
  or ( constant ( true ) ,V_Bool ) = constant ( true );
  or ( constant ( false ) ,V_Bool ) = V_Bool;
  and ( constant ( true ) ,V_Bool ) = V_Bool;
  and ( constant ( false ) ,V_Bool ) = constant ( false );
  not ( constant ( false ) ) = constant ( true );
  not ( constant ( true ) ) = constant ( false )
