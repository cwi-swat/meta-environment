  definition
  
  module Basic-Integers

  imports IntCon
  exports
    sorts Int
    context-free syntax
      IntCon                 -> Int    {cons("con")}
      con(int-arg:Int)       -> IntCon {cons("con")}
      abs(int-arg:Int)       -> NatCon {cons("abs")}
      lhs:Int "+" rhs:Int    -> Int {left, cons("plus")}

  module IntCon

  imports Layout
  exports
    sorts NatCon IntCon
    lexical syntax
      [0-9]+             -> NatCon
    context-free syntax
      NatCon             -> IntCon {cons("nat")}
      "+" nat-arg:NatCon -> IntCon {cons("pos")}
      "-" nat-arg:NatCon -> IntCon {cons("neg")}
   
  module Layout

  exports
    lexical syntax
      [\ \t\n]         -> LAYOUT
      "%%" ~[\n]* "\n" -> LAYOUT
      "%" ~[\%\n]+ "%" -> LAYOUT

    context-free restrictions
      LAYOUT? -/- [\ \t\n\%]

  module MuASF

  imports MuLiterals Basic-Integers

  exports
    sorts Var Term TermList
    context-free syntax
      VarId                           -> Var  {cons("normal")}
      Var                             -> Term {cons("var")}
      FunId                           -> Term {cons("constant")}
      Int                             -> Term {cons("int")}
      FunId "(" args:{Term ","}+ ")"  -> Term {cons("func")}

      elems:{Term ","}*               -> TermList 

    context-free syntax
      "term":Term ":" "type":Term     -> Term {assoc,cons("typed")}

    sorts Annotations FuncDef FuncDefList SigArg SigArgList
    context-free syntax
      "_"                               -> SigArg {cons("normal")}

      FunId                             -> FuncDef {cons("constant-no-annos")}
      FunId annos:Annotations           -> FuncDef {cons("constant-with-annos")}
      FunId "(" elems:{SigArg ","}+ ")" -> FuncDef {cons("func-no-annos")}
      FunId "(" elems:{SigArg ","}+ ")" annos:Annotations 
                                        -> FuncDef {cons("func-with-annos")}

      "{" terms:{Term ","}+ "}"         -> Annotations

      elems:{SigArg ","}+  -> SigArgList 
      elems:{FuncDef ";"}* -> FuncDefList

    sorts Rule RuleList Cond CondList
    context-free syntax
      lhs:Term "=" rhs:Term -> Rule {cons("no-conds")}

      elems:{Rule ";"}*     -> RuleList

  exports
    context-free syntax
      "default:" lhs:Term "=" rhs:Term   -> Rule {cons("default-no-conds")}
      "default:" conds:CondList implies:"==>" lhs:Term "=" rhs:Term 
                                         -> Rule {cons("default-with-conds")}
  exports
    context-free syntax
      "_" "*" -> SigArg {cons("star")}
      "_" "+" -> SigArg {cons("plus")}

    context-free syntax
      "*" VarId -> Var {cons("star")}
      "+" VarId -> Var {cons("plus")}

  exports
    context-free syntax
      conds:CondList implies:"==>" lhs:Term "=" rhs:Term -> Rule {cons("with-conds")}
      elems:{Cond "&"}*              -> CondList

  exports
    context-free syntax
      lhs:Term assign:"=:" rhs:Term  -> Cond {cons("assign")}

  exports
    context-free syntax
      lhs:Term equal:"==" rhs:Term   -> Cond {cons("equal")}
      lhs:Term unequal:"!=" rhs:Term -> Cond {cons("unequal")}

    sorts Module RulesOpt SignatureOpt
    context-free syntax
			               -> SignatureOpt {cons("absent")}
      "signature" funcdefs:FuncDefList -> SignatureOpt {cons("present")}
				       -> RulesOpt     {cons("absent")}
      "rules" rules:RuleList           -> RulesOpt     {cons("present")}

      "module" id:ModId signature:SignatureOpt rules:RulesOpt -> Module {cons("module")}


  module MuLiterals

  imports Layout

  exports
    sorts FunId ModId VarId PropId
    lexical syntax
    "\\" ~[]              -> EscChar {cons("default")} 
    "\\" [01] [0-7] [0-7] -> EscChar {cons("oct0_177")}

    ~ [\000-\037\"\\]       -> QChar   {cons("printable")}
    char:EscChar            -> QChar   {cons("escaped")}

    [a-z][\-\_A-Za-z0-9\']* -> FunId {cons("unquoted")} %% avoid
    "\"" chars:QChar* "\""  -> FunId {cons("quoted")}
    [\'][\!\\-\~]           -> FunId {cons("single-quote")}
    [\\][0-2][0-9][0-9]     -> FunId {cons("decimal")}

    [A-Z][a-zA-Z0-9\'\_\-]* -> VarId {avoid, cons("default")}

    [A-Z][a-zA-Z0-9\.\-]*   -> ModId {avoid, cons("default")}

   [a-z][a-z\-]*           -> PropId {avoid, cons("default")}

