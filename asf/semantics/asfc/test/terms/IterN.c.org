/* This C code is generated by the asf compiler version 2.1 */

#include  "asc-support-me.h"
static Symbol lf_1sym ;
static ATerm lf_1 ( ATerm arg1 , ATerm arg2 ) ;
static Symbol lf_list_2sym ;
static ATerm lf_list_2 ( ATerm arg1 ) ;
static Symbol lf_3sym ;
static ATerm lf_3 ( ATerm arg1 , ATerm arg2 ) ;
static Symbol lf_4sym ;
static ATerm lf_4 ( ATerm arg1 , ATerm arg2 ) ;
static Symbol lf_5sym ;
static ATerm lf_5 ( ATerm arg1 , ATerm arg2 ) ;
static Symbol lf_6sym ;
static ATerm lf_6 ( ATerm arg1 , ATerm arg2 ) ;
void register_IterN ( ) {
lf_1sym = ATmakeSymbol ( "prod([lit(\"insert\"),cf(opt(layout)),lit(\"(\"),cf(opt(layout)),cf(sort(\"LeesPlank\")),cf(opt(layout)),lit(\",\"),cf(opt(layout)),cf(iter-sep-n(sort(\"LeesPlank\"),lit(\";\"),4)),cf(opt(layout)),lit(\")\")],cf(iter-sep-n(sort(\"LeesPlank\"),lit(\";\"),4)),attrs([id(\"IterN\")]))"
 , 2 , ATtrue ) ;
ATprotectSymbol ( lf_1sym ) ;
lf_list_2sym = ATmakeSymbol ( "list(cf(iter-sep(sort(\"LeesPlank\"),lit(\";\"))))" , 1 , ATtrue ) ;
ATprotectSymbol ( lf_list_2sym ) ;
lf_3sym = ATmakeSymbol ( "prod([cf(sort(\"LeesPlank\")),cf(opt(layout)),lit(\";\"),cf(opt(layout)),cf(iter-sep(sort(\"LeesPlank\"),lit(\";\")))],cf(iter-sep-n(sort(\"LeesPlank\"),lit(\";\"),2)),no-attrs)" , 2 , ATtrue ) ;
ATprotectSymbol ( lf_3sym ) ;
lf_4sym = ATmakeSymbol ( "prod([cf(sort(\"LeesPlank\")),cf(opt(layout)),lit(\";\"),cf(opt(layout)),cf(iter-sep-n(sort(\"LeesPlank\"),lit(\";\"),2))],cf(iter-sep-n(sort(\"LeesPlank\"),lit(\";\"),3)),no-attrs)" , 2 , ATtrue ) ;
ATprotectSymbol ( lf_4sym ) ;
lf_5sym = ATmakeSymbol ( "prod([cf(sort(\"LeesPlank\")),cf(opt(layout)),lit(\";\"),cf(opt(layout)),cf(iter-sep-n(sort(\"LeesPlank\"),lit(\";\"),3))],cf(iter-sep-n(sort(\"LeesPlank\"),lit(\";\"),4)),no-attrs)" , 2 , ATtrue ) ;
ATprotectSymbol ( lf_5sym ) ;
lf_6sym = ATmakeSymbol ( "prod([lit(\"concat\"),cf(opt(layout)),lit(\"(\"),cf(opt(layout)),cf(iter-sep-n(sort(\"LeesPlank\"),lit(\";\"),4)),cf(opt(layout)),lit(\",\"),cf(opt(layout)),cf(iter-sep-n(sort(\"LeesPlank\"),lit(\";\"),4)),cf(opt(layout)),lit(\")\")],cf(iter-sep-n(sort(\"LeesPlank\"),lit(\";\"),4)),attrs([id(\"IterN\")]))" , 2 , ATtrue ) ;
ATprotectSymbol ( lf_6sym ) ;
register_prod ( ATparse ( "prod([lit(\"insert\"),cf(opt(layout)),lit(\"(\"),cf(opt(layout)),cf(sort(\"LeesPlank\")),cf(opt(layout)),lit(\",\"),cf(opt(layout)),cf(iter-sep-n(sort(\"LeesPlank\"),lit(\";\"),4)),cf(opt(layout)),lit(\")\")],cf(iter-sep-n(sort(\"LeesPlank\"),lit(\";\"),4)),attrs([id(\"IterN\")]))" ) , lf_1 , lf_1sym ) ;
register_prod ( ATparse ( "list(cf(iter-sep(sort(\"LeesPlank\"),lit(\";\"))))" ) , lf_list_2 , lf_list_2sym ) ;
register_prod ( ATparse ( "prod([cf(sort(\"LeesPlank\")),cf(opt(layout)),lit(\";\"),cf(opt(layout)),cf(iter-sep(sort(\"LeesPlank\"),lit(\";\")))],cf(iter-sep-n(sort(\"LeesPlank\"),lit(\";\"),2)),no-attrs)" ) , lf_3 , lf_3sym ) ;
register_prod ( ATparse ( "prod([cf(sort(\"LeesPlank\")),cf(opt(layout)),lit(\";\"),cf(opt(layout)),cf(iter-sep-n(sort(\"LeesPlank\"),lit(\";\"),2))],cf(iter-sep-n(sort(\"LeesPlank\"),lit(\";\"),3)),no-attrs)" ) , lf_4 , lf_4sym ) ;
register_prod ( ATparse ( "prod([cf(sort(\"LeesPlank\")),cf(opt(layout)),lit(\";\"),cf(opt(layout)),cf(iter-sep-n(sort(\"LeesPlank\"),lit(\";\"),3))],cf(iter-sep-n(sort(\"LeesPlank\"),lit(\";\"),4)),no-attrs)" ) , lf_5 , lf_5sym ) ;
register_prod ( ATparse ( "prod([lit(\"concat\"),cf(opt(layout)),lit(\"(\"),cf(opt(layout)),cf(iter-sep-n(sort(\"LeesPlank\"),lit(\";\"),4)),cf(opt(layout)),lit(\",\"),cf(opt(layout)),cf(iter-sep-n(sort(\"LeesPlank\"),lit(\";\"),4)),cf(opt(layout)),lit(\")\")],cf(iter-sep-n(sort(\"LeesPlank\"),lit(\";\"),4)),attrs([id(\"IterN\")]))" ) , lf_6 , lf_6sym ) ;
}
void resolve_IterN ( ) {
}
void init_IterN ( ) {
}
ATerm lf_1 ( ATerm arg0 , ATerm arg1 ) {
{
ATerm tmp [ 9 ] ;
FUNC_ENTRY ( lf_1sym , ATmakeAppl ( lf_1sym , arg0 , arg1 ) ) ;
if ( check_sym ( arg1 , lf_5sym ) ) {
( tmp [ 0 ] = arg_0 ( arg1 ) ) ;
( tmp [ 1 ] = arg_1 ( arg1 ) ) ;
if ( check_sym ( tmp [ 1 ] , lf_4sym ) ) {
( tmp [ 2 ] = arg_0 ( tmp [ 1 ] ) ) ;
( tmp [ 3 ] = arg_1 ( tmp [ 1 ] ) ) ;
if ( check_sym ( tmp [ 3 ] , lf_3sym ) ) {
( tmp [ 4 ] = arg_0 ( tmp [ 3 ] ) ) ;
( tmp [ 5 ] = arg_1 ( tmp [ 3 ] ) ) ;
if ( check_sym ( tmp [ 5 ] , lf_list_2sym ) ) {
( tmp [ 6 ] = arg_0 ( tmp [ 5 ] ) ) ;
if ( not_empty_list ( tmp [ 6 ] ) ) {
( tmp [ 7 ] = list_head ( tmp [ 6 ] ) ) ;
( tmp [ 8 ] = list_tail ( tmp [ 6 ] ) ) ;
FUNC_EXIT ( make_nf2 ( lf_5sym , arg0 , make_nf2 ( lf_4sym , tmp [ 0 ] , make_nf2 ( lf_3sym , tmp [ 2 ] , make_nf1 ( lf_list_2sym , cons ( make_list ( tmp [ 4 ] ) , cons ( make_list ( tmp [ 7 ] ) , make_list ( tmp [ 8 ] ) ) ) ) ) ) ) ) ;
}
}
}
}
}
FUNC_EXIT ( make_nf2 ( lf_1sym , arg0 , arg1 ) ) ;
}
}
ATerm lf_6 ( ATerm arg0 , ATerm arg1 ) {
{
ATerm tmp [ 18 ] ;
FUNC_ENTRY ( lf_6sym , ATmakeAppl ( lf_6sym , arg0 , arg1 ) ) ;
if ( check_sym ( arg0 , lf_5sym ) ) {
( tmp [ 0 ] = arg_0 ( arg0 ) ) ;
( tmp [ 1 ] = arg_1 ( arg0 ) ) ;
if ( check_sym ( tmp [ 1 ] , lf_4sym ) ) {
( tmp [ 2 ] = arg_0 ( tmp [ 1 ] ) ) ;
( tmp [ 3 ] = arg_1 ( tmp [ 1 ] ) ) ;
if ( check_sym ( tmp [ 3 ] , lf_3sym ) ) {
( tmp [ 4 ] = arg_0 ( tmp [ 3 ] ) ) ;
( tmp [ 5 ] = arg_1 ( tmp [ 3 ] ) ) ;
if ( check_sym ( tmp [ 5 ] , lf_list_2sym ) ) {
( tmp [ 6 ] = arg_0 ( tmp [ 5 ] ) ) ;
if ( not_empty_list ( tmp [ 6 ] ) ) {
( tmp [ 7 ] = list_head ( tmp [ 6 ] ) ) ;
( tmp [ 8 ] = list_tail ( tmp [ 6 ] ) ) ;
if ( check_sym ( arg1 , lf_5sym ) ) {
( tmp [ 9 ] = arg_0 ( arg1 ) ) ;
( tmp [ 10 ] = arg_1 ( arg1 ) ) ;
if ( check_sym ( tmp [ 10 ] , lf_4sym ) ) {
( tmp [ 11 ] = arg_0 ( tmp [ 10 ] ) ) ;
( tmp [ 12 ] = arg_1 ( tmp [ 10 ] ) ) ;
if ( check_sym ( tmp [ 12 ] , lf_3sym ) ) {
( tmp [ 13 ] = arg_0 ( tmp [ 12 ] ) ) ;
( tmp [ 14 ] = arg_1 ( tmp [ 12 ] ) ) ;
if ( check_sym ( tmp [ 14 ] , lf_list_2sym ) ) {
( tmp [ 15 ] = arg_0 ( tmp [ 14 ] ) ) ;
if ( not_empty_list ( tmp [ 15 ] ) ) {
( tmp [ 16 ] = list_head ( tmp [ 15 ] ) ) ;
( tmp [ 17 ] = list_tail ( tmp [ 15 ] ) ) ;
FUNC_EXIT ( make_nf2 ( lf_5sym , tmp [ 0 ] , make_nf2 ( lf_4sym , tmp [ 2 ] , make_nf2 ( lf_3sym , tmp [ 4 ] , make_nf1 ( lf_list_2sym , cons ( make_list ( tmp [ 7 ] ) , cons ( make_list ( tmp [ 8 ] ) , cons ( make_list ( tmp [ 9 ] ) , cons ( make_list ( tmp [ 11 ] ) , cons ( make_list ( tmp [ 13 ] ) , cons ( make_list ( tmp [ 16 ] ) , make_list ( tmp [ 17 ] ) ) ) ) ) ) ) ) ) ) ) ) ;
}
}
}
}
}
}
}
}
}
}
FUNC_EXIT ( make_nf2 ( lf_6sym , arg0 , arg1 ) ) ;
}
}
ATerm lf_5 ( ATerm arg0 , ATerm arg1 ) {
CONS_ENTRY ( lf_5sym , ATmakeAppl ( lf_5sym , arg0 , arg1 ) ) ;
CONS_EXIT ( make_nf2 ( lf_5sym , arg0 , arg1 ) ) ;
}
ATerm lf_4 ( ATerm arg0 , ATerm arg1 ) {
CONS_ENTRY ( lf_4sym , ATmakeAppl ( lf_4sym , arg0 , arg1 ) ) ;
CONS_EXIT ( make_nf2 ( lf_4sym , arg0 , arg1 ) ) ;
}
ATerm lf_3 ( ATerm arg0 , ATerm arg1 ) {
CONS_ENTRY ( lf_3sym , ATmakeAppl ( lf_3sym , arg0 , arg1 ) ) ;
CONS_EXIT ( make_nf2 ( lf_3sym , arg0 , arg1 ) ) ;
}
ATerm lf_list_2 ( ATerm arg0 ) {
CONS_ENTRY ( lf_list_2sym , ATmakeAppl ( lf_list_2sym , arg0 ) ) ;
CONS_EXIT ( make_nf1 ( lf_list_2sym , arg0 ) ) ;
}
#ifdef ASF_MAIN                                           
int main(int argc, char *argv[])                         
{                                                        
  return asc_support_main(argc, argv,                    
                          register_IterN,                   
                          resolve_IterN,                    
                          init_IterN);                      
}                                                        
#endif                                                   

