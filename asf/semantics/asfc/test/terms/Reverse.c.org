/* This C code is generated by the AsfSdfCompiler version 1.3 */

#include  "asc-support.h"
static Symbol lf_AUX_Set2_1_recursivesym ;
static ATerm lf_AUX_Set2_1_recursive ( ATerm arg1 ) ;
static Symbol lf_AUX_Set2_1sym ;
static ATerm lf_AUX_Set2_1 ( ATerm arg1 ) ;
static Symbol ef1sym ;
static funcptr ef1 ;
static Symbol lf2sym ;
static ATerm lf2 ( ATerm arg1 ) ;
void register_AUX_Set2 ( ) {
lf_AUX_Set2_1_recursivesym = ATmakeSymbol ( "prod(id(\"Set\"),w(\"\"),[ql(\"reverse\"),w(\"\"),sort(\"S\")],w(\"\"),l(\"->\"),w(\"\"),sort(\"S\"),w(\"\"),no-attrs)"
 , 1 , ATtrue ) ;
ATprotectSymbol ( lf_AUX_Set2_1_recursivesym ) ;
lf_AUX_Set2_1sym = ATmakeSymbol ( "prod(id(\"Set\"),w(\"\"),[ql(\"reverse\"),w(\"\"),sort(\"S\")],w(\"\"),l(\"->\"),w(\"\"),sort(\"S\"),w(\"\"),no-attrs)" , 1 , ATtrue ) ;
ATprotectSymbol ( lf_AUX_Set2_1sym ) ;
lf2sym = ATmakeSymbol ( "listtype(sort(\"E\"))" , 1 , ATtrue ) ;
ATprotectSymbol ( lf2sym ) ;
register_prod ( ATparse ( "prod(id(\"Set\"),w(\"\"),[ql(\"reverse\"),w(\"\"),sort(\"S\")],w(\"\"),l(\"->\"),w(\"\"),sort(\"S\"),w(\"\"),no-attrs)" ) , lf_AUX_Set2_1 , lf_AUX_Set2_1sym ) ;
register_prod ( ATparse ( "prod(id(\"Set\"),w(\"\"),[ql(\"reverse\"),w(\"\"),sort(\"S\")],w(\"\"),l(\"->\"),w(\"\"),sort(\"S\"),w(\"\"),no-attrs)" ) , lf_AUX_Set2_1_recursive , lf_AUX_Set2_1_recursivesym ) ;
register_prod ( ATparse ( "listtype(sort(\"E\"))" ) , lf2 , lf2sym ) ;
}
void resolve_AUX_Set2 ( ) {
ef1 = lookup_func ( ATreadFromString ( "prod(id(\"Set\"),w(\"\"),[ql(\"[\"),w(\"\"),iter(sort(\"E\"),w(\"\"),l(\"*\")),w(\"\"),ql(\"]\")],w(\"\"),l(\"->\"),w(\"\"),sort(\"S\"),w(\"\"),attrs(l(\"{\"),w(\"\"),[l(\"constructor\")],w(\"\"),l(\"}\")))" ) ) ;
ef1sym = lookup_sym ( ATreadFromString ( "prod(id(\"Set\"),w(\"\"),[ql(\"[\"),w(\"\"),iter(sort(\"E\"),w(\"\"),l(\"*\")),w(\"\"),ql(\"]\")],w(\"\"),l(\"->\"),w(\"\"),sort(\"S\"),w(\"\"),attrs(l(\"{\"),w(\"\"),[l(\"constructor\")],w(\"\"),l(\"}\")))" ) ) ;
}
void init_AUX_Set2 ( ) {
}
ATerm lf_AUX_Set2_1 ( ATerm arg0 ) {
{
ATerm tmp [ 7 ] ;
FUNC_ENTRY ( lf_AUX_Set2_1sym , ATmakeAppl ( lf_AUX_Set2_1sym , arg0 ) ) ;
if ( check_sym ( arg0 , ef1sym ) ) {
{
ATerm atmp00 = arg_0 ( arg0 ) ;
if ( check_sym ( atmp00 , lf2sym ) ) {
{
ATerm atmp000 = arg_0 ( atmp00 ) ;
if ( not_empty_list ( atmp000 ) ) {
( tmp [ 0 ] = list_head ( atmp000 ) ) ;
( tmp [ 1 ] = list_tail ( atmp000 ) ) ;
if ( not_empty_list ( tmp [ 1 ] ) ) {
( tmp [ 2 ] = list_head ( tmp [ 1 ] ) ) ;
( tmp [ 3 ] = list_tail ( tmp [ 1 ] ) ) ;
( tmp [ 4 ] = lf_AUX_Set2_1_recursive ( cons ( make_list ( tmp [ 2 ] ) , make_list ( tmp [ 3 ] ) ) ) ) ;
( tmp [ 5 ] = arg_0 ( tmp [ 4 ] ) ) ;
( tmp [ 6 ] = arg_0 ( tmp [ 5 ] ) ) ;
FUNC_EXIT ( make_nf1 ( ef1sym , lf2 ( cons ( make_list ( tmp [ 6 ] ) , make_list ( tmp [ 0 ] ) ) ) ) ) ;
}
}
}
}
}
}
if ( check_sym ( arg0 , ef1sym ) ) {
{
ATerm atmp00 = arg_0 ( arg0 ) ;
if ( check_sym ( atmp00 , lf2sym ) ) {
{
ATerm atmp000 = arg_0 ( atmp00 ) ;
if ( is_single_element ( atmp000 ) ) {
( tmp [ 0 ] = list_head ( atmp000 ) ) ;
FUNC_EXIT ( make_nf1 ( ef1sym , lf2 ( make_list ( tmp [ 0 ] ) ) ) ) ;
}
}
}
}
}
FUNC_EXIT ( make_nf1 ( lf_AUX_Set2_1sym , arg0 ) ) ;
}
}
ATerm lf_AUX_Set2_1_recursive ( ATerm arg0 ) {
{
ATerm tmp [ 7 ] ;
FUNC_ENTRY ( lf_AUX_Set2_1_recursivesym , ATmakeAppl ( lf_AUX_Set2_1_recursivesym , arg0 ) ) ;
{
ATerm atmp00 = arg0 ;
{
ATerm atmp000 = atmp00 ;
if ( not_empty_list ( atmp000 ) ) {
( tmp [ 0 ] = list_head ( atmp000 ) ) ;
( tmp [ 1 ] = list_tail ( atmp000 ) ) ;
if ( not_empty_list ( tmp [ 1 ] ) ) {
( tmp [ 2 ] = list_head ( tmp [ 1 ] ) ) ;
( tmp [ 3 ] = list_tail ( tmp [ 1 ] ) ) ;
( tmp [ 4 ] = lf_AUX_Set2_1_recursive ( cons ( make_list ( tmp [ 2 ] ) , make_list ( tmp [ 3 ] ) ) ) ) ;
( tmp [ 5 ] = arg_0 ( tmp [ 4 ] ) ) ;
( tmp [ 6 ] = arg_0 ( tmp [ 5 ] ) ) ;
FUNC_EXIT ( make_nf1 ( ef1sym , lf2 ( cons ( make_list ( tmp [ 6 ] ) , make_list ( tmp [ 0 ] ) ) ) ) ) ;
}
}
}
}
{
ATerm atmp00 = arg0 ;
{
ATerm atmp000 = atmp00 ;
if ( is_single_element ( atmp000 ) ) {
( tmp [ 0 ] = list_head ( atmp000 ) ) ;
FUNC_EXIT ( make_nf1 ( ef1sym , lf2 ( make_list ( tmp [ 0 ] ) ) ) ) ;
}
}
}
FUNC_EXIT ( make_nf1 ( lf_AUX_Set2_1_recursivesym , ( * ef1 ) ( lf2 ( arg0 ) ) ) ) ;
}
}
ATerm lf2 ( ATerm arg0 ) {
CONS_ENTRY ( lf2sym , ATmakeAppl ( lf2sym , arg0 ) ) ;
CONS_EXIT ( make_nf1 ( lf2sym , arg0 ) ) ;
}

