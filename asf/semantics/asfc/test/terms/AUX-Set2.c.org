
    Meta-Environment - An environment for language prototyping.
    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, The Netherlands. 

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

/* This C code is generated by the AsfSdfCompiler version 0.1 */

#include  "asc-support.h"
static Symbol lf_AUX_Set2_2sym ;
static ATerm lf_AUX_Set2_2 ( ATerm arg1 ) ;
static Symbol lf_AUX_Set2_1sym ;
static ATerm lf_AUX_Set2_1 ( ATerm arg1 ) ;
void register_AUX_Set2 ( ) {
lf_AUX_Set2_2sym = ATmakeSymbol ( "prod(id(\"Set\"),w(\"\"),[ql(\"{\"),w(\"\"),iter-sep(l(\"{\"),w(\"\"),sort(\"ELEM\"),w(\"\"),ql(\",\"),w(\"\"),l(\"}\"),w(\"\"),l(\"*\")),w(\"\"),ql(\"}\")],w(\"\"),l(\"->\"),w(\"\"),sort(\"SET\"),w(\"\"),no-attrs)"
 , 1 , ATtrue ) ;
ATprotectSymbol ( lf_AUX_Set2_2sym ) ;
lf_AUX_Set2_1sym = ATmakeSymbol ( "listtype(sort(\"ELEM\"),ql(\",\"))" , 1 , ATtrue ) ;
ATprotectSymbol ( lf_AUX_Set2_1sym ) ;
register_prod ( ATparse ( "listtype(sort(\"ELEM\"),ql(\",\"))" ) , lf_AUX_Set2_1 , lf_AUX_Set2_1sym ) ;
register_prod ( ATparse ( "prod(id(\"Set\"),w(\"\"),[ql(\"{\"),w(\"\"),iter-sep(l(\"{\"),w(\"\"),sort(\"ELEM\"),w(\"\"),ql(\",\"),w(\"\"),l(\"}\"),w(\"\"),l(\"*\")),w(\"\"),ql(\"}\")],w(\"\"),l(\"->\"),w(\"\"),sort(\"SET\"),w(\"\"),no-attrs)" ) , lf_AUX_Set2_2 , lf_AUX_Set2_2sym ) ;
}
void resolve_AUX_Set2 ( ) {
}
void init_AUX_Set2 ( ) {
}
ATerm lf_AUX_Set2_2 ( ATerm arg0 ) {
{
ATerm tmp [ 6 ] ;
FUNC_ENTRY ( lf_AUX_Set2_2sym , ATmakeAppl ( lf_AUX_Set2_2sym , arg0 ) ) ;
if ( check_sym ( arg0 , lf_AUX_Set2_1sym ) ) {
( tmp [ 0 ] = arg_0 ( arg0 ) ) ;
{
ATerm atmp001110 ;
ATerm atmp00110 [ 2 ] ;
ATerm atmp0010 ;
ATerm atmp000 [ 2 ] ;
( atmp000 [ 0 ] = tmp [ 0 ] ) ;
( atmp000 [ 1 ] = tmp [ 0 ] ) ;
while ( not_empty_list ( tmp [ 0 ] ) ) {
( atmp0010 = list_head ( tmp [ 0 ] ) ) ;
( tmp [ 0 ] = list_tail ( tmp [ 0 ] ) ) ;
( atmp00110 [ 0 ] = tmp [ 0 ] ) ;
( atmp00110 [ 1 ] = tmp [ 0 ] ) ;
while ( not_empty_list ( tmp [ 0 ] ) ) {
( atmp001110 = list_head ( tmp [ 0 ] ) ) ;
( tmp [ 0 ] = list_tail ( tmp [ 0 ] ) ) ;
if ( term_equal ( atmp0010 , atmp001110 ) ) {
( tmp [ 1 ] = lf_AUX_Set2_2 ( lf_AUX_Set2_1 ( cons ( make_list ( atmp0010 ) , tmp [ 0 ] ) ) ) ) ;
if ( check_sym ( tmp [ 1 ] , lf_AUX_Set2_2sym ) ) {
( tmp [ 2 ] = arg_0 ( tmp [ 1 ] ) ) ;
if ( check_sym ( tmp [ 2 ] , lf_AUX_Set2_1sym ) ) {
( tmp [ 3 ] = arg_0 ( tmp [ 2 ] ) ) ;
if ( not_empty_list ( tmp [ 3 ] ) ) {
( tmp [ 4 ] = list_head ( tmp [ 3 ] ) ) ;
( tmp [ 3 ] = list_tail ( tmp [ 3 ] ) ) ;
( tmp [ 5 ] = lf_AUX_Set2_2 ( lf_AUX_Set2_1 ( cons ( slice ( atmp000 [ 0 ] , atmp000 [ 1 ] ) , cons ( make_list ( tmp [ 4 ] ) , cons ( slice ( atmp00110 [ 0 ] , atmp00110 [ 1 ] ) , tmp [ 3 ] ) ) ) ) ) ) ;
FUNC_EXIT ( tmp [ 5 ] ) ;
}
}
}
}
( atmp00110 [ 1 ] = list_tail ( atmp00110 [ 1 ] ) ) ;
( tmp [ 0 ] = atmp00110 [ 1 ] ) ;
}
( atmp000 [ 1 ] = list_tail ( atmp000 [ 1 ] ) ) ;
( tmp [ 0 ] = atmp000 [ 1 ] ) ;
}
}
}
FUNC_EXIT ( make_nf1 ( lf_AUX_Set2_2sym , arg0 ) ) ;
}
}
ATerm lf_AUX_Set2_1 ( ATerm arg0 ) {
CONS_ENTRY ( lf_AUX_Set2_1sym , ATmakeAppl ( lf_AUX_Set2_1sym , arg0 ) ) ;
CONS_EXIT ( make_nf1 ( lf_AUX_Set2_1sym , arg0 ) ) ;
}

