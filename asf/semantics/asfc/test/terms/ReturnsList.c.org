/* This C code is generated by the asf compiler version 2.0 */

#include  "asc-support-me.h"
static Symbol lf_4_recursivesym ;
static ATerm lf_4_recursive ( ATerm arg1 ) ;
static Symbol lf_list_1sym ;
static ATerm lf_list_1 ( ATerm arg1 ) ;
static Symbol lf_2sym ;
static ATerm lf_2 ( ATerm arg1 ) ;
static Symbol lf_list_3sym ;
static ATerm lf_list_3 ( ATerm arg1 ) ;
static Symbol lf_4sym ;
static ATerm lf_4 ( ATerm arg1 ) ;
void register_ReturnsList ( ) {
lf_4_recursivesym = ATmakeSymbol ( "prod([lit(\"f\"),cf(opt(layout)),lit(\"(\"),cf(opt(layout)),cf(iter-star-sep(sort(\"B\"),lit(\";\"))),cf(opt(layout)),lit(\")\")],cf(iter-star-sep(sort(\"B\"),lit(\";\"))),attrs([id(\"ReturnsList\")]))"
 , 1 , ATtrue ) ;
ATprotectSymbol ( lf_4_recursivesym ) ;
lf_list_1sym = ATmakeSymbol ( "list(iter-star(char-class([range(0,255)])))" , 1 , ATtrue ) ;
ATprotectSymbol ( lf_list_1sym ) ;
lf_2sym = ATmakeSymbol ( "prod([lex(sort(\"B\"))],cf(sort(\"B\")),no-attrs)" , 1 , ATtrue ) ;
ATprotectSymbol ( lf_2sym ) ;
lf_list_3sym = ATmakeSymbol ( "list(cf(iter-star-sep(sort(\"B\"),lit(\";\"))))" , 1 , ATtrue ) ;
ATprotectSymbol ( lf_list_3sym ) ;
lf_4sym = ATmakeSymbol ( "prod([lit(\"f\"),cf(opt(layout)),lit(\"(\"),cf(opt(layout)),cf(iter-star-sep(sort(\"B\"),lit(\";\"))),cf(opt(layout)),lit(\")\")],cf(iter-star-sep(sort(\"B\"),lit(\";\"))),attrs([id(\"ReturnsList\")]))" , 1 , ATtrue ) ;
ATprotectSymbol ( lf_4sym ) ;
register_prod ( ATparse ( "list(iter-star(char-class([range(0,255)])))" ) , lf_list_1 , lf_list_1sym ) ;
register_prod ( ATparse ( "prod([lex(sort(\"B\"))],cf(sort(\"B\")),no-attrs)" ) , lf_2 , lf_2sym ) ;
register_prod ( ATparse ( "list(cf(iter-star-sep(sort(\"B\"),lit(\";\"))))" ) , lf_list_3 , lf_list_3sym ) ;
register_prod ( ATparse ( "prod([lit(\"f\"),cf(opt(layout)),lit(\"(\"),cf(opt(layout)),cf(iter-star-sep(sort(\"B\"),lit(\";\"))),cf(opt(layout)),lit(\")\")],cf(iter-star-sep(sort(\"B\"),lit(\";\"))),attrs([id(\"ReturnsList\")]))" ) , lf_4 , lf_4sym ) ;
register_prod ( ATparse ( "prod([lit(\"f\"),cf(opt(layout)),lit(\"(\"),cf(opt(layout)),cf(iter-star-sep(sort(\"B\"),lit(\";\"))),cf(opt(layout)),lit(\")\")],cf(iter-star-sep(sort(\"B\"),lit(\";\"))),attrs([id(\"ReturnsList\")]))" ) , lf_4_recursive , lf_4_recursivesym ) ;
}
void resolve_ReturnsList ( ) {
}
static ATerm constant0 = NULL ;
void init_ReturnsList ( ) {
ATprotect ( & constant0 ) ;
}
ATerm lf_4 ( ATerm arg0 ) {
{
ATerm tmp [ 7 ] ;
FUNC_ENTRY ( lf_4sym , ATmakeAppl ( lf_4sym , arg0 ) ) ;
if ( check_sym ( arg0 , lf_list_3sym ) ) {
{
ATerm atmp00 = arg_0 ( arg0 ) ;
if ( not_empty_list ( atmp00 ) ) {
( tmp [ 0 ] = list_head ( atmp00 ) ) ;
{
( tmp [ 1 ] = list_tail ( atmp00 ) ) ;
{
if ( check_sym ( tmp [ 0 ] , lf_2sym ) ) {
( tmp [ 2 ] = arg_0 ( tmp [ 0 ] ) ) ;
if ( check_sym ( tmp [ 2 ] , lf_list_1sym ) ) {
( tmp [ 3 ] = arg_0 ( tmp [ 2 ] ) ) ;
if ( not_empty_list ( tmp [ 3 ] ) ) {
if ( term_equal ( list_head ( tmp [ 3 ] ) , make_char ( 116 ) ) ) {
( tmp [ 4 ] = list_tail ( tmp [ 3 ] ) ) ;
if ( not_empty_list ( tmp [ 4 ] ) ) {
if ( term_equal ( list_head ( tmp [ 4 ] ) , make_char ( 114 ) ) ) {
( tmp [ 5 ] = list_tail ( tmp [ 4 ] ) ) ;
if ( not_empty_list ( tmp [ 5 ] ) ) {
if ( term_equal ( list_head ( tmp [ 5 ] ) , make_char ( 117 ) ) ) {
( tmp [ 6 ] = list_tail ( tmp [ 5 ] ) ) ;
if ( is_single_element ( tmp [ 6 ] ) ) {
if ( term_equal ( list_head ( tmp [ 6 ] ) , make_char ( 101 ) ) ) {
FUNC_EXIT ( lf_list_3 ( cons ( make_list ( make_nf1 ( lf_2sym , make_nf1 ( lf_list_1sym , ( ATerm ) ATmakeList ( 4 , char_table [ 116 ] , char_table [ 114 ] , char_table [ 117 ] , char_table [ 101 ] ) ) ) ) , remove_list ( lf_4_recursive ( make_list ( tmp [ 1 ] ) ) ) ) ) ) ;
}
}
}
}
}
}
}
}
}
}
if ( ! term_equal ( tmp [ 0 ] , make_nf1 ( lf_2sym , make_nf1 ( lf_list_1sym , cons ( make_list ( make_char ( 116 ) ) , cons ( make_list ( make_char ( 114 ) ) , cons ( make_list ( make_char ( 117 ) ) , make_list ( make_char ( 101 ) ) ) ) ) ) ) ) ) {
FUNC_EXIT ( lf_4_recursive ( make_list ( tmp [ 1 ] ) ) ) ;
}
}
}
}
else {
FUNC_EXIT_CONST ( constant0 , lf_list_3 ( make_list ( null ( ) ) ) ) ;
}
}
}
FUNC_EXIT ( make_nf1 ( lf_4sym , arg0 ) ) ;
}
}
ATerm lf_4_recursive ( ATerm arg0 ) {
{
ATerm tmp [ 7 ] ;
FUNC_ENTRY ( lf_4_recursivesym , ATmakeAppl ( lf_4_recursivesym , arg0 ) ) ;
{
ATerm ltmp [ 1 ] ;
lbl_lf_4_recursive : ltmp [ 0 ] = arg0 ;
{
ATerm atmp00 = arg0 ;
if ( not_empty_list ( atmp00 ) ) {
( tmp [ 0 ] = list_head ( atmp00 ) ) ;
{
( tmp [ 1 ] = list_tail ( atmp00 ) ) ;
{
if ( check_sym ( tmp [ 0 ] , lf_2sym ) ) {
( tmp [ 2 ] = arg_0 ( tmp [ 0 ] ) ) ;
if ( check_sym ( tmp [ 2 ] , lf_list_1sym ) ) {
( tmp [ 3 ] = arg_0 ( tmp [ 2 ] ) ) ;
if ( not_empty_list ( tmp [ 3 ] ) ) {
if ( term_equal ( list_head ( tmp [ 3 ] ) , make_char ( 116 ) ) ) {
( tmp [ 4 ] = list_tail ( tmp [ 3 ] ) ) ;
if ( not_empty_list ( tmp [ 4 ] ) ) {
if ( term_equal ( list_head ( tmp [ 4 ] ) , make_char ( 114 ) ) ) {
( tmp [ 5 ] = list_tail ( tmp [ 4 ] ) ) ;
if ( not_empty_list ( tmp [ 5 ] ) ) {
if ( term_equal ( list_head ( tmp [ 5 ] ) , make_char ( 117 ) ) ) {
( tmp [ 6 ] = list_tail ( tmp [ 5 ] ) ) ;
if ( is_single_element ( tmp [ 6 ] ) ) {
if ( term_equal ( list_head ( tmp [ 6 ] ) , make_char ( 101 ) ) ) {
FUNC_EXIT ( lf_list_3 ( cons ( make_list ( make_nf1 ( lf_2sym , make_nf1 ( lf_list_1sym , ( ATerm ) ATmakeList ( 4 , char_table [ 116 ] , char_table [ 114 ] , char_table [ 117 ] , char_table [ 101 ] ) ) ) ) , remove_list ( lf_4_recursive ( make_list ( tmp [ 1 ] ) ) ) ) ) ) ;
}
}
}
}
}
}
}
}
}
}
if ( ! term_equal ( tmp [ 0 ] , make_nf1 ( lf_2sym , make_nf1 ( lf_list_1sym , cons ( make_list ( make_char ( 116 ) ) , cons ( make_list ( make_char ( 114 ) ) , cons ( make_list ( make_char ( 117 ) ) , make_list ( make_char ( 101 ) ) ) ) ) ) ) ) ) {
( arg0 = make_list ( tmp [ 1 ] ) ) ;
goto lbl_lf_4_recursive ;
}
}
}
}
else {
FUNC_EXIT_CONST ( constant0 , lf_list_3 ( make_list ( null ( ) ) ) ) ;
}
}
FUNC_EXIT ( make_nf1 ( lf_4_recursivesym , lf_list_3 ( ltmp [ 0 ] ) ) ) ;
}
}
}
ATerm lf_list_3 ( ATerm arg0 ) {
CONS_ENTRY ( lf_list_3sym , ATmakeAppl ( lf_list_3sym , arg0 ) ) ;
CONS_EXIT ( make_nf1 ( lf_list_3sym , arg0 ) ) ;
}
ATerm lf_2 ( ATerm arg0 ) {
CONS_ENTRY ( lf_2sym , ATmakeAppl ( lf_2sym , arg0 ) ) ;
CONS_EXIT ( make_nf1 ( lf_2sym , arg0 ) ) ;
}
ATerm lf_list_1 ( ATerm arg0 ) {
CONS_ENTRY ( lf_list_1sym , ATmakeAppl ( lf_list_1sym , arg0 ) ) ;
CONS_EXIT ( make_nf1 ( lf_list_1sym , arg0 ) ) ;
}
#ifdef MAIN_ReturnsList                                           
int main(int argc, char *argv[])                         
{                                                        
  return asc_support_main(argc, argv,                    
                          register_ReturnsList,                   
                          resolve_ReturnsList,                    
                          init_ReturnsList);                      
}                                                        
#endif                                                   

