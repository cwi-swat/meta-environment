/* This C code is generated by the asf compiler version 2.1 */

#include  "asc-support-me.h"
static Symbol lf_true_1sym ;
static ATerm lf_true_1 ( ) ;
static Symbol lf_con_2sym ;
static ATerm lf_con_2 ( ATerm arg1 ) ;
static Symbol lf_or_3sym ;
static ATerm lf_or_3 ( ATerm arg1 , ATerm arg2 ) ;
static Symbol lf_false_4sym ;
static ATerm lf_false_4 ( ) ;
static Symbol lf_and_5sym ;
static ATerm lf_and_5 ( ATerm arg1 , ATerm arg2 ) ;
static Symbol lf_not_6sym ;
static ATerm lf_not_6 ( ATerm arg1 ) ;
void register_Pico_Booleans ( ) {
lf_true_1sym = ATmakeSymbol ( "prod([lit(\"true\")],cf(sort(\"PICO-BOOL-CON\")),attrs([cons(\"true\"),id(\"Pico-Booleans\")]))"
 , 0 , ATtrue ) ;
ATprotectSymbol ( lf_true_1sym ) ;
lf_con_2sym = ATmakeSymbol ( "prod([cf(sort(\"PICO-BOOL-CON\"))],cf(sort(\"PICO-BOOL\")),attrs([cons(\"con\"),id(\"Pico-Booleans\")]))" , 1 , ATtrue ) ;
ATprotectSymbol ( lf_con_2sym ) ;
lf_or_3sym = ATmakeSymbol ( "prod([cf(sort(\"PICO-BOOL\")),cf(opt(layout)),lit(\"|\"),cf(opt(layout)),cf(sort(\"PICO-BOOL\"))],cf(sort(\"PICO-BOOL\")),attrs([assoc(\"left\"),cons(\"or\"),id(\"Pico-Booleans\")]))" , 2 , ATtrue ) ;
ATprotectSymbol ( lf_or_3sym ) ;
lf_false_4sym = ATmakeSymbol ( "prod([lit(\"false\")],cf(sort(\"PICO-BOOL-CON\")),attrs([cons(\"false\"),id(\"Pico-Booleans\")]))" , 0 , ATtrue ) ;
ATprotectSymbol ( lf_false_4sym ) ;
lf_and_5sym = ATmakeSymbol ( "prod([cf(sort(\"PICO-BOOL\")),cf(opt(layout)),lit(\"&\"),cf(opt(layout)),cf(sort(\"PICO-BOOL\"))],cf(sort(\"PICO-BOOL\")),attrs([assoc(\"left\"),cons(\"and\"),id(\"Pico-Booleans\")]))" , 2 , ATtrue ) ;
ATprotectSymbol ( lf_and_5sym ) ;
lf_not_6sym = ATmakeSymbol ( "prod([lit(\"not\"),cf(opt(layout)),lit(\"(\"),cf(opt(layout)),cf(sort(\"PICO-BOOL\")),cf(opt(layout)),lit(\")\")],cf(sort(\"PICO-BOOL\")),attrs([cons(\"not\"),id(\"Pico-Booleans\")]))" , 1 , ATtrue ) ;
ATprotectSymbol ( lf_not_6sym ) ;
register_prod ( ATparse ( "prod([lit(\"true\")],cf(sort(\"PICO-BOOL-CON\")),attrs([cons(\"true\"),id(\"Pico-Booleans\")]))" ) , lf_true_1 , lf_true_1sym ) ;
register_prod ( ATparse ( "prod([cf(sort(\"PICO-BOOL-CON\"))],cf(sort(\"PICO-BOOL\")),attrs([cons(\"con\"),id(\"Pico-Booleans\")]))" ) , lf_con_2 , lf_con_2sym ) ;
register_prod ( ATparse ( "prod([cf(sort(\"PICO-BOOL\")),cf(opt(layout)),lit(\"|\"),cf(opt(layout)),cf(sort(\"PICO-BOOL\"))],cf(sort(\"PICO-BOOL\")),attrs([assoc(\"left\"),cons(\"or\"),id(\"Pico-Booleans\")]))" ) , lf_or_3 , lf_or_3sym ) ;
register_prod ( ATparse ( "prod([lit(\"false\")],cf(sort(\"PICO-BOOL-CON\")),attrs([cons(\"false\"),id(\"Pico-Booleans\")]))" ) , lf_false_4 , lf_false_4sym ) ;
register_prod ( ATparse ( "prod([cf(sort(\"PICO-BOOL\")),cf(opt(layout)),lit(\"&\"),cf(opt(layout)),cf(sort(\"PICO-BOOL\"))],cf(sort(\"PICO-BOOL\")),attrs([assoc(\"left\"),cons(\"and\"),id(\"Pico-Booleans\")]))" ) , lf_and_5 , lf_and_5sym ) ;
register_prod ( ATparse ( "prod([lit(\"not\"),cf(opt(layout)),lit(\"(\"),cf(opt(layout)),cf(sort(\"PICO-BOOL\")),cf(opt(layout)),lit(\")\")],cf(sort(\"PICO-BOOL\")),attrs([cons(\"not\"),id(\"Pico-Booleans\")]))" ) , lf_not_6 , lf_not_6sym ) ;
}
void resolve_Pico_Booleans ( ) {
}
static ATerm constant0 = NULL ;
static ATerm constant1 = NULL ;
void init_Pico_Booleans ( ) {
ATprotect ( & constant0 ) ;
ATprotect ( & constant1 ) ;
}
ATerm lf_not_6 ( ATerm arg0 ) {
FUNC_ENTRY ( lf_not_6sym , ATmakeAppl ( lf_not_6sym , arg0 ) ) ;
if ( term_equal ( arg0 , ( constant0 ? constant0 : ( constant0 = make_nf1 ( lf_con_2sym , make_nf0 ( lf_false_4sym ) ) ) ) ) ) {
FUNC_EXIT_CONST ( constant1 , make_nf1 ( lf_con_2sym , make_nf0 ( lf_true_1sym ) ) ) ;
}
if ( term_equal ( arg0 , ( constant1 ? constant1 : ( constant1 = make_nf1 ( lf_con_2sym , make_nf0 ( lf_true_1sym ) ) ) ) ) ) {
FUNC_EXIT_CONST ( constant0 , make_nf1 ( lf_con_2sym , make_nf0 ( lf_false_4sym ) ) ) ;
}
FUNC_EXIT ( make_nf1 ( lf_not_6sym , arg0 ) ) ;
}
ATerm lf_and_5 ( ATerm arg0 , ATerm arg1 ) {
FUNC_ENTRY ( lf_and_5sym , ATmakeAppl ( lf_and_5sym , arg0 , arg1 ) ) ;
if ( term_equal ( arg0 , ( constant1 ? constant1 : ( constant1 = make_nf1 ( lf_con_2sym , make_nf0 ( lf_true_1sym ) ) ) ) ) ) {
FUNC_EXIT ( arg1 ) ;
}
if ( term_equal ( arg0 , ( constant0 ? constant0 : ( constant0 = make_nf1 ( lf_con_2sym , make_nf0 ( lf_false_4sym ) ) ) ) ) ) {
FUNC_EXIT_CONST ( constant0 , make_nf1 ( lf_con_2sym , make_nf0 ( lf_false_4sym ) ) ) ;
}
FUNC_EXIT ( make_nf2 ( lf_and_5sym , arg0 , arg1 ) ) ;
}
ATerm lf_or_3 ( ATerm arg0 , ATerm arg1 ) {
FUNC_ENTRY ( lf_or_3sym , ATmakeAppl ( lf_or_3sym , arg0 , arg1 ) ) ;
if ( term_equal ( arg0 , ( constant1 ? constant1 : ( constant1 = make_nf1 ( lf_con_2sym , make_nf0 ( lf_true_1sym ) ) ) ) ) ) {
FUNC_EXIT_CONST ( constant1 , make_nf1 ( lf_con_2sym , make_nf0 ( lf_true_1sym ) ) ) ;
}
if ( term_equal ( arg0 , ( constant0 ? constant0 : ( constant0 = make_nf1 ( lf_con_2sym , make_nf0 ( lf_false_4sym ) ) ) ) ) ) {
FUNC_EXIT ( arg1 ) ;
}
FUNC_EXIT ( make_nf2 ( lf_or_3sym , arg0 , arg1 ) ) ;
}
ATerm lf_false_4 ( ) {
CONS_ENTRY ( lf_false_4sym , ATmakeAppl0 ( lf_false_4sym ) ) ;
CONS_EXIT ( make_nf0 ( lf_false_4sym ) ) ;
}
ATerm lf_con_2 ( ATerm arg0 ) {
CONS_ENTRY ( lf_con_2sym , ATmakeAppl ( lf_con_2sym , arg0 ) ) ;
CONS_EXIT ( make_nf1 ( lf_con_2sym , arg0 ) ) ;
}
ATerm lf_true_1 ( ) {
CONS_ENTRY ( lf_true_1sym , ATmakeAppl0 ( lf_true_1sym ) ) ;
CONS_EXIT ( make_nf0 ( lf_true_1sym ) ) ;
}
#ifdef ASF_MAIN                                           
int main(int argc, char *argv[])                         
{                                                        
  return asc_support_main(argc, argv,                    
                          register_Pico_Booleans,                   
                          resolve_Pico_Booleans,                    
                          init_Pico_Booleans);                      
}                                                        
#endif                                                   

