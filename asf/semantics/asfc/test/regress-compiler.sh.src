#!/bin/sh
#
#    Meta-Environment - An environment for language prototyping.
#    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, The Netherlands. 
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
#
# $Id$
Revision='$Revision$'

###
#  Some global variables, that might require occasional modification
###
set -x;
verbose=0

cd `dirname $0`;
mydir=__TOP_SRCDIR__/asfc/test

RM=rm
COMPILER="__TOP_BUILDDIR__/asfc/src/asfc"
COMPARE="$mydir/codediff"

terms=$mydir/terms


###
#  Handle the command line, &c.
###

myname=`basename $0`
myversion=`echo $Revision| cut -d' ' -f2`

# The argument vector: list of option letters, colons denote option
# arguments.  See Usage function, immediately below, for option
# explanation.
myarguments="hvV"

if [ $myarguments ] ; then
   arg2explanation='s/\(.:\)/ -\1 /g; s/ \([^-:]\)/ -\1/g; s/:/ file/g';
   myargsexplained=" -`echo $myarguments|sed -e \"$arg2explanation\"`"
fi

# Usage: displays helpful usage information
Usage() {
cat << E_O_USAGE >&2
Usage: $myname$myargsexplained . . .
Options:
    -h              display help information (usage)
    -v              verbose mode
    -V              reveal program version (i.e. $myversion)
E_O_USAGE
}

Version() {
    echo "$myname v$myversion" >&2
}

# getopt handles command line...
args=`getopt $myarguments $* 2> /dev/null`
if test $? != 0
then
        Usage
        exit 2
fi
set -- $args

# Argument interpretation...
while [ $#  -gt 0 ]
do
    case "$1"
    in
        -h)
            Usage; shift;;
        -v)
            verbose=1; shift;;
        -V)
            Version; shift;;
        --)
            shift; break;;
    # Add additional command line options here...
    *)
            Usage; shift ;;
    esac
done


###
#  Get to the real work now...
###

Warn () {
	echo $*                                   	>&2
}

Error () {
	Warn $*
	error=1
}

Abort () {
	Error $*
	exit 2
}

Notify () {
	if [ $verbose -gt 0 ] ; then
		Warn $*
	fi
}

#
## Main bit...
#

if [ $verbose -gt 0 ] ; then
	VERBOSE="-v"
else
	VERBOSE=""
fi

files=`ls $terms/*.asfix 2>/dev/null`
error=0

for file in $files
do
	base=`basename $file`
	dir=`dirname $file`
	out=$dir/`basename $base .asfix`.c
	if [ ! -f $out.org ] ; then
		Notify "No reference term for $base"
		continue
	fi
	if $COMPILER $VERBOSE -i $file -o $out
	then
                if $COMPARE $VERBOSE $out $out.org	> /dev/null
                then
			Notify "Regression test for valid term $base succeeded"
	                ${RM} -f $out
                        printf "."
		else
			Error "Regression test for valid term $base failed"
                fi
	else
		Abort "Error compiling $file"
	fi
done

printf "\n"

exit $error
