#! /bin/sh
#
#    Meta-Environment - An environment for language prototyping.
#    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam, The Netherlands. 
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
#

myname=`basename $0`
myversion="1.0"

# The argument vector: list of option letters, colons denote option
# arguments.  See Usage function, immediately below, for option
# explanation.
myarguments="hvV"

if [ $myarguments ] ; then
   arg2explanation='s/\(.:\)/ -\1 /g; s/ \([^-:]\)/ -\1/g; s/:/ file/g';
   myargsexplained=" -`echo $myarguments|sed -e \"$arg2explanation\"`"
fi

# Usage: displays helpful usage information
Usage() {
cat << E_O_USAGE >&2
Usage: $myname$myargsexplained . . .
Options:
    -h              display help information (usage)
    -v              verbose mode
    -V              reveal program version (i.e. $myversion)
E_O_USAGE
}

Version() {
    echo "$myname v$myversion" >&2
}

# getopt handles command line...
args=`getopt $myarguments $* 2> /dev/null`
if test $? != 0
then
        Usage
        exit 2
fi
set -- $args


# Default values
verbose=0

# Argument interpretation...
while [ $#  -gt 0 ]
do
    case "$1"
    in
        -h)
            Usage; shift;;
        -v)
            verbose=1; shift;;
        -V)
            Version; shift;;
        --)
            shift; break;;
    # Add additional command line options here...
    *)
            Usage; shift ;;
    esac
done

###
#  Get to the real work now...
###

case $# in
	2)
		if [ -f $1 -a -f $2 ] ; then
			:
		else
			echo "Either $1 or $2 does not exist"
			exit 1
		fi
		if [ $1 = $2 ] ; then exit 0; fi ;;
	*)
		echo "Usage:" `basename $0` "file0 file1"
		exit 2 ;;
esac

Notify () {
	if [ $verbose -gt 0 ]
	then
		echo $*                                   >&2
	fi
}

CheckSum () {
	cksum $1 | cut -f1,2
}

BinaryEqual () {
	if cmp -s $1 $2 ; then return 0 ;  else return 1 ; fi

	if [ "`CheckSum $1`" = "`CheckSum $2`" ] ; then
		return 0
	else
		return 1
	fi
}

if BinaryEqual $1 $2 ; then exit 0 ; fi

Notify === `basename $1`/`basename $2` not binary identical  ===

A=${TMPDIR:-/var/tmp}/$$.0
B=${TMPDIR:-/var/tmp}/$$.1

suppress="generated by"

trap 'rm -f $A $B' 0 1
cat $1 | grep -v "$suppress"	> $A
cat $2 | grep -v "$suppress"	> $B
diff -a $A $B; error=$?

exit $error
