equations

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Exported functionality. Finding the imports of a module (transitively closed)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% This is a fixed point computation, in order to prevent divergence in case
%% of cyclic imports. We collect all imports in the current module, and the 
%% *exported* imports transitively.

[find-0]	all_imports_of(Module) = Import*1,
					find_set(Definition, [ Import*1 ]) = [ Import* ]
					================================================
					find_imports(Definition, Module) = Import*


%%%%%%%%%%
%% Hiddens
%%%%%%%%%%

%% find_set finds all *exported* imports transitively

%% fixed point check:

[find-1] 	find_set_imports(Definition, ImportSet, ImportSet) = ImportSet2,
					ImportSet = ImportSet2
					====================================================================
					find_set(Definition, ImportSet) = ImportSet

[find-2]	find_set_imports(Definition, ImportSet, ImportSet) = ImportSet2,
					ImportSet != ImportSet2,
					find_set(Definition, ImportSet2) = ImportSet3
					================================================================
					find_set(Definition, ImportSet) = ImportSet3

%% one iteration of the algorithm:

[fiss-0]	find_set_imports(Definition,[],ImportSet) = ImportSet

[fiss-1] 	find_set_import_definition(Definition, Import, ImportSet) = ImportSet2,
					find_set_imports(Definition, [ Import* ], ImportSet2) = ImportSet3
					==================================================================
					find_set_imports(Definition, [ Import Import* ], ImportSet) = ImportSet3

[fis-0]	find_set_import_definition(,Import,ImportSet) = ImportSet

[fis-1] find_set_import_module(Module,Import,ImportSet) = ImportSet2,
				find_set_import_definition(Module*,Import,ImportSet2) = ImportSet3
				================================================================================
				find_set_import_definition(Module Module*, Import, ImportSet) = ImportSet3

%% If we have found a module that is in the imports, then add all it's imports to the set.
%% Note that the set can contain no double entries due to the add function.

[fim-0] Module = module ModuleName ImpSection* Section*,
				exported_imports_of(Module) = Import*,
				add [ Import* ] to ImportSet = ImportSet2
				===============================================================
				find_set_import_module(Module, ModuleName, ImportSet) = ImportSet2

[default-fim] find_set_import_module(Module, Import, ImportSet) = ImportSet
 
%%%%%%%%%%%%%%%%%%
%% Sets of imports
%%%%%%%%%%%%%%%%%%

[ai-0] add Import to [ Import*1 Import Import*2 ] = [ Import*1 Import Import*2 ]

[default-ai]	add Import to [ Import* ] = [ Import Import* ]

[ais-0] add [] to ImportSet = ImportSet

[ais-1] add Import to ImportSet = ImportSet2,
				add [ Import* ] to ImportSet2 = ImportSet3
				=========================================
				add [ Import Import* ] to ImportSet = ImportSet3  

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Finding the imports sections in a module and collection the names
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% finds only the exported import sections

[iom-0] exported_imports_of_impsections(ImpSection*) = Import*1,
				exported_imports_of_sections(Section*) = Import*2
				======================================================================
				exported_imports_of(module ModuleName ImpSection* Section*) = Import*1 Import*2


[iois-0] exported_imports_of_impsections() =
[iois-1] exported_imports_of_impsections(imports Import*) = Import*

[iois-2]	exported_imports_of_impsections(ImpSection*) = Import*2
					=====================================================
					exported_imports_of_impsections(imports Import*1 ImpSection*) = Import*1 Import*2 	

[ioss-0] 	exported_imports_of_sections() =

[ioss-1]	exported_imports_of_section(Section) = Import*1,
					exported_imports_of_sections(Section*) = Import*2
					========================================
					exported_imports_of_sections(Section Section*) = Import*1 Import*2

[ios-0]		exported_imports_of_section(exports Grammar) = exported_imports_of_grammar(Grammar)

[default-ios] exported_imports_of_section(Section) =

[iog-0]	exported_imports_of_grammar(imports Import*) = Import*

[iog-1] exported_imports_of_grammar(Grammar1) = Import*1,
				exported_imports_of_grammar(Grammar2) = Import*2
				===========================================================
				exported_imports_of_grammar(Grammar1 Grammar2) = Import*1 Import*2

[default-iog] exported_imports_of_grammar(Grammar) =

%% below the above once more, but then collecting imported and exported imports

[iom-0] all_imports_of_impsections(ImpSection*) = Import*1,
				all_imports_of_sections(Section*) = Import*2
				======================================================================
				all_imports_of(module ModuleName ImpSection* Section*) = Import*1 Import*2


[iois-0] all_imports_of_impsections() =
[iois-1] all_imports_of_impsections(imports Import*) = Import*

[iois-2]	all_imports_of_impsections(ImpSection*) = Import*2
					=====================================================
					all_imports_of_impsections(imports Import*1 ImpSection*) = Import*1 Import*2 	

[ioss-0] 	all_imports_of_sections() =

[ioss-1]	all_imports_of_section(Section) = Import*1,
					all_imports_of_sections(Section*) = Import*2
					========================================
					all_imports_of_sections(Section Section*) = Import*1 Import*2

[ios-0]		all_imports_of_section(exports Grammar) = all_imports_of_grammar(Grammar)

[ios-1]		all_imports_of_section(hiddens Grammar) = all_imports_of_grammar(Grammar)

[default-ios] all_imports_of_section(Section) =

[iog-0]	all_imports_of_grammar(imports Import*) = Import*

[iog-1] all_imports_of_grammar(Grammar1) = Import*1,
				all_imports_of_grammar(Grammar2) = Import*2
				===========================================================
				all_imports_of_grammar(Grammar1 Grammar2) = Import*1 Import*2

[default-iog] all_imports_of_grammar(Grammar) =
