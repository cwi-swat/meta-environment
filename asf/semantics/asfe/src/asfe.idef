/*
    Meta-Environment - An environment for language prototyping.
    Copyright (C) 2000  Stichting Mathematisch Centrum, Amsterdam,
    The Netherlands. 

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

*/

/* $Id$ */

process Asfe is
let
  Eval : asfe,
  ModuleName : str,
  Term : term,
  Equations : term,
  CanRewrite : term,
  NormalForm : term,
  ErrorList : list,
  Id : term,
  On : term
in
  Id := process-id .

  execute(asfe, Eval?) .
  subscribe(language-unavailable(<str>)) .
  subscribe(equations-changed(<str>)) .
  (
    rec-msg(debugging(On?)) .
    snd-do(Eval, debugging(On))
  +
    (
      rec-note(language-unavailable(ModuleName?))
    +
      rec-note(equations-changed(ModuleName?))
    ) .
    snd-do(Eval, remove-equations(ModuleName))
  +
    %% Handle a request to rewrite a term over a given module.
    rec-msg(rewrite(ModuleName?, Term?)) .
    CanRewrite := false .
    snd-eval(Eval, equations-available(ModuleName)) .
    (
      %% Equations are already available in the evaluator.
      rec-value(Eval, eqs-available(ModuleName)) .
      CanRewrite := true
    +
      %% Equations are not yet available in the evaluator.
      rec-value(Eval, eqs-not-available(ModuleName)) .
      snd-note(ui-status(stat(Id, "Retrieving equations"))) .

      %% Ensure that all necessary equations are parsed (if possible).
      snd-msg(process-eqs(ModuleName)) .
      rec-msg(eqs-processed(ModuleName)) .

      %% Try to get all necessary equations.
      snd-msg(get-all-equations(ModuleName)) .
      (
        %% If all equations are available, store them in the evaluator.
        rec-msg(all-equations(Equations?)) .
        snd-do(Eval, add-equations(ModuleName, Equations)) .
        CanRewrite := true
      +
        %% Notify the user that we cannot rewrite due to incompleteness.
        rec-msg(equations-incomplete) .
        snd-note(ui-status(
          errorf("Equations incomplete for %s", [ModuleName])))
      ) .
      snd-note(ui-status(endstat(Id)))
    ) .

    %% Now that all preparation has been done, see if we can rewrite.
    if equal(CanRewrite, true) then
      snd-eval(Eval, interpret(ModuleName, Term)) .
      (
        %% Rewriting succesfull, yield NormalForm.
        rec-value(Eval, rewrite-result(NormalForm?)) .
        snd-msg(rewrite-result(NormalForm))
      +
        %% Errors during rewriting, 
        rec-value(Eval, rewrite-errors(ErrorList?)) .
        snd-msg(rewrite-errors(ErrorList))
      )
    else
      %% Unable to rewrite, yield original term as normal form.
      snd-msg(rewrite-result(Term))
    fi
  ) *
  delta
endlet

tool asfe is { command = "asfe" }
