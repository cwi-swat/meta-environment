/* $Id$ */

process Asfe is
let
  Eval       : asfe,
  ModuleName : str,
  Term       : term,
  Equations  : term,
  NormalForm : term,
  ErrorList  : list,
  Id         : term,
  Tide       : term,
  EventName    : term,
  EventTree    : term,
  EventResult  : term,
  EventString: str
in
  Id := process-id .
  Tide := off .
  (
    rec-msg(debugging(Tide?))  /* 'on' or 'off' */
  +
    rec-msg(rewrite(ModuleName?, Equations?, Term?)) .
    execute(asfe, Eval?) .
    snd-eval(Eval, interpret(ModuleName, Equations, Term, Tide)) .
    (
      rec-event(Eval, event(EventName?,EventTree?,EventString?)).
      if equal(EventName,tb-snd-note) then
        snd-note(EventTree)
      else
        if equal(EventName,tb-snd-msg) then
          snd-msg(EventTree)
        else
          if equal(EventName,tb-rec-msg) then
            rec-msg(EventTree)
          else
            printf("unhandled event: %t\n", EventName)
          fi
        fi
      fi.
      snd-ack-event(Eval,event(EventName,EventTree,EventString))
    ) *
    (
      rec-value(Eval, rewrite-result(NormalForm?)) .
      snd-msg(rewrite-result(NormalForm))
    +
      rec-value(Eval, rewrite-errors(ErrorList?)) .
      snd-msg(rewrite-errors(ErrorList))
    ).
    snd-terminate(Eval,"done").
    %% Equations and terms can be big, so we clear the variables here
    Equations := none.
    Term      := none 
  ) *
  delta
endlet

tool asfe is { command = "asfe" }
