/* $Id$ */

process Asfe is
let
  Eval       : asfe,
  ModuleName : str,
  Term       : term,
  Equations  : term,
  NormalForm : term,
  ErrorList  : list,
  Id         : term,
  Tide       : term,
  TestResults : term,
  Tests : term,
  Tags : term,
  Total : int,
  Failed : int
in
  Id := process-id .
  Tide := off .
  (
    rec-msg(debugging(Tide?))  /* 'on' or 'off' */
  +
    rec-msg(rewrite(ModuleName?, Equations?, Term?)) .
    execute(asfe, Eval?) .
    snd-eval(Eval, interpret(ModuleName, Equations, Term, Tide)) .
    (
      rec-value(Eval, rewrite-result(NormalForm?)) .
      snd-msg(rewrite-result(NormalForm))
    +
      rec-value(Eval, rewrite-errors(ErrorList?)) .
      snd-msg(rewrite-errors(ErrorList))
    ).
    snd-terminate(Eval,"done").
    %% Equations and terms can be big, so we clear the variables here
    Equations := none.
    Term      := none 
  +
    rec-msg(run-tests(ModuleName?, Equations?, Tests?)) .
    execute(asfe, Eval?) .
    snd-eval(Eval, run-tests(ModuleName, Equations, Tests)) .
    (
      rec-value(Eval, test-results(Total?, Failed?, Tags?)) .
      snd-msg(test-results(Total, Failed, Tags))
    ) .
    Equations := none .
    Tests := none
  ) *
  delta
endlet

tool asfe is { command = "asfe" }
