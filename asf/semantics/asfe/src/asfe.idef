/* $Id$ */

process Asfe is
let
  Eval       : asfe,
  ModuleName : str,
  Term       : term,
  Equations  : term,
  NormalForm : term,
  ErrorList  : list,
  Id         : term,
  Tide       : term,
  Path       : str,
  Table      : term
in
  Id := process-id .
  (
    rec-msg(debugging(Tide?))  /* 'on' or 'off' */
  +
    rec-msg(rewrite(ModuleName?, Equations?, Term?)) .
    execute(asfe, Eval?) .
    snd-eval(Eval, interpret(ModuleName, Equations, Term, Tide)) .
    (
      rec-value(Eval, rewrite-result(NormalForm?)) .
      snd-msg(get-parsetable(trm(ModuleName))) .
      (
        rec-msg(parse-table(Table?, Path?)) .
	snd-msg(restore-brackets(NormalForm, Table)) .
	rec-msg(brackets-restored(NormalForm?)) .
        snd-msg(rewrite-result(NormalForm))
      +
        rec-msg(no-parse-table) .
	snd-msg(rewrite-errors([]))
      )
    +
      rec-value(Eval, rewrite-errors(ErrorList?)) .
      snd-msg(rewrite-errors(ErrorList))
    ).
    snd-terminate(Eval,"done").
    %% Equations and terms can be big, so we clear the variables here
    Equations := none.
    Term      := none 
  ) *
  delta
endlet

tool asfe is { command = "asfe" }
