module SDFApigen

imports SymbolToString
imports SdfCollect
imports basic/Identifiers

exports

context-free syntax

generate-syntax(Module, ModuleId) -> Module

hiddens
context-free start-symbols
  SDF

context-free syntax

make-modulename(ModuleName, ModuleId) -> ModuleName 
{traversal(trafo,top-down,break)}
make-modulename(ModuleId, ModuleId) -> ModuleId 
{traversal(trafo,top-down,break)}

context-free syntax
make-sections(Section*) -> Section*

context-free syntax

  generate-variables(Symbol*) -> Production*
  generate-functions(Production*) -> Production*
  generate-functions-prod(Production) -> Production*
  generate-get-and-set(Symbol*, Symbol) -> Production*
  generate-make(StrCon, Symbol*, Symbol) -> Production*
  generate-make-fields(Symbol*) -> {Symbol ","}*

context-free syntax
  string2moduleid(Name) -> ModuleId

  StrCon "++" StrCon -> StrCon {left}

context-free start-symbols
  {Symbol ","}* Production*

variables

"Name"[0-9]* -> Literal
"Result" -> Symbol
"Module"[0-9]* -> Module
"Symbol"[0-9]* -> Symbol
"Symbol*"[0-9]* -> Symbol*
"Symbol,*"[0-9]* -> {Symbol ","}*
"Field*"[0-9]* -> Symbol*
"Field+"[0-9]* -> Symbol+
"Field"[0-9]* -> Symbol
"Production"[0-9]* -> Production
"Production*"[0-9]* -> Production*
"ATerm"[0-9]* -> ATerm
"Attribute*"[0-9]* -> {Attribute ","}*
"NewModuleName"[0-9]* -> ModuleName
"ModuleName"[0-9]* -> ModuleName
"ModuleId"[0-9]* -> ModuleId
"Sections"[0-9]* -> Section*
"NewSections"[0-9]* -> Section*
"ImpSection*"[0-9]* -> ImpSection*
"Literal"[0-9]* -> StrCon
"Name"[0-9]* -> StrCon
"IdCon"[0-9]* -> IdCon

lexical variables

"ModuleWord" -> ModuleWord
"ModuleIdLex"   -> ModuleId
"c*"[0-9]* -> StrChar*
"letter+" -> [A-Za-z0-9\_\-]+
"letter" -> [A-Za-z0-9\_\-]