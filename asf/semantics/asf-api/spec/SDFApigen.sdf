module SDFApigen
imports SymbolToString
imports SdfCollect




exports

context-free syntax

generate-syntax(Module, StrCon) -> Module
generate-syntax(Module, ModuleId) -> Module

hiddens

context-free syntax

make-modulename(ModuleName, ModuleId) -> ModuleName 
{traversal(trafo,top-down,break)}
make-modulename(ModuleId, ModuleId) -> ModuleId 
{traversal(trafo,top-down,break)}

context-free syntax
make-sections(Section*) -> Section*

context-free syntax

  generate-variables(Symbol*) -> Production*
  generate-functions(Production*) -> Production*
  generate-functions-prod(Production) -> Production*
  generate-get-and-set(Symbol*, Symbol) -> Production*
  generate-make(Literal, Symbol*, Symbol) -> Production*
  generate-make-fields(Symbol*) -> {Symbol ","}*

context-free start-symbols
  {Symbol ","}*

variables

"Name"[0-9]* -> Literal
"Result" -> Symbol
"Module"[0-9]* -> Module
"Symbol"[0-9]* -> Symbol
"Symbol*"[0-9]* -> Symbol*
"Symbol,*"[0-9]* -> {Symbol ","}*
"Field*"[0-9]* -> Symbol*
"Field+"[0-9]* -> Symbol+
"Field"[0-9]* -> Symbol
"c*" -> CHAR*
"Production"[0-9]* -> Production
"Production*"[0-9]* -> Production*
"ATerm"[0-9]* -> ATerm
"Attribute*"[0-9]* -> {Attribute ","}*
"NewModuleName"[0-9]* -> ModuleName
"ModuleName"[0-9]* -> ModuleName
"ModuleId"[0-9]* -> ModuleId
"Sections"[0-9]* -> Section*
"NewSections"[0-9]* -> Section*
"ImpSection*"[0-9]* -> ImpSection*
"Literal"[0-9]* -> Literal
