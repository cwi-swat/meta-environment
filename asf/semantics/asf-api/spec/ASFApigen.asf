equations

[main]
Production* := collect-productions(Sections, )
===>
generate-equations(module ModuleName ImpSection* Sections) =
  equations
generate(Production*)


equations

[empty]
generate() =

[loop]
generate(Production Production*) = 
generate-for-production(Production) 

generate(Production*)

equations

[generate2]

{Attribute*3, bracket, Attribute*4} !:= {Attribute*1, Attribute*2},
String := "is-" || strcon("""c*"""),
Pattern :=  generate-pattern(Symbol* -> Symbol, 0), 
Type := generate-field(Symbol, 0),
Equation1 := [ ] String || "(" || Pattern || ")" = "true",
Equation2 := [default-equation] String || "(" || Type || ")" = "false",
Equation*1 := generate-make(strcon("""c*"""), Symbol*, Symbol),
Equation*2 := generate-get-and-set(Symbol*, Pattern, 0)
====>
generate-for-production(Symbol* -> Symbol
                        {Attribute*1, cons(qliteral("""c*""")), Attribute*2})
= 
Equation1
Equation2
Equation*1
Equation*2

[default-do-not-generate]
generate-for-production(Production) =

equations

[empty]
generate-pattern( -> Symbol Attributes, ArgNr) = ""

[loop]
generate-pattern(Symbol Symbol* -> Symbol2 Attributes, ArgNr) =
generate-field(Symbol, ArgNr) || 
" " || 
generate-pattern(Symbol* -> Symbol2 Attributes, ArgNr + 1)

[literal]
generate-field(qliteral("""c*"""), ArgNr) = strcon("""c*""")

[default]
generate-field(Symbol, natcon(c*)) = 
"$" || symbol2string(Symbol) || "_" || strcon("""c*""")

[labelled]
generate-field(Literal : Symbol, NatCon) =
generate-field(Symbol, NatCon)

equations

[empty]
generate-get-and-set( ,Pattern, ArgNr) =

[loop]
generate-get-and-set(Symbol Symbol*, Pattern, ArgNr) =
generate-get-and-set-field(Symbol, Pattern, ArgNr)
generate-get-and-set(Symbol*, Pattern, ArgNr + 1)

[literal]
generate-get-and-set-field(Literal, Pattern, ArgNr) =

[quoted-field]
strcon("""c*""") := symbol2string(Symbol),
natcon(c*3) := ArgNr,
String := strcon("""c*""") || strcon("""c*3"""),
Field := "$" || String || "_",
Field2 := "$" || String || "_" || "'",
Equation1 := [] "get-" || strcon("""c*""") || "(" || Pattern || ")" = Field,
strcon("""c*1 "$" c* c*3 c*2 """) := Pattern,
Pattern2 := strcon("""c*1 "$" c* c*3 "'" c*2 """),
Equation2 := [] "set-" || strcon("""c*""") || "(" || Pattern || "," || Field2 || ")" = Pattern2
====>
generate-get-and-set-field(Literal : Symbol, Pattern, ArgNr) =
Equation1
Equation2

[default]
generate-get-and-set-field(Symbol, Pattern, ArgNr) = 

equations

[make]
Equation := [] generate-make-match(Name, Symbol*) = 
  generate-pattern(Symbol* -> Symbol, 0)
===>
generate-make(Name, Symbol*, Symbol) = Equation

[default-no-make]
generate-make(Name, Symbol*, Symbol) =


[top]
generate-make-match(String, Symbol*) =
"make-" || String || " " || "(" || " " || 
generate-make-args(Symbol*, 0) || " " ||  ")"

[default-empty]
generate-make-args(, ArgNr) = ""

[loop]
String := generate-make-arg(Symbol, ArgNr),
"" != String,
String2 := generate-make-args(Symbol*, ArgNr + 1),
"" != String2
===>
generate-make-args(Symbol Symbol*, ArgNr) =
String || " , " || String2

[default-loop]
"" == generate-make-args(Symbol*, ArgNr+1)
===>
generate-make-args(Symbol Symbol*, ArgNr) =
generate-make-arg(Symbol, ArgNr)

[loop-skip]
"" == generate-make-arg(Symbol, ArgNr)
===>
generate-make-args(Symbol Symbol*, ArgNr) =
generate-make-args(Symbol*, ArgNr + 1)

[single]
generate-make-args(Symbol, ArgNr) =
generate-make-arg(Symbol, ArgNr)

[literal]
generate-make-arg(Literal, ArgNr) = ""

[default-single]
generate-make-arg(Symbol, natcon(c*)) = 
"$" || symbol2string(Symbol) || "_" || strcon("""c*""")

[quoted-labelled]
generate-make-arg(Literal : Symbol, NatCon) =
generate-make-arg(Symbol, NatCon)

