equations

[main]
Production* := collect-productions(Sections, )
===>
generate-equations(module ModuleName ImpSection* Sections) =
  equations
generate(Production*)


equations

[empty]
generate() =

[loop]
generate(Production Production*) = 
generate-for-production(Production) 

generate(Production*)

equations

[generate2]

{Attribute*3, bracket, Attribute*4} !:= {Attribute*1, Attribute*2},
String := "is-" || Name,
Pattern :=  generate-pattern(Symbol*, 0, -1), 
Type := generate-field(Symbol, 0, -1),
Equation1 := [ ] String || "(" || Pattern || ")" = "true",
Equation2 := [default-equation] String || "(" || Type || ")" = "false",
Equation*1 := generate-make(Name, Symbol*, Symbol),
Equation*2 := generate-get-and-set(Symbol*, Symbol*, 0)
====>
generate-for-production(Symbol* -> Symbol
                        {Attribute*1, cons(Name), Attribute*2})
= 
Equation1
Equation2
Equation*1
Equation*2

[default-do-not-generate]
generate-for-production(Production) =

equations

[empty]
generate-pattern( , ArgNr, Primed) = ""

[loop]
generate-pattern(Symbol Symbol*, ArgNr, Primed) =
generate-field(Symbol, ArgNr, Primed) || 
" " || 
generate-pattern(Symbol* , ArgNr + 1, Primed)

[literal]
generate-field(Literal, ArgNr, Primed) = Literal

[default-primed]
generate-field(Symbol, ArgNr, ArgNr) = 
"$" || symbol2string(Symbol) || "_" || natcon2strcon(ArgNr) || "'"

[default-not-primed]
ArgNr != Primed
===>
generate-field(Symbol, ArgNr, Primed) = 
"$" || symbol2string(Symbol) || "_" || natcon2strcon(ArgNr)

[labelled]
generate-field(Literal : Symbol, ArgNr, Primed) =
generate-field(Symbol, ArgNr, Primed)

equations

[empty]
generate-get-and-set( , Symbol*, ArgNr) =

[loop]
generate-get-and-set(Symbol Symbol*, Symbol*2, ArgNr) =
generate-get-and-set-field(Symbol, Symbol*2, ArgNr)
generate-get-and-set(Symbol*, Symbol*2, ArgNr + 1)

[literal]
generate-get-and-set-field(Literal, Symbol*2, ArgNr) =

[unquoted-field]
generate-get-and-set-field(IdCon : Symbol, Symbol*, ArgNr) =
generate-get-and-set-field(idcon2strcon(IdCon) : Symbol, Symbol*, ArgNr)

[quoted-field]
Type := symbol2string(Symbol),
Field := "$" || Type || "_" || natcon2strcon(ArgNr),
Field2 := Field || "'",
Pattern := generate-pattern(Symbol*, 0, -1),
Equation1 := [] "get-" || Name || "(" || Pattern || ")" = Field,
Pattern2 := generate-pattern(Symbol*, 0, ArgNr),
Equation2 := [] "set-" || Name || "(" || Pattern || "," || Field2 || ")" = 
	Pattern2
====>
generate-get-and-set-field(Name : Symbol, Symbol*, ArgNr) =
Equation1
Equation2

[default]
generate-get-and-set-field(Symbol, Symbol*, ArgNr) = 

equations

[make]
Equation := [] generate-make-match(Name, Symbol*) = 
  generate-pattern(Symbol* , 0, -1)
===>
generate-make(Name, Symbol*, Symbol) = Equation

[default-no-make]
generate-make(Name, Symbol*, Symbol) =

equations

[top]
generate-make-match(String, Symbol*) =
	"make-" || String || " " || "(" || " " || 
		generate-make-args(Symbol*, 0) 
	|| " " ||  ")"

equations

[default-empty]
generate-make-args(, ArgNr) = ""

[loop]
String := generate-make-arg(Symbol, ArgNr),
"" != String,
String2 := generate-make-args(Symbol*, ArgNr + 1),
"" != String2
===>
generate-make-args(Symbol Symbol*, ArgNr) =
String || " , " || String2

[default-loop]
"" == generate-make-args(Symbol*, ArgNr+1)
===>
generate-make-args(Symbol Symbol*, ArgNr) =
generate-make-arg(Symbol, ArgNr)

[loop-skip]
"" == generate-make-arg(Symbol, ArgNr)
===>
generate-make-args(Symbol Symbol*, ArgNr) =
generate-make-args(Symbol*, ArgNr + 1)

[single]
generate-make-args(Symbol, ArgNr) =
generate-make-arg(Symbol, ArgNr)

equations

[literal]
generate-make-arg(Literal, ArgNr) = ""

[default-single]
generate-make-arg(Symbol, ArgNr) = 
"$" || symbol2string(Symbol) || "_" || natcon2strcon(ArgNr)

[quoted-labelled]
generate-make-arg(Name : Symbol, NatCon) =
generate-make-arg(Symbol, NatCon)

