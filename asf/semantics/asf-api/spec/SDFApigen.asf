equations

[dup-prod]
Production*1 Production Production*2 Production Production*3 =
Production*1 Production Production*2 Production*3

[main]
NewModuleName := make-modulename(ModuleName, ModuleId),
NewSections := make-sections(Sections)
===>
generate-syntax(module ModuleName ImpSection* Sections, ModuleId) =
module ModuleId
imports basic/Booleans 
imports ModuleName
NewSections
hiddens imports basic/Whitespace


equations

[modid]
make-modulename(ModuleId1, ModuleId2) = ModuleId2


tests
[complex-name] make-modulename(Aap [X Y], Sjaak) == Sjaak [ X Y ]

equations

[sections]

Production* := collect-productions(Sections, ),
Symbol*     := collect-symbols(Sections, )
===>
make-sections(Sections) = 

exports
context-free syntax

generate-functions(Production*)

hiddens
variables

generate-variables(Symbol*)

equations

[no-variables]
generate-variables() =

[quoted-labelled]
generate-variables(Name : Symbol Symbol*) = 
generate-variables(Symbol Symbol*)

[non-labelled]
Name !:= Symbol,
Literal := symbol2string(Symbol)
===>
generate-variables(Symbol Symbol*) =
"$" Literal ++ "_" [0-9\']* -> Symbol 
generate-variables(Symbol*)

[default-ignore-symbol]
generate-variables(Symbol Symbol*) =
generate-variables(Symbol*)

equations

[done]
generate-functions() =

[single]
generate-functions(Production Production*) = 
generate-functions-prod(Production)
generate-functions(Production*)

equations

[main]

Field* := collect-labelled-symbols(Symbol* -> Symbol, ),
Symbol,* := Symbol
===>
generate-functions-prod(
Symbol* -> Symbol {Attribute*1, cons(Name), Attribute*2}
) = 
"is-" ++ Name ( Symbol,* ) -> Boolean 
generate-make(Name, Symbol*, Symbol)
generate-get-and-set(Field*, Symbol)

[default]
generate-functions-prod(Production) =

equations

[normalize-quoting]
generate-get-and-set(IdCon : Symbol, Result) =
generate-get-and-set(idcon2strcon(IdCon) : Symbol, Result)

[generate]
Symbol,* := Result
===>
generate-get-and-set(Name : Symbol, Result) =
"get-" ++ Name ( Symbol,* ) -> Symbol 
"set-" ++ Name ( Result, Symbol ) -> Result 

[loop]
generate-get-and-set(Symbol Symbol2 Symbol*, Result) =
generate-get-and-set(Symbol, Result)
generate-get-and-set(Symbol2 Symbol*, Result)

[empty]
generate-get-and-set( , Result) =

[default]
generate-get-and-set(Symbol, Result) = 

equations

[top]
Symbol,* := generate-make-fields(Field*)
===>
generate-make(Name, Field*, Result) =
"make-" ++ Name ( Symbol,* ) -> Result

[default-top]
generate-make(Name, Field*, Result) =

[first-remove-literals]
generate-make-fields(Symbol*1 Literal Symbol*2) =
generate-make-fields(Symbol*1 Symbol*2)

[default-many]
generate-make-fields(Field Field+) =
Field , generate-make-fields(Field+)

[default-single]
generate-make-fields(Field) = Field

[empty]
generate-make-fields() =

equations

[concat]
	strcon(\" c*1 \") ++ strcon(\" c*2 \") = strcon(\" c*1 c*2 \")

tests

[1] generate-make-fields(",") ==
[2] generate-make-fields(Bool "&" Bool) == Bool, Bool
[3] generate-make-fields(Bool) == Bool
[4] generate-make-fields(Bool Bool) == Bool, Bool
[5] generate-make-fields(Bool Bool Bool) == Bool, Bool, Bool

