/* This C code is generated by the asf compiler version 2.1 */

#include  "asc-support-me.h"
static Symbol lf_1sym ;
static ATerm lf_1 ( ) ;
static Symbol lf_2sym ;
static ATerm lf_2 ( ) ;
static Symbol lf_list_3sym ;
static ATerm lf_list_3 ( ATerm arg1 ) ;
static Symbol lf_4sym ;
static ATerm lf_4 ( ) ;
void register_List ( ) {
lf_1sym = ATmakeSymbol ( "prod([lit(\"b\")],cf(alt(lit(\"a\"),alt(lit(\"b\"),lit(\"c\")))),no-attrs)"
 , 0 , ATtrue ) ;
ATprotectSymbol ( lf_1sym ) ;
lf_2sym = ATmakeSymbol ( "prod([lit(\"a\")],cf(alt(lit(\"a\"),alt(lit(\"b\"),lit(\"c\")))),no-attrs)" , 0 , ATtrue ) ;
ATprotectSymbol ( lf_2sym ) ;
lf_list_3sym = ATmakeSymbol ( "list(cf(iter-star(alt(lit(\"a\"),alt(lit(\"b\"),lit(\"c\"))))))" , 1 , ATtrue ) ;
ATprotectSymbol ( lf_list_3sym ) ;
lf_4sym = ATmakeSymbol ( "prod([lit(\"c\")],cf(alt(lit(\"a\"),alt(lit(\"b\"),lit(\"c\")))),no-attrs)" , 0 , ATtrue ) ;
ATprotectSymbol ( lf_4sym ) ;
register_prod ( ATparse ( "prod([lit(\"b\")],cf(alt(lit(\"a\"),alt(lit(\"b\"),lit(\"c\")))),no-attrs)" ) , lf_1 , lf_1sym ) ;
register_prod ( ATparse ( "prod([lit(\"a\")],cf(alt(lit(\"a\"),alt(lit(\"b\"),lit(\"c\")))),no-attrs)" ) , lf_2 , lf_2sym ) ;
register_prod ( ATparse ( "list(cf(iter-star(alt(lit(\"a\"),alt(lit(\"b\"),lit(\"c\"))))))" ) , lf_list_3 , lf_list_3sym ) ;
register_prod ( ATparse ( "prod([lit(\"c\")],cf(alt(lit(\"a\"),alt(lit(\"b\"),lit(\"c\")))),no-attrs)" ) , lf_4 , lf_4sym ) ;
}
void resolve_List ( ) {
}
void init_List ( ) {
}
ATerm lf_list_3 ( ATerm arg0 ) {
{
ATerm tmp [ 7 ] ;
FUNC_ENTRY ( lf_list_3sym , ATmakeAppl ( lf_list_3sym , arg0 ) ) ;
{
ATerm ltmp [ 1 ] ;
lbl_lf_list_3 : ltmp [ 0 ] = arg0 ;
( tmp [ 0 ] = ltmp [ 0 ] ) ;
{
ATerm atmp00 [ 2 ] ;
( atmp00 [ 0 ] = tmp [ 0 ] ) ;
( atmp00 [ 1 ] = tmp [ 0 ] ) ;
while ( not_empty_list ( tmp [ 0 ] ) ) {
( tmp [ 1 ] = list_head ( tmp [ 0 ] ) ) ;
( tmp [ 0 ] = list_tail ( tmp [ 0 ] ) ) ;
if ( check_sym ( tmp [ 1 ] , lf_1sym ) ) {
if ( not_empty_list ( tmp [ 0 ] ) ) {
( tmp [ 2 ] = list_head ( tmp [ 0 ] ) ) ;
( tmp [ 0 ] = list_tail ( tmp [ 0 ] ) ) ;
if ( check_sym ( tmp [ 2 ] , lf_2sym ) ) {
( arg0 = cons ( slice ( atmp00 [ 0 ] , atmp00 [ 1 ] ) , cons ( make_list ( make_nf0 ( lf_2sym ) ) , cons ( make_list ( make_nf0 ( lf_1sym ) ) , tmp [ 0 ] ) ) ) ) ;
goto lbl_lf_list_3 ;
}
}
}
( atmp00 [ 1 ] = list_tail ( atmp00 [ 1 ] ) ) ;
( tmp [ 0 ] = atmp00 [ 1 ] ) ;
}
}
( tmp [ 0 ] = arg_0 ( ltmp [ 0 ] ) ) ;
{
ATerm atmp00 [ 2 ] ;
( atmp00 [ 0 ] = tmp [ 0 ] ) ;
( atmp00 [ 1 ] = tmp [ 0 ] ) ;
while ( not_empty_list ( tmp [ 0 ] ) ) {
( tmp [ 3 ] = list_head ( tmp [ 0 ] ) ) ;
( tmp [ 0 ] = list_tail ( tmp [ 0 ] ) ) ;
if ( check_sym ( tmp [ 3 ] , lf_4sym ) ) {
if ( not_empty_list ( tmp [ 0 ] ) ) {
( tmp [ 4 ] = list_head ( tmp [ 0 ] ) ) ;
( tmp [ 0 ] = list_tail ( tmp [ 0 ] ) ) ;
if ( check_sym ( tmp [ 4 ] , lf_1sym ) ) {
( arg0 = cons ( slice ( atmp00 [ 0 ] , atmp00 [ 1 ] ) , cons ( make_list ( make_nf0 ( lf_1sym ) ) , cons ( make_list ( make_nf0 ( lf_4sym ) ) , tmp [ 0 ] ) ) ) ) ;
goto lbl_lf_list_3 ;
}
}
}
( atmp00 [ 1 ] = list_tail ( atmp00 [ 1 ] ) ) ;
( tmp [ 0 ] = atmp00 [ 1 ] ) ;
}
}
( tmp [ 0 ] = arg_0 ( ltmp [ 0 ] ) ) ;
{
ATerm atmp00 [ 2 ] ;
( atmp00 [ 0 ] = tmp [ 0 ] ) ;
( atmp00 [ 1 ] = tmp [ 0 ] ) ;
while ( not_empty_list ( tmp [ 0 ] ) ) {
( tmp [ 5 ] = list_head ( tmp [ 0 ] ) ) ;
( tmp [ 0 ] = list_tail ( tmp [ 0 ] ) ) ;
if ( check_sym ( tmp [ 5 ] , lf_4sym ) ) {
if ( not_empty_list ( tmp [ 0 ] ) ) {
( tmp [ 6 ] = list_head ( tmp [ 0 ] ) ) ;
( tmp [ 0 ] = list_tail ( tmp [ 0 ] ) ) ;
if ( check_sym ( tmp [ 6 ] , lf_2sym ) ) {
( arg0 = cons ( slice ( atmp00 [ 0 ] , atmp00 [ 1 ] ) , cons ( make_list ( make_nf0 ( lf_2sym ) ) , cons ( make_list ( make_nf0 ( lf_4sym ) ) , tmp [ 0 ] ) ) ) ) ;
goto lbl_lf_list_3 ;
}
}
}
( atmp00 [ 1 ] = list_tail ( atmp00 [ 1 ] ) ) ;
( tmp [ 0 ] = atmp00 [ 1 ] ) ;
}
}
FUNC_EXIT ( make_nf1 ( lf_list_3sym , ltmp [ 0 ] ) ) ;
}
}
}
ATerm lf_4 ( ) {
CONS_ENTRY ( lf_4sym , ATmakeAppl0 ( lf_4sym ) ) ;
CONS_EXIT ( make_nf0 ( lf_4sym ) ) ;
}
ATerm lf_2 ( ) {
CONS_ENTRY ( lf_2sym , ATmakeAppl0 ( lf_2sym ) ) ;
CONS_EXIT ( make_nf0 ( lf_2sym ) ) ;
}
ATerm lf_1 ( ) {
CONS_ENTRY ( lf_1sym , ATmakeAppl0 ( lf_1sym ) ) ;
CONS_EXIT ( make_nf0 ( lf_1sym ) ) ;
}
#ifdef ASF_MAIN                                           
int main(int argc, char *argv[])                         
{                                                        
  return asc_support_main(argc, argv,                    
                          register_List,                   
                          resolve_List,                    
                          init_List);                      
}                                                        
#endif                                                   

