#ifndef __JAVA_ACTIONS__
#define __JAVA_ACTIONS__

#include <config-utils.tb>
#include <java-namespace.h>
#include <gui-utils.tb>

process ChangeWorkspaceAction is
let
  Cancel: bool,
  Path: str
in
  PromptForDirectory("Workspace", [], Cancel?, Path?)
  .
  if equal(Cancel, true) then
    tau
  else
    snd-msg(cm-change-workspace(Path))
  fi
endlet

process CloseAllAction is
let
  Id: term,
  ModuleId: term,
  Modules: list
in
  Id := process-id
  . MM-GetAllModules(Modules?)
  . CloseModules(Modules)
endlet

process NewModuleAction is
let
  Cancel: bool,
  Extension : str,
  Directory : str,
  Pid: int,
  FileName : str,
  Path : str,
  Paths: list
in
  GetSearchPaths(Paths?)
  . PromptForFileWithExtension("New Module", Paths, JAVA_EXTENSION, Cancel?, Path?)
  .
  if equal(Cancel, true) then
    tau
  else
    SplitFilename(Path, FileName?, Directory?, Extension?)
    . create(NewModuleContentHandler(), Pid?)
    . CreateNewModule(Pid, Directory, FileName)
  fi
endlet

process OpenModuleAction is
let
  Cancel: bool,
  Extension : str,
  Directory : str,
  Path : str,
  Filename : str,
  RelativeFilename : str,
  ModuleId : term,
  Paths: list,
  FoundPath: str,
  Prefix: str
in
  GetSearchPaths(Paths?)
  . PromptForFileWithExtension("Open Module", Paths, JAVA_EXTENSION, Cancel?, Path?)
  .
  if equal(Cancel, true) then
    tau
  else
    if equal(Path, "") then
      tau
    else
      SplitFilename(Path, Filename?, Directory?, Extension?)
      . snd-msg(io-get-relative-filename(Paths, Path, Extension))
      . rec-msg(io-filename(Paths, Path, Extension, Prefix?, RelativeFilename?))
      . BuildPath(Prefix, RelativeFilename, Extension, FoundPath?)
      .
      if equal(FoundPath, Path) then
        OpenModule(RelativeFilename, ModuleId?)
        . SelectModule(ModuleId)
      else
        Error("The chosen Module is shadowed by another module in the search path: %t", [FoundPath])
      fi
    fi
  fi
endlet


process DumpParseTableAction(ModuleId : term) is
let
  Cancel: bool,
  Path : str
in
  PromptForFileWithExtension("Export Term ParseTable", [], ".trm.tbl", Cancel?, Path?)
  .
  if equal(Cancel, true) then
    tau
  else
    DumpParseTable(ModuleId, Path, trm)
  fi
endlet

process EditorDumpParseTableAction(EditorId : term) is
let
  Cancel: bool,
  Path : str,
  ModuleId : term
in
  GetModuleId(EditorId, ModuleId?)
  . PromptForFileWithExtension("Export Term ParseTable", [], ".trm.tbl", Cancel?, Path?)
  .
  if equal(Cancel, true) then
    tau
  else
    DumpParseTable(ModuleId, Path, trm)
  fi
endlet

process DumpJavaDefinitionAction(ModuleId : term) is
let
  Cancel: bool,
  Path : str
in
  PromptForFileWithExtension("Export JAVA Definition", [], ".def", Cancel?, Path?)
  .
  if equal(Cancel, true) then
    tau
  else
    DumpJavaDefinition(ModuleId, Path)
  fi
endlet


process CloseModuleAction(ModuleId : term) is
let
  Answer     : term,
  Recursive  : bool
in
  AskQuestion("Do you want to recursively close the imported modules?", Answer?)
  . if equal(Answer, cancel) then
      tau
    else
      if equal(Answer, yes) then
        Recursive := true
      else
        Recursive := false
      fi 
      . CloseModule(ModuleId, Recursive)
    fi
endlet

#endif /*__JAVA_ACTIONS__*/
