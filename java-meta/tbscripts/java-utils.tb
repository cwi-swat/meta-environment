#ifndef __JAVA_UTILS__
#define __JAVA_UTILS__

/*#include <sdf-modules.idef>*/
#include <parse-utils.tb>
#include <error-utils.tb>
#include <io-utils.tb>
#include <config-utils.tb>

#define JAVA_TREE_CACHE "java-annotated-tree"

process NewModuleContentHandler is
let
  ModuleId: str,
  Pid: int
in
  Pid := process-id
  .
  (
    rec-msg(get-module-contents(Pid, ModuleId?))
    . TODO("Implement new module template")
    . snd-msg(module-contents(Pid, ["module ", ModuleId, "\n\nexports\n  sorts\n\n  lexical syntax\n\n  context-free syntax\n\nhiddens\n  context-free start-symbols\n\n  lexical variables\n\n  variables\n\n"]))
  +
    rec-msg(cancel-content-handler(Pid))
  )
endlet


process DumpParseTable(ModuleId : term, Filename : str, Type : term) is
let
  Directory: str,
  Error: term,
  Extension: str,
  Id: term,
  NewFilename: str,
  NewPath: str,
  Path: str,
  Table: term
in
  AddJob(Filename)
  . Id := process-id
  . snd-msg(get-parsetable(ModuleId, Type))
  .
  (
    rec-msg(parsetable(ModuleId, Type, Table?))
    . GetModulePath(ModuleId, JAVA_NAMESPACE, Path?)
    .
    if equal(Filename, "") then
      TODO("DumpParseTable got empty filename")
    else
      NewFilename := Filename
    fi
    . snd-msg(io-unpack-and-write-term-in-baf(NewFilename, Table))
    .
    (
      rec-msg(io-file-written)
    +
      rec-msg(io-file-not-written(Error?))
    )
  +
    rec-msg(no-parsetable(ModuleId))
  )
  . JobDone(Filename)
endlet

process DumpJavaDefinition(ModuleId: term, Filename: str) is
let
  Syntax: term,
  Path: str,
  Text: str,
  Error: term,
  ErrorMessage: str
in
  AddJob(Filename)
  . GetSyntaxDefinition(ModuleId, Syntax?)
  .
  if not-equal(Syntax, UNDEFINED) then
    GetModulePath(ModuleId, JAVA_NAMESPACE, Path?)
    . snd-msg(unparse(Syntax))
    . rec-msg(unparsed-text(Text?))
    . snd-msg(io-write-text-list(Filename, [Text]))
    .
    (
      rec-msg(io-file-written)
    +
      rec-msg(io-file-not-written(Error?))
    )
  else
    tau
  fi
  . JobDone(Filename)
endlet

process GetModules(ModuleIds: list, Modules: list?) is
let
  Runner: list,
  Result: list,
  ModuleTree: term,
  ModuleId: term,
  Incomplete: bool
in
  Runner := ModuleIds
  . Result := []
  .
  if and(not-equal(Runner, []),not-equal(Incomplete,true)) then
    ModuleId := first(Runner)
    . GetJAVAParseTree(ModuleId, ModuleTree?)
    . 
    if equal(ModuleTree, UNDEFINED) then
      Incomplete := true
    else
      tau
    fi
    . Result := join(ModuleTree, Result) 
    . Runner := next(Runner) 
  fi
  *
  if or(equal(Runner, []),equal(Incomplete,true)) then
    tau
  fi
  .
  if equal(Incomplete, true) then
    Modules := []
  else
    Modules := Result
  fi
endlet

process GetSyntaxDefinition(ModuleId: term, Syntax: term?) is
let
  ModuleIds: list,
  Modules: list,
  Status: term
in
  MM-GetAttribute(ModuleId, JAVA_NAMESPACE, "status", Status?)
  .
  if equal(Status, complete) then
    MM-GetAllModuleDependencies(ModuleId, ModuleIds?)
    . ModuleIds := join([ModuleId], ModuleIds)
    . GetModules(ModuleIds, Modules?)
    . 
    if equal(Modules, []) then
      Syntax := UNDEFINED
    else
      snd-msg(sm-make-java-definition(Modules))
      .
      (
        rec-msg(sm-java-definition(Syntax?))
      +
        rec-msg(sm-no-java-definition)
        . Syntax := UNDEFINED
      )
    fi
  else
    Syntax := UNDEFINED
  fi
endlet

process GetImportedModulenames(Tree: term, Imports: list?) is
  snd-msg(sm-get-imported-module-names(Tree))
  . rec-msg(sm-imported-module-names(Imports?)) 

process CloseModule(ModuleId: term, Recursive: bool) is
let
  Dependencies: list,
  Modulename: str,
  CloseModules: list,
  NewTerm: term
in
  MM-GetAttribute(ModuleId, JAVA_NAMESPACE, "name", Modulename?)
  .
  if equal(Recursive, true) then
    MM-GetClosableModules(ModuleId, CloseModules?)
    .
    if equal(CloseModules, []) then
      Error("Unable to close %s, it would break some import(s).", [Modulename])
    else
      CloseModules(CloseModules)
    fi
  else
    MM-GetModuleParents(ModuleId, Dependencies?)
    .
    if equal(Dependencies, []) then
      CloseModules([ModuleId])
    else
      Error("Unable to close %s, it would break the import of: %t",
            [Modulename, Dependencies])
    fi
  fi
endlet

process CloseModules(CloseModules: list) is
let
  ModuleId: term,
  Modules: list
in
  Modules := quote(CloseModules)
  .
  if not-equal(Modules, []) then
    ModuleId := first(Modules)
    /* . DeleteSessions(ModuleId) */
    . MM-DeleteModule(ModuleId)
    . Modules := next(Modules)
  fi
  *
  if equal(Modules, []) then
    tau
  fi
endlet

process CancelCreateNewModule(Pid: int, Error: str, Args: list) is
  snd-note(ui-status(errorf(Error, Args)))
  . snd-msg(cancel-content-handler(Pid))

process CreateNewModule(Pid: int, Directory: str, Filename: str) is
let
  BaseDir: str,
  Contents: list,
  Error: term,
  Extension: str,
  ModuleId: term,
  Modulename: str,
  Path: str,
  SearchPaths: list
in
  snd-msg(cm-get-module-paths)
  . rec-msg(cm-module-paths(SearchPaths?))
  . snd-msg(sm-get-new-module-name(SearchPaths, Directory, Filename))
  .
  (
    rec-msg(sm-new-module-name(BaseDir?, Modulename?))
    . MM-GetModuleIdByAttribute(JAVA_NAMESPACE, "name", Modulename, ModuleId?)
    .
    if equal(ModuleId, UNDEFINED) then
      BuildPath(BaseDir, Modulename, JAVA_EXTENSION, Path?)
      . snd-msg(io-exists-file(Path))
      .
      (
        rec-msg(io-file-exists)
        . CancelCreateNewModule(Pid, "File %s already exists", [Path])
      +
        rec-msg(io-file-not-exists)
        . snd-msg(get-module-contents(Pid, Modulename))
        . rec-msg(module-contents(Pid, Contents?))
        . snd-msg(io-write-text-list(Path, Contents))
        .
        (
          rec-msg(io-file-written)
          . OpenModule(Modulename, ModuleId?)
        +
          rec-msg(io-file-not-written(Error?))
          . snd-note(ui-status(errorf("%s: %s", [Path, Error])))
        )
      )
    else
      CancelCreateNewModule(Pid, "Module %s already exists", [Modulename])
    fi
  +
    rec-msg(sm-new-module-name-inconsistent)
    . CancelCreateNewModule(Pid,
                         "Module %s in %s is inconsistent with module paths",
                         [Filename, Path])
  )
endlet

process CopyJavaModule(SrcModulename: str, Directory: str, Filename: str) is
let
  Id: int,
  Pid: int
in
  Id := process-id
  . snd-note(ui-status(statf(Id, "Copying %s to %s", [SrcModulename, Filename])))
  . create(CopyJavaContentHandler(SrcModulename), Pid?)
  . CreateNewModule(Pid, Directory, Filename)
  . snd-note(ui-status(endstat(Id)))
endlet

process CopyJavaContentHandler(SrcModulename: str) is
let
  Contents: str,
  DestModulename: str,
  Pid: int,
  Syntax: term
in
  Pid := process-id
  .
  (
    rec-msg(get-module-contents(Pid, DestModulename?))
    . snd-msg(ts-get-term-value("java-tree", SrcModulename))
    . rec-msg(ts-value("java-tree", SrcModulename, Syntax?))
    . snd-msg(sm-rename-modulename-in-module(Syntax, DestModulename))
    . rec-msg(sm-modulename-renamed-in-module(Syntax?))
    . snd-msg(unparse(Syntax))
    . rec-msg(unparsed-text(Contents?))
    . snd-msg(module-contents(Pid, [Contents]))
  +
    rec-msg(cancel-content-handler(Pid))
  )
endlet

process SaveJavaModules(Modules: list, Status: term?) is
let
  Runner: list,
  Module: str
in
  Runner := Modules
  .
  if not-equal(Runner, []) then
    Module := first(Runner)
    . snd-msg(save-module(Module, java))
    . rec-msg(saved-module(Module, Status?))
    . Runner := next(Runner)
  fi
  *
  if equal(Runner, []) then
    tau
  fi
endlet

/* TODO: The following should be DEAD */
process RenameImports(OldImport: str, NewImport: str) is
let
  ImportRelations: list,
  ModuleId: str,
  Depending: list
in
  snd-msg(ts-get-key-value-pairs("import-relations"))
  . rec-msg(ts-pairs("import-relations", ImportRelations?))
  . snd-msg(sm-get-depending-module-names(ImportRelations, OldImport))
  . rec-msg(sm-depending-module-names(Depending?))
  .
  if not-equal(Depending, []) then
    ModuleId := first(Depending)
    . RenameImport(ModuleId, OldImport, NewImport)
    . Depending := next(Depending)
  fi
  *
  if equal(Depending, []) then
    tau
  fi
endlet

process RenameImport(Modulename: str, OldImport: str, NewImport: str) is
let
  Status: term,
  Tree: term
in
  snd-msg(ts-get-term-value("java-tree", Modulename))
  . rec-msg(ts-value("java-tree", Modulename, Tree?))
  . snd-msg(sm-remove-import-from-module(Tree, OldImport))
  . rec-msg(sm-import-removed-from-module(Tree?))
  . snd-msg(sm-add-import-to-module(Tree, NewImport))
  . rec-msg(sm-import-added-to-module(Tree?))
  /* . MDB-StoreModuleTree(Modulename, Tree) dead */
  . snd-msg(save-module(Modulename, java))
  . rec-msg(saved-module(Modulename, Status?))
endlet

/* end of dead code */

process IsLibraryModule(ModuleId: term, LibraryModule: bool?) is
let
  Directories: list,
  Extension: str,
  Filename: str,
  Modulename: str,
  Path: str,
  Prefix: str
in
  snd-msg(cm-get-library-paths)
  . rec-msg(cm-library-paths(Directories?))
  . GetModulePath(ModuleId, JAVA_NAMESPACE, Path?)
  . snd-msg(io-get-relative-filename(Directories, Path, ".java"))
  . rec-msg(io-filename(Directories, Path, ".java", Prefix?, Filename?))
  .
  if equal(Filename, "") then
    LibraryModule := false
  else
    LibraryModule := true
  fi
endlet

process CreateModule(Modulename: str, ModuleId: term?) is
  MM-GetModuleIdByAttribute(JAVA_NAMESPACE, "name", Modulename, ModuleId?)
  .
  if equal(ModuleId, UNDEFINED) then
    MM-CreateModule(ModuleId?)
    . MM-SetAttribute(ModuleId, JAVA_NAMESPACE, "name", Modulename)
    . MM-SetAttribute(ModuleId, JAVA_NAMESPACE, "status", unknown)
  else
    tau
  fi

process OpenModule(Modulename: str, ModuleId: term?) is
let
  Editable: bool,
  LibraryModule: bool,
  Path: str
in
  CreateModule(Modulename, ModuleId?)
  . GetModulePath(ModuleId, JAVA_NAMESPACE, Path?)
  .
  if equal(Path, EMPTY_PATH) then
    LocateFile(Modulename, JAVA_EXTENSION, Path?)
    .
    if equal(Path, EMPTY_PATH) then
      Error("Unable to locate module: %s", [Modulename])
      . BuildPath(".", Modulename, JAVA_EXTENSION, Path?)
      . SetModulePath(ModuleId, JAVA_NAMESPACE, Path)
      . MM-SetAttribute(ModuleId, JAVA_NAMESPACE, "editable", true)
      . MM-SetAttribute(ModuleId, JAVA_NAMESPACE, "status", unavailable)
    else
      SetModulePath(ModuleId, JAVA_NAMESPACE, Path)
      . IsLibraryModule(ModuleId, LibraryModule?)
      . Editable := not(LibraryModule)
      . MM-SetAttribute(ModuleId, JAVA_NAMESPACE, "editable", Editable)
      . MM-SetAttribute(ModuleId, JAVA_NAMESPACE, "status", available)
    fi
  else
    tau
  fi
endlet

toolbus(InitCache(JAVA_TREE_CACHE))
toolbus(ClearCacheHandler(JAVA_TREE_CACHE, JAVA_NAMESPACE, "status", <term>, edited))

process GetJAVAParseTree(ModuleId: term, Result: term?) is
let
  ParseTable: term,
  Path: str,
  Pid: int,
  Text: str,
  Type: term,
  Tree: term
in
  GetCachedValue(JAVA_TREE_CACHE, ModuleId, Tree?)
  .
  if equal(Tree, UNDEFINED) then
    Type := java
    . GetModulePath(ModuleId, JAVA_NAMESPACE, Path?)
    . ReadFile(Path, Text?)
    .
    if not-equal(Text, "") then
      GetParseTable(ModuleId, Type, ParseTable?)
      .
      if not-equal(ParseTable, UNDEFINED) then
        create(ParseTreeHandler(ModuleId, Path), Pid?)
        . ParseText(Pid, Text, ParseTable, JAVA_TOPSORT, on)
        .
        (
          rec-msg(parse-handler-done(Pid, ModuleId, Tree?))
          . AnnotateTree(Tree, Path, Result?)
          . PutCachedValue(JAVA_TREE_CACHE, ModuleId, Result)
        +
          rec-msg(parse-handler-done(Pid))
          . Result := UNDEFINED
        )
      else
        Result := UNDEFINED
      fi
    else
      Result := UNDEFINED
    fi
  else
    Result := Tree
  fi
endlet

process JAVAIdentifyModule(ModuleId: term, ResultStatus: term?) is
let
  Tree: term,
  Path: str,
  Directory: str,
  Modulename: str,
  File: str
in
  GetJAVAParseTree(ModuleId, Tree?)
  .
  if not-equal(Tree, UNDEFINED) then
    GetModulePath(ModuleId, JAVA_NAMESPACE, Path?)
    . snd-msg(sm-get-module-id(Tree))
    . rec-msg(sm-module-id(Modulename?))
    . snd-msg(io-get-path-directory(Path))
    . rec-msg(io-directory(Path, Directory?))
    . snd-msg(sm-get-module-path(Directory, Modulename))
    . rec-msg(sm-module-path(Directory?))
    . BuildPath(Directory, Modulename, JAVA_EXTENSION, File?)
    .
    if equal(File, Path) then
      MM-SetAttribute(ModuleId, JAVA_NAMESPACE, "name", Modulename)
      . ResultStatus := identified
    else
      Error("Module %s should be in a file named %s\n", [Modulename, File])
      . ResultStatus := error
    fi
  else
    tau
  fi
endlet


process GetImportsForRenaming(ModuleId: term, ModuleIds: list, Imports: term?) is
let
  Modulename: str,
  Modules: list
in
  GetModules(ModuleIds, Modules?)
  .
  if equal(Modules, []) then
    Imports := []
  else
    MM-GetAttribute(ModuleId, JAVA_NAMESPACE, "name", Modulename?)
    . snd-msg(sm-get-all-needed-imports(Modules, Modulename))
    . rec-msg(sm-all-needed-imports(Imports?))
  fi
endlet

#endif
