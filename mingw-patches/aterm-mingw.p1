Index: aterm/gc.c
===================================================================
--- aterm/gc.c	(revision 29360)
+++ aterm/gc.c	(working copy)
@@ -230,58 +230,6 @@
   AFun oddSym;
 #endif
 
-#ifdef WIN32
-
-  unsigned int r_eax, r_ebx, r_ecx, r_edx, \
-    r_esi, r_edi, r_esp, r_ebp;
-  ATerm reg[8], real_term;
-
-  __asm {
-      /* Get the registers into local variables to check them
-         for aterms later. */
-    mov r_eax, eax
-      mov r_ebx, ebx
-      mov r_ecx, ecx
-      mov r_edx, edx
-      mov r_esi, esi
-      mov r_edi, edi
-      mov r_esp, esp
-      mov r_ebp, ebp
-      }
-    /* Put the register-values into an array */
-  reg[0] = (ATerm) r_eax;
-  reg[1] = (ATerm) r_ebx;
-  reg[2] = (ATerm) r_ecx;
-  reg[3] = (ATerm) r_edx;
-  reg[4] = (ATerm) r_esi;
-  reg[5] = (ATerm) r_edi;
-  reg[6] = (ATerm) r_esp;
-  reg[7] = (ATerm) r_ebp;
-
-  for(i=0; i<8; i++) {
-    real_term = AT_isInsideValidTerm(reg[i]);
-    if (real_term != NULL) {
-      AT_markTerm(real_term);
-    }
-    if (AT_isValidSymbol((Symbol)reg[i])) {
-      AT_markSymbol((Symbol)reg[i]);
-    }
-  }
-
-    /* The register variables are on the stack aswell
-       I set them to zero so they won't be processed again when
-       the stack is traversed. The reg-array is also in the stack
-       but that will be adjusted later */
-  r_eax = 0;
-  r_ebx = 0;
-  r_ecx = 0;
-  r_edx = 0;
-  r_esi = 0;
-  r_edi = 0;
-  r_esp = 0;
-  r_ebp = 0;
-
-#else
   jmp_buf env;
 
   /* Traverse possible register variables */
@@ -290,7 +238,6 @@
   start = (ATerm *)((char *)env);
   stop  = ((ATerm *)(((char *)env) + sizeof(jmp_buf)));
   mark_memory(start, stop, ATtrue);
-#endif
 
   stackTop = stack_top();
 
@@ -355,58 +302,6 @@
   AFun oddSym;
 #endif
 
-#ifdef WIN32
-
-  unsigned int r_eax, r_ebx, r_ecx, r_edx, \
-    r_esi, r_edi, r_esp, r_ebp;
-  ATerm reg[8], real_term;
-
-  __asm {
-      /* Get the registers into local variables to check them
-         for aterms later. */
-    mov r_eax, eax
-      mov r_ebx, ebx
-      mov r_ecx, ecx
-      mov r_edx, edx
-      mov r_esi, esi
-      mov r_edi, edi
-      mov r_esp, esp
-      mov r_ebp, ebp
-      }
-    /* Put the register-values into an array */
-  reg[0] = (ATerm) r_eax;
-  reg[1] = (ATerm) r_ebx;
-  reg[2] = (ATerm) r_ecx;
-  reg[3] = (ATerm) r_edx;
-  reg[4] = (ATerm) r_esi;
-  reg[5] = (ATerm) r_edi;
-  reg[6] = (ATerm) r_esp;
-  reg[7] = (ATerm) r_ebp;
-
-  for(i=0; i<8; i++) {
-    real_term = AT_isInsideValidTerm(reg[i]);
-    if (real_term != NULL) {
-      AT_markTerm_young(real_term);
-    }
-    if (AT_isValidSymbol((Symbol)reg[i])) {
-       AT_markSymbol_young((Symbol)reg[i]);
-    }
-  }
-
-    /* The register variables are on the stack aswell
-       I set them to zero so they won't be processed again when
-       the stack is traversed. The reg-array is also in the stack
-       but that will be adjusted later */
-  r_eax = 0;
-  r_ebx = 0;
-  r_ecx = 0;
-  r_edx = 0;
-  r_esi = 0;
-  r_edi = 0;
-  r_esp = 0;
-  r_ebp = 0;
-
-#else
   jmp_buf env;
 
     /* Traverse possible register variables */
@@ -415,7 +310,6 @@
   start = (ATerm *)((char *)env);
   stop  = ((ATerm *)(((char *)env) + sizeof(jmp_buf)));
   mark_memory_young(start, stop, ATtrue);
-#endif
 
   stackTop = stack_top();
   start = MIN(stackTop, stackBot);
Index: Makefile.am
===================================================================
--- Makefile.am	(revision 29360)
+++ Makefile.am	(working copy)
@@ -1,6 +1,6 @@
 include $(top_srcdir)/Makefile.top.meta
 
-SUBDIRS = aterm utils test  
+SUBDIRS = aterm utils
 
 EXTRA_DIST += \
 	aterm.spec \
